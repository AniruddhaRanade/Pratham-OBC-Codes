
hMaster_Torqtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000566  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800108  00800108  00000602  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a6c  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1e  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aaf  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000038ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072d  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064b  00000000  00000000  000041b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 39       	cpi	r26, 0x9A	; 154
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  c6:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
  ea:	8c b1       	in	r24, 0x0c	; 12
  ec:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
  f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
  f8:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
  fc:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 10c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 110:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 114:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  buffer &= 0xFFFFFF00;
 118:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 11c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 120:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 124:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 128:	88 27       	eor	r24, r24
 12a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 12e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 132:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 136:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  buffer |= (uint32_t) last_byte;
 13a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <last_byte>
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 146:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 14a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 14e:	82 2b       	or	r24, r18
 150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 154:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 158:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 15c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 164:	8c 30       	cpi	r24, 0x0C	; 12
 166:	a0 f4       	brcc	.+40     	; 0x190 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 168:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
 16c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e2 5f       	subi	r30, 0xF2	; 242
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
 182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 186:	8c 30       	cpi	r24, 0x0C	; 12
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xc2>
      pos = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 190:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 194:	8c 30       	cpi	r24, 0x0C	; 12
 196:	a0 f4       	brcc	.+40     	; 0x1c0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 198:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
 19c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e6 5e       	subi	r30, 0xE6	; 230
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
    
    vel++;
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
 1b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0xf2>
      vel = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	c0 f4       	brcc	.+48     	; 0x1f8 <__vector_18+0x12a>
  {
    if(dop >= 2)
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
 1d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e2 50       	subi	r30, 0x02	; 2
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 83       	st	Z, r24
      
    dop++;
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x12a>
      dop = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	c0 f4       	brcc	.+48     	; 0x230 <__vector_18+0x162>
  {
    if(geo >= 4)
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	40 f0       	brcs	.+16     	; 0x218 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 208:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
 20c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 5d       	subi	r30, 0xDE	; 222
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
    
    geo++;
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
 222:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_18+0x162>
      geo = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	b8 f4       	brcc	.+46     	; 0x266 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 238:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
 23c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 5c       	subi	r30, 0xCE	; 206
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
    
    time++;
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_18+0x198>
    {
      time = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 266:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 26a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 26e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 272:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 276:	8c 3a       	cpi	r24, 0xAC	; 172
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	af 43       	sbci	r26, 0x3F	; 63
 27c:	bf 43       	sbci	r27, 0x3F	; 63
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x1bc>
  {
    message_end = 0;
 280:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    pos = 0;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
 288:	3f c0       	rjmp	.+126    	; 0x308 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 28a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 28e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 292:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 296:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	95 40       	sbci	r25, 0x05	; 5
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	19 f4       	brne	.+6      	; 0x2aa <__vector_18+0x1dc>
    vel = 0;
 2a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2b2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2b6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2ba:	8c 3a       	cpi	r24, 0xAC	; 172
 2bc:	9b 40       	sbci	r25, 0x0B	; 11
 2be:	af 43       	sbci	r26, 0x3F	; 63
 2c0:	bf 43       	sbci	r27, 0x3F	; 63
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__vector_18+0x1fc>
    dop = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2d2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2d6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2da:	8c 3a       	cpi	r24, 0xAC	; 172
 2dc:	9e 40       	sbci	r25, 0x0E	; 14
 2de:	af 43       	sbci	r26, 0x3F	; 63
 2e0:	bf 43       	sbci	r27, 0x3F	; 63
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_18+0x21c>
    geo = 0;
 2e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 2ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2f2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2f6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2fa:	8c 3a       	cpi	r24, 0xAC	; 172
 2fc:	9f 40       	sbci	r25, 0x0F	; 15
 2fe:	af 43       	sbci	r26, 0x3F	; 63
 300:	bf 43       	sbci	r27, 0x3F	; 63
 302:	11 f4       	brne	.+4      	; 0x308 <__vector_18+0x23a>
    time = 0;
 304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 310:	84 3f       	cpi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	f0 f4       	brcc	.+60     	; 0x352 <__vector_18+0x284>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31e:	89 2b       	or	r24, r25
 320:	c1 f0       	breq	.+48     	; 0x352 <__vector_18+0x284>
 322:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 326:	88 23       	and	r24, r24
 328:	a1 f0       	breq	.+40     	; 0x352 <__vector_18+0x284>
  {
    GPS_done = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 330:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
 33e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    buffer = 0;
 342:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <buffer>
 346:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buffer+0x1>
 34a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <buffer+0x2>
 34e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <buffer+0x3>
  }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:
{
	/*char array[40];
	char array1[40];
	char array2[40];
	*/
	DDRA = 0xF0;
 36e:	80 ef       	ldi	r24, 0xF0	; 240
 370:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 372:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	39 e6       	ldi	r19, 0x69	; 105
 378:	98 e1       	ldi	r25, 0x18	; 24
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	30 40       	sbci	r19, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0xc>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x16>
 384:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 386:	1b ba       	out	0x1b, r1	; 27
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	39 e6       	ldi	r19, 0x69	; 105
 38c:	98 e1       	ldi	r25, 0x18	; 24
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	30 40       	sbci	r19, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x20>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x2a>
 398:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 39a:	8b bb       	out	0x1b, r24	; 27
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	39 e6       	ldi	r19, 0x69	; 105
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	30 40       	sbci	r19, 0x00	; 0
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x34>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x3e>
 3ac:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3ae:	1b ba       	out	0x1b, r1	; 27
 3b0:	9f ef       	ldi	r25, 0xFF	; 255
 3b2:	29 e6       	ldi	r18, 0x69	; 105
 3b4:	38 e1       	ldi	r19, 0x18	; 24
 3b6:	91 50       	subi	r25, 0x01	; 1
 3b8:	20 40       	sbci	r18, 0x00	; 0
 3ba:	30 40       	sbci	r19, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x48>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x52>
 3c0:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3c2:	0e 94 98 02 	call	0x530	; 0x530 <init_UART0>
 
	configure_torquer();
 3c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <configure_torquer>
 3ca:	8b e9       	ldi	r24, 0x9B	; 155
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	01 97       	sbiw	r24, 0x01	; 1
	int size_sun = 12;
	int size_gps = 155;
	uint8_t mag[size_mag];
	uint8_t sun[size_sun];
	uint8_t gps[size_gps];
		for(int i=0; i<size_gps; i++){
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x60>
	

	while(1){              
	
		
	init_UART0();
 3d2:	0f 2e       	mov	r0, r31
 3d4:	fb e9       	ldi	r31, 0x9B	; 155
 3d6:	ef 2e       	mov	r14, r31
 3d8:	f0 2d       	mov	r31, r0
 3da:	f1 2c       	mov	r15, r1
		gps[i] = receive_UART0();
		count = count + 1;
	}
	
	for(int i=0; i<size_mag; i++){
		mag[i] = receive_UART0();
 3dc:	0f 2e       	mov	r0, r31
 3de:	fc e0       	ldi	r31, 0x0C	; 12
 3e0:	bf 2e       	mov	r11, r31
 3e2:	f0 2d       	mov	r31, r0
 3e4:	c1 2c       	mov	r12, r1
		count = count + 1;
	}
	
	
	for(int iter=0; iter<2; iter++){
		PORTA = 0xA0;
 3e6:	00 ea       	ldi	r16, 0xA0	; 160
		_delay_ms(1000);
		PORTA = 0x50;
 3e8:	10 e5       	ldi	r17, 0x50	; 80
		//_delay_ms(500);
		_delay_ms(1000);
	}	
	
	init_UART0();
 3ea:	d1 2c       	mov	r13, r1
	

	while(1){              
	
		
	init_UART0();
 3ec:	0e 94 98 02 	call	0x530	; 0x530 <init_UART0>
 3f0:	ce 2d       	mov	r28, r14
 3f2:	df 2d       	mov	r29, r15
	int count = 0;
	
	for(int i=0; i<size_gps; i++){
		gps[i] = receive_UART0();
 3f4:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 3f8:	21 97       	sbiw	r28, 0x01	; 1
	
		
	init_UART0();
	int count = 0;
	
	for(int i=0; i<size_gps; i++){
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x86>
		gps[i] = receive_UART0();
		count = count + 1;
	}
	
	for(int i=0; i<size_mag; i++){
		mag[i] = receive_UART0();
 3fc:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 400:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 404:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 408:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 40c:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 410:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 414:	cb 2d       	mov	r28, r11
 416:	dc 2d       	mov	r29, r12
		count = count + 1;
	}
	
	for(int i=0; i<size_sun; i++){
		sun[i] = receive_UART0();
 418:	0e 94 ad 02 	call	0x55a	; 0x55a <receive_UART0>
 41c:	21 97       	sbiw	r28, 0x01	; 1
	for(int i=0; i<size_mag; i++){
		mag[i] = receive_UART0();
		count = count + 1;
	}
	
	for(int i=0; i<size_sun; i++){
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	35 c0       	rjmp	.+106    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	
	uint8_t send_digit = 1;
	if(count == 173){
	for(int iter=0; iter<6; iter++){
		uint8_t send_digit = iter;
		transmit_UART0(send_digit);
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 a9 02 	call	0x552	; 0x552 <transmit_UART0>
 428:	8f ec       	ldi	r24, 0xCF	; 207
 42a:	97 e0       	ldi	r25, 0x07	; 7
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	cf 5f       	subi	r28, 0xFF	; 255
	
	init_UART0();
	
	uint8_t send_digit = 1;
	if(count == 173){
	for(int iter=0; iter<6; iter++){
 436:	c6 30       	cpi	r28, 0x06	; 6
 438:	a1 f7       	brne	.-24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		_delay_ms(1);
	}
	}
	
	for(int iter=0; iter<2; iter++){
		PORTA = 0xA0;
 43a:	0b bb       	out	0x1b, r16	; 27
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	24 e3       	ldi	r18, 0x34	; 52
 440:	3c e0       	ldi	r19, 0x0C	; 12
 442:	91 50       	subi	r25, 0x01	; 1
 444:	20 40       	sbci	r18, 0x00	; 0
 446:	30 40       	sbci	r19, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
		_delay_ms(500);
		PORTA = 0x50;
 44e:	1b bb       	out	0x1b, r17	; 27
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	94 e3       	ldi	r25, 0x34	; 52
 454:	2c e0       	ldi	r18, 0x0C	; 12
 456:	81 50       	subi	r24, 0x01	; 1
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	20 40       	sbci	r18, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
		_delay_ms(1);
	}
	}
	
	for(int iter=0; iter<2; iter++){
		PORTA = 0xA0;
 462:	0b bb       	out	0x1b, r16	; 27
 464:	3f ef       	ldi	r19, 0xFF	; 255
 466:	84 e3       	ldi	r24, 0x34	; 52
 468:	9c e0       	ldi	r25, 0x0C	; 12
 46a:	31 50       	subi	r19, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
		_delay_ms(500);
		PORTA = 0x50;
 476:	1b bb       	out	0x1b, r17	; 27
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	34 e3       	ldi	r19, 0x34	; 52
 47c:	8c e0       	ldi	r24, 0x0C	; 12
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	30 40       	sbci	r19, 0x00	; 0
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
 48a:	b0 cf       	rjmp	.-160    	; 0x3ec <main+0x7e>
		count = count + 1;
	}
	
	
	for(int iter=0; iter<2; iter++){
		PORTA = 0xA0;
 48c:	0b bb       	out	0x1b, r16	; 27
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	29 e6       	ldi	r18, 0x69	; 105
 492:	38 e1       	ldi	r19, 0x18	; 24
 494:	91 50       	subi	r25, 0x01	; 1
 496:	20 40       	sbci	r18, 0x00	; 0
 498:	30 40       	sbci	r19, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
		_delay_ms(1000);
		PORTA = 0x50;
 4a0:	1b bb       	out	0x1b, r17	; 27
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	99 e6       	ldi	r25, 0x69	; 105
 4a6:	28 e1       	ldi	r18, 0x18	; 24
 4a8:	81 50       	subi	r24, 0x01	; 1
 4aa:	90 40       	sbci	r25, 0x00	; 0
 4ac:	20 40       	sbci	r18, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
		count = count + 1;
	}
	
	
	for(int iter=0; iter<2; iter++){
		PORTA = 0xA0;
 4b4:	0b bb       	out	0x1b, r16	; 27
 4b6:	3f ef       	ldi	r19, 0xFF	; 255
 4b8:	89 e6       	ldi	r24, 0x69	; 105
 4ba:	98 e1       	ldi	r25, 0x18	; 24
 4bc:	31 50       	subi	r19, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
		_delay_ms(1000);
		PORTA = 0x50;
 4c8:	1b bb       	out	0x1b, r17	; 27
 4ca:	2f ef       	ldi	r18, 0xFF	; 255
 4cc:	39 e6       	ldi	r19, 0x69	; 105
 4ce:	88 e1       	ldi	r24, 0x18	; 24
 4d0:	21 50       	subi	r18, 0x01	; 1
 4d2:	30 40       	sbci	r19, 0x00	; 0
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4da:	00 00       	nop
		//_delay_ms(500);
		_delay_ms(1000);
	}	
	
	init_UART0();
 4dc:	0e 94 98 02 	call	0x530	; 0x530 <init_UART0>
 4e0:	cd 2d       	mov	r28, r13
 4e2:	9f cf       	rjmp	.-194    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

000004e4 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
 4e4:	84 b3       	in	r24, 0x14	; 20
 4e6:	88 63       	ori	r24, 0x38	; 56
 4e8:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
 4ea:	82 b1       	in	r24, 0x02	; 2
 4ec:	88 63       	ori	r24, 0x38	; 56
 4ee:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
 4f0:	ab e8       	ldi	r26, 0x8B	; 139
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	1c 92       	st	X, r1
  TCCR3B = 0;
 4f6:	ea e8       	ldi	r30, 0x8A	; 138
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	10 82       	st	Z, r1
  TCCR3C = 0;
 4fc:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
 500:	8c 91       	ld	r24, X
 502:	8a 6a       	ori	r24, 0xAA	; 170
 504:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
 506:	80 81       	ld	r24, Z
 508:	81 61       	ori	r24, 0x11	; 17
 50a:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 514:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3B = 0x0000;
 518:	e4 e8       	ldi	r30, 0x84	; 132
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	11 82       	std	Z+1, r1	; 0x01
 51e:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 520:	11 82       	std	Z+1, r1	; 0x01
 522:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 524:	11 82       	std	Z+1, r1	; 0x01
 526:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
 528:	85 b3       	in	r24, 0x15	; 21
 52a:	87 7c       	andi	r24, 0xC7	; 199
 52c:	85 bb       	out	0x15, r24	; 21
 52e:	08 95       	ret

00000530 <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
 530:	1b b8       	out	0x0b, r1	; 11
 532:	1a b8       	out	0x0a, r1	; 10
 534:	e5 e9       	ldi	r30, 0x95	; 149
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	10 82       	st	Z, r1
 53a:	59 9a       	sbi	0x0b, 1	; 11
 53c:	8a b1       	in	r24, 0x0a	; 10
 53e:	88 61       	ori	r24, 0x18	; 24
 540:	8a b9       	out	0x0a, r24	; 10
 542:	80 81       	ld	r24, Z
 544:	8e 60       	ori	r24, 0x0E	; 14
 546:	80 83       	st	Z, r24
 548:	87 e6       	ldi	r24, 0x67	; 103
 54a:	89 b9       	out	0x09, r24	; 9
 54c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 550:	08 95       	ret

00000552 <transmit_UART0>:
 552:	5d 9b       	sbis	0x0b, 5	; 11
 554:	fe cf       	rjmp	.-4      	; 0x552 <transmit_UART0>
 556:	8c b9       	out	0x0c, r24	; 12
 558:	08 95       	ret

0000055a <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
 55a:	5f 9b       	sbis	0x0b, 7	; 11
 55c:	fe cf       	rjmp	.-4      	; 0x55a <receive_UART0>
  return UDR0;
 55e:	8c b1       	in	r24, 0x0c	; 12
}
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
