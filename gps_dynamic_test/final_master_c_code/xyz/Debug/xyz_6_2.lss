
xyz_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00006e14  00006ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039a  008001a2  008001a2  00006f4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  00006f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006f95  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001861  00000000  00000000  0000e30f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003211  00000000  00000000  0000fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001044  00000000  00000000  00012d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d7e  00000000  00000000  00013dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000057c6  00000000  00000000  00014b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0001a30c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	e8 c3       	rjmp	.+2000   	; 0x80a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b 0c       	add	r3, r11
      8e:	e1 0b       	sbc	r30, r17
      90:	ea 0b       	sbc	r30, r26
      92:	f3 0b       	sbc	r31, r19
      94:	fc 0b       	sbc	r31, r28
      96:	05 0c       	add	r0, r5
      98:	0e 0c       	add	r0, r14
      9a:	17 0c       	add	r1, r7
      9c:	20 0c       	add	r2, r0
      9e:	29 0c       	add	r2, r9
      a0:	32 0c       	add	r3, r2
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1be>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__trampolines_end+0x2e8>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__trampolines_end+0x2e6>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__trampolines_end+0x27e>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__trampolines_end+0x272>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	e4 e1       	ldi	r30, 0x14	; 20
     7e0:	fe e6       	ldi	r31, 0x6E	; 110
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a2 3a       	cpi	r26, 0xA2	; 162
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a2 ea       	ldi	r26, 0xA2	; 162
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	ac 33       	cpi	r26, 0x3C	; 60
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <main>
     806:	0c 94 08 37 	jmp	0x6e10	; 0x6e10 <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6c 97       	sbiw	r28, 0x1c	; 28
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9c 8f       	std	Y+28, r25	; 0x1c
     842:	8b 8f       	std	Y+27, r24	; 0x1b
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 10 05 	lds	r24, 0x0510
     848:	90 91 11 05 	lds	r25, 0x0511
     84c:	a0 91 12 05 	lds	r26, 0x0512
     850:	b0 91 13 05 	lds	r27, 0x0513
     854:	80 93 03 02 	sts	0x0203, r24
     858:	90 93 04 02 	sts	0x0204, r25
     85c:	a0 93 05 02 	sts	0x0205, r26
     860:	b0 93 06 02 	sts	0x0206, r27
	  v_B[1] = -1*Current_state.mm.B_y;
     864:	80 91 14 05 	lds	r24, 0x0514
     868:	90 91 15 05 	lds	r25, 0x0515
     86c:	a0 91 16 05 	lds	r26, 0x0516
     870:	b0 91 17 05 	lds	r27, 0x0517
     874:	b0 58       	subi	r27, 0x80	; 128
     876:	80 93 ff 01 	sts	0x01FF, r24
     87a:	90 93 00 02 	sts	0x0200, r25
     87e:	a0 93 01 02 	sts	0x0201, r26
     882:	b0 93 02 02 	sts	0x0202, r27
	  v_B[0] = Current_state.mm.B_z;
     886:	80 91 18 05 	lds	r24, 0x0518
     88a:	90 91 19 05 	lds	r25, 0x0519
     88e:	a0 91 1a 05 	lds	r26, 0x051A
     892:	b0 91 1b 05 	lds	r27, 0x051B
     896:	80 93 fb 01 	sts	0x01FB, r24
     89a:	90 93 fc 01 	sts	0x01FC, r25
     89e:	a0 93 fd 01 	sts	0x01FD, r26
     8a2:	b0 93 fe 01 	sts	0x01FE, r27
	  
	if(first_B)
     8a6:	80 91 08 01 	lds	r24, 0x0108
     8aa:	88 23       	and	r24, r24
     8ac:	49 f0       	breq	.+18     	; 0x8c0 <detumbling+0xb4>
	{
		
		copy_vector(v_B, v_B_old);
     8ae:	62 ea       	ldi	r22, 0xA2	; 162
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8b ef       	ldi	r24, 0xFB	; 251
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <copy_vector>
		first_B = 0;
     8ba:	10 92 08 01 	sts	0x0108, r1
     8be:	89 c0       	rjmp	.+274    	; 0x9d2 <detumbling+0x1c6>
     8c0:	0b ef       	ldi	r16, 0xFB	; 251
     8c2:	11 e0       	ldi	r17, 0x01	; 1
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f2 ea       	ldi	r31, 0xA2	; 162
     8c8:	af 2e       	mov	r10, r31
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	bf 2e       	mov	r11, r31
     8ce:	f0 2d       	mov	r31, r0
     8d0:	1e 01       	movw	r2, r28
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	28 0e       	add	r2, r24
     8d6:	31 1c       	adc	r3, r1
     8d8:	fe 01       	movw	r30, r28
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	fa 8f       	std	Y+26, r31	; 0x1a
     8de:	e9 8f       	std	Y+25, r30	; 0x19
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f7 e0       	ldi	r31, 0x07	; 7
     8e4:	8f 2e       	mov	r8, r31
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	9f 2e       	mov	r9, r31
     8ea:	f0 2d       	mov	r31, r0
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8ec:	f8 01       	movw	r30, r16
     8ee:	c1 90       	ld	r12, Z+
     8f0:	d1 90       	ld	r13, Z+
     8f2:	e1 90       	ld	r14, Z+
     8f4:	f1 90       	ld	r15, Z+
     8f6:	8f 01       	movw	r16, r30
     8f8:	f5 01       	movw	r30, r10
     8fa:	41 90       	ld	r4, Z+
     8fc:	51 90       	ld	r5, Z+
     8fe:	61 90       	ld	r6, Z+
     900:	71 90       	ld	r7, Z+
     902:	5f 01       	movw	r10, r30
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     928:	a3 01       	movw	r20, r6
     92a:	92 01       	movw	r18, r4
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     940:	e9 8d       	ldd	r30, Y+25	; 0x19
     942:	fa 8d       	ldd	r31, Y+26	; 0x1a
     944:	61 93       	st	Z+, r22
     946:	71 93       	st	Z+, r23
     948:	81 93       	st	Z+, r24
     94a:	91 93       	st	Z+, r25
     94c:	fa 8f       	std	Y+26, r31	; 0x1a
     94e:	e9 8f       	std	Y+25, r30	; 0x19
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     950:	08 15       	cp	r16, r8
     952:	19 05       	cpc	r17, r9
     954:	59 f6       	brne	.-106    	; 0x8ec <detumbling+0xe0>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vector_norm>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	9f eb       	ldi	r25, 0xBF	; 191
     96a:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     96e:	6b 01       	movw	r12, r22
     970:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	6d 85       	ldd	r22, Y+13	; 0x0d
     978:	7e 85       	ldd	r23, Y+14	; 0x0e
     97a:	8f 85       	ldd	r24, Y+15	; 0x0f
     97c:	98 89       	ldd	r25, Y+16	; 0x10
     97e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     982:	eb 8d       	ldd	r30, Y+27	; 0x1b
     984:	fc 8d       	ldd	r31, Y+28	; 0x1c
     986:	60 83       	st	Z, r22
     988:	71 83       	std	Z+1, r23	; 0x01
     98a:	82 83       	std	Z+2, r24	; 0x02
     98c:	93 83       	std	Z+3, r25	; 0x03
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	69 89       	ldd	r22, Y+17	; 0x11
     994:	7a 89       	ldd	r23, Y+18	; 0x12
     996:	8b 89       	ldd	r24, Y+19	; 0x13
     998:	9c 89       	ldd	r25, Y+20	; 0x14
     99a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     99e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9a2:	64 83       	std	Z+4, r22	; 0x04
     9a4:	75 83       	std	Z+5, r23	; 0x05
     9a6:	86 83       	std	Z+6, r24	; 0x06
     9a8:	97 83       	std	Z+7, r25	; 0x07
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	6d 89       	ldd	r22, Y+21	; 0x15
     9b0:	7e 89       	ldd	r23, Y+22	; 0x16
     9b2:	8f 89       	ldd	r24, Y+23	; 0x17
     9b4:	98 8d       	ldd	r25, Y+24	; 0x18
     9b6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     9ba:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9bc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9be:	60 87       	std	Z+8, r22	; 0x08
     9c0:	71 87       	std	Z+9, r23	; 0x09
     9c2:	82 87       	std	Z+10, r24	; 0x0a
     9c4:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9c6:	62 ea       	ldi	r22, 0xA2	; 162
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	8b ef       	ldi	r24, 0xFB	; 251
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <copy_vector>
	
}
     9d2:	6c 96       	adiw	r28, 0x1c	; 28
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	3f 90       	pop	r3
     a00:	2f 90       	pop	r2
     a02:	08 95       	ret

00000a04 <nominal>:
 

void nominal(vector v_m_N)
{
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	e3 97       	sbiw	r28, 0x33	; 51
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9b ab       	std	Y+51, r25	; 0x33
     a3a:	8a ab       	std	Y+50, r24	; 0x32
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a3c:	60 91 10 05 	lds	r22, 0x0510
     a40:	70 91 11 05 	lds	r23, 0x0511
     a44:	80 91 12 05 	lds	r24, 0x0512
     a48:	90 91 13 05 	lds	r25, 0x0513
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e4       	ldi	r19, 0x40	; 64
     a50:	4c e1       	ldi	r20, 0x1C	; 28
     a52:	56 e4       	ldi	r21, 0x46	; 70
     a54:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     a58:	60 93 03 02 	sts	0x0203, r22
     a5c:	70 93 04 02 	sts	0x0204, r23
     a60:	80 93 05 02 	sts	0x0205, r24
     a64:	90 93 06 02 	sts	0x0206, r25
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a68:	60 91 14 05 	lds	r22, 0x0514
     a6c:	70 91 15 05 	lds	r23, 0x0515
     a70:	80 91 16 05 	lds	r24, 0x0516
     a74:	90 91 17 05 	lds	r25, 0x0517
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e4       	ldi	r19, 0x40	; 64
     a7c:	4c e1       	ldi	r20, 0x1C	; 28
     a7e:	56 e4       	ldi	r21, 0x46	; 70
     a80:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	b0 58       	subi	r27, 0x80	; 128
     a8a:	80 93 ff 01 	sts	0x01FF, r24
     a8e:	90 93 00 02 	sts	0x0200, r25
     a92:	a0 93 01 02 	sts	0x0201, r26
     a96:	b0 93 02 02 	sts	0x0202, r27
	     v_B[0] = Current_state.mm.B_z/10000;
     a9a:	60 91 18 05 	lds	r22, 0x0518
     a9e:	70 91 19 05 	lds	r23, 0x0519
     aa2:	80 91 1a 05 	lds	r24, 0x051A
     aa6:	90 91 1b 05 	lds	r25, 0x051B
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e4       	ldi	r19, 0x40	; 64
     aae:	4c e1       	ldi	r20, 0x1C	; 28
     ab0:	56 e4       	ldi	r21, 0x46	; 70
     ab2:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     ab6:	60 93 fb 01 	sts	0x01FB, r22
     aba:	70 93 fc 01 	sts	0x01FC, r23
     abe:	80 93 fd 01 	sts	0x01FD, r24
     ac2:	90 93 fe 01 	sts	0x01FE, r25
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     ac6:	8b ef       	ldi	r24, 0xFB	; 251
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vector_norm>
     ace:	2b 01       	movw	r4, r22
     ad0:	3c 01       	movw	r6, r24
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     ad2:	80 90 90 04 	lds	r8, 0x0490
     ad6:	90 90 91 04 	lds	r9, 0x0491
     ada:	a0 90 92 04 	lds	r10, 0x0492
     ade:	b0 90 93 04 	lds	r11, 0x0493
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f4 e8       	ldi	r31, 0x84	; 132
     ae6:	ef 2e       	mov	r14, r31
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	ff 2e       	mov	r15, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9e 87       	std	Y+14, r25	; 0x0e
     af4:	8d 87       	std	Y+13, r24	; 0x0d
     af6:	0f 2e       	mov	r0, r31
     af8:	f0 e9       	ldi	r31, 0x90	; 144
     afa:	cf 2e       	mov	r12, r31
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	03 ee       	ldi	r16, 0xE3	; 227
     b04:	11 e0       	ldi	r17, 0x01	; 1
     b06:	1c 01       	movw	r2, r24
     b08:	f7 01       	movw	r30, r14
     b0a:	61 91       	ld	r22, Z+
     b0c:	71 91       	ld	r23, Z+
     b0e:	81 91       	ld	r24, Z+
     b10:	91 91       	ld	r25, Z+
     b12:	7f 01       	movw	r14, r30
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     b1c:	a5 01       	movw	r20, r10
     b1e:	94 01       	movw	r18, r8
     b20:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     b24:	d1 01       	movw	r26, r2
     b26:	6d 93       	st	X+, r22
     b28:	7d 93       	st	X+, r23
     b2a:	8d 93       	st	X+, r24
     b2c:	9d 93       	st	X+, r25
     b2e:	1d 01       	movw	r2, r26
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	f8 01       	movw	r30, r16
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     b4a:	d8 01       	movw	r26, r16
     b4c:	6d 93       	st	X+, r22
     b4e:	7d 93       	st	X+, r23
     b50:	8d 93       	st	X+, r24
     b52:	9d 93       	st	X+, r25
     b54:	8d 01       	movw	r16, r26
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b56:	ec 14       	cp	r14, r12
     b58:	fd 04       	cpc	r15, r13
     b5a:	b1 f6       	brne	.-84     	; 0xb08 <nominal+0x104>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b5c:	a3 01       	movw	r20, r6
     b5e:	92 01       	movw	r18, r4
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     b68:	6a a7       	std	Y+42, r22	; 0x2a
     b6a:	7b a7       	std	Y+43, r23	; 0x2b
     b6c:	8c a7       	std	Y+44, r24	; 0x2c
     b6e:	9d a7       	std	Y+45, r25	; 0x2d
     b70:	ee ea       	ldi	r30, 0xAE	; 174
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	ff a3       	std	Y+39, r31	; 0x27
     b76:	ee a3       	std	Y+38, r30	; 0x26
     b78:	21 2c       	mov	r2, r1
     b7a:	31 2c       	mov	r3, r1
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f3 ee       	ldi	r31, 0xE3	; 227
     b80:	cf 2e       	mov	r12, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	df 2e       	mov	r13, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	ce a6       	std	Y+46, r12	; 0x2e
     b8a:	d6 01       	movw	r26, r12
     b8c:	bf a7       	std	Y+47, r27	; 0x2f
     b8e:	cd 84       	ldd	r12, Y+13	; 0x0d
     b90:	c8 aa       	std	Y+48, r12	; 0x30
     b92:	de 84       	ldd	r13, Y+14	; 0x0e
     b94:	d9 aa       	std	Y+49, r13	; 0x31
     b96:	3d 8e       	std	Y+29, r3	; 0x1d
     b98:	2c 8e       	std	Y+28, r2	; 0x1c
     b9a:	ee a0       	ldd	r14, Y+38	; 0x26
     b9c:	ff a0       	ldd	r15, Y+39	; 0x27
     b9e:	f9 a6       	std	Y+41, r15	; 0x29
     ba0:	e8 a6       	std	Y+40, r14	; 0x28
     ba2:	8f ee       	ldi	r24, 0xEF	; 239
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	98 8f       	std	Y+24, r25	; 0x18
     ba8:	8f 8b       	std	Y+23, r24	; 0x17
     baa:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bac:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bae:	ac 5d       	subi	r26, 0xDC	; 220
     bb0:	be 4f       	sbci	r27, 0xFE	; 254
     bb2:	ba 8f       	std	Y+26, r27	; 0x1a
     bb4:	a9 8f       	std	Y+25, r26	; 0x19
     bb6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bb8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bba:	e8 5b       	subi	r30, 0xB8	; 184
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	fe 8b       	std	Y+22, r31	; 0x16
     bc0:	ed 8b       	std	Y+21, r30	; 0x15
     bc2:	ce a4       	ldd	r12, Y+46	; 0x2e
     bc4:	c9 8a       	std	Y+17, r12	; 0x11
     bc6:	df a4       	ldd	r13, Y+47	; 0x2f
     bc8:	da 8a       	std	Y+18, r13	; 0x12
     bca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bce:	84 59       	subi	r24, 0x94	; 148
     bd0:	9e 4f       	sbci	r25, 0xFE	; 254
     bd2:	9c 8b       	std	Y+20, r25	; 0x14
     bd4:	8b 8b       	std	Y+19, r24	; 0x13
     bd6:	c8 a8       	ldd	r12, Y+48	; 0x30
     bd8:	cf 86       	std	Y+15, r12	; 0x0f
     bda:	d9 a8       	ldd	r13, Y+49	; 0x31
     bdc:	d8 8a       	std	Y+16, r13	; 0x10
     bde:	03 e0       	ldi	r16, 0x03	; 3
     be0:	1b 8e       	std	Y+27, r1	; 0x1b
     be2:	21 2c       	mov	r2, r1
     be4:	31 2c       	mov	r3, r1
     be6:	10 e0       	ldi	r17, 0x00	; 0
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     be8:	af 85       	ldd	r26, Y+15	; 0x0f
     bea:	b8 89       	ldd	r27, Y+16	; 0x10
     bec:	6d 91       	ld	r22, X+
     bee:	7d 91       	ld	r23, X+
     bf0:	8d 91       	ld	r24, X+
     bf2:	9d 91       	ld	r25, X+
     bf4:	b8 8b       	std	Y+16, r27	; 0x10
     bf6:	af 87       	std	Y+15, r26	; 0x0f
     bf8:	eb 89       	ldd	r30, Y+19	; 0x13
     bfa:	fc 89       	ldd	r31, Y+20	; 0x14
     bfc:	21 91       	ld	r18, Z+
     bfe:	31 91       	ld	r19, Z+
     c00:	41 91       	ld	r20, Z+
     c02:	51 91       	ld	r21, Z+
     c04:	fc 8b       	std	Y+20, r31	; 0x14
     c06:	eb 8b       	std	Y+19, r30	; 0x13
     c08:	a9 89       	ldd	r26, Y+17	; 0x11
     c0a:	ba 89       	ldd	r27, Y+18	; 0x12
     c0c:	8d 90       	ld	r8, X+
     c0e:	9d 90       	ld	r9, X+
     c10:	ad 90       	ld	r10, X+
     c12:	bd 90       	ld	r11, X+
     c14:	ba 8b       	std	Y+18, r27	; 0x12
     c16:	a9 8b       	std	Y+17, r26	; 0x11
     c18:	ed 89       	ldd	r30, Y+21	; 0x15
     c1a:	fe 89       	ldd	r31, Y+22	; 0x16
     c1c:	41 90       	ld	r4, Z+
     c1e:	51 90       	ld	r5, Z+
     c20:	61 90       	ld	r6, Z+
     c22:	71 90       	ld	r7, Z+
     c24:	fe 8b       	std	Y+22, r31	; 0x16
     c26:	ed 8b       	std	Y+21, r30	; 0x15
     c28:	af 89       	ldd	r26, Y+23	; 0x17
     c2a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c2c:	cd 90       	ld	r12, X+
     c2e:	dd 90       	ld	r13, X+
     c30:	ed 90       	ld	r14, X+
     c32:	fd 90       	ld	r15, X+
     c34:	b8 8f       	std	Y+24, r27	; 0x18
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	ce 8e       	std	Y+30, r12	; 0x1e
     c3a:	df 8e       	std	Y+31, r13	; 0x1f
     c3c:	e8 a2       	std	Y+32, r14	; 0x20
     c3e:	f9 a2       	std	Y+33, r15	; 0x21
     c40:	a9 8d       	ldd	r26, Y+25	; 0x19
     c42:	ba 8d       	ldd	r27, Y+26	; 0x1a
     c44:	cd 90       	ld	r12, X+
     c46:	dd 90       	ld	r13, X+
     c48:	ed 90       	ld	r14, X+
     c4a:	fd 90       	ld	r15, X+
     c4c:	ba 8f       	std	Y+26, r27	; 0x1a
     c4e:	a9 8f       	std	Y+25, r26	; 0x19
     c50:	ca a2       	std	Y+34, r12	; 0x22
     c52:	db a2       	std	Y+35, r13	; 0x23
     c54:	ec a2       	std	Y+36, r14	; 0x24
     c56:	fd a2       	std	Y+37, r15	; 0x25
     c58:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	a3 01       	movw	r20, r6
     c62:	92 01       	movw	r18, r4
     c64:	c5 01       	movw	r24, r10
     c66:	b4 01       	movw	r22, r8
     c68:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
     c7c:	2a a1       	ldd	r18, Y+34	; 0x22
     c7e:	3b a1       	ldd	r19, Y+35	; 0x23
     c80:	4c a1       	ldd	r20, Y+36	; 0x24
     c82:	5d a1       	ldd	r21, Y+37	; 0x25
     c84:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c86:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c88:	88 a1       	ldd	r24, Y+32	; 0x20
     c8a:	99 a1       	ldd	r25, Y+33	; 0x21
     c8c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     c9c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c9e:	32 2d       	mov	r19, r2
     ca0:	43 2d       	mov	r20, r3
     ca2:	51 2f       	mov	r21, r17
     ca4:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     ca8:	01 50       	subi	r16, 0x01	; 1
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     caa:	29 f0       	breq	.+10     	; 0xcb6 <nominal+0x2b2>
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     cac:	6b 8f       	std	Y+27, r22	; 0x1b
     cae:	27 2e       	mov	r2, r23
     cb0:	38 2e       	mov	r3, r24
     cb2:	19 2f       	mov	r17, r25
     cb4:	99 cf       	rjmp	.-206    	; 0xbe8 <nominal+0x1e4>
    v_m_temp[i] /= norm_B * norm_B;	
     cb6:	2a a5       	ldd	r18, Y+42	; 0x2a
     cb8:	3b a5       	ldd	r19, Y+43	; 0x2b
     cba:	4c a5       	ldd	r20, Y+44	; 0x2c
     cbc:	5d a5       	ldd	r21, Y+45	; 0x2d
     cbe:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     cc2:	e8 a5       	ldd	r30, Y+40	; 0x28
     cc4:	f9 a5       	ldd	r31, Y+41	; 0x29
     cc6:	60 83       	st	Z, r22
     cc8:	71 83       	std	Z+1, r23	; 0x01
     cca:	82 83       	std	Z+2, r24	; 0x02
     ccc:	93 83       	std	Z+3, r25	; 0x03
     cce:	8e a1       	ldd	r24, Y+38	; 0x26
     cd0:	9f a1       	ldd	r25, Y+39	; 0x27
     cd2:	04 96       	adiw	r24, 0x04	; 4
     cd4:	9f a3       	std	Y+39, r25	; 0x27
     cd6:	8e a3       	std	Y+38, r24	; 0x26
     cd8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     cda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     cdc:	1c 96       	adiw	r26, 0x0c	; 12
     cde:	bd 8f       	std	Y+29, r27	; 0x1d
     ce0:	ac 8f       	std	Y+28, r26	; 0x1c
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     ce2:	94 97       	sbiw	r26, 0x24	; 36
     ce4:	09 f0       	breq	.+2      	; 0xce8 <nominal+0x2e4>
     ce6:	59 cf       	rjmp	.-334    	; 0xb9a <nominal+0x196>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     ce8:	4a a9       	ldd	r20, Y+50	; 0x32
     cea:	5b a9       	ldd	r21, Y+51	; 0x33
     cec:	6b ef       	ldi	r22, 0xFB	; 251
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	8e ea       	ldi	r24, 0xAE	; 174
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cf8:	60 91 e2 01 	lds	r22, 0x01E2
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatunsisf>
     d06:	ab 01       	movw	r20, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	8a a9       	ldd	r24, Y+50	; 0x32
     d0c:	9b a9       	ldd	r25, Y+51	; 0x33
     d0e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     d12:	e3 96       	adiw	r28, 0x33	; 51
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	3f 90       	pop	r3
     d40:	2f 90       	pop	r2
     d42:	08 95       	ret

00000d44 <apply_torque>:

void apply_torque(vector v_m)
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	8c 01       	movw	r16, r24
     d64:	ec 01       	movw	r28, r24
     d66:	0f 2e       	mov	r0, r31
     d68:	f3 e0       	ldi	r31, 0x03	; 3
     d6a:	9f 2e       	mov	r9, r31
     d6c:	f0 2d       	mov	r31, r0
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d6e:	48 80       	ld	r4, Y
     d70:	59 80       	ldd	r5, Y+1	; 0x01
     d72:	6a 80       	ldd	r6, Y+2	; 0x02
     d74:	7b 80       	ldd	r7, Y+3	; 0x03
     d76:	73 01       	movw	r14, r6
     d78:	62 01       	movw	r12, r4
     d7a:	e8 94       	clt
     d7c:	f7 f8       	bld	r15, 7
     d7e:	23 e3       	ldi	r18, 0x33	; 51
     d80:	33 e3       	ldi	r19, 0x33	; 51
     d82:	43 e7       	ldi	r20, 0x73	; 115
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
     d8e:	18 16       	cp	r1, r24
     d90:	fc f4       	brge	.+62     	; 0xdd0 <apply_torque+0x8c>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d92:	a3 01       	movw	r20, r6
     d94:	92 01       	movw	r18, r4
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f eb       	ldi	r21, 0xBF	; 191
     da6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
     daa:	81 11       	cpse	r24, r1
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <apply_torque+0x7c>
			v_m[i] = -1*M_MAX;
     dae:	83 e3       	ldi	r24, 0x33	; 51
     db0:	93 e3       	ldi	r25, 0x33	; 51
     db2:	a3 e7       	ldi	r26, 0x73	; 115
     db4:	bf eb       	ldi	r27, 0xBF	; 191
     db6:	88 83       	st	Y, r24
     db8:	99 83       	std	Y+1, r25	; 0x01
     dba:	aa 83       	std	Y+2, r26	; 0x02
     dbc:	bb 83       	std	Y+3, r27	; 0x03
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <apply_torque+0x8c>
			else
			v_m[i] = M_MAX;
     dc0:	83 e3       	ldi	r24, 0x33	; 51
     dc2:	93 e3       	ldi	r25, 0x33	; 51
     dc4:	a3 e7       	ldi	r26, 0x73	; 115
     dc6:	bf e3       	ldi	r27, 0x3F	; 63
     dc8:	88 83       	st	Y, r24
     dca:	99 83       	std	Y+1, r25	; 0x01
     dcc:	aa 83       	std	Y+2, r26	; 0x02
     dce:	bb 83       	std	Y+3, r27	; 0x03
     dd0:	9a 94       	dec	r9
     dd2:	24 96       	adiw	r28, 0x04	; 4
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     dd4:	91 10       	cpse	r9, r1
     dd6:	cb cf       	rjmp	.-106    	; 0xd6e <apply_torque+0x2a>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     dd8:	45 ed       	ldi	r20, 0xD5	; 213
     dda:	5f e0       	ldi	r21, 0x0F	; 15
     ddc:	61 ec       	ldi	r22, 0xC1	; 193
     dde:	7e e3       	ldi	r23, 0x3E	; 62
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <scalar_into_vector>
     de6:	e8 01       	movw	r28, r16
     de8:	0f 2e       	mov	r0, r31
     dea:	f3 e0       	ldi	r31, 0x03	; 3
     dec:	9f 2e       	mov	r9, r31
     dee:	f0 2d       	mov	r31, r0
	
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     df0:	48 80       	ld	r4, Y
     df2:	59 80       	ldd	r5, Y+1	; 0x01
     df4:	6a 80       	ldd	r6, Y+2	; 0x02
     df6:	7b 80       	ldd	r7, Y+3	; 0x03
     df8:	73 01       	movw	r14, r6
     dfa:	62 01       	movw	r12, r4
     dfc:	e8 94       	clt
     dfe:	f7 f8       	bld	r15, 7
     e00:	28 ea       	ldi	r18, 0xA8	; 168
     e02:	36 ec       	ldi	r19, 0xC6	; 198
     e04:	4b e8       	ldi	r20, 0x8B	; 139
     e06:	5e e3       	ldi	r21, 0x3E	; 62
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
     e10:	18 16       	cp	r1, r24
     e12:	fc f4       	brge	.+62     	; 0xe52 <apply_torque+0x10e>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     e14:	a3 01       	movw	r20, r6
     e16:	92 01       	movw	r18, r4
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f eb       	ldi	r21, 0xBF	; 191
     e28:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
     e2c:	81 11       	cpse	r24, r1
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <apply_torque+0xfe>
			v_m[i] = -1*I_MAX;
     e30:	88 ea       	ldi	r24, 0xA8	; 168
     e32:	96 ec       	ldi	r25, 0xC6	; 198
     e34:	ab e8       	ldi	r26, 0x8B	; 139
     e36:	be eb       	ldi	r27, 0xBE	; 190
     e38:	88 83       	st	Y, r24
     e3a:	99 83       	std	Y+1, r25	; 0x01
     e3c:	aa 83       	std	Y+2, r26	; 0x02
     e3e:	bb 83       	std	Y+3, r27	; 0x03
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <apply_torque+0x10e>
			else
			v_m[i] = I_MAX;
     e42:	88 ea       	ldi	r24, 0xA8	; 168
     e44:	96 ec       	ldi	r25, 0xC6	; 198
     e46:	ab e8       	ldi	r26, 0x8B	; 139
     e48:	be e3       	ldi	r27, 0x3E	; 62
     e4a:	88 83       	st	Y, r24
     e4c:	99 83       	std	Y+1, r25	; 0x01
     e4e:	aa 83       	std	Y+2, r26	; 0x02
     e50:	bb 83       	std	Y+3, r27	; 0x03
     e52:	9a 94       	dec	r9
     e54:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	
	for(i = 0; i < 3; i++)
     e56:	91 10       	cpse	r9, r1
     e58:	cb cf       	rjmp	.-106    	; 0xdf0 <apply_torque+0xac>
     e5a:	78 01       	movw	r14, r16
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
	{
		//sen = ((int8_t)((lambda))/2);
		st =(int32_t)(v_m[i]*65535000);
     e60:	d7 01       	movw	r26, r14
     e62:	6d 91       	ld	r22, X+
     e64:	7d 91       	ld	r23, X+
     e66:	8d 91       	ld	r24, X+
     e68:	9d 91       	ld	r25, X+
     e6a:	7d 01       	movw	r14, r26
     e6c:	26 e0       	ldi	r18, 0x06	; 6
     e6e:	3f ef       	ldi	r19, 0xFF	; 255
     e70:	49 e7       	ldi	r20, 0x79	; 121
     e72:	5c e4       	ldi	r21, 0x4C	; 76
     e74:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     e78:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <__fixsfsi>
     e7c:	b7 2e       	mov	r11, r23
     e7e:	c8 2e       	mov	r12, r24
     e80:	d9 2e       	mov	r13, r25
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		sen2 = (int8_t)(st>>16);
		sen3 = (int8_t)(st>>24);
		transmit_UART0(sen);
     e82:	86 2f       	mov	r24, r22
     e84:	99 27       	eor	r25, r25
     e86:	87 fd       	sbrc	r24, 7
     e88:	90 95       	com	r25
     e8a:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
		transmit_UART0(sen1);
     e8e:	8b 2d       	mov	r24, r11
     e90:	99 27       	eor	r25, r25
     e92:	87 fd       	sbrc	r24, 7
     e94:	90 95       	com	r25
     e96:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
		transmit_UART0(sen2);
     e9a:	8c 2d       	mov	r24, r12
     e9c:	99 27       	eor	r25, r25
     e9e:	87 fd       	sbrc	r24, 7
     ea0:	90 95       	com	r25
     ea2:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
		transmit_UART0(sen3);
     ea6:	8d 2d       	mov	r24, r13
     ea8:	99 27       	eor	r25, r25
     eaa:	87 fd       	sbrc	r24, 7
     eac:	90 95       	com	r25
     eae:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
	int8_t sen,sen1,sen2,sen3;
	int32_t st;
	// x.f=3.145689123;
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	c3 30       	cpi	r28, 0x03	; 3
     eb6:	d1 05       	cpc	r29, r1
     eb8:	99 f6       	brne	.-90     	; 0xe60 <apply_torque+0x11c>
	transmit_UART0(buf3);*/	
	}
	
	
	sen = Mode;
	transmit_UART0(sen);
     eba:	80 91 22 01 	lds	r24, 0x0122
     ebe:	99 27       	eor	r25, r25
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	90 95       	com	r25
     ec4:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
	sen = gps_power;
	transmit_UART0(sen);
     ec8:	80 91 be 01 	lds	r24, 0x01BE
     ecc:	99 27       	eor	r25, r25
     ece:	87 fd       	sbrc	r24, 7
     ed0:	90 95       	com	r25
     ed2:	0e 94 99 2c 	call	0x5932	; 0x5932 <transmit_UART0>
	////////////////////////
	if (v_m[0] > 0)
     ed6:	f8 01       	movw	r30, r16
     ed8:	c0 80       	ld	r12, Z
     eda:	d1 80       	ldd	r13, Z+1	; 0x01
     edc:	e2 80       	ldd	r14, Z+2	; 0x02
     ede:	f3 80       	ldd	r15, Z+3	; 0x03
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	c7 01       	movw	r24, r14
     ee8:	b6 01       	movw	r22, r12
     eea:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
     eee:	18 16       	cp	r1, r24
     ef0:	c4 f4       	brge	.+48     	; 0xf22 <apply_torque+0x1de>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     f02:	28 ea       	ldi	r18, 0xA8	; 168
     f04:	36 ec       	ldi	r19, 0xC6	; 198
     f06:	4b e8       	ldi	r20, 0x8B	; 139
     f08:	5e e3       	ldi	r21, 0x3E	; 62
     f0a:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     f0e:	9f 77       	andi	r25, 0x7F	; 127
     f10:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
     f14:	70 93 24 05 	sts	0x0524, r23
     f18:	60 93 23 05 	sts	0x0523, r22
		Current_state.pwm.x_dir = 0;
     f1c:	10 92 29 05 	sts	0x0529, r1
     f20:	1e c0       	rjmp	.+60     	; 0xf5e <apply_torque+0x21a>
	}
	else
	{
		Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
     f22:	28 ea       	ldi	r18, 0xA8	; 168
     f24:	36 ec       	ldi	r19, 0xC6	; 198
     f26:	4b e8       	ldi	r20, 0x8B	; 139
     f28:	5e e3       	ldi	r21, 0x3E	; 62
     f2a:	c7 01       	movw	r24, r14
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     f4a:	9f 77       	andi	r25, 0x7F	; 127
     f4c:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
     f50:	70 93 24 05 	sts	0x0524, r23
     f54:	60 93 23 05 	sts	0x0523, r22
		Current_state.pwm.x_dir = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 29 05 	sts	0x0529, r24
	}
	if (v_m[1] > 0)
     f5e:	d8 01       	movw	r26, r16
     f60:	14 96       	adiw	r26, 0x04	; 4
     f62:	cd 90       	ld	r12, X+
     f64:	dd 90       	ld	r13, X+
     f66:	ed 90       	ld	r14, X+
     f68:	fc 90       	ld	r15, X
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	c7 01       	movw	r24, r14
     f74:	b6 01       	movw	r22, r12
     f76:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	c4 f4       	brge	.+48     	; 0xfae <apply_torque+0x26a>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	c7 01       	movw	r24, r14
     f88:	b6 01       	movw	r22, r12
     f8a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     f8e:	28 ea       	ldi	r18, 0xA8	; 168
     f90:	36 ec       	ldi	r19, 0xC6	; 198
     f92:	4b e8       	ldi	r20, 0x8B	; 139
     f94:	5e e3       	ldi	r21, 0x3E	; 62
     f96:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     f9a:	9f 77       	andi	r25, 0x7F	; 127
     f9c:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
     fa0:	70 93 26 05 	sts	0x0526, r23
     fa4:	60 93 25 05 	sts	0x0525, r22
		Current_state.pwm.y_dir = 0;
     fa8:	10 92 2a 05 	sts	0x052A, r1
     fac:	1e c0       	rjmp	.+60     	; 0xfea <apply_torque+0x2a6>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
     fae:	28 ea       	ldi	r18, 0xA8	; 168
     fb0:	36 ec       	ldi	r19, 0xC6	; 198
     fb2:	4b e8       	ldi	r20, 0x8B	; 139
     fb4:	5e e3       	ldi	r21, 0x3E	; 62
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
     fd6:	9f 77       	andi	r25, 0x7F	; 127
     fd8:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
     fdc:	70 93 26 05 	sts	0x0526, r23
     fe0:	60 93 25 05 	sts	0x0525, r22
		Current_state.pwm.y_dir = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 2a 05 	sts	0x052A, r24
	}
	if (v_m[2] > 0)
     fea:	f8 01       	movw	r30, r16
     fec:	c0 84       	ldd	r12, Z+8	; 0x08
     fee:	d1 84       	ldd	r13, Z+9	; 0x09
     ff0:	e2 84       	ldd	r14, Z+10	; 0x0a
     ff2:	f3 84       	ldd	r15, Z+11	; 0x0b
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	c4 f4       	brge	.+48     	; 0x1036 <apply_torque+0x2f2>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    1016:	28 ea       	ldi	r18, 0xA8	; 168
    1018:	36 ec       	ldi	r19, 0xC6	; 198
    101a:	4b e8       	ldi	r20, 0x8B	; 139
    101c:	5e e3       	ldi	r21, 0x3E	; 62
    101e:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
    1028:	70 93 28 05 	sts	0x0528, r23
    102c:	60 93 27 05 	sts	0x0527, r22
		Current_state.pwm.z_dir = 0;
    1030:	10 92 2b 05 	sts	0x052B, r1
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <apply_torque+0x32e>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
    1036:	28 ea       	ldi	r18, 0xA8	; 168
    1038:	36 ec       	ldi	r19, 0xC6	; 198
    103a:	4b e8       	ldi	r20, 0x8B	; 139
    103c:	5e e3       	ldi	r21, 0x3E	; 62
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    105e:	9f 77       	andi	r25, 0x7F	; 127
    1060:	0e 94 ed 32 	call	0x65da	; 0x65da <__fixunssfsi>
    1064:	70 93 28 05 	sts	0x0528, r23
    1068:	60 93 27 05 	sts	0x0527, r22
		Current_state.pwm.z_dir = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 2b 05 	sts	0x052B, r24
	}

	////////////////////////
	
PORTA=0xA0;
    1072:	80 ea       	ldi	r24, 0xA0	; 160
    1074:	8b bb       	out	0x1b, r24	; 27
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	08 95       	ret

00001096 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	e0 97       	sbiw	r28, 0x30	; 48
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    10ca:	0e 94 2e 20 	call	0x405c	; 0x405c <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ce:	8f ec       	ldi	r24, 0xCF	; 207
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <control+0x3c>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <control+0x42>
    10d8:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    10da:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <read_MM>
  // write apply torquer function here
   if(Mode == DETUMBLING)
    10de:	80 91 22 01 	lds	r24, 0x0122
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	21 f4       	brne	.+8      	; 0x10ee <control+0x58>
   apply_torque(v_m_D);
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	2c de       	rcall	.-936    	; 0xd44 <apply_torque>
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <control+0x62>
   else if(Mode == NOMINAL)
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <control+0x62>
   apply_torque(v_m_N);
    10f2:	ce 01       	movw	r24, r28
    10f4:	0d 96       	adiw	r24, 0x0d	; 13
    10f6:	26 de       	rcall	.-948    	; 0xd44 <apply_torque>
   
  set_PWM();
    10f8:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <set_PWM>
  
 // _delay_ms(10);
  detumbling(v_m_D);
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	85 db       	rcall	.-2294   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    1102:	80 91 10 05 	lds	r24, 0x0510
    1106:	90 91 11 05 	lds	r25, 0x0511
    110a:	a0 91 12 05 	lds	r26, 0x0512
    110e:	b0 91 13 05 	lds	r27, 0x0513
    1112:	80 93 03 02 	sts	0x0203, r24
    1116:	90 93 04 02 	sts	0x0204, r25
    111a:	a0 93 05 02 	sts	0x0205, r26
    111e:	b0 93 06 02 	sts	0x0206, r27
  v_B[1] = -1*Current_state.mm.B_y;
    1122:	80 91 14 05 	lds	r24, 0x0514
    1126:	90 91 15 05 	lds	r25, 0x0515
    112a:	a0 91 16 05 	lds	r26, 0x0516
    112e:	b0 91 17 05 	lds	r27, 0x0517
    1132:	b0 58       	subi	r27, 0x80	; 128
    1134:	80 93 ff 01 	sts	0x01FF, r24
    1138:	90 93 00 02 	sts	0x0200, r25
    113c:	a0 93 01 02 	sts	0x0201, r26
    1140:	b0 93 02 02 	sts	0x0202, r27
  v_B[0] = Current_state.mm.B_z;
    1144:	80 91 18 05 	lds	r24, 0x0518
    1148:	90 91 19 05 	lds	r25, 0x0519
    114c:	a0 91 1a 05 	lds	r26, 0x051A
    1150:	b0 91 1b 05 	lds	r27, 0x051B
    1154:	80 93 fb 01 	sts	0x01FB, r24
    1158:	90 93 fc 01 	sts	0x01FC, r25
    115c:	a0 93 fd 01 	sts	0x01FD, r26
    1160:	b0 93 fe 01 	sts	0x01FE, r27
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2))
    1164:	80 91 be 01 	lds	r24, 0x01BE
    1168:	90 91 bf 01 	lds	r25, 0x01BF
    116c:	02 97       	sbiw	r24, 0x02	; 2
    116e:	59 f4       	brne	.+22     	; 0x1186 <__stack+0x87>
		{
  // uint8_t q= 90;
   //transmit_UART0(q);
    read_GPS();
    1170:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <read_GPS>
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	e9 e6       	ldi	r30, 0x69	; 105
    1178:	28 e1       	ldi	r18, 0x18	; 24
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	e0 40       	sbci	r30, 0x00	; 0
    117e:	20 40       	sbci	r18, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <__stack+0x7b>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <__stack+0x85>
    1184:	00 00       	nop
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    1186:	80 91 23 01 	lds	r24, 0x0123
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f4       	brne	.+6      	; 0x1194 <__stack+0x95>
      copy_gps_reading();  //check if gps is on but pdop data
    118e:	0e 94 42 20 	call	0x4084	; 0x4084 <copy_gps_reading>
    1192:	65 c0       	rjmp	.+202    	; 0x125e <__stack+0x15f>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    1194:	20 91 a0 04 	lds	r18, 0x04A0
    1198:	30 91 a1 04 	lds	r19, 0x04A1
    119c:	40 91 a2 04 	lds	r20, 0x04A2
    11a0:	50 91 a3 04 	lds	r21, 0x04A3
    11a4:	60 91 a4 04 	lds	r22, 0x04A4
    11a8:	70 91 a5 04 	lds	r23, 0x04A5
    11ac:	80 91 a6 04 	lds	r24, 0x04A6
    11b0:	90 91 a7 04 	lds	r25, 0x04A7
    11b4:	a2 e0       	ldi	r26, 0x02	; 2
    11b6:	0e 94 d6 36 	call	0x6dac	; 0x6dac <__adddi3_s8>
    11ba:	20 93 a0 04 	sts	0x04A0, r18
    11be:	30 93 a1 04 	sts	0x04A1, r19
    11c2:	40 93 a2 04 	sts	0x04A2, r20
    11c6:	50 93 a3 04 	sts	0x04A3, r21
    11ca:	60 93 a4 04 	sts	0x04A4, r22
    11ce:	70 93 a5 04 	sts	0x04A5, r23
    11d2:	80 93 a6 04 	sts	0x04A6, r24
    11d6:	90 93 a7 04 	sts	0x04A7, r25
	  seconds_since_pivot += FRAME_TIME;
    11da:	20 91 98 04 	lds	r18, 0x0498
    11de:	30 91 99 04 	lds	r19, 0x0499
    11e2:	40 91 9a 04 	lds	r20, 0x049A
    11e6:	50 91 9b 04 	lds	r21, 0x049B
    11ea:	60 91 9c 04 	lds	r22, 0x049C
    11ee:	70 91 9d 04 	lds	r23, 0x049D
    11f2:	80 91 9e 04 	lds	r24, 0x049E
    11f6:	90 91 9f 04 	lds	r25, 0x049F
    11fa:	0e 94 d6 36 	call	0x6dac	; 0x6dac <__adddi3_s8>
    11fe:	20 93 98 04 	sts	0x0498, r18
    1202:	30 93 99 04 	sts	0x0499, r19
    1206:	40 93 9a 04 	sts	0x049A, r20
    120a:	50 93 9b 04 	sts	0x049B, r21
    120e:	60 93 9c 04 	sts	0x049C, r22
    1212:	70 93 9d 04 	sts	0x049D, r23
    1216:	80 93 9e 04 	sts	0x049E, r24
    121a:	90 93 9f 04 	sts	0x049F, r25
	  // Current_state.gps.time_since_reading += FRAME_TIME;
	  /////////////////////////////////////////
	  Current_state.gps.seconds += FRAME_TIME;
    121e:	e1 ee       	ldi	r30, 0xE1	; 225
    1220:	f4 e0       	ldi	r31, 0x04	; 4
    1222:	80 81       	ld	r24, Z
    1224:	8e 5f       	subi	r24, 0xFE	; 254
    1226:	80 83       	st	Z, r24
	  if(Current_state.gps.seconds > 58)
    1228:	80 81       	ld	r24, Z
    122a:	8b 33       	cpi	r24, 0x3B	; 59
    122c:	38 f0       	brcs	.+14     	; 0x123c <__stack+0x13d>
	  {
		  Current_state.gps.seconds = 0;
    122e:	10 92 e1 04 	sts	0x04E1, r1
		  Current_state.gps.minutes += 1;
    1232:	e0 ee       	ldi	r30, 0xE0	; 224
    1234:	f4 e0       	ldi	r31, 0x04	; 4
    1236:	80 81       	ld	r24, Z
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 83       	st	Z, r24
		  
	  }
	  if (Current_state.gps.minutes > 59)
    123c:	80 91 e0 04 	lds	r24, 0x04E0
    1240:	8c 33       	cpi	r24, 0x3C	; 60
    1242:	38 f0       	brcs	.+14     	; 0x1252 <__stack+0x153>
	  {
		  Current_state.gps.minutes = 0;
    1244:	10 92 e0 04 	sts	0x04E0, r1
		  Current_state.gps.hours += 1;
    1248:	ef ed       	ldi	r30, 0xDF	; 223
    124a:	f4 e0       	ldi	r31, 0x04	; 4
    124c:	80 81       	ld	r24, Z
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
	  }
	  if (Current_state.gps.hours > 23)
    1252:	80 91 df 04 	lds	r24, 0x04DF
    1256:	88 31       	cpi	r24, 0x18	; 24
    1258:	10 f0       	brcs	.+4      	; 0x125e <__stack+0x15f>
	  {
		  Current_state.gps.hours = 0;
    125a:	10 92 df 04 	sts	0x04DF, r1

	  }
	  
    //uint8_t e=100;
    //transmit_UART0(e);
    read_SS();
    125e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1262:	0e 94 33 24 	call	0x4866	; 0x4866 <light_cal>
    1266:	80 93 e2 01 	sts	0x01E2, r24
	if(GPS_done != 255)
    126a:	80 91 23 01 	lds	r24, 0x0123
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	09 f4       	brne	.+2      	; 0x1274 <__stack+0x175>
    1272:	43 c0       	rjmp	.+134    	; 0x12fa <__stack+0x1fb>
	{
		
    sgp_orbit_propagator();
    1274:	0e 94 4a 22 	call	0x4494	; 0x4494 <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    1278:	ce 01       	movw	r24, r28
    127a:	49 96       	adiw	r24, 0x19	; 25
    127c:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    1280:	ce 01       	movw	r24, r28
    1282:	85 96       	adiw	r24, 0x25	; 37
    1284:	0e 94 b8 23 	call	0x4770	; 0x4770 <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    1288:	21 ee       	ldi	r18, 0xE1	; 225
    128a:	31 e0       	ldi	r19, 0x01	; 1
    128c:	44 e8       	ldi	r20, 0x84	; 132
    128e:	54 e0       	ldi	r21, 0x04	; 4
    1290:	be 01       	movw	r22, r28
    1292:	67 5e       	subi	r22, 0xE7	; 231
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	ce 01       	movw	r24, r28
    1298:	85 96       	adiw	r24, 0x25	; 37
    129a:	0e 94 58 24 	call	0x48b0	; 0x48b0 <quest>
    129e:	80 93 e2 01 	sts	0x01E2, r24
    
    omega_estimation(q_o, v_w);
    12a2:	6f ee       	ldi	r22, 0xEF	; 239
    12a4:	71 e0       	ldi	r23, 0x01	; 1
    12a6:	84 e8       	ldi	r24, 0x84	; 132
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	0e 94 53 28 	call	0x50a6	; 0x50a6 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    12ae:	60 91 e2 01 	lds	r22, 0x01E2
    12b2:	80 91 e1 01 	lds	r24, 0x01E1
    12b6:	68 9f       	mul	r22, r24
    12b8:	b0 01       	movw	r22, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	88 27       	eor	r24, r24
    12be:	77 fd       	sbrc	r23, 7
    12c0:	80 95       	com	r24
    12c2:	98 2f       	mov	r25, r24
    12c4:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    12c8:	ab 01       	movw	r20, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	8f ee       	ldi	r24, 0xEF	; 239
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    12d4:	8f ee       	ldi	r24, 0xEF	; 239
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vector_norm>
    12dc:	60 93 94 04 	sts	0x0494, r22
    12e0:	70 93 95 04 	sts	0x0495, r23
    12e4:	80 93 96 04 	sts	0x0496, r24
    12e8:	90 93 97 04 	sts	0x0497, r25
    convert_unit_quaternion(q_o);
    12ec:	84 e8       	ldi	r24, 0x84	; 132
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    12f4:	ce 01       	movw	r24, r28
    12f6:	0d 96       	adiw	r24, 0x0d	; 13
    12f8:	85 db       	rcall	.-2294   	; 0xa04 <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    12fa:	80 91 d4 01 	lds	r24, 0x01D4
    12fe:	88 37       	cpi	r24, 0x78	; 120
    1300:	d4 f4       	brge	.+52     	; 0x1336 <__stack+0x237>
    1302:	20 91 2d 05 	lds	r18, 0x052D
    1306:	30 91 2e 05 	lds	r19, 0x052E
    130a:	40 91 2f 05 	lds	r20, 0x052F
    130e:	50 91 30 05 	lds	r21, 0x0530
    1312:	60 91 31 05 	lds	r22, 0x0531
    1316:	70 91 32 05 	lds	r23, 0x0532
    131a:	80 91 33 05 	lds	r24, 0x0533
    131e:	90 91 34 05 	lds	r25, 0x0534
    1322:	20 32       	cpi	r18, 0x20	; 32
    1324:	31 4a       	sbci	r19, 0xA1	; 161
    1326:	47 40       	sbci	r20, 0x07	; 7
    1328:	51 05       	cpc	r21, r1
    132a:	61 05       	cpc	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	81 05       	cpc	r24, r1
    1330:	91 05       	cpc	r25, r1
    1332:	a1 f1       	breq	.+104    	; 0x139c <__stack+0x29d>
    1334:	98 f1       	brcs	.+102    	; 0x139c <__stack+0x29d>
		{    avg_md_new = 0;
    1336:	10 92 c2 01 	sts	0x01C2, r1
    133a:	10 92 c3 01 	sts	0x01C3, r1
    133e:	10 92 c4 01 	sts	0x01C4, r1
    1342:	10 92 c5 01 	sts	0x01C5, r1
			star_flag = 121;                 // 91
    1346:	89 e7       	ldi	r24, 0x79	; 121
    1348:	80 93 d4 01 	sts	0x01D4, r24
			if (light ==1)
    134c:	80 91 e2 01 	lds	r24, 0x01E2
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	b1 f4       	brne	.+44     	; 0x1380 <__stack+0x281>
			{
				time_l = time_l +2;
    1354:	80 91 ba 01 	lds	r24, 0x01BA
    1358:	90 91 bb 01 	lds	r25, 0x01BB
    135c:	02 96       	adiw	r24, 0x02	; 2
    135e:	90 93 bb 01 	sts	0x01BB, r25
    1362:	80 93 ba 01 	sts	0x01BA, r24
				time_e =0;
    1366:	10 92 bd 01 	sts	0x01BD, r1
    136a:	10 92 bc 01 	sts	0x01BC, r1
				start_time = time_l % 720;   //690
    136e:	60 ed       	ldi	r22, 0xD0	; 208
    1370:	72 e0       	ldi	r23, 0x02	; 2
    1372:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <__divmodhi4>
    1376:	90 93 d3 01 	sts	0x01D3, r25
    137a:	80 93 d2 01 	sts	0x01D2, r24
    137e:	ee c0       	rjmp	.+476    	; 0x155c <__stack+0x45d>
					gps_power =2;
				}
			}
			else
			{
				start_time =0;
    1380:	10 92 d3 01 	sts	0x01D3, r1
    1384:	10 92 d2 01 	sts	0x01D2, r1
				time_e = time_e +2;
    1388:	80 91 bc 01 	lds	r24, 0x01BC
    138c:	90 91 bd 01 	lds	r25, 0x01BD
    1390:	02 96       	adiw	r24, 0x02	; 2
    1392:	90 93 bd 01 	sts	0x01BD, r25
    1396:	80 93 bc 01 	sts	0x01BC, r24
    139a:	e0 c0       	rjmp	.+448    	; 0x155c <__stack+0x45d>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vector_norm>
    13a4:	6b 01       	movw	r12, r22
    13a6:	7c 01       	movw	r14, r24
    13a8:	60 93 ce 01 	sts	0x01CE, r22
    13ac:	70 93 cf 01 	sts	0x01CF, r23
    13b0:	80 93 d0 01 	sts	0x01D0, r24
    13b4:	90 93 d1 01 	sts	0x01D1, r25
			md_start = norm_m_d * light;
    13b8:	60 91 e2 01 	lds	r22, 0x01E2
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    13c6:	9b 01       	movw	r18, r22
    13c8:	ac 01       	movw	r20, r24
    13ca:	c7 01       	movw	r24, r14
    13cc:	b6 01       	movw	r22, r12
    13ce:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    13d2:	6b 01       	movw	r12, r22
    13d4:	7c 01       	movw	r14, r24
    13d6:	60 93 ca 01 	sts	0x01CA, r22
    13da:	70 93 cb 01 	sts	0x01CB, r23
    13de:	80 93 cc 01 	sts	0x01CC, r24
    13e2:	90 93 cd 01 	sts	0x01CD, r25
			if (md_start != 0)
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <__stack+0x2f7>
    13f4:	60 c0       	rjmp	.+192    	; 0x14b6 <__stack+0x3b7>
			{
				if (num==2)
    13f6:	00 91 04 01 	lds	r16, 0x0104
    13fa:	10 91 05 01 	lds	r17, 0x0105
    13fe:	02 30       	cpi	r16, 0x02	; 2
    1400:	11 05       	cpc	r17, r1
    1402:	a9 f4       	brne	.+42     	; 0x142e <__stack+0x32f>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    1404:	a7 01       	movw	r20, r14
    1406:	96 01       	movw	r18, r12
    1408:	c7 01       	movw	r24, r14
    140a:	b6 01       	movw	r22, r12
    140c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    141c:	60 93 c2 01 	sts	0x01C2, r22
    1420:	70 93 c3 01 	sts	0x01C3, r23
    1424:	80 93 c4 01 	sts	0x01C4, r24
    1428:	90 93 c5 01 	sts	0x01C5, r25
    142c:	2c c0       	rjmp	.+88     	; 0x1486 <__stack+0x387>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    142e:	b8 01       	movw	r22, r16
    1430:	61 50       	subi	r22, 0x01	; 1
    1432:	71 09       	sbc	r23, r1
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatunsisf>
    143c:	20 91 c6 01 	lds	r18, 0x01C6
    1440:	30 91 c7 01 	lds	r19, 0x01C7
    1444:	40 91 c8 01 	lds	r20, 0x01C8
    1448:	50 91 c9 01 	lds	r21, 0x01C9
    144c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    145c:	6b 01       	movw	r12, r22
    145e:	7c 01       	movw	r14, r24
    1460:	b8 01       	movw	r22, r16
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatunsisf>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    1476:	60 93 c2 01 	sts	0x01C2, r22
    147a:	70 93 c3 01 	sts	0x01C3, r23
    147e:	80 93 c4 01 	sts	0x01C4, r24
    1482:	90 93 c5 01 	sts	0x01C5, r25
				}
				num = num +1;
    1486:	0f 5f       	subi	r16, 0xFF	; 255
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	10 93 05 01 	sts	0x0105, r17
    148e:	00 93 04 01 	sts	0x0104, r16
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1492:	c0 90 c2 01 	lds	r12, 0x01C2
    1496:	d0 90 c3 01 	lds	r13, 0x01C3
    149a:	e0 90 c4 01 	lds	r14, 0x01C4
    149e:	f0 90 c5 01 	lds	r15, 0x01C5
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	c7 01       	movw	r24, r14
    14aa:	b6 01       	movw	r22, r12
    14ac:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    14b0:	81 11       	cpse	r24, r1
    14b2:	10 c0       	rjmp	.+32     	; 0x14d4 <__stack+0x3d5>
    14b4:	1a c0       	rjmp	.+52     	; 0x14ea <__stack+0x3eb>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	90 93 05 01 	sts	0x0105, r25
    14be:	80 93 04 01 	sts	0x0104, r24
				avg_md_new = 0;
    14c2:	10 92 c2 01 	sts	0x01C2, r1
    14c6:	10 92 c3 01 	sts	0x01C3, r1
    14ca:	10 92 c4 01 	sts	0x01C4, r1
    14ce:	10 92 c5 01 	sts	0x01C5, r1
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <__stack+0x3eb>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	37 ed       	ldi	r19, 0xD7	; 215
    14d8:	43 e2       	ldi	r20, 0x23	; 35
    14da:	5d e3       	ldi	r21, 0x3D	; 61
    14dc:	c7 01       	movw	r24, r14
    14de:	b6 01       	movw	r22, r12
    14e0:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	84 f0       	brlt	.+32     	; 0x1508 <__stack+0x409>
    14e8:	19 c0       	rjmp	.+50     	; 0x151c <__stack+0x41d>
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	60 91 c6 01 	lds	r22, 0x01C6
    14f4:	70 91 c7 01 	lds	r23, 0x01C7
    14f8:	80 91 c8 01 	lds	r24, 0x01C8
    14fc:	90 91 c9 01 	lds	r25, 0x01C9
    1500:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    1504:	88 23       	and	r24, r24
    1506:	51 f0       	breq	.+20     	; 0x151c <__stack+0x41d>
			{
				flag_on = flag_on +2;
    1508:	80 91 c0 01 	lds	r24, 0x01C0
    150c:	90 91 c1 01 	lds	r25, 0x01C1
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	90 93 c1 01 	sts	0x01C1, r25
    1516:	80 93 c0 01 	sts	0x01C0, r24
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <__stack+0x425>
			}
			else
			{
				flag_on = 0;
    151c:	10 92 c1 01 	sts	0x01C1, r1
    1520:	10 92 c0 01 	sts	0x01C0, r1
			}
			if (flag_on > gps_start)
    1524:	60 91 c0 01 	lds	r22, 0x01C0
    1528:	70 91 c1 01 	lds	r23, 0x01C1
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatunsisf>
    1534:	20 91 00 01 	lds	r18, 0x0100
    1538:	30 91 01 01 	lds	r19, 0x0101
    153c:	40 91 02 01 	lds	r20, 0x0102
    1540:	50 91 03 01 	lds	r21, 0x0103
    1544:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    1548:	18 16       	cp	r1, r24
    154a:	34 f4       	brge	.+12     	; 0x1558 <__stack+0x459>
			{
				gps_power = 2;
				star_flag = star_flag +2;
    154c:	80 91 d4 01 	lds	r24, 0x01D4
    1550:	8e 5f       	subi	r24, 0xFE	; 254
    1552:	80 93 d4 01 	sts	0x01D4, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <__stack+0x45d>
			}
			else
			{
				gps_power=0;
				star_flag = 0;                        
    1558:	10 92 d4 01 	sts	0x01D4, r1
			}
			
		}
  avg_md = avg_md_new;
    155c:	80 91 c2 01 	lds	r24, 0x01C2
    1560:	90 91 c3 01 	lds	r25, 0x01C3
    1564:	a0 91 c4 01 	lds	r26, 0x01C4
    1568:	b0 91 c5 01 	lds	r27, 0x01C5
    156c:	80 93 c6 01 	sts	0x01C6, r24
    1570:	90 93 c7 01 	sts	0x01C7, r25
    1574:	a0 93 c8 01 	sts	0x01C8, r26
    1578:	b0 93 c9 01 	sts	0x01C9, r27
  /////////////////////
  gps_power = 2;//this line added only for gps dynamic testing
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	90 93 bf 01 	sts	0x01BF, r25
    1584:	80 93 be 01 	sts	0x01BE, r24
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    1588:	c0 90 94 04 	lds	r12, 0x0494
    158c:	d0 90 95 04 	lds	r13, 0x0495
    1590:	e0 90 96 04 	lds	r14, 0x0496
    1594:	f0 90 97 04 	lds	r15, 0x0497
    1598:	2f e6       	ldi	r18, 0x6F	; 111
    159a:	32 e1       	ldi	r19, 0x12	; 18
    159c:	43 e8       	ldi	r20, 0x83	; 131
    159e:	5b e3       	ldi	r21, 0x3B	; 59
    15a0:	c7 01       	movw	r24, r14
    15a2:	b6 01       	movw	r22, r12
    15a4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	bc f4       	brge	.+46     	; 0x15da <__stack+0x4db>
    15ac:	90 91 e2 01 	lds	r25, 0x01E2
    15b0:	80 91 e1 01 	lds	r24, 0x01E1
    15b4:	98 9f       	mul	r25, r24
    15b6:	c0 01       	movw	r24, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	71 f4       	brne	.+28     	; 0x15da <__stack+0x4db>
   {
	   flag_N = flag_N+1;
    15be:	80 91 df 01 	lds	r24, 0x01DF
    15c2:	90 91 e0 01 	lds	r25, 0x01E0
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	90 93 e0 01 	sts	0x01E0, r25
    15cc:	80 93 df 01 	sts	0x01DF, r24
	   flag_D = 0;
    15d0:	10 92 de 01 	sts	0x01DE, r1
    15d4:	10 92 dd 01 	sts	0x01DD, r1
    15d8:	17 c0       	rjmp	.+46     	; 0x1608 <__stack+0x509>
   }
   else if (mod_w > TOLW_N2D)
    15da:	2f e6       	ldi	r18, 0x6F	; 111
    15dc:	32 e1       	ldi	r19, 0x12	; 18
    15de:	43 e0       	ldi	r20, 0x03	; 3
    15e0:	5c e3       	ldi	r21, 0x3C	; 60
    15e2:	c7 01       	movw	r24, r14
    15e4:	b6 01       	movw	r22, r12
    15e6:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	6c f4       	brge	.+26     	; 0x1608 <__stack+0x509>
   {
	   flag_D = flag_D +1;
    15ee:	80 91 dd 01 	lds	r24, 0x01DD
    15f2:	90 91 de 01 	lds	r25, 0x01DE
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	90 93 de 01 	sts	0x01DE, r25
    15fc:	80 93 dd 01 	sts	0x01DD, r24
	   flag_N = 0;
    1600:	10 92 e0 01 	sts	0x01E0, r1
    1604:	10 92 df 01 	sts	0x01DF, r1
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    1608:	20 90 2d 05 	lds	r2, 0x052D
    160c:	30 90 2e 05 	lds	r3, 0x052E
    1610:	40 90 2f 05 	lds	r4, 0x052F
    1614:	50 90 30 05 	lds	r5, 0x0530
    1618:	60 90 31 05 	lds	r6, 0x0531
    161c:	70 90 32 05 	lds	r7, 0x0532
    1620:	80 90 33 05 	lds	r8, 0x0533
    1624:	90 90 34 05 	lds	r9, 0x0534
    1628:	22 2d       	mov	r18, r2
    162a:	33 2d       	mov	r19, r3
    162c:	44 2d       	mov	r20, r4
    162e:	55 2d       	mov	r21, r5
    1630:	66 2d       	mov	r22, r6
    1632:	77 2d       	mov	r23, r7
    1634:	88 2d       	mov	r24, r8
    1636:	99 2d       	mov	r25, r9
    1638:	23 3f       	cpi	r18, 0xF3	; 243
    163a:	31 40       	sbci	r19, 0x01	; 1
    163c:	41 05       	cpc	r20, r1
    163e:	51 05       	cpc	r21, r1
    1640:	61 05       	cpc	r22, r1
    1642:	71 05       	cpc	r23, r1
    1644:	81 05       	cpc	r24, r1
    1646:	91 05       	cpc	r25, r1
    1648:	09 f0       	breq	.+2      	; 0x164c <__stack+0x54d>
    164a:	a0 f4       	brcc	.+40     	; 0x1674 <__stack+0x575>
	{
		Mode = DETUMBLING;
    164c:	84 e0       	ldi	r24, 0x04	; 4
    164e:	80 93 22 01 	sts	0x0122, r24
		t_now = 0;
    1652:	10 92 d5 01 	sts	0x01D5, r1
    1656:	10 92 d6 01 	sts	0x01D6, r1
    165a:	10 92 d7 01 	sts	0x01D7, r1
    165e:	10 92 d8 01 	sts	0x01D8, r1
    1662:	10 92 d9 01 	sts	0x01D9, r1
    1666:	10 92 da 01 	sts	0x01DA, r1
    166a:	10 92 db 01 	sts	0x01DB, r1
    166e:	10 92 dc 01 	sts	0x01DC, r1
    1672:	77 c0       	rjmp	.+238    	; 0x1762 <__stack+0x663>
	}
	else
	{
		if (star_flag >0)
    1674:	80 91 d4 01 	lds	r24, 0x01D4
    1678:	18 16       	cp	r1, r24
    167a:	5c f5       	brge	.+86     	; 0x16d2 <__stack+0x5d3>
		{
			if (Mode == DETUMBLING)
    167c:	80 91 22 01 	lds	r24, 0x0122
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	39 f5       	brne	.+78     	; 0x16d2 <__stack+0x5d3>
			{
				if (flag_N > tol_time)
    1684:	a0 91 df 01 	lds	r26, 0x01DF
    1688:	b0 91 e0 01 	lds	r27, 0x01E0
    168c:	e0 91 06 01 	lds	r30, 0x0106
    1690:	f0 91 07 01 	lds	r31, 0x0107
    1694:	ea 17       	cp	r30, r26
    1696:	fb 07       	cpc	r31, r27
    1698:	c4 f4       	brge	.+48     	; 0x16ca <__stack+0x5cb>
				{
					Mode = NOMINAL;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 22 01 	sts	0x0122, r24
					t_now = Time;
    16a0:	20 92 d5 01 	sts	0x01D5, r2
    16a4:	30 92 d6 01 	sts	0x01D6, r3
    16a8:	40 92 d7 01 	sts	0x01D7, r4
    16ac:	50 92 d8 01 	sts	0x01D8, r5
    16b0:	60 92 d9 01 	sts	0x01D9, r6
    16b4:	70 92 da 01 	sts	0x01DA, r7
    16b8:	80 92 db 01 	sts	0x01DB, r8
    16bc:	90 92 dc 01 	sts	0x01DC, r9
					flag_N = 0;
    16c0:	10 92 e0 01 	sts	0x01E0, r1
    16c4:	10 92 df 01 	sts	0x01DF, r1
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <__stack+0x5d3>
				}
				else
				{flag_D = 0;}	
    16ca:	10 92 de 01 	sts	0x01DE, r1
    16ce:	10 92 dd 01 	sts	0x01DD, r1
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    16d2:	80 91 22 01 	lds	r24, 0x0122
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__stack+0x5dd>
    16da:	43 c0       	rjmp	.+134    	; 0x1762 <__stack+0x663>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    16dc:	a0 91 dd 01 	lds	r26, 0x01DD
    16e0:	b0 91 de 01 	lds	r27, 0x01DE
    16e4:	e0 91 06 01 	lds	r30, 0x0106
    16e8:	f0 91 07 01 	lds	r31, 0x0107
    16ec:	ea 17       	cp	r30, r26
    16ee:	fb 07       	cpc	r31, r27
    16f0:	a4 f5       	brge	.+104    	; 0x175a <__stack+0x65b>
    16f2:	20 91 d5 01 	lds	r18, 0x01D5
    16f6:	30 91 d6 01 	lds	r19, 0x01D6
    16fa:	40 91 d7 01 	lds	r20, 0x01D7
    16fe:	50 91 d8 01 	lds	r21, 0x01D8
    1702:	60 91 d9 01 	lds	r22, 0x01D9
    1706:	70 91 da 01 	lds	r23, 0x01DA
    170a:	80 91 db 01 	lds	r24, 0x01DB
    170e:	90 91 dc 01 	lds	r25, 0x01DC
    1712:	20 5f       	subi	r18, 0xF0	; 240
    1714:	38 4d       	sbci	r19, 0xD8	; 216
    1716:	4f 4f       	sbci	r20, 0xFF	; 255
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	6f 4f       	sbci	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	a2 2e       	mov	r10, r18
    1724:	b3 2e       	mov	r11, r19
    1726:	c4 2e       	mov	r12, r20
    1728:	d5 2e       	mov	r13, r21
    172a:	e6 2e       	mov	r14, r22
    172c:	f7 2e       	mov	r15, r23
    172e:	08 2f       	mov	r16, r24
    1730:	19 2f       	mov	r17, r25
    1732:	22 2d       	mov	r18, r2
    1734:	33 2d       	mov	r19, r3
    1736:	44 2d       	mov	r20, r4
    1738:	55 2d       	mov	r21, r5
    173a:	66 2d       	mov	r22, r6
    173c:	77 2d       	mov	r23, r7
    173e:	88 2d       	mov	r24, r8
    1740:	99 2d       	mov	r25, r9
    1742:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <__cmpdi2>
    1746:	49 f0       	breq	.+18     	; 0x175a <__stack+0x65b>
    1748:	40 f0       	brcs	.+16     	; 0x175a <__stack+0x65b>
		 {
			 Mode = DETUMBLING;
    174a:	84 e0       	ldi	r24, 0x04	; 4
    174c:	80 93 22 01 	sts	0x0122, r24
			 flag_D = 0;
    1750:	10 92 de 01 	sts	0x01DE, r1
    1754:	10 92 dd 01 	sts	0x01DD, r1
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__stack+0x663>
		 }
		 else
		 {
			 flag_N = 0;
    175a:	10 92 e0 01 	sts	0x01E0, r1
    175e:	10 92 df 01 	sts	0x01DF, r1
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    1762:	80 91 be 01 	lds	r24, 0x01BE
    1766:	80 93 e9 04 	sts	0x04E9, r24
}
    176a:	e0 96       	adiw	r28, 0x30	; 48
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	9f 90       	pop	r9
    178c:	8f 90       	pop	r8
    178e:	7f 90       	pop	r7
    1790:	6f 90       	pop	r6
    1792:	5f 90       	pop	r5
    1794:	4f 90       	pop	r4
    1796:	3f 90       	pop	r3
    1798:	2f 90       	pop	r2
    179a:	08 95       	ret

0000179c <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	fc 01       	movw	r30, r24
    17a0:	32 97       	sbiw	r30, 0x02	; 2
    17a2:	eb 30       	cpi	r30, 0x0B	; 11
    17a4:	f1 05       	cpc	r31, r1
    17a6:	20 f4       	brcc	.+8      	; 0x17b0 <days_in_months+0x14>
    17a8:	ea 5b       	subi	r30, 0xBA	; 186
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	0c 94 9f 36 	jmp	0x6d3e	; 0x6d3e <__tablejump2__>
  {
    case 1:
      return 0;
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	08 95       	ret
      break;
    case 2:
      return 31;
      break;
    case 3:
      return 59;
    17c2:	2b e3       	ldi	r18, 0x3B	; 59
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	08 95       	ret
      break;
    case 4:
      return 90;
    17d4:	2a e5       	ldi	r18, 0x5A	; 90
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	08 95       	ret
      break;
    case 5:
      return 120;
    17e6:	28 e7       	ldi	r18, 0x78	; 120
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	08 95       	ret
      break;
    case 6:
      return 151;
    17f8:	27 e9       	ldi	r18, 0x97	; 151
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	08 95       	ret
      break;
    case 7:
      return 181;
    180a:	25 eb       	ldi	r18, 0xB5	; 181
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	08 95       	ret
      break;
    case 8:
      return 212;
    181c:	24 ed       	ldi	r18, 0xD4	; 212
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	08 95       	ret
      break;
    case 9:
      return 243;
    182e:	23 ef       	ldi	r18, 0xF3	; 243
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	08 95       	ret
      break;
    case 10:
      return 273;
    1840:	21 e1       	ldi	r18, 0x11	; 17
    1842:	31 e0       	ldi	r19, 0x01	; 1
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	08 95       	ret
      break;
    case 11:
      return 304;
    1852:	20 e3       	ldi	r18, 0x30	; 48
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	08 95       	ret
      break;
    case 12:
      return 334;
    1864:	2e e4       	ldi	r18, 0x4E	; 78
    1866:	31 e0       	ldi	r19, 0x01	; 1
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	08 95       	ret
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    1876:	2f e1       	ldi	r18, 0x1F	; 31
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    1886:	08 95       	ret

00001888 <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    1888:	2f 92       	push	r2
    188a:	3f 92       	push	r3
    188c:	4f 92       	push	r4
    188e:	5f 92       	push	r5
    1890:	6f 92       	push	r6
    1892:	7f 92       	push	r7
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	67 97       	sbiw	r28, 0x17	; 23
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	1c 01       	movw	r2, r24
    18be:	86 2f       	mov	r24, r22
    18c0:	4b 83       	std	Y+3, r20	; 0x03
    18c2:	52 2e       	mov	r5, r18
    18c4:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    18c6:	6a df       	rcall	.-300    	; 0x179c <days_in_months>
    18c8:	2c 83       	std	Y+4, r18	; 0x04
    18ca:	3d 83       	std	Y+5, r19	; 0x05
    18cc:	4e 83       	std	Y+6, r20	; 0x06
    18ce:	5f 83       	std	Y+7, r21	; 0x07
    18d0:	68 87       	std	Y+8, r22	; 0x08
    18d2:	79 87       	std	Y+9, r23	; 0x09
    18d4:	8a 87       	std	Y+10, r24	; 0x0a
    18d6:	9b 87       	std	Y+11, r25	; 0x0b
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    18d8:	2e 2d       	mov	r18, r14
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	20 58       	subi	r18, 0x80	; 128
    18ea:	3c 45       	sbci	r19, 0x5C	; 92
    18ec:	44 49       	sbci	r20, 0x94	; 148
    18ee:	5b 4c       	sbci	r21, 0xCB	; 203
    18f0:	6e 40       	sbci	r22, 0x0E	; 14
    18f2:	71 09       	sbc	r23, r1
    18f4:	81 09       	sbc	r24, r1
    18f6:	91 09       	sbc	r25, r1
    18f8:	72 2e       	mov	r7, r18
    18fa:	83 2e       	mov	r8, r19
    18fc:	94 2e       	mov	r9, r20
    18fe:	65 2e       	mov	r6, r21
    1900:	b6 2f       	mov	r27, r22
    1902:	a7 2f       	mov	r26, r23
    1904:	f8 2f       	mov	r31, r24
    1906:	e9 2f       	mov	r30, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1908:	20 2f       	mov	r18, r16
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	04 e0       	ldi	r16, 0x04	; 4
    191a:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    191e:	b1 2c       	mov	r11, r1
    1920:	c1 2c       	mov	r12, r1
    1922:	d1 2c       	mov	r13, r1
    1924:	e1 2c       	mov	r14, r1
    1926:	f1 2c       	mov	r15, r1
    1928:	00 e0       	ldi	r16, 0x00	; 0
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1930:	02 e0       	ldi	r16, 0x02	; 2
    1932:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1936:	a2 2e       	mov	r10, r18
    1938:	b3 2e       	mov	r11, r19
    193a:	c4 2e       	mov	r12, r20
    193c:	d5 2e       	mov	r13, r21
    193e:	e6 2e       	mov	r14, r22
    1940:	f7 2e       	mov	r15, r23
    1942:	08 2f       	mov	r16, r24
    1944:	19 2f       	mov	r17, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1946:	27 2d       	mov	r18, r7
    1948:	38 2d       	mov	r19, r8
    194a:	49 2d       	mov	r20, r9
    194c:	56 2d       	mov	r21, r6
    194e:	6b 2f       	mov	r22, r27
    1950:	7a 2f       	mov	r23, r26
    1952:	8f 2f       	mov	r24, r31
    1954:	9e 2f       	mov	r25, r30
    1956:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    195a:	62 2e       	mov	r6, r18
    195c:	73 2e       	mov	r7, r19
    195e:	84 2e       	mov	r8, r20
    1960:	95 2e       	mov	r9, r21
    1962:	46 2e       	mov	r4, r22
    1964:	b7 2f       	mov	r27, r23
    1966:	a8 2f       	mov	r26, r24
    1968:	f9 2f       	mov	r31, r25
  now += ((uint64_t)hours) * 60 * 60;
    196a:	25 2d       	mov	r18, r5
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	04 e0       	ldi	r16, 0x04	; 4
    197c:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1980:	a5 2c       	mov	r10, r5
    1982:	b1 2c       	mov	r11, r1
    1984:	c1 2c       	mov	r12, r1
    1986:	d1 2c       	mov	r13, r1
    1988:	e1 2c       	mov	r14, r1
    198a:	f1 2c       	mov	r15, r1
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1994:	a2 2e       	mov	r10, r18
    1996:	b3 2e       	mov	r11, r19
    1998:	c4 2e       	mov	r12, r20
    199a:	d5 2e       	mov	r13, r21
    199c:	e6 2e       	mov	r14, r22
    199e:	f7 2e       	mov	r15, r23
    19a0:	e8 2f       	mov	r30, r24
    19a2:	19 2f       	mov	r17, r25
    19a4:	04 e0       	ldi	r16, 0x04	; 4
    19a6:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    19aa:	0e 2f       	mov	r16, r30
    19ac:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    19b0:	04 e0       	ldi	r16, 0x04	; 4
    19b2:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    19b6:	a2 2e       	mov	r10, r18
    19b8:	b3 2e       	mov	r11, r19
    19ba:	c4 2e       	mov	r12, r20
    19bc:	d5 2e       	mov	r13, r21
    19be:	e6 2e       	mov	r14, r22
    19c0:	f7 2e       	mov	r15, r23
    19c2:	08 2f       	mov	r16, r24
    19c4:	19 2f       	mov	r17, r25
    19c6:	26 2d       	mov	r18, r6
    19c8:	37 2d       	mov	r19, r7
    19ca:	48 2d       	mov	r20, r8
    19cc:	59 2d       	mov	r21, r9
    19ce:	64 2d       	mov	r22, r4
    19d0:	7b 2f       	mov	r23, r27
    19d2:	8a 2f       	mov	r24, r26
    19d4:	9f 2f       	mov	r25, r31
    19d6:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    19da:	f2 2f       	mov	r31, r18
    19dc:	3d 87       	std	Y+13, r19	; 0x0d
    19de:	4e 87       	std	Y+14, r20	; 0x0e
    19e0:	5f 87       	std	Y+15, r21	; 0x0f
    19e2:	68 8b       	std	Y+16, r22	; 0x10
    19e4:	79 8b       	std	Y+17, r23	; 0x11
    19e6:	8a 8b       	std	Y+18, r24	; 0x12
    19e8:	9b 8b       	std	Y+19, r25	; 0x13
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    19ea:	22 2d       	mov	r18, r2
    19ec:	33 2d       	mov	r19, r3
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	03 e0       	ldi	r16, 0x03	; 3
    19fc:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1a00:	e2 2f       	mov	r30, r18
    1a02:	3a 83       	std	Y+2, r19	; 0x02
    1a04:	4f 8b       	std	Y+23, r20	; 0x17
    1a06:	5c 8b       	std	Y+20, r21	; 0x14
    1a08:	b6 2f       	mov	r27, r22
    1a0a:	a7 2f       	mov	r26, r23
    1a0c:	8d 8b       	std	Y+21, r24	; 0x15
    1a0e:	9e 8b       	std	Y+22, r25	; 0x16
    1a10:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1a14:	a2 2e       	mov	r10, r18
    1a16:	b3 2e       	mov	r11, r19
    1a18:	c4 2e       	mov	r12, r20
    1a1a:	d5 2e       	mov	r13, r21
    1a1c:	e6 2e       	mov	r14, r22
    1a1e:	f7 2e       	mov	r15, r23
    1a20:	08 2f       	mov	r16, r24
    1a22:	19 2f       	mov	r17, r25
    1a24:	2e 2f       	mov	r18, r30
    1a26:	3a 81       	ldd	r19, Y+2	; 0x02
    1a28:	4f 89       	ldd	r20, Y+23	; 0x17
    1a2a:	5c 89       	ldd	r21, Y+20	; 0x14
    1a2c:	6b 2f       	mov	r22, r27
    1a2e:	7a 2f       	mov	r23, r26
    1a30:	8d 89       	ldd	r24, Y+21	; 0x15
    1a32:	9e 89       	ldd	r25, Y+22	; 0x16
    1a34:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    1a38:	a2 2c       	mov	r10, r2
    1a3a:	b3 2c       	mov	r11, r3
    1a3c:	c1 2c       	mov	r12, r1
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	e1 2c       	mov	r14, r1
    1a42:	f1 2c       	mov	r15, r1
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    1a4c:	a2 2e       	mov	r10, r18
    1a4e:	b3 2e       	mov	r11, r19
    1a50:	c4 2e       	mov	r12, r20
    1a52:	d5 2e       	mov	r13, r21
    1a54:	e6 2e       	mov	r14, r22
    1a56:	f7 2e       	mov	r15, r23
    1a58:	e8 2f       	mov	r30, r24
    1a5a:	19 2f       	mov	r17, r25
    1a5c:	04 e0       	ldi	r16, 0x04	; 4
    1a5e:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1a62:	0e 2f       	mov	r16, r30
    1a64:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1a68:	a2 2e       	mov	r10, r18
    1a6a:	b3 2e       	mov	r11, r19
    1a6c:	c4 2e       	mov	r12, r20
    1a6e:	d5 2e       	mov	r13, r21
    1a70:	e6 2e       	mov	r14, r22
    1a72:	f7 2e       	mov	r15, r23
    1a74:	e8 2f       	mov	r30, r24
    1a76:	19 2f       	mov	r17, r25
    1a78:	04 e0       	ldi	r16, 0x04	; 4
    1a7a:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1a7e:	0e 2f       	mov	r16, r30
    1a80:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1a84:	a2 2e       	mov	r10, r18
    1a86:	b3 2e       	mov	r11, r19
    1a88:	c4 2e       	mov	r12, r20
    1a8a:	d5 2e       	mov	r13, r21
    1a8c:	e6 2e       	mov	r14, r22
    1a8e:	f7 2e       	mov	r15, r23
    1a90:	e8 2f       	mov	r30, r24
    1a92:	19 2f       	mov	r17, r25
    1a94:	04 e0       	ldi	r16, 0x04	; 4
    1a96:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1a9a:	0e 2f       	mov	r16, r30
    1a9c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1aa0:	07 e0       	ldi	r16, 0x07	; 7
    1aa2:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1aa6:	a2 2e       	mov	r10, r18
    1aa8:	b3 2e       	mov	r11, r19
    1aaa:	c4 2e       	mov	r12, r20
    1aac:	d5 2e       	mov	r13, r21
    1aae:	e6 2e       	mov	r14, r22
    1ab0:	f7 2e       	mov	r15, r23
    1ab2:	08 2f       	mov	r16, r24
    1ab4:	19 2f       	mov	r17, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1ab6:	2f 2f       	mov	r18, r31
    1ab8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aba:	4e 85       	ldd	r20, Y+14	; 0x0e
    1abc:	5f 85       	ldd	r21, Y+15	; 0x0f
    1abe:	68 89       	ldd	r22, Y+16	; 0x10
    1ac0:	79 89       	ldd	r23, Y+17	; 0x11
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ac6:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    1aca:	72 2e       	mov	r7, r18
    1acc:	83 2e       	mov	r8, r19
    1ace:	94 2e       	mov	r9, r20
    1ad0:	b5 2f       	mov	r27, r21
    1ad2:	66 2e       	mov	r6, r22
    1ad4:	57 2e       	mov	r5, r23
    1ad6:	f8 2f       	mov	r31, r24
    1ad8:	e9 2f       	mov	r30, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	af ef       	ldi	r26, 0xFF	; 255
    1aec:	0e 94 d6 36 	call	0x6dac	; 0x6dac <__adddi3_s8>
    1af0:	ac 80       	ldd	r10, Y+4	; 0x04
    1af2:	bd 80       	ldd	r11, Y+5	; 0x05
    1af4:	ce 80       	ldd	r12, Y+6	; 0x06
    1af6:	df 80       	ldd	r13, Y+7	; 0x07
    1af8:	e8 84       	ldd	r14, Y+8	; 0x08
    1afa:	f9 84       	ldd	r15, Y+9	; 0x09
    1afc:	0a 85       	ldd	r16, Y+10	; 0x0a
    1afe:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b00:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
    1b04:	a2 2e       	mov	r10, r18
    1b06:	b3 2e       	mov	r11, r19
    1b08:	c4 2e       	mov	r12, r20
    1b0a:	d5 2e       	mov	r13, r21
    1b0c:	e6 2e       	mov	r14, r22
    1b0e:	f7 2e       	mov	r15, r23
    1b10:	a8 2f       	mov	r26, r24
    1b12:	19 2f       	mov	r17, r25
    1b14:	02 e0       	ldi	r16, 0x02	; 2
    1b16:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1b1a:	0a 2f       	mov	r16, r26
    1b1c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1b20:	a2 2e       	mov	r10, r18
    1b22:	b3 2e       	mov	r11, r19
    1b24:	c4 2e       	mov	r12, r20
    1b26:	d5 2e       	mov	r13, r21
    1b28:	e6 2e       	mov	r14, r22
    1b2a:	f7 2e       	mov	r15, r23
    1b2c:	a8 2f       	mov	r26, r24
    1b2e:	19 2f       	mov	r17, r25
    1b30:	04 e0       	ldi	r16, 0x04	; 4
    1b32:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1b36:	0a 2f       	mov	r16, r26
    1b38:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1b3c:	a2 2e       	mov	r10, r18
    1b3e:	b3 2e       	mov	r11, r19
    1b40:	c4 2e       	mov	r12, r20
    1b42:	d5 2e       	mov	r13, r21
    1b44:	e6 2e       	mov	r14, r22
    1b46:	f7 2e       	mov	r15, r23
    1b48:	a8 2f       	mov	r26, r24
    1b4a:	19 2f       	mov	r17, r25
    1b4c:	04 e0       	ldi	r16, 0x04	; 4
    1b4e:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1b52:	0a 2f       	mov	r16, r26
    1b54:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1b58:	07 e0       	ldi	r16, 0x07	; 7
    1b5a:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <__ashldi3>
    1b5e:	a2 2e       	mov	r10, r18
    1b60:	b3 2e       	mov	r11, r19
    1b62:	c4 2e       	mov	r12, r20
    1b64:	d5 2e       	mov	r13, r21
    1b66:	e6 2e       	mov	r14, r22
    1b68:	f7 2e       	mov	r15, r23
    1b6a:	08 2f       	mov	r16, r24
    1b6c:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1b6e:	27 2d       	mov	r18, r7
    1b70:	38 2d       	mov	r19, r8
    1b72:	49 2d       	mov	r20, r9
    1b74:	5b 2f       	mov	r21, r27
    1b76:	66 2d       	mov	r22, r6
    1b78:	75 2d       	mov	r23, r5
    1b7a:	8f 2f       	mov	r24, r31
    1b7c:	9e 2f       	mov	r25, r30
    1b7e:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <__adddi3>
  return now;
}
    1b82:	67 96       	adiw	r28, 0x17	; 23
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	9f 90       	pop	r9
    1ba4:	8f 90       	pop	r8
    1ba6:	7f 90       	pop	r7
    1ba8:	6f 90       	pop	r6
    1baa:	5f 90       	pop	r5
    1bac:	4f 90       	pop	r4
    1bae:	3f 90       	pop	r3
    1bb0:	2f 90       	pop	r2
    1bb2:	08 95       	ret

00001bb4 <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1bc8:	e1 2c       	mov	r14, r1
    1bca:	0e e1       	ldi	r16, 0x1E	; 30
    1bcc:	24 e0       	ldi	r18, 0x04	; 4
    1bce:	44 e1       	ldi	r20, 0x14	; 20
    1bd0:	63 e0       	ldi	r22, 0x03	; 3
    1bd2:	80 ee       	ldi	r24, 0xE0	; 224
    1bd4:	97 e0       	ldi	r25, 0x07	; 7
    1bd6:	58 de       	rcall	.-848    	; 0x1888 <get_seconds_since_pivot>
    1bd8:	a2 2e       	mov	r10, r18
    1bda:	b3 2e       	mov	r11, r19
    1bdc:	c4 2e       	mov	r12, r20
    1bde:	d5 2e       	mov	r13, r21
    1be0:	d6 2f       	mov	r29, r22
    1be2:	f7 2e       	mov	r15, r23
    1be4:	c8 2f       	mov	r28, r24
    1be6:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1be8:	80 91 e4 04 	lds	r24, 0x04E4
    1bec:	90 91 e5 04 	lds	r25, 0x04E5
    1bf0:	e0 90 e1 04 	lds	r14, 0x04E1
    1bf4:	00 91 e0 04 	lds	r16, 0x04E0
    1bf8:	20 91 df 04 	lds	r18, 0x04DF
    1bfc:	40 91 e2 04 	lds	r20, 0x04E2
    1c00:	60 91 e3 04 	lds	r22, 0x04E3
    1c04:	41 de       	rcall	.-894    	; 0x1888 <get_seconds_since_pivot>
    1c06:	20 93 98 04 	sts	0x0498, r18
    1c0a:	30 93 99 04 	sts	0x0499, r19
    1c0e:	40 93 9a 04 	sts	0x049A, r20
    1c12:	50 93 9b 04 	sts	0x049B, r21
    1c16:	60 93 9c 04 	sts	0x049C, r22
    1c1a:	70 93 9d 04 	sts	0x049D, r23
    1c1e:	80 93 9e 04 	sts	0x049E, r24
    1c22:	90 93 9f 04 	sts	0x049F, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1c26:	ed 2e       	mov	r14, r29
    1c28:	0c 2f       	mov	r16, r28
    1c2a:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <__subdi3>
    1c2e:	20 93 a0 04 	sts	0x04A0, r18
    1c32:	30 93 a1 04 	sts	0x04A1, r19
    1c36:	40 93 a2 04 	sts	0x04A2, r20
    1c3a:	50 93 a3 04 	sts	0x04A3, r21
    1c3e:	60 93 a4 04 	sts	0x04A4, r22
    1c42:	70 93 a5 04 	sts	0x04A5, r23
    1c46:	80 93 a6 04 	sts	0x04A6, r24
    1c4a:	90 93 a7 04 	sts	0x04A7, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	bf 90       	pop	r11
    1c60:	af 90       	pop	r10
    1c62:	08 95       	ret

00001c64 <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1c64:	4f 92       	push	r4
    1c66:	5f 92       	push	r5
    1c68:	6f 92       	push	r6
    1c6a:	7f 92       	push	r7
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	a4 97       	sbiw	r28, 0x24	; 36
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	8c 01       	movw	r16, r24
    1c92:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1c94:	20 91 a0 04 	lds	r18, 0x04A0
    1c98:	30 91 a1 04 	lds	r19, 0x04A1
    1c9c:	40 91 a2 04 	lds	r20, 0x04A2
    1ca0:	50 91 a3 04 	lds	r21, 0x04A3
    1ca4:	60 91 a4 04 	lds	r22, 0x04A4
    1ca8:	70 91 a5 04 	lds	r23, 0x04A5
    1cac:	80 91 a6 04 	lds	r24, 0x04A6
    1cb0:	90 91 a7 04 	lds	r25, 0x04A7
    1cb4:	0e 94 56 33 	call	0x66ac	; 0x66ac <__floatundisf>
    1cb8:	27 eb       	ldi	r18, 0xB7	; 183
    1cba:	39 e5       	ldi	r19, 0x59	; 89
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1cc4:	2e eb       	ldi	r18, 0xBE	; 190
    1cc6:	37 ef       	ldi	r19, 0xF7	; 247
    1cc8:	48 e9       	ldi	r20, 0x98	; 152
    1cca:	58 e3       	ldi	r21, 0x38	; 56
    1ccc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    1cd0:	2b 01       	movw	r4, r22
    1cd2:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1cd4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    1cd8:	6b 01       	movw	r12, r22
    1cda:	7c 01       	movw	r14, r24
    1cdc:	69 83       	std	Y+1, r22	; 0x01
    1cde:	7a 83       	std	Y+2, r23	; 0x02
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	c3 01       	movw	r24, r6
    1ce6:	b2 01       	movw	r22, r4
    1ce8:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    1cec:	6d 83       	std	Y+5, r22	; 0x05
    1cee:	7e 83       	std	Y+6, r23	; 0x06
    1cf0:	8f 83       	std	Y+7, r24	; 0x07
    1cf2:	98 87       	std	Y+8, r25	; 0x08
    1cf4:	19 86       	std	Y+9, r1	; 0x09
    1cf6:	1a 86       	std	Y+10, r1	; 0x0a
    1cf8:	1b 86       	std	Y+11, r1	; 0x0b
    1cfa:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	b0 58       	subi	r27, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d02:	8d 87       	std	Y+13, r24	; 0x0d
    1d04:	9e 87       	std	Y+14, r25	; 0x0e
    1d06:	af 87       	std	Y+15, r26	; 0x0f
    1d08:	b8 8b       	std	Y+16, r27	; 0x10
    1d0a:	c9 8a       	std	Y+17, r12	; 0x11
    1d0c:	da 8a       	std	Y+18, r13	; 0x12
    1d0e:	eb 8a       	std	Y+19, r14	; 0x13
    1d10:	fc 8a       	std	Y+20, r15	; 0x14
    1d12:	1d 8a       	std	Y+21, r1	; 0x15
    1d14:	1e 8a       	std	Y+22, r1	; 0x16
    1d16:	1f 8a       	std	Y+23, r1	; 0x17
    1d18:	18 8e       	std	Y+24, r1	; 0x18
    1d1a:	19 8e       	std	Y+25, r1	; 0x19
    1d1c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d1e:	1b 8e       	std	Y+27, r1	; 0x1b
    1d20:	1c 8e       	std	Y+28, r1	; 0x1c
    1d22:	1d 8e       	std	Y+29, r1	; 0x1d
    1d24:	1e 8e       	std	Y+30, r1	; 0x1e
    1d26:	1f 8e       	std	Y+31, r1	; 0x1f
    1d28:	18 a2       	std	Y+32, r1	; 0x20
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	89 a3       	std	Y+33, r24	; 0x21
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	ab a3       	std	Y+35, r26	; 0x23
    1d38:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1d3a:	a5 01       	movw	r20, r10
    1d3c:	be 01       	movw	r22, r28
    1d3e:	6f 5f       	subi	r22, 0xFF	; 255
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	c8 01       	movw	r24, r16
    1d44:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1d48:	a4 96       	adiw	r28, 0x24	; 36
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	7f 90       	pop	r7
    1d6a:	6f 90       	pop	r6
    1d6c:	5f 90       	pop	r5
    1d6e:	4f 90       	pop	r4
    1d70:	08 95       	ret

00001d72 <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1d72:	4f 92       	push	r4
    1d74:	5f 92       	push	r5
    1d76:	6f 92       	push	r6
    1d78:	7f 92       	push	r7
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	a4 97       	sbiw	r28, 0x24	; 36
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	8c 01       	movw	r16, r24
    1da0:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1da2:	20 91 a0 04 	lds	r18, 0x04A0
    1da6:	30 91 a1 04 	lds	r19, 0x04A1
    1daa:	40 91 a2 04 	lds	r20, 0x04A2
    1dae:	50 91 a3 04 	lds	r21, 0x04A3
    1db2:	60 91 a4 04 	lds	r22, 0x04A4
    1db6:	70 91 a5 04 	lds	r23, 0x04A5
    1dba:	80 91 a6 04 	lds	r24, 0x04A6
    1dbe:	90 91 a7 04 	lds	r25, 0x04A7
    1dc2:	0e 94 56 33 	call	0x66ac	; 0x66ac <__floatundisf>
    1dc6:	27 eb       	ldi	r18, 0xB7	; 183
    1dc8:	39 e5       	ldi	r19, 0x59	; 89
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1dd2:	2e eb       	ldi	r18, 0xBE	; 190
    1dd4:	37 ef       	ldi	r19, 0xF7	; 247
    1dd6:	48 e9       	ldi	r20, 0x98	; 152
    1dd8:	58 e3       	ldi	r21, 0x38	; 56
    1dda:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    1dde:	2b 01       	movw	r4, r22
    1de0:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1de2:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    1de6:	6b 01       	movw	r12, r22
    1de8:	7c 01       	movw	r14, r24
    1dea:	69 83       	std	Y+1, r22	; 0x01
    1dec:	7a 83       	std	Y+2, r23	; 0x02
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	c3 01       	movw	r24, r6
    1df4:	b2 01       	movw	r22, r4
    1df6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    1dfa:	2b 01       	movw	r4, r22
    1dfc:	3c 01       	movw	r6, r24
    1dfe:	77 fa       	bst	r7, 7
    1e00:	70 94       	com	r7
    1e02:	77 f8       	bld	r7, 7
    1e04:	70 94       	com	r7
    1e06:	4d 82       	std	Y+5, r4	; 0x05
    1e08:	5e 82       	std	Y+6, r5	; 0x06
    1e0a:	6f 82       	std	Y+7, r6	; 0x07
    1e0c:	78 86       	std	Y+8, r7	; 0x08
    1e0e:	19 86       	std	Y+9, r1	; 0x09
    1e10:	1a 86       	std	Y+10, r1	; 0x0a
    1e12:	1b 86       	std	Y+11, r1	; 0x0b
    1e14:	1c 86       	std	Y+12, r1	; 0x0c
    1e16:	6d 87       	std	Y+13, r22	; 0x0d
    1e18:	7e 87       	std	Y+14, r23	; 0x0e
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f
    1e1c:	98 8b       	std	Y+16, r25	; 0x10
    1e1e:	c9 8a       	std	Y+17, r12	; 0x11
    1e20:	da 8a       	std	Y+18, r13	; 0x12
    1e22:	eb 8a       	std	Y+19, r14	; 0x13
    1e24:	fc 8a       	std	Y+20, r15	; 0x14
    1e26:	1d 8a       	std	Y+21, r1	; 0x15
    1e28:	1e 8a       	std	Y+22, r1	; 0x16
    1e2a:	1f 8a       	std	Y+23, r1	; 0x17
    1e2c:	18 8e       	std	Y+24, r1	; 0x18
    1e2e:	19 8e       	std	Y+25, r1	; 0x19
    1e30:	1a 8e       	std	Y+26, r1	; 0x1a
    1e32:	1b 8e       	std	Y+27, r1	; 0x1b
    1e34:	1c 8e       	std	Y+28, r1	; 0x1c
    1e36:	1d 8e       	std	Y+29, r1	; 0x1d
    1e38:	1e 8e       	std	Y+30, r1	; 0x1e
    1e3a:	1f 8e       	std	Y+31, r1	; 0x1f
    1e3c:	18 a2       	std	Y+32, r1	; 0x20
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	9a a3       	std	Y+34, r25	; 0x22
    1e4a:	ab a3       	std	Y+35, r26	; 0x23
    1e4c:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1e4e:	a5 01       	movw	r20, r10
    1e50:	be 01       	movw	r22, r28
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	c8 01       	movw	r24, r16
    1e58:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <vector_into_matrix>
}
    1e5c:	a4 96       	adiw	r28, 0x24	; 36
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	bf 90       	pop	r11
    1e7a:	af 90       	pop	r10
    1e7c:	7f 90       	pop	r7
    1e7e:	6f 90       	pop	r6
    1e80:	5f 90       	pop	r5
    1e82:	4f 90       	pop	r4
    1e84:	08 95       	ret

00001e86 <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1e86:	cf 92       	push	r12
    1e88:	df 92       	push	r13
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	c8 54       	subi	r28, 0x48	; 72
    1e9c:	d1 09       	sbc	r29, r1
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	8c 01       	movw	r16, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	6a 01       	movw	r12, r20
    1eae:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1eb0:	ae 01       	movw	r20, r28
    1eb2:	43 5f       	subi	r20, 0xF3	; 243
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	b8 01       	movw	r22, r16
    1eb8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <vector_cross_product>
  convert_unit_vector(v_o_y);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	0d 96       	adiw	r24, 0x0d	; 13
    1ec0:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	a2 81       	ldd	r26, Z+2	; 0x02
    1ecc:	b3 81       	ldd	r27, Z+3	; 0x03
    1ece:	b0 58       	subi	r27, 0x80	; 128
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed6:	bc 8f       	std	Y+28, r27	; 0x1c
    1ed8:	44 81       	ldd	r20, Z+4	; 0x04
    1eda:	55 81       	ldd	r21, Z+5	; 0x05
    1edc:	66 81       	ldd	r22, Z+6	; 0x06
    1ede:	77 81       	ldd	r23, Z+7	; 0x07
    1ee0:	70 58       	subi	r23, 0x80	; 128
    1ee2:	4d 8f       	std	Y+29, r20	; 0x1d
    1ee4:	5e 8f       	std	Y+30, r21	; 0x1e
    1ee6:	6f 8f       	std	Y+31, r22	; 0x1f
    1ee8:	78 a3       	std	Y+32, r23	; 0x20
    1eea:	80 85       	ldd	r24, Z+8	; 0x08
    1eec:	91 85       	ldd	r25, Z+9	; 0x09
    1eee:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ef0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ef2:	b0 58       	subi	r27, 0x80	; 128
    1ef4:	89 a3       	std	Y+33, r24	; 0x21
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	ab a3       	std	Y+35, r26	; 0x23
    1efa:	bc a3       	std	Y+36, r27	; 0x24
  convert_unit_vector(v_o_z);
    1efc:	ce 01       	movw	r24, r28
    1efe:	49 96       	adiw	r24, 0x19	; 25
    1f00:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1f04:	ae 01       	movw	r20, r28
    1f06:	4f 5f       	subi	r20, 0xFF	; 255
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	be 01       	movw	r22, r28
    1f0c:	67 5e       	subi	r22, 0xE7	; 231
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	ce 01       	movw	r24, r28
    1f12:	0d 96       	adiw	r24, 0x0d	; 13
    1f14:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <vector_cross_product>
  convert_unit_vector(v_o_x);
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	ab 81       	ldd	r26, Y+3	; 0x03
    1f26:	bc 81       	ldd	r27, Y+4	; 0x04
    1f28:	8d a3       	std	Y+37, r24	; 0x25
    1f2a:	9e a3       	std	Y+38, r25	; 0x26
    1f2c:	af a3       	std	Y+39, r26	; 0x27
    1f2e:	b8 a7       	std	Y+40, r27	; 0x28
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	af 85       	ldd	r26, Y+15	; 0x0f
    1f36:	b8 89       	ldd	r27, Y+16	; 0x10
    1f38:	89 a7       	std	Y+41, r24	; 0x29
    1f3a:	9a a7       	std	Y+42, r25	; 0x2a
    1f3c:	ab a7       	std	Y+43, r26	; 0x2b
    1f3e:	bc a7       	std	Y+44, r27	; 0x2c
    1f40:	89 8d       	ldd	r24, Y+25	; 0x19
    1f42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f44:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1f46:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1f48:	8d a7       	std	Y+45, r24	; 0x2d
    1f4a:	9e a7       	std	Y+46, r25	; 0x2e
    1f4c:	af a7       	std	Y+47, r26	; 0x2f
    1f4e:	b8 ab       	std	Y+48, r27	; 0x30
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	af 81       	ldd	r26, Y+7	; 0x07
    1f56:	b8 85       	ldd	r27, Y+8	; 0x08
    1f58:	89 ab       	std	Y+49, r24	; 0x31
    1f5a:	9a ab       	std	Y+50, r25	; 0x32
    1f5c:	ab ab       	std	Y+51, r26	; 0x33
    1f5e:	bc ab       	std	Y+52, r27	; 0x34
    1f60:	89 89       	ldd	r24, Y+17	; 0x11
    1f62:	9a 89       	ldd	r25, Y+18	; 0x12
    1f64:	ab 89       	ldd	r26, Y+19	; 0x13
    1f66:	bc 89       	ldd	r27, Y+20	; 0x14
    1f68:	8d ab       	std	Y+53, r24	; 0x35
    1f6a:	9e ab       	std	Y+54, r25	; 0x36
    1f6c:	af ab       	std	Y+55, r26	; 0x37
    1f6e:	b8 af       	std	Y+56, r27	; 0x38
    1f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f74:	af 8d       	ldd	r26, Y+31	; 0x1f
    1f76:	b8 a1       	ldd	r27, Y+32	; 0x20
    1f78:	89 af       	std	Y+57, r24	; 0x39
    1f7a:	9a af       	std	Y+58, r25	; 0x3a
    1f7c:	ab af       	std	Y+59, r26	; 0x3b
    1f7e:	bc af       	std	Y+60, r27	; 0x3c
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f86:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f88:	21 96       	adiw	r28, 0x01	; 1
    1f8a:	8c af       	std	Y+60, r24	; 0x3c
    1f8c:	9d af       	std	Y+61, r25	; 0x3d
    1f8e:	ae af       	std	Y+62, r26	; 0x3e
    1f90:	bf af       	std	Y+63, r27	; 0x3f
    1f92:	21 97       	sbiw	r28, 0x01	; 1
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	af 89       	ldd	r26, Y+23	; 0x17
    1f9a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f9c:	25 96       	adiw	r28, 0x05	; 5
    1f9e:	8c af       	std	Y+60, r24	; 0x3c
    1fa0:	9d af       	std	Y+61, r25	; 0x3d
    1fa2:	ae af       	std	Y+62, r26	; 0x3e
    1fa4:	bf af       	std	Y+63, r27	; 0x3f
    1fa6:	25 97       	sbiw	r28, 0x05	; 5
    1fa8:	09 a1       	ldd	r16, Y+33	; 0x21
    1faa:	1a a1       	ldd	r17, Y+34	; 0x22
    1fac:	2b a1       	ldd	r18, Y+35	; 0x23
    1fae:	3c a1       	ldd	r19, Y+36	; 0x24
    1fb0:	29 96       	adiw	r28, 0x09	; 9
    1fb2:	0c af       	std	Y+60, r16	; 0x3c
    1fb4:	1d af       	std	Y+61, r17	; 0x3d
    1fb6:	2e af       	std	Y+62, r18	; 0x3e
    1fb8:	3f af       	std	Y+63, r19	; 0x3f
    1fba:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    1fbc:	a7 01       	movw	r20, r14
    1fbe:	be 01       	movw	r22, r28
    1fc0:	6b 5d       	subi	r22, 0xDB	; 219
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	c6 01       	movw	r24, r12
    1fc6:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <vector_into_matrix>
}
    1fca:	c8 5b       	subi	r28, 0xB8	; 184
    1fcc:	df 4f       	sbci	r29, 0xFF	; 255
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	08 95       	ret

00001fea <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    1fea:	2f 92       	push	r2
    1fec:	3f 92       	push	r3
    1fee:	4f 92       	push	r4
    1ff0:	5f 92       	push	r5
    1ff2:	6f 92       	push	r6
    1ff4:	7f 92       	push	r7
    1ff6:	8f 92       	push	r8
    1ff8:	9f 92       	push	r9
    1ffa:	af 92       	push	r10
    1ffc:	bf 92       	push	r11
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	2c 97       	sbiw	r28, 0x0c	; 12
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    201e:	dc 01       	movw	r26, r24
    2020:	8d 90       	ld	r8, X+
    2022:	9d 90       	ld	r9, X+
    2024:	ad 90       	ld	r10, X+
    2026:	bc 90       	ld	r11, X
    2028:	13 97       	sbiw	r26, 0x03	; 3
    202a:	14 96       	adiw	r26, 0x04	; 4
    202c:	cd 90       	ld	r12, X+
    202e:	dd 90       	ld	r13, X+
    2030:	ed 90       	ld	r14, X+
    2032:	fc 90       	ld	r15, X
    2034:	17 97       	sbiw	r26, 0x07	; 7
    2036:	18 96       	adiw	r26, 0x08	; 8
    2038:	8d 91       	ld	r24, X+
    203a:	9d 91       	ld	r25, X+
    203c:	0d 90       	ld	r0, X+
    203e:	bc 91       	ld	r27, X
    2040:	a0 2d       	mov	r26, r0
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	ab 83       	std	Y+3, r26	; 0x03
    2048:	bc 83       	std	Y+4, r27	; 0x04
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    204a:	a5 01       	movw	r20, r10
    204c:	94 01       	movw	r18, r8
    204e:	c7 01       	movw	r24, r14
    2050:	b6 01       	movw	r22, r12
    2052:	0e 94 26 32 	call	0x644c	; 0x644c <atan2>
    2056:	69 87       	std	Y+9, r22	; 0x09
    2058:	7a 87       	std	Y+10, r23	; 0x0a
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    205e:	a5 01       	movw	r20, r10
    2060:	94 01       	movw	r18, r8
    2062:	c5 01       	movw	r24, r10
    2064:	b4 01       	movw	r22, r8
    2066:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    206a:	4b 01       	movw	r8, r22
    206c:	5c 01       	movw	r10, r24
    206e:	a7 01       	movw	r20, r14
    2070:	96 01       	movw	r18, r12
    2072:	c7 01       	movw	r24, r14
    2074:	b6 01       	movw	r22, r12
    2076:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	c5 01       	movw	r24, r10
    2080:	b4 01       	movw	r22, r8
    2082:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2086:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    208a:	2b 01       	movw	r4, r22
    208c:	3c 01       	movw	r6, r24
  
  beta = atan2(z, (1 - F) * rho);
    208e:	25 e4       	ldi	r18, 0x45	; 69
    2090:	34 e2       	ldi	r19, 0x24	; 36
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    209a:	9b 01       	movw	r18, r22
    209c:	ac 01       	movw	r20, r24
    209e:	69 81       	ldd	r22, Y+1	; 0x01
    20a0:	7a 81       	ldd	r23, Y+2	; 0x02
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	0e 94 26 32 	call	0x644c	; 0x644c <atan2>
    20aa:	6b 01       	movw	r12, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    20b0:	c7 01       	movw	r24, r14
    20b2:	b6 01       	movw	r22, r12
    20b4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e4       	ldi	r20, 0x40	; 64
    20be:	50 e4       	ldi	r21, 0x40	; 64
    20c0:	0e 94 01 35 	call	0x6a02	; 0x6a02 <pow>
    20c4:	4b 01       	movw	r8, r22
    20c6:	5c 01       	movw	r10, r24
    20c8:	c7 01       	movw	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e4       	ldi	r20, 0x40	; 64
    20d6:	50 e4       	ldi	r21, 0x40	; 64
    20d8:	0e 94 01 35 	call	0x6a02	; 0x6a02 <pow>
    20dc:	6b 01       	movw	r12, r22
    20de:	7c 01       	movw	r14, r24
    20e0:	2e ea       	ldi	r18, 0xAE	; 174
    20e2:	39 ec       	ldi	r19, 0xC9	; 201
    20e4:	46 e2       	ldi	r20, 0x26	; 38
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	c5 01       	movw	r24, r10
    20ea:	b4 01       	movw	r22, r8
    20ec:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
    20f4:	c3 01       	movw	r24, r6
    20f6:	b2 01       	movw	r22, r4
    20f8:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    20fc:	4b 01       	movw	r8, r22
    20fe:	5c 01       	movw	r10, r24
    2100:	22 e5       	ldi	r18, 0x52	; 82
    2102:	39 e5       	ldi	r19, 0x59	; 89
    2104:	47 e2       	ldi	r20, 0x27	; 39
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	c7 01       	movw	r24, r14
    210a:	b6 01       	movw	r22, r12
    210c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2110:	29 81       	ldd	r18, Y+1	; 0x01
    2112:	3a 81       	ldd	r19, Y+2	; 0x02
    2114:	4b 81       	ldd	r20, Y+3	; 0x03
    2116:	5c 81       	ldd	r21, Y+4	; 0x04
    2118:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    211c:	a5 01       	movw	r20, r10
    211e:	94 01       	movw	r18, r8
    2120:	0e 94 26 32 	call	0x644c	; 0x644c <atan2>
    2124:	4b 01       	movw	r8, r22
    2126:	5c 01       	movw	r10, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    2128:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
    2130:	c5 01       	movw	r24, r10
    2132:	b4 01       	movw	r22, r8
    2134:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    2138:	25 e4       	ldi	r18, 0x45	; 69
    213a:	34 e2       	ldi	r19, 0x24	; 36
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	5f e3       	ldi	r21, 0x3F	; 63
    2140:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2144:	a7 01       	movw	r20, r14
    2146:	96 01       	movw	r18, r12
    2148:	0e 94 26 32 	call	0x644c	; 0x644c <atan2>
    214c:	6b 01       	movw	r12, r22
    214e:	7c 01       	movw	r14, r24
    2150:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    2152:	09 f0       	breq	.+2      	; 0x2156 <ecef2lla+0x16c>
    2154:	ad cf       	rjmp	.-166    	; 0x20b0 <ecef2lla+0xc6>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    2156:	c5 01       	movw	r24, r10
    2158:	b4 01       	movw	r22, r8
    215a:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    215e:	6b 01       	movw	r12, r22
    2160:	7c 01       	movw	r14, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    2162:	2a e8       	ldi	r18, 0x8A	; 138
    2164:	3c e5       	ldi	r19, 0x5C	; 92
    2166:	4b ed       	ldi	r20, 0xDB	; 219
    2168:	5b e3       	ldi	r21, 0x3B	; 59
    216a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    216e:	a7 01       	movw	r20, r14
    2170:	96 01       	movw	r18, r12
    2172:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2176:	9b 01       	movw	r18, r22
    2178:	ac 01       	movw	r20, r24
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	80 e8       	ldi	r24, 0x80	; 128
    2180:	9f e3       	ldi	r25, 0x3F	; 63
    2182:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2186:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
    218e:	62 e3       	ldi	r22, 0x32	; 50
    2190:	75 ea       	ldi	r23, 0xA5	; 165
    2192:	82 ec       	ldi	r24, 0xC2	; 194
    2194:	9a e4       	ldi	r25, 0x4A	; 74
    2196:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    219a:	6d 83       	std	Y+5, r22	; 0x05
    219c:	7e 83       	std	Y+6, r23	; 0x06
    219e:	8f 83       	std	Y+7, r24	; 0x07
    21a0:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    21a2:	c5 01       	movw	r24, r10
    21a4:	b4 01       	movw	r22, r8
    21a6:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
  
  v_lla[0] = phi;
    21aa:	f1 01       	movw	r30, r2
    21ac:	80 82       	st	Z, r8
    21ae:	91 82       	std	Z+1, r9	; 0x01
    21b0:	a2 82       	std	Z+2, r10	; 0x02
    21b2:	b3 82       	std	Z+3, r11	; 0x03
  v_lla[1] = lambda;
    21b4:	29 85       	ldd	r18, Y+9	; 0x09
    21b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    21b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    21ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    21bc:	24 83       	std	Z+4, r18	; 0x04
    21be:	35 83       	std	Z+5, r19	; 0x05
    21c0:	46 83       	std	Z+6, r20	; 0x06
    21c2:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    21c4:	a3 01       	movw	r20, r6
    21c6:	92 01       	movw	r18, r4
    21c8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    21cc:	2b 01       	movw	r4, r22
    21ce:	3c 01       	movw	r6, r24
    21d0:	2a e8       	ldi	r18, 0x8A	; 138
    21d2:	3c e5       	ldi	r19, 0x5C	; 92
    21d4:	4b ed       	ldi	r20, 0xDB	; 219
    21d6:	5b e3       	ldi	r21, 0x3B	; 59
    21d8:	6d 81       	ldd	r22, Y+5	; 0x05
    21da:	7e 81       	ldd	r23, Y+6	; 0x06
    21dc:	8f 81       	ldd	r24, Y+7	; 0x07
    21de:	98 85       	ldd	r25, Y+8	; 0x08
    21e0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    21e4:	a7 01       	movw	r20, r14
    21e6:	96 01       	movw	r18, r12
    21e8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    21ec:	29 81       	ldd	r18, Y+1	; 0x01
    21ee:	3a 81       	ldd	r19, Y+2	; 0x02
    21f0:	4b 81       	ldd	r20, Y+3	; 0x03
    21f2:	5c 81       	ldd	r21, Y+4	; 0x04
    21f4:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    21f8:	a7 01       	movw	r20, r14
    21fa:	96 01       	movw	r18, r12
    21fc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	c3 01       	movw	r24, r6
    2206:	b2 01       	movw	r22, r4
    2208:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    220c:	2d 81       	ldd	r18, Y+5	; 0x05
    220e:	3e 81       	ldd	r19, Y+6	; 0x06
    2210:	4f 81       	ldd	r20, Y+7	; 0x07
    2212:	58 85       	ldd	r21, Y+8	; 0x08
    2214:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    2218:	f1 01       	movw	r30, r2
    221a:	60 87       	std	Z+8, r22	; 0x08
    221c:	71 87       	std	Z+9, r23	; 0x09
    221e:	82 87       	std	Z+10, r24	; 0x0a
    2220:	93 87       	std	Z+11, r25	; 0x0b
 Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	44 e3       	ldi	r20, 0x34	; 52
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	c5 01       	movw	r24, r10
    222c:	b4 01       	movw	r22, r8
    222e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2232:	28 ed       	ldi	r18, 0xD8	; 216
    2234:	3f e0       	ldi	r19, 0x0F	; 15
    2236:	49 e4       	ldi	r20, 0x49	; 73
    2238:	50 e4       	ldi	r21, 0x40	; 64
    223a:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	48 ec       	ldi	r20, 0xC8	; 200
    2244:	52 e4       	ldi	r21, 0x42	; 66
    2246:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    224a:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <__fixsfsi>
    224e:	60 93 d3 04 	sts	0x04D3, r22
    2252:	70 93 d4 04 	sts	0x04D4, r23
    2256:	80 93 d5 04 	sts	0x04D5, r24
    225a:	90 93 d6 04 	sts	0x04D6, r25
 Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	44 e3       	ldi	r20, 0x34	; 52
    2264:	53 e4       	ldi	r21, 0x43	; 67
    2266:	d1 01       	movw	r26, r2
    2268:	14 96       	adiw	r26, 0x04	; 4
    226a:	6d 91       	ld	r22, X+
    226c:	7d 91       	ld	r23, X+
    226e:	8d 91       	ld	r24, X+
    2270:	9c 91       	ld	r25, X
    2272:	17 97       	sbiw	r26, 0x07	; 7
    2274:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2278:	28 ed       	ldi	r18, 0xD8	; 216
    227a:	3f e0       	ldi	r19, 0x0F	; 15
    227c:	49 e4       	ldi	r20, 0x49	; 73
    227e:	50 e4       	ldi	r21, 0x40	; 64
    2280:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	48 ec       	ldi	r20, 0xC8	; 200
    228a:	52 e4       	ldi	r21, 0x42	; 66
    228c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2290:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <__fixsfsi>
    2294:	60 93 d7 04 	sts	0x04D7, r22
    2298:	70 93 d8 04 	sts	0x04D8, r23
    229c:	80 93 d9 04 	sts	0x04D9, r24
    22a0:	90 93 da 04 	sts	0x04DA, r25
  Current_state.gps.alt=v_lla[2];  
    22a4:	f1 01       	movw	r30, r2
    22a6:	60 85       	ldd	r22, Z+8	; 0x08
    22a8:	71 85       	ldd	r23, Z+9	; 0x09
    22aa:	82 85       	ldd	r24, Z+10	; 0x0a
    22ac:	93 85       	ldd	r25, Z+11	; 0x0b
    22ae:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <__fixsfsi>
    22b2:	60 93 db 04 	sts	0x04DB, r22
    22b6:	70 93 dc 04 	sts	0x04DC, r23
    22ba:	80 93 dd 04 	sts	0x04DD, r24
    22be:	90 93 de 04 	sts	0x04DE, r25
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    22c2:	2c 96       	adiw	r28, 0x0c	; 12
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	7f 90       	pop	r7
    22e6:	6f 90       	pop	r6
    22e8:	5f 90       	pop	r5
    22ea:	4f 90       	pop	r4
    22ec:	3f 90       	pop	r3
    22ee:	2f 90       	pop	r2
    22f0:	08 95       	ret

000022f2 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    22f2:	2f 92       	push	r2
    22f4:	3f 92       	push	r3
    22f6:	4f 92       	push	r4
    22f8:	5f 92       	push	r5
    22fa:	6f 92       	push	r6
    22fc:	7f 92       	push	r7
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	ac 97       	sbiw	r28, 0x2c	; 44
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	1c 01       	movw	r2, r24
    2328:	7b 01       	movw	r14, r22
    232a:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    232c:	db 01       	movw	r26, r22
    232e:	4d 90       	ld	r4, X+
    2330:	5d 90       	ld	r5, X+
    2332:	6d 90       	ld	r6, X+
    2334:	7c 90       	ld	r7, X
    2336:	c3 01       	movw	r24, r6
    2338:	b2 01       	movw	r22, r4
    233a:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    233e:	6d a3       	std	Y+37, r22	; 0x25
    2340:	7e a3       	std	Y+38, r23	; 0x26
    2342:	8f a3       	std	Y+39, r24	; 0x27
    2344:	98 a7       	std	Y+40, r25	; 0x28
    2346:	f7 01       	movw	r30, r14
    2348:	c4 80       	ldd	r12, Z+4	; 0x04
    234a:	d5 80       	ldd	r13, Z+5	; 0x05
    234c:	e6 80       	ldd	r14, Z+6	; 0x06
    234e:	f7 80       	ldd	r15, Z+7	; 0x07
    2350:	c7 01       	movw	r24, r14
    2352:	b6 01       	movw	r22, r12
    2354:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    2358:	4b 01       	movw	r8, r22
    235a:	5c 01       	movw	r10, r24
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    235c:	c3 01       	movw	r24, r6
    235e:	b2 01       	movw	r22, r4
    2360:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    2364:	2b 01       	movw	r4, r22
    2366:	3c 01       	movw	r6, r24
    2368:	c7 01       	movw	r24, r14
    236a:	b6 01       	movw	r22, r12
    236c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    2370:	6b 01       	movw	r12, r22
    2372:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2374:	77 fa       	bst	r7, 7
    2376:	70 94       	com	r7
    2378:	77 f8       	bld	r7, 7
    237a:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    237c:	8d a1       	ldd	r24, Y+37	; 0x25
    237e:	9e a1       	ldd	r25, Y+38	; 0x26
    2380:	af a1       	ldd	r26, Y+39	; 0x27
    2382:	b8 a5       	ldd	r27, Y+40	; 0x28
    2384:	b0 58       	subi	r27, 0x80	; 128
    2386:	89 a7       	std	Y+41, r24	; 0x29
    2388:	9a a7       	std	Y+42, r25	; 0x2a
    238a:	ab a7       	std	Y+43, r26	; 0x2b
    238c:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    238e:	a5 01       	movw	r20, r10
    2390:	94 01       	movw	r18, r8
    2392:	c3 01       	movw	r24, r6
    2394:	b2 01       	movw	r22, r4
    2396:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    239a:	69 83       	std	Y+1, r22	; 0x01
    239c:	7a 83       	std	Y+2, r23	; 0x02
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    23a2:	a3 01       	movw	r20, r6
    23a4:	92 01       	movw	r18, r4
    23a6:	c7 01       	movw	r24, r14
    23a8:	b6 01       	movw	r22, r12
    23aa:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    23ae:	6d 83       	std	Y+5, r22	; 0x05
    23b0:	7e 83       	std	Y+6, r23	; 0x06
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
    23b6:	8d a1       	ldd	r24, Y+37	; 0x25
    23b8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ba:	af a1       	ldd	r26, Y+39	; 0x27
    23bc:	b8 a5       	ldd	r27, Y+40	; 0x28
    23be:	89 87       	std	Y+9, r24	; 0x09
    23c0:	9a 87       	std	Y+10, r25	; 0x0a
    23c2:	ab 87       	std	Y+11, r26	; 0x0b
    23c4:	bc 87       	std	Y+12, r27	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    23c6:	d7 01       	movw	r26, r14
    23c8:	c6 01       	movw	r24, r12
    23ca:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    23cc:	8d 87       	std	Y+13, r24	; 0x0d
    23ce:	9e 87       	std	Y+14, r25	; 0x0e
    23d0:	af 87       	std	Y+15, r26	; 0x0f
    23d2:	b8 8b       	std	Y+16, r27	; 0x10
    23d4:	89 8a       	std	Y+17, r8	; 0x11
    23d6:	9a 8a       	std	Y+18, r9	; 0x12
    23d8:	ab 8a       	std	Y+19, r10	; 0x13
    23da:	bc 8a       	std	Y+20, r11	; 0x14
    23dc:	1d 8a       	std	Y+21, r1	; 0x15
    23de:	1e 8a       	std	Y+22, r1	; 0x16
    23e0:	1f 8a       	std	Y+23, r1	; 0x17
    23e2:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    23e4:	a5 01       	movw	r20, r10
    23e6:	94 01       	movw	r18, r8
    23e8:	69 a5       	ldd	r22, Y+41	; 0x29
    23ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    23ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    23f4:	69 8f       	std	Y+25, r22	; 0x19
    23f6:	7a 8f       	std	Y+26, r23	; 0x1a
    23f8:	8b 8f       	std	Y+27, r24	; 0x1b
    23fa:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    23fc:	29 a5       	ldd	r18, Y+41	; 0x29
    23fe:	3a a5       	ldd	r19, Y+42	; 0x2a
    2400:	4b a5       	ldd	r20, Y+43	; 0x2b
    2402:	5c a5       	ldd	r21, Y+44	; 0x2c
    2404:	c7 01       	movw	r24, r14
    2406:	b6 01       	movw	r22, r12
    2408:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    240c:	6d 8f       	std	Y+29, r22	; 0x1d
    240e:	7e 8f       	std	Y+30, r23	; 0x1e
    2410:	8f 8f       	std	Y+31, r24	; 0x1f
    2412:	98 a3       	std	Y+32, r25	; 0x20
    2414:	49 a2       	std	Y+33, r4	; 0x21
    2416:	5a a2       	std	Y+34, r5	; 0x22
    2418:	6b a2       	std	Y+35, r6	; 0x23
    241a:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    241c:	a8 01       	movw	r20, r16
    241e:	be 01       	movw	r22, r28
    2420:	6f 5f       	subi	r22, 0xFF	; 255
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	c1 01       	movw	r24, r2
    2426:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <vector_into_matrix>
}
    242a:	ac 96       	adiw	r28, 0x2c	; 44
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	3f 90       	pop	r3
    2458:	2f 90       	pop	r2
    245a:	08 95       	ret

0000245c <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	0b b6       	in	r0, 0x3b	; 59
    2468:	0f 92       	push	r0
    246a:	2f 93       	push	r18
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
  PORTA ^= 0xf0;
    2478:	9b b3       	in	r25, 0x1b	; 27
    247a:	80 ef       	ldi	r24, 0xF0	; 240
    247c:	89 27       	eor	r24, r25
    247e:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    2480:	8c b1       	in	r24, 0x0c	; 12
    2482:	80 93 08 02 	sts	0x0208, r24
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    2486:	80 91 09 02 	lds	r24, 0x0209
    248a:	90 91 0a 02 	lds	r25, 0x020A
    248e:	a0 91 0b 02 	lds	r26, 0x020B
    2492:	b0 91 0c 02 	lds	r27, 0x020C
    2496:	ba 2f       	mov	r27, r26
    2498:	a9 2f       	mov	r26, r25
    249a:	98 2f       	mov	r25, r24
    249c:	88 27       	eor	r24, r24
    249e:	80 93 09 02 	sts	0x0209, r24
    24a2:	90 93 0a 02 	sts	0x020A, r25
    24a6:	a0 93 0b 02 	sts	0x020B, r26
    24aa:	b0 93 0c 02 	sts	0x020C, r27
  buffer &= 0xFFFFFF00;
    24ae:	80 91 09 02 	lds	r24, 0x0209
    24b2:	90 91 0a 02 	lds	r25, 0x020A
    24b6:	a0 91 0b 02 	lds	r26, 0x020B
    24ba:	b0 91 0c 02 	lds	r27, 0x020C
    24be:	88 27       	eor	r24, r24
    24c0:	80 93 09 02 	sts	0x0209, r24
    24c4:	90 93 0a 02 	sts	0x020A, r25
    24c8:	a0 93 0b 02 	sts	0x020B, r26
    24cc:	b0 93 0c 02 	sts	0x020C, r27
  buffer |= (uint32_t) last_byte;
    24d0:	20 91 08 02 	lds	r18, 0x0208
    24d4:	80 91 09 02 	lds	r24, 0x0209
    24d8:	90 91 0a 02 	lds	r25, 0x020A
    24dc:	a0 91 0b 02 	lds	r26, 0x020B
    24e0:	b0 91 0c 02 	lds	r27, 0x020C
    24e4:	82 2b       	or	r24, r18
    24e6:	80 93 09 02 	sts	0x0209, r24
    24ea:	90 93 0a 02 	sts	0x020A, r25
    24ee:	a0 93 0b 02 	sts	0x020B, r26
    24f2:	b0 93 0c 02 	sts	0x020C, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    24f6:	80 91 0d 01 	lds	r24, 0x010D
    24fa:	8c 30       	cpi	r24, 0x0C	; 12
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <__vector_18+0xa4>
    24fe:	86 c0       	rjmp	.+268    	; 0x260c <__vector_18+0x1b0>
  {
    
    if(pos<4)
    2500:	80 91 0d 01 	lds	r24, 0x010D
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	28 f5       	brcc	.+74     	; 0x2552 <__vector_18+0xf6>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    2508:	eb eb       	ldi	r30, 0xBB	; 187
    250a:	f4 e0       	ldi	r31, 0x04	; 4
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	a2 81       	ldd	r26, Z+2	; 0x02
    2512:	b3 81       	ldd	r27, Z+3	; 0x03
    2514:	89 2f       	mov	r24, r25
    2516:	9a 2f       	mov	r25, r26
    2518:	ab 2f       	mov	r26, r27
    251a:	bb 27       	eor	r27, r27
    251c:	a7 fd       	sbrc	r26, 7
    251e:	ba 95       	dec	r27
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	a2 81       	ldd	r26, Z+2	; 0x02
    252e:	b3 81       	ldd	r27, Z+3	; 0x03
    2530:	bb 27       	eor	r27, r27
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	a2 81       	ldd	r26, Z+2	; 0x02
    2540:	b3 81       	ldd	r27, Z+3	; 0x03
    2542:	20 91 08 02 	lds	r18, 0x0208
    2546:	b2 2b       	or	r27, r18
    2548:	80 83       	st	Z, r24
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	a2 83       	std	Z+2, r26	; 0x02
    254e:	b3 83       	std	Z+3, r27	; 0x03
    2550:	51 c0       	rjmp	.+162    	; 0x25f4 <__vector_18+0x198>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    2552:	80 91 0d 01 	lds	r24, 0x010D
    2556:	88 30       	cpi	r24, 0x08	; 8
    2558:	28 f5       	brcc	.+74     	; 0x25a4 <__vector_18+0x148>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    255a:	ef eb       	ldi	r30, 0xBF	; 191
    255c:	f4 e0       	ldi	r31, 0x04	; 4
    255e:	80 81       	ld	r24, Z
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	a2 81       	ldd	r26, Z+2	; 0x02
    2564:	b3 81       	ldd	r27, Z+3	; 0x03
    2566:	89 2f       	mov	r24, r25
    2568:	9a 2f       	mov	r25, r26
    256a:	ab 2f       	mov	r26, r27
    256c:	bb 27       	eor	r27, r27
    256e:	a7 fd       	sbrc	r26, 7
    2570:	ba 95       	dec	r27
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y &= 0x00FFFFFF;
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	a2 81       	ldd	r26, Z+2	; 0x02
    2580:	b3 81       	ldd	r27, Z+3	; 0x03
    2582:	bb 27       	eor	r27, r27
    2584:	80 83       	st	Z, r24
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	a2 83       	std	Z+2, r26	; 0x02
    258a:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	a2 81       	ldd	r26, Z+2	; 0x02
    2592:	b3 81       	ldd	r27, Z+3	; 0x03
    2594:	20 91 08 02 	lds	r18, 0x0208
    2598:	b2 2b       	or	r27, r18
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
    25a2:	28 c0       	rjmp	.+80     	; 0x25f4 <__vector_18+0x198>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    25a4:	80 91 0d 01 	lds	r24, 0x010D
    25a8:	8c 30       	cpi	r24, 0x0C	; 12
    25aa:	20 f5       	brcc	.+72     	; 0x25f4 <__vector_18+0x198>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    25ac:	e3 ec       	ldi	r30, 0xC3	; 195
    25ae:	f4 e0       	ldi	r31, 0x04	; 4
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	a2 81       	ldd	r26, Z+2	; 0x02
    25b6:	b3 81       	ldd	r27, Z+3	; 0x03
    25b8:	89 2f       	mov	r24, r25
    25ba:	9a 2f       	mov	r25, r26
    25bc:	ab 2f       	mov	r26, r27
    25be:	bb 27       	eor	r27, r27
    25c0:	a7 fd       	sbrc	r26, 7
    25c2:	ba 95       	dec	r27
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z &= 0x00FFFFFF;
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	a2 81       	ldd	r26, Z+2	; 0x02
    25d2:	b3 81       	ldd	r27, Z+3	; 0x03
    25d4:	bb 27       	eor	r27, r27
    25d6:	80 83       	st	Z, r24
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	a2 83       	std	Z+2, r26	; 0x02
    25dc:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	a2 81       	ldd	r26, Z+2	; 0x02
    25e4:	b3 81       	ldd	r27, Z+3	; 0x03
    25e6:	20 91 08 02 	lds	r18, 0x0208
    25ea:	b2 2b       	or	r27, r18
    25ec:	80 83       	st	Z, r24
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	a2 83       	std	Z+2, r26	; 0x02
    25f2:	b3 83       	std	Z+3, r27	; 0x03
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    25f4:	80 91 0d 01 	lds	r24, 0x010D
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 93 0d 01 	sts	0x010D, r24
    if(pos == 12)
    25fe:	80 91 0d 01 	lds	r24, 0x010D
    2602:	8c 30       	cpi	r24, 0x0C	; 12
    2604:	19 f4       	brne	.+6      	; 0x260c <__vector_18+0x1b0>
	{
      pos = 0xFF;
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	80 93 0d 01 	sts	0x010D, r24
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    260c:	80 91 0c 01 	lds	r24, 0x010C
    2610:	8c 30       	cpi	r24, 0x0C	; 12
    2612:	08 f0       	brcs	.+2      	; 0x2616 <__vector_18+0x1ba>
    2614:	86 c0       	rjmp	.+268    	; 0x2722 <__vector_18+0x2c6>
  {
	  
    if(vel < 4)
    2616:	80 91 0c 01 	lds	r24, 0x010C
    261a:	84 30       	cpi	r24, 0x04	; 4
    261c:	28 f5       	brcc	.+74     	; 0x2668 <__vector_18+0x20c>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    261e:	e7 ec       	ldi	r30, 0xC7	; 199
    2620:	f4 e0       	ldi	r31, 0x04	; 4
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	a2 81       	ldd	r26, Z+2	; 0x02
    2628:	b3 81       	ldd	r27, Z+3	; 0x03
    262a:	89 2f       	mov	r24, r25
    262c:	9a 2f       	mov	r25, r26
    262e:	ab 2f       	mov	r26, r27
    2630:	bb 27       	eor	r27, r27
    2632:	a7 fd       	sbrc	r26, 7
    2634:	ba 95       	dec	r27
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_x &= 0x00FFFFFF;
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	a2 81       	ldd	r26, Z+2	; 0x02
    2644:	b3 81       	ldd	r27, Z+3	; 0x03
    2646:	bb 27       	eor	r27, r27
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	a2 81       	ldd	r26, Z+2	; 0x02
    2656:	b3 81       	ldd	r27, Z+3	; 0x03
    2658:	20 91 08 02 	lds	r18, 0x0208
    265c:	b2 2b       	or	r27, r18
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	a2 83       	std	Z+2, r26	; 0x02
    2664:	b3 83       	std	Z+3, r27	; 0x03
    2666:	51 c0       	rjmp	.+162    	; 0x270a <__vector_18+0x2ae>
		
	}
	else if(vel < 8)
    2668:	80 91 0c 01 	lds	r24, 0x010C
    266c:	88 30       	cpi	r24, 0x08	; 8
    266e:	28 f5       	brcc	.+74     	; 0x26ba <__vector_18+0x25e>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    2670:	eb ec       	ldi	r30, 0xCB	; 203
    2672:	f4 e0       	ldi	r31, 0x04	; 4
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	a2 81       	ldd	r26, Z+2	; 0x02
    267a:	b3 81       	ldd	r27, Z+3	; 0x03
    267c:	89 2f       	mov	r24, r25
    267e:	9a 2f       	mov	r25, r26
    2680:	ab 2f       	mov	r26, r27
    2682:	bb 27       	eor	r27, r27
    2684:	a7 fd       	sbrc	r26, 7
    2686:	ba 95       	dec	r27
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_y &= 0x00FFFFFF;
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	a2 81       	ldd	r26, Z+2	; 0x02
    2696:	b3 81       	ldd	r27, Z+3	; 0x03
    2698:	bb 27       	eor	r27, r27
    269a:	80 83       	st	Z, r24
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	a2 83       	std	Z+2, r26	; 0x02
    26a0:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	a2 81       	ldd	r26, Z+2	; 0x02
    26a8:	b3 81       	ldd	r27, Z+3	; 0x03
    26aa:	20 91 08 02 	lds	r18, 0x0208
    26ae:	b2 2b       	or	r27, r18
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
    26b8:	28 c0       	rjmp	.+80     	; 0x270a <__vector_18+0x2ae>
	}
	else if(vel < 12)
    26ba:	80 91 0c 01 	lds	r24, 0x010C
    26be:	8c 30       	cpi	r24, 0x0C	; 12
    26c0:	20 f5       	brcc	.+72     	; 0x270a <__vector_18+0x2ae>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    26c2:	ef ec       	ldi	r30, 0xCF	; 207
    26c4:	f4 e0       	ldi	r31, 0x04	; 4
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	a2 81       	ldd	r26, Z+2	; 0x02
    26cc:	b3 81       	ldd	r27, Z+3	; 0x03
    26ce:	89 2f       	mov	r24, r25
    26d0:	9a 2f       	mov	r25, r26
    26d2:	ab 2f       	mov	r26, r27
    26d4:	bb 27       	eor	r27, r27
    26d6:	a7 fd       	sbrc	r26, 7
    26d8:	ba 95       	dec	r27
    26da:	80 83       	st	Z, r24
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	a2 83       	std	Z+2, r26	; 0x02
    26e0:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_z &= 0x00FFFFFF;
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	a2 81       	ldd	r26, Z+2	; 0x02
    26e8:	b3 81       	ldd	r27, Z+3	; 0x03
    26ea:	bb 27       	eor	r27, r27
    26ec:	80 83       	st	Z, r24
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	a2 83       	std	Z+2, r26	; 0x02
    26f2:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	a2 81       	ldd	r26, Z+2	; 0x02
    26fa:	b3 81       	ldd	r27, Z+3	; 0x03
    26fc:	20 91 08 02 	lds	r18, 0x0208
    2700:	b2 2b       	or	r27, r18
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    270a:	80 91 0c 01 	lds	r24, 0x010C
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	80 93 0c 01 	sts	0x010C, r24
    if(vel == 12)
    2714:	80 91 0c 01 	lds	r24, 0x010C
    2718:	8c 30       	cpi	r24, 0x0C	; 12
    271a:	19 f4       	brne	.+6      	; 0x2722 <__vector_18+0x2c6>
     {
		  vel = 0xFF;
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	80 93 0c 01 	sts	0x010C, r24

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    2722:	80 91 0b 01 	lds	r24, 0x010B
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	20 f5       	brcc	.+72     	; 0x2772 <__vector_18+0x316>
  {
    if(dop >= 2)
    272a:	80 91 0b 01 	lds	r24, 0x010B
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	a0 f0       	brcs	.+40     	; 0x275a <__vector_18+0x2fe>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    2732:	e6 ee       	ldi	r30, 0xE6	; 230
    2734:	f4 e0       	ldi	r31, 0x04	; 4
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	89 2f       	mov	r24, r25
    273c:	99 27       	eor	r25, r25
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
		 Current_state.gps.pdop &= 0x00FF;
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	99 27       	eor	r25, r25
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	20 91 08 02 	lds	r18, 0x0208
    2754:	92 2b       	or	r25, r18
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    275a:	80 91 0b 01 	lds	r24, 0x010B
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	80 93 0b 01 	sts	0x010B, r24
    if(dop == 4)
    2764:	80 91 0b 01 	lds	r24, 0x010B
    2768:	84 30       	cpi	r24, 0x04	; 4
    276a:	19 f4       	brne	.+6      	; 0x2772 <__vector_18+0x316>
      dop = 0xFF;
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	80 93 0b 01 	sts	0x010B, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    2772:	80 91 0a 01 	lds	r24, 0x010A
    2776:	80 31       	cpi	r24, 0x10	; 16
    2778:	08 f0       	brcs	.+2      	; 0x277c <__vector_18+0x320>
    277a:	8b c0       	rjmp	.+278    	; 0x2892 <__vector_18+0x436>
  {
	if(geo < 4);  
    277c:	80 91 0a 01 	lds	r24, 0x010A
    2780:	84 30       	cpi	r24, 0x04	; 4
    2782:	08 f4       	brcc	.+2      	; 0x2786 <__vector_18+0x32a>
    2784:	7a c0       	rjmp	.+244    	; 0x287a <__vector_18+0x41e>
    else if(geo < 8)
    2786:	80 91 0a 01 	lds	r24, 0x010A
    278a:	88 30       	cpi	r24, 0x08	; 8
    278c:	28 f5       	brcc	.+74     	; 0x27d8 <__vector_18+0x37c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    278e:	e3 ed       	ldi	r30, 0xD3	; 211
    2790:	f4 e0       	ldi	r31, 0x04	; 4
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	a2 81       	ldd	r26, Z+2	; 0x02
    2798:	b3 81       	ldd	r27, Z+3	; 0x03
    279a:	89 2f       	mov	r24, r25
    279c:	9a 2f       	mov	r25, r26
    279e:	ab 2f       	mov	r26, r27
    27a0:	bb 27       	eor	r27, r27
    27a2:	a7 fd       	sbrc	r26, 7
    27a4:	ba 95       	dec	r27
    27a6:	80 83       	st	Z, r24
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	a2 83       	std	Z+2, r26	; 0x02
    27ac:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat &= 0x00FFFFFF;
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	a2 81       	ldd	r26, Z+2	; 0x02
    27b4:	b3 81       	ldd	r27, Z+3	; 0x03
    27b6:	bb 27       	eor	r27, r27
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	a2 81       	ldd	r26, Z+2	; 0x02
    27c6:	b3 81       	ldd	r27, Z+3	; 0x03
    27c8:	20 91 08 02 	lds	r18, 0x0208
    27cc:	b2 2b       	or	r27, r18
    27ce:	80 83       	st	Z, r24
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	a2 83       	std	Z+2, r26	; 0x02
    27d4:	b3 83       	std	Z+3, r27	; 0x03
    27d6:	51 c0       	rjmp	.+162    	; 0x287a <__vector_18+0x41e>
	}
	else if(geo < 12)
    27d8:	80 91 0a 01 	lds	r24, 0x010A
    27dc:	8c 30       	cpi	r24, 0x0C	; 12
    27de:	28 f5       	brcc	.+74     	; 0x282a <__vector_18+0x3ce>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    27e0:	e7 ed       	ldi	r30, 0xD7	; 215
    27e2:	f4 e0       	ldi	r31, 0x04	; 4
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	a2 81       	ldd	r26, Z+2	; 0x02
    27ea:	b3 81       	ldd	r27, Z+3	; 0x03
    27ec:	89 2f       	mov	r24, r25
    27ee:	9a 2f       	mov	r25, r26
    27f0:	ab 2f       	mov	r26, r27
    27f2:	bb 27       	eor	r27, r27
    27f4:	a7 fd       	sbrc	r26, 7
    27f6:	ba 95       	dec	r27
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon &= 0x00FFFFFF;
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	a2 81       	ldd	r26, Z+2	; 0x02
    2806:	b3 81       	ldd	r27, Z+3	; 0x03
    2808:	bb 27       	eor	r27, r27
    280a:	80 83       	st	Z, r24
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	a2 83       	std	Z+2, r26	; 0x02
    2810:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	a2 81       	ldd	r26, Z+2	; 0x02
    2818:	b3 81       	ldd	r27, Z+3	; 0x03
    281a:	20 91 08 02 	lds	r18, 0x0208
    281e:	b2 2b       	or	r27, r18
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
    2828:	28 c0       	rjmp	.+80     	; 0x287a <__vector_18+0x41e>
	}
	else if(geo < 16 )
    282a:	80 91 0a 01 	lds	r24, 0x010A
    282e:	80 31       	cpi	r24, 0x10	; 16
    2830:	20 f5       	brcc	.+72     	; 0x287a <__vector_18+0x41e>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    2832:	eb ed       	ldi	r30, 0xDB	; 219
    2834:	f4 e0       	ldi	r31, 0x04	; 4
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	a2 81       	ldd	r26, Z+2	; 0x02
    283c:	b3 81       	ldd	r27, Z+3	; 0x03
    283e:	89 2f       	mov	r24, r25
    2840:	9a 2f       	mov	r25, r26
    2842:	ab 2f       	mov	r26, r27
    2844:	bb 27       	eor	r27, r27
    2846:	a7 fd       	sbrc	r26, 7
    2848:	ba 95       	dec	r27
    284a:	80 83       	st	Z, r24
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	a2 83       	std	Z+2, r26	; 0x02
    2850:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt &= 0x00FFFFFF;
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	a2 81       	ldd	r26, Z+2	; 0x02
    2858:	b3 81       	ldd	r27, Z+3	; 0x03
    285a:	bb 27       	eor	r27, r27
    285c:	80 83       	st	Z, r24
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	a2 83       	std	Z+2, r26	; 0x02
    2862:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	a2 81       	ldd	r26, Z+2	; 0x02
    286a:	b3 81       	ldd	r27, Z+3	; 0x03
    286c:	20 91 08 02 	lds	r18, 0x0208
    2870:	b2 2b       	or	r27, r18
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    287a:	80 91 0a 01 	lds	r24, 0x010A
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	80 93 0a 01 	sts	0x010A, r24
    if(geo == 16)
    2884:	80 91 0a 01 	lds	r24, 0x010A
    2888:	80 31       	cpi	r24, 0x10	; 16
    288a:	19 f4       	brne	.+6      	; 0x2892 <__vector_18+0x436>
	{
      geo = 0xFF;
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	80 93 0a 01 	sts	0x010A, r24

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    2892:	80 91 09 01 	lds	r24, 0x0109
    2896:	87 30       	cpi	r24, 0x07	; 7
    2898:	08 f0       	brcs	.+2      	; 0x289c <__vector_18+0x440>
    289a:	54 c0       	rjmp	.+168    	; 0x2944 <__vector_18+0x4e8>
  {
	  
	  if(time == 0)
    289c:	80 91 09 01 	lds	r24, 0x0109
    28a0:	81 11       	cpse	r24, r1
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <__vector_18+0x452>
	  {
		  Current_state.gps.hours = last_byte;
    28a4:	80 91 08 02 	lds	r24, 0x0208
    28a8:	80 93 df 04 	sts	0x04DF, r24
    28ac:	3c c0       	rjmp	.+120    	; 0x2926 <__vector_18+0x4ca>
	  }
	  else if(time == 1)
    28ae:	80 91 09 01 	lds	r24, 0x0109
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <__vector_18+0x464>
	  {
		  Current_state.gps.minutes = last_byte;
    28b6:	80 91 08 02 	lds	r24, 0x0208
    28ba:	80 93 e0 04 	sts	0x04E0, r24
    28be:	33 c0       	rjmp	.+102    	; 0x2926 <__vector_18+0x4ca>
	  }
	  else if(time == 2)
    28c0:	80 91 09 01 	lds	r24, 0x0109
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	29 f4       	brne	.+10     	; 0x28d2 <__vector_18+0x476>
	  {
		  Current_state.gps.seconds = last_byte;
    28c8:	80 91 08 02 	lds	r24, 0x0208
    28cc:	80 93 e1 04 	sts	0x04E1, r24
    28d0:	2a c0       	rjmp	.+84     	; 0x2926 <__vector_18+0x4ca>
	  }
	  else if(time == 3)
    28d2:	80 91 09 01 	lds	r24, 0x0109
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	29 f4       	brne	.+10     	; 0x28e4 <__vector_18+0x488>
	  {
		  Current_state.gps.date = last_byte;
    28da:	80 91 08 02 	lds	r24, 0x0208
    28de:	80 93 e2 04 	sts	0x04E2, r24
    28e2:	21 c0       	rjmp	.+66     	; 0x2926 <__vector_18+0x4ca>
	  }else if(time == 4)
    28e4:	80 91 09 01 	lds	r24, 0x0109
    28e8:	84 30       	cpi	r24, 0x04	; 4
    28ea:	29 f4       	brne	.+10     	; 0x28f6 <__vector_18+0x49a>
	  {
		  Current_state.gps.month = last_byte;
    28ec:	80 91 08 02 	lds	r24, 0x0208
    28f0:	80 93 e3 04 	sts	0x04E3, r24
    28f4:	18 c0       	rjmp	.+48     	; 0x2926 <__vector_18+0x4ca>
	  }else if(time > 4)
    28f6:	80 91 09 01 	lds	r24, 0x0109
    28fa:	85 30       	cpi	r24, 0x05	; 5
    28fc:	a0 f0       	brcs	.+40     	; 0x2926 <__vector_18+0x4ca>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    28fe:	e4 ee       	ldi	r30, 0xE4	; 228
    2900:	f4 e0       	ldi	r31, 0x04	; 4
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	89 2f       	mov	r24, r25
    2908:	99 27       	eor	r25, r25
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
		  Current_state.gps.year &= 0x00FF;
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	99 27       	eor	r25, r25
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	20 91 08 02 	lds	r18, 0x0208
    2920:	92 2b       	or	r25, r18
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    2926:	80 91 09 01 	lds	r24, 0x0109
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	80 93 09 01 	sts	0x0109, r24
    if(time == 7)
    2930:	80 91 09 01 	lds	r24, 0x0109
    2934:	87 30       	cpi	r24, 0x07	; 7
    2936:	31 f4       	brne	.+12     	; 0x2944 <__vector_18+0x4e8>
    {
      time = 0xFF;
    2938:	8f ef       	ldi	r24, 0xFF	; 255
    293a:	80 93 09 01 	sts	0x0109, r24
      ///* * The Entire message has been read
      message_end = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	80 93 07 02 	sts	0x0207, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    2944:	80 91 09 02 	lds	r24, 0x0209
    2948:	90 91 0a 02 	lds	r25, 0x020A
    294c:	a0 91 0b 02 	lds	r26, 0x020B
    2950:	b0 91 0c 02 	lds	r27, 0x020C
    2954:	8c 3a       	cpi	r24, 0xAC	; 172
    2956:	94 40       	sbci	r25, 0x04	; 4
    2958:	af 43       	sbci	r26, 0x3F	; 63
    295a:	bf 43       	sbci	r27, 0x3F	; 63
    295c:	29 f4       	brne	.+10     	; 0x2968 <__vector_18+0x50c>
  {
    message_end = 0;
    295e:	10 92 07 02 	sts	0x0207, r1
    pos = 0;
    2962:	10 92 0d 01 	sts	0x010D, r1
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <__vector_18+0x58a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    2968:	80 91 09 02 	lds	r24, 0x0209
    296c:	90 91 0a 02 	lds	r25, 0x020A
    2970:	a0 91 0b 02 	lds	r26, 0x020B
    2974:	b0 91 0c 02 	lds	r27, 0x020C
    2978:	8c 3a       	cpi	r24, 0xAC	; 172
    297a:	95 40       	sbci	r25, 0x05	; 5
    297c:	af 43       	sbci	r26, 0x3F	; 63
    297e:	bf 43       	sbci	r27, 0x3F	; 63
    2980:	19 f4       	brne	.+6      	; 0x2988 <__vector_18+0x52c>
    vel = 0;
    2982:	10 92 0c 01 	sts	0x010C, r1
    2986:	2f c0       	rjmp	.+94     	; 0x29e6 <__vector_18+0x58a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2988:	80 91 09 02 	lds	r24, 0x0209
    298c:	90 91 0a 02 	lds	r25, 0x020A
    2990:	a0 91 0b 02 	lds	r26, 0x020B
    2994:	b0 91 0c 02 	lds	r27, 0x020C
    2998:	8c 3a       	cpi	r24, 0xAC	; 172
    299a:	9b 40       	sbci	r25, 0x0B	; 11
    299c:	af 43       	sbci	r26, 0x3F	; 63
    299e:	bf 43       	sbci	r27, 0x3F	; 63
    29a0:	19 f4       	brne	.+6      	; 0x29a8 <__vector_18+0x54c>
    dop = 0;
    29a2:	10 92 0b 01 	sts	0x010B, r1
    29a6:	1f c0       	rjmp	.+62     	; 0x29e6 <__vector_18+0x58a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    29a8:	80 91 09 02 	lds	r24, 0x0209
    29ac:	90 91 0a 02 	lds	r25, 0x020A
    29b0:	a0 91 0b 02 	lds	r26, 0x020B
    29b4:	b0 91 0c 02 	lds	r27, 0x020C
    29b8:	8c 3a       	cpi	r24, 0xAC	; 172
    29ba:	9e 40       	sbci	r25, 0x0E	; 14
    29bc:	af 43       	sbci	r26, 0x3F	; 63
    29be:	bf 43       	sbci	r27, 0x3F	; 63
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <__vector_18+0x56c>
    geo = 0;
    29c2:	10 92 0a 01 	sts	0x010A, r1
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <__vector_18+0x58a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    29c8:	80 91 09 02 	lds	r24, 0x0209
    29cc:	90 91 0a 02 	lds	r25, 0x020A
    29d0:	a0 91 0b 02 	lds	r26, 0x020B
    29d4:	b0 91 0c 02 	lds	r27, 0x020C
    29d8:	8c 3a       	cpi	r24, 0xAC	; 172
    29da:	9f 40       	sbci	r25, 0x0F	; 15
    29dc:	af 43       	sbci	r26, 0x3F	; 63
    29de:	bf 43       	sbci	r27, 0x3F	; 63
    29e0:	11 f4       	brne	.+4      	; 0x29e6 <__vector_18+0x58a>
    time = 0;
    29e2:	10 92 09 01 	sts	0x0109, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 1000)  && message_end && (Current_state.gps.pdop!=0))
    29e6:	80 91 e6 04 	lds	r24, 0x04E6
    29ea:	90 91 e7 04 	lds	r25, 0x04E7
    29ee:	88 3e       	cpi	r24, 0xE8	; 232
    29f0:	93 40       	sbci	r25, 0x03	; 3
    29f2:	f0 f4       	brcc	.+60     	; 0x2a30 <__vector_18+0x5d4>
    29f4:	80 91 07 02 	lds	r24, 0x0207
    29f8:	88 23       	and	r24, r24
    29fa:	d1 f0       	breq	.+52     	; 0x2a30 <__vector_18+0x5d4>
    29fc:	80 91 e6 04 	lds	r24, 0x04E6
    2a00:	90 91 e7 04 	lds	r25, 0x04E7
    2a04:	89 2b       	or	r24, r25
    2a06:	a1 f0       	breq	.+40     	; 0x2a30 <__vector_18+0x5d4>
  {
    GPS_done = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	80 93 23 01 	sts	0x0123, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2a0e:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2a10:	8f ef       	ldi	r24, 0xFF	; 255
    2a12:	9f ef       	ldi	r25, 0xFF	; 255
    2a14:	90 93 e7 04 	sts	0x04E7, r25
    2a18:	80 93 e6 04 	sts	0x04E6, r24
    message_end = 0;
    2a1c:	10 92 07 02 	sts	0x0207, r1
    buffer = 0;
    2a20:	10 92 09 02 	sts	0x0209, r1
    2a24:	10 92 0a 02 	sts	0x020A, r1
    2a28:	10 92 0b 02 	sts	0x020B, r1
    2a2c:	10 92 0c 02 	sts	0x020C, r1
  }
}
    2a30:	ff 91       	pop	r31
    2a32:	ef 91       	pop	r30
    2a34:	bf 91       	pop	r27
    2a36:	af 91       	pop	r26
    2a38:	9f 91       	pop	r25
    2a3a:	8f 91       	pop	r24
    2a3c:	2f 91       	pop	r18
    2a3e:	0f 90       	pop	r0
    2a40:	0b be       	out	0x3b, r0	; 59
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2a4c:	2f 92       	push	r2
    2a4e:	3f 92       	push	r3
    2a50:	4f 92       	push	r4
    2a52:	5f 92       	push	r5
    2a54:	6f 92       	push	r6
    2a56:	7f 92       	push	r7
    2a58:	8f 92       	push	r8
    2a5a:	9f 92       	push	r9
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	cc 54       	subi	r28, 0x4C	; 76
    2a76:	d1 09       	sbc	r29, r1
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	fc 01       	movw	r30, r24
    2a84:	49 83       	std	Y+1, r20	; 0x01
    2a86:	5a 83       	std	Y+2, r21	; 0x02
    2a88:	6b 83       	std	Y+3, r22	; 0x03
    2a8a:	7c 83       	std	Y+4, r23	; 0x04
    2a8c:	32 2e       	mov	r3, r18
    2a8e:	2b 96       	adiw	r28, 0x0b	; 11
    2a90:	1f af       	std	Y+63, r17	; 0x3f
    2a92:	0e af       	std	Y+62, r16	; 0x3e
    2a94:	2b 97       	sbiw	r28, 0x0b	; 11
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2a96:	80 80       	ld	r8, Z
    2a98:	91 80       	ldd	r9, Z+1	; 0x01
    2a9a:	a2 80       	ldd	r10, Z+2	; 0x02
    2a9c:	b3 80       	ldd	r11, Z+3	; 0x03
    2a9e:	c4 80       	ldd	r12, Z+4	; 0x04
    2aa0:	d5 80       	ldd	r13, Z+5	; 0x05
    2aa2:	e6 80       	ldd	r14, Z+6	; 0x06
    2aa4:	f7 80       	ldd	r15, Z+7	; 0x07
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	4a e7       	ldi	r20, 0x7A	; 122
    2aac:	54 e4       	ldi	r21, 0x44	; 68
    2aae:	60 85       	ldd	r22, Z+8	; 0x08
    2ab0:	71 85       	ldd	r23, Z+9	; 0x09
    2ab2:	82 85       	ldd	r24, Z+10	; 0x0a
    2ab4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ab6:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2aba:	69 8b       	std	Y+17, r22	; 0x11
    2abc:	7a 8b       	std	Y+18, r23	; 0x12
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
    2ac0:	9c 8b       	std	Y+20, r25	; 0x14
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2ac2:	c5 01       	movw	r24, r10
    2ac4:	b4 01       	movw	r22, r8
    2ac6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    2aca:	2b 01       	movw	r4, r22
    2acc:	3c 01       	movw	r6, r24
    2ace:	c5 01       	movw	r24, r10
    2ad0:	b4 01       	movw	r22, r8
    2ad2:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    2ad6:	6d 83       	std	Y+5, r22	; 0x05
    2ad8:	7e 83       	std	Y+6, r23	; 0x06
    2ada:	8f 83       	std	Y+7, r24	; 0x07
    2adc:	98 87       	std	Y+8, r25	; 0x08
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 ee       	ldi	r19, 0xE0	; 224
    2ae2:	4b ef       	ldi	r20, 0xFB	; 251
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	69 81       	ldd	r22, Y+1	; 0x01
    2ae8:	7a 81       	ldd	r23, Y+2	; 0x02
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	9c 81       	ldd	r25, Y+4	; 0x04
    2aee:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2af2:	6e a7       	std	Y+46, r22	; 0x2e
    2af4:	7f a7       	std	Y+47, r23	; 0x2f
    2af6:	88 ab       	std	Y+48, r24	; 0x30
    2af8:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2afa:	c7 01       	movw	r24, r14
    2afc:	b6 01       	movw	r22, r12
    2afe:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    2b02:	60 93 4d 02 	sts	0x024D, r22
    2b06:	70 93 4e 02 	sts	0x024E, r23
    2b0a:	80 93 4f 02 	sts	0x024F, r24
    2b0e:	90 93 50 02 	sts	0x0250, r25
  sl[1] = sin(lon);
    2b12:	c7 01       	movw	r24, r14
    2b14:	b6 01       	movw	r22, r12
    2b16:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    2b1a:	60 93 11 02 	sts	0x0211, r22
    2b1e:	70 93 12 02 	sts	0x0212, r23
    2b22:	80 93 13 02 	sts	0x0213, r24
    2b26:	90 93 14 02 	sts	0x0214, r25
  one = A2 * clat * clat;
    2b2a:	2e e2       	ldi	r18, 0x2E	; 46
    2b2c:	3f e2       	ldi	r19, 0x2F	; 47
    2b2e:	4b e1       	ldi	r20, 0x1B	; 27
    2b30:	5c e4       	ldi	r21, 0x4C	; 76
    2b32:	6d 81       	ldd	r22, Y+5	; 0x05
    2b34:	7e 81       	ldd	r23, Y+6	; 0x06
    2b36:	8f 81       	ldd	r24, Y+7	; 0x07
    2b38:	98 85       	ldd	r25, Y+8	; 0x08
    2b3a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2b40:	3e 81       	ldd	r19, Y+6	; 0x06
    2b42:	4f 81       	ldd	r20, Y+7	; 0x07
    2b44:	58 85       	ldd	r21, Y+8	; 0x08
    2b46:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2b4a:	4b 01       	movw	r8, r22
    2b4c:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2b4e:	2b e3       	ldi	r18, 0x3B	; 59
    2b50:	35 e2       	ldi	r19, 0x25	; 37
    2b52:	4a e1       	ldi	r20, 0x1A	; 26
    2b54:	5c e4       	ldi	r21, 0x4C	; 76
    2b56:	c3 01       	movw	r24, r6
    2b58:	b2 01       	movw	r22, r4
    2b5a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2b5e:	a3 01       	movw	r20, r6
    2b60:	92 01       	movw	r18, r4
    2b62:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2b66:	6b 01       	movw	r12, r22
    2b68:	7c 01       	movw	r14, r24
  three = one + two;
    2b6a:	9b 01       	movw	r18, r22
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	c5 01       	movw	r24, r10
    2b70:	b4 01       	movw	r22, r8
    2b72:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2b76:	69 8f       	std	Y+25, r22	; 0x19
    2b78:	7a 8f       	std	Y+26, r23	; 0x1a
    2b7a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b7c:	9c 8f       	std	Y+28, r25	; 0x1c
  four = sqrt(three);
    2b7e:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    2b82:	69 83       	std	Y+1, r22	; 0x01
    2b84:	7a 83       	std	Y+2, r23	; 0x02
    2b86:	8b 83       	std	Y+3, r24	; 0x03
    2b88:	9c 83       	std	Y+4, r25	; 0x04
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2b8a:	9b 01       	movw	r18, r22
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2b92:	29 89       	ldd	r18, Y+17	; 0x11
    2b94:	3a 89       	ldd	r19, Y+18	; 0x12
    2b96:	4b 89       	ldd	r20, Y+19	; 0x13
    2b98:	5c 89       	ldd	r21, Y+20	; 0x14
    2b9a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2b9e:	29 89       	ldd	r18, Y+17	; 0x11
    2ba0:	3a 89       	ldd	r19, Y+18	; 0x12
    2ba2:	4b 89       	ldd	r20, Y+19	; 0x13
    2ba4:	5c 89       	ldd	r21, Y+20	; 0x14
    2ba6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2baa:	69 87       	std	Y+9, r22	; 0x09
    2bac:	7a 87       	std	Y+10, r23	; 0x0a
    2bae:	8b 87       	std	Y+11, r24	; 0x0b
    2bb0:	9c 87       	std	Y+12, r25	; 0x0c
    2bb2:	2e e2       	ldi	r18, 0x2E	; 46
    2bb4:	3f e2       	ldi	r19, 0x2F	; 47
    2bb6:	4b e1       	ldi	r20, 0x1B	; 27
    2bb8:	5c e4       	ldi	r21, 0x4C	; 76
    2bba:	c5 01       	movw	r24, r10
    2bbc:	b4 01       	movw	r22, r8
    2bbe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2bc2:	4b 01       	movw	r8, r22
    2bc4:	5c 01       	movw	r10, r24
    2bc6:	2b e3       	ldi	r18, 0x3B	; 59
    2bc8:	35 e2       	ldi	r19, 0x25	; 37
    2bca:	4a e1       	ldi	r20, 0x1A	; 26
    2bcc:	5c e4       	ldi	r21, 0x4C	; 76
    2bce:	c7 01       	movw	r24, r14
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2bd6:	9b 01       	movw	r18, r22
    2bd8:	ac 01       	movw	r20, r24
    2bda:	c5 01       	movw	r24, r10
    2bdc:	b4 01       	movw	r22, r8
    2bde:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2be2:	29 8d       	ldd	r18, Y+25	; 0x19
    2be4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2be6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2be8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2bea:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2bee:	9b 01       	movw	r18, r22
    2bf0:	ac 01       	movw	r20, r24
    2bf2:	69 85       	ldd	r22, Y+9	; 0x09
    2bf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bfa:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2bfe:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    2c02:	4b 01       	movw	r8, r22
    2c04:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2c06:	29 81       	ldd	r18, Y+1	; 0x01
    2c08:	3a 81       	ldd	r19, Y+2	; 0x02
    2c0a:	4b 81       	ldd	r20, Y+3	; 0x03
    2c0c:	5c 81       	ldd	r21, Y+4	; 0x04
    2c0e:	69 89       	ldd	r22, Y+17	; 0x11
    2c10:	7a 89       	ldd	r23, Y+18	; 0x12
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2c1a:	a5 01       	movw	r20, r10
    2c1c:	94 01       	movw	r18, r8
    2c1e:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2c22:	25 96       	adiw	r28, 0x05	; 5
    2c24:	6c af       	std	Y+60, r22	; 0x3c
    2c26:	7d af       	std	Y+61, r23	; 0x3d
    2c28:	8e af       	std	Y+62, r24	; 0x3e
    2c2a:	9f af       	std	Y+63, r25	; 0x3f
    2c2c:	25 97       	sbiw	r28, 0x05	; 5
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2c2e:	20 e8       	ldi	r18, 0x80	; 128
    2c30:	39 ef       	ldi	r19, 0xF9	; 249
    2c32:	44 e8       	ldi	r20, 0x84	; 132
    2c34:	58 e4       	ldi	r21, 0x48	; 72
    2c36:	c3 01       	movw	r24, r6
    2c38:	b2 01       	movw	r22, r4
    2c3a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c40:	3e 81       	ldd	r19, Y+6	; 0x06
    2c42:	4f 81       	ldd	r20, Y+7	; 0x07
    2c44:	58 85       	ldd	r21, Y+8	; 0x08
    2c46:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c4a:	6b 01       	movw	r12, r22
    2c4c:	7c 01       	movw	r14, r24
    2c4e:	a5 01       	movw	r20, r10
    2c50:	94 01       	movw	r18, r8
    2c52:	69 81       	ldd	r22, Y+1	; 0x01
    2c54:	7a 81       	ldd	r23, Y+2	; 0x02
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c5e:	9b 01       	movw	r18, r22
    2c60:	ac 01       	movw	r20, r24
    2c62:	c7 01       	movw	r24, r14
    2c64:	b6 01       	movw	r22, r12
    2c66:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2c6a:	29 96       	adiw	r28, 0x09	; 9
    2c6c:	6c af       	std	Y+60, r22	; 0x3c
    2c6e:	7d af       	std	Y+61, r23	; 0x3d
    2c70:	8e af       	std	Y+62, r24	; 0x3e
    2c72:	9f af       	std	Y+63, r25	; 0x3f
    2c74:	29 97       	sbiw	r28, 0x09	; 9
  slat = slat * cd - clat * sd;
    2c76:	25 96       	adiw	r28, 0x05	; 5
    2c78:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c7a:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c7c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c7e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c80:	25 97       	sbiw	r28, 0x05	; 5
    2c82:	c3 01       	movw	r24, r6
    2c84:	b2 01       	movw	r22, r4
    2c86:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2c8a:	6b 01       	movw	r12, r22
    2c8c:	7c 01       	movw	r14, r24
    2c8e:	29 96       	adiw	r28, 0x09	; 9
    2c90:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c92:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c94:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c96:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c98:	29 97       	sbiw	r28, 0x09	; 9
    2c9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2c9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca0:	98 85       	ldd	r25, Y+8	; 0x08
    2ca2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2ca6:	9b 01       	movw	r18, r22
    2ca8:	ac 01       	movw	r20, r24
    2caa:	c7 01       	movw	r24, r14
    2cac:	b6 01       	movw	r22, r12
    2cae:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2cb2:	6d 8f       	std	Y+29, r22	; 0x1d
    2cb4:	7e 8f       	std	Y+30, r23	; 0x1e
    2cb6:	8f 8f       	std	Y+31, r24	; 0x1f
    2cb8:	98 a3       	std	Y+32, r25	; 0x20
  clat = clat * cd + one * sd;
    2cba:	25 96       	adiw	r28, 0x05	; 5
    2cbc:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cbe:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cc0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cc4:	25 97       	sbiw	r28, 0x05	; 5
    2cc6:	6d 81       	ldd	r22, Y+5	; 0x05
    2cc8:	7e 81       	ldd	r23, Y+6	; 0x06
    2cca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ccc:	98 85       	ldd	r25, Y+8	; 0x08
    2cce:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2cd2:	6b 01       	movw	r12, r22
    2cd4:	7c 01       	movw	r14, r24
    2cd6:	29 96       	adiw	r28, 0x09	; 9
    2cd8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cda:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cdc:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cde:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ce0:	29 97       	sbiw	r28, 0x09	; 9
    2ce2:	c3 01       	movw	r24, r6
    2ce4:	b2 01       	movw	r22, r4
    2ce6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2cea:	9b 01       	movw	r18, r22
    2cec:	ac 01       	movw	r20, r24
    2cee:	c7 01       	movw	r24, r14
    2cf0:	b6 01       	movw	r22, r12
    2cf2:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2cf6:	69 8f       	std	Y+25, r22	; 0x19
    2cf8:	7a 8f       	std	Y+26, r23	; 0x1a
    2cfa:	8b 8f       	std	Y+27, r24	; 0x1b
    2cfc:	9c 8f       	std	Y+28, r25	; 0x1c
  
  p[1] = 2.0 * slat;
    2cfe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d00:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d02:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d04:	58 a1       	ldd	r21, Y+32	; 0x20
    2d06:	ca 01       	movw	r24, r20
    2d08:	b9 01       	movw	r22, r18
    2d0a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2d0e:	60 93 51 03 	sts	0x0351, r22
    2d12:	70 93 52 03 	sts	0x0352, r23
    2d16:	80 93 53 03 	sts	0x0353, r24
    2d1a:	90 93 54 03 	sts	0x0354, r25
  p[2] = 2.0 * clat;
    2d1e:	29 8d       	ldd	r18, Y+25	; 0x19
    2d20:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2d22:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d24:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2d26:	ca 01       	movw	r24, r20
    2d28:	b9 01       	movw	r22, r18
    2d2a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2d2e:	60 93 55 03 	sts	0x0355, r22
    2d32:	70 93 56 03 	sts	0x0356, r23
    2d36:	80 93 57 03 	sts	0x0357, r24
    2d3a:	90 93 58 03 	sts	0x0358, r25
  p[3] = 4.5 * slat * slat - 1.5;
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e9       	ldi	r20, 0x90	; 144
    2d44:	50 e4       	ldi	r21, 0x40	; 64
    2d46:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d48:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2d4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d52:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d54:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d56:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d58:	58 a1       	ldd	r21, Y+32	; 0x20
    2d5a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 ec       	ldi	r20, 0xC0	; 192
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2d6a:	60 93 59 03 	sts	0x0359, r22
    2d6e:	70 93 5a 03 	sts	0x035A, r23
    2d72:	80 93 5b 03 	sts	0x035B, r24
    2d76:	90 93 5c 03 	sts	0x035C, r25
  p[4] = sqrt(27) * clat * slat;
    2d7a:	21 ee       	ldi	r18, 0xE1	; 225
    2d7c:	36 e4       	ldi	r19, 0x46	; 70
    2d7e:	46 ea       	ldi	r20, 0xA6	; 166
    2d80:	50 e4       	ldi	r21, 0x40	; 64
    2d82:	69 8d       	ldd	r22, Y+25	; 0x19
    2d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d8a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d8e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d90:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d92:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d94:	58 a1       	ldd	r21, Y+32	; 0x20
    2d96:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2d9a:	60 93 5d 03 	sts	0x035D, r22
    2d9e:	70 93 5e 03 	sts	0x035E, r23
    2da2:	80 93 5f 03 	sts	0x035F, r24
    2da6:	90 93 60 03 	sts	0x0360, r25
  q[1] = -1 * clat;
    2daa:	89 8d       	ldd	r24, Y+25	; 0x19
    2dac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dae:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2db0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2db2:	b0 58       	subi	r27, 0x80	; 128
    2db4:	80 93 89 02 	sts	0x0289, r24
    2db8:	90 93 8a 02 	sts	0x028A, r25
    2dbc:	a0 93 8b 02 	sts	0x028B, r26
    2dc0:	b0 93 8c 02 	sts	0x028C, r27
  q[2] = slat;
    2dc4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dc6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2dc8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2dca:	58 a1       	ldd	r21, Y+32	; 0x20
    2dcc:	20 93 8d 02 	sts	0x028D, r18
    2dd0:	30 93 8e 02 	sts	0x028E, r19
    2dd4:	40 93 8f 02 	sts	0x028F, r20
    2dd8:	50 93 90 02 	sts	0x0290, r21
  q[3] = -3.0 * clat * slat;
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e4       	ldi	r20, 0x40	; 64
    2de2:	50 ec       	ldi	r21, 0xC0	; 192
    2de4:	69 8d       	ldd	r22, Y+25	; 0x19
    2de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dec:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2df0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2df2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2df4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2df6:	58 a1       	ldd	r21, Y+32	; 0x20
    2df8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2dfc:	60 93 91 02 	sts	0x0291, r22
    2e00:	70 93 92 02 	sts	0x0292, r23
    2e04:	80 93 93 02 	sts	0x0293, r24
    2e08:	90 93 94 02 	sts	0x0294, r25
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2e0c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e0e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e10:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e12:	58 a1       	ldd	r21, Y+32	; 0x20
    2e14:	ca 01       	movw	r24, r20
    2e16:	b9 01       	movw	r22, r18
    2e18:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2e1c:	6b 01       	movw	r12, r22
    2e1e:	7c 01       	movw	r14, r24
    2e20:	29 8d       	ldd	r18, Y+25	; 0x19
    2e22:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e24:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e26:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e28:	ca 01       	movw	r24, r20
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2e30:	9b 01       	movw	r18, r22
    2e32:	ac 01       	movw	r20, r24
    2e34:	c7 01       	movw	r24, r14
    2e36:	b6 01       	movw	r22, r12
    2e38:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2e3c:	27 ed       	ldi	r18, 0xD7	; 215
    2e3e:	33 eb       	ldi	r19, 0xB3	; 179
    2e40:	4d ed       	ldi	r20, 0xDD	; 221
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2e48:	60 93 95 02 	sts	0x0295, r22
    2e4c:	70 93 96 02 	sts	0x0296, r23
    2e50:	80 93 97 02 	sts	0x0297, r24
    2e54:	90 93 98 02 	sts	0x0298, r25
  
  ratio = RE / r;
    2e58:	a5 01       	movw	r20, r10
    2e5a:	94 01       	movw	r18, r8
    2e5c:	6a e9       	ldi	r22, 0x9A	; 154
    2e5e:	79 e1       	ldi	r23, 0x19	; 25
    2e60:	87 ec       	ldi	r24, 0xC7	; 199
    2e62:	95 e4       	ldi	r25, 0x45	; 69
    2e64:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2e68:	21 96       	adiw	r28, 0x01	; 1
    2e6a:	6c af       	std	Y+60, r22	; 0x3c
    2e6c:	7d af       	std	Y+61, r23	; 0x3d
    2e6e:	8e af       	std	Y+62, r24	; 0x3e
    2e70:	9f af       	std	Y+63, r25	; 0x3f
    2e72:	21 97       	sbiw	r28, 0x01	; 1
  
  max = (order * (order + 3)) / 2;
    2e74:	43 2d       	mov	r20, r3
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	9a 01       	movw	r18, r20
    2e7a:	2d 5f       	subi	r18, 0xFD	; 253
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	42 9f       	mul	r20, r18
    2e80:	c0 01       	movw	r24, r0
    2e82:	43 9f       	mul	r20, r19
    2e84:	90 0d       	add	r25, r0
    2e86:	52 9f       	mul	r21, r18
    2e88:	90 0d       	add	r25, r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	99 23       	and	r25, r25
    2e8e:	0c f4       	brge	.+2      	; 0x2e92 <igrf+0x446>
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	88 af       	std	Y+56, r24	; 0x38
  for(k = 1; k <= max; k++)
    2e98:	88 23       	and	r24, r24
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <igrf+0x452>
    2e9c:	0f c4       	rjmp	.+2078   	; 0x36bc <igrf+0xc70>
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2e9e:	1d a6       	std	Y+45, r1	; 0x2d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    2ea0:	22 24       	eor	r2, r2
    2ea2:	23 94       	inc	r2
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2ea4:	1d 82       	std	Y+5, r1	; 0x05
    2ea6:	33 24       	eor	r3, r3
    2ea8:	33 94       	inc	r3
    2eaa:	31 e0       	ldi	r19, 0x01	; 1
    2eac:	39 8b       	std	Y+17, r19	; 0x11
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2eae:	19 a6       	std	Y+41, r1	; 0x29
    2eb0:	1a a6       	std	Y+42, r1	; 0x2a
    2eb2:	1b a6       	std	Y+43, r1	; 0x2b
    2eb4:	1c a6       	std	Y+44, r1	; 0x2c
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    2eb6:	1d a2       	std	Y+37, r1	; 0x25
    2eb8:	1e a2       	std	Y+38, r1	; 0x26
    2eba:	1f a2       	std	Y+39, r1	; 0x27
    2ebc:	18 a6       	std	Y+40, r1	; 0x28
    2ebe:	19 ae       	std	Y+57, r1	; 0x39
    2ec0:	1a ae       	std	Y+58, r1	; 0x3a
    2ec2:	1b ae       	std	Y+59, r1	; 0x3b
    2ec4:	1c ae       	std	Y+60, r1	; 0x3c
    2ec6:	19 a2       	std	Y+33, r1	; 0x21
    2ec8:	1a a2       	std	Y+34, r1	; 0x22
    2eca:	1b a2       	std	Y+35, r1	; 0x23
    2ecc:	1c a2       	std	Y+36, r1	; 0x24
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2ece:	4d 81       	ldd	r20, Y+5	; 0x05
    2ed0:	43 15       	cp	r20, r3
    2ed2:	e8 f4       	brcc	.+58     	; 0x2f0e <igrf+0x4c2>
    {
      m = 0;
      n++;
    2ed4:	4f 5f       	subi	r20, 0xFF	; 255
    2ed6:	4d 83       	std	Y+5, r20	; 0x05
      rr = pow(ratio, n + 2);
    2ed8:	64 2f       	mov	r22, r20
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	6e 5f       	subi	r22, 0xFE	; 254
    2ede:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee0:	88 27       	eor	r24, r24
    2ee2:	77 fd       	sbrc	r23, 7
    2ee4:	80 95       	com	r24
    2ee6:	98 2f       	mov	r25, r24
    2ee8:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    2eec:	9b 01       	movw	r18, r22
    2eee:	ac 01       	movw	r20, r24
    2ef0:	21 96       	adiw	r28, 0x01	; 1
    2ef2:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ef4:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2efa:	21 97       	sbiw	r28, 0x01	; 1
    2efc:	0e 94 01 35 	call	0x6a02	; 0x6a02 <pow>
    2f00:	69 a7       	std	Y+41, r22	; 0x29
    2f02:	7a a7       	std	Y+42, r23	; 0x2a
    2f04:	8b a7       	std	Y+43, r24	; 0x2b
    2f06:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2f08:	5d 81       	ldd	r21, Y+5	; 0x05
    2f0a:	5d a7       	std	Y+45, r21	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2f0c:	31 2c       	mov	r3, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2f0e:	84 e0       	ldi	r24, 0x04	; 4
    2f10:	82 15       	cp	r24, r2
    2f12:	08 f0       	brcs	.+2      	; 0x2f16 <igrf+0x4ca>
    2f14:	22 c2       	rjmp	.+1092   	; 0x335a <igrf+0x90e>
    {
      if(m == n)
    2f16:	9d 81       	ldd	r25, Y+5	; 0x05
    2f18:	39 12       	cpse	r3, r25
    2f1a:	00 c1       	rjmp	.+512    	; 0x311c <igrf+0x6d0>
      {
        one = sqrt(1 - (0.5 / fm));
    2f1c:	a3 2d       	mov	r26, r3
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	ba 83       	std	Y+2, r27	; 0x02
    2f22:	a9 83       	std	Y+1, r26	; 0x01
    2f24:	bd 01       	movw	r22, r26
    2f26:	88 27       	eor	r24, r24
    2f28:	77 fd       	sbrc	r23, 7
    2f2a:	80 95       	com	r24
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    2f32:	6b 01       	movw	r12, r22
    2f34:	7c 01       	movw	r14, r24
    2f36:	9b 01       	movw	r18, r22
    2f38:	ac 01       	movw	r20, r24
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	9f e3       	ldi	r25, 0x3F	; 63
    2f42:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2f46:	9b 01       	movw	r18, r22
    2f48:	ac 01       	movw	r20, r24
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	80 e8       	ldi	r24, 0x80	; 128
    2f50:	9f e3       	ldi	r25, 0x3F	; 63
    2f52:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2f56:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    2f5a:	4b 01       	movw	r8, r22
    2f5c:	5c 01       	movw	r10, r24
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    2f5e:	62 2c       	mov	r6, r2
    2f60:	71 2c       	mov	r7, r1
    2f62:	83 01       	movw	r16, r6
    2f64:	e9 81       	ldd	r30, Y+1	; 0x01
    2f66:	fa 81       	ldd	r31, Y+2	; 0x02
    2f68:	0e 1b       	sub	r16, r30
    2f6a:	1f 0b       	sbc	r17, r31
    2f6c:	01 50       	subi	r16, 0x01	; 1
    2f6e:	11 09       	sbc	r17, r1
    2f70:	66 0c       	add	r6, r6
    2f72:	77 1c       	adc	r7, r7
    2f74:	66 0c       	add	r6, r6
    2f76:	77 1c       	adc	r7, r7
    2f78:	93 01       	movw	r18, r6
    2f7a:	23 5b       	subi	r18, 0xB3	; 179
    2f7c:	3c 4f       	sbci	r19, 0xFC	; 252
    2f7e:	29 01       	movw	r4, r18
    2f80:	a7 01       	movw	r20, r14
    2f82:	96 01       	movw	r18, r12
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	80 e8       	ldi	r24, 0x80	; 128
    2f8a:	9f e3       	ldi	r25, 0x3F	; 63
    2f8c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2f9c:	a5 01       	movw	r20, r10
    2f9e:	94 01       	movw	r18, r8
    2fa0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2fa4:	29 8d       	ldd	r18, Y+25	; 0x19
    2fa6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2fa8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2faa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2fac:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2fb0:	a8 01       	movw	r20, r16
    2fb2:	44 0f       	add	r20, r20
    2fb4:	55 1f       	adc	r21, r21
    2fb6:	44 0f       	add	r20, r20
    2fb8:	55 1f       	adc	r21, r21
    2fba:	5e 87       	std	Y+14, r21	; 0x0e
    2fbc:	4d 87       	std	Y+13, r20	; 0x0d
    2fbe:	8a 01       	movw	r16, r20
    2fc0:	03 5b       	subi	r16, 0xB3	; 179
    2fc2:	1c 4f       	sbci	r17, 0xFC	; 252
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	2d 91       	ld	r18, X+
    2fc8:	3d 91       	ld	r19, X+
    2fca:	4d 91       	ld	r20, X+
    2fcc:	5c 91       	ld	r21, X
    2fce:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    2fd2:	f2 01       	movw	r30, r4
    2fd4:	60 83       	st	Z, r22
    2fd6:	71 83       	std	Z+1, r23	; 0x01
    2fd8:	82 83       	std	Z+2, r24	; 0x02
    2fda:	93 83       	std	Z+3, r25	; 0x03
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    2fdc:	93 01       	movw	r18, r6
    2fde:	2b 57       	subi	r18, 0x7B	; 123
    2fe0:	3d 4f       	sbci	r19, 0xFD	; 253
    2fe2:	3a 87       	std	Y+10, r19	; 0x0a
    2fe4:	29 87       	std	Y+9, r18	; 0x09
    2fe6:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fe8:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fea:	eb 57       	subi	r30, 0x7B	; 123
    2fec:	fd 4f       	sbci	r31, 0xFD	; 253
    2fee:	20 81       	ld	r18, Z
    2ff0:	31 81       	ldd	r19, Z+1	; 0x01
    2ff2:	42 81       	ldd	r20, Z+2	; 0x02
    2ff4:	53 81       	ldd	r21, Z+3	; 0x03
    2ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3002:	2b 01       	movw	r4, r22
    3004:	3c 01       	movw	r6, r24
    3006:	d8 01       	movw	r26, r16
    3008:	2d 91       	ld	r18, X+
    300a:	3d 91       	ld	r19, X+
    300c:	4d 91       	ld	r20, X+
    300e:	5c 91       	ld	r21, X
    3010:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3012:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3016:	98 a1       	ldd	r25, Y+32	; 0x20
    3018:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    301c:	a7 01       	movw	r20, r14
    301e:	96 01       	movw	r18, r12
    3020:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3024:	9b 01       	movw	r18, r22
    3026:	ac 01       	movw	r20, r24
    3028:	c3 01       	movw	r24, r6
    302a:	b2 01       	movw	r22, r4
    302c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3030:	a5 01       	movw	r20, r10
    3032:	94 01       	movw	r18, r8
    3034:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3038:	e9 85       	ldd	r30, Y+9	; 0x09
    303a:	fa 85       	ldd	r31, Y+10	; 0x0a
    303c:	60 83       	st	Z, r22
    303e:	71 83       	std	Z+1, r23	; 0x01
    3040:	82 83       	std	Z+2, r24	; 0x02
    3042:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    3044:	09 81       	ldd	r16, Y+1	; 0x01
    3046:	1a 81       	ldd	r17, Y+2	; 0x02
    3048:	01 50       	subi	r16, 0x01	; 1
    304a:	11 09       	sbc	r17, r1
    304c:	ad e4       	ldi	r26, 0x4D	; 77
    304e:	b2 e0       	ldi	r27, 0x02	; 2
    3050:	cd 90       	ld	r12, X+
    3052:	dd 90       	ld	r13, X+
    3054:	ed 90       	ld	r14, X+
    3056:	fc 90       	ld	r15, X
    3058:	00 0f       	add	r16, r16
    305a:	11 1f       	adc	r17, r17
    305c:	00 0f       	add	r16, r16
    305e:	11 1f       	adc	r17, r17
    3060:	f8 01       	movw	r30, r16
    3062:	e7 5b       	subi	r30, 0xB7	; 183
    3064:	fd 4f       	sbci	r31, 0xFD	; 253
    3066:	80 80       	ld	r8, Z
    3068:	91 80       	ldd	r9, Z+1	; 0x01
    306a:	a2 80       	ldd	r10, Z+2	; 0x02
    306c:	b3 80       	ldd	r11, Z+3	; 0x03
    306e:	e9 81       	ldd	r30, Y+1	; 0x01
    3070:	fa 81       	ldd	r31, Y+2	; 0x02
    3072:	ee 0f       	add	r30, r30
    3074:	ff 1f       	adc	r31, r31
    3076:	ee 0f       	add	r30, r30
    3078:	ff 1f       	adc	r31, r31
    307a:	fa 87       	std	Y+10, r31	; 0x0a
    307c:	e9 87       	std	Y+9, r30	; 0x09
    307e:	e3 5f       	subi	r30, 0xF3	; 243
    3080:	fd 4f       	sbci	r31, 0xFD	; 253
    3082:	fa 83       	std	Y+2, r31	; 0x02
    3084:	e9 83       	std	Y+1, r30	; 0x01
    3086:	03 5f       	subi	r16, 0xF3	; 243
    3088:	1d 4f       	sbci	r17, 0xFD	; 253
    308a:	d8 01       	movw	r26, r16
    308c:	2d 91       	ld	r18, X+
    308e:	3d 91       	ld	r19, X+
    3090:	4d 91       	ld	r20, X+
    3092:	5c 91       	ld	r21, X
    3094:	c7 01       	movw	r24, r14
    3096:	b6 01       	movw	r22, r12
    3098:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    309c:	2b 01       	movw	r4, r22
    309e:	3c 01       	movw	r6, r24
    30a0:	e1 e1       	ldi	r30, 0x11	; 17
    30a2:	f2 e0       	ldi	r31, 0x02	; 2
    30a4:	20 81       	ld	r18, Z
    30a6:	31 81       	ldd	r19, Z+1	; 0x01
    30a8:	42 81       	ldd	r20, Z+2	; 0x02
    30aa:	53 81       	ldd	r21, Z+3	; 0x03
    30ac:	c5 01       	movw	r24, r10
    30ae:	b4 01       	movw	r22, r8
    30b0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    30b4:	9b 01       	movw	r18, r22
    30b6:	ac 01       	movw	r20, r24
    30b8:	c3 01       	movw	r24, r6
    30ba:	b2 01       	movw	r22, r4
    30bc:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    30c0:	a9 81       	ldd	r26, Y+1	; 0x01
    30c2:	ba 81       	ldd	r27, Y+2	; 0x02
    30c4:	6d 93       	st	X+, r22
    30c6:	7d 93       	st	X+, r23
    30c8:	8d 93       	st	X+, r24
    30ca:	9c 93       	st	X, r25
    30cc:	13 97       	sbiw	r26, 0x03	; 3
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    30ce:	e9 85       	ldd	r30, Y+9	; 0x09
    30d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    30d2:	e7 5b       	subi	r30, 0xB7	; 183
    30d4:	fd 4f       	sbci	r31, 0xFD	; 253
    30d6:	3f 01       	movw	r6, r30
    30d8:	a5 01       	movw	r20, r10
    30da:	94 01       	movw	r18, r8
    30dc:	c7 01       	movw	r24, r14
    30de:	b6 01       	movw	r22, r12
    30e0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    30e4:	6b 01       	movw	r12, r22
    30e6:	7c 01       	movw	r14, r24
    30e8:	a1 e1       	ldi	r26, 0x11	; 17
    30ea:	b2 e0       	ldi	r27, 0x02	; 2
    30ec:	2d 91       	ld	r18, X+
    30ee:	3d 91       	ld	r19, X+
    30f0:	4d 91       	ld	r20, X+
    30f2:	5c 91       	ld	r21, X
    30f4:	f8 01       	movw	r30, r16
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3102:	9b 01       	movw	r18, r22
    3104:	ac 01       	movw	r20, r24
    3106:	c7 01       	movw	r24, r14
    3108:	b6 01       	movw	r22, r12
    310a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    310e:	d3 01       	movw	r26, r6
    3110:	6d 93       	st	X+, r22
    3112:	7d 93       	st	X+, r23
    3114:	8d 93       	st	X+, r24
    3116:	9c 93       	st	X, r25
    3118:	13 97       	sbiw	r26, 0x03	; 3
    311a:	1f c1       	rjmp	.+574    	; 0x335a <igrf+0x90e>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    311c:	bd a5       	ldd	r27, Y+45	; 0x2d
    311e:	0b 2f       	mov	r16, r27
    3120:	10 e0       	ldi	r17, 0x00	; 0
    3122:	33 9c       	mul	r3, r3
    3124:	c0 01       	movw	r24, r0
    3126:	11 24       	eor	r1, r1
    3128:	00 9f       	mul	r16, r16
    312a:	b0 01       	movw	r22, r0
    312c:	01 9f       	mul	r16, r17
    312e:	70 0d       	add	r23, r0
    3130:	70 0d       	add	r23, r0
    3132:	11 24       	eor	r1, r1
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	68 1b       	sub	r22, r24
    313a:	79 0b       	sbc	r23, r25
    313c:	88 27       	eor	r24, r24
    313e:	77 fd       	sbrc	r23, 7
    3140:	80 95       	com	r24
    3142:	98 2f       	mov	r25, r24
    3144:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3148:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    314c:	4b 01       	movw	r8, r22
    314e:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    3150:	b8 01       	movw	r22, r16
    3152:	88 27       	eor	r24, r24
    3154:	77 fd       	sbrc	r23, 7
    3156:	80 95       	com	r24
    3158:	98 2f       	mov	r25, r24
    315a:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    315e:	2b 01       	movw	r4, r22
    3160:	3c 01       	movw	r6, r24
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e8       	ldi	r20, 0x80	; 128
    3168:	5f e3       	ldi	r21, 0x3F	; 63
    316a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    316e:	69 87       	std	Y+9, r22	; 0x09
    3170:	7a 87       	std	Y+10, r23	; 0x0a
    3172:	8b 87       	std	Y+11, r24	; 0x0b
    3174:	9c 87       	std	Y+12, r25	; 0x0c
    3176:	9b 01       	movw	r18, r22
    3178:	ac 01       	movw	r20, r24
    317a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    317e:	6b 01       	movw	r12, r22
    3180:	7c 01       	movw	r14, r24
    3182:	e9 81       	ldd	r30, Y+1	; 0x01
    3184:	fa 81       	ldd	r31, Y+2	; 0x02
    3186:	bf 01       	movw	r22, r30
    3188:	88 27       	eor	r24, r24
    318a:	77 fd       	sbrc	r23, 7
    318c:	80 95       	com	r24
    318e:	98 2f       	mov	r25, r24
    3190:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3194:	9b 01       	movw	r18, r22
    3196:	ac 01       	movw	r20, r24
    3198:	c7 01       	movw	r24, r14
    319a:	b6 01       	movw	r22, r12
    319c:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    31a0:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    31a4:	a5 01       	movw	r20, r10
    31a6:	94 01       	movw	r18, r8
    31a8:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    31ac:	6b 01       	movw	r12, r22
    31ae:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    31b0:	a3 01       	movw	r20, r6
    31b2:	92 01       	movw	r18, r4
    31b4:	c3 01       	movw	r24, r6
    31b6:	b2 01       	movw	r22, r4
    31b8:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    31c8:	a5 01       	movw	r20, r10
    31ca:	94 01       	movw	r18, r8
    31cc:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    31d0:	6d 87       	std	Y+13, r22	; 0x0d
    31d2:	7e 87       	std	Y+14, r23	; 0x0e
    31d4:	8f 87       	std	Y+15, r24	; 0x0f
    31d6:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    31d8:	82 2d       	mov	r24, r2
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	fd 81       	ldd	r31, Y+5	; 0x05
    31de:	2f 2f       	mov	r18, r31
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	ac 01       	movw	r20, r24
    31e4:	42 1b       	sub	r20, r18
    31e6:	53 0b       	sbc	r21, r19
    31e8:	5e 8b       	std	Y+22, r21	; 0x16
    31ea:	4d 8b       	std	Y+21, r20	; 0x15
    31ec:	8a 01       	movw	r16, r20
    31ee:	02 1b       	sub	r16, r18
    31f0:	13 0b       	sbc	r17, r19
    31f2:	0f 5f       	subi	r16, 0xFF	; 255
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	dc 01       	movw	r26, r24
    31f8:	aa 0f       	add	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	aa 0f       	add	r26, r26
    31fe:	bb 1f       	adc	r27, r27
    3200:	ba 83       	std	Y+2, r27	; 0x02
    3202:	a9 83       	std	Y+1, r26	; 0x01
    3204:	a3 5b       	subi	r26, 0xB3	; 179
    3206:	bc 4f       	sbci	r27, 0xFC	; 252
    3208:	bb ab       	std	Y+51, r27	; 0x33
    320a:	aa ab       	std	Y+50, r26	; 0x32
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	c3 01       	movw	r24, r6
    3216:	b2 01       	movw	r22, r4
    3218:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    321c:	4b 01       	movw	r8, r22
    321e:	5c 01       	movw	r10, r24
    3220:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3222:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3224:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3226:	58 a1       	ldd	r21, Y+32	; 0x20
    3228:	6d 85       	ldd	r22, Y+13	; 0x0d
    322a:	7e 85       	ldd	r23, Y+14	; 0x0e
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3234:	ed 89       	ldd	r30, Y+21	; 0x15
    3236:	fe 89       	ldd	r31, Y+22	; 0x16
    3238:	ee 0f       	add	r30, r30
    323a:	ff 1f       	adc	r31, r31
    323c:	ee 0f       	add	r30, r30
    323e:	ff 1f       	adc	r31, r31
    3240:	2d 96       	adiw	r28, 0x0d	; 13
    3242:	ff af       	std	Y+63, r31	; 0x3f
    3244:	ee af       	std	Y+62, r30	; 0x3e
    3246:	2d 97       	sbiw	r28, 0x0d	; 13
    3248:	e3 5b       	subi	r30, 0xB3	; 179
    324a:	fc 4f       	sbci	r31, 0xFC	; 252
    324c:	fe 8b       	std	Y+22, r31	; 0x16
    324e:	ed 8b       	std	Y+21, r30	; 0x15
    3250:	20 81       	ld	r18, Z
    3252:	31 81       	ldd	r19, Z+1	; 0x01
    3254:	42 81       	ldd	r20, Z+2	; 0x02
    3256:	53 81       	ldd	r21, Z+3	; 0x03
    3258:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    325c:	a3 01       	movw	r20, r6
    325e:	92 01       	movw	r18, r4
    3260:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3264:	6c ab       	std	Y+52, r22	; 0x34
    3266:	7d ab       	std	Y+53, r23	; 0x35
    3268:	8e ab       	std	Y+54, r24	; 0x36
    326a:	9f ab       	std	Y+55, r25	; 0x37
    326c:	00 0f       	add	r16, r16
    326e:	11 1f       	adc	r17, r17
    3270:	00 0f       	add	r16, r16
    3272:	11 1f       	adc	r17, r17
    3274:	f8 01       	movw	r30, r16
    3276:	e3 5b       	subi	r30, 0xB3	; 179
    3278:	fc 4f       	sbci	r31, 0xFC	; 252
    327a:	20 81       	ld	r18, Z
    327c:	31 81       	ldd	r19, Z+1	; 0x01
    327e:	42 81       	ldd	r20, Z+2	; 0x02
    3280:	53 81       	ldd	r21, Z+3	; 0x03
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    328a:	29 85       	ldd	r18, Y+9	; 0x09
    328c:	3a 85       	ldd	r19, Y+10	; 0x0a
    328e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3290:	5c 85       	ldd	r21, Y+12	; 0x0c
    3292:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3296:	9b 01       	movw	r18, r22
    3298:	ac 01       	movw	r20, r24
    329a:	6c a9       	ldd	r22, Y+52	; 0x34
    329c:	7d a9       	ldd	r23, Y+53	; 0x35
    329e:	8e a9       	ldd	r24, Y+54	; 0x36
    32a0:	9f a9       	ldd	r25, Y+55	; 0x37
    32a2:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    32a6:	9b 01       	movw	r18, r22
    32a8:	ac 01       	movw	r20, r24
    32aa:	c5 01       	movw	r24, r10
    32ac:	b4 01       	movw	r22, r8
    32ae:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    32b2:	aa a9       	ldd	r26, Y+50	; 0x32
    32b4:	bb a9       	ldd	r27, Y+51	; 0x33
    32b6:	6d 93       	st	X+, r22
    32b8:	7d 93       	st	X+, r23
    32ba:	8d 93       	st	X+, r24
    32bc:	9c 93       	st	X, r25
    32be:	13 97       	sbiw	r26, 0x03	; 3
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    32c0:	e9 81       	ldd	r30, Y+1	; 0x01
    32c2:	fa 81       	ldd	r31, Y+2	; 0x02
    32c4:	eb 57       	subi	r30, 0x7B	; 123
    32c6:	fd 4f       	sbci	r31, 0xFD	; 253
    32c8:	fa 83       	std	Y+2, r31	; 0x02
    32ca:	e9 83       	std	Y+1, r30	; 0x01
    32cc:	2d 96       	adiw	r28, 0x0d	; 13
    32ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    32d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    32d2:	2d 97       	sbiw	r28, 0x0d	; 13
    32d4:	eb 57       	subi	r30, 0x7B	; 123
    32d6:	fd 4f       	sbci	r31, 0xFD	; 253
    32d8:	20 81       	ld	r18, Z
    32da:	31 81       	ldd	r19, Z+1	; 0x01
    32dc:	42 81       	ldd	r20, Z+2	; 0x02
    32de:	53 81       	ldd	r21, Z+3	; 0x03
    32e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    32e2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    32e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e6:	98 a1       	ldd	r25, Y+32	; 0x20
    32e8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    32ec:	4b 01       	movw	r8, r22
    32ee:	5c 01       	movw	r10, r24
    32f0:	ad 89       	ldd	r26, Y+21	; 0x15
    32f2:	be 89       	ldd	r27, Y+22	; 0x16
    32f4:	2d 91       	ld	r18, X+
    32f6:	3d 91       	ld	r19, X+
    32f8:	4d 91       	ld	r20, X+
    32fa:	5c 91       	ld	r21, X
    32fc:	69 8d       	ldd	r22, Y+25	; 0x19
    32fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3304:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3308:	a3 01       	movw	r20, r6
    330a:	92 01       	movw	r18, r4
    330c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3310:	9b 01       	movw	r18, r22
    3312:	ac 01       	movw	r20, r24
    3314:	c5 01       	movw	r24, r10
    3316:	b4 01       	movw	r22, r8
    3318:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    331c:	2d 85       	ldd	r18, Y+13	; 0x0d
    331e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3320:	4f 85       	ldd	r20, Y+15	; 0x0f
    3322:	58 89       	ldd	r21, Y+16	; 0x10
    3324:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3328:	4b 01       	movw	r8, r22
    332a:	5c 01       	movw	r10, r24
    332c:	f8 01       	movw	r30, r16
    332e:	eb 57       	subi	r30, 0x7B	; 123
    3330:	fd 4f       	sbci	r31, 0xFD	; 253
    3332:	20 81       	ld	r18, Z
    3334:	31 81       	ldd	r19, Z+1	; 0x01
    3336:	42 81       	ldd	r20, Z+2	; 0x02
    3338:	53 81       	ldd	r21, Z+3	; 0x03
    333a:	c7 01       	movw	r24, r14
    333c:	b6 01       	movw	r22, r12
    333e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24
    3346:	c5 01       	movw	r24, r10
    3348:	b4 01       	movw	r22, r8
    334a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    334e:	e9 81       	ldd	r30, Y+1	; 0x01
    3350:	fa 81       	ldd	r31, Y+2	; 0x02
    3352:	60 83       	st	Z, r22
    3354:	71 83       	std	Z+1, r23	; 0x01
    3356:	82 83       	std	Z+2, r24	; 0x02
    3358:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    335a:	f9 89       	ldd	r31, Y+17	; 0x11
    335c:	0f 2f       	mov	r16, r31
    335e:	10 e0       	ldi	r17, 0x00	; 0
    3360:	f8 01       	movw	r30, r16
    3362:	ee 0f       	add	r30, r30
    3364:	ff 1f       	adc	r31, r31
    3366:	ee 0f       	add	r30, r30
    3368:	ff 1f       	adc	r31, r31
    336a:	e4 54       	subi	r30, 0x44	; 68
    336c:	fb 4f       	sbci	r31, 0xFB	; 251
    336e:	c5 90       	lpm	r12, Z+
    3370:	d5 90       	lpm	r13, Z+
    3372:	e5 90       	lpm	r14, Z+
    3374:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    3376:	f8 01       	movw	r30, r16
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	e4 55       	subi	r30, 0x54	; 84
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	25 91       	lpm	r18, Z+
    3386:	35 91       	lpm	r19, Z+
    3388:	45 91       	lpm	r20, Z+
    338a:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    338c:	6e a5       	ldd	r22, Y+46	; 0x2e
    338e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3390:	88 a9       	ldd	r24, Y+48	; 0x30
    3392:	99 a9       	ldd	r25, Y+49	; 0x31
    3394:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3398:	9b 01       	movw	r18, r22
    339a:	ac 01       	movw	r20, r24
    339c:	c7 01       	movw	r24, r14
    339e:	b6 01       	movw	r22, r12
    33a0:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    33a4:	29 a5       	ldd	r18, Y+41	; 0x29
    33a6:	3a a5       	ldd	r19, Y+42	; 0x2a
    33a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    33aa:	5c a5       	ldd	r21, Y+44	; 0x2c
    33ac:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    33b0:	6b 01       	movw	r12, r22
    33b2:	7c 01       	movw	r14, r24
    
    
    if(m == 0)
    33b4:	31 10       	cpse	r3, r1
    33b6:	36 c0       	rjmp	.+108    	; 0x3424 <igrf+0x9d8>
    {
      x += one * q[k];
    33b8:	02 2d       	mov	r16, r2
    33ba:	10 e0       	ldi	r17, 0x00	; 0
    33bc:	00 0f       	add	r16, r16
    33be:	11 1f       	adc	r17, r17
    33c0:	00 0f       	add	r16, r16
    33c2:	11 1f       	adc	r17, r17
    33c4:	f8 01       	movw	r30, r16
    33c6:	eb 57       	subi	r30, 0x7B	; 123
    33c8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ca:	20 81       	ld	r18, Z
    33cc:	31 81       	ldd	r19, Z+1	; 0x01
    33ce:	42 81       	ldd	r20, Z+2	; 0x02
    33d0:	53 81       	ldd	r21, Z+3	; 0x03
    33d2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    33d6:	9b 01       	movw	r18, r22
    33d8:	ac 01       	movw	r20, r24
    33da:	69 a1       	ldd	r22, Y+33	; 0x21
    33dc:	7a a1       	ldd	r23, Y+34	; 0x22
    33de:	8b a1       	ldd	r24, Y+35	; 0x23
    33e0:	9c a1       	ldd	r25, Y+36	; 0x24
    33e2:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    33e6:	69 a3       	std	Y+33, r22	; 0x21
    33e8:	7a a3       	std	Y+34, r23	; 0x22
    33ea:	8b a3       	std	Y+35, r24	; 0x23
    33ec:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    33ee:	f8 01       	movw	r30, r16
    33f0:	e3 5b       	subi	r30, 0xB3	; 179
    33f2:	fc 4f       	sbci	r31, 0xFC	; 252
    33f4:	20 81       	ld	r18, Z
    33f6:	31 81       	ldd	r19, Z+1	; 0x01
    33f8:	42 81       	ldd	r20, Z+2	; 0x02
    33fa:	53 81       	ldd	r21, Z+3	; 0x03
    33fc:	c7 01       	movw	r24, r14
    33fe:	b6 01       	movw	r22, r12
    3400:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3404:	9b 01       	movw	r18, r22
    3406:	ac 01       	movw	r20, r24
    3408:	6d a1       	ldd	r22, Y+37	; 0x25
    340a:	7e a1       	ldd	r23, Y+38	; 0x26
    340c:	8f a1       	ldd	r24, Y+39	; 0x27
    340e:	98 a5       	ldd	r25, Y+40	; 0x28
    3410:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3414:	6d a3       	std	Y+37, r22	; 0x25
    3416:	7e a3       	std	Y+38, r23	; 0x26
    3418:	8f a3       	std	Y+39, r24	; 0x27
    341a:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    341c:	29 89       	ldd	r18, Y+17	; 0x11
    341e:	2f 5f       	subi	r18, 0xFF	; 255
    3420:	29 8b       	std	Y+17, r18	; 0x11
    3422:	45 c1       	rjmp	.+650    	; 0x36ae <igrf+0xc62>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    3424:	0f 5f       	subi	r16, 0xFF	; 255
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	f8 01       	movw	r30, r16
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	ee 0f       	add	r30, r30
    3430:	ff 1f       	adc	r31, r31
    3432:	e4 54       	subi	r30, 0x44	; 68
    3434:	fb 4f       	sbci	r31, 0xFB	; 251
    3436:	85 90       	lpm	r8, Z+
    3438:	95 90       	lpm	r9, Z+
    343a:	a5 90       	lpm	r10, Z+
    343c:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    343e:	f8 01       	movw	r30, r16
    3440:	ee 0f       	add	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	e4 55       	subi	r30, 0x54	; 84
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	25 91       	lpm	r18, Z+
    344e:	35 91       	lpm	r19, Z+
    3450:	45 91       	lpm	r20, Z+
    3452:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    3454:	6e a5       	ldd	r22, Y+46	; 0x2e
    3456:	7f a5       	ldd	r23, Y+47	; 0x2f
    3458:	88 a9       	ldd	r24, Y+48	; 0x30
    345a:	99 a9       	ldd	r25, Y+49	; 0x31
    345c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3460:	9b 01       	movw	r18, r22
    3462:	ac 01       	movw	r20, r24
    3464:	c5 01       	movw	r24, r10
    3466:	b4 01       	movw	r22, r8
    3468:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    346c:	29 a5       	ldd	r18, Y+41	; 0x29
    346e:	3a a5       	ldd	r19, Y+42	; 0x2a
    3470:	4b a5       	ldd	r20, Y+43	; 0x2b
    3472:	5c a5       	ldd	r21, Y+44	; 0x2c
    3474:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3478:	2b 01       	movw	r4, r22
    347a:	3c 01       	movw	r6, r24
      three = one * cl[m] + two * sl[m];
    347c:	03 2d       	mov	r16, r3
    347e:	10 e0       	ldi	r17, 0x00	; 0
    3480:	c8 01       	movw	r24, r16
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	fc 01       	movw	r30, r24
    348c:	e7 5b       	subi	r30, 0xB7	; 183
    348e:	fd 4f       	sbci	r31, 0xFD	; 253
    3490:	20 81       	ld	r18, Z
    3492:	31 81       	ldd	r19, Z+1	; 0x01
    3494:	42 81       	ldd	r20, Z+2	; 0x02
    3496:	53 81       	ldd	r21, Z+3	; 0x03
    3498:	29 83       	std	Y+1, r18	; 0x01
    349a:	3a 83       	std	Y+2, r19	; 0x02
    349c:	4b 83       	std	Y+3, r20	; 0x03
    349e:	5c 83       	std	Y+4, r21	; 0x04
    34a0:	9c 01       	movw	r18, r24
    34a2:	23 5f       	subi	r18, 0xF3	; 243
    34a4:	3d 4f       	sbci	r19, 0xFD	; 253
    34a6:	d9 01       	movw	r26, r18
    34a8:	8d 91       	ld	r24, X+
    34aa:	9d 91       	ld	r25, X+
    34ac:	0d 90       	ld	r0, X+
    34ae:	bc 91       	ld	r27, X
    34b0:	a0 2d       	mov	r26, r0
    34b2:	89 87       	std	Y+9, r24	; 0x09
    34b4:	9a 87       	std	Y+10, r25	; 0x0a
    34b6:	ab 87       	std	Y+11, r26	; 0x0b
    34b8:	bc 87       	std	Y+12, r27	; 0x0c
    34ba:	a7 01       	movw	r20, r14
    34bc:	96 01       	movw	r18, r12
    34be:	69 81       	ldd	r22, Y+1	; 0x01
    34c0:	7a 81       	ldd	r23, Y+2	; 0x02
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    34ca:	4b 01       	movw	r8, r22
    34cc:	5c 01       	movw	r10, r24
    34ce:	a3 01       	movw	r20, r6
    34d0:	92 01       	movw	r18, r4
    34d2:	69 85       	ldd	r22, Y+9	; 0x09
    34d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    34d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    34d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    34da:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    34de:	9b 01       	movw	r18, r22
    34e0:	ac 01       	movw	r20, r24
    34e2:	c5 01       	movw	r24, r10
    34e4:	b4 01       	movw	r22, r8
    34e6:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    34ea:	4b 01       	movw	r8, r22
    34ec:	5c 01       	movw	r10, r24
      x += three * q[k];
    34ee:	82 2d       	mov	r24, r2
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	fc 01       	movw	r30, r24
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	fe 87       	std	Y+14, r31	; 0x0e
    34fe:	ed 87       	std	Y+13, r30	; 0x0d
    3500:	9f 01       	movw	r18, r30
    3502:	2b 57       	subi	r18, 0x7B	; 123
    3504:	3d 4f       	sbci	r19, 0xFD	; 253
    3506:	d9 01       	movw	r26, r18
    3508:	8d 91       	ld	r24, X+
    350a:	9d 91       	ld	r25, X+
    350c:	0d 90       	ld	r0, X+
    350e:	bc 91       	ld	r27, X
    3510:	a0 2d       	mov	r26, r0
    3512:	8d 8b       	std	Y+21, r24	; 0x15
    3514:	9e 8b       	std	Y+22, r25	; 0x16
    3516:	af 8b       	std	Y+23, r26	; 0x17
    3518:	b8 8f       	std	Y+24, r27	; 0x18
    351a:	a5 01       	movw	r20, r10
    351c:	94 01       	movw	r18, r8
    351e:	bc 01       	movw	r22, r24
    3520:	cd 01       	movw	r24, r26
    3522:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3526:	9b 01       	movw	r18, r22
    3528:	ac 01       	movw	r20, r24
    352a:	69 a1       	ldd	r22, Y+33	; 0x21
    352c:	7a a1       	ldd	r23, Y+34	; 0x22
    352e:	8b a1       	ldd	r24, Y+35	; 0x23
    3530:	9c a1       	ldd	r25, Y+36	; 0x24
    3532:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3536:	69 a3       	std	Y+33, r22	; 0x21
    3538:	7a a3       	std	Y+34, r23	; 0x22
    353a:	8b a3       	std	Y+35, r24	; 0x23
    353c:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    353e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3540:	3e 85       	ldd	r19, Y+14	; 0x0e
    3542:	23 5b       	subi	r18, 0xB3	; 179
    3544:	3c 4f       	sbci	r19, 0xFC	; 252
    3546:	d9 01       	movw	r26, r18
    3548:	8d 91       	ld	r24, X+
    354a:	9d 91       	ld	r25, X+
    354c:	0d 90       	ld	r0, X+
    354e:	bc 91       	ld	r27, X
    3550:	a0 2d       	mov	r26, r0
    3552:	8d 87       	std	Y+13, r24	; 0x0d
    3554:	9e 87       	std	Y+14, r25	; 0x0e
    3556:	af 87       	std	Y+15, r26	; 0x0f
    3558:	b8 8b       	std	Y+16, r27	; 0x10
    355a:	a5 01       	movw	r20, r10
    355c:	94 01       	movw	r18, r8
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3566:	9b 01       	movw	r18, r22
    3568:	ac 01       	movw	r20, r24
    356a:	6d a1       	ldd	r22, Y+37	; 0x25
    356c:	7e a1       	ldd	r23, Y+38	; 0x26
    356e:	8f a1       	ldd	r24, Y+39	; 0x27
    3570:	98 a5       	ldd	r25, Y+40	; 0x28
    3572:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3576:	6d a3       	std	Y+37, r22	; 0x25
    3578:	7e a3       	std	Y+38, r23	; 0x26
    357a:	8f a3       	std	Y+39, r24	; 0x27
    357c:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	a9 01       	movw	r20, r18
    3584:	69 8d       	ldd	r22, Y+25	; 0x19
    3586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358c:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    3590:	18 16       	cp	r1, r24
    3592:	0c f0       	brlt	.+2      	; 0x3596 <igrf+0xb4a>
    3594:	57 c0       	rjmp	.+174    	; 0x3644 <igrf+0xbf8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    3596:	29 85       	ldd	r18, Y+9	; 0x09
    3598:	3a 85       	ldd	r19, Y+10	; 0x0a
    359a:	4b 85       	ldd	r20, Y+11	; 0x0b
    359c:	5c 85       	ldd	r21, Y+12	; 0x0c
    359e:	c7 01       	movw	r24, r14
    35a0:	b6 01       	movw	r22, r12
    35a2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    35a6:	6b 01       	movw	r12, r22
    35a8:	7c 01       	movw	r14, r24
    35aa:	29 81       	ldd	r18, Y+1	; 0x01
    35ac:	3a 81       	ldd	r19, Y+2	; 0x02
    35ae:	4b 81       	ldd	r20, Y+3	; 0x03
    35b0:	5c 81       	ldd	r21, Y+4	; 0x04
    35b2:	c3 01       	movw	r24, r6
    35b4:	b2 01       	movw	r22, r4
    35b6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    35ba:	9b 01       	movw	r18, r22
    35bc:	ac 01       	movw	r20, r24
    35be:	c7 01       	movw	r24, r14
    35c0:	b6 01       	movw	r22, r12
    35c2:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    35c6:	6b 01       	movw	r12, r22
    35c8:	7c 01       	movw	r14, r24
    35ca:	b8 01       	movw	r22, r16
    35cc:	88 27       	eor	r24, r24
    35ce:	77 fd       	sbrc	r23, 7
    35d0:	80 95       	com	r24
    35d2:	98 2f       	mov	r25, r24
    35d4:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    35d8:	9b 01       	movw	r18, r22
    35da:	ac 01       	movw	r20, r24
    35dc:	c7 01       	movw	r24, r14
    35de:	b6 01       	movw	r22, r12
    35e0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    35e4:	9b 01       	movw	r18, r22
    35e6:	ac 01       	movw	r20, r24
    35e8:	6d 85       	ldd	r22, Y+13	; 0x0d
    35ea:	7e 85       	ldd	r23, Y+14	; 0x0e
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	98 89       	ldd	r25, Y+16	; 0x10
    35f0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    35f4:	6b 01       	movw	r12, r22
    35f6:	7c 01       	movw	r14, r24
    35f8:	bd a5       	ldd	r27, Y+45	; 0x2d
    35fa:	6b 2f       	mov	r22, r27
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e8       	ldi	r20, 0x80	; 128
    360c:	5f e3       	ldi	r21, 0x3F	; 63
    360e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3612:	29 8d       	ldd	r18, Y+25	; 0x19
    3614:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3616:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3618:	5c 8d       	ldd	r21, Y+28	; 0x1c
    361a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    361e:	9b 01       	movw	r18, r22
    3620:	ac 01       	movw	r20, r24
    3622:	c7 01       	movw	r24, r14
    3624:	b6 01       	movw	r22, r12
    3626:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    362a:	9b 01       	movw	r18, r22
    362c:	ac 01       	movw	r20, r24
    362e:	69 ad       	ldd	r22, Y+57	; 0x39
    3630:	7a ad       	ldd	r23, Y+58	; 0x3a
    3632:	8b ad       	ldd	r24, Y+59	; 0x3b
    3634:	9c ad       	ldd	r25, Y+60	; 0x3c
    3636:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    363a:	69 af       	std	Y+57, r22	; 0x39
    363c:	7a af       	std	Y+58, r23	; 0x3a
    363e:	8b af       	std	Y+59, r24	; 0x3b
    3640:	9c af       	std	Y+60, r25	; 0x3c
    3642:	32 c0       	rjmp	.+100    	; 0x36a8 <igrf+0xc5c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    3644:	29 85       	ldd	r18, Y+9	; 0x09
    3646:	3a 85       	ldd	r19, Y+10	; 0x0a
    3648:	4b 85       	ldd	r20, Y+11	; 0x0b
    364a:	5c 85       	ldd	r21, Y+12	; 0x0c
    364c:	c7 01       	movw	r24, r14
    364e:	b6 01       	movw	r22, r12
    3650:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3654:	6b 01       	movw	r12, r22
    3656:	7c 01       	movw	r14, r24
    3658:	29 81       	ldd	r18, Y+1	; 0x01
    365a:	3a 81       	ldd	r19, Y+2	; 0x02
    365c:	4b 81       	ldd	r20, Y+3	; 0x03
    365e:	5c 81       	ldd	r21, Y+4	; 0x04
    3660:	c3 01       	movw	r24, r6
    3662:	b2 01       	movw	r22, r4
    3664:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3668:	9b 01       	movw	r18, r22
    366a:	ac 01       	movw	r20, r24
    366c:	c7 01       	movw	r24, r14
    366e:	b6 01       	movw	r22, r12
    3670:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3674:	9b 01       	movw	r18, r22
    3676:	ac 01       	movw	r20, r24
    3678:	6d 89       	ldd	r22, Y+21	; 0x15
    367a:	7e 89       	ldd	r23, Y+22	; 0x16
    367c:	8f 89       	ldd	r24, Y+23	; 0x17
    367e:	98 8d       	ldd	r25, Y+24	; 0x18
    3680:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3684:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3686:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3688:	4f 8d       	ldd	r20, Y+31	; 0x1f
    368a:	58 a1       	ldd	r21, Y+32	; 0x20
    368c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3690:	9b 01       	movw	r18, r22
    3692:	ac 01       	movw	r20, r24
    3694:	69 ad       	ldd	r22, Y+57	; 0x39
    3696:	7a ad       	ldd	r23, Y+58	; 0x3a
    3698:	8b ad       	ldd	r24, Y+59	; 0x3b
    369a:	9c ad       	ldd	r25, Y+60	; 0x3c
    369c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    36a0:	69 af       	std	Y+57, r22	; 0x39
    36a2:	7a af       	std	Y+58, r23	; 0x3a
    36a4:	8b af       	std	Y+59, r24	; 0x3b
    36a6:	9c af       	std	Y+60, r25	; 0x3c
        
      l += 2;
    36a8:	e9 89       	ldd	r30, Y+17	; 0x11
    36aa:	ee 5f       	subi	r30, 0xFE	; 254
    36ac:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    36ae:	33 94       	inc	r3
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    36b0:	23 94       	inc	r2
    36b2:	f8 ad       	ldd	r31, Y+56	; 0x38
    36b4:	f2 15       	cp	r31, r2
    36b6:	08 f0       	brcs	.+2      	; 0x36ba <igrf+0xc6e>
    36b8:	0a cc       	rjmp	.-2028   	; 0x2ece <igrf+0x482>
    36ba:	0c c0       	rjmp	.+24     	; 0x36d4 <igrf+0xc88>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    36bc:	1d a2       	std	Y+37, r1	; 0x25
    36be:	1e a2       	std	Y+38, r1	; 0x26
    36c0:	1f a2       	std	Y+39, r1	; 0x27
    36c2:	18 a6       	std	Y+40, r1	; 0x28
    36c4:	19 ae       	std	Y+57, r1	; 0x39
    36c6:	1a ae       	std	Y+58, r1	; 0x3a
    36c8:	1b ae       	std	Y+59, r1	; 0x3b
    36ca:	1c ae       	std	Y+60, r1	; 0x3c
    36cc:	19 a2       	std	Y+33, r1	; 0x21
    36ce:	1a a2       	std	Y+34, r1	; 0x22
    36d0:	1b a2       	std	Y+35, r1	; 0x23
    36d2:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    36d4:	25 96       	adiw	r28, 0x05	; 5
    36d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    36d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    36da:	4e ad       	ldd	r20, Y+62	; 0x3e
    36dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    36de:	25 97       	sbiw	r28, 0x05	; 5
    36e0:	6d a1       	ldd	r22, Y+37	; 0x25
    36e2:	7e a1       	ldd	r23, Y+38	; 0x26
    36e4:	8f a1       	ldd	r24, Y+39	; 0x27
    36e6:	98 a5       	ldd	r25, Y+40	; 0x28
    36e8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    36ec:	6b 01       	movw	r12, r22
    36ee:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    36f0:	25 96       	adiw	r28, 0x05	; 5
    36f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    36f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    36f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    36f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    36fa:	25 97       	sbiw	r28, 0x05	; 5
    36fc:	69 a1       	ldd	r22, Y+33	; 0x21
    36fe:	7a a1       	ldd	r23, Y+34	; 0x22
    3700:	8b a1       	ldd	r24, Y+35	; 0x23
    3702:	9c a1       	ldd	r25, Y+36	; 0x24
    3704:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3708:	4b 01       	movw	r8, r22
    370a:	5c 01       	movw	r10, r24
    370c:	29 96       	adiw	r28, 0x09	; 9
    370e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3710:	3d ad       	ldd	r19, Y+61	; 0x3d
    3712:	4e ad       	ldd	r20, Y+62	; 0x3e
    3714:	5f ad       	ldd	r21, Y+63	; 0x3f
    3716:	29 97       	sbiw	r28, 0x09	; 9
    3718:	6d a1       	ldd	r22, Y+37	; 0x25
    371a:	7e a1       	ldd	r23, Y+38	; 0x26
    371c:	8f a1       	ldd	r24, Y+39	; 0x27
    371e:	98 a5       	ldd	r25, Y+40	; 0x28
    3720:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3724:	9b 01       	movw	r18, r22
    3726:	ac 01       	movw	r20, r24
    3728:	c5 01       	movw	r24, r10
    372a:	b4 01       	movw	r22, r8
    372c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    3730:	2b 96       	adiw	r28, 0x0b	; 11
    3732:	ae ad       	ldd	r26, Y+62	; 0x3e
    3734:	bf ad       	ldd	r27, Y+63	; 0x3f
    3736:	2b 97       	sbiw	r28, 0x0b	; 11
    3738:	6d 93       	st	X+, r22
    373a:	7d 93       	st	X+, r23
    373c:	8d 93       	st	X+, r24
    373e:	9c 93       	st	X, r25
    3740:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    3742:	29 ad       	ldd	r18, Y+57	; 0x39
    3744:	3a ad       	ldd	r19, Y+58	; 0x3a
    3746:	4b ad       	ldd	r20, Y+59	; 0x3b
    3748:	5c ad       	ldd	r21, Y+60	; 0x3c
    374a:	14 96       	adiw	r26, 0x04	; 4
    374c:	2d 93       	st	X+, r18
    374e:	3d 93       	st	X+, r19
    3750:	4d 93       	st	X+, r20
    3752:	5c 93       	st	X, r21
    3754:	17 97       	sbiw	r26, 0x07	; 7
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3756:	29 96       	adiw	r28, 0x09	; 9
    3758:	2c ad       	ldd	r18, Y+60	; 0x3c
    375a:	3d ad       	ldd	r19, Y+61	; 0x3d
    375c:	4e ad       	ldd	r20, Y+62	; 0x3e
    375e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3760:	29 97       	sbiw	r28, 0x09	; 9
    3762:	69 a1       	ldd	r22, Y+33	; 0x21
    3764:	7a a1       	ldd	r23, Y+34	; 0x22
    3766:	8b a1       	ldd	r24, Y+35	; 0x23
    3768:	9c a1       	ldd	r25, Y+36	; 0x24
    376a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    376e:	9b 01       	movw	r18, r22
    3770:	ac 01       	movw	r20, r24
    3772:	c7 01       	movw	r24, r14
    3774:	b6 01       	movw	r22, r12
    3776:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    377a:	2b 96       	adiw	r28, 0x0b	; 11
    377c:	ee ad       	ldd	r30, Y+62	; 0x3e
    377e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3780:	2b 97       	sbiw	r28, 0x0b	; 11
    3782:	60 87       	std	Z+8, r22	; 0x08
    3784:	71 87       	std	Z+9, r23	; 0x09
    3786:	82 87       	std	Z+10, r24	; 0x0a
    3788:	93 87       	std	Z+11, r25	; 0x0b
     
}
    378a:	c4 5b       	subi	r28, 0xB4	; 180
    378c:	df 4f       	sbci	r29, 0xFF	; 255
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	bf 90       	pop	r11
    37aa:	af 90       	pop	r10
    37ac:	9f 90       	pop	r9
    37ae:	8f 90       	pop	r8
    37b0:	7f 90       	pop	r7
    37b2:	6f 90       	pop	r6
    37b4:	5f 90       	pop	r5
    37b6:	4f 90       	pop	r4
    37b8:	3f 90       	pop	r3
    37ba:	2f 90       	pop	r2
    37bc:	08 95       	ret

000037be <init_UART_MM>:
uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
  return UDR1; 
}
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	cb e9       	ldi	r28, 0x9B	; 155
    37c4:	d0 e0       	ldi	r29, 0x00	; 0
    37c6:	18 82       	st	Y, r1
    37c8:	aa e9       	ldi	r26, 0x9A	; 154
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	1c 92       	st	X, r1
    37ce:	ed e9       	ldi	r30, 0x9D	; 157
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	10 82       	st	Z, r1
    37d4:	88 81       	ld	r24, Y
    37d6:	82 60       	ori	r24, 0x02	; 2
    37d8:	88 83       	st	Y, r24
    37da:	8c 91       	ld	r24, X
    37dc:	88 69       	ori	r24, 0x98	; 152
    37de:	8c 93       	st	X, r24
    37e0:	80 81       	ld	r24, Z
    37e2:	8e 60       	ori	r24, 0x0E	; 14
    37e4:	80 83       	st	Z, r24
    37e6:	87 e6       	ldi	r24, 0x67	; 103
    37e8:	80 93 99 00 	sts	0x0099, r24
    37ec:	10 92 98 00 	sts	0x0098, r1
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	08 95       	ret

000037f6 <__vector_30>:
    37f6:	1f 92       	push	r1
    37f8:	0f 92       	push	r0
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	0f 92       	push	r0
    37fe:	11 24       	eor	r1, r1
    3800:	0b b6       	in	r0, 0x3b	; 59
    3802:	0f 92       	push	r0
    3804:	2f 93       	push	r18
    3806:	3f 93       	push	r19
    3808:	4f 93       	push	r20
    380a:	5f 93       	push	r21
    380c:	6f 93       	push	r22
    380e:	7f 93       	push	r23
    3810:	8f 93       	push	r24
    3812:	9f 93       	push	r25
    3814:	af 93       	push	r26
    3816:	bf 93       	push	r27
    3818:	ef 93       	push	r30
    381a:	ff 93       	push	r31
    381c:	80 91 1b 04 	lds	r24, 0x041B
    3820:	90 91 9c 00 	lds	r25, 0x009C
    3824:	e8 2f       	mov	r30, r24
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	e8 55       	subi	r30, 0x58	; 88
    382a:	fb 4f       	sbci	r31, 0xFB	; 251
    382c:	90 83       	st	Z, r25
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	87 30       	cpi	r24, 0x07	; 7
    3832:	19 f0       	breq	.+6      	; 0x383a <__vector_30+0x44>
    3834:	80 93 1b 04 	sts	0x041B, r24
    3838:	a1 c0       	rjmp	.+322    	; 0x397c <__vector_30+0x186>
    383a:	10 92 1b 04 	sts	0x041B, r1
    383e:	80 91 a8 04 	lds	r24, 0x04A8
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	98 2f       	mov	r25, r24
    3846:	88 27       	eor	r24, r24
    3848:	90 93 1a 04 	sts	0x041A, r25
    384c:	80 93 19 04 	sts	0x0419, r24
    3850:	80 91 19 04 	lds	r24, 0x0419
    3854:	90 91 1a 04 	lds	r25, 0x041A
    3858:	88 27       	eor	r24, r24
    385a:	90 93 1a 04 	sts	0x041A, r25
    385e:	80 93 19 04 	sts	0x0419, r24
    3862:	80 91 19 04 	lds	r24, 0x0419
    3866:	90 91 1a 04 	lds	r25, 0x041A
    386a:	20 91 a9 04 	lds	r18, 0x04A9
    386e:	82 2b       	or	r24, r18
    3870:	90 93 1a 04 	sts	0x041A, r25
    3874:	80 93 19 04 	sts	0x0419, r24
    3878:	80 91 aa 04 	lds	r24, 0x04AA
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	98 2f       	mov	r25, r24
    3880:	88 27       	eor	r24, r24
    3882:	90 93 18 04 	sts	0x0418, r25
    3886:	80 93 17 04 	sts	0x0417, r24
    388a:	80 91 17 04 	lds	r24, 0x0417
    388e:	90 91 18 04 	lds	r25, 0x0418
    3892:	88 27       	eor	r24, r24
    3894:	90 93 18 04 	sts	0x0418, r25
    3898:	80 93 17 04 	sts	0x0417, r24
    389c:	80 91 17 04 	lds	r24, 0x0417
    38a0:	90 91 18 04 	lds	r25, 0x0418
    38a4:	20 91 ab 04 	lds	r18, 0x04AB
    38a8:	82 2b       	or	r24, r18
    38aa:	90 93 18 04 	sts	0x0418, r25
    38ae:	80 93 17 04 	sts	0x0417, r24
    38b2:	80 91 ac 04 	lds	r24, 0x04AC
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	98 2f       	mov	r25, r24
    38ba:	88 27       	eor	r24, r24
    38bc:	90 93 16 04 	sts	0x0416, r25
    38c0:	80 93 15 04 	sts	0x0415, r24
    38c4:	80 91 15 04 	lds	r24, 0x0415
    38c8:	90 91 16 04 	lds	r25, 0x0416
    38cc:	88 27       	eor	r24, r24
    38ce:	90 93 16 04 	sts	0x0416, r25
    38d2:	80 93 15 04 	sts	0x0415, r24
    38d6:	80 91 15 04 	lds	r24, 0x0415
    38da:	90 91 16 04 	lds	r25, 0x0416
    38de:	20 91 ad 04 	lds	r18, 0x04AD
    38e2:	82 2b       	or	r24, r18
    38e4:	90 93 16 04 	sts	0x0416, r25
    38e8:	80 93 15 04 	sts	0x0415, r24
    38ec:	60 91 19 04 	lds	r22, 0x0419
    38f0:	70 91 1a 04 	lds	r23, 0x041A
    38f4:	88 27       	eor	r24, r24
    38f6:	77 fd       	sbrc	r23, 7
    38f8:	80 95       	com	r24
    38fa:	98 2f       	mov	r25, r24
    38fc:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	30 e6       	ldi	r19, 0x60	; 96
    3904:	4a e6       	ldi	r20, 0x6A	; 106
    3906:	56 e4       	ldi	r21, 0x46	; 70
    3908:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    390c:	60 93 10 05 	sts	0x0510, r22
    3910:	70 93 11 05 	sts	0x0511, r23
    3914:	80 93 12 05 	sts	0x0512, r24
    3918:	90 93 13 05 	sts	0x0513, r25
    391c:	60 91 17 04 	lds	r22, 0x0417
    3920:	70 91 18 04 	lds	r23, 0x0418
    3924:	88 27       	eor	r24, r24
    3926:	77 fd       	sbrc	r23, 7
    3928:	80 95       	com	r24
    392a:	98 2f       	mov	r25, r24
    392c:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e6       	ldi	r19, 0x60	; 96
    3934:	4a e6       	ldi	r20, 0x6A	; 106
    3936:	56 e4       	ldi	r21, 0x46	; 70
    3938:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    393c:	60 93 14 05 	sts	0x0514, r22
    3940:	70 93 15 05 	sts	0x0515, r23
    3944:	80 93 16 05 	sts	0x0516, r24
    3948:	90 93 17 05 	sts	0x0517, r25
    394c:	60 91 15 04 	lds	r22, 0x0415
    3950:	70 91 16 04 	lds	r23, 0x0416
    3954:	88 27       	eor	r24, r24
    3956:	77 fd       	sbrc	r23, 7
    3958:	80 95       	com	r24
    395a:	98 2f       	mov	r25, r24
    395c:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e6       	ldi	r19, 0x60	; 96
    3964:	4a e6       	ldi	r20, 0x6A	; 106
    3966:	56 e4       	ldi	r21, 0x46	; 70
    3968:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    396c:	60 93 18 05 	sts	0x0518, r22
    3970:	70 93 19 05 	sts	0x0519, r23
    3974:	80 93 1a 05 	sts	0x051A, r24
    3978:	90 93 1b 05 	sts	0x051B, r25
    397c:	ff 91       	pop	r31
    397e:	ef 91       	pop	r30
    3980:	bf 91       	pop	r27
    3982:	af 91       	pop	r26
    3984:	9f 91       	pop	r25
    3986:	8f 91       	pop	r24
    3988:	7f 91       	pop	r23
    398a:	6f 91       	pop	r22
    398c:	5f 91       	pop	r21
    398e:	4f 91       	pop	r20
    3990:	3f 91       	pop	r19
    3992:	2f 91       	pop	r18
    3994:	0f 90       	pop	r0
    3996:	0b be       	out	0x3b, r0	; 59
    3998:	0f 90       	pop	r0
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	0f 90       	pop	r0
    399e:	1f 90       	pop	r1
    39a0:	18 95       	reti

000039a2 <send_MM_cmd>:

void send_MM_cmd(char *data)
{
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
    39a6:	fc 01       	movw	r30, r24
    39a8:	20 81       	ld	r18, Z
    39aa:	22 23       	and	r18, r18
    39ac:	69 f0       	breq	.+26     	; 0x39c8 <send_MM_cmd+0x26>
    39ae:	dc 01       	movw	r26, r24
    39b0:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    39b2:	eb e9       	ldi	r30, 0x9B	; 155
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
    39b6:	cc e9       	ldi	r28, 0x9C	; 156
    39b8:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    39ba:	80 81       	ld	r24, Z
    39bc:	85 ff       	sbrs	r24, 5
    39be:	fd cf       	rjmp	.-6      	; 0x39ba <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
    39c0:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
    39c2:	2d 91       	ld	r18, X+
    39c4:	21 11       	cpse	r18, r1
    39c6:	f9 cf       	rjmp	.-14     	; 0x39ba <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	08 95       	ret

000039ce <poll_MM>:
  ///Temporary variables for magnetometer readings
  
  uint8_t tmp;
  
  ///Send the poll command
 send_MM_cmd("*00P\r");
    39ce:	80 e9       	ldi	r24, 0x90	; 144
    39d0:	91 e0       	ldi	r25, 0x01	; 1
    39d2:	e7 cf       	rjmp	.-50     	; 0x39a2 <send_MM_cmd>
    39d4:	08 95       	ret

000039d6 <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	fc 01       	movw	r30, r24
    39dc:	eb 01       	movw	r28, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    39de:	40 81       	ld	r20, Z
    39e0:	51 81       	ldd	r21, Z+1	; 0x01
    39e2:	62 81       	ldd	r22, Z+2	; 0x02
    39e4:	73 81       	ldd	r23, Z+3	; 0x03
    39e6:	48 83       	st	Y, r20
    39e8:	59 83       	std	Y+1, r21	; 0x01
    39ea:	6a 83       	std	Y+2, r22	; 0x02
    39ec:	7b 83       	std	Y+3, r23	; 0x03
    39ee:	44 81       	ldd	r20, Z+4	; 0x04
    39f0:	55 81       	ldd	r21, Z+5	; 0x05
    39f2:	66 81       	ldd	r22, Z+6	; 0x06
    39f4:	77 81       	ldd	r23, Z+7	; 0x07
    39f6:	4c 83       	std	Y+4, r20	; 0x04
    39f8:	5d 83       	std	Y+5, r21	; 0x05
    39fa:	6e 83       	std	Y+6, r22	; 0x06
    39fc:	7f 83       	std	Y+7, r23	; 0x07
    39fe:	80 85       	ldd	r24, Z+8	; 0x08
    3a00:	91 85       	ldd	r25, Z+9	; 0x09
    3a02:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a04:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a06:	88 87       	std	Y+8, r24	; 0x08
    3a08:	99 87       	std	Y+9, r25	; 0x09
    3a0a:	aa 87       	std	Y+10, r26	; 0x0a
    3a0c:	bb 87       	std	Y+11, r27	; 0x0b
}
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	08 95       	ret

00003a14 <copy_quaternion>:

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3a14:	dc 01       	movw	r26, r24
    3a16:	e6 2f       	mov	r30, r22
    3a18:	f7 2f       	mov	r31, r23
  uint8_t i;
  for(i = 0; i < 4; i++)
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    q_dest[i] = q_src[i];
    3a1c:	4d 91       	ld	r20, X+
    3a1e:	5d 91       	ld	r21, X+
    3a20:	6d 91       	ld	r22, X+
    3a22:	7d 91       	ld	r23, X+
    3a24:	41 93       	st	Z+, r20
    3a26:	51 93       	st	Z+, r21
    3a28:	61 93       	st	Z+, r22
    3a2a:	71 93       	st	Z+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3a2c:	8f 5f       	subi	r24, 0xFF	; 255
    3a2e:	84 30       	cpi	r24, 0x04	; 4
    3a30:	a9 f7       	brne	.-22     	; 0x3a1c <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3a32:	08 95       	ret

00003a34 <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3a34:	4f 92       	push	r4
    3a36:	5f 92       	push	r5
    3a38:	6f 92       	push	r6
    3a3a:	7f 92       	push	r7
    3a3c:	8f 92       	push	r8
    3a3e:	9f 92       	push	r9
    3a40:	af 92       	push	r10
    3a42:	bf 92       	push	r11
    3a44:	cf 92       	push	r12
    3a46:	df 92       	push	r13
    3a48:	ef 92       	push	r14
    3a4a:	ff 92       	push	r15
    3a4c:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	84 80       	ldd	r8, Z+4	; 0x04
    3a58:	95 80       	ldd	r9, Z+5	; 0x05
    3a5a:	a6 80       	ldd	r10, Z+6	; 0x06
    3a5c:	b7 80       	ldd	r11, Z+7	; 0x07
    3a5e:	c0 84       	ldd	r12, Z+8	; 0x08
    3a60:	d1 84       	ldd	r13, Z+9	; 0x09
    3a62:	e2 84       	ldd	r14, Z+10	; 0x0a
    3a64:	f3 84       	ldd	r15, Z+11	; 0x0b
    3a66:	9b 01       	movw	r18, r22
    3a68:	ac 01       	movw	r20, r24
    3a6a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3a6e:	2b 01       	movw	r4, r22
    3a70:	3c 01       	movw	r6, r24
    3a72:	a5 01       	movw	r20, r10
    3a74:	94 01       	movw	r18, r8
    3a76:	c5 01       	movw	r24, r10
    3a78:	b4 01       	movw	r22, r8
    3a7a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3a7e:	9b 01       	movw	r18, r22
    3a80:	ac 01       	movw	r20, r24
    3a82:	c3 01       	movw	r24, r6
    3a84:	b2 01       	movw	r22, r4
    3a86:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3a8a:	4b 01       	movw	r8, r22
    3a8c:	5c 01       	movw	r10, r24
    3a8e:	a7 01       	movw	r20, r14
    3a90:	96 01       	movw	r18, r12
    3a92:	c7 01       	movw	r24, r14
    3a94:	b6 01       	movw	r22, r12
    3a96:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3a9a:	9b 01       	movw	r18, r22
    3a9c:	ac 01       	movw	r20, r24
    3a9e:	c5 01       	movw	r24, r10
    3aa0:	b4 01       	movw	r22, r8
    3aa2:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3aa6:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
}
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	df 90       	pop	r13
    3ab0:	cf 90       	pop	r12
    3ab2:	bf 90       	pop	r11
    3ab4:	af 90       	pop	r10
    3ab6:	9f 90       	pop	r9
    3ab8:	8f 90       	pop	r8
    3aba:	7f 90       	pop	r7
    3abc:	6f 90       	pop	r6
    3abe:	5f 90       	pop	r5
    3ac0:	4f 90       	pop	r4
    3ac2:	08 95       	ret

00003ac4 <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3ac4:	4f 92       	push	r4
    3ac6:	5f 92       	push	r5
    3ac8:	6f 92       	push	r6
    3aca:	7f 92       	push	r7
    3acc:	8f 92       	push	r8
    3ace:	9f 92       	push	r9
    3ad0:	af 92       	push	r10
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <quaternion_norm+0x1e>
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <quaternion_norm+0x20>
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	fc 01       	movw	r30, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3aea:	60 81       	ld	r22, Z
    3aec:	71 81       	ldd	r23, Z+1	; 0x01
    3aee:	82 81       	ldd	r24, Z+2	; 0x02
    3af0:	93 81       	ldd	r25, Z+3	; 0x03
    3af2:	84 80       	ldd	r8, Z+4	; 0x04
    3af4:	95 80       	ldd	r9, Z+5	; 0x05
    3af6:	a6 80       	ldd	r10, Z+6	; 0x06
    3af8:	b7 80       	ldd	r11, Z+7	; 0x07
    3afa:	c0 84       	ldd	r12, Z+8	; 0x08
    3afc:	d1 84       	ldd	r13, Z+9	; 0x09
    3afe:	e2 84       	ldd	r14, Z+10	; 0x0a
    3b00:	f3 84       	ldd	r15, Z+11	; 0x0b
    3b02:	44 84       	ldd	r4, Z+12	; 0x0c
    3b04:	55 84       	ldd	r5, Z+13	; 0x0d
    3b06:	66 84       	ldd	r6, Z+14	; 0x0e
    3b08:	77 84       	ldd	r7, Z+15	; 0x0f
    3b0a:	9b 01       	movw	r18, r22
    3b0c:	ac 01       	movw	r20, r24
    3b0e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3b12:	69 83       	std	Y+1, r22	; 0x01
    3b14:	7a 83       	std	Y+2, r23	; 0x02
    3b16:	8b 83       	std	Y+3, r24	; 0x03
    3b18:	9c 83       	std	Y+4, r25	; 0x04
    3b1a:	a5 01       	movw	r20, r10
    3b1c:	94 01       	movw	r18, r8
    3b1e:	c5 01       	movw	r24, r10
    3b20:	b4 01       	movw	r22, r8
    3b22:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3b26:	9b 01       	movw	r18, r22
    3b28:	ac 01       	movw	r20, r24
    3b2a:	69 81       	ldd	r22, Y+1	; 0x01
    3b2c:	7a 81       	ldd	r23, Y+2	; 0x02
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	9c 81       	ldd	r25, Y+4	; 0x04
    3b32:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3b36:	4b 01       	movw	r8, r22
    3b38:	5c 01       	movw	r10, r24
    3b3a:	a7 01       	movw	r20, r14
    3b3c:	96 01       	movw	r18, r12
    3b3e:	c7 01       	movw	r24, r14
    3b40:	b6 01       	movw	r22, r12
    3b42:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3b46:	9b 01       	movw	r18, r22
    3b48:	ac 01       	movw	r20, r24
    3b4a:	c5 01       	movw	r24, r10
    3b4c:	b4 01       	movw	r22, r8
    3b4e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3b52:	6b 01       	movw	r12, r22
    3b54:	7c 01       	movw	r14, r24
    3b56:	a3 01       	movw	r20, r6
    3b58:	92 01       	movw	r18, r4
    3b5a:	c3 01       	movw	r24, r6
    3b5c:	b2 01       	movw	r22, r4
    3b5e:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3b62:	9b 01       	movw	r18, r22
    3b64:	ac 01       	movw	r20, r24
    3b66:	c7 01       	movw	r24, r14
    3b68:	b6 01       	movw	r22, r12
    3b6a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3b6e:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	ff 90       	pop	r15
    3b80:	ef 90       	pop	r14
    3b82:	df 90       	pop	r13
    3b84:	cf 90       	pop	r12
    3b86:	bf 90       	pop	r11
    3b88:	af 90       	pop	r10
    3b8a:	9f 90       	pop	r9
    3b8c:	8f 90       	pop	r8
    3b8e:	7f 90       	pop	r7
    3b90:	6f 90       	pop	r6
    3b92:	5f 90       	pop	r5
    3b94:	4f 90       	pop	r4
    3b96:	08 95       	ret

00003b98 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	ec 01       	movw	r28, r24
    3baa:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3bac:	fb 01       	movw	r30, r22
    3bae:	20 81       	ld	r18, Z
    3bb0:	31 81       	ldd	r19, Z+1	; 0x01
    3bb2:	42 81       	ldd	r20, Z+2	; 0x02
    3bb4:	53 81       	ldd	r21, Z+3	; 0x03
    3bb6:	68 81       	ld	r22, Y
    3bb8:	79 81       	ldd	r23, Y+1	; 0x01
    3bba:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3bc2:	6b 01       	movw	r12, r22
    3bc4:	7c 01       	movw	r14, r24
    3bc6:	f8 01       	movw	r30, r16
    3bc8:	24 81       	ldd	r18, Z+4	; 0x04
    3bca:	35 81       	ldd	r19, Z+5	; 0x05
    3bcc:	46 81       	ldd	r20, Z+6	; 0x06
    3bce:	57 81       	ldd	r21, Z+7	; 0x07
    3bd0:	6c 81       	ldd	r22, Y+4	; 0x04
    3bd2:	7d 81       	ldd	r23, Y+5	; 0x05
    3bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3bd8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3bdc:	9b 01       	movw	r18, r22
    3bde:	ac 01       	movw	r20, r24
    3be0:	c7 01       	movw	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3be8:	6b 01       	movw	r12, r22
    3bea:	7c 01       	movw	r14, r24
    3bec:	f8 01       	movw	r30, r16
    3bee:	20 85       	ldd	r18, Z+8	; 0x08
    3bf0:	31 85       	ldd	r19, Z+9	; 0x09
    3bf2:	42 85       	ldd	r20, Z+10	; 0x0a
    3bf4:	53 85       	ldd	r21, Z+11	; 0x0b
    3bf6:	68 85       	ldd	r22, Y+8	; 0x08
    3bf8:	79 85       	ldd	r23, Y+9	; 0x09
    3bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bfe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3c02:	9b 01       	movw	r18, r22
    3c04:	ac 01       	movw	r20, r24
    3c06:	c7 01       	movw	r24, r14
    3c08:	b6 01       	movw	r22, r12
    3c0a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
}
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	08 95       	ret

00003c20 <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3c20:	df 92       	push	r13
    3c22:	ef 92       	push	r14
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	7c 01       	movw	r14, r24
    3c30:	06 2f       	mov	r16, r22
    3c32:	17 2f       	mov	r17, r23
    3c34:	c4 2f       	mov	r28, r20
    3c36:	d5 2f       	mov	r29, r21
  uint8_t i;
  for(i = 0; i < 3; i++)
    3c38:	d1 2c       	mov	r13, r1
    v_res[i] = v_a[i] + v_b[i];
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	61 91       	ld	r22, Z+
    3c3e:	71 91       	ld	r23, Z+
    3c40:	81 91       	ld	r24, Z+
    3c42:	91 91       	ld	r25, Z+
    3c44:	7f 01       	movw	r14, r30
    3c46:	f8 01       	movw	r30, r16
    3c48:	21 91       	ld	r18, Z+
    3c4a:	31 91       	ld	r19, Z+
    3c4c:	41 91       	ld	r20, Z+
    3c4e:	51 91       	ld	r21, Z+
    3c50:	8f 01       	movw	r16, r30
    3c52:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3c56:	69 93       	st	Y+, r22
    3c58:	79 93       	st	Y+, r23
    3c5a:	89 93       	st	Y+, r24
    3c5c:	99 93       	st	Y+, r25
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3c5e:	d3 94       	inc	r13
    3c60:	f3 e0       	ldi	r31, 0x03	; 3
    3c62:	df 12       	cpse	r13, r31
    3c64:	ea cf       	rjmp	.-44     	; 0x3c3a <add_vectors+0x1a>
    v_res[i] = v_a[i] + v_b[i];
}
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	ff 90       	pop	r15
    3c70:	ef 90       	pop	r14
    3c72:	df 90       	pop	r13
    3c74:	08 95       	ret

00003c76 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3c76:	4f 92       	push	r4
    3c78:	5f 92       	push	r5
    3c7a:	6f 92       	push	r6
    3c7c:	7f 92       	push	r7
    3c7e:	8f 92       	push	r8
    3c80:	9f 92       	push	r9
    3c82:	af 92       	push	r10
    3c84:	bf 92       	push	r11
    3c86:	cf 92       	push	r12
    3c88:	df 92       	push	r13
    3c8a:	ef 92       	push	r14
    3c8c:	ff 92       	push	r15
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	4b 01       	movw	r8, r22
    3c98:	5a 01       	movw	r10, r20
    3c9a:	c1 2c       	mov	r12, r1
    3c9c:	d1 2c       	mov	r13, r1
    3c9e:	48 2e       	mov	r4, r24
    3ca0:	59 2e       	mov	r5, r25
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3ca2:	61 2c       	mov	r6, r1
    3ca4:	75 01       	movw	r14, r10
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3ca6:	f5 01       	movw	r30, r10
    3ca8:	10 82       	st	Z, r1
    3caa:	11 82       	std	Z+1, r1	; 0x01
    3cac:	12 82       	std	Z+2, r1	; 0x02
    3cae:	13 82       	std	Z+3, r1	; 0x03
    3cb0:	04 2d       	mov	r16, r4
    3cb2:	15 2d       	mov	r17, r5
    3cb4:	e4 01       	movw	r28, r8
    3cb6:	cc 0d       	add	r28, r12
    3cb8:	dd 1d       	adc	r29, r13
    for(j = 0; j < 3; j++)
    3cba:	76 2c       	mov	r7, r6
      v_res[i] += v[j] * m[j][i];
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	61 91       	ld	r22, Z+
    3cc0:	71 91       	ld	r23, Z+
    3cc2:	81 91       	ld	r24, Z+
    3cc4:	91 91       	ld	r25, Z+
    3cc6:	8f 01       	movw	r16, r30
    3cc8:	28 81       	ld	r18, Y
    3cca:	39 81       	ldd	r19, Y+1	; 0x01
    3ccc:	4a 81       	ldd	r20, Y+2	; 0x02
    3cce:	5b 81       	ldd	r21, Y+3	; 0x03
    3cd0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3cd4:	9b 01       	movw	r18, r22
    3cd6:	ac 01       	movw	r20, r24
    3cd8:	f7 01       	movw	r30, r14
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    3ce6:	f7 01       	movw	r30, r14
    3ce8:	60 83       	st	Z, r22
    3cea:	71 83       	std	Z+1, r23	; 0x01
    3cec:	82 83       	std	Z+2, r24	; 0x02
    3cee:	93 83       	std	Z+3, r25	; 0x03
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3cf0:	73 94       	inc	r7
    3cf2:	2c 96       	adiw	r28, 0x0c	; 12
    3cf4:	f3 e0       	ldi	r31, 0x03	; 3
    3cf6:	7f 12       	cpse	r7, r31
    3cf8:	e1 cf       	rjmp	.-62     	; 0x3cbc <vector_into_matrix+0x46>
    3cfa:	84 e0       	ldi	r24, 0x04	; 4
    3cfc:	a8 0e       	add	r10, r24
    3cfe:	b1 1c       	adc	r11, r1
    3d00:	e4 e0       	ldi	r30, 0x04	; 4
    3d02:	ce 0e       	add	r12, r30
    3d04:	d1 1c       	adc	r13, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3d06:	fc e0       	ldi	r31, 0x0C	; 12
    3d08:	cf 16       	cp	r12, r31
    3d0a:	d1 04       	cpc	r13, r1
    3d0c:	59 f6       	brne	.-106    	; 0x3ca4 <vector_into_matrix+0x2e>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3d0e:	df 91       	pop	r29
    3d10:	cf 91       	pop	r28
    3d12:	1f 91       	pop	r17
    3d14:	0f 91       	pop	r16
    3d16:	ff 90       	pop	r15
    3d18:	ef 90       	pop	r14
    3d1a:	df 90       	pop	r13
    3d1c:	cf 90       	pop	r12
    3d1e:	bf 90       	pop	r11
    3d20:	af 90       	pop	r10
    3d22:	9f 90       	pop	r9
    3d24:	8f 90       	pop	r8
    3d26:	7f 90       	pop	r7
    3d28:	6f 90       	pop	r6
    3d2a:	5f 90       	pop	r5
    3d2c:	4f 90       	pop	r4
    3d2e:	08 95       	ret

00003d30 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3d30:	af 92       	push	r10
    3d32:	bf 92       	push	r11
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ef 92       	push	r14
    3d3a:	ff 92       	push	r15
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	ec 01       	movw	r28, r24
    3d46:	8b 01       	movw	r16, r22
    3d48:	5a 01       	movw	r10, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3d4a:	fb 01       	movw	r30, r22
    3d4c:	20 85       	ldd	r18, Z+8	; 0x08
    3d4e:	31 85       	ldd	r19, Z+9	; 0x09
    3d50:	42 85       	ldd	r20, Z+10	; 0x0a
    3d52:	53 85       	ldd	r21, Z+11	; 0x0b
    3d54:	6c 81       	ldd	r22, Y+4	; 0x04
    3d56:	7d 81       	ldd	r23, Y+5	; 0x05
    3d58:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d5c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3d60:	6b 01       	movw	r12, r22
    3d62:	7c 01       	movw	r14, r24
    3d64:	f8 01       	movw	r30, r16
    3d66:	24 81       	ldd	r18, Z+4	; 0x04
    3d68:	35 81       	ldd	r19, Z+5	; 0x05
    3d6a:	46 81       	ldd	r20, Z+6	; 0x06
    3d6c:	57 81       	ldd	r21, Z+7	; 0x07
    3d6e:	68 85       	ldd	r22, Y+8	; 0x08
    3d70:	79 85       	ldd	r23, Y+9	; 0x09
    3d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d76:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3d7a:	9b 01       	movw	r18, r22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	c7 01       	movw	r24, r14
    3d80:	b6 01       	movw	r22, r12
    3d82:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3d86:	f5 01       	movw	r30, r10
    3d88:	60 83       	st	Z, r22
    3d8a:	71 83       	std	Z+1, r23	; 0x01
    3d8c:	82 83       	std	Z+2, r24	; 0x02
    3d8e:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3d90:	f8 01       	movw	r30, r16
    3d92:	20 81       	ld	r18, Z
    3d94:	31 81       	ldd	r19, Z+1	; 0x01
    3d96:	42 81       	ldd	r20, Z+2	; 0x02
    3d98:	53 81       	ldd	r21, Z+3	; 0x03
    3d9a:	68 85       	ldd	r22, Y+8	; 0x08
    3d9c:	79 85       	ldd	r23, Y+9	; 0x09
    3d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3da2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3da6:	6b 01       	movw	r12, r22
    3da8:	7c 01       	movw	r14, r24
    3daa:	f8 01       	movw	r30, r16
    3dac:	20 85       	ldd	r18, Z+8	; 0x08
    3dae:	31 85       	ldd	r19, Z+9	; 0x09
    3db0:	42 85       	ldd	r20, Z+10	; 0x0a
    3db2:	53 85       	ldd	r21, Z+11	; 0x0b
    3db4:	68 81       	ld	r22, Y
    3db6:	79 81       	ldd	r23, Y+1	; 0x01
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3dc0:	9b 01       	movw	r18, r22
    3dc2:	ac 01       	movw	r20, r24
    3dc4:	c7 01       	movw	r24, r14
    3dc6:	b6 01       	movw	r22, r12
    3dc8:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3dcc:	f5 01       	movw	r30, r10
    3dce:	64 83       	std	Z+4, r22	; 0x04
    3dd0:	75 83       	std	Z+5, r23	; 0x05
    3dd2:	86 83       	std	Z+6, r24	; 0x06
    3dd4:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	24 81       	ldd	r18, Z+4	; 0x04
    3dda:	35 81       	ldd	r19, Z+5	; 0x05
    3ddc:	46 81       	ldd	r20, Z+6	; 0x06
    3dde:	57 81       	ldd	r21, Z+7	; 0x07
    3de0:	68 81       	ld	r22, Y
    3de2:	79 81       	ldd	r23, Y+1	; 0x01
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	9b 81       	ldd	r25, Y+3	; 0x03
    3de8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3dec:	6b 01       	movw	r12, r22
    3dee:	7c 01       	movw	r14, r24
    3df0:	f8 01       	movw	r30, r16
    3df2:	20 81       	ld	r18, Z
    3df4:	31 81       	ldd	r19, Z+1	; 0x01
    3df6:	42 81       	ldd	r20, Z+2	; 0x02
    3df8:	53 81       	ldd	r21, Z+3	; 0x03
    3dfa:	6c 81       	ldd	r22, Y+4	; 0x04
    3dfc:	7d 81       	ldd	r23, Y+5	; 0x05
    3dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    3e00:	9f 81       	ldd	r25, Y+7	; 0x07
    3e02:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e06:	9b 01       	movw	r18, r22
    3e08:	ac 01       	movw	r20, r24
    3e0a:	c7 01       	movw	r24, r14
    3e0c:	b6 01       	movw	r22, r12
    3e0e:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    3e12:	f5 01       	movw	r30, r10
    3e14:	60 87       	std	Z+8, r22	; 0x08
    3e16:	71 87       	std	Z+9, r23	; 0x09
    3e18:	82 87       	std	Z+10, r24	; 0x0a
    3e1a:	93 87       	std	Z+11, r25	; 0x0b
}
    3e1c:	df 91       	pop	r29
    3e1e:	cf 91       	pop	r28
    3e20:	1f 91       	pop	r17
    3e22:	0f 91       	pop	r16
    3e24:	ff 90       	pop	r15
    3e26:	ef 90       	pop	r14
    3e28:	df 90       	pop	r13
    3e2a:	cf 90       	pop	r12
    3e2c:	bf 90       	pop	r11
    3e2e:	af 90       	pop	r10
    3e30:	08 95       	ret

00003e32 <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	ec 01       	movw	r28, r24
    3e40:	6a 01       	movw	r12, r20
    3e42:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3e44:	9a 01       	movw	r18, r20
    3e46:	ab 01       	movw	r20, r22
    3e48:	68 81       	ld	r22, Y
    3e4a:	79 81       	ldd	r23, Y+1	; 0x01
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e50:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e54:	68 83       	st	Y, r22
    3e56:	79 83       	std	Y+1, r23	; 0x01
    3e58:	8a 83       	std	Y+2, r24	; 0x02
    3e5a:	9b 83       	std	Y+3, r25	; 0x03
    3e5c:	a7 01       	movw	r20, r14
    3e5e:	96 01       	movw	r18, r12
    3e60:	6c 81       	ldd	r22, Y+4	; 0x04
    3e62:	7d 81       	ldd	r23, Y+5	; 0x05
    3e64:	8e 81       	ldd	r24, Y+6	; 0x06
    3e66:	9f 81       	ldd	r25, Y+7	; 0x07
    3e68:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e6c:	6c 83       	std	Y+4, r22	; 0x04
    3e6e:	7d 83       	std	Y+5, r23	; 0x05
    3e70:	8e 83       	std	Y+6, r24	; 0x06
    3e72:	9f 83       	std	Y+7, r25	; 0x07
    3e74:	a7 01       	movw	r20, r14
    3e76:	96 01       	movw	r18, r12
    3e78:	68 85       	ldd	r22, Y+8	; 0x08
    3e7a:	79 85       	ldd	r23, Y+9	; 0x09
    3e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e80:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3e84:	68 87       	std	Y+8, r22	; 0x08
    3e86:	79 87       	std	Y+9, r23	; 0x09
    3e88:	8a 87       	std	Y+10, r24	; 0x0a
    3e8a:	9b 87       	std	Y+11, r25	; 0x0b
}
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	df 90       	pop	r13
    3e96:	cf 90       	pop	r12
    3e98:	08 95       	ret

00003e9a <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    3e9a:	cf 92       	push	r12
    3e9c:	df 92       	push	r13
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	6a 01       	movw	r12, r20
    3eaa:	7b 01       	movw	r14, r22
    3eac:	ec 01       	movw	r28, r24
  uint8_t i;
  for(i = 0; i < 4; i++)
    3eae:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] * s;
    3eb0:	a7 01       	movw	r20, r14
    3eb2:	96 01       	movw	r18, r12
    3eb4:	68 81       	ld	r22, Y
    3eb6:	79 81       	ldd	r23, Y+1	; 0x01
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    3ec0:	69 93       	st	Y+, r22
    3ec2:	79 93       	st	Y+, r23
    3ec4:	89 93       	st	Y+, r24
    3ec6:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3ec8:	1f 5f       	subi	r17, 0xFF	; 255
    3eca:	14 30       	cpi	r17, 0x04	; 4
    3ecc:	89 f7       	brne	.-30     	; 0x3eb0 <scalar_into_quaternion+0x16>
    q[i] = q[i] * s;
}
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	1f 91       	pop	r17
    3ed4:	ff 90       	pop	r15
    3ed6:	ef 90       	pop	r14
    3ed8:	df 90       	pop	r13
    3eda:	cf 90       	pop	r12
    3edc:	08 95       	ret

00003ede <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    3eec:	a3 dd       	rcall	.-1210   	; 0x3a34 <vector_norm>
    3eee:	6b 01       	movw	r12, r22
    3ef0:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    3ef2:	9b 01       	movw	r18, r22
    3ef4:	ac 01       	movw	r20, r24
    3ef6:	68 81       	ld	r22, Y
    3ef8:	79 81       	ldd	r23, Y+1	; 0x01
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	9b 81       	ldd	r25, Y+3	; 0x03
    3efe:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3f02:	68 83       	st	Y, r22
    3f04:	79 83       	std	Y+1, r23	; 0x01
    3f06:	8a 83       	std	Y+2, r24	; 0x02
    3f08:	9b 83       	std	Y+3, r25	; 0x03
    3f0a:	a7 01       	movw	r20, r14
    3f0c:	96 01       	movw	r18, r12
    3f0e:	6c 81       	ldd	r22, Y+4	; 0x04
    3f10:	7d 81       	ldd	r23, Y+5	; 0x05
    3f12:	8e 81       	ldd	r24, Y+6	; 0x06
    3f14:	9f 81       	ldd	r25, Y+7	; 0x07
    3f16:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3f1a:	6c 83       	std	Y+4, r22	; 0x04
    3f1c:	7d 83       	std	Y+5, r23	; 0x05
    3f1e:	8e 83       	std	Y+6, r24	; 0x06
    3f20:	9f 83       	std	Y+7, r25	; 0x07
    3f22:	a7 01       	movw	r20, r14
    3f24:	96 01       	movw	r18, r12
    3f26:	68 85       	ldd	r22, Y+8	; 0x08
    3f28:	79 85       	ldd	r23, Y+9	; 0x09
    3f2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f2e:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3f32:	68 87       	std	Y+8, r22	; 0x08
    3f34:	79 87       	std	Y+9, r23	; 0x09
    3f36:	8a 87       	std	Y+10, r24	; 0x0a
    3f38:	9b 87       	std	Y+11, r25	; 0x0b
}
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	ff 90       	pop	r15
    3f40:	ef 90       	pop	r14
    3f42:	df 90       	pop	r13
    3f44:	cf 90       	pop	r12
    3f46:	08 95       	ret

00003f48 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    3f48:	cf 92       	push	r12
    3f4a:	df 92       	push	r13
    3f4c:	ef 92       	push	r14
    3f4e:	ff 92       	push	r15
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	cf 93       	push	r28
    3f56:	df 93       	push	r29
    3f58:	08 2f       	mov	r16, r24
    3f5a:	19 2f       	mov	r17, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    3f5c:	b3 dd       	rcall	.-1178   	; 0x3ac4 <quaternion_norm>
    3f5e:	6b 01       	movw	r12, r22
    3f60:	7c 01       	movw	r14, r24
    3f62:	c0 2f       	mov	r28, r16
    3f64:	d1 2f       	mov	r29, r17
  
  for(i = 0; i < 4; i++)
    3f66:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] / norm;
    3f68:	a7 01       	movw	r20, r14
    3f6a:	96 01       	movw	r18, r12
    3f6c:	68 81       	ld	r22, Y
    3f6e:	79 81       	ldd	r23, Y+1	; 0x01
    3f70:	8a 81       	ldd	r24, Y+2	; 0x02
    3f72:	9b 81       	ldd	r25, Y+3	; 0x03
    3f74:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    3f78:	69 93       	st	Y+, r22
    3f7a:	79 93       	st	Y+, r23
    3f7c:	89 93       	st	Y+, r24
    3f7e:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    3f80:	1f 5f       	subi	r17, 0xFF	; 255
    3f82:	14 30       	cpi	r17, 0x04	; 4
    3f84:	89 f7       	brne	.-30     	; 0x3f68 <convert_unit_quaternion+0x20>
    q[i] = q[i] / norm;
}
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	1f 91       	pop	r17
    3f8c:	0f 91       	pop	r16
    3f8e:	ff 90       	pop	r15
    3f90:	ef 90       	pop	r14
    3f92:	df 90       	pop	r13
    3f94:	cf 90       	pop	r12
    3f96:	08 95       	ret

00003f98 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    3f98:	57 9a       	sbi	0x0a, 7	; 10
    3f9a:	08 95       	ret

00003f9c <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS();// make this poll_ss()
    3f9c:	0c 94 28 2b 	jmp	0x5650	; 0x5650 <poll_SS>
    3fa0:	08 95       	ret

00003fa2 <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM(); //for uart 0
    3fa2:	15 cd       	rjmp	.-1494   	; 0x39ce <poll_MM>
    3fa4:	08 95       	ret

00003fa6 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    3fa6:	84 b3       	in	r24, 0x14	; 20
    3fa8:	88 63       	ori	r24, 0x38	; 56
    3faa:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    3fac:	82 b1       	in	r24, 0x02	; 2
    3fae:	88 63       	ori	r24, 0x38	; 56
    3fb0:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    3fb2:	ab e8       	ldi	r26, 0x8B	; 139
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	1c 92       	st	X, r1
  TCCR3B = 0;
    3fb8:	ea e8       	ldi	r30, 0x8A	; 138
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	10 82       	st	Z, r1
  TCCR3C = 0;
    3fbe:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    3fc2:	8c 91       	ld	r24, X
    3fc4:	8a 6a       	ori	r24, 0xAA	; 170
    3fc6:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    3fc8:	80 81       	ld	r24, Z
    3fca:	81 61       	ori	r24, 0x11	; 17
    3fcc:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	9f ef       	ldi	r25, 0xFF	; 255
    3fd2:	90 93 81 00 	sts	0x0081, r25
    3fd6:	80 93 80 00 	sts	0x0080, r24
  OCR3A = 0x0000;
    3fda:	10 92 87 00 	sts	0x0087, r1
    3fde:	10 92 86 00 	sts	0x0086, r1
  OCR3B = 0x0000;
    3fe2:	10 92 85 00 	sts	0x0085, r1
    3fe6:	10 92 84 00 	sts	0x0084, r1
  OCR3C = 0x0000;
    3fea:	10 92 83 00 	sts	0x0083, r1
    3fee:	10 92 82 00 	sts	0x0082, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    3ff2:	85 b3       	in	r24, 0x15	; 21
    3ff4:	87 7c       	andi	r24, 0xC7	; 199
    3ff6:	85 bb       	out	0x15, r24	; 21
    3ff8:	08 95       	ret

00003ffa <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    3ffa:	85 b3       	in	r24, 0x15	; 21
    3ffc:	87 7c       	andi	r24, 0xC7	; 199
    3ffe:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    4000:	80 91 29 05 	lds	r24, 0x0529
    4004:	88 23       	and	r24, r24
    4006:	11 f0       	breq	.+4      	; 0x400c <set_PWM+0x12>
   PORTC |= _BV(PC5);
    4008:	ad 9a       	sbi	0x15, 5	; 21
    400a:	01 c0       	rjmp	.+2      	; 0x400e <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    400c:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    400e:	80 91 2a 05 	lds	r24, 0x052A
    4012:	88 23       	and	r24, r24
    4014:	11 f0       	breq	.+4      	; 0x401a <set_PWM+0x20>
   PORTC |= _BV(PC4);
    4016:	ac 9a       	sbi	0x15, 4	; 21
    4018:	01 c0       	rjmp	.+2      	; 0x401c <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    401a:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    401c:	80 91 2b 05 	lds	r24, 0x052B
    4020:	88 23       	and	r24, r24
    4022:	11 f0       	breq	.+4      	; 0x4028 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    4024:	ab 9a       	sbi	0x15, 3	; 21
    4026:	01 c0       	rjmp	.+2      	; 0x402a <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    4028:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    402a:	80 91 23 05 	lds	r24, 0x0523
    402e:	90 91 24 05 	lds	r25, 0x0524
    4032:	90 93 87 00 	sts	0x0087, r25
    4036:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
    403a:	80 91 25 05 	lds	r24, 0x0525
    403e:	90 91 26 05 	lds	r25, 0x0526
    4042:	90 93 85 00 	sts	0x0085, r25
    4046:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
    404a:	80 91 27 05 	lds	r24, 0x0527
    404e:	90 91 28 05 	lds	r25, 0x0528
    4052:	90 93 83 00 	sts	0x0083, r25
    4056:	80 93 82 00 	sts	0x0082, r24
    405a:	08 95       	ret

0000405c <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    405c:	10 92 24 05 	sts	0x0524, r1
    4060:	10 92 23 05 	sts	0x0523, r1
  Current_state.pwm.y = 0;
    4064:	10 92 26 05 	sts	0x0526, r1
    4068:	10 92 25 05 	sts	0x0525, r1
  Current_state.pwm.z = 0;
    406c:	10 92 28 05 	sts	0x0528, r1
    4070:	10 92 27 05 	sts	0x0527, r1
  Current_state.pwm.x_dir = 0;
    4074:	10 92 29 05 	sts	0x0529, r1
  Current_state.pwm.y_dir = 0;
    4078:	10 92 2a 05 	sts	0x052A, r1
  Current_state.pwm.z_dir = 0;
    407c:	10 92 2b 05 	sts	0x052B, r1
  set_PWM();
    4080:	bc cf       	rjmp	.-136    	; 0x3ffa <set_PWM>
    4082:	08 95       	ret

00004084 <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    4090:	10 92 eb 04 	sts	0x04EB, r1
    4094:	10 92 ea 04 	sts	0x04EA, r1
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    4098:	60 91 bb 04 	lds	r22, 0x04BB
    409c:	70 91 bc 04 	lds	r23, 0x04BC
    40a0:	80 91 bd 04 	lds	r24, 0x04BD
    40a4:	90 91 be 04 	lds	r25, 0x04BE
    40a8:	0f 2e       	mov	r0, r31
    40aa:	f8 e2       	ldi	r31, 0x28	; 40
    40ac:	ef 2e       	mov	r14, r31
    40ae:	f4 e0       	ldi	r31, 0x04	; 4
    40b0:	ff 2e       	mov	r15, r31
    40b2:	f0 2d       	mov	r31, r0
    40b4:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	48 ec       	ldi	r20, 0xC8	; 200
    40be:	52 e4       	ldi	r21, 0x42	; 66
    40c0:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    40c4:	f7 01       	movw	r30, r14
    40c6:	60 83       	st	Z, r22
    40c8:	71 83       	std	Z+1, r23	; 0x01
    40ca:	82 83       	std	Z+2, r24	; 0x02
    40cc:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    40ce:	60 91 bf 04 	lds	r22, 0x04BF
    40d2:	70 91 c0 04 	lds	r23, 0x04C0
    40d6:	80 91 c1 04 	lds	r24, 0x04C1
    40da:	90 91 c2 04 	lds	r25, 0x04C2
    40de:	0c e2       	ldi	r16, 0x2C	; 44
    40e0:	14 e0       	ldi	r17, 0x04	; 4
    40e2:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	48 ec       	ldi	r20, 0xC8	; 200
    40ec:	52 e4       	ldi	r21, 0x42	; 66
    40ee:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    40f2:	f8 01       	movw	r30, r16
    40f4:	60 83       	st	Z, r22
    40f6:	71 83       	std	Z+1, r23	; 0x01
    40f8:	82 83       	std	Z+2, r24	; 0x02
    40fa:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    40fc:	60 91 c3 04 	lds	r22, 0x04C3
    4100:	70 91 c4 04 	lds	r23, 0x04C4
    4104:	80 91 c5 04 	lds	r24, 0x04C5
    4108:	90 91 c6 04 	lds	r25, 0x04C6
    410c:	c0 e3       	ldi	r28, 0x30	; 48
    410e:	d4 e0       	ldi	r29, 0x04	; 4
    4110:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	48 ec       	ldi	r20, 0xC8	; 200
    411a:	52 e4       	ldi	r21, 0x42	; 66
    411c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4120:	68 83       	st	Y, r22
    4122:	79 83       	std	Y+1, r23	; 0x01
    4124:	8a 83       	std	Y+2, r24	; 0x02
    4126:	9b 83       	std	Y+3, r25	; 0x03
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    4128:	60 91 c7 04 	lds	r22, 0x04C7
    412c:	70 91 c8 04 	lds	r23, 0x04C8
    4130:	80 91 c9 04 	lds	r24, 0x04C9
    4134:	90 91 ca 04 	lds	r25, 0x04CA
    4138:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	4a e7       	ldi	r20, 0x7A	; 122
    4142:	54 e4       	ldi	r21, 0x44	; 68
    4144:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4148:	60 93 1c 04 	sts	0x041C, r22
    414c:	70 93 1d 04 	sts	0x041D, r23
    4150:	80 93 1e 04 	sts	0x041E, r24
    4154:	90 93 1f 04 	sts	0x041F, r25
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    4158:	60 91 cb 04 	lds	r22, 0x04CB
    415c:	70 91 cc 04 	lds	r23, 0x04CC
    4160:	80 91 cd 04 	lds	r24, 0x04CD
    4164:	90 91 ce 04 	lds	r25, 0x04CE
    4168:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	4a e7       	ldi	r20, 0x7A	; 122
    4172:	54 e4       	ldi	r21, 0x44	; 68
    4174:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4178:	60 93 20 04 	sts	0x0420, r22
    417c:	70 93 21 04 	sts	0x0421, r23
    4180:	80 93 22 04 	sts	0x0422, r24
    4184:	90 93 23 04 	sts	0x0423, r25
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    4188:	60 91 cf 04 	lds	r22, 0x04CF
    418c:	70 91 d0 04 	lds	r23, 0x04D0
    4190:	80 91 d1 04 	lds	r24, 0x04D1
    4194:	90 91 d2 04 	lds	r25, 0x04D2
    4198:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	4a e7       	ldi	r20, 0x7A	; 122
    41a2:	54 e4       	ldi	r21, 0x44	; 68
    41a4:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    41a8:	60 93 24 04 	sts	0x0424, r22
    41ac:	70 93 25 04 	sts	0x0425, r23
    41b0:	80 93 26 04 	sts	0x0426, r24
    41b4:	90 93 27 04 	sts	0x0427, r25
   
  get_seconds_since_equinox();//check
    41b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    41bc:	f7 01       	movw	r30, r14
    41be:	80 81       	ld	r24, Z
    41c0:	91 81       	ldd	r25, Z+1	; 0x01
    41c2:	a2 81       	ldd	r26, Z+2	; 0x02
    41c4:	b3 81       	ldd	r27, Z+3	; 0x03
    41c6:	80 93 44 04 	sts	0x0444, r24
    41ca:	90 93 45 04 	sts	0x0445, r25
    41ce:	a0 93 46 04 	sts	0x0446, r26
    41d2:	b0 93 47 04 	sts	0x0447, r27
  r_ecef_ash[1] = v_r_ecef[1];
    41d6:	f8 01       	movw	r30, r16
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	a2 81       	ldd	r26, Z+2	; 0x02
    41de:	b3 81       	ldd	r27, Z+3	; 0x03
    41e0:	80 93 48 04 	sts	0x0448, r24
    41e4:	90 93 49 04 	sts	0x0449, r25
    41e8:	a0 93 4a 04 	sts	0x044A, r26
    41ec:	b0 93 4b 04 	sts	0x044B, r27
  r_ecef_ash[2] = v_r_ecef[2];
    41f0:	88 81       	ld	r24, Y
    41f2:	99 81       	ldd	r25, Y+1	; 0x01
    41f4:	aa 81       	ldd	r26, Y+2	; 0x02
    41f6:	bb 81       	ldd	r27, Y+3	; 0x03
    41f8:	80 93 4c 04 	sts	0x044C, r24
    41fc:	90 93 4d 04 	sts	0x044D, r25
    4200:	a0 93 4e 04 	sts	0x044E, r26
    4204:	b0 93 4f 04 	sts	0x044F, r27
  ecef2eci(v_r_ecef, v_r);
    4208:	60 e5       	ldi	r22, 0x50	; 80
    420a:	74 e0       	ldi	r23, 0x04	; 4
    420c:	c7 01       	movw	r24, r14
    420e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    4212:	68 e3       	ldi	r22, 0x38	; 56
    4214:	74 e0       	ldi	r23, 0x04	; 4
    4216:	8c e1       	ldi	r24, 0x1C	; 28
    4218:	94 e0       	ldi	r25, 0x04	; 4
    421a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    421e:	60 91 d3 04 	lds	r22, 0x04D3
    4222:	70 91 d4 04 	lds	r23, 0x04D4
    4226:	80 91 d5 04 	lds	r24, 0x04D5
    422a:	90 91 d6 04 	lds	r25, 0x04D6
    422e:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    4232:	20 e8       	ldi	r18, 0x80	; 128
    4234:	36 e9       	ldi	r19, 0x96	; 150
    4236:	48 e1       	ldi	r20, 0x18	; 24
    4238:	5b e4       	ldi	r21, 0x4B	; 75
    423a:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    423e:	25 e3       	ldi	r18, 0x35	; 53
    4240:	3a ef       	ldi	r19, 0xFA	; 250
    4242:	4e e8       	ldi	r20, 0x8E	; 142
    4244:	5c e3       	ldi	r21, 0x3C	; 60
    4246:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    424a:	60 93 af 04 	sts	0x04AF, r22
    424e:	70 93 b0 04 	sts	0x04B0, r23
    4252:	80 93 b1 04 	sts	0x04B1, r24
    4256:	90 93 b2 04 	sts	0x04B2, r25
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    425a:	60 91 d7 04 	lds	r22, 0x04D7
    425e:	70 91 d8 04 	lds	r23, 0x04D8
    4262:	80 91 d9 04 	lds	r24, 0x04D9
    4266:	90 91 da 04 	lds	r25, 0x04DA
    426a:	0e 94 1b 33 	call	0x6636	; 0x6636 <__floatsisf>
    426e:	20 e8       	ldi	r18, 0x80	; 128
    4270:	36 e9       	ldi	r19, 0x96	; 150
    4272:	48 e1       	ldi	r20, 0x18	; 24
    4274:	5b e4       	ldi	r21, 0x4B	; 75
    4276:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    427a:	25 e3       	ldi	r18, 0x35	; 53
    427c:	3a ef       	ldi	r19, 0xFA	; 250
    427e:	4e e8       	ldi	r20, 0x8E	; 142
    4280:	5c e3       	ldi	r21, 0x3C	; 60
    4282:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4286:	60 93 b3 04 	sts	0x04B3, r22
    428a:	70 93 b4 04 	sts	0x04B4, r23
    428e:	80 93 b5 04 	sts	0x04B5, r24
    4292:	90 93 b6 04 	sts	0x04B6, r25
  
  GPS_done = 0;
    4296:	10 92 23 01 	sts	0x0123, r1
}
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	08 95       	ret

000042a8 <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    42a8:	4f 92       	push	r4
    42aa:	5f 92       	push	r5
    42ac:	6f 92       	push	r6
    42ae:	7f 92       	push	r7
    42b0:	8f 92       	push	r8
    42b2:	9f 92       	push	r9
    42b4:	af 92       	push	r10
    42b6:	bf 92       	push	r11
    42b8:	cf 92       	push	r12
    42ba:	df 92       	push	r13
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	64 97       	sbiw	r28, 0x14	; 20
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	8c 01       	movw	r16, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    42da:	84 e4       	ldi	r24, 0x44	; 68
    42dc:	94 e0       	ldi	r25, 0x04	; 4
    42de:	aa db       	rcall	.-2220   	; 0x3a34 <vector_norm>
    42e0:	2b 01       	movw	r4, r22
    42e2:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    42e4:	9b 01       	movw	r18, r22
    42e6:	ac 01       	movw	r20, r24
    42e8:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    42ec:	9b 01       	movw	r18, r22
    42ee:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    42f0:	61 eb       	ldi	r22, 0xB1	; 177
    42f2:	7a e1       	ldi	r23, 0x1A	; 26
    42f4:	86 e7       	ldi	r24, 0x76	; 118
    42f6:	91 e5       	ldi	r25, 0x51	; 81
    42f8:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    42fc:	6d 87       	std	Y+13, r22	; 0x0d
    42fe:	7e 87       	std	Y+14, r23	; 0x0e
    4300:	8f 87       	std	Y+15, r24	; 0x0f
    4302:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e4       	ldi	r20, 0x40	; 64
    430a:	50 e4       	ldi	r21, 0x40	; 64
    430c:	c3 01       	movw	r24, r6
    430e:	b2 01       	movw	r22, r4
    4310:	0e 94 01 35 	call	0x6a02	; 0x6a02 <pow>
    4314:	6b 01       	movw	r12, r22
    4316:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e8       	ldi	r20, 0x80	; 128
    431e:	50 e4       	ldi	r21, 0x40	; 64
    4320:	c3 01       	movw	r24, r6
    4322:	b2 01       	movw	r22, r4
    4324:	0e 94 01 35 	call	0x6a02	; 0x6a02 <pow>
    4328:	2b 01       	movw	r4, r22
    432a:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    432c:	80 90 4c 04 	lds	r8, 0x044C
    4330:	90 90 4d 04 	lds	r9, 0x044D
    4334:	a0 90 4e 04 	lds	r10, 0x044E
    4338:	b0 90 4f 04 	lds	r11, 0x044F
    433c:	a5 01       	movw	r20, r10
    433e:	94 01       	movw	r18, r8
    4340:	c5 01       	movw	r24, r10
    4342:	b4 01       	movw	r22, r8
    4344:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4348:	28 e9       	ldi	r18, 0x98	; 152
    434a:	38 e0       	ldi	r19, 0x08	; 8
    434c:	45 e0       	ldi	r20, 0x05	; 5
    434e:	5c e3       	ldi	r21, 0x3C	; 60
    4350:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4354:	2a ec       	ldi	r18, 0xCA	; 202
    4356:	3e ef       	ldi	r19, 0xFE	; 254
    4358:	43 e1       	ldi	r20, 0x13	; 19
    435a:	56 e5       	ldi	r21, 0x56	; 86
    435c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4360:	a3 01       	movw	r20, r6
    4362:	92 01       	movw	r18, r4
    4364:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4368:	69 8b       	std	Y+17, r22	; 0x11
    436a:	7a 8b       	std	Y+18, r23	; 0x12
    436c:	8b 8b       	std	Y+19, r24	; 0x13
    436e:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	6d 85       	ldd	r22, Y+13	; 0x0d
    437a:	7e 85       	ldd	r23, Y+14	; 0x0e
    437c:	8f 85       	ldd	r24, Y+15	; 0x0f
    437e:	98 89       	ldd	r25, Y+16	; 0x10
    4380:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4384:	29 89       	ldd	r18, Y+17	; 0x11
    4386:	3a 89       	ldd	r19, Y+18	; 0x12
    4388:	4b 89       	ldd	r20, Y+19	; 0x13
    438a:	5c 89       	ldd	r21, Y+20	; 0x14
    438c:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    4390:	2b 01       	movw	r4, r22
    4392:	3c 01       	movw	r6, r24
    4394:	21 ef       	ldi	r18, 0xF1	; 241
    4396:	39 e4       	ldi	r19, 0x49	; 73
    4398:	45 eb       	ldi	r20, 0xB5	; 181
    439a:	57 ed       	ldi	r21, 0xD7	; 215
    439c:	60 91 44 04 	lds	r22, 0x0444
    43a0:	70 91 45 04 	lds	r23, 0x0445
    43a4:	80 91 46 04 	lds	r24, 0x0446
    43a8:	90 91 47 04 	lds	r25, 0x0447
    43ac:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    43b0:	a3 01       	movw	r20, r6
    43b2:	92 01       	movw	r18, r4
    43b4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    43b8:	a7 01       	movw	r20, r14
    43ba:	96 01       	movw	r18, r12
    43bc:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    43c0:	69 83       	std	Y+1, r22	; 0x01
    43c2:	7a 83       	std	Y+2, r23	; 0x02
    43c4:	8b 83       	std	Y+3, r24	; 0x03
    43c6:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    43c8:	21 ef       	ldi	r18, 0xF1	; 241
    43ca:	39 e4       	ldi	r19, 0x49	; 73
    43cc:	45 eb       	ldi	r20, 0xB5	; 181
    43ce:	57 ed       	ldi	r21, 0xD7	; 215
    43d0:	60 91 48 04 	lds	r22, 0x0448
    43d4:	70 91 49 04 	lds	r23, 0x0449
    43d8:	80 91 4a 04 	lds	r24, 0x044A
    43dc:	90 91 4b 04 	lds	r25, 0x044B
    43e0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    43e4:	9b 01       	movw	r18, r22
    43e6:	ac 01       	movw	r20, r24
    43e8:	c3 01       	movw	r24, r6
    43ea:	b2 01       	movw	r22, r4
    43ec:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    43f0:	a7 01       	movw	r20, r14
    43f2:	96 01       	movw	r18, r12
    43f4:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    43f8:	6d 83       	std	Y+5, r22	; 0x05
    43fa:	7e 83       	std	Y+6, r23	; 0x06
    43fc:	8f 83       	std	Y+7, r24	; 0x07
    43fe:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    4400:	21 ef       	ldi	r18, 0xF1	; 241
    4402:	39 e4       	ldi	r19, 0x49	; 73
    4404:	45 eb       	ldi	r20, 0xB5	; 181
    4406:	57 ed       	ldi	r21, 0xD7	; 215
    4408:	c5 01       	movw	r24, r10
    440a:	b4 01       	movw	r22, r8
    440c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4410:	2b 01       	movw	r4, r22
    4412:	3c 01       	movw	r6, r24
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	40 e4       	ldi	r20, 0x40	; 64
    441a:	50 e4       	ldi	r21, 0x40	; 64
    441c:	6d 85       	ldd	r22, Y+13	; 0x0d
    441e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4420:	8f 85       	ldd	r24, Y+15	; 0x0f
    4422:	98 89       	ldd	r25, Y+16	; 0x10
    4424:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	40 e8       	ldi	r20, 0x80	; 128
    442e:	5f e3       	ldi	r21, 0x3F	; 63
    4430:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4434:	29 89       	ldd	r18, Y+17	; 0x11
    4436:	3a 89       	ldd	r19, Y+18	; 0x12
    4438:	4b 89       	ldd	r20, Y+19	; 0x13
    443a:	5c 89       	ldd	r21, Y+20	; 0x14
    443c:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    4440:	9b 01       	movw	r18, r22
    4442:	ac 01       	movw	r20, r24
    4444:	c3 01       	movw	r24, r6
    4446:	b2 01       	movw	r22, r4
    4448:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    444c:	a7 01       	movw	r20, r14
    444e:	96 01       	movw	r18, r12
    4450:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4454:	69 87       	std	Y+9, r22	; 0x09
    4456:	7a 87       	std	Y+10, r23	; 0x0a
    4458:	8b 87       	std	Y+11, r24	; 0x0b
    445a:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    445c:	b8 01       	movw	r22, r16
    445e:	ce 01       	movw	r24, r28
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    4466:	64 96       	adiw	r28, 0x14	; 20
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	ff 90       	pop	r15
    447c:	ef 90       	pop	r14
    447e:	df 90       	pop	r13
    4480:	cf 90       	pop	r12
    4482:	bf 90       	pop	r11
    4484:	af 90       	pop	r10
    4486:	9f 90       	pop	r9
    4488:	8f 90       	pop	r8
    448a:	7f 90       	pop	r7
    448c:	6f 90       	pop	r6
    448e:	5f 90       	pop	r5
    4490:	4f 90       	pop	r4
    4492:	08 95       	ret

00004494 <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    4494:	4f 92       	push	r4
    4496:	5f 92       	push	r5
    4498:	7f 92       	push	r7
    449a:	8f 92       	push	r8
    449c:	9f 92       	push	r9
    449e:	af 92       	push	r10
    44a0:	bf 92       	push	r11
    44a2:	cf 92       	push	r12
    44a4:	df 92       	push	r13
    44a6:	ef 92       	push	r14
    44a8:	ff 92       	push	r15
    44aa:	0f 93       	push	r16
    44ac:	1f 93       	push	r17
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	cd b7       	in	r28, 0x3d	; 61
    44b4:	de b7       	in	r29, 0x3e	; 62
    44b6:	68 97       	sbiw	r28, 0x18	; 24
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	0f 2e       	mov	r0, r31
    44c4:	fa e0       	ldi	r31, 0x0A	; 10
    44c6:	7f 2e       	mov	r7, r31
    44c8:	f0 2d       	mov	r31, r0
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    44ca:	5e 01       	movw	r10, r28
    44cc:	8d e0       	ldi	r24, 0x0D	; 13
    44ce:	a8 0e       	add	r10, r24
    44d0:	b1 1c       	adc	r11, r1
    44d2:	0f 2e       	mov	r0, r31
    44d4:	f0 e5       	ldi	r31, 0x50	; 80
    44d6:	4f 2e       	mov	r4, r31
    44d8:	f4 e0       	ldi	r31, 0x04	; 4
    44da:	5f 2e       	mov	r5, r31
    44dc:	f0 2d       	mov	r31, r0
    44de:	0f 2e       	mov	r0, r31
    44e0:	f4 e4       	ldi	r31, 0x44	; 68
    44e2:	cf 2e       	mov	r12, r31
    44e4:	f4 e0       	ldi	r31, 0x04	; 4
    44e6:	df 2e       	mov	r13, r31
    44e8:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    44ea:	ce 01       	movw	r24, r28
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	dc de       	rcall	.-584    	; 0x42a8 <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    44f0:	b5 01       	movw	r22, r10
    44f2:	88 e3       	ldi	r24, 0x38	; 56
    44f4:	94 e0       	ldi	r25, 0x04	; 4
    44f6:	6f da       	rcall	.-2850   	; 0x39d6 <copy_vector>
    44f8:	fe 01       	movw	r30, r28
    44fa:	31 96       	adiw	r30, 0x01	; 1
    44fc:	7f 01       	movw	r14, r30
    44fe:	45 01       	movw	r8, r10
    4500:	08 e3       	ldi	r16, 0x38	; 56
    4502:	14 e0       	ldi	r17, 0x04	; 4
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    4504:	f7 01       	movw	r30, r14
    4506:	61 91       	ld	r22, Z+
    4508:	71 91       	ld	r23, Z+
    450a:	81 91       	ld	r24, Z+
    450c:	91 91       	ld	r25, Z+
    450e:	7f 01       	movw	r14, r30
    4510:	2d ec       	ldi	r18, 0xCD	; 205
    4512:	3c ec       	ldi	r19, 0xCC	; 204
    4514:	4c e4       	ldi	r20, 0x4C	; 76
    4516:	5e e3       	ldi	r21, 0x3E	; 62
    4518:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    451c:	9b 01       	movw	r18, r22
    451e:	ac 01       	movw	r20, r24
    4520:	f8 01       	movw	r30, r16
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	93 81       	ldd	r25, Z+3	; 0x03
    452a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    452e:	f8 01       	movw	r30, r16
    4530:	61 93       	st	Z+, r22
    4532:	71 93       	st	Z+, r23
    4534:	81 93       	st	Z+, r24
    4536:	91 93       	st	Z+, r25
    4538:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    453a:	e8 14       	cp	r14, r8
    453c:	f9 04       	cpc	r15, r9
    453e:	11 f7       	brne	.-60     	; 0x4504 <sgp_orbit_propagator+0x70>
    4540:	45 01       	movw	r8, r10
    4542:	72 01       	movw	r14, r4
    4544:	08 e3       	ldi	r16, 0x38	; 56
    4546:	14 e0       	ldi	r17, 0x04	; 4
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4548:	f8 01       	movw	r30, r16
    454a:	61 91       	ld	r22, Z+
    454c:	71 91       	ld	r23, Z+
    454e:	81 91       	ld	r24, Z+
    4550:	91 91       	ld	r25, Z+
    4552:	8f 01       	movw	r16, r30
    4554:	f4 01       	movw	r30, r8
    4556:	21 91       	ld	r18, Z+
    4558:	31 91       	ld	r19, Z+
    455a:	41 91       	ld	r20, Z+
    455c:	51 91       	ld	r21, Z+
    455e:	4f 01       	movw	r8, r30
    4560:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	40 e0       	ldi	r20, 0x00	; 0
    456a:	5f e3       	ldi	r21, 0x3F	; 63
    456c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4570:	2d ec       	ldi	r18, 0xCD	; 205
    4572:	3c ec       	ldi	r19, 0xCC	; 204
    4574:	4c e4       	ldi	r20, 0x4C	; 76
    4576:	5e e3       	ldi	r21, 0x3E	; 62
    4578:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    457c:	9b 01       	movw	r18, r22
    457e:	ac 01       	movw	r20, r24
    4580:	f7 01       	movw	r30, r14
    4582:	60 81       	ld	r22, Z
    4584:	71 81       	ldd	r23, Z+1	; 0x01
    4586:	82 81       	ldd	r24, Z+2	; 0x02
    4588:	93 81       	ldd	r25, Z+3	; 0x03
    458a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    458e:	f7 01       	movw	r30, r14
    4590:	61 93       	st	Z+, r22
    4592:	71 93       	st	Z+, r23
    4594:	81 93       	st	Z+, r24
    4596:	91 93       	st	Z+, r25
    4598:	7f 01       	movw	r14, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    459a:	0c 15       	cp	r16, r12
    459c:	1d 05       	cpc	r17, r13
    459e:	a1 f6       	brne	.-88     	; 0x4548 <sgp_orbit_propagator+0xb4>
    45a0:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <sgp_orbit_propagator+0x112>
    45a4:	a2 cf       	rjmp	.-188    	; 0x44ea <sgp_orbit_propagator+0x56>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    45a6:	68 96       	adiw	r28, 0x18	; 24
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	bf 90       	pop	r11
    45c4:	af 90       	pop	r10
    45c6:	9f 90       	pop	r9
    45c8:	8f 90       	pop	r8
    45ca:	7f 90       	pop	r7
    45cc:	5f 90       	pop	r5
    45ce:	4f 90       	pop	r4
    45d0:	08 95       	ret

000045d2 <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    45d2:	4f 92       	push	r4
    45d4:	5f 92       	push	r5
    45d6:	6f 92       	push	r6
    45d8:	7f 92       	push	r7
    45da:	8f 92       	push	r8
    45dc:	9f 92       	push	r9
    45de:	af 92       	push	r10
    45e0:	bf 92       	push	r11
    45e2:	cf 92       	push	r12
    45e4:	df 92       	push	r13
    45e6:	ef 92       	push	r14
    45e8:	ff 92       	push	r15
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	cd b7       	in	r28, 0x3d	; 61
    45f4:	de b7       	in	r29, 0x3e	; 62
    45f6:	2c 97       	sbiw	r28, 0x0c	; 12
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    4604:	20 91 a0 04 	lds	r18, 0x04A0
    4608:	30 91 a1 04 	lds	r19, 0x04A1
    460c:	40 91 a2 04 	lds	r20, 0x04A2
    4610:	50 91 a3 04 	lds	r21, 0x04A3
    4614:	60 91 a4 04 	lds	r22, 0x04A4
    4618:	70 91 a5 04 	lds	r23, 0x04A5
    461c:	80 91 a6 04 	lds	r24, 0x04A6
    4620:	90 91 a7 04 	lds	r25, 0x04A7
    4624:	0e 94 56 33 	call	0x66ac	; 0x66ac <__floatundisf>
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 ec       	ldi	r19, 0xC0	; 192
    462c:	48 ea       	ldi	r20, 0xA8	; 168
    462e:	57 e4       	ldi	r21, 0x47	; 71
    4630:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    4634:	2b ed       	ldi	r18, 0xDB	; 219
    4636:	3f e0       	ldi	r19, 0x0F	; 15
    4638:	49 ec       	ldi	r20, 0xC9	; 201
    463a:	50 e4       	ldi	r21, 0x40	; 64
    463c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4640:	21 ed       	ldi	r18, 0xD1	; 209
    4642:	30 ea       	ldi	r19, 0xA0	; 160
    4644:	46 eb       	ldi	r20, 0xB6	; 182
    4646:	53 e4       	ldi	r21, 0x43	; 67
    4648:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    464c:	4b 01       	movw	r8, r22
    464e:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    4650:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    4654:	20 e9       	ldi	r18, 0x90	; 144
    4656:	3e e2       	ldi	r19, 0x2E	; 46
    4658:	4c ec       	ldi	r20, 0xCC	; 204
    465a:	5e e3       	ldi	r21, 0x3E	; 62
    465c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4660:	0e 94 00 32 	call	0x6400	; 0x6400 <asin>
    4664:	6b 01       	movw	r12, r22
    4666:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    4668:	c5 01       	movw	r24, r10
    466a:	b4 01       	movw	r22, r8
    466c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    4670:	2b 01       	movw	r4, r22
    4672:	3c 01       	movw	r6, r24
    4674:	c7 01       	movw	r24, r14
    4676:	b6 01       	movw	r22, r12
    4678:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    467c:	4b 01       	movw	r8, r22
    467e:	5c 01       	movw	r10, r24
    4680:	9b 01       	movw	r18, r22
    4682:	ac 01       	movw	r20, r24
    4684:	c3 01       	movw	r24, r6
    4686:	b2 01       	movw	r22, r4
    4688:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    468c:	0e 94 8d 31 	call	0x631a	; 0x631a <acos>
    4690:	2b 01       	movw	r4, r22
    4692:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	a9 01       	movw	r20, r18
    469a:	c7 01       	movw	r24, r14
    469c:	b6 01       	movw	r22, r12
    469e:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    46a2:	88 23       	and	r24, r24
    46a4:	54 f4       	brge	.+20     	; 0x46ba <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    46a6:	a3 01       	movw	r20, r6
    46a8:	92 01       	movw	r18, r4
    46aa:	6b ed       	ldi	r22, 0xDB	; 219
    46ac:	7f e0       	ldi	r23, 0x0F	; 15
    46ae:	89 ec       	ldi	r24, 0xC9	; 201
    46b0:	90 e4       	ldi	r25, 0x40	; 64
    46b2:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    46b6:	2b 01       	movw	r4, r22
    46b8:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    46ba:	c3 01       	movw	r24, r6
    46bc:	b2 01       	movw	r22, r4
    46be:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    46c2:	9b 01       	movw	r18, r22
    46c4:	ac 01       	movw	r20, r24
    46c6:	c5 01       	movw	r24, r10
    46c8:	b4 01       	movw	r22, r8
    46ca:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    46ce:	69 83       	std	Y+1, r22	; 0x01
    46d0:	7a 83       	std	Y+2, r23	; 0x02
    46d2:	8b 83       	std	Y+3, r24	; 0x03
    46d4:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    46d6:	c3 01       	movw	r24, r6
    46d8:	b2 01       	movw	r22, r4
    46da:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    46de:	9b 01       	movw	r18, r22
    46e0:	ac 01       	movw	r20, r24
    46e2:	c5 01       	movw	r24, r10
    46e4:	b4 01       	movw	r22, r8
    46e6:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    46ea:	6d 83       	std	Y+5, r22	; 0x05
    46ec:	7e 83       	std	Y+6, r23	; 0x06
    46ee:	8f 83       	std	Y+7, r24	; 0x07
    46f0:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    46f2:	c7 01       	movw	r24, r14
    46f4:	b6 01       	movw	r22, r12
    46f6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <sin>
    46fa:	69 87       	std	Y+9, r22	; 0x09
    46fc:	7a 87       	std	Y+10, r23	; 0x0a
    46fe:	8b 87       	std	Y+11, r24	; 0x0b
    4700:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    4702:	2d ec       	ldi	r18, 0xCD	; 205
    4704:	3c ec       	ldi	r19, 0xCC	; 204
    4706:	4c ec       	ldi	r20, 0xCC	; 204
    4708:	5d e3       	ldi	r21, 0x3D	; 61
    470a:	60 91 34 04 	lds	r22, 0x0434
    470e:	70 91 35 04 	lds	r23, 0x0435
    4712:	80 91 36 04 	lds	r24, 0x0436
    4716:	90 91 37 04 	lds	r25, 0x0437
    471a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    471e:	60 93 34 04 	sts	0x0434, r22
    4722:	70 93 35 04 	sts	0x0435, r23
    4726:	80 93 36 04 	sts	0x0436, r24
    472a:	90 93 37 04 	sts	0x0437, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    472e:	98 01       	movw	r18, r16
    4730:	ae 01       	movw	r20, r28
    4732:	4f 5f       	subi	r20, 0xFF	; 255
    4734:	5f 4f       	sbci	r21, 0xFF	; 255
    4736:	68 e3       	ldi	r22, 0x38	; 56
    4738:	74 e0       	ldi	r23, 0x04	; 4
    473a:	80 e5       	ldi	r24, 0x50	; 80
    473c:	94 e0       	ldi	r25, 0x04	; 4
    473e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    4742:	2c 96       	adiw	r28, 0x0c	; 12
    4744:	0f b6       	in	r0, 0x3f	; 63
    4746:	f8 94       	cli
    4748:	de bf       	out	0x3e, r29	; 62
    474a:	0f be       	out	0x3f, r0	; 63
    474c:	cd bf       	out	0x3d, r28	; 61
    474e:	df 91       	pop	r29
    4750:	cf 91       	pop	r28
    4752:	1f 91       	pop	r17
    4754:	0f 91       	pop	r16
    4756:	ff 90       	pop	r15
    4758:	ef 90       	pop	r14
    475a:	df 90       	pop	r13
    475c:	cf 90       	pop	r12
    475e:	bf 90       	pop	r11
    4760:	af 90       	pop	r10
    4762:	9f 90       	pop	r9
    4764:	8f 90       	pop	r8
    4766:	7f 90       	pop	r7
    4768:	6f 90       	pop	r6
    476a:	5f 90       	pop	r5
    476c:	4f 90       	pop	r4
    476e:	08 95       	ret

00004770 <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    4770:	af 92       	push	r10
    4772:	bf 92       	push	r11
    4774:	cf 92       	push	r12
    4776:	df 92       	push	r13
    4778:	ef 92       	push	r14
    477a:	ff 92       	push	r15
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	e0 97       	sbiw	r28, 0x30	; 48
    478a:	0f b6       	in	r0, 0x3f	; 63
    478c:	f8 94       	cli
    478e:	de bf       	out	0x3e, r29	; 62
    4790:	0f be       	out	0x3f, r0	; 63
    4792:	cd bf       	out	0x3d, r28	; 61
    4794:	5c 01       	movw	r10, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    4796:	20 91 98 04 	lds	r18, 0x0498
    479a:	30 91 99 04 	lds	r19, 0x0499
    479e:	40 91 9a 04 	lds	r20, 0x049A
    47a2:	50 91 9b 04 	lds	r21, 0x049B
    47a6:	60 91 9c 04 	lds	r22, 0x049C
    47aa:	70 91 9d 04 	lds	r23, 0x049D
    47ae:	80 91 9e 04 	lds	r24, 0x049E
    47b2:	90 91 9f 04 	lds	r25, 0x049F
    47b6:	0e 94 56 33 	call	0x66ac	; 0x66ac <__floatundisf>
    47ba:	20 ec       	ldi	r18, 0xC0	; 192
    47bc:	39 e9       	ldi	r19, 0x99	; 153
    47be:	40 ef       	ldi	r20, 0xF0	; 240
    47c0:	5b e4       	ldi	r21, 0x4B	; 75
    47c2:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	4c ef       	ldi	r20, 0xFC	; 252
    47cc:	54 e4       	ldi	r21, 0x44	; 68
    47ce:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    47d2:	6b 01       	movw	r12, r22
    47d4:	7c 01       	movw	r14, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    47d6:	be 01       	movw	r22, r28
    47d8:	6f 5f       	subi	r22, 0xFF	; 255
    47da:	7f 4f       	sbci	r23, 0xFF	; 255
    47dc:	80 e5       	ldi	r24, 0x50	; 80
    47de:	94 e0       	ldi	r25, 0x04	; 4
    47e0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    47e4:	be 01       	movw	r22, r28
    47e6:	63 5f       	subi	r22, 0xF3	; 243
    47e8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ea:	ce 01       	movw	r24, r28
    47ec:	01 96       	adiw	r24, 0x01	; 1
    47ee:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    47f2:	6f ea       	ldi	r22, 0xAF	; 175
    47f4:	74 e0       	ldi	r23, 0x04	; 4
    47f6:	ce 01       	movw	r24, r28
    47f8:	0d 96       	adiw	r24, 0x0d	; 13
    47fa:	ed d8       	rcall	.-3622   	; 0x39d6 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    47fc:	8e 01       	movw	r16, r28
    47fe:	07 5e       	subi	r16, 0xE7	; 231
    4800:	1f 4f       	sbci	r17, 0xFF	; 255
    4802:	28 e0       	ldi	r18, 0x08	; 8
    4804:	b7 01       	movw	r22, r14
    4806:	a6 01       	movw	r20, r12
    4808:	ce 01       	movw	r24, r28
    480a:	0d 96       	adiw	r24, 0x0d	; 13
    480c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    4810:	ae 01       	movw	r20, r28
    4812:	4f 5f       	subi	r20, 0xFF	; 255
    4814:	5f 4f       	sbci	r21, 0xFF	; 255
    4816:	be 01       	movw	r22, r28
    4818:	63 5f       	subi	r22, 0xF3	; 243
    481a:	7f 4f       	sbci	r23, 0xFF	; 255
    481c:	c8 01       	movw	r24, r16
    481e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    4822:	be 01       	movw	r22, r28
    4824:	6b 5d       	subi	r22, 0xDB	; 219
    4826:	7f 4f       	sbci	r23, 0xFF	; 255
    4828:	ce 01       	movw	r24, r28
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    4830:	95 01       	movw	r18, r10
    4832:	ae 01       	movw	r20, r28
    4834:	4b 5d       	subi	r20, 0xDB	; 219
    4836:	5f 4f       	sbci	r21, 0xFF	; 255
    4838:	68 e3       	ldi	r22, 0x38	; 56
    483a:	74 e0       	ldi	r23, 0x04	; 4
    483c:	80 e5       	ldi	r24, 0x50	; 80
    483e:	94 e0       	ldi	r25, 0x04	; 4
    4840:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    4844:	e0 96       	adiw	r28, 0x30	; 48
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	f8 94       	cli
    484a:	de bf       	out	0x3e, r29	; 62
    484c:	0f be       	out	0x3f, r0	; 63
    484e:	cd bf       	out	0x3d, r28	; 61
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	ff 90       	pop	r15
    485a:	ef 90       	pop	r14
    485c:	df 90       	pop	r13
    485e:	cf 90       	pop	r12
    4860:	bf 90       	pop	r11
    4862:	af 90       	pop	r10
    4864:	08 95       	ret

00004866 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	c8 ef       	ldi	r28, 0xF8	; 248
    4872:	d4 e0       	ldi	r29, 0x04	; 4
    4874:	00 e1       	ldi	r16, 0x10	; 16
    4876:	15 e0       	ldi	r17, 0x05	; 5
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    4878:	f1 2c       	mov	r15, r1
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    487a:	69 91       	ld	r22, Y+
    487c:	79 91       	ld	r23, Y+
    487e:	89 91       	ld	r24, Y+
    4880:	99 91       	ld	r25, Y+
    4882:	27 e2       	ldi	r18, 0x27	; 39
    4884:	31 e3       	ldi	r19, 0x31	; 49
    4886:	48 ec       	ldi	r20, 0xC8	; 200
    4888:	5e e3       	ldi	r21, 0x3E	; 62
    488a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    488e:	88 23       	and	r24, r24
    4890:	0c f4       	brge	.+2      	; 0x4894 <light_cal+0x2e>
		  num_dark_sensors++;
    4892:	f3 94       	inc	r15
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    4894:	c0 17       	cp	r28, r16
    4896:	d1 07       	cpc	r29, r17
    4898:	81 f7       	brne	.-32     	; 0x487a <light_cal+0x14>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	96 e0       	ldi	r25, 0x06	; 6
    489e:	f9 12       	cpse	r15, r25
    48a0:	01 c0       	rjmp	.+2      	; 0x48a4 <light_cal+0x3e>
    48a2:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	ff 90       	pop	r15
    48ae:	08 95       	ret

000048b0 <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    48b0:	2f 92       	push	r2
    48b2:	3f 92       	push	r3
    48b4:	4f 92       	push	r4
    48b6:	5f 92       	push	r5
    48b8:	6f 92       	push	r6
    48ba:	7f 92       	push	r7
    48bc:	8f 92       	push	r8
    48be:	9f 92       	push	r9
    48c0:	af 92       	push	r10
    48c2:	bf 92       	push	r11
    48c4:	cf 92       	push	r12
    48c6:	df 92       	push	r13
    48c8:	ef 92       	push	r14
    48ca:	ff 92       	push	r15
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	df 93       	push	r29
    48d4:	cd b7       	in	r28, 0x3d	; 61
    48d6:	de b7       	in	r29, 0x3e	; 62
    48d8:	cb 57       	subi	r28, 0x7B	; 123
    48da:	d1 09       	sbc	r29, r1
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	de bf       	out	0x3e, r29	; 62
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	cd bf       	out	0x3d, r28	; 61
    48e6:	e1 96       	adiw	r28, 0x31	; 49
    48e8:	9f af       	std	Y+63, r25	; 0x3f
    48ea:	8e af       	std	Y+62, r24	; 0x3e
    48ec:	e1 97       	sbiw	r28, 0x31	; 49
    48ee:	1b 01       	movw	r2, r22
    48f0:	e3 96       	adiw	r28, 0x33	; 51
    48f2:	5f af       	std	Y+63, r21	; 0x3f
    48f4:	4e af       	std	Y+62, r20	; 0x3e
    48f6:	e3 97       	sbiw	r28, 0x33	; 51
    48f8:	79 01       	movw	r14, r18
    48fa:	08 ef       	ldi	r16, 0xF8	; 248
    48fc:	14 e0       	ldi	r17, 0x04	; 4
    48fe:	0f 2e       	mov	r0, r31
    4900:	f0 e1       	ldi	r31, 0x10	; 16
    4902:	cf 2e       	mov	r12, r31
    4904:	f5 e0       	ldi	r31, 0x05	; 5
    4906:	df 2e       	mov	r13, r31
    4908:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    490a:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    490c:	f8 01       	movw	r30, r16
    490e:	61 91       	ld	r22, Z+
    4910:	71 91       	ld	r23, Z+
    4912:	81 91       	ld	r24, Z+
    4914:	91 91       	ld	r25, Z+
    4916:	8f 01       	movw	r16, r30
    4918:	27 e2       	ldi	r18, 0x27	; 39
    491a:	31 e3       	ldi	r19, 0x31	; 49
    491c:	48 ec       	ldi	r20, 0xC8	; 200
    491e:	5e e3       	ldi	r21, 0x3E	; 62
    4920:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    4924:	88 23       	and	r24, r24
    4926:	0c f4       	brge	.+2      	; 0x492a <quest+0x7a>
      num_dark_sensors++;
    4928:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    492a:	0c 15       	cp	r16, r12
    492c:	1d 05       	cpc	r17, r13
    492e:	71 f7       	brne	.-36     	; 0x490c <quest+0x5c>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4930:	f1 e0       	ldi	r31, 0x01	; 1
    4932:	e4 96       	adiw	r28, 0x34	; 52
    4934:	ff af       	std	Y+63, r31	; 0x3f
    4936:	e4 97       	sbiw	r28, 0x34	; 52
    4938:	26 e0       	ldi	r18, 0x06	; 6
    493a:	b2 12       	cpse	r11, r18
    493c:	03 c0       	rjmp	.+6      	; 0x4944 <quest+0x94>
    493e:	e4 96       	adiw	r28, 0x34	; 52
    4940:	1f ae       	std	Y+63, r1	; 0x3f
    4942:	e4 97       	sbiw	r28, 0x34	; 52
    light = 0;
  
  if(light)
    4944:	e4 96       	adiw	r28, 0x34	; 52
    4946:	8f ad       	ldd	r24, Y+63	; 0x3f
    4948:	e4 97       	sbiw	r28, 0x34	; 52
    494a:	88 23       	and	r24, r24
    494c:	09 f4       	brne	.+2      	; 0x4950 <quest+0xa0>
    494e:	0e c3       	rjmp	.+1564   	; 0x4f6c <quest+0x6bc>
  {
    if(!*p_w_ctrl)
    4950:	f7 01       	movw	r30, r14
    4952:	80 81       	ld	r24, Z
    4954:	81 11       	cpse	r24, r1
    4956:	0f c0       	rjmp	.+30     	; 0x4976 <quest+0xc6>
    {
      time_since_light += FRAME_TIME;
    4958:	80 91 5c 04 	lds	r24, 0x045C
    495c:	90 91 5d 04 	lds	r25, 0x045D
    4960:	02 96       	adiw	r24, 0x02	; 2
    4962:	90 93 5d 04 	sts	0x045D, r25
    4966:	80 93 5c 04 	sts	0x045C, r24
      if(time_since_light == 300)
    496a:	8c 32       	cpi	r24, 0x2C	; 44
    496c:	91 40       	sbci	r25, 0x01	; 1
    496e:	19 f4       	brne	.+6      	; 0x4976 <quest+0xc6>
        *p_w_ctrl = 1;
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	f7 01       	movw	r30, r14
    4974:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4976:	80 91 0e 01 	lds	r24, 0x010E
    497a:	81 11       	cpse	r24, r1
    497c:	10 c3       	rjmp	.+1568   	; 0x4f9e <quest+0x6ee>
    {
      *p_w_ctrl = 0;
    497e:	f7 01       	movw	r30, r14
    4980:	10 82       	st	Z, r1
      time_since_light = 0;
    4982:	10 92 5d 04 	sts	0x045D, r1
    4986:	10 92 5c 04 	sts	0x045C, r1
    498a:	09 c3       	rjmp	.+1554   	; 0x4f9e <quest+0x6ee>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    498c:	89 86       	std	Y+9, r8	; 0x09
    498e:	9a 86       	std	Y+10, r9	; 0x0a
    4990:	ab 86       	std	Y+11, r10	; 0x0b
    4992:	bc 86       	std	Y+12, r11	; 0x0c
    4994:	08 c0       	rjmp	.+16     	; 0x49a6 <quest+0xf6>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4996:	f7 fa       	bst	r15, 7
    4998:	f0 94       	com	r15
    499a:	f7 f8       	bld	r15, 7
    499c:	f0 94       	com	r15
    499e:	c9 86       	std	Y+9, r12	; 0x09
    49a0:	da 86       	std	Y+10, r13	; 0x0a
    49a2:	eb 86       	std	Y+11, r14	; 0x0b
    49a4:	fc 86       	std	Y+12, r15	; 0x0c
    49a6:	8e 01       	movw	r16, r28
    49a8:	0f 5f       	subi	r16, 0xFF	; 255
    49aa:	1f 4f       	sbci	r17, 0xFF	; 255
    49ac:	ce 01       	movw	r24, r28
    49ae:	0d 96       	adiw	r24, 0x0d	; 13
    49b0:	af 96       	adiw	r28, 0x2f	; 47
    49b2:	9f af       	std	Y+63, r25	; 0x3f
    49b4:	8e af       	std	Y+62, r24	; 0x3e
    49b6:	af 97       	sbiw	r28, 0x2f	; 47

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    49b8:	f8 01       	movw	r30, r16
    49ba:	c0 80       	ld	r12, Z
    49bc:	d1 80       	ldd	r13, Z+1	; 0x01
    49be:	e2 80       	ldd	r14, Z+2	; 0x02
    49c0:	f3 80       	ldd	r15, Z+3	; 0x03
    49c2:	46 01       	movw	r8, r12
    49c4:	57 01       	movw	r10, r14
    49c6:	e8 94       	clt
    49c8:	b7 f8       	bld	r11, 7
    49ca:	26 e6       	ldi	r18, 0x66	; 102
    49cc:	36 e6       	ldi	r19, 0x66	; 102
    49ce:	46 e8       	ldi	r20, 0x86	; 134
    49d0:	5f e3       	ldi	r21, 0x3F	; 63
    49d2:	c5 01       	movw	r24, r10
    49d4:	b4 01       	movw	r22, r8
    49d6:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    49da:	21 ec       	ldi	r18, 0xC1	; 193
    49dc:	3a ec       	ldi	r19, 0xCA	; 202
    49de:	41 ec       	ldi	r20, 0xC1	; 193
    49e0:	5f e3       	ldi	r21, 0x3F	; 63
    49e2:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    49e6:	0e 94 8d 31 	call	0x631a	; 0x631a <acos>
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	44 e3       	ldi	r20, 0x34	; 52
    49f0:	53 e4       	ldi	r21, 0x43	; 67
    49f2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    49f6:	20 ed       	ldi	r18, 0xD0	; 208
    49f8:	3f e0       	ldi	r19, 0x0F	; 15
    49fa:	49 e4       	ldi	r20, 0x49	; 73
    49fc:	50 e4       	ldi	r21, 0x40	; 64
    49fe:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    4a02:	26 e6       	ldi	r18, 0x66	; 102
    4a04:	36 e6       	ldi	r19, 0x66	; 102
    4a06:	4e e1       	ldi	r20, 0x1E	; 30
    4a08:	51 e4       	ldi	r21, 0x41	; 65
    4a0a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4a0e:	23 e3       	ldi	r18, 0x33	; 51
    4a10:	33 e3       	ldi	r19, 0x33	; 51
    4a12:	43 ed       	ldi	r20, 0xD3	; 211
    4a14:	5f e3       	ldi	r21, 0x3F	; 63
    4a16:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4a1a:	20 ed       	ldi	r18, 0xD0	; 208
    4a1c:	3f e0       	ldi	r19, 0x0F	; 15
    4a1e:	49 e4       	ldi	r20, 0x49	; 73
    4a20:	50 e4       	ldi	r21, 0x40	; 64
    4a22:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	44 e3       	ldi	r20, 0x34	; 52
    4a2c:	53 e4       	ldi	r21, 0x43	; 67
    4a2e:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4a32:	2b 01       	movw	r4, r22
    4a34:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	a9 01       	movw	r20, r18
    4a3c:	c7 01       	movw	r24, r14
    4a3e:	b6 01       	movw	r22, r12
    4a40:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__cmpsf2>
    4a44:	88 23       	and	r24, r24
    4a46:	c1 f0       	breq	.+48     	; 0x4a78 <quest+0x1c8>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4a48:	c3 01       	movw	r24, r6
    4a4a:	b2 01       	movw	r22, r4
    4a4c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    4a50:	2b 01       	movw	r4, r22
    4a52:	3c 01       	movw	r6, r24
    4a54:	a7 01       	movw	r20, r14
    4a56:	96 01       	movw	r18, r12
    4a58:	c5 01       	movw	r24, r10
    4a5a:	b4 01       	movw	r22, r8
    4a5c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4a60:	9b 01       	movw	r18, r22
    4a62:	ac 01       	movw	r20, r24
    4a64:	c3 01       	movw	r24, r6
    4a66:	b2 01       	movw	r22, r4
    4a68:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	60 83       	st	Z, r22
    4a70:	71 83       	std	Z+1, r23	; 0x01
    4a72:	82 83       	std	Z+2, r24	; 0x02
    4a74:	93 83       	std	Z+3, r25	; 0x03
    4a76:	09 c0       	rjmp	.+18     	; 0x4a8a <quest+0x1da>
		else
		v_sun_m[i] = cos(angle);
    4a78:	c3 01       	movw	r24, r6
    4a7a:	b2 01       	movw	r22, r4
    4a7c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <cos>
    4a80:	f8 01       	movw	r30, r16
    4a82:	60 83       	st	Z, r22
    4a84:	71 83       	std	Z+1, r23	; 0x01
    4a86:	82 83       	std	Z+2, r24	; 0x02
    4a88:	93 83       	std	Z+3, r25	; 0x03
    4a8a:	0c 5f       	subi	r16, 0xFC	; 252
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4a8e:	af 96       	adiw	r28, 0x2f	; 47
    4a90:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a92:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a94:	af 97       	sbiw	r28, 0x2f	; 47
    4a96:	08 17       	cp	r16, r24
    4a98:	19 07       	cpc	r17, r25
    4a9a:	09 f0       	breq	.+2      	; 0x4a9e <quest+0x1ee>
    4a9c:	8d cf       	rjmp	.-230    	; 0x49b8 <quest+0x108>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4a9e:	ce 01       	movw	r24, r28
    4aa0:	01 96       	adiw	r24, 0x01	; 1
    4aa2:	1d da       	rcall	.-3014   	; 0x3ede <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4aa4:	80 91 10 05 	lds	r24, 0x0510
    4aa8:	90 91 11 05 	lds	r25, 0x0511
    4aac:	a0 91 12 05 	lds	r26, 0x0512
    4ab0:	b0 91 13 05 	lds	r27, 0x0513
    4ab4:	8d 8b       	std	Y+21, r24	; 0x15
    4ab6:	9e 8b       	std	Y+22, r25	; 0x16
    4ab8:	af 8b       	std	Y+23, r26	; 0x17
    4aba:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4abc:	80 91 14 05 	lds	r24, 0x0514
    4ac0:	90 91 15 05 	lds	r25, 0x0515
    4ac4:	a0 91 16 05 	lds	r26, 0x0516
    4ac8:	b0 91 17 05 	lds	r27, 0x0517
    4acc:	b0 58       	subi	r27, 0x80	; 128
    4ace:	89 8b       	std	Y+17, r24	; 0x11
    4ad0:	9a 8b       	std	Y+18, r25	; 0x12
    4ad2:	ab 8b       	std	Y+19, r26	; 0x13
    4ad4:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4ad6:	80 91 18 05 	lds	r24, 0x0518
    4ada:	90 91 19 05 	lds	r25, 0x0519
    4ade:	a0 91 1a 05 	lds	r26, 0x051A
    4ae2:	b0 91 1b 05 	lds	r27, 0x051B
    4ae6:	8d 87       	std	Y+13, r24	; 0x0d
    4ae8:	9e 87       	std	Y+14, r25	; 0x0e
    4aea:	af 87       	std	Y+15, r26	; 0x0f
    4aec:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4aee:	ae 01       	movw	r20, r28
    4af0:	47 5e       	subi	r20, 0xE7	; 231
    4af2:	5f 4f       	sbci	r21, 0xFF	; 255
    4af4:	be 01       	movw	r22, r28
    4af6:	6f 5f       	subi	r22, 0xFF	; 255
    4af8:	7f 4f       	sbci	r23, 0xFF	; 255
    4afa:	ce 01       	movw	r24, r28
    4afc:	0d 96       	adiw	r24, 0x0d	; 13
    4afe:	18 d9       	rcall	.-3536   	; 0x3d30 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4b00:	ce 01       	movw	r24, r28
    4b02:	49 96       	adiw	r24, 0x19	; 25
    4b04:	ec d9       	rcall	.-3112   	; 0x3ede <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4b06:	ae 01       	movw	r20, r28
    4b08:	4b 5d       	subi	r20, 0xDB	; 219
    4b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b0c:	b1 01       	movw	r22, r2
    4b0e:	e1 96       	adiw	r28, 0x31	; 49
    4b10:	8e ad       	ldd	r24, Y+62	; 0x3e
    4b12:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b14:	e1 97       	sbiw	r28, 0x31	; 49
    4b16:	0c d9       	rcall	.-3560   	; 0x3d30 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4b18:	ce 01       	movw	r24, r28
    4b1a:	85 96       	adiw	r24, 0x25	; 37
    4b1c:	e0 d9       	rcall	.-3136   	; 0x3ede <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4b1e:	be 01       	movw	r22, r28
    4b20:	6b 5d       	subi	r22, 0xDB	; 219
    4b22:	7f 4f       	sbci	r23, 0xFF	; 255
    4b24:	ce 01       	movw	r24, r28
    4b26:	49 96       	adiw	r24, 0x19	; 25
    4b28:	37 d8       	rcall	.-3986   	; 0x3b98 <vector_dot_product>
    4b2a:	6b 01       	movw	r12, r22
    4b2c:	7c 01       	movw	r14, r24
    4b2e:	e1 96       	adiw	r28, 0x31	; 49
    4b30:	6e ad       	ldd	r22, Y+62	; 0x3e
    4b32:	7f ad       	ldd	r23, Y+63	; 0x3f
    4b34:	e1 97       	sbiw	r28, 0x31	; 49
    4b36:	ce 01       	movw	r24, r28
    4b38:	0d 96       	adiw	r24, 0x0d	; 13
    4b3a:	2e d8       	rcall	.-4004   	; 0x3b98 <vector_dot_product>
    4b3c:	4b 01       	movw	r8, r22
    4b3e:	5c 01       	movw	r10, r24
    4b40:	b1 01       	movw	r22, r2
    4b42:	ce 01       	movw	r24, r28
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	28 d8       	rcall	.-4016   	; 0x3b98 <vector_dot_product>
    4b48:	2b 01       	movw	r4, r22
    4b4a:	3c 01       	movw	r6, r24
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e8       	ldi	r20, 0x80	; 128
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	c7 01       	movw	r24, r14
    4b56:	b6 01       	movw	r22, r12
    4b58:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4b5c:	6b 01       	movw	r12, r22
    4b5e:	7c 01       	movw	r14, r24
    4b60:	26 e6       	ldi	r18, 0x66	; 102
    4b62:	36 e6       	ldi	r19, 0x66	; 102
    4b64:	46 e6       	ldi	r20, 0x66	; 102
    4b66:	5f e3       	ldi	r21, 0x3F	; 63
    4b68:	c5 01       	movw	r24, r10
    4b6a:	b4 01       	movw	r22, r8
    4b6c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4b70:	4b 01       	movw	r8, r22
    4b72:	5c 01       	movw	r10, r24
    4b74:	20 ed       	ldi	r18, 0xD0	; 208
    4b76:	3c ec       	ldi	r19, 0xCC	; 204
    4b78:	4c ec       	ldi	r20, 0xCC	; 204
    4b7a:	5d e3       	ldi	r21, 0x3D	; 61
    4b7c:	c3 01       	movw	r24, r6
    4b7e:	b2 01       	movw	r22, r4
    4b80:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4b84:	9b 01       	movw	r18, r22
    4b86:	ac 01       	movw	r20, r24
    4b88:	c5 01       	movw	r24, r10
    4b8a:	b4 01       	movw	r22, r8
    4b8c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4b90:	9b 01       	movw	r18, r22
    4b92:	ac 01       	movw	r20, r24
    4b94:	c7 01       	movw	r24, r14
    4b96:	b6 01       	movw	r22, r12
    4b98:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4b9c:	4b 01       	movw	r8, r22
    4b9e:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4ba0:	ae 01       	movw	r20, r28
    4ba2:	47 5b       	subi	r20, 0xB7	; 183
    4ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ba6:	e1 96       	adiw	r28, 0x31	; 49
    4ba8:	6e ad       	ldd	r22, Y+62	; 0x3e
    4baa:	7f ad       	ldd	r23, Y+63	; 0x3f
    4bac:	e1 97       	sbiw	r28, 0x31	; 49
    4bae:	ce 01       	movw	r24, r28
    4bb0:	0d 96       	adiw	r24, 0x0d	; 13
    4bb2:	be d8       	rcall	.-3716   	; 0x3d30 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4bb4:	ae 01       	movw	r20, r28
    4bb6:	4b 5a       	subi	r20, 0xAB	; 171
    4bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bba:	b1 01       	movw	r22, r2
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	01 96       	adiw	r24, 0x01	; 1
    4bc0:	b7 d8       	rcall	.-3730   	; 0x3d30 <vector_cross_product>
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	e7 5b       	subi	r30, 0xB7	; 183
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	7f 01       	movw	r14, r30
    4bca:	8e 01       	movw	r16, r28
    4bcc:	0b 5a       	subi	r16, 0xAB	; 171
    4bce:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd0:	6f 01       	movw	r12, r30
    4bd2:	fc e0       	ldi	r31, 0x0C	; 12
    4bd4:	cf 0e       	add	r12, r31
    4bd6:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4bd8:	f7 01       	movw	r30, r14
    4bda:	61 91       	ld	r22, Z+
    4bdc:	71 91       	ld	r23, Z+
    4bde:	81 91       	ld	r24, Z+
    4be0:	91 91       	ld	r25, Z+
    4be2:	7f 01       	movw	r14, r30
    4be4:	26 e6       	ldi	r18, 0x66	; 102
    4be6:	36 e6       	ldi	r19, 0x66	; 102
    4be8:	46 e6       	ldi	r20, 0x66	; 102
    4bea:	5f e3       	ldi	r21, 0x3F	; 63
    4bec:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4bf0:	2b 01       	movw	r4, r22
    4bf2:	3c 01       	movw	r6, r24
    4bf4:	20 ed       	ldi	r18, 0xD0	; 208
    4bf6:	3c ec       	ldi	r19, 0xCC	; 204
    4bf8:	4c ec       	ldi	r20, 0xCC	; 204
    4bfa:	5d e3       	ldi	r21, 0x3D	; 61
    4bfc:	f8 01       	movw	r30, r16
    4bfe:	60 81       	ld	r22, Z
    4c00:	71 81       	ldd	r23, Z+1	; 0x01
    4c02:	82 81       	ldd	r24, Z+2	; 0x02
    4c04:	93 81       	ldd	r25, Z+3	; 0x03
    4c06:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	c3 01       	movw	r24, r6
    4c10:	b2 01       	movw	r22, r4
    4c12:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4c16:	f8 01       	movw	r30, r16
    4c18:	61 93       	st	Z+, r22
    4c1a:	71 93       	st	Z+, r23
    4c1c:	81 93       	st	Z+, r24
    4c1e:	91 93       	st	Z+, r25
    4c20:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4c22:	ec 14       	cp	r14, r12
    4c24:	fd 04       	cpc	r15, r13
    4c26:	c1 f6       	brne	.-80     	; 0x4bd8 <quest+0x328>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4c28:	ae 01       	movw	r20, r28
    4c2a:	4f 5c       	subi	r20, 0xCF	; 207
    4c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c2e:	be 01       	movw	r22, r28
    4c30:	6b 5d       	subi	r22, 0xDB	; 219
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	ce 01       	movw	r24, r28
    4c36:	49 96       	adiw	r24, 0x19	; 25
    4c38:	7b d8       	rcall	.-3850   	; 0x3d30 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4c3a:	be 01       	movw	r22, r28
    4c3c:	6b 5a       	subi	r22, 0xAB	; 171
    4c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c40:	ce 01       	movw	r24, r28
    4c42:	c1 96       	adiw	r24, 0x31	; 49
    4c44:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4c48:	a5 01       	movw	r20, r10
    4c4a:	94 01       	movw	r18, r8
    4c4c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4c50:	6b 01       	movw	r12, r22
    4c52:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4c54:	ae 01       	movw	r20, r28
    4c56:	43 5c       	subi	r20, 0xC3	; 195
    4c58:	5f 4f       	sbci	r21, 0xFF	; 255
    4c5a:	be 01       	movw	r22, r28
    4c5c:	6b 5d       	subi	r22, 0xDB	; 219
    4c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c60:	ce 01       	movw	r24, r28
    4c62:	49 96       	adiw	r24, 0x19	; 25
    4c64:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4c68:	be 01       	movw	r22, r28
    4c6a:	6b 5a       	subi	r22, 0xAB	; 171
    4c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6e:	ce 01       	movw	r24, r28
    4c70:	cd 96       	adiw	r24, 0x3d	; 61
    4c72:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4c76:	2b 01       	movw	r4, r22
    4c78:	3c 01       	movw	r6, r24
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4c7a:	a7 01       	movw	r20, r14
    4c7c:	96 01       	movw	r18, r12
    4c7e:	c7 01       	movw	r24, r14
    4c80:	b6 01       	movw	r22, r12
    4c82:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4c86:	4b 01       	movw	r8, r22
    4c88:	5c 01       	movw	r10, r24
    4c8a:	a3 01       	movw	r20, r6
    4c8c:	92 01       	movw	r18, r4
    4c8e:	c3 01       	movw	r24, r6
    4c90:	b2 01       	movw	r22, r4
    4c92:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4c96:	9b 01       	movw	r18, r22
    4c98:	ac 01       	movw	r20, r24
    4c9a:	c5 01       	movw	r24, r10
    4c9c:	b4 01       	movw	r22, r8
    4c9e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4ca2:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    4ca6:	4b 01       	movw	r8, r22
    4ca8:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	a9 01       	movw	r20, r18
    4cb0:	c7 01       	movw	r24, r14
    4cb2:	b6 01       	movw	r22, r12
    4cb4:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    4cb8:	18 16       	cp	r1, r24
    4cba:	0c f0       	brlt	.+2      	; 0x4cbe <quest+0x40e>
    4cbc:	96 c0       	rjmp	.+300    	; 0x4dea <quest+0x53a>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4cbe:	a7 01       	movw	r20, r14
    4cc0:	96 01       	movw	r18, r12
    4cc2:	c5 01       	movw	r24, r10
    4cc4:	b4 01       	movw	r22, r8
    4cc6:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4cca:	6b 01       	movw	r12, r22
    4ccc:	7c 01       	movw	r14, r24
    4cce:	a5 01       	movw	r20, r10
    4cd0:	94 01       	movw	r18, r8
    4cd2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4cd6:	4b 01       	movw	r8, r22
    4cd8:	5c 01       	movw	r10, r24
    4cda:	be 01       	movw	r22, r28
    4cdc:	6b 5d       	subi	r22, 0xDB	; 219
    4cde:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce0:	ce 01       	movw	r24, r28
    4ce2:	49 96       	adiw	r24, 0x19	; 25
    4ce4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e8       	ldi	r20, 0x80	; 128
    4cee:	5f e3       	ldi	r21, 0x3F	; 63
    4cf0:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4cf4:	9b 01       	movw	r18, r22
    4cf6:	ac 01       	movw	r20, r24
    4cf8:	c5 01       	movw	r24, r10
    4cfa:	b4 01       	movw	r22, r8
    4cfc:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4d00:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    4d04:	9b 01       	movw	r18, r22
    4d06:	ac 01       	movw	r20, r24
    4d08:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4d0c:	9b 01       	movw	r18, r22
    4d0e:	ac 01       	movw	r20, r24
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	80 e8       	ldi	r24, 0x80	; 128
    4d16:	9f e3       	ldi	r25, 0x3F	; 63
    4d18:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4d1c:	ec 96       	adiw	r28, 0x3c	; 60
    4d1e:	6c af       	std	Y+60, r22	; 0x3c
    4d20:	7d af       	std	Y+61, r23	; 0x3d
    4d22:	8e af       	std	Y+62, r24	; 0x3e
    4d24:	9f af       	std	Y+63, r25	; 0x3f
    4d26:	ec 97       	sbiw	r28, 0x3c	; 60
    4d28:	8e 01       	movw	r16, r28
    4d2a:	0f 5c       	subi	r16, 0xCF	; 207
    4d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2e:	1e 01       	movw	r2, r28
    4d30:	fd e3       	ldi	r31, 0x3D	; 61
    4d32:	2f 0e       	add	r2, r31
    4d34:	31 1c       	adc	r3, r1
    4d36:	ce 01       	movw	r24, r28
    4d38:	8f 59       	subi	r24, 0x9F	; 159
    4d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d3c:	e1 96       	adiw	r28, 0x31	; 49
    4d3e:	9f af       	std	Y+63, r25	; 0x3f
    4d40:	8e af       	std	Y+62, r24	; 0x3e
    4d42:	e1 97       	sbiw	r28, 0x31	; 49
    4d44:	af 96       	adiw	r28, 0x2f	; 47
    4d46:	3f ae       	std	Y+63, r3	; 0x3f
    4d48:	2e ae       	std	Y+62, r2	; 0x3e
    4d4a:	af 97       	sbiw	r28, 0x2f	; 47
    4d4c:	e8 96       	adiw	r28, 0x38	; 56
    4d4e:	4c ae       	std	Y+60, r4	; 0x3c
    4d50:	5d ae       	std	Y+61, r5	; 0x3d
    4d52:	6e ae       	std	Y+62, r6	; 0x3e
    4d54:	7f ae       	std	Y+63, r7	; 0x3f
    4d56:	e8 97       	sbiw	r28, 0x38	; 56
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4d58:	f8 01       	movw	r30, r16
    4d5a:	21 91       	ld	r18, Z+
    4d5c:	31 91       	ld	r19, Z+
    4d5e:	41 91       	ld	r20, Z+
    4d60:	51 91       	ld	r21, Z+
    4d62:	8f 01       	movw	r16, r30
    4d64:	f1 01       	movw	r30, r2
    4d66:	41 90       	ld	r4, Z+
    4d68:	51 90       	ld	r5, Z+
    4d6a:	61 90       	ld	r6, Z+
    4d6c:	71 90       	ld	r7, Z+
    4d6e:	1f 01       	movw	r2, r30
    4d70:	c7 01       	movw	r24, r14
    4d72:	b6 01       	movw	r22, r12
    4d74:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4d78:	4b 01       	movw	r8, r22
    4d7a:	5c 01       	movw	r10, r24
    4d7c:	e8 96       	adiw	r28, 0x38	; 56
    4d7e:	2c ad       	ldd	r18, Y+60	; 0x3c
    4d80:	3d ad       	ldd	r19, Y+61	; 0x3d
    4d82:	4e ad       	ldd	r20, Y+62	; 0x3e
    4d84:	5f ad       	ldd	r21, Y+63	; 0x3f
    4d86:	e8 97       	sbiw	r28, 0x38	; 56
    4d88:	c3 01       	movw	r24, r6
    4d8a:	b2 01       	movw	r22, r4
    4d8c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4d90:	9b 01       	movw	r18, r22
    4d92:	ac 01       	movw	r20, r24
    4d94:	c5 01       	movw	r24, r10
    4d96:	b4 01       	movw	r22, r8
    4d98:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4d9c:	e1 96       	adiw	r28, 0x31	; 49
    4d9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4da0:	ff ad       	ldd	r31, Y+63	; 0x3f
    4da2:	e1 97       	sbiw	r28, 0x31	; 49
    4da4:	61 93       	st	Z+, r22
    4da6:	71 93       	st	Z+, r23
    4da8:	81 93       	st	Z+, r24
    4daa:	91 93       	st	Z+, r25
    4dac:	e1 96       	adiw	r28, 0x31	; 49
    4dae:	ff af       	std	Y+63, r31	; 0x3f
    4db0:	ee af       	std	Y+62, r30	; 0x3e
    4db2:	e1 97       	sbiw	r28, 0x31	; 49
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4db4:	af 96       	adiw	r28, 0x2f	; 47
    4db6:	8e ad       	ldd	r24, Y+62	; 0x3e
    4db8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dba:	af 97       	sbiw	r28, 0x2f	; 47
    4dbc:	08 17       	cp	r16, r24
    4dbe:	19 07       	cpc	r17, r25
    4dc0:	59 f6       	brne	.-106    	; 0x4d58 <quest+0x4a8>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4dc2:	be 01       	movw	r22, r28
    4dc4:	6b 5d       	subi	r22, 0xDB	; 219
    4dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc8:	ce 01       	movw	r24, r28
    4dca:	49 96       	adiw	r24, 0x19	; 25
    4dcc:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	40 e8       	ldi	r20, 0x80	; 128
    4dd6:	5f e3       	ldi	r21, 0x3F	; 63
    4dd8:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4ddc:	9b 01       	movw	r18, r22
    4dde:	ac 01       	movw	r20, r24
    4de0:	c7 01       	movw	r24, r14
    4de2:	b6 01       	movw	r22, r12
    4de4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4de8:	91 c0       	rjmp	.+290    	; 0x4f0c <quest+0x65c>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4dea:	a7 01       	movw	r20, r14
    4dec:	96 01       	movw	r18, r12
    4dee:	c5 01       	movw	r24, r10
    4df0:	b4 01       	movw	r22, r8
    4df2:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    4df6:	e8 96       	adiw	r28, 0x38	; 56
    4df8:	6c af       	std	Y+60, r22	; 0x3c
    4dfa:	7d af       	std	Y+61, r23	; 0x3d
    4dfc:	8e af       	std	Y+62, r24	; 0x3e
    4dfe:	9f af       	std	Y+63, r25	; 0x3f
    4e00:	e8 97       	sbiw	r28, 0x38	; 56
    4e02:	a5 01       	movw	r20, r10
    4e04:	94 01       	movw	r18, r8
    4e06:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4e0a:	6b 01       	movw	r12, r22
    4e0c:	7c 01       	movw	r14, r24
    4e0e:	be 01       	movw	r22, r28
    4e10:	6b 5d       	subi	r22, 0xDB	; 219
    4e12:	7f 4f       	sbci	r23, 0xFF	; 255
    4e14:	ce 01       	movw	r24, r28
    4e16:	49 96       	adiw	r24, 0x19	; 25
    4e18:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4e1c:	20 e0       	ldi	r18, 0x00	; 0
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	40 e8       	ldi	r20, 0x80	; 128
    4e22:	5f e3       	ldi	r21, 0x3F	; 63
    4e24:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4e28:	9b 01       	movw	r18, r22
    4e2a:	ac 01       	movw	r20, r24
    4e2c:	c7 01       	movw	r24, r14
    4e2e:	b6 01       	movw	r22, r12
    4e30:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4e34:	0e 94 57 35 	call	0x6aae	; 0x6aae <sqrt>
    4e38:	9b 01       	movw	r18, r22
    4e3a:	ac 01       	movw	r20, r24
    4e3c:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	60 e0       	ldi	r22, 0x00	; 0
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	80 e8       	ldi	r24, 0x80	; 128
    4e4a:	9f e3       	ldi	r25, 0x3F	; 63
    4e4c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    4e50:	ec 96       	adiw	r28, 0x3c	; 60
    4e52:	6c af       	std	Y+60, r22	; 0x3c
    4e54:	7d af       	std	Y+61, r23	; 0x3d
    4e56:	8e af       	std	Y+62, r24	; 0x3e
    4e58:	9f af       	std	Y+63, r25	; 0x3f
    4e5a:	ec 97       	sbiw	r28, 0x3c	; 60
    4e5c:	8e 01       	movw	r16, r28
    4e5e:	0f 5c       	subi	r16, 0xCF	; 207
    4e60:	1f 4f       	sbci	r17, 0xFF	; 255
    4e62:	1e 01       	movw	r2, r28
    4e64:	9d e3       	ldi	r25, 0x3D	; 61
    4e66:	29 0e       	add	r2, r25
    4e68:	31 1c       	adc	r3, r1
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	ef 59       	subi	r30, 0x9F	; 159
    4e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e70:	e1 96       	adiw	r28, 0x31	; 49
    4e72:	ff af       	std	Y+63, r31	; 0x3f
    4e74:	ee af       	std	Y+62, r30	; 0x3e
    4e76:	e1 97       	sbiw	r28, 0x31	; 49
    4e78:	af 96       	adiw	r28, 0x2f	; 47
    4e7a:	3f ae       	std	Y+63, r3	; 0x3f
    4e7c:	2e ae       	std	Y+62, r2	; 0x3e
    4e7e:	af 97       	sbiw	r28, 0x2f	; 47
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    4e80:	f8 01       	movw	r30, r16
    4e82:	61 91       	ld	r22, Z+
    4e84:	71 91       	ld	r23, Z+
    4e86:	81 91       	ld	r24, Z+
    4e88:	91 91       	ld	r25, Z+
    4e8a:	8f 01       	movw	r16, r30
    4e8c:	f1 01       	movw	r30, r2
    4e8e:	81 90       	ld	r8, Z+
    4e90:	91 90       	ld	r9, Z+
    4e92:	a1 90       	ld	r10, Z+
    4e94:	b1 90       	ld	r11, Z+
    4e96:	1f 01       	movw	r2, r30
    4e98:	a3 01       	movw	r20, r6
    4e9a:	92 01       	movw	r18, r4
    4e9c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4ea0:	6b 01       	movw	r12, r22
    4ea2:	7c 01       	movw	r14, r24
    4ea4:	a5 01       	movw	r20, r10
    4ea6:	94 01       	movw	r18, r8
    4ea8:	e8 96       	adiw	r28, 0x38	; 56
    4eaa:	6c ad       	ldd	r22, Y+60	; 0x3c
    4eac:	7d ad       	ldd	r23, Y+61	; 0x3d
    4eae:	8e ad       	ldd	r24, Y+62	; 0x3e
    4eb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eb2:	e8 97       	sbiw	r28, 0x38	; 56
    4eb4:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    4eb8:	9b 01       	movw	r18, r22
    4eba:	ac 01       	movw	r20, r24
    4ebc:	c7 01       	movw	r24, r14
    4ebe:	b6 01       	movw	r22, r12
    4ec0:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4ec4:	e1 96       	adiw	r28, 0x31	; 49
    4ec6:	ee ad       	ldd	r30, Y+62	; 0x3e
    4ec8:	ff ad       	ldd	r31, Y+63	; 0x3f
    4eca:	e1 97       	sbiw	r28, 0x31	; 49
    4ecc:	61 93       	st	Z+, r22
    4ece:	71 93       	st	Z+, r23
    4ed0:	81 93       	st	Z+, r24
    4ed2:	91 93       	st	Z+, r25
    4ed4:	e1 96       	adiw	r28, 0x31	; 49
    4ed6:	ff af       	std	Y+63, r31	; 0x3f
    4ed8:	ee af       	std	Y+62, r30	; 0x3e
    4eda:	e1 97       	sbiw	r28, 0x31	; 49
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4edc:	af 96       	adiw	r28, 0x2f	; 47
    4ede:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ee2:	af 97       	sbiw	r28, 0x2f	; 47
    4ee4:	08 17       	cp	r16, r24
    4ee6:	19 07       	cpc	r17, r25
    4ee8:	59 f6       	brne	.-106    	; 0x4e80 <quest+0x5d0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4eea:	be 01       	movw	r22, r28
    4eec:	6b 5d       	subi	r22, 0xDB	; 219
    4eee:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef0:	ce 01       	movw	r24, r28
    4ef2:	49 96       	adiw	r24, 0x19	; 25
    4ef4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <vector_dot_product>
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	40 e8       	ldi	r20, 0x80	; 128
    4efe:	5f e3       	ldi	r21, 0x3F	; 63
    4f00:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    4f04:	a3 01       	movw	r20, r6
    4f06:	92 01       	movw	r18, r4
    4f08:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    4f0c:	a5 96       	adiw	r28, 0x25	; 37
    4f0e:	0c ad       	ldd	r16, Y+60	; 0x3c
    4f10:	1d ad       	ldd	r17, Y+61	; 0x3d
    4f12:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f14:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f16:	a5 97       	sbiw	r28, 0x25	; 37
    4f18:	e3 96       	adiw	r28, 0x33	; 51
    4f1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f1e:	e3 97       	sbiw	r28, 0x33	; 51
    4f20:	00 83       	st	Z, r16
    4f22:	11 83       	std	Z+1, r17	; 0x01
    4f24:	22 83       	std	Z+2, r18	; 0x02
    4f26:	33 83       	std	Z+3, r19	; 0x03
    4f28:	a9 96       	adiw	r28, 0x29	; 41
    4f2a:	0c ad       	ldd	r16, Y+60	; 0x3c
    4f2c:	1d ad       	ldd	r17, Y+61	; 0x3d
    4f2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f30:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f32:	a9 97       	sbiw	r28, 0x29	; 41
    4f34:	04 83       	std	Z+4, r16	; 0x04
    4f36:	15 83       	std	Z+5, r17	; 0x05
    4f38:	26 83       	std	Z+6, r18	; 0x06
    4f3a:	37 83       	std	Z+7, r19	; 0x07
    4f3c:	ad 96       	adiw	r28, 0x2d	; 45
    4f3e:	0c ad       	ldd	r16, Y+60	; 0x3c
    4f40:	1d ad       	ldd	r17, Y+61	; 0x3d
    4f42:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f44:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f46:	ad 97       	sbiw	r28, 0x2d	; 45
    4f48:	00 87       	std	Z+8, r16	; 0x08
    4f4a:	11 87       	std	Z+9, r17	; 0x09
    4f4c:	22 87       	std	Z+10, r18	; 0x0a
    4f4e:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    4f50:	64 87       	std	Z+12, r22	; 0x0c
    4f52:	75 87       	std	Z+13, r23	; 0x0d
    4f54:	86 87       	std	Z+14, r24	; 0x0e
    4f56:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    4f58:	ec 96       	adiw	r28, 0x3c	; 60
    4f5a:	4c ad       	ldd	r20, Y+60	; 0x3c
    4f5c:	5d ad       	ldd	r21, Y+61	; 0x3d
    4f5e:	6e ad       	ldd	r22, Y+62	; 0x3e
    4f60:	7f ad       	ldd	r23, Y+63	; 0x3f
    4f62:	ec 97       	sbiw	r28, 0x3c	; 60
    4f64:	cf 01       	movw	r24, r30
    4f66:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <scalar_into_quaternion>
    4f6a:	7d c0       	rjmp	.+250    	; 0x5066 <quest+0x7b6>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    4f6c:	e3 96       	adiw	r28, 0x33	; 51
    4f6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f70:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f72:	e3 97       	sbiw	r28, 0x33	; 51
    4f74:	10 82       	st	Z, r1
    4f76:	11 82       	std	Z+1, r1	; 0x01
    4f78:	12 82       	std	Z+2, r1	; 0x02
    4f7a:	13 82       	std	Z+3, r1	; 0x03
    4f7c:	14 82       	std	Z+4, r1	; 0x04
    4f7e:	15 82       	std	Z+5, r1	; 0x05
    4f80:	16 82       	std	Z+6, r1	; 0x06
    4f82:	17 82       	std	Z+7, r1	; 0x07
    4f84:	10 86       	std	Z+8, r1	; 0x08
    4f86:	11 86       	std	Z+9, r1	; 0x09
    4f88:	12 86       	std	Z+10, r1	; 0x0a
    4f8a:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    4f8c:	80 e0       	ldi	r24, 0x00	; 0
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	a0 e8       	ldi	r26, 0x80	; 128
    4f92:	bf e3       	ldi	r27, 0x3F	; 63
    4f94:	84 87       	std	Z+12, r24	; 0x0c
    4f96:	95 87       	std	Z+13, r25	; 0x0d
    4f98:	a6 87       	std	Z+14, r26	; 0x0e
    4f9a:	b7 87       	std	Z+15, r27	; 0x0f
    4f9c:	64 c0       	rjmp	.+200    	; 0x5066 <quest+0x7b6>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4f9e:	c0 90 f8 04 	lds	r12, 0x04F8
    4fa2:	d0 90 f9 04 	lds	r13, 0x04F9
    4fa6:	e0 90 fa 04 	lds	r14, 0x04FA
    4faa:	f0 90 fb 04 	lds	r15, 0x04FB
    4fae:	80 90 fc 04 	lds	r8, 0x04FC
    4fb2:	90 90 fd 04 	lds	r9, 0x04FD
    4fb6:	a0 90 fe 04 	lds	r10, 0x04FE
    4fba:	b0 90 ff 04 	lds	r11, 0x04FF
    4fbe:	a5 01       	movw	r20, r10
    4fc0:	94 01       	movw	r18, r8
    4fc2:	c7 01       	movw	r24, r14
    4fc4:	b6 01       	movw	r22, r12
    4fc6:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    4fca:	18 16       	cp	r1, r24
    4fcc:	4c f0       	brlt	.+18     	; 0x4fe0 <quest+0x730>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4fce:	b7 fa       	bst	r11, 7
    4fd0:	b0 94       	com	r11
    4fd2:	b7 f8       	bld	r11, 7
    4fd4:	b0 94       	com	r11
    4fd6:	89 82       	std	Y+1, r8	; 0x01
    4fd8:	9a 82       	std	Y+2, r9	; 0x02
    4fda:	ab 82       	std	Y+3, r10	; 0x03
    4fdc:	bc 82       	std	Y+4, r11	; 0x04
    4fde:	04 c0       	rjmp	.+8      	; 0x4fe8 <quest+0x738>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4fe0:	c9 82       	std	Y+1, r12	; 0x01
    4fe2:	da 82       	std	Y+2, r13	; 0x02
    4fe4:	eb 82       	std	Y+3, r14	; 0x03
    4fe6:	fc 82       	std	Y+4, r15	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4fe8:	c0 90 00 05 	lds	r12, 0x0500
    4fec:	d0 90 01 05 	lds	r13, 0x0501
    4ff0:	e0 90 02 05 	lds	r14, 0x0502
    4ff4:	f0 90 03 05 	lds	r15, 0x0503
    4ff8:	80 90 04 05 	lds	r8, 0x0504
    4ffc:	90 90 05 05 	lds	r9, 0x0505
    5000:	a0 90 06 05 	lds	r10, 0x0506
    5004:	b0 90 07 05 	lds	r11, 0x0507
    5008:	a5 01       	movw	r20, r10
    500a:	94 01       	movw	r18, r8
    500c:	c7 01       	movw	r24, r14
    500e:	b6 01       	movw	r22, r12
    5010:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    5014:	18 16       	cp	r1, r24
    5016:	4c f0       	brlt	.+18     	; 0x502a <quest+0x77a>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5018:	b7 fa       	bst	r11, 7
    501a:	b0 94       	com	r11
    501c:	b7 f8       	bld	r11, 7
    501e:	b0 94       	com	r11
    5020:	8d 82       	std	Y+5, r8	; 0x05
    5022:	9e 82       	std	Y+6, r9	; 0x06
    5024:	af 82       	std	Y+7, r10	; 0x07
    5026:	b8 86       	std	Y+8, r11	; 0x08
    5028:	04 c0       	rjmp	.+8      	; 0x5032 <quest+0x782>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    502a:	cd 82       	std	Y+5, r12	; 0x05
    502c:	de 82       	std	Y+6, r13	; 0x06
    502e:	ef 82       	std	Y+7, r14	; 0x07
    5030:	f8 86       	std	Y+8, r15	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5032:	80 90 08 05 	lds	r8, 0x0508
    5036:	90 90 09 05 	lds	r9, 0x0509
    503a:	a0 90 0a 05 	lds	r10, 0x050A
    503e:	b0 90 0b 05 	lds	r11, 0x050B
    5042:	c0 90 0c 05 	lds	r12, 0x050C
    5046:	d0 90 0d 05 	lds	r13, 0x050D
    504a:	e0 90 0e 05 	lds	r14, 0x050E
    504e:	f0 90 0f 05 	lds	r15, 0x050F
    5052:	a7 01       	movw	r20, r14
    5054:	96 01       	movw	r18, r12
    5056:	c5 01       	movw	r24, r10
    5058:	b4 01       	movw	r22, r8
    505a:	0e 94 93 34 	call	0x6926	; 0x6926 <__gesf2>
    505e:	18 16       	cp	r1, r24
    5060:	0c f4       	brge	.+2      	; 0x5064 <quest+0x7b4>
    5062:	94 cc       	rjmp	.-1752   	; 0x498c <quest+0xdc>
    5064:	98 cc       	rjmp	.-1744   	; 0x4996 <quest+0xe6>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    5066:	e4 96       	adiw	r28, 0x34	; 52
    5068:	ff ad       	ldd	r31, Y+63	; 0x3f
    506a:	e4 97       	sbiw	r28, 0x34	; 52
    506c:	f0 93 0e 01 	sts	0x010E, r31
 
  return light;
   
}
    5070:	8f 2f       	mov	r24, r31
    5072:	c5 58       	subi	r28, 0x85	; 133
    5074:	df 4f       	sbci	r29, 0xFF	; 255
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	1f 91       	pop	r17
    5086:	0f 91       	pop	r16
    5088:	ff 90       	pop	r15
    508a:	ef 90       	pop	r14
    508c:	df 90       	pop	r13
    508e:	cf 90       	pop	r12
    5090:	bf 90       	pop	r11
    5092:	af 90       	pop	r10
    5094:	9f 90       	pop	r9
    5096:	8f 90       	pop	r8
    5098:	7f 90       	pop	r7
    509a:	6f 90       	pop	r6
    509c:	5f 90       	pop	r5
    509e:	4f 90       	pop	r4
    50a0:	3f 90       	pop	r3
    50a2:	2f 90       	pop	r2
    50a4:	08 95       	ret

000050a6 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    50a6:	2f 92       	push	r2
    50a8:	3f 92       	push	r3
    50aa:	4f 92       	push	r4
    50ac:	5f 92       	push	r5
    50ae:	6f 92       	push	r6
    50b0:	7f 92       	push	r7
    50b2:	8f 92       	push	r8
    50b4:	9f 92       	push	r9
    50b6:	af 92       	push	r10
    50b8:	bf 92       	push	r11
    50ba:	cf 92       	push	r12
    50bc:	df 92       	push	r13
    50be:	ef 92       	push	r14
    50c0:	ff 92       	push	r15
    50c2:	0f 93       	push	r16
    50c4:	1f 93       	push	r17
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
    50ce:	c6 5c       	subi	r28, 0xC6	; 198
    50d0:	d1 09       	sbc	r29, r1
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	cd 53       	subi	r28, 0x3D	; 61
    50de:	df 4f       	sbci	r29, 0xFF	; 255
    50e0:	88 83       	st	Y, r24
    50e2:	c3 5c       	subi	r28, 0xC3	; 195
    50e4:	d0 40       	sbci	r29, 0x00	; 0
    50e6:	cc 53       	subi	r28, 0x3C	; 60
    50e8:	df 4f       	sbci	r29, 0xFF	; 255
    50ea:	98 83       	st	Y, r25
    50ec:	c4 5c       	subi	r28, 0xC4	; 196
    50ee:	d0 40       	sbci	r29, 0x00	; 0
    50f0:	cb 53       	subi	r28, 0x3B	; 59
    50f2:	df 4f       	sbci	r29, 0xFF	; 255
    50f4:	68 83       	st	Y, r22
    50f6:	c5 5c       	subi	r28, 0xC5	; 197
    50f8:	d0 40       	sbci	r29, 0x00	; 0
    50fa:	ca 53       	subi	r28, 0x3A	; 58
    50fc:	df 4f       	sbci	r29, 0xFF	; 255
    50fe:	78 83       	st	Y, r23
    5100:	c6 5c       	subi	r28, 0xC6	; 198
    5102:	d0 40       	sbci	r29, 0x00	; 0
    5104:	e8 2e       	mov	r14, r24
    5106:	f9 2e       	mov	r15, r25
    5108:	0a e6       	ldi	r16, 0x6A	; 106
    510a:	14 e0       	ldi	r17, 0x04	; 4
    510c:	9e 01       	movw	r18, r28
    510e:	2f 5e       	subi	r18, 0xEF	; 239
    5110:	3f 4f       	sbci	r19, 0xFF	; 255
    5112:	19 01       	movw	r2, r18
    5114:	ce 01       	movw	r24, r28
    5116:	01 96       	adiw	r24, 0x01	; 1
    5118:	6c 01       	movw	r12, r24
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    511a:	d7 01       	movw	r26, r14
    511c:	8d 90       	ld	r8, X+
    511e:	9d 90       	ld	r9, X+
    5120:	ad 90       	ld	r10, X+
    5122:	bd 90       	ld	r11, X+
    5124:	7d 01       	movw	r14, r26
    5126:	f8 01       	movw	r30, r16
    5128:	41 90       	ld	r4, Z+
    512a:	51 90       	ld	r5, Z+
    512c:	61 90       	ld	r6, Z+
    512e:	71 90       	ld	r7, Z+
    5130:	8f 01       	movw	r16, r30
    5132:	a3 01       	movw	r20, r6
    5134:	92 01       	movw	r18, r4
    5136:	c5 01       	movw	r24, r10
    5138:	b4 01       	movw	r22, r8
    513a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	40 e0       	ldi	r20, 0x00	; 0
    5144:	5f e3       	ldi	r21, 0x3F	; 63
    5146:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    514a:	d6 01       	movw	r26, r12
    514c:	6d 93       	st	X+, r22
    514e:	7d 93       	st	X+, r23
    5150:	8d 93       	st	X+, r24
    5152:	9d 93       	st	X+, r25
    5154:	6d 01       	movw	r12, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    5156:	a3 01       	movw	r20, r6
    5158:	92 01       	movw	r18, r4
    515a:	c5 01       	movw	r24, r10
    515c:	b4 01       	movw	r22, r8
    515e:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	40 e0       	ldi	r20, 0x00	; 0
    5168:	5f e3       	ldi	r21, 0x3F	; 63
    516a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    516e:	f1 01       	movw	r30, r2
    5170:	61 93       	st	Z+, r22
    5172:	71 93       	st	Z+, r23
    5174:	81 93       	st	Z+, r24
    5176:	91 93       	st	Z+, r25
    5178:	1f 01       	movw	r2, r30
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    517a:	f4 e0       	ldi	r31, 0x04	; 4
    517c:	0a 37       	cpi	r16, 0x7A	; 122
    517e:	1f 07       	cpc	r17, r31
    5180:	61 f6       	brne	.-104    	; 0x511a <omega_estimation+0x74>
    5182:	9e 01       	movw	r18, r28
    5184:	23 5d       	subi	r18, 0xD3	; 211
    5186:	3f 4f       	sbci	r19, 0xFF	; 255
    5188:	8e 01       	movw	r16, r28
    518a:	0f 5d       	subi	r16, 0xDF	; 223
    518c:	1f 4f       	sbci	r17, 0xFF	; 255
    518e:	ae 01       	movw	r20, r28
    5190:	43 5f       	subi	r20, 0xF3	; 243
    5192:	5f 4f       	sbci	r21, 0xFF	; 255
    5194:	c8 01       	movw	r24, r16
    5196:	de 01       	movw	r26, r28
    5198:	51 96       	adiw	r26, 0x11	; 17
    519a:	fe 01       	movw	r30, r28
    519c:	31 96       	adiw	r30, 0x01	; 1
    519e:	bd 01       	movw	r22, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    51a0:	c1 90       	ld	r12, Z+
    51a2:	d1 90       	ld	r13, Z+
    51a4:	e1 90       	ld	r14, Z+
    51a6:	f1 90       	ld	r15, Z+
    51a8:	d9 01       	movw	r26, r18
    51aa:	cd 92       	st	X+, r12
    51ac:	dd 92       	st	X+, r13
    51ae:	ed 92       	st	X+, r14
    51b0:	fd 92       	st	X+, r15
    51b2:	9d 01       	movw	r18, r26
    e[i] = q[i];
    51b4:	db 01       	movw	r26, r22
    51b6:	cd 90       	ld	r12, X+
    51b8:	dd 90       	ld	r13, X+
    51ba:	ed 90       	ld	r14, X+
    51bc:	fd 90       	ld	r15, X+
    51be:	bd 01       	movw	r22, r26
    51c0:	dc 01       	movw	r26, r24
    51c2:	cd 92       	st	X+, r12
    51c4:	dd 92       	st	X+, r13
    51c6:	ed 92       	st	X+, r14
    51c8:	fd 92       	st	X+, r15
    51ca:	cd 01       	movw	r24, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    51cc:	e4 17       	cp	r30, r20
    51ce:	f5 07       	cpc	r31, r21
    51d0:	39 f7       	brne	.-50     	; 0x51a0 <omega_estimation+0xfa>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    51d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    51d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    51da:	c7 54       	subi	r28, 0x47	; 71
    51dc:	df 4f       	sbci	r29, 0xFF	; 255
    51de:	88 83       	st	Y, r24
    51e0:	99 83       	std	Y+1, r25	; 0x01
    51e2:	aa 83       	std	Y+2, r26	; 0x02
    51e4:	bb 83       	std	Y+3, r27	; 0x03
    51e6:	c9 5b       	subi	r28, 0xB9	; 185
    51e8:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    51ea:	ad 96       	adiw	r28, 0x2d	; 45
    51ec:	1c ae       	std	Y+60, r1	; 0x3c
    51ee:	1d ae       	std	Y+61, r1	; 0x3d
    51f0:	1e ae       	std	Y+62, r1	; 0x3e
    51f2:	1f ae       	std	Y+63, r1	; 0x3f
    51f4:	ad 97       	sbiw	r28, 0x2d	; 45
    51f6:	c9 a4       	ldd	r12, Y+41	; 0x29
    51f8:	da a4       	ldd	r13, Y+42	; 0x2a
    51fa:	eb a4       	ldd	r14, Y+43	; 0x2b
    51fc:	fc a4       	ldd	r15, Y+44	; 0x2c
    51fe:	20 e0       	ldi	r18, 0x00	; 0
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	40 e0       	ldi	r20, 0x00	; 0
    5204:	50 ec       	ldi	r21, 0xC0	; 192
    5206:	c7 01       	movw	r24, r14
    5208:	b6 01       	movw	r22, r12
    520a:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    520e:	e1 96       	adiw	r28, 0x31	; 49
    5210:	6c af       	std	Y+60, r22	; 0x3c
    5212:	7d af       	std	Y+61, r23	; 0x3d
    5214:	8e af       	std	Y+62, r24	; 0x3e
    5216:	9f af       	std	Y+63, r25	; 0x3f
    5218:	e1 97       	sbiw	r28, 0x31	; 49
    521a:	8d a0       	ldd	r8, Y+37	; 0x25
    521c:	9e a0       	ldd	r9, Y+38	; 0x26
    521e:	af a0       	ldd	r10, Y+39	; 0x27
    5220:	b8 a4       	ldd	r11, Y+40	; 0x28
    5222:	a5 01       	movw	r20, r10
    5224:	94 01       	movw	r18, r8
    5226:	c5 01       	movw	r24, r10
    5228:	b4 01       	movw	r22, r8
    522a:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    522e:	e5 96       	adiw	r28, 0x35	; 53
    5230:	6c af       	std	Y+60, r22	; 0x3c
    5232:	7d af       	std	Y+61, r23	; 0x3d
    5234:	8e af       	std	Y+62, r24	; 0x3e
    5236:	9f af       	std	Y+63, r25	; 0x3f
    5238:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    523a:	a7 01       	movw	r20, r14
    523c:	96 01       	movw	r18, r12
    523e:	c7 01       	movw	r24, r14
    5240:	b6 01       	movw	r22, r12
    5242:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5246:	e9 96       	adiw	r28, 0x39	; 57
    5248:	6c af       	std	Y+60, r22	; 0x3c
    524a:	7d af       	std	Y+61, r23	; 0x3d
    524c:	8e af       	std	Y+62, r24	; 0x3e
    524e:	9f af       	std	Y+63, r25	; 0x3f
    5250:	e9 97       	sbiw	r28, 0x39	; 57
    5252:	ed 96       	adiw	r28, 0x3d	; 61
    5254:	1c ae       	std	Y+60, r1	; 0x3c
    5256:	1d ae       	std	Y+61, r1	; 0x3d
    5258:	1e ae       	std	Y+62, r1	; 0x3e
    525a:	1f ae       	std	Y+63, r1	; 0x3f
    525c:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    525e:	c9 a0       	ldd	r12, Y+33	; 0x21
    5260:	da a0       	ldd	r13, Y+34	; 0x22
    5262:	eb a0       	ldd	r14, Y+35	; 0x23
    5264:	fc a0       	ldd	r15, Y+36	; 0x24
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	40 e0       	ldi	r20, 0x00	; 0
    526c:	50 ec       	ldi	r21, 0xC0	; 192
    526e:	c7 01       	movw	r24, r14
    5270:	b6 01       	movw	r22, r12
    5272:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5276:	c3 58       	subi	r28, 0x83	; 131
    5278:	df 4f       	sbci	r29, 0xFF	; 255
    527a:	68 83       	st	Y, r22
    527c:	79 83       	std	Y+1, r23	; 0x01
    527e:	8a 83       	std	Y+2, r24	; 0x02
    5280:	9b 83       	std	Y+3, r25	; 0x03
    5282:	cd 57       	subi	r28, 0x7D	; 125
    5284:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e0       	ldi	r20, 0x00	; 0
    528c:	50 ec       	ldi	r21, 0xC0	; 192
    528e:	c5 01       	movw	r24, r10
    5290:	b4 01       	movw	r22, r8
    5292:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5296:	cf 57       	subi	r28, 0x7F	; 127
    5298:	df 4f       	sbci	r29, 0xFF	; 255
    529a:	68 83       	st	Y, r22
    529c:	79 83       	std	Y+1, r23	; 0x01
    529e:	8a 83       	std	Y+2, r24	; 0x02
    52a0:	9b 83       	std	Y+3, r25	; 0x03
    52a2:	c1 58       	subi	r28, 0x81	; 129
    52a4:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    52a6:	a7 01       	movw	r20, r14
    52a8:	96 01       	movw	r18, r12
    52aa:	c7 01       	movw	r24, r14
    52ac:	b6 01       	movw	r22, r12
    52ae:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    52b2:	cb 57       	subi	r28, 0x7B	; 123
    52b4:	df 4f       	sbci	r29, 0xFF	; 255
    52b6:	68 83       	st	Y, r22
    52b8:	79 83       	std	Y+1, r23	; 0x01
    52ba:	8a 83       	std	Y+2, r24	; 0x02
    52bc:	9b 83       	std	Y+3, r25	; 0x03
    52be:	c5 58       	subi	r28, 0x85	; 133
    52c0:	d0 40       	sbci	r29, 0x00	; 0
    52c2:	c7 57       	subi	r28, 0x77	; 119
    52c4:	df 4f       	sbci	r29, 0xFF	; 255
    52c6:	18 82       	st	Y, r1
    52c8:	19 82       	std	Y+1, r1	; 0x01
    52ca:	1a 82       	std	Y+2, r1	; 0x02
    52cc:	1b 82       	std	Y+3, r1	; 0x03
    52ce:	c9 58       	subi	r28, 0x89	; 137
    52d0:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    52d2:	c7 54       	subi	r28, 0x47	; 71
    52d4:	df 4f       	sbci	r29, 0xFF	; 255
    52d6:	28 81       	ld	r18, Y
    52d8:	39 81       	ldd	r19, Y+1	; 0x01
    52da:	4a 81       	ldd	r20, Y+2	; 0x02
    52dc:	5b 81       	ldd	r21, Y+3	; 0x03
    52de:	c9 5b       	subi	r28, 0xB9	; 185
    52e0:	d0 40       	sbci	r29, 0x00	; 0
    52e2:	ca 01       	movw	r24, r20
    52e4:	b9 01       	movw	r22, r18
    52e6:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    52ea:	c3 57       	subi	r28, 0x73	; 115
    52ec:	df 4f       	sbci	r29, 0xFF	; 255
    52ee:	68 83       	st	Y, r22
    52f0:	79 83       	std	Y+1, r23	; 0x01
    52f2:	8a 83       	std	Y+2, r24	; 0x02
    52f4:	9b 83       	std	Y+3, r25	; 0x03
    52f6:	cd 58       	subi	r28, 0x8D	; 141
    52f8:	d0 40       	sbci	r29, 0x00	; 0
    52fa:	cf 56       	subi	r28, 0x6F	; 111
    52fc:	df 4f       	sbci	r29, 0xFF	; 255
    52fe:	18 82       	st	Y, r1
    5300:	19 82       	std	Y+1, r1	; 0x01
    5302:	1a 82       	std	Y+2, r1	; 0x02
    5304:	1b 82       	std	Y+3, r1	; 0x03
    5306:	c1 59       	subi	r28, 0x91	; 145
    5308:	d0 40       	sbci	r29, 0x00	; 0
    530a:	cb 56       	subi	r28, 0x6B	; 107
    530c:	df 4f       	sbci	r29, 0xFF	; 255
    530e:	18 82       	st	Y, r1
    5310:	19 82       	std	Y+1, r1	; 0x01
    5312:	1a 82       	std	Y+2, r1	; 0x02
    5314:	1b 82       	std	Y+3, r1	; 0x03
    5316:	c5 59       	subi	r28, 0x95	; 149
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	c7 56       	subi	r28, 0x67	; 103
    531c:	df 4f       	sbci	r29, 0xFF	; 255
    531e:	18 82       	st	Y, r1
    5320:	19 82       	std	Y+1, r1	; 0x01
    5322:	1a 82       	std	Y+2, r1	; 0x02
    5324:	1b 82       	std	Y+3, r1	; 0x03
    5326:	c9 59       	subi	r28, 0x99	; 153
    5328:	d0 40       	sbci	r29, 0x00	; 0
    532a:	c3 56       	subi	r28, 0x63	; 99
    532c:	df 4f       	sbci	r29, 0xFF	; 255
    532e:	68 83       	st	Y, r22
    5330:	79 83       	std	Y+1, r23	; 0x01
    5332:	8a 83       	std	Y+2, r24	; 0x02
    5334:	9b 83       	std	Y+3, r25	; 0x03
    5336:	cd 59       	subi	r28, 0x9D	; 157
    5338:	d0 40       	sbci	r29, 0x00	; 0
    533a:	cf 55       	subi	r28, 0x5F	; 95
    533c:	df 4f       	sbci	r29, 0xFF	; 255
    533e:	18 82       	st	Y, r1
    5340:	19 82       	std	Y+1, r1	; 0x01
    5342:	1a 82       	std	Y+2, r1	; 0x02
    5344:	1b 82       	std	Y+3, r1	; 0x03
    5346:	c1 5a       	subi	r28, 0xA1	; 161
    5348:	d0 40       	sbci	r29, 0x00	; 0
    534a:	cb 55       	subi	r28, 0x5B	; 91
    534c:	df 4f       	sbci	r29, 0xFF	; 255
    534e:	18 82       	st	Y, r1
    5350:	19 82       	std	Y+1, r1	; 0x01
    5352:	1a 82       	std	Y+2, r1	; 0x02
    5354:	1b 82       	std	Y+3, r1	; 0x03
    5356:	c5 5a       	subi	r28, 0xA5	; 165
    5358:	d0 40       	sbci	r29, 0x00	; 0
    535a:	c7 55       	subi	r28, 0x57	; 87
    535c:	df 4f       	sbci	r29, 0xFF	; 255
    535e:	18 82       	st	Y, r1
    5360:	19 82       	std	Y+1, r1	; 0x01
    5362:	1a 82       	std	Y+2, r1	; 0x02
    5364:	1b 82       	std	Y+3, r1	; 0x03
    5366:	c9 5a       	subi	r28, 0xA9	; 169
    5368:	d0 40       	sbci	r29, 0x00	; 0
    536a:	c3 55       	subi	r28, 0x53	; 83
    536c:	df 4f       	sbci	r29, 0xFF	; 255
    536e:	68 83       	st	Y, r22
    5370:	79 83       	std	Y+1, r23	; 0x01
    5372:	8a 83       	std	Y+2, r24	; 0x02
    5374:	9b 83       	std	Y+3, r25	; 0x03
    5376:	cd 5a       	subi	r28, 0xAD	; 173
    5378:	d0 40       	sbci	r29, 0x00	; 0
    537a:	de 01       	movw	r26, r28
    537c:	ab 5b       	subi	r26, 0xBB	; 187
    537e:	bf 4f       	sbci	r27, 0xFF	; 255
    5380:	c3 54       	subi	r28, 0x43	; 67
    5382:	df 4f       	sbci	r29, 0xFF	; 255
    5384:	b9 83       	std	Y+1, r27	; 0x01
    5386:	a8 83       	st	Y, r26
    5388:	cd 5b       	subi	r28, 0xBD	; 189
    538a:	d0 40       	sbci	r29, 0x00	; 0
    538c:	c1 54       	subi	r28, 0x41	; 65
    538e:	df 4f       	sbci	r29, 0xFF	; 255
    5390:	19 83       	std	Y+1, r17	; 0x01
    5392:	08 83       	st	Y, r16
    5394:	cf 5b       	subi	r28, 0xBF	; 191
    5396:	d0 40       	sbci	r29, 0x00	; 0
    5398:	c9 54       	subi	r28, 0x49	; 73
    539a:	df 4f       	sbci	r29, 0xFF	; 255
    539c:	19 82       	std	Y+1, r1	; 0x01
    539e:	18 82       	st	Y, r1
    53a0:	c7 5b       	subi	r28, 0xB7	; 183
    53a2:	d0 40       	sbci	r29, 0x00	; 0
    53a4:	fe 01       	movw	r30, r28
    53a6:	bd 96       	adiw	r30, 0x2d	; 45
    53a8:	cf 54       	subi	r28, 0x4F	; 79
    53aa:	df 4f       	sbci	r29, 0xFF	; 255
    53ac:	f9 83       	std	Y+1, r31	; 0x01
    53ae:	e8 83       	st	Y, r30
    53b0:	c1 5b       	subi	r28, 0xB1	; 177
    53b2:	d0 40       	sbci	r29, 0x00	; 0
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    53b4:	cf 53       	subi	r28, 0x3F	; 63
    53b6:	df 4f       	sbci	r29, 0xFF	; 255
    53b8:	08 83       	st	Y, r16
    53ba:	c1 5c       	subi	r28, 0xC1	; 193
    53bc:	d0 40       	sbci	r29, 0x00	; 0
    53be:	ce 53       	subi	r28, 0x3E	; 62
    53c0:	df 4f       	sbci	r29, 0xFF	; 255
    53c2:	18 83       	st	Y, r17
    53c4:	c2 5c       	subi	r28, 0xC2	; 194
    53c6:	d0 40       	sbci	r29, 0x00	; 0
    53c8:	6c c0       	rjmp	.+216    	; 0x54a2 <omega_estimation+0x3fc>
    53ca:	cd 54       	subi	r28, 0x4D	; 77
    53cc:	df 4f       	sbci	r29, 0xFF	; 255
    53ce:	a8 81       	ld	r26, Y
    53d0:	b9 81       	ldd	r27, Y+1	; 0x01
    53d2:	c3 5b       	subi	r28, 0xB3	; 179
    53d4:	d0 40       	sbci	r29, 0x00	; 0
    53d6:	6d 91       	ld	r22, X+
    53d8:	7d 91       	ld	r23, X+
    53da:	8d 91       	ld	r24, X+
    53dc:	9d 91       	ld	r25, X+
    53de:	cd 54       	subi	r28, 0x4D	; 77
    53e0:	df 4f       	sbci	r29, 0xFF	; 255
    53e2:	b9 83       	std	Y+1, r27	; 0x01
    53e4:	a8 83       	st	Y, r26
    53e6:	c3 5b       	subi	r28, 0xB3	; 179
    53e8:	d0 40       	sbci	r29, 0x00	; 0
    53ea:	cb 54       	subi	r28, 0x4B	; 75
    53ec:	df 4f       	sbci	r29, 0xFF	; 255
    53ee:	e8 81       	ld	r30, Y
    53f0:	f9 81       	ldd	r31, Y+1	; 0x01
    53f2:	c5 5b       	subi	r28, 0xB5	; 181
    53f4:	d0 40       	sbci	r29, 0x00	; 0
    53f6:	21 91       	ld	r18, Z+
    53f8:	31 91       	ld	r19, Z+
    53fa:	41 91       	ld	r20, Z+
    53fc:	51 91       	ld	r21, Z+
    53fe:	cb 54       	subi	r28, 0x4B	; 75
    5400:	df 4f       	sbci	r29, 0xFF	; 255
    5402:	f9 83       	std	Y+1, r31	; 0x01
    5404:	e8 83       	st	Y, r30
    5406:	c5 5b       	subi	r28, 0xB5	; 181
    5408:	d0 40       	sbci	r29, 0x00	; 0
    540a:	d1 01       	movw	r26, r2
    540c:	4d 90       	ld	r4, X+
    540e:	5d 90       	ld	r5, X+
    5410:	6d 90       	ld	r6, X+
    5412:	7d 90       	ld	r7, X+
    5414:	1d 01       	movw	r2, r26
    5416:	8f d7       	rcall	.+3870   	; 0x6336 <__subsf3>
    5418:	6b 01       	movw	r12, r22
    541a:	7c 01       	movw	r14, r24
    541c:	a3 01       	movw	r20, r6
    541e:	92 01       	movw	r18, r4
    5420:	c5 01       	movw	r24, r10
    5422:	b4 01       	movw	r22, r8
    5424:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5428:	c7 54       	subi	r28, 0x47	; 71
    542a:	df 4f       	sbci	r29, 0xFF	; 255
    542c:	28 81       	ld	r18, Y
    542e:	39 81       	ldd	r19, Y+1	; 0x01
    5430:	4a 81       	ldd	r20, Y+2	; 0x02
    5432:	5b 81       	ldd	r21, Y+3	; 0x03
    5434:	c9 5b       	subi	r28, 0xB9	; 185
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	0e 94 80 32 	call	0x6500	; 0x6500 <__divsf3>
    543c:	9b 01       	movw	r18, r22
    543e:	ac 01       	movw	r20, r24
    5440:	c7 01       	movw	r24, r14
    5442:	b6 01       	movw	r22, r12
    5444:	79 d7       	rcall	.+3826   	; 0x6338 <__addsf3>
    5446:	f8 01       	movw	r30, r16
    5448:	60 83       	st	Z, r22
    544a:	71 83       	std	Z+1, r23	; 0x01
    544c:	82 83       	std	Z+2, r24	; 0x02
    544e:	93 83       	std	Z+3, r25	; 0x03
    5450:	04 5f       	subi	r16, 0xF4	; 244
    5452:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    5454:	cf 54       	subi	r28, 0x4F	; 79
    5456:	df 4f       	sbci	r29, 0xFF	; 255
    5458:	28 81       	ld	r18, Y
    545a:	39 81       	ldd	r19, Y+1	; 0x01
    545c:	c1 5b       	subi	r28, 0xB1	; 177
    545e:	d0 40       	sbci	r29, 0x00	; 0
    5460:	22 16       	cp	r2, r18
    5462:	33 06       	cpc	r3, r19
    5464:	09 f0       	breq	.+2      	; 0x5468 <omega_estimation+0x3c2>
    5466:	b1 cf       	rjmp	.-158    	; 0x53ca <omega_estimation+0x324>
    5468:	c9 54       	subi	r28, 0x49	; 73
    546a:	df 4f       	sbci	r29, 0xFF	; 255
    546c:	88 81       	ld	r24, Y
    546e:	99 81       	ldd	r25, Y+1	; 0x01
    5470:	c7 5b       	subi	r28, 0xB7	; 183
    5472:	d0 40       	sbci	r29, 0x00	; 0
    5474:	0c 96       	adiw	r24, 0x0c	; 12
    5476:	c9 54       	subi	r28, 0x49	; 73
    5478:	df 4f       	sbci	r29, 0xFF	; 255
    547a:	99 83       	std	Y+1, r25	; 0x01
    547c:	88 83       	st	Y, r24
    547e:	c7 5b       	subi	r28, 0xB7	; 183
    5480:	d0 40       	sbci	r29, 0x00	; 0
    5482:	c3 54       	subi	r28, 0x43	; 67
    5484:	df 4f       	sbci	r29, 0xFF	; 255
    5486:	a8 81       	ld	r26, Y
    5488:	b9 81       	ldd	r27, Y+1	; 0x01
    548a:	cd 5b       	subi	r28, 0xBD	; 189
    548c:	d0 40       	sbci	r29, 0x00	; 0
    548e:	14 96       	adiw	r26, 0x04	; 4
    5490:	c3 54       	subi	r28, 0x43	; 67
    5492:	df 4f       	sbci	r29, 0xFF	; 255
    5494:	b9 83       	std	Y+1, r27	; 0x01
    5496:	a8 83       	st	Y, r26
    5498:	cd 5b       	subi	r28, 0xBD	; 189
    549a:	d0 40       	sbci	r29, 0x00	; 0
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    549c:	84 97       	sbiw	r24, 0x24	; 36
    549e:	09 f4       	brne	.+2      	; 0x54a2 <omega_estimation+0x3fc>
    54a0:	44 c0       	rjmp	.+136    	; 0x552a <omega_estimation+0x484>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    54a2:	c1 54       	subi	r28, 0x41	; 65
    54a4:	df 4f       	sbci	r29, 0xFF	; 255
    54a6:	e8 81       	ld	r30, Y
    54a8:	f9 81       	ldd	r31, Y+1	; 0x01
    54aa:	cf 5b       	subi	r28, 0xBF	; 191
    54ac:	d0 40       	sbci	r29, 0x00	; 0
    54ae:	61 91       	ld	r22, Z+
    54b0:	71 91       	ld	r23, Z+
    54b2:	81 91       	ld	r24, Z+
    54b4:	91 91       	ld	r25, Z+
    54b6:	c1 54       	subi	r28, 0x41	; 65
    54b8:	df 4f       	sbci	r29, 0xFF	; 255
    54ba:	f9 83       	std	Y+1, r31	; 0x01
    54bc:	e8 83       	st	Y, r30
    54be:	cf 5b       	subi	r28, 0xBF	; 191
    54c0:	d0 40       	sbci	r29, 0x00	; 0
    54c2:	9b 01       	movw	r18, r22
    54c4:	ac 01       	movw	r20, r24
    54c6:	38 d7       	rcall	.+3696   	; 0x6338 <__addsf3>
    54c8:	4b 01       	movw	r8, r22
    54ca:	5c 01       	movw	r10, r24
    54cc:	c3 54       	subi	r28, 0x43	; 67
    54ce:	df 4f       	sbci	r29, 0xFF	; 255
    54d0:	08 81       	ld	r16, Y
    54d2:	19 81       	ldd	r17, Y+1	; 0x01
    54d4:	cd 5b       	subi	r28, 0xBD	; 189
    54d6:	d0 40       	sbci	r29, 0x00	; 0
    54d8:	cf 53       	subi	r28, 0x3F	; 63
    54da:	df 4f       	sbci	r29, 0xFF	; 255
    54dc:	28 80       	ld	r2, Y
    54de:	c1 5c       	subi	r28, 0xC1	; 193
    54e0:	d0 40       	sbci	r29, 0x00	; 0
    54e2:	ce 53       	subi	r28, 0x3E	; 62
    54e4:	df 4f       	sbci	r29, 0xFF	; 255
    54e6:	38 80       	ld	r3, Y
    54e8:	c2 5c       	subi	r28, 0xC2	; 194
    54ea:	d0 40       	sbci	r29, 0x00	; 0
    54ec:	29 e6       	ldi	r18, 0x69	; 105
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	2c 0f       	add	r18, r28
    54f2:	3d 1f       	adc	r19, r29
    54f4:	c9 54       	subi	r28, 0x49	; 73
    54f6:	df 4f       	sbci	r29, 0xFF	; 255
    54f8:	88 81       	ld	r24, Y
    54fa:	99 81       	ldd	r25, Y+1	; 0x01
    54fc:	c7 5b       	subi	r28, 0xB7	; 183
    54fe:	d0 40       	sbci	r29, 0x00	; 0
    5500:	28 0f       	add	r18, r24
    5502:	39 1f       	adc	r19, r25
    5504:	cb 54       	subi	r28, 0x4B	; 75
    5506:	df 4f       	sbci	r29, 0xFF	; 255
    5508:	39 83       	std	Y+1, r19	; 0x01
    550a:	28 83       	st	Y, r18
    550c:	c5 5b       	subi	r28, 0xB5	; 181
    550e:	d0 40       	sbci	r29, 0x00	; 0
    5510:	ad e8       	ldi	r26, 0x8D	; 141
    5512:	b0 e0       	ldi	r27, 0x00	; 0
    5514:	ac 0f       	add	r26, r28
    5516:	bd 1f       	adc	r27, r29
    5518:	a8 0f       	add	r26, r24
    551a:	b9 1f       	adc	r27, r25
    551c:	cd 54       	subi	r28, 0x4D	; 77
    551e:	df 4f       	sbci	r29, 0xFF	; 255
    5520:	b9 83       	std	Y+1, r27	; 0x01
    5522:	a8 83       	st	Y, r26
    5524:	c3 5b       	subi	r28, 0xB3	; 179
    5526:	d0 40       	sbci	r29, 0x00	; 0
    5528:	50 cf       	rjmp	.-352    	; 0x53ca <omega_estimation+0x324>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    552a:	ae 01       	movw	r20, r28
    552c:	47 5c       	subi	r20, 0xC7	; 199
    552e:	5f 4f       	sbci	r21, 0xFF	; 255
    5530:	be 01       	movw	r22, r28
    5532:	6b 5b       	subi	r22, 0xBB	; 187
    5534:	7f 4f       	sbci	r23, 0xFF	; 255
    5536:	ce 01       	movw	r24, r28
    5538:	8d 96       	adiw	r24, 0x2d	; 45
    553a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <vector_into_matrix>
    553e:	8e 01       	movw	r16, r28
    5540:	07 5c       	subi	r16, 0xC7	; 199
    5542:	1f 4f       	sbci	r17, 0xFF	; 255
    5544:	0f 2e       	mov	r0, r31
    5546:	fe e5       	ldi	r31, 0x5E	; 94
    5548:	cf 2e       	mov	r12, r31
    554a:	f4 e0       	ldi	r31, 0x04	; 4
    554c:	df 2e       	mov	r13, r31
    554e:	f0 2d       	mov	r31, r0
    5550:	cb 53       	subi	r28, 0x3B	; 59
    5552:	df 4f       	sbci	r29, 0xFF	; 255
    5554:	e8 80       	ld	r14, Y
    5556:	c5 5c       	subi	r28, 0xC5	; 197
    5558:	d0 40       	sbci	r29, 0x00	; 0
    555a:	ca 53       	subi	r28, 0x3A	; 58
    555c:	df 4f       	sbci	r29, 0xFF	; 255
    555e:	f8 80       	ld	r15, Y
    5560:	c6 5c       	subi	r28, 0xC6	; 198
    5562:	d0 40       	sbci	r29, 0x00	; 0
    5564:	18 01       	movw	r2, r16
    5566:	bc e0       	ldi	r27, 0x0C	; 12
    5568:	2b 0e       	add	r2, r27
    556a:	31 1c       	adc	r3, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    556c:	f8 01       	movw	r30, r16
    556e:	61 91       	ld	r22, Z+
    5570:	71 91       	ld	r23, Z+
    5572:	81 91       	ld	r24, Z+
    5574:	91 91       	ld	r25, Z+
    5576:	8f 01       	movw	r16, r30
    5578:	d6 01       	movw	r26, r12
    557a:	4d 90       	ld	r4, X+
    557c:	5d 90       	ld	r5, X+
    557e:	6d 90       	ld	r6, X+
    5580:	7d 90       	ld	r7, X+
    5582:	6d 01       	movw	r12, r26
    5584:	28 e0       	ldi	r18, 0x08	; 8
    5586:	31 e2       	ldi	r19, 0x21	; 33
    5588:	44 e0       	ldi	r20, 0x04	; 4
    558a:	5d e3       	ldi	r21, 0x3D	; 61
    558c:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5590:	4b 01       	movw	r8, r22
    5592:	5c 01       	movw	r10, r24
    5594:	20 ef       	ldi	r18, 0xF0	; 240
    5596:	3d eb       	ldi	r19, 0xBD	; 189
    5598:	47 e7       	ldi	r20, 0x77	; 119
    559a:	5f e3       	ldi	r21, 0x3F	; 63
    559c:	c3 01       	movw	r24, r6
    559e:	b2 01       	movw	r22, r4
    55a0:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    55a4:	9b 01       	movw	r18, r22
    55a6:	ac 01       	movw	r20, r24
    55a8:	c5 01       	movw	r24, r10
    55aa:	b4 01       	movw	r22, r8
    55ac:	c5 d6       	rcall	.+3466   	; 0x6338 <__addsf3>
    55ae:	f7 01       	movw	r30, r14
    55b0:	61 93       	st	Z+, r22
    55b2:	71 93       	st	Z+, r23
    55b4:	81 93       	st	Z+, r24
    55b6:	91 93       	st	Z+, r25
    55b8:	7f 01       	movw	r14, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    55ba:	02 15       	cp	r16, r2
    55bc:	13 05       	cpc	r17, r3
    55be:	b1 f6       	brne	.-84     	; 0x556c <omega_estimation+0x4c6>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    55c0:	6a e6       	ldi	r22, 0x6A	; 106
    55c2:	74 e0       	ldi	r23, 0x04	; 4
    55c4:	cd 53       	subi	r28, 0x3D	; 61
    55c6:	df 4f       	sbci	r29, 0xFF	; 255
    55c8:	88 81       	ld	r24, Y
    55ca:	c3 5c       	subi	r28, 0xC3	; 195
    55cc:	d0 40       	sbci	r29, 0x00	; 0
    55ce:	cc 53       	subi	r28, 0x3C	; 60
    55d0:	df 4f       	sbci	r29, 0xFF	; 255
    55d2:	98 81       	ld	r25, Y
    55d4:	c4 5c       	subi	r28, 0xC4	; 196
    55d6:	d0 40       	sbci	r29, 0x00	; 0
    55d8:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    55dc:	6e e5       	ldi	r22, 0x5E	; 94
    55de:	74 e0       	ldi	r23, 0x04	; 4
    55e0:	cb 53       	subi	r28, 0x3B	; 59
    55e2:	df 4f       	sbci	r29, 0xFF	; 255
    55e4:	88 81       	ld	r24, Y
    55e6:	c5 5c       	subi	r28, 0xC5	; 197
    55e8:	d0 40       	sbci	r29, 0x00	; 0
    55ea:	ca 53       	subi	r28, 0x3A	; 58
    55ec:	df 4f       	sbci	r29, 0xFF	; 255
    55ee:	98 81       	ld	r25, Y
    55f0:	c6 5c       	subi	r28, 0xC6	; 198
    55f2:	d0 40       	sbci	r29, 0x00	; 0
    55f4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    55f8:	ca 53       	subi	r28, 0x3A	; 58
    55fa:	df 4f       	sbci	r29, 0xFF	; 255
    55fc:	0f b6       	in	r0, 0x3f	; 63
    55fe:	f8 94       	cli
    5600:	de bf       	out	0x3e, r29	; 62
    5602:	0f be       	out	0x3f, r0	; 63
    5604:	cd bf       	out	0x3d, r28	; 61
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	1f 91       	pop	r17
    560c:	0f 91       	pop	r16
    560e:	ff 90       	pop	r15
    5610:	ef 90       	pop	r14
    5612:	df 90       	pop	r13
    5614:	cf 90       	pop	r12
    5616:	bf 90       	pop	r11
    5618:	af 90       	pop	r10
    561a:	9f 90       	pop	r9
    561c:	8f 90       	pop	r8
    561e:	7f 90       	pop	r7
    5620:	6f 90       	pop	r6
    5622:	5f 90       	pop	r5
    5624:	4f 90       	pop	r4
    5626:	3f 90       	pop	r3
    5628:	2f 90       	pop	r2
    562a:	08 95       	ret

0000562c <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    562c:	17 ba       	out	0x17, r1	; 23
    562e:	86 e0       	ldi	r24, 0x06	; 6
    5630:	87 bb       	out	0x17, r24	; 23
    5632:	87 b3       	in	r24, 0x17	; 23
    5634:	81 63       	ori	r24, 0x31	; 49
    5636:	87 bb       	out	0x17, r24	; 23
    5638:	88 b3       	in	r24, 0x18	; 24
    563a:	80 63       	ori	r24, 0x30	; 48
    563c:	88 bb       	out	0x18, r24	; 24
    563e:	c0 98       	cbi	0x18, 0	; 24
    5640:	8f e5       	ldi	r24, 0x5F	; 95
    5642:	8d b9       	out	0x0d, r24	; 13
    5644:	08 95       	ret

00005646 <SPI_transfer>:
}


uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
    5646:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
    5648:	77 9b       	sbis	0x0e, 7	; 14
    564a:	fe cf       	rjmp	.-4      	; 0x5648 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
    564c:	8f b1       	in	r24, 0x0f	; 15
}
    564e:	08 95       	ret

00005650 <poll_SS>:
	val=(val<<8)+vall;
	return val;
}

void poll_SS(void)
{
    5650:	2f 92       	push	r2
    5652:	3f 92       	push	r3
    5654:	4f 92       	push	r4
    5656:	5f 92       	push	r5
    5658:	6f 92       	push	r6
    565a:	7f 92       	push	r7
    565c:	8f 92       	push	r8
    565e:	9f 92       	push	r9
    5660:	af 92       	push	r10
    5662:	bf 92       	push	r11
    5664:	cf 92       	push	r12
    5666:	df 92       	push	r13
    5668:	ef 92       	push	r14
    566a:	ff 92       	push	r15
    566c:	0f 93       	push	r16
    566e:	1f 93       	push	r17
    5670:	cf 93       	push	r28
    5672:	df 93       	push	r29
    5674:	cd b7       	in	r28, 0x3d	; 61
    5676:	de b7       	in	r29, 0x3e	; 62
    5678:	2c 97       	sbiw	r28, 0x0c	; 12
    567a:	0f b6       	in	r0, 0x3f	; 63
    567c:	f8 94       	cli
    567e:	de bf       	out	0x3e, r29	; 62
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	cd bf       	out	0x3d, r28	; 61
	uint8_t valh6;
	uint8_t vall6;

	uint16_t val[6];//First sunsensor combined 16 bit value
	int8_t data_r;
  PORTB |= (1<<PB0);//Set Slave select of Slave OBC to 1
    5684:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~(1<<PB5);// Set slave select of ADC to 0
    5686:	c5 98       	cbi	0x18, 5	; 24
    5688:	8f ec       	ldi	r24, 0xCF	; 207
    568a:	97 e0       	ldi	r25, 0x07	; 7
    568c:	01 97       	sbiw	r24, 0x01	; 1
    568e:	f1 f7       	brne	.-4      	; 0x568c <poll_SS+0x3c>
    5690:	00 c0       	rjmp	.+0      	; 0x5692 <poll_SS+0x42>
    5692:	00 00       	nop
  //SPCR |=(1<<SPE);
  _delay_ms(1);
  data_r=SPI_transfer(0xFF); //Dummy transaction. Tell ADC that data transmission should begin now.
    5694:	8f ef       	ldi	r24, 0xFF	; 255
    5696:	d7 df       	rcall	.-82     	; 0x5646 <SPI_transfer>
    5698:	ef ec       	ldi	r30, 0xCF	; 207
    569a:	f7 e0       	ldi	r31, 0x07	; 7
    569c:	31 97       	sbiw	r30, 0x01	; 1
    569e:	f1 f7       	brne	.-4      	; 0x569c <poll_SS+0x4c>
    56a0:	00 c0       	rjmp	.+0      	; 0x56a2 <poll_SS+0x52>
    56a2:	00 00       	nop
  _delay_ms(1);
  //transmit_UART0(data_r);
  PORTA = 0xFF;
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	8b bb       	out	0x1b, r24	; 27
  vall1=SPI_transfer(0xFF);//First data byte
    56a8:	ce df       	rcall	.-100    	; 0x5646 <SPI_transfer>
    56aa:	b8 2e       	mov	r11, r24
    56ac:	8f ec       	ldi	r24, 0xCF	; 207
    56ae:	97 e0       	ldi	r25, 0x07	; 7
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	f1 f7       	brne	.-4      	; 0x56b0 <poll_SS+0x60>
    56b4:	00 c0       	rjmp	.+0      	; 0x56b6 <poll_SS+0x66>
    56b6:	00 00       	nop
  _delay_ms(1);
  valh1=SPI_transfer(0xFF);
    56b8:	8f ef       	ldi	r24, 0xFF	; 255
    56ba:	c5 df       	rcall	.-118    	; 0x5646 <SPI_transfer>
    56bc:	c8 2e       	mov	r12, r24
    56be:	ef ec       	ldi	r30, 0xCF	; 207
    56c0:	f7 e0       	ldi	r31, 0x07	; 7
    56c2:	31 97       	sbiw	r30, 0x01	; 1
    56c4:	f1 f7       	brne	.-4      	; 0x56c2 <poll_SS+0x72>
    56c6:	00 c0       	rjmp	.+0      	; 0x56c8 <poll_SS+0x78>
    56c8:	00 00       	nop
  _delay_ms(1);


  vall2=SPI_transfer(0xFF);
    56ca:	8f ef       	ldi	r24, 0xFF	; 255
    56cc:	bc df       	rcall	.-136    	; 0x5646 <SPI_transfer>
    56ce:	98 2e       	mov	r9, r24
    56d0:	8f ec       	ldi	r24, 0xCF	; 207
    56d2:	97 e0       	ldi	r25, 0x07	; 7
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <poll_SS+0x84>
    56d8:	00 c0       	rjmp	.+0      	; 0x56da <poll_SS+0x8a>
    56da:	00 00       	nop
  _delay_ms(1);
  valh2=SPI_transfer(0xFF);
    56dc:	8f ef       	ldi	r24, 0xFF	; 255
    56de:	b3 df       	rcall	.-154    	; 0x5646 <SPI_transfer>
    56e0:	a8 2e       	mov	r10, r24
    56e2:	ef ec       	ldi	r30, 0xCF	; 207
    56e4:	f7 e0       	ldi	r31, 0x07	; 7
    56e6:	31 97       	sbiw	r30, 0x01	; 1
    56e8:	f1 f7       	brne	.-4      	; 0x56e6 <poll_SS+0x96>
    56ea:	00 c0       	rjmp	.+0      	; 0x56ec <poll_SS+0x9c>
    56ec:	00 00       	nop
  _delay_ms(1);




  vall3=SPI_transfer(0xFF);
    56ee:	8f ef       	ldi	r24, 0xFF	; 255
    56f0:	aa df       	rcall	.-172    	; 0x5646 <SPI_transfer>
    56f2:	e8 2e       	mov	r14, r24
    56f4:	8f ec       	ldi	r24, 0xCF	; 207
    56f6:	97 e0       	ldi	r25, 0x07	; 7
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	f1 f7       	brne	.-4      	; 0x56f8 <poll_SS+0xa8>
    56fc:	00 c0       	rjmp	.+0      	; 0x56fe <poll_SS+0xae>
    56fe:	00 00       	nop
  _delay_ms(1);
  valh3=SPI_transfer(0xFF);
    5700:	8f ef       	ldi	r24, 0xFF	; 255
    5702:	a1 df       	rcall	.-190    	; 0x5646 <SPI_transfer>
    5704:	88 2e       	mov	r8, r24
    5706:	ef ec       	ldi	r30, 0xCF	; 207
    5708:	f7 e0       	ldi	r31, 0x07	; 7
    570a:	31 97       	sbiw	r30, 0x01	; 1
    570c:	f1 f7       	brne	.-4      	; 0x570a <poll_SS+0xba>
    570e:	00 c0       	rjmp	.+0      	; 0x5710 <poll_SS+0xc0>
    5710:	00 00       	nop
  _delay_ms(1);



  vall4=SPI_transfer(0xFF);
    5712:	8f ef       	ldi	r24, 0xFF	; 255
    5714:	98 df       	rcall	.-208    	; 0x5646 <SPI_transfer>
    5716:	f8 2e       	mov	r15, r24
    5718:	8f ec       	ldi	r24, 0xCF	; 207
    571a:	97 e0       	ldi	r25, 0x07	; 7
    571c:	01 97       	sbiw	r24, 0x01	; 1
    571e:	f1 f7       	brne	.-4      	; 0x571c <poll_SS+0xcc>
    5720:	00 c0       	rjmp	.+0      	; 0x5722 <poll_SS+0xd2>
    5722:	00 00       	nop
  _delay_ms(1);
  valh4=SPI_transfer(0xFF);
    5724:	8f ef       	ldi	r24, 0xFF	; 255
    5726:	8f df       	rcall	.-226    	; 0x5646 <SPI_transfer>
    5728:	68 2e       	mov	r6, r24
    572a:	ef ec       	ldi	r30, 0xCF	; 207
    572c:	f7 e0       	ldi	r31, 0x07	; 7
    572e:	31 97       	sbiw	r30, 0x01	; 1
    5730:	f1 f7       	brne	.-4      	; 0x572e <poll_SS+0xde>
    5732:	00 c0       	rjmp	.+0      	; 0x5734 <poll_SS+0xe4>
    5734:	00 00       	nop
  _delay_ms(1);



  vall5=SPI_transfer(0xFF);
    5736:	8f ef       	ldi	r24, 0xFF	; 255
    5738:	86 df       	rcall	.-244    	; 0x5646 <SPI_transfer>
    573a:	08 2f       	mov	r16, r24
    573c:	8f ec       	ldi	r24, 0xCF	; 207
    573e:	97 e0       	ldi	r25, 0x07	; 7
    5740:	01 97       	sbiw	r24, 0x01	; 1
    5742:	f1 f7       	brne	.-4      	; 0x5740 <poll_SS+0xf0>
    5744:	00 c0       	rjmp	.+0      	; 0x5746 <poll_SS+0xf6>
    5746:	00 00       	nop
  _delay_ms(1);
  valh5=SPI_transfer(0xFF);
    5748:	8f ef       	ldi	r24, 0xFF	; 255
    574a:	7d df       	rcall	.-262    	; 0x5646 <SPI_transfer>
    574c:	48 2e       	mov	r4, r24
    574e:	ef ec       	ldi	r30, 0xCF	; 207
    5750:	f7 e0       	ldi	r31, 0x07	; 7
    5752:	31 97       	sbiw	r30, 0x01	; 1
    5754:	f1 f7       	brne	.-4      	; 0x5752 <poll_SS+0x102>
    5756:	00 c0       	rjmp	.+0      	; 0x5758 <poll_SS+0x108>
    5758:	00 00       	nop
  _delay_ms(1);



  vall6=SPI_transfer(0xFF);
    575a:	8f ef       	ldi	r24, 0xFF	; 255
    575c:	74 df       	rcall	.-280    	; 0x5646 <SPI_transfer>
    575e:	18 2f       	mov	r17, r24
    5760:	8f ec       	ldi	r24, 0xCF	; 207
    5762:	97 e0       	ldi	r25, 0x07	; 7
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <poll_SS+0x114>
    5768:	00 c0       	rjmp	.+0      	; 0x576a <poll_SS+0x11a>
    576a:	00 00       	nop
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
    576c:	8f ef       	ldi	r24, 0xFF	; 255
    576e:	6b df       	rcall	.-298    	; 0x5646 <SPI_transfer>
    5770:	ef ec       	ldi	r30, 0xCF	; 207
    5772:	f7 e0       	ldi	r31, 0x07	; 7
    5774:	31 97       	sbiw	r30, 0x01	; 1
    5776:	f1 f7       	brne	.-4      	; 0x5774 <poll_SS+0x124>
    5778:	00 c0       	rjmp	.+0      	; 0x577a <poll_SS+0x12a>
    577a:	00 00       	nop
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    577c:	d1 2c       	mov	r13, r1
	val=(val<<8)+vall;
    577e:	dc 2c       	mov	r13, r12
    5780:	cc 24       	eor	r12, r12
    5782:	cb 0c       	add	r12, r11
    5784:	d1 1c       	adc	r13, r1

  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
    5786:	da 82       	std	Y+2, r13	; 0x02
    5788:	c9 82       	std	Y+1, r12	; 0x01
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    578a:	b1 2c       	mov	r11, r1
	val=(val<<8)+vall;
    578c:	ba 2c       	mov	r11, r10
    578e:	aa 24       	eor	r10, r10
    5790:	a9 0c       	add	r10, r9
    5792:	b1 1c       	adc	r11, r1
  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
    5794:	bc 82       	std	Y+4, r11	; 0x04
    5796:	ab 82       	std	Y+3, r10	; 0x03
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5798:	91 2c       	mov	r9, r1
	val=(val<<8)+vall;
    579a:	98 2c       	mov	r9, r8
    579c:	88 24       	eor	r8, r8
    579e:	8e 0c       	add	r8, r14
    57a0:	91 1c       	adc	r9, r1
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
    57a2:	9e 82       	std	Y+6, r9	; 0x06
    57a4:	8d 82       	std	Y+5, r8	; 0x05
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    57a6:	71 2c       	mov	r7, r1
	val=(val<<8)+vall;
    57a8:	76 2c       	mov	r7, r6
    57aa:	66 24       	eor	r6, r6
    57ac:	6f 0c       	add	r6, r15
    57ae:	71 1c       	adc	r7, r1
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
    57b0:	78 86       	std	Y+8, r7	; 0x08
    57b2:	6f 82       	std	Y+7, r6	; 0x07
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    57b4:	51 2c       	mov	r5, r1
	val=(val<<8)+vall;
    57b6:	54 2c       	mov	r5, r4
    57b8:	44 24       	eor	r4, r4
    57ba:	40 0e       	add	r4, r16
    57bc:	51 1c       	adc	r5, r1
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
    57be:	5a 86       	std	Y+10, r5	; 0x0a
    57c0:	49 86       	std	Y+9, r4	; 0x09
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    57c2:	28 2e       	mov	r2, r24
    57c4:	31 2c       	mov	r3, r1
	val=(val<<8)+vall;
    57c6:	32 2c       	mov	r3, r2
    57c8:	22 24       	eor	r2, r2
    57ca:	21 0e       	add	r2, r17
    57cc:	31 1c       	adc	r3, r1
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);
    57ce:	3c 86       	std	Y+12, r3	; 0x0c
    57d0:	2b 86       	std	Y+11, r2	; 0x0b
    57d2:	ce 01       	movw	r24, r28
    57d4:	01 96       	adiw	r24, 0x01	; 1
    57d6:	7c 01       	movw	r14, r24

  for (int i=0;i<6;i=i+1)
    57d8:	00 e0       	ldi	r16, 0x00	; 0
    57da:	10 e0       	ldi	r17, 0x00	; 0
  {
	  Current_state.ss.read[i] = (double)(((double)val[i]*3.3/1024.0));//Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i]*3.3/1024)-1.65)*2;
    57dc:	f7 01       	movw	r30, r14
    57de:	61 91       	ld	r22, Z+
    57e0:	71 91       	ld	r23, Z+
    57e2:	7f 01       	movw	r14, r30
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	24 d7       	rcall	.+3656   	; 0x6632 <__floatunsisf>
    57ea:	23 e3       	ldi	r18, 0x33	; 51
    57ec:	33 e3       	ldi	r19, 0x33	; 51
    57ee:	43 e5       	ldi	r20, 0x53	; 83
    57f0:	50 e4       	ldi	r21, 0x40	; 64
    57f2:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	40 e8       	ldi	r20, 0x80	; 128
    57fc:	5a e3       	ldi	r21, 0x3A	; 58
    57fe:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5802:	f8 01       	movw	r30, r16
    5804:	ee 0f       	add	r30, r30
    5806:	ff 1f       	adc	r31, r31
    5808:	ee 0f       	add	r30, r30
    580a:	ff 1f       	adc	r31, r31
    580c:	e9 53       	subi	r30, 0x39	; 57
    580e:	fb 4f       	sbci	r31, 0xFB	; 251
    5810:	61 ab       	std	Z+49, r22	; 0x31
    5812:	72 ab       	std	Z+50, r23	; 0x32
    5814:	83 ab       	std	Z+51, r24	; 0x33
    5816:	94 ab       	std	Z+52, r25	; 0x34
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);

  for (int i=0;i<6;i=i+1)
    5818:	0f 5f       	subi	r16, 0xFF	; 255
    581a:	1f 4f       	sbci	r17, 0xFF	; 255
    581c:	06 30       	cpi	r16, 0x06	; 6
    581e:	11 05       	cpc	r17, r1
    5820:	e9 f6       	brne	.-70     	; 0x57dc <poll_SS+0x18c>
    5822:	00 e0       	ldi	r16, 0x00	; 0
    5824:	10 e0       	ldi	r17, 0x00	; 0
  
  uint8_t sen;
 // transmit_UART0('A');
  for(int i=0;i<6;i=i+1)
  {
	  sen = (Current_state.ss.read[i]*255/3.3);
    5826:	f8 01       	movw	r30, r16
    5828:	ee 0f       	add	r30, r30
    582a:	ff 1f       	adc	r31, r31
    582c:	ee 0f       	add	r30, r30
    582e:	ff 1f       	adc	r31, r31
    5830:	e9 53       	subi	r30, 0x39	; 57
    5832:	fb 4f       	sbci	r31, 0xFB	; 251
    5834:	61 a9       	ldd	r22, Z+49	; 0x31
    5836:	72 a9       	ldd	r23, Z+50	; 0x32
    5838:	83 a9       	ldd	r24, Z+51	; 0x33
    583a:	94 a9       	ldd	r25, Z+52	; 0x34
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	4f e7       	ldi	r20, 0x7F	; 127
    5842:	53 e4       	ldi	r21, 0x43	; 67
    5844:	0e 94 9e 34 	call	0x693c	; 0x693c <__mulsf3>
    5848:	23 e3       	ldi	r18, 0x33	; 51
    584a:	33 e3       	ldi	r19, 0x33	; 51
    584c:	43 e5       	ldi	r20, 0x53	; 83
    584e:	50 e4       	ldi	r21, 0x40	; 64
    5850:	57 d6       	rcall	.+3246   	; 0x6500 <__divsf3>
    5852:	c3 d6       	rcall	.+3462   	; 0x65da <__fixunssfsi>
	  transmit_UART0(sen);
    5854:	86 2f       	mov	r24, r22
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	6c d0       	rcall	.+216    	; 0x5932 <transmit_UART0>
	  Current_state.ss.read[i] = (double)(((double)val[i]*3.3/1024.0));//Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i]*3.3/1024)-1.65)*2;
  }
  
  uint8_t sen;
 // transmit_UART0('A');
  for(int i=0;i<6;i=i+1)
    585a:	0f 5f       	subi	r16, 0xFF	; 255
    585c:	1f 4f       	sbci	r17, 0xFF	; 255
    585e:	06 30       	cpi	r16, 0x06	; 6
    5860:	11 05       	cpc	r17, r1
    5862:	09 f7       	brne	.-62     	; 0x5826 <poll_SS+0x1d6>
  {
	  sen = (Current_state.ss.read[i]*255/3.3);
	  transmit_UART0(sen);
  }
  ///////////////////////////////////
  if ((val[0]>30000)||(val[1]>30000)||(val[2]>30000)||(val[3]>30000)||(val[4]>30000)||(val[5]>30000))
    5864:	f1 e3       	ldi	r31, 0x31	; 49
    5866:	cf 16       	cp	r12, r31
    5868:	f5 e7       	ldi	r31, 0x75	; 117
    586a:	df 06       	cpc	r13, r31
    586c:	c8 f4       	brcc	.+50     	; 0x58a0 <poll_SS+0x250>
    586e:	21 e3       	ldi	r18, 0x31	; 49
    5870:	a2 16       	cp	r10, r18
    5872:	25 e7       	ldi	r18, 0x75	; 117
    5874:	b2 06       	cpc	r11, r18
    5876:	a0 f4       	brcc	.+40     	; 0x58a0 <poll_SS+0x250>
    5878:	81 e3       	ldi	r24, 0x31	; 49
    587a:	88 16       	cp	r8, r24
    587c:	85 e7       	ldi	r24, 0x75	; 117
    587e:	98 06       	cpc	r9, r24
    5880:	78 f4       	brcc	.+30     	; 0x58a0 <poll_SS+0x250>
    5882:	91 e3       	ldi	r25, 0x31	; 49
    5884:	69 16       	cp	r6, r25
    5886:	95 e7       	ldi	r25, 0x75	; 117
    5888:	79 06       	cpc	r7, r25
    588a:	50 f4       	brcc	.+20     	; 0x58a0 <poll_SS+0x250>
    588c:	e1 e3       	ldi	r30, 0x31	; 49
    588e:	4e 16       	cp	r4, r30
    5890:	e5 e7       	ldi	r30, 0x75	; 117
    5892:	5e 06       	cpc	r5, r30
    5894:	28 f4       	brcc	.+10     	; 0x58a0 <poll_SS+0x250>
    5896:	f1 e3       	ldi	r31, 0x31	; 49
    5898:	2f 16       	cp	r2, r31
    589a:	f5 e7       	ldi	r31, 0x75	; 117
    589c:	3f 06       	cpc	r3, r31
    589e:	48 f0       	brcs	.+18     	; 0x58b2 <poll_SS+0x262>
    58a0:	2f ef       	ldi	r18, 0xFF	; 255
    58a2:	8d e3       	ldi	r24, 0x3D	; 61
    58a4:	99 e4       	ldi	r25, 0x49	; 73
    58a6:	21 50       	subi	r18, 0x01	; 1
    58a8:	80 40       	sbci	r24, 0x00	; 0
    58aa:	90 40       	sbci	r25, 0x00	; 0
    58ac:	e1 f7       	brne	.-8      	; 0x58a6 <poll_SS+0x256>
    58ae:	00 c0       	rjmp	.+0      	; 0x58b0 <poll_SS+0x260>
    58b0:	00 00       	nop
  {
	  _delay_ms(3000);
  }
  ///////////////////////////////////
 
  PORTB |= (1<<PB5);
    58b2:	c5 9a       	sbi	0x18, 5	; 24
  //_delay_ms(1000);
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
}
    58b4:	2c 96       	adiw	r28, 0x0c	; 12
    58b6:	0f b6       	in	r0, 0x3f	; 63
    58b8:	f8 94       	cli
    58ba:	de bf       	out	0x3e, r29	; 62
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	cd bf       	out	0x3d, r28	; 61
    58c0:	df 91       	pop	r29
    58c2:	cf 91       	pop	r28
    58c4:	1f 91       	pop	r17
    58c6:	0f 91       	pop	r16
    58c8:	ff 90       	pop	r15
    58ca:	ef 90       	pop	r14
    58cc:	df 90       	pop	r13
    58ce:	cf 90       	pop	r12
    58d0:	bf 90       	pop	r11
    58d2:	af 90       	pop	r10
    58d4:	9f 90       	pop	r9
    58d6:	8f 90       	pop	r8
    58d8:	7f 90       	pop	r7
    58da:	6f 90       	pop	r6
    58dc:	5f 90       	pop	r5
    58de:	4f 90       	pop	r4
    58e0:	3f 90       	pop	r3
    58e2:	2f 90       	pop	r2
    58e4:	08 95       	ret

000058e6 <timer_reset_two_sec>:
    
}

void watch_dog(int time){
  wdt_disable();
  wdt_enable(time);
    58e6:	86 b7       	in	r24, 0x36	; 54
    58e8:	80 61       	ori	r24, 0x10	; 16
    58ea:	86 bf       	out	0x36, r24	; 54
    58ec:	1e bc       	out	0x2e, r1	; 46
    58ee:	1d bc       	out	0x2d, r1	; 45
    58f0:	1c bc       	out	0x2c, r1	; 44
    58f2:	88 e0       	ldi	r24, 0x08	; 8
    58f4:	9d e3       	ldi	r25, 0x3D	; 61
    58f6:	9b bd       	out	0x2b, r25	; 43
    58f8:	8a bd       	out	0x2a, r24	; 42
    58fa:	1f bc       	out	0x2f, r1	; 47
    58fc:	85 e0       	ldi	r24, 0x05	; 5
    58fe:	8e bd       	out	0x2e, r24	; 46
    5900:	10 92 7a 00 	sts	0x007A, r1
    5904:	08 95       	ret

00005906 <timer_wait_reset>:
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5906:	06 b6       	in	r0, 0x36	; 54
    5908:	04 fe       	sbrs	r0, 4
    590a:	fd cf       	rjmp	.-6      	; 0x5906 <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    590c:	ec cf       	rjmp	.-40     	; 0x58e6 <timer_reset_two_sec>
    590e:	08 95       	ret

00005910 <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
    5910:	1b b8       	out	0x0b, r1	; 11
    5912:	1a b8       	out	0x0a, r1	; 10
    5914:	e5 e9       	ldi	r30, 0x95	; 149
    5916:	f0 e0       	ldi	r31, 0x00	; 0
    5918:	10 82       	st	Z, r1
    591a:	59 9a       	sbi	0x0b, 1	; 11
    591c:	8a b1       	in	r24, 0x0a	; 10
    591e:	88 61       	ori	r24, 0x18	; 24
    5920:	8a b9       	out	0x0a, r24	; 10
    5922:	80 81       	ld	r24, Z
    5924:	8e 60       	ori	r24, 0x0E	; 14
    5926:	80 83       	st	Z, r24
    5928:	87 e6       	ldi	r24, 0x67	; 103
    592a:	89 b9       	out	0x09, r24	; 9
    592c:	10 92 90 00 	sts	0x0090, r1
    5930:	08 95       	ret

00005932 <transmit_UART0>:
    5932:	5d 9b       	sbis	0x0b, 5	; 11
    5934:	fe cf       	rjmp	.-4      	; 0x5932 <transmit_UART0>
    5936:	8c b9       	out	0x0c, r24	; 12
    5938:	08 95       	ret

0000593a <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    593a:	fc 01       	movw	r30, r24
    593c:	20 81       	ld	r18, Z
    593e:	22 23       	and	r18, r18
    5940:	39 f0       	breq	.+14     	; 0x5950 <transmit_string_UART0+0x16>
    5942:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
    5944:	5d 9b       	sbis	0x0b, 5	; 11
    5946:	fe cf       	rjmp	.-4      	; 0x5944 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
    5948:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    594a:	21 91       	ld	r18, Z+
    594c:	21 11       	cpse	r18, r1
    594e:	fa cf       	rjmp	.-12     	; 0x5944 <transmit_string_UART0+0xa>
    5950:	08 95       	ret

00005952 <TWI_init_master>:
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
}
    5952:	10 92 71 00 	sts	0x0071, r1
    5956:	10 92 74 00 	sts	0x0074, r1
    595a:	8c e0       	ldi	r24, 0x0C	; 12
    595c:	80 93 70 00 	sts	0x0070, r24
    5960:	08 95       	ret

00005962 <TWI_start>:
    5962:	84 ea       	ldi	r24, 0xA4	; 164
    5964:	80 93 74 00 	sts	0x0074, r24
    5968:	e4 e7       	ldi	r30, 0x74	; 116
    596a:	f0 e0       	ldi	r31, 0x00	; 0
    596c:	80 81       	ld	r24, Z
    596e:	88 23       	and	r24, r24
    5970:	ec f7       	brge	.-6      	; 0x596c <TWI_start+0xa>
    5972:	e1 e7       	ldi	r30, 0x71	; 113
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	80 81       	ld	r24, Z
    5978:	88 7f       	andi	r24, 0xF8	; 248
    597a:	88 30       	cpi	r24, 0x08	; 8
    597c:	e1 f7       	brne	.-8      	; 0x5976 <TWI_start+0x14>
    597e:	08 95       	ret

00005980 <TWI_write_address>:

void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
    5980:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    5984:	84 e8       	ldi	r24, 0x84	; 132
    5986:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    598a:	a4 e7       	ldi	r26, 0x74	; 116
    598c:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    598e:	e1 e7       	ldi	r30, 0x71	; 113
    5990:	f0 e0       	ldi	r31, 0x00	; 0
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    5992:	04 c0       	rjmp	.+8      	; 0x599c <TWI_write_address+0x1c>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    5994:	80 81       	ld	r24, Z
    5996:	88 7f       	andi	r24, 0xF8	; 248
    5998:	88 31       	cpi	r24, 0x18	; 24
    599a:	e1 f7       	brne	.-8      	; 0x5994 <TWI_write_address+0x14>
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    599c:	8c 91       	ld	r24, X
    599e:	88 23       	and	r24, r24
    59a0:	cc f7       	brge	.-14     	; 0x5994 <TWI_write_address+0x14>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement

}
    59a2:	08 95       	ret

000059a4 <TWI_read_address>:

void TWI_read_address(unsigned char data) //Function for slave side to read address sent by Master
{
	TWDR=data; // Address and read instruction
    59a4:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    59a8:	84 e8       	ldi	r24, 0x84	; 132
    59aa:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    59ae:	e4 e7       	ldi	r30, 0x74	; 116
    59b0:	f0 e0       	ldi	r31, 0x00	; 0
    59b2:	80 81       	ld	r24, Z
    59b4:	88 23       	and	r24, r24
    59b6:	ec f7       	brge	.-6      	; 0x59b2 <TWI_read_address+0xe>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    59b8:	e1 e7       	ldi	r30, 0x71	; 113
    59ba:	f0 e0       	ldi	r31, 0x00	; 0
    59bc:	80 81       	ld	r24, Z
    59be:	88 7f       	andi	r24, 0xF8	; 248
    59c0:	80 34       	cpi	r24, 0x40	; 64
    59c2:	e1 f7       	brne	.-8      	; 0x59bc <TWI_read_address+0x18>
}
    59c4:	08 95       	ret

000059c6 <TWI_write_data>:

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
	TWDR=data; // put data in TWDR
    59c6:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    59ca:	84 e8       	ldi	r24, 0x84	; 132
    59cc:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    59d0:	e4 e7       	ldi	r30, 0x74	; 116
    59d2:	f0 e0       	ldi	r31, 0x00	; 0
    59d4:	80 81       	ld	r24, Z
    59d6:	88 23       	and	r24, r24
    59d8:	ec f7       	brge	.-6      	; 0x59d4 <TWI_write_data+0xe>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    59da:	e1 e7       	ldi	r30, 0x71	; 113
    59dc:	f0 e0       	ldi	r31, 0x00	; 0
    59de:	80 81       	ld	r24, Z
    59e0:	88 7f       	andi	r24, 0xF8	; 248
    59e2:	88 32       	cpi	r24, 0x28	; 40
    59e4:	e1 f7       	brne	.-8      	; 0x59de <TWI_write_data+0x18>
}
    59e6:	08 95       	ret

000059e8 <TWI_read_data>:

void TWI_read_data(void) //Function to read data from I2C data line
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    59e8:	84 e8       	ldi	r24, 0x84	; 132
    59ea:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    59ee:	e4 e7       	ldi	r30, 0x74	; 116
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	80 81       	ld	r24, Z
    59f4:	88 23       	and	r24, r24
    59f6:	ec f7       	brge	.-6      	; 0x59f2 <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    59f8:	e1 e7       	ldi	r30, 0x71	; 113
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	80 81       	ld	r24, Z
    59fe:	88 7f       	andi	r24, 0xF8	; 248
    5a00:	88 35       	cpi	r24, 0x58	; 88
    5a02:	e1 f7       	brne	.-8      	; 0x59fc <TWI_read_data+0x14>
	recv_data=TWDR;//PORTA=recv_data;
    5a04:	80 91 73 00 	lds	r24, 0x0073
    5a08:	80 93 2c 05 	sts	0x052C, r24
    5a0c:	08 95       	ret

00005a0e <TWI_stop>:
}

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    5a0e:	84 e9       	ldi	r24, 0x94	; 148
    5a10:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    5a14:	e4 e7       	ldi	r30, 0x74	; 116
    5a16:	f0 e0       	ldi	r31, 0x00	; 0
    5a18:	80 81       	ld	r24, Z
    5a1a:	84 ff       	sbrs	r24, 4
    5a1c:	fd cf       	rjmp	.-6      	; 0x5a18 <TWI_stop+0xa>
}
    5a1e:	08 95       	ret

00005a20 <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    5a20:	e5 e3       	ldi	r30, 0x35	; 53
    5a22:	f5 e0       	ldi	r31, 0x05	; 5
    5a24:	8c e3       	ldi	r24, 0x3C	; 60
    5a26:	95 e0       	ldi	r25, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    5a28:	3f ef       	ldi	r19, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    5a2a:	21 91       	ld	r18, Z+
    5a2c:	2f b9       	out	0x0f, r18	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5a2e:	77 9b       	sbis	0x0e, 7	; 14
    5a30:	fe cf       	rjmp	.-4      	; 0x5a2e <SendHM+0xe>
		 PORTA = 0xFF;
    5a32:	3b bb       	out	0x1b, r19	; 27
    5a34:	af ec       	ldi	r26, 0xCF	; 207
    5a36:	b7 e0       	ldi	r27, 0x07	; 7
    5a38:	11 97       	sbiw	r26, 0x01	; 1
    5a3a:	f1 f7       	brne	.-4      	; 0x5a38 <SendHM+0x18>
    5a3c:	00 c0       	rjmp	.+0      	; 0x5a3e <SendHM+0x1e>
    5a3e:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    5a40:	e8 17       	cp	r30, r24
    5a42:	f9 07       	cpc	r31, r25
    5a44:	91 f7       	brne	.-28     	; 0x5a2a <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    5a46:	08 95       	ret

00005a48 <main>:


int main(void){
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62
    5a50:	68 97       	sbiw	r28, 0x18	; 24
    5a52:	0f b6       	in	r0, 0x3f	; 63
    5a54:	f8 94       	cli
    5a56:	de bf       	out	0x3e, r29	; 62
    5a58:	0f be       	out	0x3f, r0	; 63
    5a5a:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    5a5c:	e7 dd       	rcall	.-1074   	; 0x562c <init_SPI>
  init_UART0();
    5a5e:	58 df       	rcall	.-336    	; 0x5910 <init_UART0>
  init_UART_MM();
    5a60:	0e 94 df 1b 	call	0x37be	; 0x37be <init_UART_MM>
  configure_torquer();
    5a64:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <configure_torquer>
  DDRA=0xF0;
    5a68:	80 ef       	ldi	r24, 0xF0	; 240
    5a6a:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5a6c:	10 92 e8 04 	sts	0x04E8, r1
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    5a70:	87 b3       	in	r24, 0x17	; 23
    5a72:	81 62       	ori	r24, 0x21	; 33
    5a74:	87 bb       	out	0x17, r24	; 23
    5a76:	2f ef       	ldi	r18, 0xFF	; 255
    5a78:	33 ed       	ldi	r19, 0xD3	; 211
    5a7a:	80 e3       	ldi	r24, 0x30	; 48
    5a7c:	21 50       	subi	r18, 0x01	; 1
    5a7e:	30 40       	sbci	r19, 0x00	; 0
    5a80:	80 40       	sbci	r24, 0x00	; 0
    5a82:	e1 f7       	brne	.-8      	; 0x5a7c <main+0x34>
    5a84:	00 c0       	rjmp	.+0      	; 0x5a86 <main+0x3e>
    5a86:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5a88:	80 ed       	ldi	r24, 0xD0	; 208
    5a8a:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5a8c:	62 df       	rcall	.-316    	; 0x5952 <TWI_init_master>
  transmit_string_UART0("Flight");// uncomment afetrwards
    5a8e:	86 e9       	ldi	r24, 0x96	; 150
    5a90:	91 e0       	ldi	r25, 0x01	; 1
    5a92:	53 df       	rcall	.-346    	; 0x593a <transmit_string_UART0>
  transmit_string_UART0("Code");
    5a94:	8d e9       	ldi	r24, 0x9D	; 157
    5a96:	91 e0       	ldi	r25, 0x01	; 1
    5a98:	50 df       	rcall	.-352    	; 0x593a <transmit_string_UART0>
    5a9a:	9f ef       	ldi	r25, 0xFF	; 255
    5a9c:	a1 e1       	ldi	r26, 0x11	; 17
    5a9e:	ba e7       	ldi	r27, 0x7A	; 122
    5aa0:	91 50       	subi	r25, 0x01	; 1
    5aa2:	a0 40       	sbci	r26, 0x00	; 0
    5aa4:	b0 40       	sbci	r27, 0x00	; 0
    5aa6:	e1 f7       	brne	.-8      	; 0x5aa0 <main+0x58>
    5aa8:	00 c0       	rjmp	.+0      	; 0x5aaa <main+0x62>
    5aaa:	00 00       	nop
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    5aac:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    5aae:	10 92 2d 05 	sts	0x052D, r1
    5ab2:	10 92 2e 05 	sts	0x052E, r1
    5ab6:	10 92 2f 05 	sts	0x052F, r1
    5aba:	10 92 30 05 	sts	0x0530, r1
    5abe:	10 92 31 05 	sts	0x0531, r1
    5ac2:	10 92 32 05 	sts	0x0532, r1
    5ac6:	10 92 33 05 	sts	0x0533, r1
    5aca:	10 92 34 05 	sts	0x0534, r1
    5ace:	0f 2e       	mov	r0, r31
    5ad0:	fc e3       	ldi	r31, 0x3C	; 60
    5ad2:	2f 2e       	mov	r2, r31
    5ad4:	f5 e0       	ldi	r31, 0x05	; 5
    5ad6:	3f 2e       	mov	r3, r31
    5ad8:	f0 2d       	mov	r31, r0
       */
	 
	  
  while (1)
  {
	  timer_reset_two_sec();
    5ada:	05 df       	rcall	.-502    	; 0x58e6 <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5adc:	80 91 22 01 	lds	r24, 0x0122
    5ae0:	84 30       	cpi	r24, 0x04	; 4
    5ae2:	31 f4       	brne	.+12     	; 0x5af0 <main+0xa8>
    5ae4:	80 91 21 01 	lds	r24, 0x0121
    5ae8:	8c 64       	ori	r24, 0x4C	; 76
    5aea:	80 93 21 01 	sts	0x0121, r24
    5aee:	07 c0       	rjmp	.+14     	; 0x5afe <main+0xb6>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5af0:	81 30       	cpi	r24, 0x01	; 1
    5af2:	29 f4       	brne	.+10     	; 0x5afe <main+0xb6>
    5af4:	80 91 21 01 	lds	r24, 0x0121
    5af8:	8c 6c       	ori	r24, 0xCC	; 204
    5afa:	80 93 21 01 	sts	0x0121, r24
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5afe:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5b00:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5b02:	e9 ee       	ldi	r30, 0xE9	; 233
    5b04:	f4 e0       	ldi	r31, 0x04	; 4
    5b06:	80 81       	ld	r24, Z
    5b08:	82 30       	cpi	r24, 0x02	; 2
    5b0a:	59 f4       	brne	.+22     	; 0x5b22 <main+0xda>
    5b0c:	a8 ee       	ldi	r26, 0xE8	; 232
    5b0e:	b4 e0       	ldi	r27, 0x04	; 4
    5b10:	8c 91       	ld	r24, X
    5b12:	81 11       	cpse	r24, r1
    5b14:	06 c0       	rjmp	.+12     	; 0x5b22 <main+0xda>
	{write_data |= (1<<5);}
    5b16:	80 91 21 01 	lds	r24, 0x0121
    5b1a:	80 62       	ori	r24, 0x20	; 32
    5b1c:	80 93 21 01 	sts	0x0121, r24
    5b20:	05 c0       	rjmp	.+10     	; 0x5b2c <main+0xe4>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5b22:	80 91 21 01 	lds	r24, 0x0121
    5b26:	8f 7d       	andi	r24, 0xDF	; 223
    5b28:	80 93 21 01 	sts	0x0121, r24
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5b2c:	80 91 22 01 	lds	r24, 0x0122
    5b30:	81 30       	cpi	r24, 0x01	; 1
    5b32:	49 f4       	brne	.+18     	; 0x5b46 <main+0xfe>
    5b34:	80 91 0f 01 	lds	r24, 0x010F
    5b38:	81 11       	cpse	r24, r1
    5b3a:	05 c0       	rjmp	.+10     	; 0x5b46 <main+0xfe>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5b3c:	80 91 21 01 	lds	r24, 0x0121
    5b40:	8b 79       	andi	r24, 0x9B	; 155
    5b42:	80 93 21 01 	sts	0x0121, r24
	}
	
	wdt_enable(WDTO_2S);
    5b46:	8f e0       	ldi	r24, 0x0F	; 15
    5b48:	e8 e1       	ldi	r30, 0x18	; 24
    5b4a:	f0 e0       	ldi	r31, 0x00	; 0
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	a8 95       	wdr
    5b52:	e1 bd       	out	0x21, r30	; 33
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    5b58:	a8 95       	wdr
	
PORTA = 0xAA;
    5b5a:	8a ea       	ldi	r24, 0xAA	; 170
    5b5c:	8b bb       	out	0x1b, r24	; 27
TWI_start(); // Function to send start condition
    5b5e:	01 df       	rcall	.-510    	; 0x5962 <TWI_start>
PORTA=0b11000000;
    5b60:	80 ec       	ldi	r24, 0xC0	; 192
    5b62:	8b bb       	out	0x1b, r24	; 27
TWI_write_address(address); // Function to write address and data direction bit(write) on SDA
    5b64:	80 91 20 01 	lds	r24, 0x0120
    5b68:	0b df       	rcall	.-490    	; 0x5980 <TWI_write_address>

PORTA=0b01100000;
    5b6a:	80 e6       	ldi	r24, 0x60	; 96
    5b6c:	8b bb       	out	0x1b, r24	; 27
TWI_write_data(write_data);     // Function to write data in slave
    5b6e:	80 91 21 01 	lds	r24, 0x0121
    5b72:	29 df       	rcall	.-430    	; 0x59c6 <TWI_write_data>
PORTA=0b10100000;
    5b74:	80 ea       	ldi	r24, 0xA0	; 160
    5b76:	8b bb       	out	0x1b, r24	; 27
TWI_stop(); // Function to send stop condition
    5b78:	4a df       	rcall	.-364    	; 0x5a0e <TWI_stop>
    5b7a:	8f e1       	ldi	r24, 0x1F	; 31
    5b7c:	9e e4       	ldi	r25, 0x4E	; 78
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	f1 f7       	brne	.-4      	; 0x5b7e <main+0x136>
    5b82:	00 c0       	rjmp	.+0      	; 0x5b84 <main+0x13c>
    5b84:	00 00       	nop
    5b86:	05 e3       	ldi	r16, 0x35	; 53
    5b88:	15 e0       	ldi	r17, 0x05	; 5
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
{
	TWI_start();
    5b8a:	eb de       	rcall	.-554    	; 0x5962 <TWI_start>
	
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
    5b8c:	90 91 1f 01 	lds	r25, 0x011F
    5b90:	80 91 20 01 	lds	r24, 0x0120
    5b94:	89 0f       	add	r24, r25
    5b96:	06 df       	rcall	.-500    	; 0x59a4 <TWI_read_address>
	TWI_read_data(); // Function to read data from slave
    5b98:	27 df       	rcall	.-434    	; 0x59e8 <TWI_read_data>
	HM_Data[i] = recv_data;
    5b9a:	80 91 2c 05 	lds	r24, 0x052C
    5b9e:	d8 01       	movw	r26, r16
    5ba0:	8d 93       	st	X+, r24
    5ba2:	8d 01       	movw	r16, r26
	TWI_stop();
    5ba4:	34 df       	rcall	.-408    	; 0x5a0e <TWI_stop>

//if (UniversalCycles%CyclesToCollectData == 0){transmit_string_UART0("PRA");}
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
    5ba6:	02 15       	cp	r16, r2
    5ba8:	13 05       	cpc	r17, r3
    5baa:	79 f7       	brne	.-34     	; 0x5b8a <main+0x142>
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
	TWI_read_data(); // Function to read data from slave
	HM_Data[i] = recv_data;
	TWI_stop();
}
wdt_disable();
    5bac:	88 e1       	ldi	r24, 0x18	; 24
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	81 bd       	out	0x21, r24	; 33
    5bb4:	11 bc       	out	0x21, r1	; 33
    5bb6:	0f be       	out	0x3f, r0	; 63
    5bb8:	ef e1       	ldi	r30, 0x1F	; 31
    5bba:	fe e4       	ldi	r31, 0x4E	; 78
    5bbc:	31 97       	sbiw	r30, 0x01	; 1
    5bbe:	f1 f7       	brne	.-4      	; 0x5bbc <main+0x174>
    5bc0:	00 c0       	rjmp	.+0      	; 0x5bc2 <main+0x17a>
    5bc2:	00 00       	nop
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5bc4:	a3 ed       	ldi	r26, 0xD3	; 211
    5bc6:	b4 e0       	ldi	r27, 0x04	; 4
    5bc8:	8d 90       	ld	r8, X+
    5bca:	9d 90       	ld	r9, X+
    5bcc:	ad 90       	ld	r10, X+
    5bce:	bc 90       	ld	r11, X
    5bd0:	13 97       	sbiw	r26, 0x03	; 3
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5bd2:	cd 90       	ld	r12, X+
    5bd4:	dd 90       	ld	r13, X+
    5bd6:	ed 90       	ld	r14, X+
    5bd8:	fc 90       	ld	r15, X
G3 = (uint8_t)Current_state.gps.lon;
    5bda:	a7 ed       	ldi	r26, 0xD7	; 215
    5bdc:	b4 e0       	ldi	r27, 0x04	; 4
    5bde:	8d 91       	ld	r24, X+
    5be0:	9d 91       	ld	r25, X+
    5be2:	0d 90       	ld	r0, X+
    5be4:	bc 91       	ld	r27, X
    5be6:	a0 2d       	mov	r26, r0
    5be8:	89 83       	std	Y+1, r24	; 0x01
    5bea:	9a 83       	std	Y+2, r25	; 0x02
    5bec:	ab 83       	std	Y+3, r26	; 0x03
    5bee:	bc 83       	std	Y+4, r27	; 0x04
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5bf0:	a7 ed       	ldi	r26, 0xD7	; 215
    5bf2:	b4 e0       	ldi	r27, 0x04	; 4
    5bf4:	8d 91       	ld	r24, X+
    5bf6:	9d 91       	ld	r25, X+
    5bf8:	0d 90       	ld	r0, X+
    5bfa:	bc 91       	ld	r27, X
    5bfc:	a0 2d       	mov	r26, r0
    5bfe:	8d 83       	std	Y+5, r24	; 0x05
    5c00:	9e 83       	std	Y+6, r25	; 0x06
    5c02:	af 83       	std	Y+7, r26	; 0x07
    5c04:	b8 87       	std	Y+8, r27	; 0x08
G5 = Current_state.gps.seconds;
    5c06:	e1 ee       	ldi	r30, 0xE1	; 225
    5c08:	f4 e0       	ldi	r31, 0x04	; 4
    5c0a:	50 80       	ld	r5, Z
G6 = Current_state.gps.minutes;
    5c0c:	a0 ee       	ldi	r26, 0xE0	; 224
    5c0e:	b4 e0       	ldi	r27, 0x04	; 4
    5c10:	6c 90       	ld	r6, X
G7 = Current_state.gps.hours;
    5c12:	ef ed       	ldi	r30, 0xDF	; 223
    5c14:	f4 e0       	ldi	r31, 0x04	; 4
    5c16:	70 80       	ld	r7, Z
G8 = Current_state.gps.date;
    5c18:	a2 ee       	ldi	r26, 0xE2	; 226
    5c1a:	b4 e0       	ldi	r27, 0x04	; 4
    5c1c:	0c 91       	ld	r16, X
G9 = (uint8_t)(q_o[0]*127);
    5c1e:	20 e0       	ldi	r18, 0x00	; 0
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	4e ef       	ldi	r20, 0xFE	; 254
    5c24:	52 e4       	ldi	r21, 0x42	; 66
    5c26:	e4 e8       	ldi	r30, 0x84	; 132
    5c28:	f4 e0       	ldi	r31, 0x04	; 4
    5c2a:	60 81       	ld	r22, Z
    5c2c:	71 81       	ldd	r23, Z+1	; 0x01
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	84 d6       	rcall	.+3336   	; 0x693c <__mulsf3>
    5c34:	d2 d4       	rcall	.+2468   	; 0x65da <__fixunssfsi>
    5c36:	16 2f       	mov	r17, r22
G10 = (uint8_t)(q_o[1]*127);
    5c38:	20 e0       	ldi	r18, 0x00	; 0
    5c3a:	30 e0       	ldi	r19, 0x00	; 0
    5c3c:	4e ef       	ldi	r20, 0xFE	; 254
    5c3e:	52 e4       	ldi	r21, 0x42	; 66
    5c40:	a8 e8       	ldi	r26, 0x88	; 136
    5c42:	b4 e0       	ldi	r27, 0x04	; 4
    5c44:	6d 91       	ld	r22, X+
    5c46:	7d 91       	ld	r23, X+
    5c48:	8d 91       	ld	r24, X+
    5c4a:	9c 91       	ld	r25, X
    5c4c:	77 d6       	rcall	.+3310   	; 0x693c <__mulsf3>
    5c4e:	c5 d4       	rcall	.+2442   	; 0x65da <__fixunssfsi>
    5c50:	69 87       	std	Y+9, r22	; 0x09
G11 = (uint8_t)(q_o[2]*127);
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4e ef       	ldi	r20, 0xFE	; 254
    5c58:	52 e4       	ldi	r21, 0x42	; 66
    5c5a:	60 91 8c 04 	lds	r22, 0x048C
    5c5e:	70 91 8d 04 	lds	r23, 0x048D
    5c62:	80 91 8e 04 	lds	r24, 0x048E
    5c66:	90 91 8f 04 	lds	r25, 0x048F
    5c6a:	68 d6       	rcall	.+3280   	; 0x693c <__mulsf3>
    5c6c:	b6 d4       	rcall	.+2412   	; 0x65da <__fixunssfsi>
    5c6e:	46 2e       	mov	r4, r22
G12 = (uint8_t)(q_o[3]*127);
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	4e ef       	ldi	r20, 0xFE	; 254
    5c76:	52 e4       	ldi	r21, 0x42	; 66
    5c78:	60 91 90 04 	lds	r22, 0x0490
    5c7c:	70 91 91 04 	lds	r23, 0x0491
    5c80:	80 91 92 04 	lds	r24, 0x0492
    5c84:	90 91 93 04 	lds	r25, 0x0493
    5c88:	59 d6       	rcall	.+3250   	; 0x693c <__mulsf3>
    5c8a:	a7 d4       	rcall	.+2382   	; 0x65da <__fixunssfsi>
}
wdt_disable();
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5c8c:	80 92 10 01 	sts	0x0110, r8
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5c90:	d0 92 11 01 	sts	0x0111, r13
G3 = (uint8_t)Current_state.gps.lon;
    5c94:	b9 81       	ldd	r27, Y+1	; 0x01
    5c96:	b0 93 12 01 	sts	0x0112, r27
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5c9a:	ee 81       	ldd	r30, Y+6	; 0x06
    5c9c:	e0 93 13 01 	sts	0x0113, r30

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    5ca0:	50 92 14 01 	sts	0x0114, r5
GPS_Data[5] = G6;
    5ca4:	60 92 15 01 	sts	0x0115, r6
GPS_Data[6] = G7;
    5ca8:	70 92 16 01 	sts	0x0116, r7
GPS_Data[7] = G8;
    5cac:	00 93 17 01 	sts	0x0117, r16
GPS_Data[8] = G9;
    5cb0:	10 93 18 01 	sts	0x0118, r17
GPS_Data[9] = G10;
    5cb4:	f9 85       	ldd	r31, Y+9	; 0x09
    5cb6:	f0 93 19 01 	sts	0x0119, r31
GPS_Data[10] = G11;
    5cba:	40 92 1a 01 	sts	0x011A, r4
GPS_Data[11] = G12;
    5cbe:	60 93 1b 01 	sts	0x011B, r22
//////////////////////////////////////////

if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5cc2:	80 91 7c 04 	lds	r24, 0x047C
    5cc6:	81 30       	cpi	r24, 0x01	; 1
    5cc8:	29 f0       	breq	.+10     	; 0x5cd4 <main+0x28c>
    5cca:	80 91 7b 04 	lds	r24, 0x047B
    5cce:	81 30       	cpi	r24, 0x01	; 1
    5cd0:	09 f0       	breq	.+2      	; 0x5cd4 <main+0x28c>
    5cd2:	4f c0       	rjmp	.+158    	; 0x5d72 <main+0x32a>
{
	
	if(FirstTimeOuter ==0)
    5cd4:	80 91 81 04 	lds	r24, 0x0481
    5cd8:	81 11       	cpse	r24, r1
    5cda:	0e c0       	rjmp	.+28     	; 0x5cf8 <main+0x2b0>
	{
		
	FirstTimeInner = 0;
    5cdc:	10 92 80 04 	sts	0x0480, r1
	FirstTimeNormal = 0;
    5ce0:	10 92 7f 04 	sts	0x047F, r1
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5ce4:	80 91 21 01 	lds	r24, 0x0121
    5ce8:	8d 7f       	andi	r24, 0xFD	; 253
    5cea:	80 61       	ori	r24, 0x10	; 16
    5cec:	80 93 21 01 	sts	0x0121, r24
	FirstTimeOuter = 1;
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	80 93 81 04 	sts	0x0481, r24
    5cf6:	37 c0       	rjmp	.+110    	; 0x5d66 <main+0x31e>
	}
	else if(FirstTimeOuter == 1)
    5cf8:	81 30       	cpi	r24, 0x01	; 1
    5cfa:	e9 f4       	brne	.+58     	; 0x5d36 <main+0x2ee>
	{
		
		if(countu ==0)
    5cfc:	80 91 7d 04 	lds	r24, 0x047D
    5d00:	81 11       	cpse	r24, r1
    5d02:	15 c0       	rjmp	.+42     	; 0x5d2e <main+0x2e6>
    5d04:	83 e0       	ldi	r24, 0x03	; 3
    5d06:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5d08:	31 eb       	ldi	r19, 0xB1	; 177
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5d0a:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5d0c:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d0e:	77 9b       	sbis	0x0e, 7	; 14
    5d10:	fe cf       	rjmp	.-4      	; 0x5d0e <main+0x2c6>
			PORTA = 0xFF;
    5d12:	2b bb       	out	0x1b, r18	; 27
    5d14:	af ec       	ldi	r26, 0xCF	; 207
    5d16:	b7 e0       	ldi	r27, 0x07	; 7
    5d18:	11 97       	sbiw	r26, 0x01	; 1
    5d1a:	f1 f7       	brne	.-4      	; 0x5d18 <main+0x2d0>
    5d1c:	00 c0       	rjmp	.+0      	; 0x5d1e <main+0x2d6>
    5d1e:	00 00       	nop
    5d20:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5d22:	00 97       	sbiw	r24, 0x00	; 0
    5d24:	99 f7       	brne	.-26     	; 0x5d0c <main+0x2c4>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5d26:	82 e0       	ldi	r24, 0x02	; 2
    5d28:	80 93 81 04 	sts	0x0481, r24
    5d2c:	1c c0       	rjmp	.+56     	; 0x5d66 <main+0x31e>
		}
		else if(countu == 1)
    5d2e:	81 30       	cpi	r24, 0x01	; 1
    5d30:	d1 f4       	brne	.+52     	; 0x5d66 <main+0x31e>
		{
			
			SendHM();
    5d32:	76 de       	rcall	.-788    	; 0x5a20 <SendHM>
    5d34:	18 c0       	rjmp	.+48     	; 0x5d66 <main+0x31e>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5d36:	74 de       	rcall	.-792    	; 0x5a20 <SendHM>
		if(countu ==0)
    5d38:	80 91 7d 04 	lds	r24, 0x047D
    5d3c:	81 11       	cpse	r24, r1
    5d3e:	13 c0       	rjmp	.+38     	; 0x5d66 <main+0x31e>
    5d40:	e0 e1       	ldi	r30, 0x10	; 16
    5d42:	f1 e0       	ldi	r31, 0x01	; 1
    5d44:	8c e1       	ldi	r24, 0x1C	; 28
    5d46:	91 e0       	ldi	r25, 0x01	; 1
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
				while(!(SPSR & (1<<SPIF) ));
				PORTA = 0xFF;
    5d48:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5d4a:	21 91       	ld	r18, Z+
    5d4c:	2f b9       	out	0x0f, r18	; 15
				while(!(SPSR & (1<<SPIF) ));
    5d4e:	77 9b       	sbis	0x0e, 7	; 14
    5d50:	fe cf       	rjmp	.-4      	; 0x5d4e <main+0x306>
				PORTA = 0xFF;
    5d52:	3b bb       	out	0x1b, r19	; 27
    5d54:	af ec       	ldi	r26, 0xCF	; 207
    5d56:	b7 e0       	ldi	r27, 0x07	; 7
    5d58:	11 97       	sbiw	r26, 0x01	; 1
    5d5a:	f1 f7       	brne	.-4      	; 0x5d58 <main+0x310>
    5d5c:	00 c0       	rjmp	.+0      	; 0x5d5e <main+0x316>
    5d5e:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5d60:	e8 17       	cp	r30, r24
    5d62:	f9 07       	cpc	r31, r25
    5d64:	91 f7       	brne	.-28     	; 0x5d4a <main+0x302>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5d66:	80 91 7e 04 	lds	r24, 0x047E
    5d6a:	8e 5f       	subi	r24, 0xFE	; 254
    5d6c:	80 93 7e 04 	sts	0x047E, r24
    5d70:	97 c0       	rjmp	.+302    	; 0x5ea0 <main+0x458>
}
else if(flag_mumbai ==1) //Check for Circles
    5d72:	80 91 7a 04 	lds	r24, 0x047A
    5d76:	81 30       	cpi	r24, 0x01	; 1
    5d78:	09 f0       	breq	.+2      	; 0x5d7c <main+0x334>
    5d7a:	4f c0       	rjmp	.+158    	; 0x5e1a <main+0x3d2>
{
	
	if(FirstTimeInner ==0)
    5d7c:	80 91 80 04 	lds	r24, 0x0480
    5d80:	81 11       	cpse	r24, r1
    5d82:	0e c0       	rjmp	.+28     	; 0x5da0 <main+0x358>
	{
		
		FirstTimeOuter = 0;
    5d84:	10 92 81 04 	sts	0x0481, r1
		FirstTimeNormal = 0;
    5d88:	10 92 7f 04 	sts	0x047F, r1
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5d8c:	80 91 21 01 	lds	r24, 0x0121
    5d90:	8d 7f       	andi	r24, 0xFD	; 253
    5d92:	80 61       	ori	r24, 0x10	; 16
    5d94:	80 93 21 01 	sts	0x0121, r24
		FirstTimeInner = 1;
    5d98:	81 e0       	ldi	r24, 0x01	; 1
    5d9a:	80 93 80 04 	sts	0x0480, r24
    5d9e:	37 c0       	rjmp	.+110    	; 0x5e0e <main+0x3c6>
		
	}
	else if(FirstTimeInner == 1)
    5da0:	81 30       	cpi	r24, 0x01	; 1
    5da2:	e9 f4       	brne	.+58     	; 0x5dde <main+0x396>
	{
		
		if(countu ==0)
    5da4:	80 91 7d 04 	lds	r24, 0x047D
    5da8:	81 11       	cpse	r24, r1
    5daa:	15 c0       	rjmp	.+42     	; 0x5dd6 <main+0x38e>
    5dac:	83 e0       	ldi	r24, 0x03	; 3
    5dae:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5db0:	31 ef       	ldi	r19, 0xF1	; 241
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5db2:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5db4:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5db6:	77 9b       	sbis	0x0e, 7	; 14
    5db8:	fe cf       	rjmp	.-4      	; 0x5db6 <main+0x36e>
			PORTA = 0xFF;
    5dba:	2b bb       	out	0x1b, r18	; 27
    5dbc:	ef ec       	ldi	r30, 0xCF	; 207
    5dbe:	f7 e0       	ldi	r31, 0x07	; 7
    5dc0:	31 97       	sbiw	r30, 0x01	; 1
    5dc2:	f1 f7       	brne	.-4      	; 0x5dc0 <main+0x378>
    5dc4:	00 c0       	rjmp	.+0      	; 0x5dc6 <main+0x37e>
    5dc6:	00 00       	nop
    5dc8:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5dca:	00 97       	sbiw	r24, 0x00	; 0
    5dcc:	99 f7       	brne	.-26     	; 0x5db4 <main+0x36c>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5dce:	82 e0       	ldi	r24, 0x02	; 2
    5dd0:	80 93 80 04 	sts	0x0480, r24
    5dd4:	1c c0       	rjmp	.+56     	; 0x5e0e <main+0x3c6>
		}
		
		else if(countu == 1)
    5dd6:	81 30       	cpi	r24, 0x01	; 1
    5dd8:	d1 f4       	brne	.+52     	; 0x5e0e <main+0x3c6>
		{
			
			SendHM();
    5dda:	22 de       	rcall	.-956    	; 0x5a20 <SendHM>
    5ddc:	18 c0       	rjmp	.+48     	; 0x5e0e <main+0x3c6>
		
	}
	else
	{
		
		SendHM();
    5dde:	20 de       	rcall	.-960    	; 0x5a20 <SendHM>
		if(countu ==0)
    5de0:	80 91 7d 04 	lds	r24, 0x047D
    5de4:	81 11       	cpse	r24, r1
    5de6:	13 c0       	rjmp	.+38     	; 0x5e0e <main+0x3c6>
    5de8:	e0 e1       	ldi	r30, 0x10	; 16
    5dea:	f1 e0       	ldi	r31, 0x01	; 1
    5dec:	8c e1       	ldi	r24, 0x1C	; 28
    5dee:	91 e0       	ldi	r25, 0x01	; 1
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5df0:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5df2:	21 91       	ld	r18, Z+
    5df4:	2f b9       	out	0x0f, r18	; 15
			while(!(SPSR & (1<<SPIF) ));
    5df6:	77 9b       	sbis	0x0e, 7	; 14
    5df8:	fe cf       	rjmp	.-4      	; 0x5df6 <main+0x3ae>
			PORTA = 0xFF;
    5dfa:	3b bb       	out	0x1b, r19	; 27
    5dfc:	af ec       	ldi	r26, 0xCF	; 207
    5dfe:	b7 e0       	ldi	r27, 0x07	; 7
    5e00:	11 97       	sbiw	r26, 0x01	; 1
    5e02:	f1 f7       	brne	.-4      	; 0x5e00 <main+0x3b8>
    5e04:	00 c0       	rjmp	.+0      	; 0x5e06 <main+0x3be>
    5e06:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5e08:	e8 17       	cp	r30, r24
    5e0a:	f9 07       	cpc	r31, r25
    5e0c:	91 f7       	brne	.-28     	; 0x5df2 <main+0x3aa>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5e0e:	80 91 7e 04 	lds	r24, 0x047E
    5e12:	8e 5f       	subi	r24, 0xFE	; 254
    5e14:	80 93 7e 04 	sts	0x047E, r24
    5e18:	43 c0       	rjmp	.+134    	; 0x5ea0 <main+0x458>
}
else
{

	countd = 0;
    5e1a:	10 92 7e 04 	sts	0x047E, r1
	countu = 0;
    5e1e:	10 92 7d 04 	sts	0x047D, r1
	if(FirstTimeNormal == 0)
    5e22:	80 91 7f 04 	lds	r24, 0x047F
    5e26:	81 11       	cpse	r24, r1
    5e28:	14 c0       	rjmp	.+40     	; 0x5e52 <main+0x40a>
    5e2a:	83 e0       	ldi	r24, 0x03	; 3
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5e2e:	31 ed       	ldi	r19, 0xD1	; 209
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5e30:	2f ef       	ldi	r18, 0xFF	; 255
	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5e32:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5e34:	77 9b       	sbis	0x0e, 7	; 14
    5e36:	fe cf       	rjmp	.-4      	; 0x5e34 <main+0x3ec>
			PORTA = 0xFF;
    5e38:	2b bb       	out	0x1b, r18	; 27
    5e3a:	ef ec       	ldi	r30, 0xCF	; 207
    5e3c:	f7 e0       	ldi	r31, 0x07	; 7
    5e3e:	31 97       	sbiw	r30, 0x01	; 1
    5e40:	f1 f7       	brne	.-4      	; 0x5e3e <main+0x3f6>
    5e42:	00 c0       	rjmp	.+0      	; 0x5e44 <main+0x3fc>
    5e44:	00 00       	nop
    5e46:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5e48:	00 97       	sbiw	r24, 0x00	; 0
    5e4a:	99 f7       	brne	.-26     	; 0x5e32 <main+0x3ea>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	80 93 7f 04 	sts	0x047F, r24
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5e52:	40 91 1d 01 	lds	r20, 0x011D
    5e56:	50 91 1e 01 	lds	r21, 0x011E
    5e5a:	9a 01       	movw	r18, r20
    5e5c:	ad ec       	ldi	r26, 0xCD	; 205
    5e5e:	bc ec       	ldi	r27, 0xCC	; 204
    5e60:	74 d7       	rcall	.+3816   	; 0x6d4a <__umulhisi3>
    5e62:	96 95       	lsr	r25
    5e64:	87 95       	ror	r24
    5e66:	96 95       	lsr	r25
    5e68:	87 95       	ror	r24
    5e6a:	96 95       	lsr	r25
    5e6c:	87 95       	ror	r24
    5e6e:	9c 01       	movw	r18, r24
    5e70:	22 0f       	add	r18, r18
    5e72:	33 1f       	adc	r19, r19
    5e74:	88 0f       	add	r24, r24
    5e76:	99 1f       	adc	r25, r25
    5e78:	88 0f       	add	r24, r24
    5e7a:	99 1f       	adc	r25, r25
    5e7c:	88 0f       	add	r24, r24
    5e7e:	99 1f       	adc	r25, r25
    5e80:	82 0f       	add	r24, r18
    5e82:	93 1f       	adc	r25, r19
    5e84:	48 17       	cp	r20, r24
    5e86:	59 07       	cpc	r21, r25
    5e88:	09 f4       	brne	.+2      	; 0x5e8c <main+0x444>
    5e8a:	ca dd       	rcall	.-1132   	; 0x5a20 <SendHM>
	write_data &= ~(1<<4);
    5e8c:	80 91 21 01 	lds	r24, 0x0121
    5e90:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5e92:	82 60       	ori	r24, 0x02	; 2
    5e94:	80 93 21 01 	sts	0x0121, r24
	FirstTimeInner = 0;
    5e98:	10 92 80 04 	sts	0x0480, r1
	FirstTimeOuter = 0;
    5e9c:	10 92 81 04 	sts	0x0481, r1
}

if ((countd >120)&&(countd <=150))
    5ea0:	80 91 7e 04 	lds	r24, 0x047E
    5ea4:	97 e8       	ldi	r25, 0x87	; 135
    5ea6:	98 0f       	add	r25, r24
    5ea8:	9e 31       	cpi	r25, 0x1E	; 30
    5eaa:	e0 f4       	brcc	.+56     	; 0x5ee4 <main+0x49c>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5eac:	90 91 21 01 	lds	r25, 0x0121
    5eb0:	9f 7e       	andi	r25, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5eb2:	92 60       	ori	r25, 0x02	; 2
    5eb4:	90 93 21 01 	sts	0x0121, r25
	if (countd == 122)
    5eb8:	8a 37       	cpi	r24, 0x7A	; 122
    5eba:	89 f4       	brne	.+34     	; 0x5ede <main+0x496>
    5ebc:	83 e0       	ldi	r24, 0x03	; 3
    5ebe:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5ec0:	31 ed       	ldi	r19, 0xD1	; 209
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
    5ec2:	2f ef       	ldi	r18, 0xFF	; 255
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5ec4:	3f b9       	out	0x0f, r19	; 15
		while(!(SPSR & (1<<SPIF) ));
    5ec6:	77 9b       	sbis	0x0e, 7	; 14
    5ec8:	fe cf       	rjmp	.-4      	; 0x5ec6 <main+0x47e>
		PORTA = 0xFF;
    5eca:	2b bb       	out	0x1b, r18	; 27
    5ecc:	af ec       	ldi	r26, 0xCF	; 207
    5ece:	b7 e0       	ldi	r27, 0x07	; 7
    5ed0:	11 97       	sbiw	r26, 0x01	; 1
    5ed2:	f1 f7       	brne	.-4      	; 0x5ed0 <main+0x488>
    5ed4:	00 c0       	rjmp	.+0      	; 0x5ed6 <main+0x48e>
    5ed6:	00 00       	nop
    5ed8:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5eda:	00 97       	sbiw	r24, 0x00	; 0
    5edc:	99 f7       	brne	.-26     	; 0x5ec4 <main+0x47c>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	80 93 7d 04 	sts	0x047D, r24
}
if (countd >150)
    5ee4:	80 91 7e 04 	lds	r24, 0x047E
    5ee8:	87 39       	cpi	r24, 0x97	; 151
    5eea:	70 f0       	brcs	.+28     	; 0x5f08 <main+0x4c0>
{

	countd=0;
    5eec:	10 92 7e 04 	sts	0x047E, r1
	countu=0;
    5ef0:	10 92 7d 04 	sts	0x047D, r1
	write_data &= ~(1<<1); 
    5ef4:	80 91 21 01 	lds	r24, 0x0121
    5ef8:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5efa:	80 61       	ori	r24, 0x10	; 16
    5efc:	80 93 21 01 	sts	0x0121, r24
	FirstTimeOuter = 0;
    5f00:	10 92 81 04 	sts	0x0481, r1
	FirstTimeInner = 0;
    5f04:	10 92 80 04 	sts	0x0480, r1
		
}

	
		PORTB |= (1<<PB0);
    5f08:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5f0a:	c5 98       	cbi	0x18, 5	; 24
     if(Mode == NOMINAL)
    5f0c:	80 91 22 01 	lds	r24, 0x0122
    5f10:	81 30       	cpi	r24, 0x01	; 1
    5f12:	99 f5       	brne	.+102    	; 0x5f7a <main+0x532>
	 {	
     	if(counter1 == 0) //OC Check for Beacon
    5f14:	80 91 82 04 	lds	r24, 0x0482
    5f18:	90 91 83 04 	lds	r25, 0x0483
    5f1c:	89 2b       	or	r24, r25
    5f1e:	79 f4       	brne	.+30     	; 0x5f3e <main+0x4f6>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5f20:	80 91 3b 05 	lds	r24, 0x053B
    5f24:	88 23       	and	r24, r24
    5f26:	4c f1       	brlt	.+82     	; 0x5f7a <main+0x532>
	     	{
		     	counter1 = 1;
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	90 93 83 04 	sts	0x0483, r25
    5f30:	80 93 82 04 	sts	0x0482, r24
		     	write_data &= ~(1<<7);
    5f34:	80 91 21 01 	lds	r24, 0x0121
    5f38:	8f 77       	andi	r24, 0x7F	; 127
    5f3a:	80 93 21 01 	sts	0x0121, r24
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5f3e:	80 91 82 04 	lds	r24, 0x0482
    5f42:	90 91 83 04 	lds	r25, 0x0483
    5f46:	9c 01       	movw	r18, r24
    5f48:	21 50       	subi	r18, 0x01	; 1
    5f4a:	31 09       	sbc	r19, r1
    5f4c:	26 30       	cpi	r18, 0x06	; 6
    5f4e:	31 05       	cpc	r19, r1
    5f50:	28 f4       	brcc	.+10     	; 0x5f5c <main+0x514>
     	{
	     	counter1 = counter1+1;
    5f52:	01 96       	adiw	r24, 0x01	; 1
    5f54:	90 93 83 04 	sts	0x0483, r25
    5f58:	80 93 82 04 	sts	0x0482, r24
     	}
     	
     	if(counter1 == 7)
    5f5c:	80 91 82 04 	lds	r24, 0x0482
    5f60:	90 91 83 04 	lds	r25, 0x0483
    5f64:	07 97       	sbiw	r24, 0x07	; 7
    5f66:	49 f4       	brne	.+18     	; 0x5f7a <main+0x532>
     	{
	     	counter1 = 0;
    5f68:	10 92 83 04 	sts	0x0483, r1
    5f6c:	10 92 82 04 	sts	0x0482, r1
	     	write_data |= (1<<7);
    5f70:	80 91 21 01 	lds	r24, 0x0121
    5f74:	80 68       	ori	r24, 0x80	; 128
    5f76:	80 93 21 01 	sts	0x0121, r24
	 }
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5f7a:	80 91 3b 05 	lds	r24, 0x053B
    5f7e:	85 fd       	sbrc	r24, 5
    5f80:	05 c0       	rjmp	.+10     	; 0x5f8c <main+0x544>
			 {
				Current_state.gps.gps_OC = 1;
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	e8 ee       	ldi	r30, 0xE8	; 232
    5f86:	f4 e0       	ldi	r31, 0x04	; 4
    5f88:	80 83       	st	Z, r24
    5f8a:	03 c0       	rjmp	.+6      	; 0x5f92 <main+0x54a>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5f8c:	a8 ee       	ldi	r26, 0xE8	; 232
    5f8e:	b4 e0       	ldi	r27, 0x04	; 4
    5f90:	1c 92       	st	X, r1
			}


	wdt_enable(WDTO_2S);
    5f92:	8f e0       	ldi	r24, 0x0F	; 15
    5f94:	e8 e1       	ldi	r30, 0x18	; 24
    5f96:	f0 e0       	ldi	r31, 0x00	; 0
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	a8 95       	wdr
    5f9e:	e1 bd       	out	0x21, r30	; 33
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    5fa4:	a8 95       	wdr

	control();
    5fa6:	0e 94 4b 08 	call	0x1096	; 0x1096 <control>
	wdt_disable();
    5faa:	88 e1       	ldi	r24, 0x18	; 24
    5fac:	0f b6       	in	r0, 0x3f	; 63
    5fae:	f8 94       	cli
    5fb0:	81 bd       	out	0x21, r24	; 33
    5fb2:	11 bc       	out	0x21, r1	; 33
    5fb4:	0f be       	out	0x3f, r0	; 63
	transmit_UART0('a');
    5fb6:	81 e6       	ldi	r24, 0x61	; 97
    5fb8:	bc dc       	rcall	.-1672   	; 0x5932 <transmit_UART0>
    5fba:	0f 2e       	mov	r0, r31
    5fbc:	f0 e1       	ldi	r31, 0x10	; 16
    5fbe:	ef 2e       	mov	r14, r31
    5fc0:	f1 e0       	ldi	r31, 0x01	; 1
    5fc2:	ff 2e       	mov	r15, r31
    5fc4:	f0 2d       	mov	r31, r0
    5fc6:	0c e1       	ldi	r16, 0x1C	; 28
    5fc8:	11 e0       	ldi	r17, 0x01	; 1
	for (int i=0;i<12;i++)
	{
		transmit_UART0(GPS_Data[i]);
    5fca:	d7 01       	movw	r26, r14
    5fcc:	8d 91       	ld	r24, X+
    5fce:	7d 01       	movw	r14, r26
    5fd0:	b0 dc       	rcall	.-1696   	; 0x5932 <transmit_UART0>
	wdt_reset();

	control();
	wdt_disable();
	transmit_UART0('a');
	for (int i=0;i<12;i++)
    5fd2:	e0 16       	cp	r14, r16
    5fd4:	f1 06       	cpc	r15, r17
    5fd6:	c9 f7       	brne	.-14     	; 0x5fca <main+0x582>
	{
		transmit_UART0(GPS_Data[i]);
	}
	transmit_UART0('a');
    5fd8:	81 e6       	ldi	r24, 0x61	; 97
    5fda:	ab dc       	rcall	.-1706   	; 0x5932 <transmit_UART0>
    5fdc:	05 e3       	ldi	r16, 0x35	; 53
    5fde:	15 e0       	ldi	r17, 0x05	; 5
	//transmit_UART0(flag_india);
	//transmit_UART0(flag_mumbai);
	//transmit_UART0(flag_france);
	for (int i = 0; i<7;i++)
	{
		transmit_UART0(HM_Data[i]);
    5fe0:	f8 01       	movw	r30, r16
    5fe2:	81 91       	ld	r24, Z+
    5fe4:	8f 01       	movw	r16, r30
    5fe6:	a5 dc       	rcall	.-1718   	; 0x5932 <transmit_UART0>
	//int w = 2;Current_state.gps.lat = 168;Current_state.gps.lon = 96;
	//flag_india = (int8_t)(Current_state.gps.lat);//(pow((Current_state.gps.lat - 22.5833),2) + cos(Current_state.gps.lat*3.141592/180)*pow((Current_state.gps.lon - 82.7666),2))*255/70000;
	//transmit_UART0(flag_india);
	//transmit_UART0(flag_mumbai);
	//transmit_UART0(flag_france);
	for (int i = 0; i<7;i++)
    5fe8:	20 16       	cp	r2, r16
    5fea:	31 06       	cpc	r3, r17
    5fec:	c9 f7       	brne	.-14     	; 0x5fe0 <main+0x598>
	{
		transmit_UART0(HM_Data[i]);
	}
	
	light_main = light_cal();	
    5fee:	0e 94 33 24 	call	0x4866	; 0x4866 <light_cal>
    5ff2:	80 93 0f 01 	sts	0x010F, r24
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    5ff6:	80 91 3b 05 	lds	r24, 0x053B
    5ffa:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    5ffc:	0e 94 2e 20 	call	0x405c	; 0x405c <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    6000:	20 91 2d 05 	lds	r18, 0x052D
    6004:	30 91 2e 05 	lds	r19, 0x052E
    6008:	40 91 2f 05 	lds	r20, 0x052F
    600c:	50 91 30 05 	lds	r21, 0x0530
    6010:	60 91 31 05 	lds	r22, 0x0531
    6014:	70 91 32 05 	lds	r23, 0x0532
    6018:	80 91 33 05 	lds	r24, 0x0533
    601c:	90 91 34 05 	lds	r25, 0x0534
    6020:	a2 e0       	ldi	r26, 0x02	; 2
    6022:	c4 d6       	rcall	.+3464   	; 0x6dac <__adddi3_s8>
    6024:	20 93 2d 05 	sts	0x052D, r18
    6028:	30 93 2e 05 	sts	0x052E, r19
    602c:	40 93 2f 05 	sts	0x052F, r20
    6030:	50 93 30 05 	sts	0x0530, r21
    6034:	60 93 31 05 	sts	0x0531, r22
    6038:	70 93 32 05 	sts	0x0532, r23
    603c:	80 93 33 05 	sts	0x0533, r24
    6040:	90 93 34 05 	sts	0x0534, r25
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    6044:	a3 ed       	ldi	r26, 0xD3	; 211
    6046:	b4 e0       	ldi	r27, 0x04	; 4
    6048:	6d 91       	ld	r22, X+
    604a:	7d 91       	ld	r23, X+
    604c:	8d 91       	ld	r24, X+
    604e:	9c 91       	ld	r25, X
    6050:	f2 d2       	rcall	.+1508   	; 0x6636 <__floatsisf>
    6052:	20 e0       	ldi	r18, 0x00	; 0
    6054:	30 e0       	ldi	r19, 0x00	; 0
    6056:	48 ec       	ldi	r20, 0xC8	; 200
    6058:	52 e4       	ldi	r21, 0x42	; 66
    605a:	52 d2       	rcall	.+1188   	; 0x6500 <__divsf3>
    605c:	29 e9       	ldi	r18, 0x99	; 153
    605e:	3a ea       	ldi	r19, 0xAA	; 170
    6060:	44 eb       	ldi	r20, 0xB4	; 180
    6062:	51 e4       	ldi	r21, 0x41	; 65
    6064:	68 d1       	rcall	.+720    	; 0x6336 <__subsf3>
    6066:	69 83       	std	Y+1, r22	; 0x01
    6068:	7a 83       	std	Y+2, r23	; 0x02
    606a:	8b 83       	std	Y+3, r24	; 0x03
    606c:	9c 83       	std	Y+4, r25	; 0x04
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    606e:	e7 ed       	ldi	r30, 0xD7	; 215
    6070:	f4 e0       	ldi	r31, 0x04	; 4
    6072:	60 81       	ld	r22, Z
    6074:	71 81       	ldd	r23, Z+1	; 0x01
    6076:	82 81       	ldd	r24, Z+2	; 0x02
    6078:	93 81       	ldd	r25, Z+3	; 0x03
    607a:	dd d2       	rcall	.+1466   	; 0x6636 <__floatsisf>
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	30 e0       	ldi	r19, 0x00	; 0
    6080:	48 ec       	ldi	r20, 0xC8	; 200
    6082:	52 e4       	ldi	r21, 0x42	; 66
    6084:	3d d2       	rcall	.+1146   	; 0x6500 <__divsf3>
    6086:	20 e8       	ldi	r18, 0x80	; 128
    6088:	38 e8       	ldi	r19, 0x88	; 136
    608a:	45 ea       	ldi	r20, 0xA5	; 165
    608c:	52 e4       	ldi	r21, 0x42	; 66
    608e:	53 d1       	rcall	.+678    	; 0x6336 <__subsf3>
    6090:	2b 01       	movw	r4, r22
    6092:	3c 01       	movw	r6, r24
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6094:	a3 ed       	ldi	r26, 0xD3	; 211
    6096:	b4 e0       	ldi	r27, 0x04	; 4
    6098:	6d 91       	ld	r22, X+
    609a:	7d 91       	ld	r23, X+
    609c:	8d 91       	ld	r24, X+
    609e:	9c 91       	ld	r25, X
    60a0:	ca d2       	rcall	.+1428   	; 0x6636 <__floatsisf>
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	48 ec       	ldi	r20, 0xC8	; 200
    60a8:	52 e4       	ldi	r21, 0x42	; 66
    60aa:	2a d2       	rcall	.+1108   	; 0x6500 <__divsf3>
    60ac:	28 ed       	ldi	r18, 0xD8	; 216
    60ae:	3f e0       	ldi	r19, 0x0F	; 15
    60b0:	49 e4       	ldi	r20, 0x49	; 73
    60b2:	50 e4       	ldi	r21, 0x40	; 64
    60b4:	43 d4       	rcall	.+2182   	; 0x693c <__mulsf3>
    60b6:	20 e0       	ldi	r18, 0x00	; 0
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	44 e3       	ldi	r20, 0x34	; 52
    60bc:	53 e4       	ldi	r21, 0x43	; 67
    60be:	20 d2       	rcall	.+1088   	; 0x6500 <__divsf3>
    60c0:	69 87       	std	Y+9, r22	; 0x09
    60c2:	7a 87       	std	Y+10, r23	; 0x0a
    60c4:	8b 87       	std	Y+11, r24	; 0x0b
    60c6:	9c 87       	std	Y+12, r25	; 0x0c
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    60c8:	a3 ed       	ldi	r26, 0xD3	; 211
    60ca:	b4 e0       	ldi	r27, 0x04	; 4
    60cc:	8d 91       	ld	r24, X+
    60ce:	9d 91       	ld	r25, X+
    60d0:	0d 90       	ld	r0, X+
    60d2:	bc 91       	ld	r27, X
    60d4:	a0 2d       	mov	r26, r0
    60d6:	8d 87       	std	Y+13, r24	; 0x0d
    60d8:	9e 87       	std	Y+14, r25	; 0x0e
    60da:	af 87       	std	Y+15, r26	; 0x0f
    60dc:	b8 8b       	std	Y+16, r27	; 0x10
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    60de:	a7 ed       	ldi	r26, 0xD7	; 215
    60e0:	b4 e0       	ldi	r27, 0x04	; 4
    60e2:	8d 91       	ld	r24, X+
    60e4:	9d 91       	ld	r25, X+
    60e6:	0d 90       	ld	r0, X+
    60e8:	bc 91       	ld	r27, X
    60ea:	a0 2d       	mov	r26, r0
    60ec:	89 8b       	std	Y+17, r24	; 0x11
    60ee:	9a 8b       	std	Y+18, r25	; 0x12
    60f0:	ab 8b       	std	Y+19, r26	; 0x13
    60f2:	bc 8b       	std	Y+20, r27	; 0x14
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    60f4:	a3 ed       	ldi	r26, 0xD3	; 211
    60f6:	b4 e0       	ldi	r27, 0x04	; 4
    60f8:	8d 91       	ld	r24, X+
    60fa:	9d 91       	ld	r25, X+
    60fc:	0d 90       	ld	r0, X+
    60fe:	bc 91       	ld	r27, X
    6100:	a0 2d       	mov	r26, r0
    6102:	8d 8b       	std	Y+21, r24	; 0x15
    6104:	9e 8b       	std	Y+22, r25	; 0x16
    6106:	af 8b       	std	Y+23, r26	; 0x17
    6108:	b8 8f       	std	Y+24, r27	; 0x18
	// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    610a:	e3 ed       	ldi	r30, 0xD3	; 211
    610c:	f4 e0       	ldi	r31, 0x04	; 4
    610e:	60 81       	ld	r22, Z
    6110:	71 81       	ldd	r23, Z+1	; 0x01
    6112:	82 81       	ldd	r24, Z+2	; 0x02
    6114:	93 81       	ldd	r25, Z+3	; 0x03
    6116:	8f d2       	rcall	.+1310   	; 0x6636 <__floatsisf>
    6118:	20 e0       	ldi	r18, 0x00	; 0
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	48 ec       	ldi	r20, 0xC8	; 200
    611e:	52 e4       	ldi	r21, 0x42	; 66
    6120:	ef d1       	rcall	.+990    	; 0x6500 <__divsf3>
    6122:	26 ea       	ldi	r18, 0xA6	; 166
    6124:	3b e9       	ldi	r19, 0x9B	; 155
    6126:	48 e9       	ldi	r20, 0x98	; 152
    6128:	51 e4       	ldi	r21, 0x41	; 65
    612a:	05 d1       	rcall	.+522    	; 0x6336 <__subsf3>
    612c:	4b 01       	movw	r8, r22
    612e:	5c 01       	movw	r10, r24
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    6130:	a7 ed       	ldi	r26, 0xD7	; 215
    6132:	b4 e0       	ldi	r27, 0x04	; 4
    6134:	6d 91       	ld	r22, X+
    6136:	7d 91       	ld	r23, X+
    6138:	8d 91       	ld	r24, X+
    613a:	9c 91       	ld	r25, X
    613c:	7c d2       	rcall	.+1272   	; 0x6636 <__floatsisf>
    613e:	20 e0       	ldi	r18, 0x00	; 0
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	48 ec       	ldi	r20, 0xC8	; 200
    6144:	52 e4       	ldi	r21, 0x42	; 66
    6146:	dc d1       	rcall	.+952    	; 0x6500 <__divsf3>
    6148:	26 e0       	ldi	r18, 0x06	; 6
    614a:	31 ec       	ldi	r19, 0xC1	; 193
    614c:	41 e9       	ldi	r20, 0x91	; 145
    614e:	52 e4       	ldi	r21, 0x42	; 66
    6150:	f2 d0       	rcall	.+484    	; 0x6336 <__subsf3>
    6152:	6b 01       	movw	r12, r22
    6154:	7c 01       	movw	r14, r24
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6156:	e3 ed       	ldi	r30, 0xD3	; 211
    6158:	f4 e0       	ldi	r31, 0x04	; 4
    615a:	60 81       	ld	r22, Z
    615c:	71 81       	ldd	r23, Z+1	; 0x01
    615e:	82 81       	ldd	r24, Z+2	; 0x02
    6160:	93 81       	ldd	r25, Z+3	; 0x03
    6162:	69 d2       	rcall	.+1234   	; 0x6636 <__floatsisf>
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	30 e0       	ldi	r19, 0x00	; 0
    6168:	48 ec       	ldi	r20, 0xC8	; 200
    616a:	52 e4       	ldi	r21, 0x42	; 66
    616c:	c9 d1       	rcall	.+914    	; 0x6500 <__divsf3>
    616e:	28 ed       	ldi	r18, 0xD8	; 216
    6170:	3f e0       	ldi	r19, 0x0F	; 15
    6172:	49 e4       	ldi	r20, 0x49	; 73
    6174:	50 e4       	ldi	r21, 0x40	; 64
    6176:	e2 d3       	rcall	.+1988   	; 0x693c <__mulsf3>
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	44 e3       	ldi	r20, 0x34	; 52
    617e:	53 e4       	ldi	r21, 0x43	; 67
    6180:	bf d1       	rcall	.+894    	; 0x6500 <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    6182:	bb d1       	rcall	.+886    	; 0x64fa <cos>
    6184:	6d 83       	std	Y+5, r22	; 0x05
    6186:	7e 83       	std	Y+6, r23	; 0x06
    6188:	8f 83       	std	Y+7, r24	; 0x07
    618a:	98 87       	std	Y+8, r25	; 0x08
    618c:	a5 01       	movw	r20, r10
    618e:	94 01       	movw	r18, r8
    6190:	c5 01       	movw	r24, r10
    6192:	b4 01       	movw	r22, r8
    6194:	d3 d3       	rcall	.+1958   	; 0x693c <__mulsf3>
    6196:	4b 01       	movw	r8, r22
    6198:	5c 01       	movw	r10, r24
    619a:	a7 01       	movw	r20, r14
    619c:	96 01       	movw	r18, r12
    619e:	6d 81       	ldd	r22, Y+5	; 0x05
    61a0:	7e 81       	ldd	r23, Y+6	; 0x06
    61a2:	8f 81       	ldd	r24, Y+7	; 0x07
    61a4:	98 85       	ldd	r25, Y+8	; 0x08
    61a6:	ca d3       	rcall	.+1940   	; 0x693c <__mulsf3>
    61a8:	a7 01       	movw	r20, r14
    61aa:	96 01       	movw	r18, r12
    61ac:	c7 d3       	rcall	.+1934   	; 0x693c <__mulsf3>
    61ae:	9b 01       	movw	r18, r22
    61b0:	ac 01       	movw	r20, r24
    61b2:	c5 01       	movw	r24, r10
    61b4:	b4 01       	movw	r22, r8
    61b6:	c0 d0       	rcall	.+384    	; 0x6338 <__addsf3>
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	30 e0       	ldi	r19, 0x00	; 0
    61bc:	48 ec       	ldi	r20, 0xC8	; 200
    61be:	52 e4       	ldi	r21, 0x42	; 66
    61c0:	98 d1       	rcall	.+816    	; 0x64f2 <__cmpsf2>
    61c2:	88 23       	and	r24, r24
    61c4:	5c f4       	brge	.+22     	; 0x61dc <main+0x794>
    61c6:	80 91 22 01 	lds	r24, 0x0122
    61ca:	81 30       	cpi	r24, 0x01	; 1
    61cc:	39 f4       	brne	.+14     	; 0x61dc <main+0x794>
		{
			flag_mumbai = 1;
    61ce:	80 93 7a 04 	sts	0x047A, r24
			flag_india = 0;
    61d2:	10 92 7c 04 	sts	0x047C, r1
			flag_france = 0;
    61d6:	10 92 7b 04 	sts	0x047B, r1
    61da:	94 c0       	rjmp	.+296    	; 0x6304 <main+0x8bc>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    61dc:	69 85       	ldd	r22, Y+9	; 0x09
    61de:	7a 85       	ldd	r23, Y+10	; 0x0a
    61e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    61e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    61e4:	8a d1       	rcall	.+788    	; 0x64fa <cos>
    61e6:	6b 01       	movw	r12, r22
    61e8:	7c 01       	movw	r14, r24
    61ea:	29 81       	ldd	r18, Y+1	; 0x01
    61ec:	3a 81       	ldd	r19, Y+2	; 0x02
    61ee:	4b 81       	ldd	r20, Y+3	; 0x03
    61f0:	5c 81       	ldd	r21, Y+4	; 0x04
    61f2:	ca 01       	movw	r24, r20
    61f4:	b9 01       	movw	r22, r18
    61f6:	a2 d3       	rcall	.+1860   	; 0x693c <__mulsf3>
    61f8:	4b 01       	movw	r8, r22
    61fa:	5c 01       	movw	r10, r24
    61fc:	a3 01       	movw	r20, r6
    61fe:	92 01       	movw	r18, r4
    6200:	c7 01       	movw	r24, r14
    6202:	b6 01       	movw	r22, r12
    6204:	9b d3       	rcall	.+1846   	; 0x693c <__mulsf3>
    6206:	a3 01       	movw	r20, r6
    6208:	92 01       	movw	r18, r4
    620a:	98 d3       	rcall	.+1840   	; 0x693c <__mulsf3>
    620c:	9b 01       	movw	r18, r22
    620e:	ac 01       	movw	r20, r24
    6210:	c5 01       	movw	r24, r10
    6212:	b4 01       	movw	r22, r8
    6214:	91 d0       	rcall	.+290    	; 0x6338 <__addsf3>
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e4       	ldi	r19, 0x40	; 64
    621a:	4c e1       	ldi	r20, 0x1C	; 28
    621c:	54 e4       	ldi	r21, 0x44	; 68
    621e:	69 d1       	rcall	.+722    	; 0x64f2 <__cmpsf2>
    6220:	88 23       	and	r24, r24
    6222:	5c f4       	brge	.+22     	; 0x623a <main+0x7f2>
    6224:	80 91 22 01 	lds	r24, 0x0122
    6228:	81 30       	cpi	r24, 0x01	; 1
    622a:	39 f4       	brne	.+14     	; 0x623a <main+0x7f2>
	  {
      flag_mumbai = 0;
    622c:	10 92 7a 04 	sts	0x047A, r1
      flag_india = 1;
    6230:	80 93 7c 04 	sts	0x047C, r24
	  flag_france = 0;
    6234:	10 92 7b 04 	sts	0x047B, r1
    6238:	65 c0       	rjmp	.+202    	; 0x6304 <main+0x8bc>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    623a:	69 89       	ldd	r22, Y+17	; 0x11
    623c:	7a 89       	ldd	r23, Y+18	; 0x12
    623e:	8b 89       	ldd	r24, Y+19	; 0x13
    6240:	9c 89       	ldd	r25, Y+20	; 0x14
    6242:	f9 d1       	rcall	.+1010   	; 0x6636 <__floatsisf>
    6244:	20 e0       	ldi	r18, 0x00	; 0
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	48 ec       	ldi	r20, 0xC8	; 200
    624a:	52 e4       	ldi	r21, 0x42	; 66
    624c:	59 d1       	rcall	.+690    	; 0x6500 <__divsf3>
    624e:	28 eb       	ldi	r18, 0xB8	; 184
    6250:	3e e1       	ldi	r19, 0x1E	; 30
    6252:	45 e1       	ldi	r20, 0x15	; 21
    6254:	50 e4       	ldi	r21, 0x40	; 64
    6256:	6f d0       	rcall	.+222    	; 0x6336 <__subsf3>
    6258:	6b 01       	movw	r12, r22
    625a:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    625c:	6d 85       	ldd	r22, Y+13	; 0x0d
    625e:	7e 85       	ldd	r23, Y+14	; 0x0e
    6260:	8f 85       	ldd	r24, Y+15	; 0x0f
    6262:	98 89       	ldd	r25, Y+16	; 0x10
    6264:	e8 d1       	rcall	.+976    	; 0x6636 <__floatsisf>
    6266:	20 e0       	ldi	r18, 0x00	; 0
    6268:	30 e0       	ldi	r19, 0x00	; 0
    626a:	48 ec       	ldi	r20, 0xC8	; 200
    626c:	52 e4       	ldi	r21, 0x42	; 66
    626e:	48 d1       	rcall	.+656    	; 0x6500 <__divsf3>
    6270:	23 e3       	ldi	r18, 0x33	; 51
    6272:	33 e3       	ldi	r19, 0x33	; 51
    6274:	43 e4       	ldi	r20, 0x43	; 67
    6276:	52 e4       	ldi	r21, 0x42	; 66
    6278:	5e d0       	rcall	.+188    	; 0x6336 <__subsf3>
    627a:	4b 01       	movw	r8, r22
    627c:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    627e:	6d 89       	ldd	r22, Y+21	; 0x15
    6280:	7e 89       	ldd	r23, Y+22	; 0x16
    6282:	8f 89       	ldd	r24, Y+23	; 0x17
    6284:	98 8d       	ldd	r25, Y+24	; 0x18
    6286:	d7 d1       	rcall	.+942    	; 0x6636 <__floatsisf>
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	48 ec       	ldi	r20, 0xC8	; 200
    628e:	52 e4       	ldi	r21, 0x42	; 66
    6290:	37 d1       	rcall	.+622    	; 0x6500 <__divsf3>
    6292:	28 ed       	ldi	r18, 0xD8	; 216
    6294:	3f e0       	ldi	r19, 0x0F	; 15
    6296:	49 e4       	ldi	r20, 0x49	; 73
    6298:	50 e4       	ldi	r21, 0x40	; 64
    629a:	50 d3       	rcall	.+1696   	; 0x693c <__mulsf3>
    629c:	20 e0       	ldi	r18, 0x00	; 0
    629e:	30 e0       	ldi	r19, 0x00	; 0
    62a0:	44 e3       	ldi	r20, 0x34	; 52
    62a2:	53 e4       	ldi	r21, 0x43	; 67
    62a4:	2d d1       	rcall	.+602    	; 0x6500 <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    62a6:	29 d1       	rcall	.+594    	; 0x64fa <cos>
    62a8:	2b 01       	movw	r4, r22
    62aa:	3c 01       	movw	r6, r24
    62ac:	a5 01       	movw	r20, r10
    62ae:	94 01       	movw	r18, r8
    62b0:	c5 01       	movw	r24, r10
    62b2:	b4 01       	movw	r22, r8
    62b4:	43 d3       	rcall	.+1670   	; 0x693c <__mulsf3>
    62b6:	4b 01       	movw	r8, r22
    62b8:	5c 01       	movw	r10, r24
    62ba:	a7 01       	movw	r20, r14
    62bc:	96 01       	movw	r18, r12
    62be:	c3 01       	movw	r24, r6
    62c0:	b2 01       	movw	r22, r4
    62c2:	3c d3       	rcall	.+1656   	; 0x693c <__mulsf3>
    62c4:	a7 01       	movw	r20, r14
    62c6:	96 01       	movw	r18, r12
    62c8:	39 d3       	rcall	.+1650   	; 0x693c <__mulsf3>
    62ca:	9b 01       	movw	r18, r22
    62cc:	ac 01       	movw	r20, r24
    62ce:	c5 01       	movw	r24, r10
    62d0:	b4 01       	movw	r22, r8
    62d2:	32 d0       	rcall	.+100    	; 0x6338 <__addsf3>
    62d4:	20 e0       	ldi	r18, 0x00	; 0
    62d6:	30 e0       	ldi	r19, 0x00	; 0
    62d8:	48 ec       	ldi	r20, 0xC8	; 200
    62da:	52 e4       	ldi	r21, 0x42	; 66
    62dc:	0a d1       	rcall	.+532    	; 0x64f2 <__cmpsf2>
    62de:	88 23       	and	r24, r24
    62e0:	5c f4       	brge	.+22     	; 0x62f8 <main+0x8b0>
    62e2:	80 91 22 01 	lds	r24, 0x0122
    62e6:	81 30       	cpi	r24, 0x01	; 1
    62e8:	39 f4       	brne	.+14     	; 0x62f8 <main+0x8b0>
      {
	  flag_mumbai = 0;
    62ea:	10 92 7a 04 	sts	0x047A, r1
      flag_france = 1;
    62ee:	80 93 7b 04 	sts	0x047B, r24
	  flag_india = 0;
    62f2:	10 92 7c 04 	sts	0x047C, r1
    62f6:	06 c0       	rjmp	.+12     	; 0x6304 <main+0x8bc>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    62f8:	10 92 7b 04 	sts	0x047B, r1
	  flag_india = 0;
    62fc:	10 92 7c 04 	sts	0x047C, r1
	  flag_mumbai = 0;
    6300:	10 92 7a 04 	sts	0x047A, r1
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    6304:	80 91 1d 01 	lds	r24, 0x011D
    6308:	90 91 1e 01 	lds	r25, 0x011E
    630c:	01 96       	adiw	r24, 0x01	; 1
    630e:	90 93 1e 01 	sts	0x011E, r25
    6312:	80 93 1d 01 	sts	0x011D, r24
    //}
	timer_wait_reset();
    6316:	f7 da       	rcall	.-2578   	; 0x5906 <timer_wait_reset>
	//wdt_disable();
  }
    6318:	e0 cb       	rjmp	.-2112   	; 0x5ada <main+0x92>

0000631a <acos>:
    631a:	9f 93       	push	r25
    631c:	9f 77       	andi	r25, 0x7F	; 127
    631e:	04 d2       	rcall	.+1032   	; 0x6728 <__fp_arccos>
    6320:	0f 90       	pop	r0
    6322:	00 20       	and	r0, r0
    6324:	3a f4       	brpl	.+14     	; 0x6334 <acos+0x1a>
    6326:	90 58       	subi	r25, 0x80	; 128
    6328:	a2 ea       	ldi	r26, 0xA2	; 162
    632a:	2a ed       	ldi	r18, 0xDA	; 218
    632c:	3f e0       	ldi	r19, 0x0F	; 15
    632e:	49 e4       	ldi	r20, 0x49	; 73
    6330:	50 e4       	ldi	r21, 0x40	; 64
    6332:	13 d0       	rcall	.+38     	; 0x635a <__addsf3x>
    6334:	ad c2       	rjmp	.+1370   	; 0x6890 <__fp_round>

00006336 <__subsf3>:
    6336:	50 58       	subi	r21, 0x80	; 128

00006338 <__addsf3>:
    6338:	bb 27       	eor	r27, r27
    633a:	aa 27       	eor	r26, r26
    633c:	0e d0       	rcall	.+28     	; 0x635a <__addsf3x>
    633e:	a8 c2       	rjmp	.+1360   	; 0x6890 <__fp_round>
    6340:	71 d2       	rcall	.+1250   	; 0x6824 <__fp_pscA>
    6342:	30 f0       	brcs	.+12     	; 0x6350 <__addsf3+0x18>
    6344:	76 d2       	rcall	.+1260   	; 0x6832 <__fp_pscB>
    6346:	20 f0       	brcs	.+8      	; 0x6350 <__addsf3+0x18>
    6348:	31 f4       	brne	.+12     	; 0x6356 <__addsf3+0x1e>
    634a:	9f 3f       	cpi	r25, 0xFF	; 255
    634c:	11 f4       	brne	.+4      	; 0x6352 <__addsf3+0x1a>
    634e:	1e f4       	brtc	.+6      	; 0x6356 <__addsf3+0x1e>
    6350:	30 c2       	rjmp	.+1120   	; 0x67b2 <__fp_nan>
    6352:	0e f4       	brtc	.+2      	; 0x6356 <__addsf3+0x1e>
    6354:	e0 95       	com	r30
    6356:	e7 fb       	bst	r30, 7
    6358:	26 c2       	rjmp	.+1100   	; 0x67a6 <__fp_inf>

0000635a <__addsf3x>:
    635a:	e9 2f       	mov	r30, r25
    635c:	bb d2       	rcall	.+1398   	; 0x68d4 <__fp_split3>
    635e:	80 f3       	brcs	.-32     	; 0x6340 <__addsf3+0x8>
    6360:	ba 17       	cp	r27, r26
    6362:	62 07       	cpc	r22, r18
    6364:	73 07       	cpc	r23, r19
    6366:	84 07       	cpc	r24, r20
    6368:	95 07       	cpc	r25, r21
    636a:	18 f0       	brcs	.+6      	; 0x6372 <__addsf3x+0x18>
    636c:	71 f4       	brne	.+28     	; 0x638a <__addsf3x+0x30>
    636e:	9e f5       	brtc	.+102    	; 0x63d6 <__addsf3x+0x7c>
    6370:	d3 c2       	rjmp	.+1446   	; 0x6918 <__fp_zero>
    6372:	0e f4       	brtc	.+2      	; 0x6376 <__addsf3x+0x1c>
    6374:	e0 95       	com	r30
    6376:	0b 2e       	mov	r0, r27
    6378:	ba 2f       	mov	r27, r26
    637a:	a0 2d       	mov	r26, r0
    637c:	0b 01       	movw	r0, r22
    637e:	b9 01       	movw	r22, r18
    6380:	90 01       	movw	r18, r0
    6382:	0c 01       	movw	r0, r24
    6384:	ca 01       	movw	r24, r20
    6386:	a0 01       	movw	r20, r0
    6388:	11 24       	eor	r1, r1
    638a:	ff 27       	eor	r31, r31
    638c:	59 1b       	sub	r21, r25
    638e:	99 f0       	breq	.+38     	; 0x63b6 <__addsf3x+0x5c>
    6390:	59 3f       	cpi	r21, 0xF9	; 249
    6392:	50 f4       	brcc	.+20     	; 0x63a8 <__addsf3x+0x4e>
    6394:	50 3e       	cpi	r21, 0xE0	; 224
    6396:	68 f1       	brcs	.+90     	; 0x63f2 <__addsf3x+0x98>
    6398:	1a 16       	cp	r1, r26
    639a:	f0 40       	sbci	r31, 0x00	; 0
    639c:	a2 2f       	mov	r26, r18
    639e:	23 2f       	mov	r18, r19
    63a0:	34 2f       	mov	r19, r20
    63a2:	44 27       	eor	r20, r20
    63a4:	58 5f       	subi	r21, 0xF8	; 248
    63a6:	f3 cf       	rjmp	.-26     	; 0x638e <__addsf3x+0x34>
    63a8:	46 95       	lsr	r20
    63aa:	37 95       	ror	r19
    63ac:	27 95       	ror	r18
    63ae:	a7 95       	ror	r26
    63b0:	f0 40       	sbci	r31, 0x00	; 0
    63b2:	53 95       	inc	r21
    63b4:	c9 f7       	brne	.-14     	; 0x63a8 <__addsf3x+0x4e>
    63b6:	7e f4       	brtc	.+30     	; 0x63d6 <__addsf3x+0x7c>
    63b8:	1f 16       	cp	r1, r31
    63ba:	ba 0b       	sbc	r27, r26
    63bc:	62 0b       	sbc	r22, r18
    63be:	73 0b       	sbc	r23, r19
    63c0:	84 0b       	sbc	r24, r20
    63c2:	ba f0       	brmi	.+46     	; 0x63f2 <__addsf3x+0x98>
    63c4:	91 50       	subi	r25, 0x01	; 1
    63c6:	a1 f0       	breq	.+40     	; 0x63f0 <__addsf3x+0x96>
    63c8:	ff 0f       	add	r31, r31
    63ca:	bb 1f       	adc	r27, r27
    63cc:	66 1f       	adc	r22, r22
    63ce:	77 1f       	adc	r23, r23
    63d0:	88 1f       	adc	r24, r24
    63d2:	c2 f7       	brpl	.-16     	; 0x63c4 <__addsf3x+0x6a>
    63d4:	0e c0       	rjmp	.+28     	; 0x63f2 <__addsf3x+0x98>
    63d6:	ba 0f       	add	r27, r26
    63d8:	62 1f       	adc	r22, r18
    63da:	73 1f       	adc	r23, r19
    63dc:	84 1f       	adc	r24, r20
    63de:	48 f4       	brcc	.+18     	; 0x63f2 <__addsf3x+0x98>
    63e0:	87 95       	ror	r24
    63e2:	77 95       	ror	r23
    63e4:	67 95       	ror	r22
    63e6:	b7 95       	ror	r27
    63e8:	f7 95       	ror	r31
    63ea:	9e 3f       	cpi	r25, 0xFE	; 254
    63ec:	08 f0       	brcs	.+2      	; 0x63f0 <__addsf3x+0x96>
    63ee:	b3 cf       	rjmp	.-154    	; 0x6356 <__addsf3+0x1e>
    63f0:	93 95       	inc	r25
    63f2:	88 0f       	add	r24, r24
    63f4:	08 f0       	brcs	.+2      	; 0x63f8 <__addsf3x+0x9e>
    63f6:	99 27       	eor	r25, r25
    63f8:	ee 0f       	add	r30, r30
    63fa:	97 95       	ror	r25
    63fc:	87 95       	ror	r24
    63fe:	08 95       	ret

00006400 <asin>:
    6400:	9f 93       	push	r25
    6402:	9f 77       	andi	r25, 0x7F	; 127
    6404:	ee e3       	ldi	r30, 0x3E	; 62
    6406:	89 37       	cpi	r24, 0x79	; 121
    6408:	9e 07       	cpc	r25, r30
    640a:	20 f4       	brcc	.+8      	; 0x6414 <asin+0x14>
    640c:	e2 ea       	ldi	r30, 0xA2	; 162
    640e:	f0 e0       	ldi	r31, 0x00	; 0
    6410:	f8 d1       	rcall	.+1008   	; 0x6802 <__fp_powsodd>
    6412:	09 c0       	rjmp	.+18     	; 0x6426 <asin+0x26>
    6414:	89 d1       	rcall	.+786    	; 0x6728 <__fp_arccos>
    6416:	90 58       	subi	r25, 0x80	; 128
    6418:	a2 ea       	ldi	r26, 0xA2	; 162
    641a:	2a ed       	ldi	r18, 0xDA	; 218
    641c:	3f e0       	ldi	r19, 0x0F	; 15
    641e:	49 ec       	ldi	r20, 0xC9	; 201
    6420:	5f e3       	ldi	r21, 0x3F	; 63
    6422:	9b df       	rcall	.-202    	; 0x635a <__addsf3x>
    6424:	35 d2       	rcall	.+1130   	; 0x6890 <__fp_round>
    6426:	0f 90       	pop	r0
    6428:	07 fc       	sbrc	r0, 7
    642a:	90 58       	subi	r25, 0x80	; 128
    642c:	08 95       	ret
    642e:	fa d1       	rcall	.+1012   	; 0x6824 <__fp_pscA>
    6430:	58 f0       	brcs	.+22     	; 0x6448 <asin+0x48>
    6432:	80 e8       	ldi	r24, 0x80	; 128
    6434:	91 e0       	ldi	r25, 0x01	; 1
    6436:	09 f4       	brne	.+2      	; 0x643a <asin+0x3a>
    6438:	9e ef       	ldi	r25, 0xFE	; 254
    643a:	fb d1       	rcall	.+1014   	; 0x6832 <__fp_pscB>
    643c:	28 f0       	brcs	.+10     	; 0x6448 <asin+0x48>
    643e:	40 e8       	ldi	r20, 0x80	; 128
    6440:	51 e0       	ldi	r21, 0x01	; 1
    6442:	59 f4       	brne	.+22     	; 0x645a <atan2+0xe>
    6444:	5e ef       	ldi	r21, 0xFE	; 254
    6446:	09 c0       	rjmp	.+18     	; 0x645a <atan2+0xe>
    6448:	b4 c1       	rjmp	.+872    	; 0x67b2 <__fp_nan>
    644a:	66 c2       	rjmp	.+1228   	; 0x6918 <__fp_zero>

0000644c <atan2>:
    644c:	e9 2f       	mov	r30, r25
    644e:	e0 78       	andi	r30, 0x80	; 128
    6450:	41 d2       	rcall	.+1154   	; 0x68d4 <__fp_split3>
    6452:	68 f3       	brcs	.-38     	; 0x642e <asin+0x2e>
    6454:	09 2e       	mov	r0, r25
    6456:	05 2a       	or	r0, r21
    6458:	c1 f3       	breq	.-16     	; 0x644a <asin+0x4a>
    645a:	26 17       	cp	r18, r22
    645c:	37 07       	cpc	r19, r23
    645e:	48 07       	cpc	r20, r24
    6460:	59 07       	cpc	r21, r25
    6462:	38 f0       	brcs	.+14     	; 0x6472 <atan2+0x26>
    6464:	0e 2e       	mov	r0, r30
    6466:	07 f8       	bld	r0, 7
    6468:	e0 25       	eor	r30, r0
    646a:	69 f0       	breq	.+26     	; 0x6486 <atan2+0x3a>
    646c:	e0 25       	eor	r30, r0
    646e:	e0 64       	ori	r30, 0x40	; 64
    6470:	0a c0       	rjmp	.+20     	; 0x6486 <atan2+0x3a>
    6472:	ef 63       	ori	r30, 0x3F	; 63
    6474:	07 f8       	bld	r0, 7
    6476:	00 94       	com	r0
    6478:	07 fa       	bst	r0, 7
    647a:	db 01       	movw	r26, r22
    647c:	b9 01       	movw	r22, r18
    647e:	9d 01       	movw	r18, r26
    6480:	dc 01       	movw	r26, r24
    6482:	ca 01       	movw	r24, r20
    6484:	ad 01       	movw	r20, r26
    6486:	ef 93       	push	r30
    6488:	4a d0       	rcall	.+148    	; 0x651e <__divsf3_pse>
    648a:	02 d2       	rcall	.+1028   	; 0x6890 <__fp_round>
    648c:	0a d0       	rcall	.+20     	; 0x64a2 <atan>
    648e:	5f 91       	pop	r21
    6490:	55 23       	and	r21, r21
    6492:	31 f0       	breq	.+12     	; 0x64a0 <atan2+0x54>
    6494:	2b ed       	ldi	r18, 0xDB	; 219
    6496:	3f e0       	ldi	r19, 0x0F	; 15
    6498:	49 e4       	ldi	r20, 0x49	; 73
    649a:	50 fd       	sbrc	r21, 0
    649c:	49 ec       	ldi	r20, 0xC9	; 201
    649e:	4c cf       	rjmp	.-360    	; 0x6338 <__addsf3>
    64a0:	08 95       	ret

000064a2 <atan>:
    64a2:	df 93       	push	r29
    64a4:	dd 27       	eor	r29, r29
    64a6:	b9 2f       	mov	r27, r25
    64a8:	bf 77       	andi	r27, 0x7F	; 127
    64aa:	40 e8       	ldi	r20, 0x80	; 128
    64ac:	5f e3       	ldi	r21, 0x3F	; 63
    64ae:	16 16       	cp	r1, r22
    64b0:	17 06       	cpc	r1, r23
    64b2:	48 07       	cpc	r20, r24
    64b4:	5b 07       	cpc	r21, r27
    64b6:	10 f4       	brcc	.+4      	; 0x64bc <atan+0x1a>
    64b8:	d9 2f       	mov	r29, r25
    64ba:	39 d2       	rcall	.+1138   	; 0x692e <inverse>
    64bc:	9f 93       	push	r25
    64be:	8f 93       	push	r24
    64c0:	7f 93       	push	r23
    64c2:	6f 93       	push	r22
    64c4:	32 d3       	rcall	.+1636   	; 0x6b2a <square>
    64c6:	e6 eb       	ldi	r30, 0xB6	; 182
    64c8:	f0 e0       	ldi	r31, 0x00	; 0
    64ca:	76 d1       	rcall	.+748    	; 0x67b8 <__fp_powser>
    64cc:	e1 d1       	rcall	.+962    	; 0x6890 <__fp_round>
    64ce:	2f 91       	pop	r18
    64d0:	3f 91       	pop	r19
    64d2:	4f 91       	pop	r20
    64d4:	5f 91       	pop	r21
    64d6:	3e d2       	rcall	.+1148   	; 0x6954 <__mulsf3x>
    64d8:	dd 23       	and	r29, r29
    64da:	49 f0       	breq	.+18     	; 0x64ee <atan+0x4c>
    64dc:	90 58       	subi	r25, 0x80	; 128
    64de:	a2 ea       	ldi	r26, 0xA2	; 162
    64e0:	2a ed       	ldi	r18, 0xDA	; 218
    64e2:	3f e0       	ldi	r19, 0x0F	; 15
    64e4:	49 ec       	ldi	r20, 0xC9	; 201
    64e6:	5f e3       	ldi	r21, 0x3F	; 63
    64e8:	d0 78       	andi	r29, 0x80	; 128
    64ea:	5d 27       	eor	r21, r29
    64ec:	36 df       	rcall	.-404    	; 0x635a <__addsf3x>
    64ee:	df 91       	pop	r29
    64f0:	cf c1       	rjmp	.+926    	; 0x6890 <__fp_round>

000064f2 <__cmpsf2>:
    64f2:	35 d1       	rcall	.+618    	; 0x675e <__fp_cmp>
    64f4:	08 f4       	brcc	.+2      	; 0x64f8 <__cmpsf2+0x6>
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	08 95       	ret

000064fa <cos>:
    64fa:	a3 d1       	rcall	.+838    	; 0x6842 <__fp_rempio2>
    64fc:	e3 95       	inc	r30
    64fe:	d9 c1       	rjmp	.+946    	; 0x68b2 <__fp_sinus>

00006500 <__divsf3>:
    6500:	0c d0       	rcall	.+24     	; 0x651a <__divsf3x>
    6502:	c6 c1       	rjmp	.+908    	; 0x6890 <__fp_round>
    6504:	96 d1       	rcall	.+812    	; 0x6832 <__fp_pscB>
    6506:	40 f0       	brcs	.+16     	; 0x6518 <__divsf3+0x18>
    6508:	8d d1       	rcall	.+794    	; 0x6824 <__fp_pscA>
    650a:	30 f0       	brcs	.+12     	; 0x6518 <__divsf3+0x18>
    650c:	21 f4       	brne	.+8      	; 0x6516 <__divsf3+0x16>
    650e:	5f 3f       	cpi	r21, 0xFF	; 255
    6510:	19 f0       	breq	.+6      	; 0x6518 <__divsf3+0x18>
    6512:	49 c1       	rjmp	.+658    	; 0x67a6 <__fp_inf>
    6514:	51 11       	cpse	r21, r1
    6516:	01 c2       	rjmp	.+1026   	; 0x691a <__fp_szero>
    6518:	4c c1       	rjmp	.+664    	; 0x67b2 <__fp_nan>

0000651a <__divsf3x>:
    651a:	dc d1       	rcall	.+952    	; 0x68d4 <__fp_split3>
    651c:	98 f3       	brcs	.-26     	; 0x6504 <__divsf3+0x4>

0000651e <__divsf3_pse>:
    651e:	99 23       	and	r25, r25
    6520:	c9 f3       	breq	.-14     	; 0x6514 <__divsf3+0x14>
    6522:	55 23       	and	r21, r21
    6524:	b1 f3       	breq	.-20     	; 0x6512 <__divsf3+0x12>
    6526:	95 1b       	sub	r25, r21
    6528:	55 0b       	sbc	r21, r21
    652a:	bb 27       	eor	r27, r27
    652c:	aa 27       	eor	r26, r26
    652e:	62 17       	cp	r22, r18
    6530:	73 07       	cpc	r23, r19
    6532:	84 07       	cpc	r24, r20
    6534:	38 f0       	brcs	.+14     	; 0x6544 <__divsf3_pse+0x26>
    6536:	9f 5f       	subi	r25, 0xFF	; 255
    6538:	5f 4f       	sbci	r21, 0xFF	; 255
    653a:	22 0f       	add	r18, r18
    653c:	33 1f       	adc	r19, r19
    653e:	44 1f       	adc	r20, r20
    6540:	aa 1f       	adc	r26, r26
    6542:	a9 f3       	breq	.-22     	; 0x652e <__divsf3_pse+0x10>
    6544:	33 d0       	rcall	.+102    	; 0x65ac <__divsf3_pse+0x8e>
    6546:	0e 2e       	mov	r0, r30
    6548:	3a f0       	brmi	.+14     	; 0x6558 <__divsf3_pse+0x3a>
    654a:	e0 e8       	ldi	r30, 0x80	; 128
    654c:	30 d0       	rcall	.+96     	; 0x65ae <__divsf3_pse+0x90>
    654e:	91 50       	subi	r25, 0x01	; 1
    6550:	50 40       	sbci	r21, 0x00	; 0
    6552:	e6 95       	lsr	r30
    6554:	00 1c       	adc	r0, r0
    6556:	ca f7       	brpl	.-14     	; 0x654a <__divsf3_pse+0x2c>
    6558:	29 d0       	rcall	.+82     	; 0x65ac <__divsf3_pse+0x8e>
    655a:	fe 2f       	mov	r31, r30
    655c:	27 d0       	rcall	.+78     	; 0x65ac <__divsf3_pse+0x8e>
    655e:	66 0f       	add	r22, r22
    6560:	77 1f       	adc	r23, r23
    6562:	88 1f       	adc	r24, r24
    6564:	bb 1f       	adc	r27, r27
    6566:	26 17       	cp	r18, r22
    6568:	37 07       	cpc	r19, r23
    656a:	48 07       	cpc	r20, r24
    656c:	ab 07       	cpc	r26, r27
    656e:	b0 e8       	ldi	r27, 0x80	; 128
    6570:	09 f0       	breq	.+2      	; 0x6574 <__divsf3_pse+0x56>
    6572:	bb 0b       	sbc	r27, r27
    6574:	80 2d       	mov	r24, r0
    6576:	bf 01       	movw	r22, r30
    6578:	ff 27       	eor	r31, r31
    657a:	93 58       	subi	r25, 0x83	; 131
    657c:	5f 4f       	sbci	r21, 0xFF	; 255
    657e:	2a f0       	brmi	.+10     	; 0x658a <__divsf3_pse+0x6c>
    6580:	9e 3f       	cpi	r25, 0xFE	; 254
    6582:	51 05       	cpc	r21, r1
    6584:	68 f0       	brcs	.+26     	; 0x65a0 <__divsf3_pse+0x82>
    6586:	0f c1       	rjmp	.+542    	; 0x67a6 <__fp_inf>
    6588:	c8 c1       	rjmp	.+912    	; 0x691a <__fp_szero>
    658a:	5f 3f       	cpi	r21, 0xFF	; 255
    658c:	ec f3       	brlt	.-6      	; 0x6588 <__divsf3_pse+0x6a>
    658e:	98 3e       	cpi	r25, 0xE8	; 232
    6590:	dc f3       	brlt	.-10     	; 0x6588 <__divsf3_pse+0x6a>
    6592:	86 95       	lsr	r24
    6594:	77 95       	ror	r23
    6596:	67 95       	ror	r22
    6598:	b7 95       	ror	r27
    659a:	f7 95       	ror	r31
    659c:	9f 5f       	subi	r25, 0xFF	; 255
    659e:	c9 f7       	brne	.-14     	; 0x6592 <__divsf3_pse+0x74>
    65a0:	88 0f       	add	r24, r24
    65a2:	91 1d       	adc	r25, r1
    65a4:	96 95       	lsr	r25
    65a6:	87 95       	ror	r24
    65a8:	97 f9       	bld	r25, 7
    65aa:	08 95       	ret
    65ac:	e1 e0       	ldi	r30, 0x01	; 1
    65ae:	66 0f       	add	r22, r22
    65b0:	77 1f       	adc	r23, r23
    65b2:	88 1f       	adc	r24, r24
    65b4:	bb 1f       	adc	r27, r27
    65b6:	62 17       	cp	r22, r18
    65b8:	73 07       	cpc	r23, r19
    65ba:	84 07       	cpc	r24, r20
    65bc:	ba 07       	cpc	r27, r26
    65be:	20 f0       	brcs	.+8      	; 0x65c8 <__divsf3_pse+0xaa>
    65c0:	62 1b       	sub	r22, r18
    65c2:	73 0b       	sbc	r23, r19
    65c4:	84 0b       	sbc	r24, r20
    65c6:	ba 0b       	sbc	r27, r26
    65c8:	ee 1f       	adc	r30, r30
    65ca:	88 f7       	brcc	.-30     	; 0x65ae <__divsf3_pse+0x90>
    65cc:	e0 95       	com	r30
    65ce:	08 95       	ret

000065d0 <__fixsfsi>:
    65d0:	04 d0       	rcall	.+8      	; 0x65da <__fixunssfsi>
    65d2:	68 94       	set
    65d4:	b1 11       	cpse	r27, r1
    65d6:	a1 c1       	rjmp	.+834    	; 0x691a <__fp_szero>
    65d8:	08 95       	ret

000065da <__fixunssfsi>:
    65da:	84 d1       	rcall	.+776    	; 0x68e4 <__fp_splitA>
    65dc:	88 f0       	brcs	.+34     	; 0x6600 <__fixunssfsi+0x26>
    65de:	9f 57       	subi	r25, 0x7F	; 127
    65e0:	90 f0       	brcs	.+36     	; 0x6606 <__fixunssfsi+0x2c>
    65e2:	b9 2f       	mov	r27, r25
    65e4:	99 27       	eor	r25, r25
    65e6:	b7 51       	subi	r27, 0x17	; 23
    65e8:	a0 f0       	brcs	.+40     	; 0x6612 <__fixunssfsi+0x38>
    65ea:	d1 f0       	breq	.+52     	; 0x6620 <__fixunssfsi+0x46>
    65ec:	66 0f       	add	r22, r22
    65ee:	77 1f       	adc	r23, r23
    65f0:	88 1f       	adc	r24, r24
    65f2:	99 1f       	adc	r25, r25
    65f4:	1a f0       	brmi	.+6      	; 0x65fc <__fixunssfsi+0x22>
    65f6:	ba 95       	dec	r27
    65f8:	c9 f7       	brne	.-14     	; 0x65ec <__fixunssfsi+0x12>
    65fa:	12 c0       	rjmp	.+36     	; 0x6620 <__fixunssfsi+0x46>
    65fc:	b1 30       	cpi	r27, 0x01	; 1
    65fe:	81 f0       	breq	.+32     	; 0x6620 <__fixunssfsi+0x46>
    6600:	8b d1       	rcall	.+790    	; 0x6918 <__fp_zero>
    6602:	b1 e0       	ldi	r27, 0x01	; 1
    6604:	08 95       	ret
    6606:	88 c1       	rjmp	.+784    	; 0x6918 <__fp_zero>
    6608:	67 2f       	mov	r22, r23
    660a:	78 2f       	mov	r23, r24
    660c:	88 27       	eor	r24, r24
    660e:	b8 5f       	subi	r27, 0xF8	; 248
    6610:	39 f0       	breq	.+14     	; 0x6620 <__fixunssfsi+0x46>
    6612:	b9 3f       	cpi	r27, 0xF9	; 249
    6614:	cc f3       	brlt	.-14     	; 0x6608 <__fixunssfsi+0x2e>
    6616:	86 95       	lsr	r24
    6618:	77 95       	ror	r23
    661a:	67 95       	ror	r22
    661c:	b3 95       	inc	r27
    661e:	d9 f7       	brne	.-10     	; 0x6616 <__fixunssfsi+0x3c>
    6620:	3e f4       	brtc	.+14     	; 0x6630 <__fixunssfsi+0x56>
    6622:	90 95       	com	r25
    6624:	80 95       	com	r24
    6626:	70 95       	com	r23
    6628:	61 95       	neg	r22
    662a:	7f 4f       	sbci	r23, 0xFF	; 255
    662c:	8f 4f       	sbci	r24, 0xFF	; 255
    662e:	9f 4f       	sbci	r25, 0xFF	; 255
    6630:	08 95       	ret

00006632 <__floatunsisf>:
    6632:	e8 94       	clt
    6634:	09 c0       	rjmp	.+18     	; 0x6648 <__floatsisf+0x12>

00006636 <__floatsisf>:
    6636:	97 fb       	bst	r25, 7
    6638:	3e f4       	brtc	.+14     	; 0x6648 <__floatsisf+0x12>
    663a:	90 95       	com	r25
    663c:	80 95       	com	r24
    663e:	70 95       	com	r23
    6640:	61 95       	neg	r22
    6642:	7f 4f       	sbci	r23, 0xFF	; 255
    6644:	8f 4f       	sbci	r24, 0xFF	; 255
    6646:	9f 4f       	sbci	r25, 0xFF	; 255
    6648:	99 23       	and	r25, r25
    664a:	a9 f0       	breq	.+42     	; 0x6676 <__floatsisf+0x40>
    664c:	f9 2f       	mov	r31, r25
    664e:	96 e9       	ldi	r25, 0x96	; 150
    6650:	bb 27       	eor	r27, r27
    6652:	93 95       	inc	r25
    6654:	f6 95       	lsr	r31
    6656:	87 95       	ror	r24
    6658:	77 95       	ror	r23
    665a:	67 95       	ror	r22
    665c:	b7 95       	ror	r27
    665e:	f1 11       	cpse	r31, r1
    6660:	f8 cf       	rjmp	.-16     	; 0x6652 <__floatsisf+0x1c>
    6662:	fa f4       	brpl	.+62     	; 0x66a2 <__floatsisf+0x6c>
    6664:	bb 0f       	add	r27, r27
    6666:	11 f4       	brne	.+4      	; 0x666c <__floatsisf+0x36>
    6668:	60 ff       	sbrs	r22, 0
    666a:	1b c0       	rjmp	.+54     	; 0x66a2 <__floatsisf+0x6c>
    666c:	6f 5f       	subi	r22, 0xFF	; 255
    666e:	7f 4f       	sbci	r23, 0xFF	; 255
    6670:	8f 4f       	sbci	r24, 0xFF	; 255
    6672:	9f 4f       	sbci	r25, 0xFF	; 255
    6674:	16 c0       	rjmp	.+44     	; 0x66a2 <__floatsisf+0x6c>
    6676:	88 23       	and	r24, r24
    6678:	11 f0       	breq	.+4      	; 0x667e <__floatsisf+0x48>
    667a:	96 e9       	ldi	r25, 0x96	; 150
    667c:	11 c0       	rjmp	.+34     	; 0x66a0 <__floatsisf+0x6a>
    667e:	77 23       	and	r23, r23
    6680:	21 f0       	breq	.+8      	; 0x668a <__floatsisf+0x54>
    6682:	9e e8       	ldi	r25, 0x8E	; 142
    6684:	87 2f       	mov	r24, r23
    6686:	76 2f       	mov	r23, r22
    6688:	05 c0       	rjmp	.+10     	; 0x6694 <__floatsisf+0x5e>
    668a:	66 23       	and	r22, r22
    668c:	71 f0       	breq	.+28     	; 0x66aa <__floatsisf+0x74>
    668e:	96 e8       	ldi	r25, 0x86	; 134
    6690:	86 2f       	mov	r24, r22
    6692:	70 e0       	ldi	r23, 0x00	; 0
    6694:	60 e0       	ldi	r22, 0x00	; 0
    6696:	2a f0       	brmi	.+10     	; 0x66a2 <__floatsisf+0x6c>
    6698:	9a 95       	dec	r25
    669a:	66 0f       	add	r22, r22
    669c:	77 1f       	adc	r23, r23
    669e:	88 1f       	adc	r24, r24
    66a0:	da f7       	brpl	.-10     	; 0x6698 <__floatsisf+0x62>
    66a2:	88 0f       	add	r24, r24
    66a4:	96 95       	lsr	r25
    66a6:	87 95       	ror	r24
    66a8:	97 f9       	bld	r25, 7
    66aa:	08 95       	ret

000066ac <__floatundisf>:
    66ac:	e8 94       	clt

000066ae <__fp_di2sf>:
    66ae:	f9 2f       	mov	r31, r25
    66b0:	96 eb       	ldi	r25, 0xB6	; 182
    66b2:	ff 23       	and	r31, r31
    66b4:	81 f0       	breq	.+32     	; 0x66d6 <__fp_di2sf+0x28>
    66b6:	12 16       	cp	r1, r18
    66b8:	13 06       	cpc	r1, r19
    66ba:	14 06       	cpc	r1, r20
    66bc:	44 0b       	sbc	r20, r20
    66be:	93 95       	inc	r25
    66c0:	f6 95       	lsr	r31
    66c2:	87 95       	ror	r24
    66c4:	77 95       	ror	r23
    66c6:	67 95       	ror	r22
    66c8:	57 95       	ror	r21
    66ca:	40 40       	sbci	r20, 0x00	; 0
    66cc:	ff 23       	and	r31, r31
    66ce:	b9 f7       	brne	.-18     	; 0x66be <__fp_di2sf+0x10>
    66d0:	1b c0       	rjmp	.+54     	; 0x6708 <__fp_di2sf+0x5a>
    66d2:	99 27       	eor	r25, r25
    66d4:	08 95       	ret
    66d6:	88 23       	and	r24, r24
    66d8:	51 f4       	brne	.+20     	; 0x66ee <__fp_di2sf+0x40>
    66da:	98 50       	subi	r25, 0x08	; 8
    66dc:	d2 f7       	brpl	.-12     	; 0x66d2 <__fp_di2sf+0x24>
    66de:	87 2b       	or	r24, r23
    66e0:	76 2f       	mov	r23, r22
    66e2:	65 2f       	mov	r22, r21
    66e4:	54 2f       	mov	r21, r20
    66e6:	43 2f       	mov	r20, r19
    66e8:	32 2f       	mov	r19, r18
    66ea:	20 e0       	ldi	r18, 0x00	; 0
    66ec:	b1 f3       	breq	.-20     	; 0x66da <__fp_di2sf+0x2c>
    66ee:	12 16       	cp	r1, r18
    66f0:	13 06       	cpc	r1, r19
    66f2:	14 06       	cpc	r1, r20
    66f4:	44 0b       	sbc	r20, r20
    66f6:	88 23       	and	r24, r24
    66f8:	3a f0       	brmi	.+14     	; 0x6708 <__fp_di2sf+0x5a>
    66fa:	9a 95       	dec	r25
    66fc:	44 0f       	add	r20, r20
    66fe:	55 1f       	adc	r21, r21
    6700:	66 1f       	adc	r22, r22
    6702:	77 1f       	adc	r23, r23
    6704:	88 1f       	adc	r24, r24
    6706:	ca f7       	brpl	.-14     	; 0x66fa <__fp_di2sf+0x4c>
    6708:	55 23       	and	r21, r21
    670a:	4a f4       	brpl	.+18     	; 0x671e <__fp_di2sf+0x70>
    670c:	44 0f       	add	r20, r20
    670e:	55 1f       	adc	r21, r21
    6710:	11 f4       	brne	.+4      	; 0x6716 <__fp_di2sf+0x68>
    6712:	60 ff       	sbrs	r22, 0
    6714:	04 c0       	rjmp	.+8      	; 0x671e <__fp_di2sf+0x70>
    6716:	6f 5f       	subi	r22, 0xFF	; 255
    6718:	7f 4f       	sbci	r23, 0xFF	; 255
    671a:	8f 4f       	sbci	r24, 0xFF	; 255
    671c:	9f 4f       	sbci	r25, 0xFF	; 255
    671e:	88 0f       	add	r24, r24
    6720:	96 95       	lsr	r25
    6722:	87 95       	ror	r24
    6724:	97 f9       	bld	r25, 7
    6726:	08 95       	ret

00006728 <__fp_arccos>:
    6728:	df 93       	push	r29
    672a:	cf 93       	push	r28
    672c:	1f 93       	push	r17
    672e:	0f 93       	push	r16
    6730:	8b 01       	movw	r16, r22
    6732:	ec 01       	movw	r28, r24
    6734:	e3 ee       	ldi	r30, 0xE3	; 227
    6736:	f0 e0       	ldi	r31, 0x00	; 0
    6738:	3f d0       	rcall	.+126    	; 0x67b8 <__fp_powser>
    673a:	aa d0       	rcall	.+340    	; 0x6890 <__fp_round>
    673c:	98 01       	movw	r18, r16
    673e:	ae 01       	movw	r20, r28
    6740:	8b 01       	movw	r16, r22
    6742:	ec 01       	movw	r28, r24
    6744:	60 e0       	ldi	r22, 0x00	; 0
    6746:	70 e0       	ldi	r23, 0x00	; 0
    6748:	80 e8       	ldi	r24, 0x80	; 128
    674a:	9f e3       	ldi	r25, 0x3F	; 63
    674c:	f4 dd       	rcall	.-1048   	; 0x6336 <__subsf3>
    674e:	af d1       	rcall	.+862    	; 0x6aae <sqrt>
    6750:	98 01       	movw	r18, r16
    6752:	ae 01       	movw	r20, r28
    6754:	0f 91       	pop	r16
    6756:	1f 91       	pop	r17
    6758:	cf 91       	pop	r28
    675a:	df 91       	pop	r29
    675c:	fb c0       	rjmp	.+502    	; 0x6954 <__mulsf3x>

0000675e <__fp_cmp>:
    675e:	99 0f       	add	r25, r25
    6760:	00 08       	sbc	r0, r0
    6762:	55 0f       	add	r21, r21
    6764:	aa 0b       	sbc	r26, r26
    6766:	e0 e8       	ldi	r30, 0x80	; 128
    6768:	fe ef       	ldi	r31, 0xFE	; 254
    676a:	16 16       	cp	r1, r22
    676c:	17 06       	cpc	r1, r23
    676e:	e8 07       	cpc	r30, r24
    6770:	f9 07       	cpc	r31, r25
    6772:	c0 f0       	brcs	.+48     	; 0x67a4 <__fp_cmp+0x46>
    6774:	12 16       	cp	r1, r18
    6776:	13 06       	cpc	r1, r19
    6778:	e4 07       	cpc	r30, r20
    677a:	f5 07       	cpc	r31, r21
    677c:	98 f0       	brcs	.+38     	; 0x67a4 <__fp_cmp+0x46>
    677e:	62 1b       	sub	r22, r18
    6780:	73 0b       	sbc	r23, r19
    6782:	84 0b       	sbc	r24, r20
    6784:	95 0b       	sbc	r25, r21
    6786:	39 f4       	brne	.+14     	; 0x6796 <__fp_cmp+0x38>
    6788:	0a 26       	eor	r0, r26
    678a:	61 f0       	breq	.+24     	; 0x67a4 <__fp_cmp+0x46>
    678c:	23 2b       	or	r18, r19
    678e:	24 2b       	or	r18, r20
    6790:	25 2b       	or	r18, r21
    6792:	21 f4       	brne	.+8      	; 0x679c <__fp_cmp+0x3e>
    6794:	08 95       	ret
    6796:	0a 26       	eor	r0, r26
    6798:	09 f4       	brne	.+2      	; 0x679c <__fp_cmp+0x3e>
    679a:	a1 40       	sbci	r26, 0x01	; 1
    679c:	a6 95       	lsr	r26
    679e:	8f ef       	ldi	r24, 0xFF	; 255
    67a0:	81 1d       	adc	r24, r1
    67a2:	81 1d       	adc	r24, r1
    67a4:	08 95       	ret

000067a6 <__fp_inf>:
    67a6:	97 f9       	bld	r25, 7
    67a8:	9f 67       	ori	r25, 0x7F	; 127
    67aa:	80 e8       	ldi	r24, 0x80	; 128
    67ac:	70 e0       	ldi	r23, 0x00	; 0
    67ae:	60 e0       	ldi	r22, 0x00	; 0
    67b0:	08 95       	ret

000067b2 <__fp_nan>:
    67b2:	9f ef       	ldi	r25, 0xFF	; 255
    67b4:	80 ec       	ldi	r24, 0xC0	; 192
    67b6:	08 95       	ret

000067b8 <__fp_powser>:
    67b8:	df 93       	push	r29
    67ba:	cf 93       	push	r28
    67bc:	1f 93       	push	r17
    67be:	0f 93       	push	r16
    67c0:	ff 92       	push	r15
    67c2:	ef 92       	push	r14
    67c4:	df 92       	push	r13
    67c6:	7b 01       	movw	r14, r22
    67c8:	8c 01       	movw	r16, r24
    67ca:	68 94       	set
    67cc:	05 c0       	rjmp	.+10     	; 0x67d8 <__fp_powser+0x20>
    67ce:	da 2e       	mov	r13, r26
    67d0:	ef 01       	movw	r28, r30
    67d2:	c0 d0       	rcall	.+384    	; 0x6954 <__mulsf3x>
    67d4:	fe 01       	movw	r30, r28
    67d6:	e8 94       	clt
    67d8:	a5 91       	lpm	r26, Z+
    67da:	25 91       	lpm	r18, Z+
    67dc:	35 91       	lpm	r19, Z+
    67de:	45 91       	lpm	r20, Z+
    67e0:	55 91       	lpm	r21, Z+
    67e2:	ae f3       	brts	.-22     	; 0x67ce <__fp_powser+0x16>
    67e4:	ef 01       	movw	r28, r30
    67e6:	b9 dd       	rcall	.-1166   	; 0x635a <__addsf3x>
    67e8:	fe 01       	movw	r30, r28
    67ea:	97 01       	movw	r18, r14
    67ec:	a8 01       	movw	r20, r16
    67ee:	da 94       	dec	r13
    67f0:	79 f7       	brne	.-34     	; 0x67d0 <__fp_powser+0x18>
    67f2:	df 90       	pop	r13
    67f4:	ef 90       	pop	r14
    67f6:	ff 90       	pop	r15
    67f8:	0f 91       	pop	r16
    67fa:	1f 91       	pop	r17
    67fc:	cf 91       	pop	r28
    67fe:	df 91       	pop	r29
    6800:	08 95       	ret

00006802 <__fp_powsodd>:
    6802:	9f 93       	push	r25
    6804:	8f 93       	push	r24
    6806:	7f 93       	push	r23
    6808:	6f 93       	push	r22
    680a:	ff 93       	push	r31
    680c:	ef 93       	push	r30
    680e:	9b 01       	movw	r18, r22
    6810:	ac 01       	movw	r20, r24
    6812:	94 d0       	rcall	.+296    	; 0x693c <__mulsf3>
    6814:	ef 91       	pop	r30
    6816:	ff 91       	pop	r31
    6818:	cf df       	rcall	.-98     	; 0x67b8 <__fp_powser>
    681a:	2f 91       	pop	r18
    681c:	3f 91       	pop	r19
    681e:	4f 91       	pop	r20
    6820:	5f 91       	pop	r21
    6822:	8c c0       	rjmp	.+280    	; 0x693c <__mulsf3>

00006824 <__fp_pscA>:
    6824:	00 24       	eor	r0, r0
    6826:	0a 94       	dec	r0
    6828:	16 16       	cp	r1, r22
    682a:	17 06       	cpc	r1, r23
    682c:	18 06       	cpc	r1, r24
    682e:	09 06       	cpc	r0, r25
    6830:	08 95       	ret

00006832 <__fp_pscB>:
    6832:	00 24       	eor	r0, r0
    6834:	0a 94       	dec	r0
    6836:	12 16       	cp	r1, r18
    6838:	13 06       	cpc	r1, r19
    683a:	14 06       	cpc	r1, r20
    683c:	05 06       	cpc	r0, r21
    683e:	08 95       	ret
    6840:	b8 cf       	rjmp	.-144    	; 0x67b2 <__fp_nan>

00006842 <__fp_rempio2>:
    6842:	50 d0       	rcall	.+160    	; 0x68e4 <__fp_splitA>
    6844:	e8 f3       	brcs	.-6      	; 0x6840 <__fp_pscB+0xe>
    6846:	e8 94       	clt
    6848:	e0 e0       	ldi	r30, 0x00	; 0
    684a:	bb 27       	eor	r27, r27
    684c:	9f 57       	subi	r25, 0x7F	; 127
    684e:	f0 f0       	brcs	.+60     	; 0x688c <__fp_rempio2+0x4a>
    6850:	2a ed       	ldi	r18, 0xDA	; 218
    6852:	3f e0       	ldi	r19, 0x0F	; 15
    6854:	49 ec       	ldi	r20, 0xC9	; 201
    6856:	06 c0       	rjmp	.+12     	; 0x6864 <__fp_rempio2+0x22>
    6858:	ee 0f       	add	r30, r30
    685a:	bb 0f       	add	r27, r27
    685c:	66 1f       	adc	r22, r22
    685e:	77 1f       	adc	r23, r23
    6860:	88 1f       	adc	r24, r24
    6862:	28 f0       	brcs	.+10     	; 0x686e <__fp_rempio2+0x2c>
    6864:	b2 3a       	cpi	r27, 0xA2	; 162
    6866:	62 07       	cpc	r22, r18
    6868:	73 07       	cpc	r23, r19
    686a:	84 07       	cpc	r24, r20
    686c:	28 f0       	brcs	.+10     	; 0x6878 <__fp_rempio2+0x36>
    686e:	b2 5a       	subi	r27, 0xA2	; 162
    6870:	62 0b       	sbc	r22, r18
    6872:	73 0b       	sbc	r23, r19
    6874:	84 0b       	sbc	r24, r20
    6876:	e3 95       	inc	r30
    6878:	9a 95       	dec	r25
    687a:	72 f7       	brpl	.-36     	; 0x6858 <__fp_rempio2+0x16>
    687c:	80 38       	cpi	r24, 0x80	; 128
    687e:	30 f4       	brcc	.+12     	; 0x688c <__fp_rempio2+0x4a>
    6880:	9a 95       	dec	r25
    6882:	bb 0f       	add	r27, r27
    6884:	66 1f       	adc	r22, r22
    6886:	77 1f       	adc	r23, r23
    6888:	88 1f       	adc	r24, r24
    688a:	d2 f7       	brpl	.-12     	; 0x6880 <__fp_rempio2+0x3e>
    688c:	90 48       	sbci	r25, 0x80	; 128
    688e:	83 c1       	rjmp	.+774    	; 0x6b96 <__fp_mpack_finite>

00006890 <__fp_round>:
    6890:	09 2e       	mov	r0, r25
    6892:	03 94       	inc	r0
    6894:	00 0c       	add	r0, r0
    6896:	11 f4       	brne	.+4      	; 0x689c <__fp_round+0xc>
    6898:	88 23       	and	r24, r24
    689a:	52 f0       	brmi	.+20     	; 0x68b0 <__fp_round+0x20>
    689c:	bb 0f       	add	r27, r27
    689e:	40 f4       	brcc	.+16     	; 0x68b0 <__fp_round+0x20>
    68a0:	bf 2b       	or	r27, r31
    68a2:	11 f4       	brne	.+4      	; 0x68a8 <__fp_round+0x18>
    68a4:	60 ff       	sbrs	r22, 0
    68a6:	04 c0       	rjmp	.+8      	; 0x68b0 <__fp_round+0x20>
    68a8:	6f 5f       	subi	r22, 0xFF	; 255
    68aa:	7f 4f       	sbci	r23, 0xFF	; 255
    68ac:	8f 4f       	sbci	r24, 0xFF	; 255
    68ae:	9f 4f       	sbci	r25, 0xFF	; 255
    68b0:	08 95       	ret

000068b2 <__fp_sinus>:
    68b2:	ef 93       	push	r30
    68b4:	e0 ff       	sbrs	r30, 0
    68b6:	06 c0       	rjmp	.+12     	; 0x68c4 <__fp_sinus+0x12>
    68b8:	a2 ea       	ldi	r26, 0xA2	; 162
    68ba:	2a ed       	ldi	r18, 0xDA	; 218
    68bc:	3f e0       	ldi	r19, 0x0F	; 15
    68be:	49 ec       	ldi	r20, 0xC9	; 201
    68c0:	5f eb       	ldi	r21, 0xBF	; 191
    68c2:	4b dd       	rcall	.-1386   	; 0x635a <__addsf3x>
    68c4:	e5 df       	rcall	.-54     	; 0x6890 <__fp_round>
    68c6:	0f 90       	pop	r0
    68c8:	03 94       	inc	r0
    68ca:	01 fc       	sbrc	r0, 1
    68cc:	90 58       	subi	r25, 0x80	; 128
    68ce:	eb e0       	ldi	r30, 0x0B	; 11
    68d0:	f1 e0       	ldi	r31, 0x01	; 1
    68d2:	97 cf       	rjmp	.-210    	; 0x6802 <__fp_powsodd>

000068d4 <__fp_split3>:
    68d4:	57 fd       	sbrc	r21, 7
    68d6:	90 58       	subi	r25, 0x80	; 128
    68d8:	44 0f       	add	r20, r20
    68da:	55 1f       	adc	r21, r21
    68dc:	59 f0       	breq	.+22     	; 0x68f4 <__fp_splitA+0x10>
    68de:	5f 3f       	cpi	r21, 0xFF	; 255
    68e0:	71 f0       	breq	.+28     	; 0x68fe <__fp_splitA+0x1a>
    68e2:	47 95       	ror	r20

000068e4 <__fp_splitA>:
    68e4:	88 0f       	add	r24, r24
    68e6:	97 fb       	bst	r25, 7
    68e8:	99 1f       	adc	r25, r25
    68ea:	61 f0       	breq	.+24     	; 0x6904 <__fp_splitA+0x20>
    68ec:	9f 3f       	cpi	r25, 0xFF	; 255
    68ee:	79 f0       	breq	.+30     	; 0x690e <__fp_splitA+0x2a>
    68f0:	87 95       	ror	r24
    68f2:	08 95       	ret
    68f4:	12 16       	cp	r1, r18
    68f6:	13 06       	cpc	r1, r19
    68f8:	14 06       	cpc	r1, r20
    68fa:	55 1f       	adc	r21, r21
    68fc:	f2 cf       	rjmp	.-28     	; 0x68e2 <__fp_split3+0xe>
    68fe:	46 95       	lsr	r20
    6900:	f1 df       	rcall	.-30     	; 0x68e4 <__fp_splitA>
    6902:	08 c0       	rjmp	.+16     	; 0x6914 <__fp_splitA+0x30>
    6904:	16 16       	cp	r1, r22
    6906:	17 06       	cpc	r1, r23
    6908:	18 06       	cpc	r1, r24
    690a:	99 1f       	adc	r25, r25
    690c:	f1 cf       	rjmp	.-30     	; 0x68f0 <__fp_splitA+0xc>
    690e:	86 95       	lsr	r24
    6910:	71 05       	cpc	r23, r1
    6912:	61 05       	cpc	r22, r1
    6914:	08 94       	sec
    6916:	08 95       	ret

00006918 <__fp_zero>:
    6918:	e8 94       	clt

0000691a <__fp_szero>:
    691a:	bb 27       	eor	r27, r27
    691c:	66 27       	eor	r22, r22
    691e:	77 27       	eor	r23, r23
    6920:	cb 01       	movw	r24, r22
    6922:	97 f9       	bld	r25, 7
    6924:	08 95       	ret

00006926 <__gesf2>:
    6926:	1b df       	rcall	.-458    	; 0x675e <__fp_cmp>
    6928:	08 f4       	brcc	.+2      	; 0x692c <__gesf2+0x6>
    692a:	8f ef       	ldi	r24, 0xFF	; 255
    692c:	08 95       	ret

0000692e <inverse>:
    692e:	9b 01       	movw	r18, r22
    6930:	ac 01       	movw	r20, r24
    6932:	60 e0       	ldi	r22, 0x00	; 0
    6934:	70 e0       	ldi	r23, 0x00	; 0
    6936:	80 e8       	ldi	r24, 0x80	; 128
    6938:	9f e3       	ldi	r25, 0x3F	; 63
    693a:	e2 cd       	rjmp	.-1084   	; 0x6500 <__divsf3>

0000693c <__mulsf3>:
    693c:	0b d0       	rcall	.+22     	; 0x6954 <__mulsf3x>
    693e:	a8 cf       	rjmp	.-176    	; 0x6890 <__fp_round>
    6940:	71 df       	rcall	.-286    	; 0x6824 <__fp_pscA>
    6942:	28 f0       	brcs	.+10     	; 0x694e <__mulsf3+0x12>
    6944:	76 df       	rcall	.-276    	; 0x6832 <__fp_pscB>
    6946:	18 f0       	brcs	.+6      	; 0x694e <__mulsf3+0x12>
    6948:	95 23       	and	r25, r21
    694a:	09 f0       	breq	.+2      	; 0x694e <__mulsf3+0x12>
    694c:	2c cf       	rjmp	.-424    	; 0x67a6 <__fp_inf>
    694e:	31 cf       	rjmp	.-414    	; 0x67b2 <__fp_nan>
    6950:	11 24       	eor	r1, r1
    6952:	e3 cf       	rjmp	.-58     	; 0x691a <__fp_szero>

00006954 <__mulsf3x>:
    6954:	bf df       	rcall	.-130    	; 0x68d4 <__fp_split3>
    6956:	a0 f3       	brcs	.-24     	; 0x6940 <__mulsf3+0x4>

00006958 <__mulsf3_pse>:
    6958:	95 9f       	mul	r25, r21
    695a:	d1 f3       	breq	.-12     	; 0x6950 <__mulsf3+0x14>
    695c:	95 0f       	add	r25, r21
    695e:	50 e0       	ldi	r21, 0x00	; 0
    6960:	55 1f       	adc	r21, r21
    6962:	62 9f       	mul	r22, r18
    6964:	f0 01       	movw	r30, r0
    6966:	72 9f       	mul	r23, r18
    6968:	bb 27       	eor	r27, r27
    696a:	f0 0d       	add	r31, r0
    696c:	b1 1d       	adc	r27, r1
    696e:	63 9f       	mul	r22, r19
    6970:	aa 27       	eor	r26, r26
    6972:	f0 0d       	add	r31, r0
    6974:	b1 1d       	adc	r27, r1
    6976:	aa 1f       	adc	r26, r26
    6978:	64 9f       	mul	r22, r20
    697a:	66 27       	eor	r22, r22
    697c:	b0 0d       	add	r27, r0
    697e:	a1 1d       	adc	r26, r1
    6980:	66 1f       	adc	r22, r22
    6982:	82 9f       	mul	r24, r18
    6984:	22 27       	eor	r18, r18
    6986:	b0 0d       	add	r27, r0
    6988:	a1 1d       	adc	r26, r1
    698a:	62 1f       	adc	r22, r18
    698c:	73 9f       	mul	r23, r19
    698e:	b0 0d       	add	r27, r0
    6990:	a1 1d       	adc	r26, r1
    6992:	62 1f       	adc	r22, r18
    6994:	83 9f       	mul	r24, r19
    6996:	a0 0d       	add	r26, r0
    6998:	61 1d       	adc	r22, r1
    699a:	22 1f       	adc	r18, r18
    699c:	74 9f       	mul	r23, r20
    699e:	33 27       	eor	r19, r19
    69a0:	a0 0d       	add	r26, r0
    69a2:	61 1d       	adc	r22, r1
    69a4:	23 1f       	adc	r18, r19
    69a6:	84 9f       	mul	r24, r20
    69a8:	60 0d       	add	r22, r0
    69aa:	21 1d       	adc	r18, r1
    69ac:	82 2f       	mov	r24, r18
    69ae:	76 2f       	mov	r23, r22
    69b0:	6a 2f       	mov	r22, r26
    69b2:	11 24       	eor	r1, r1
    69b4:	9f 57       	subi	r25, 0x7F	; 127
    69b6:	50 40       	sbci	r21, 0x00	; 0
    69b8:	8a f0       	brmi	.+34     	; 0x69dc <__mulsf3_pse+0x84>
    69ba:	e1 f0       	breq	.+56     	; 0x69f4 <__mulsf3_pse+0x9c>
    69bc:	88 23       	and	r24, r24
    69be:	4a f0       	brmi	.+18     	; 0x69d2 <__mulsf3_pse+0x7a>
    69c0:	ee 0f       	add	r30, r30
    69c2:	ff 1f       	adc	r31, r31
    69c4:	bb 1f       	adc	r27, r27
    69c6:	66 1f       	adc	r22, r22
    69c8:	77 1f       	adc	r23, r23
    69ca:	88 1f       	adc	r24, r24
    69cc:	91 50       	subi	r25, 0x01	; 1
    69ce:	50 40       	sbci	r21, 0x00	; 0
    69d0:	a9 f7       	brne	.-22     	; 0x69bc <__mulsf3_pse+0x64>
    69d2:	9e 3f       	cpi	r25, 0xFE	; 254
    69d4:	51 05       	cpc	r21, r1
    69d6:	70 f0       	brcs	.+28     	; 0x69f4 <__mulsf3_pse+0x9c>
    69d8:	e6 ce       	rjmp	.-564    	; 0x67a6 <__fp_inf>
    69da:	9f cf       	rjmp	.-194    	; 0x691a <__fp_szero>
    69dc:	5f 3f       	cpi	r21, 0xFF	; 255
    69de:	ec f3       	brlt	.-6      	; 0x69da <__mulsf3_pse+0x82>
    69e0:	98 3e       	cpi	r25, 0xE8	; 232
    69e2:	dc f3       	brlt	.-10     	; 0x69da <__mulsf3_pse+0x82>
    69e4:	86 95       	lsr	r24
    69e6:	77 95       	ror	r23
    69e8:	67 95       	ror	r22
    69ea:	b7 95       	ror	r27
    69ec:	f7 95       	ror	r31
    69ee:	e7 95       	ror	r30
    69f0:	9f 5f       	subi	r25, 0xFF	; 255
    69f2:	c1 f7       	brne	.-16     	; 0x69e4 <__mulsf3_pse+0x8c>
    69f4:	fe 2b       	or	r31, r30
    69f6:	88 0f       	add	r24, r24
    69f8:	91 1d       	adc	r25, r1
    69fa:	96 95       	lsr	r25
    69fc:	87 95       	ror	r24
    69fe:	97 f9       	bld	r25, 7
    6a00:	08 95       	ret

00006a02 <pow>:
    6a02:	fa 01       	movw	r30, r20
    6a04:	ee 0f       	add	r30, r30
    6a06:	ff 1f       	adc	r31, r31
    6a08:	30 96       	adiw	r30, 0x00	; 0
    6a0a:	21 05       	cpc	r18, r1
    6a0c:	31 05       	cpc	r19, r1
    6a0e:	99 f1       	breq	.+102    	; 0x6a76 <pow+0x74>
    6a10:	61 15       	cp	r22, r1
    6a12:	71 05       	cpc	r23, r1
    6a14:	61 f4       	brne	.+24     	; 0x6a2e <pow+0x2c>
    6a16:	80 38       	cpi	r24, 0x80	; 128
    6a18:	bf e3       	ldi	r27, 0x3F	; 63
    6a1a:	9b 07       	cpc	r25, r27
    6a1c:	49 f1       	breq	.+82     	; 0x6a70 <pow+0x6e>
    6a1e:	68 94       	set
    6a20:	90 38       	cpi	r25, 0x80	; 128
    6a22:	81 05       	cpc	r24, r1
    6a24:	61 f0       	breq	.+24     	; 0x6a3e <pow+0x3c>
    6a26:	80 38       	cpi	r24, 0x80	; 128
    6a28:	bf ef       	ldi	r27, 0xFF	; 255
    6a2a:	9b 07       	cpc	r25, r27
    6a2c:	41 f0       	breq	.+16     	; 0x6a3e <pow+0x3c>
    6a2e:	99 23       	and	r25, r25
    6a30:	42 f5       	brpl	.+80     	; 0x6a82 <pow+0x80>
    6a32:	ff 3f       	cpi	r31, 0xFF	; 255
    6a34:	e1 05       	cpc	r30, r1
    6a36:	31 05       	cpc	r19, r1
    6a38:	21 05       	cpc	r18, r1
    6a3a:	11 f1       	breq	.+68     	; 0x6a80 <pow+0x7e>
    6a3c:	e8 94       	clt
    6a3e:	08 94       	sec
    6a40:	e7 95       	ror	r30
    6a42:	d9 01       	movw	r26, r18
    6a44:	aa 23       	and	r26, r26
    6a46:	29 f4       	brne	.+10     	; 0x6a52 <pow+0x50>
    6a48:	ab 2f       	mov	r26, r27
    6a4a:	be 2f       	mov	r27, r30
    6a4c:	f8 5f       	subi	r31, 0xF8	; 248
    6a4e:	d0 f3       	brcs	.-12     	; 0x6a44 <pow+0x42>
    6a50:	10 c0       	rjmp	.+32     	; 0x6a72 <pow+0x70>
    6a52:	ff 5f       	subi	r31, 0xFF	; 255
    6a54:	70 f4       	brcc	.+28     	; 0x6a72 <pow+0x70>
    6a56:	a6 95       	lsr	r26
    6a58:	e0 f7       	brcc	.-8      	; 0x6a52 <pow+0x50>
    6a5a:	f7 39       	cpi	r31, 0x97	; 151
    6a5c:	50 f0       	brcs	.+20     	; 0x6a72 <pow+0x70>
    6a5e:	19 f0       	breq	.+6      	; 0x6a66 <pow+0x64>
    6a60:	ff 3a       	cpi	r31, 0xAF	; 175
    6a62:	38 f4       	brcc	.+14     	; 0x6a72 <pow+0x70>
    6a64:	9f 77       	andi	r25, 0x7F	; 127
    6a66:	9f 93       	push	r25
    6a68:	0c d0       	rcall	.+24     	; 0x6a82 <pow+0x80>
    6a6a:	0f 90       	pop	r0
    6a6c:	07 fc       	sbrc	r0, 7
    6a6e:	90 58       	subi	r25, 0x80	; 128
    6a70:	08 95       	ret
    6a72:	3e f0       	brts	.+14     	; 0x6a82 <pow+0x80>
    6a74:	9e ce       	rjmp	.-708    	; 0x67b2 <__fp_nan>
    6a76:	60 e0       	ldi	r22, 0x00	; 0
    6a78:	70 e0       	ldi	r23, 0x00	; 0
    6a7a:	80 e8       	ldi	r24, 0x80	; 128
    6a7c:	9f e3       	ldi	r25, 0x3F	; 63
    6a7e:	08 95       	ret
    6a80:	4f e7       	ldi	r20, 0x7F	; 127
    6a82:	9f 77       	andi	r25, 0x7F	; 127
    6a84:	5f 93       	push	r21
    6a86:	4f 93       	push	r20
    6a88:	3f 93       	push	r19
    6a8a:	2f 93       	push	r18
    6a8c:	d2 d0       	rcall	.+420    	; 0x6c32 <log>
    6a8e:	2f 91       	pop	r18
    6a90:	3f 91       	pop	r19
    6a92:	4f 91       	pop	r20
    6a94:	5f 91       	pop	r21
    6a96:	52 df       	rcall	.-348    	; 0x693c <__mulsf3>
    6a98:	50 c0       	rjmp	.+160    	; 0x6b3a <exp>

00006a9a <sin>:
    6a9a:	9f 93       	push	r25
    6a9c:	d2 de       	rcall	.-604    	; 0x6842 <__fp_rempio2>
    6a9e:	0f 90       	pop	r0
    6aa0:	07 fc       	sbrc	r0, 7
    6aa2:	ee 5f       	subi	r30, 0xFE	; 254
    6aa4:	06 cf       	rjmp	.-500    	; 0x68b2 <__fp_sinus>
    6aa6:	11 f4       	brne	.+4      	; 0x6aac <sin+0x12>
    6aa8:	0e f4       	brtc	.+2      	; 0x6aac <sin+0x12>
    6aaa:	83 ce       	rjmp	.-762    	; 0x67b2 <__fp_nan>
    6aac:	72 c0       	rjmp	.+228    	; 0x6b92 <__fp_mpack>

00006aae <sqrt>:
    6aae:	1a df       	rcall	.-460    	; 0x68e4 <__fp_splitA>
    6ab0:	d0 f3       	brcs	.-12     	; 0x6aa6 <sin+0xc>
    6ab2:	99 23       	and	r25, r25
    6ab4:	d9 f3       	breq	.-10     	; 0x6aac <sin+0x12>
    6ab6:	ce f3       	brts	.-14     	; 0x6aaa <sin+0x10>
    6ab8:	9f 57       	subi	r25, 0x7F	; 127
    6aba:	55 0b       	sbc	r21, r21
    6abc:	87 ff       	sbrs	r24, 7
    6abe:	77 d0       	rcall	.+238    	; 0x6bae <__fp_norm2>
    6ac0:	00 24       	eor	r0, r0
    6ac2:	a0 e6       	ldi	r26, 0x60	; 96
    6ac4:	40 ea       	ldi	r20, 0xA0	; 160
    6ac6:	90 01       	movw	r18, r0
    6ac8:	80 58       	subi	r24, 0x80	; 128
    6aca:	56 95       	lsr	r21
    6acc:	97 95       	ror	r25
    6ace:	28 f4       	brcc	.+10     	; 0x6ada <sqrt+0x2c>
    6ad0:	80 5c       	subi	r24, 0xC0	; 192
    6ad2:	66 0f       	add	r22, r22
    6ad4:	77 1f       	adc	r23, r23
    6ad6:	88 1f       	adc	r24, r24
    6ad8:	20 f0       	brcs	.+8      	; 0x6ae2 <sqrt+0x34>
    6ada:	26 17       	cp	r18, r22
    6adc:	37 07       	cpc	r19, r23
    6ade:	48 07       	cpc	r20, r24
    6ae0:	30 f4       	brcc	.+12     	; 0x6aee <sqrt+0x40>
    6ae2:	62 1b       	sub	r22, r18
    6ae4:	73 0b       	sbc	r23, r19
    6ae6:	84 0b       	sbc	r24, r20
    6ae8:	20 29       	or	r18, r0
    6aea:	31 29       	or	r19, r1
    6aec:	4a 2b       	or	r20, r26
    6aee:	a6 95       	lsr	r26
    6af0:	17 94       	ror	r1
    6af2:	07 94       	ror	r0
    6af4:	20 25       	eor	r18, r0
    6af6:	31 25       	eor	r19, r1
    6af8:	4a 27       	eor	r20, r26
    6afa:	58 f7       	brcc	.-42     	; 0x6ad2 <sqrt+0x24>
    6afc:	66 0f       	add	r22, r22
    6afe:	77 1f       	adc	r23, r23
    6b00:	88 1f       	adc	r24, r24
    6b02:	20 f0       	brcs	.+8      	; 0x6b0c <sqrt+0x5e>
    6b04:	26 17       	cp	r18, r22
    6b06:	37 07       	cpc	r19, r23
    6b08:	48 07       	cpc	r20, r24
    6b0a:	30 f4       	brcc	.+12     	; 0x6b18 <sqrt+0x6a>
    6b0c:	62 0b       	sbc	r22, r18
    6b0e:	73 0b       	sbc	r23, r19
    6b10:	84 0b       	sbc	r24, r20
    6b12:	20 0d       	add	r18, r0
    6b14:	31 1d       	adc	r19, r1
    6b16:	41 1d       	adc	r20, r1
    6b18:	a0 95       	com	r26
    6b1a:	81 f7       	brne	.-32     	; 0x6afc <sqrt+0x4e>
    6b1c:	b9 01       	movw	r22, r18
    6b1e:	84 2f       	mov	r24, r20
    6b20:	91 58       	subi	r25, 0x81	; 129
    6b22:	88 0f       	add	r24, r24
    6b24:	96 95       	lsr	r25
    6b26:	87 95       	ror	r24
    6b28:	08 95       	ret

00006b2a <square>:
    6b2a:	9b 01       	movw	r18, r22
    6b2c:	ac 01       	movw	r20, r24
    6b2e:	06 cf       	rjmp	.-500    	; 0x693c <__mulsf3>
    6b30:	19 f4       	brne	.+6      	; 0x6b38 <square+0xe>
    6b32:	0e f0       	brts	.+2      	; 0x6b36 <square+0xc>
    6b34:	38 ce       	rjmp	.-912    	; 0x67a6 <__fp_inf>
    6b36:	f0 ce       	rjmp	.-544    	; 0x6918 <__fp_zero>
    6b38:	3c ce       	rjmp	.-904    	; 0x67b2 <__fp_nan>

00006b3a <exp>:
    6b3a:	d4 de       	rcall	.-600    	; 0x68e4 <__fp_splitA>
    6b3c:	c8 f3       	brcs	.-14     	; 0x6b30 <square+0x6>
    6b3e:	96 38       	cpi	r25, 0x86	; 134
    6b40:	c0 f7       	brcc	.-16     	; 0x6b32 <square+0x8>
    6b42:	07 f8       	bld	r0, 7
    6b44:	0f 92       	push	r0
    6b46:	e8 94       	clt
    6b48:	2b e3       	ldi	r18, 0x3B	; 59
    6b4a:	3a ea       	ldi	r19, 0xAA	; 170
    6b4c:	48 eb       	ldi	r20, 0xB8	; 184
    6b4e:	5f e7       	ldi	r21, 0x7F	; 127
    6b50:	03 df       	rcall	.-506    	; 0x6958 <__mulsf3_pse>
    6b52:	0f 92       	push	r0
    6b54:	0f 92       	push	r0
    6b56:	0f 92       	push	r0
    6b58:	4d b7       	in	r20, 0x3d	; 61
    6b5a:	5e b7       	in	r21, 0x3e	; 62
    6b5c:	0f 92       	push	r0
    6b5e:	a9 d0       	rcall	.+338    	; 0x6cb2 <modf>
    6b60:	e9 e2       	ldi	r30, 0x29	; 41
    6b62:	f1 e0       	ldi	r31, 0x01	; 1
    6b64:	29 de       	rcall	.-942    	; 0x67b8 <__fp_powser>
    6b66:	4f 91       	pop	r20
    6b68:	5f 91       	pop	r21
    6b6a:	ef 91       	pop	r30
    6b6c:	ff 91       	pop	r31
    6b6e:	e5 95       	asr	r30
    6b70:	ee 1f       	adc	r30, r30
    6b72:	ff 1f       	adc	r31, r31
    6b74:	49 f0       	breq	.+18     	; 0x6b88 <exp+0x4e>
    6b76:	fe 57       	subi	r31, 0x7E	; 126
    6b78:	e0 68       	ori	r30, 0x80	; 128
    6b7a:	44 27       	eor	r20, r20
    6b7c:	ee 0f       	add	r30, r30
    6b7e:	44 1f       	adc	r20, r20
    6b80:	fa 95       	dec	r31
    6b82:	e1 f7       	brne	.-8      	; 0x6b7c <exp+0x42>
    6b84:	41 95       	neg	r20
    6b86:	55 0b       	sbc	r21, r21
    6b88:	1b d0       	rcall	.+54     	; 0x6bc0 <ldexp>
    6b8a:	0f 90       	pop	r0
    6b8c:	07 fe       	sbrs	r0, 7
    6b8e:	cf ce       	rjmp	.-610    	; 0x692e <inverse>
    6b90:	08 95       	ret

00006b92 <__fp_mpack>:
    6b92:	9f 3f       	cpi	r25, 0xFF	; 255
    6b94:	31 f0       	breq	.+12     	; 0x6ba2 <__fp_mpack_finite+0xc>

00006b96 <__fp_mpack_finite>:
    6b96:	91 50       	subi	r25, 0x01	; 1
    6b98:	20 f4       	brcc	.+8      	; 0x6ba2 <__fp_mpack_finite+0xc>
    6b9a:	87 95       	ror	r24
    6b9c:	77 95       	ror	r23
    6b9e:	67 95       	ror	r22
    6ba0:	b7 95       	ror	r27
    6ba2:	88 0f       	add	r24, r24
    6ba4:	91 1d       	adc	r25, r1
    6ba6:	96 95       	lsr	r25
    6ba8:	87 95       	ror	r24
    6baa:	97 f9       	bld	r25, 7
    6bac:	08 95       	ret

00006bae <__fp_norm2>:
    6bae:	91 50       	subi	r25, 0x01	; 1
    6bb0:	50 40       	sbci	r21, 0x00	; 0
    6bb2:	66 0f       	add	r22, r22
    6bb4:	77 1f       	adc	r23, r23
    6bb6:	88 1f       	adc	r24, r24
    6bb8:	d2 f7       	brpl	.-12     	; 0x6bae <__fp_norm2>
    6bba:	08 95       	ret
    6bbc:	f4 cd       	rjmp	.-1048   	; 0x67a6 <__fp_inf>
    6bbe:	e9 cf       	rjmp	.-46     	; 0x6b92 <__fp_mpack>

00006bc0 <ldexp>:
    6bc0:	91 de       	rcall	.-734    	; 0x68e4 <__fp_splitA>
    6bc2:	e8 f3       	brcs	.-6      	; 0x6bbe <__fp_norm2+0x10>
    6bc4:	99 23       	and	r25, r25
    6bc6:	d9 f3       	breq	.-10     	; 0x6bbe <__fp_norm2+0x10>
    6bc8:	94 0f       	add	r25, r20
    6bca:	51 1d       	adc	r21, r1
    6bcc:	bb f3       	brvs	.-18     	; 0x6bbc <__fp_norm2+0xe>
    6bce:	91 50       	subi	r25, 0x01	; 1
    6bd0:	50 40       	sbci	r21, 0x00	; 0
    6bd2:	94 f0       	brlt	.+36     	; 0x6bf8 <ldexp+0x38>
    6bd4:	59 f0       	breq	.+22     	; 0x6bec <ldexp+0x2c>
    6bd6:	88 23       	and	r24, r24
    6bd8:	32 f0       	brmi	.+12     	; 0x6be6 <ldexp+0x26>
    6bda:	66 0f       	add	r22, r22
    6bdc:	77 1f       	adc	r23, r23
    6bde:	88 1f       	adc	r24, r24
    6be0:	91 50       	subi	r25, 0x01	; 1
    6be2:	50 40       	sbci	r21, 0x00	; 0
    6be4:	c1 f7       	brne	.-16     	; 0x6bd6 <ldexp+0x16>
    6be6:	9e 3f       	cpi	r25, 0xFE	; 254
    6be8:	51 05       	cpc	r21, r1
    6bea:	44 f7       	brge	.-48     	; 0x6bbc <__fp_norm2+0xe>
    6bec:	88 0f       	add	r24, r24
    6bee:	91 1d       	adc	r25, r1
    6bf0:	96 95       	lsr	r25
    6bf2:	87 95       	ror	r24
    6bf4:	97 f9       	bld	r25, 7
    6bf6:	08 95       	ret
    6bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    6bfa:	ac f0       	brlt	.+42     	; 0x6c26 <ldexp+0x66>
    6bfc:	98 3e       	cpi	r25, 0xE8	; 232
    6bfe:	9c f0       	brlt	.+38     	; 0x6c26 <ldexp+0x66>
    6c00:	bb 27       	eor	r27, r27
    6c02:	86 95       	lsr	r24
    6c04:	77 95       	ror	r23
    6c06:	67 95       	ror	r22
    6c08:	b7 95       	ror	r27
    6c0a:	08 f4       	brcc	.+2      	; 0x6c0e <ldexp+0x4e>
    6c0c:	b1 60       	ori	r27, 0x01	; 1
    6c0e:	93 95       	inc	r25
    6c10:	c1 f7       	brne	.-16     	; 0x6c02 <ldexp+0x42>
    6c12:	bb 0f       	add	r27, r27
    6c14:	58 f7       	brcc	.-42     	; 0x6bec <ldexp+0x2c>
    6c16:	11 f4       	brne	.+4      	; 0x6c1c <ldexp+0x5c>
    6c18:	60 ff       	sbrs	r22, 0
    6c1a:	e8 cf       	rjmp	.-48     	; 0x6bec <ldexp+0x2c>
    6c1c:	6f 5f       	subi	r22, 0xFF	; 255
    6c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c20:	8f 4f       	sbci	r24, 0xFF	; 255
    6c22:	9f 4f       	sbci	r25, 0xFF	; 255
    6c24:	e3 cf       	rjmp	.-58     	; 0x6bec <ldexp+0x2c>
    6c26:	79 ce       	rjmp	.-782    	; 0x691a <__fp_szero>
    6c28:	0e f0       	brts	.+2      	; 0x6c2c <ldexp+0x6c>
    6c2a:	b3 cf       	rjmp	.-154    	; 0x6b92 <__fp_mpack>
    6c2c:	c2 cd       	rjmp	.-1148   	; 0x67b2 <__fp_nan>
    6c2e:	68 94       	set
    6c30:	ba cd       	rjmp	.-1164   	; 0x67a6 <__fp_inf>

00006c32 <log>:
    6c32:	58 de       	rcall	.-848    	; 0x68e4 <__fp_splitA>
    6c34:	c8 f3       	brcs	.-14     	; 0x6c28 <ldexp+0x68>
    6c36:	99 23       	and	r25, r25
    6c38:	d1 f3       	breq	.-12     	; 0x6c2e <ldexp+0x6e>
    6c3a:	c6 f3       	brts	.-16     	; 0x6c2c <ldexp+0x6c>
    6c3c:	df 93       	push	r29
    6c3e:	cf 93       	push	r28
    6c40:	1f 93       	push	r17
    6c42:	0f 93       	push	r16
    6c44:	ff 92       	push	r15
    6c46:	c9 2f       	mov	r28, r25
    6c48:	dd 27       	eor	r29, r29
    6c4a:	88 23       	and	r24, r24
    6c4c:	2a f0       	brmi	.+10     	; 0x6c58 <log+0x26>
    6c4e:	21 97       	sbiw	r28, 0x01	; 1
    6c50:	66 0f       	add	r22, r22
    6c52:	77 1f       	adc	r23, r23
    6c54:	88 1f       	adc	r24, r24
    6c56:	da f7       	brpl	.-10     	; 0x6c4e <log+0x1c>
    6c58:	20 e0       	ldi	r18, 0x00	; 0
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	40 e8       	ldi	r20, 0x80	; 128
    6c5e:	5f eb       	ldi	r21, 0xBF	; 191
    6c60:	9f e3       	ldi	r25, 0x3F	; 63
    6c62:	88 39       	cpi	r24, 0x98	; 152
    6c64:	20 f0       	brcs	.+8      	; 0x6c6e <log+0x3c>
    6c66:	80 3e       	cpi	r24, 0xE0	; 224
    6c68:	30 f0       	brcs	.+12     	; 0x6c76 <log+0x44>
    6c6a:	21 96       	adiw	r28, 0x01	; 1
    6c6c:	8f 77       	andi	r24, 0x7F	; 127
    6c6e:	64 db       	rcall	.-2360   	; 0x6338 <__addsf3>
    6c70:	e1 e5       	ldi	r30, 0x51	; 81
    6c72:	f1 e0       	ldi	r31, 0x01	; 1
    6c74:	03 c0       	rjmp	.+6      	; 0x6c7c <log+0x4a>
    6c76:	60 db       	rcall	.-2368   	; 0x6338 <__addsf3>
    6c78:	ee e7       	ldi	r30, 0x7E	; 126
    6c7a:	f1 e0       	ldi	r31, 0x01	; 1
    6c7c:	9d dd       	rcall	.-1222   	; 0x67b8 <__fp_powser>
    6c7e:	8b 01       	movw	r16, r22
    6c80:	be 01       	movw	r22, r28
    6c82:	ec 01       	movw	r28, r24
    6c84:	fb 2e       	mov	r15, r27
    6c86:	6f 57       	subi	r22, 0x7F	; 127
    6c88:	71 09       	sbc	r23, r1
    6c8a:	75 95       	asr	r23
    6c8c:	77 1f       	adc	r23, r23
    6c8e:	88 0b       	sbc	r24, r24
    6c90:	99 0b       	sbc	r25, r25
    6c92:	d1 dc       	rcall	.-1630   	; 0x6636 <__floatsisf>
    6c94:	28 e1       	ldi	r18, 0x18	; 24
    6c96:	32 e7       	ldi	r19, 0x72	; 114
    6c98:	41 e3       	ldi	r20, 0x31	; 49
    6c9a:	5f e3       	ldi	r21, 0x3F	; 63
    6c9c:	5b de       	rcall	.-842    	; 0x6954 <__mulsf3x>
    6c9e:	af 2d       	mov	r26, r15
    6ca0:	98 01       	movw	r18, r16
    6ca2:	ae 01       	movw	r20, r28
    6ca4:	ff 90       	pop	r15
    6ca6:	0f 91       	pop	r16
    6ca8:	1f 91       	pop	r17
    6caa:	cf 91       	pop	r28
    6cac:	df 91       	pop	r29
    6cae:	55 db       	rcall	.-2390   	; 0x635a <__addsf3x>
    6cb0:	ef cd       	rjmp	.-1058   	; 0x6890 <__fp_round>

00006cb2 <modf>:
    6cb2:	fa 01       	movw	r30, r20
    6cb4:	dc 01       	movw	r26, r24
    6cb6:	aa 0f       	add	r26, r26
    6cb8:	bb 1f       	adc	r27, r27
    6cba:	9b 01       	movw	r18, r22
    6cbc:	ac 01       	movw	r20, r24
    6cbe:	bf 57       	subi	r27, 0x7F	; 127
    6cc0:	28 f4       	brcc	.+10     	; 0x6ccc <modf+0x1a>
    6cc2:	22 27       	eor	r18, r18
    6cc4:	33 27       	eor	r19, r19
    6cc6:	44 27       	eor	r20, r20
    6cc8:	50 78       	andi	r21, 0x80	; 128
    6cca:	1f c0       	rjmp	.+62     	; 0x6d0a <modf+0x58>
    6ccc:	b7 51       	subi	r27, 0x17	; 23
    6cce:	88 f4       	brcc	.+34     	; 0x6cf2 <modf+0x40>
    6cd0:	ab 2f       	mov	r26, r27
    6cd2:	00 24       	eor	r0, r0
    6cd4:	46 95       	lsr	r20
    6cd6:	37 95       	ror	r19
    6cd8:	27 95       	ror	r18
    6cda:	01 1c       	adc	r0, r1
    6cdc:	a3 95       	inc	r26
    6cde:	d2 f3       	brmi	.-12     	; 0x6cd4 <modf+0x22>
    6ce0:	00 20       	and	r0, r0
    6ce2:	69 f0       	breq	.+26     	; 0x6cfe <modf+0x4c>
    6ce4:	22 0f       	add	r18, r18
    6ce6:	33 1f       	adc	r19, r19
    6ce8:	44 1f       	adc	r20, r20
    6cea:	b3 95       	inc	r27
    6cec:	da f3       	brmi	.-10     	; 0x6ce4 <modf+0x32>
    6cee:	0d d0       	rcall	.+26     	; 0x6d0a <modf+0x58>
    6cf0:	22 cb       	rjmp	.-2492   	; 0x6336 <__subsf3>
    6cf2:	61 30       	cpi	r22, 0x01	; 1
    6cf4:	71 05       	cpc	r23, r1
    6cf6:	a0 e8       	ldi	r26, 0x80	; 128
    6cf8:	8a 07       	cpc	r24, r26
    6cfa:	b9 46       	sbci	r27, 0x69	; 105
    6cfc:	30 f4       	brcc	.+12     	; 0x6d0a <modf+0x58>
    6cfe:	9b 01       	movw	r18, r22
    6d00:	ac 01       	movw	r20, r24
    6d02:	66 27       	eor	r22, r22
    6d04:	77 27       	eor	r23, r23
    6d06:	88 27       	eor	r24, r24
    6d08:	90 78       	andi	r25, 0x80	; 128
    6d0a:	30 96       	adiw	r30, 0x00	; 0
    6d0c:	21 f0       	breq	.+8      	; 0x6d16 <modf+0x64>
    6d0e:	20 83       	st	Z, r18
    6d10:	31 83       	std	Z+1, r19	; 0x01
    6d12:	42 83       	std	Z+2, r20	; 0x02
    6d14:	53 83       	std	Z+3, r21	; 0x03
    6d16:	08 95       	ret

00006d18 <__divmodhi4>:
    6d18:	97 fb       	bst	r25, 7
    6d1a:	07 2e       	mov	r0, r23
    6d1c:	16 f4       	brtc	.+4      	; 0x6d22 <__divmodhi4+0xa>
    6d1e:	00 94       	com	r0
    6d20:	06 d0       	rcall	.+12     	; 0x6d2e <__divmodhi4_neg1>
    6d22:	77 fd       	sbrc	r23, 7
    6d24:	08 d0       	rcall	.+16     	; 0x6d36 <__divmodhi4_neg2>
    6d26:	60 d0       	rcall	.+192    	; 0x6de8 <__udivmodhi4>
    6d28:	07 fc       	sbrc	r0, 7
    6d2a:	05 d0       	rcall	.+10     	; 0x6d36 <__divmodhi4_neg2>
    6d2c:	3e f4       	brtc	.+14     	; 0x6d3c <__divmodhi4_exit>

00006d2e <__divmodhi4_neg1>:
    6d2e:	90 95       	com	r25
    6d30:	81 95       	neg	r24
    6d32:	9f 4f       	sbci	r25, 0xFF	; 255
    6d34:	08 95       	ret

00006d36 <__divmodhi4_neg2>:
    6d36:	70 95       	com	r23
    6d38:	61 95       	neg	r22
    6d3a:	7f 4f       	sbci	r23, 0xFF	; 255

00006d3c <__divmodhi4_exit>:
    6d3c:	08 95       	ret

00006d3e <__tablejump2__>:
    6d3e:	ee 0f       	add	r30, r30
    6d40:	ff 1f       	adc	r31, r31

00006d42 <__tablejump__>:
    6d42:	05 90       	lpm	r0, Z+
    6d44:	f4 91       	lpm	r31, Z
    6d46:	e0 2d       	mov	r30, r0
    6d48:	09 94       	ijmp

00006d4a <__umulhisi3>:
    6d4a:	a2 9f       	mul	r26, r18
    6d4c:	b0 01       	movw	r22, r0
    6d4e:	b3 9f       	mul	r27, r19
    6d50:	c0 01       	movw	r24, r0
    6d52:	a3 9f       	mul	r26, r19
    6d54:	70 0d       	add	r23, r0
    6d56:	81 1d       	adc	r24, r1
    6d58:	11 24       	eor	r1, r1
    6d5a:	91 1d       	adc	r25, r1
    6d5c:	b2 9f       	mul	r27, r18
    6d5e:	70 0d       	add	r23, r0
    6d60:	81 1d       	adc	r24, r1
    6d62:	11 24       	eor	r1, r1
    6d64:	91 1d       	adc	r25, r1
    6d66:	08 95       	ret

00006d68 <__ashldi3>:
    6d68:	0f 93       	push	r16
    6d6a:	08 30       	cpi	r16, 0x08	; 8
    6d6c:	90 f0       	brcs	.+36     	; 0x6d92 <__ashldi3+0x2a>
    6d6e:	98 2f       	mov	r25, r24
    6d70:	87 2f       	mov	r24, r23
    6d72:	76 2f       	mov	r23, r22
    6d74:	65 2f       	mov	r22, r21
    6d76:	54 2f       	mov	r21, r20
    6d78:	43 2f       	mov	r20, r19
    6d7a:	32 2f       	mov	r19, r18
    6d7c:	22 27       	eor	r18, r18
    6d7e:	08 50       	subi	r16, 0x08	; 8
    6d80:	f4 cf       	rjmp	.-24     	; 0x6d6a <__ashldi3+0x2>
    6d82:	22 0f       	add	r18, r18
    6d84:	33 1f       	adc	r19, r19
    6d86:	44 1f       	adc	r20, r20
    6d88:	55 1f       	adc	r21, r21
    6d8a:	66 1f       	adc	r22, r22
    6d8c:	77 1f       	adc	r23, r23
    6d8e:	88 1f       	adc	r24, r24
    6d90:	99 1f       	adc	r25, r25
    6d92:	0a 95       	dec	r16
    6d94:	b2 f7       	brpl	.-20     	; 0x6d82 <__ashldi3+0x1a>
    6d96:	0f 91       	pop	r16
    6d98:	08 95       	ret

00006d9a <__adddi3>:
    6d9a:	2a 0d       	add	r18, r10
    6d9c:	3b 1d       	adc	r19, r11
    6d9e:	4c 1d       	adc	r20, r12
    6da0:	5d 1d       	adc	r21, r13
    6da2:	6e 1d       	adc	r22, r14
    6da4:	7f 1d       	adc	r23, r15
    6da6:	80 1f       	adc	r24, r16
    6da8:	91 1f       	adc	r25, r17
    6daa:	08 95       	ret

00006dac <__adddi3_s8>:
    6dac:	00 24       	eor	r0, r0
    6dae:	a7 fd       	sbrc	r26, 7
    6db0:	00 94       	com	r0
    6db2:	2a 0f       	add	r18, r26
    6db4:	30 1d       	adc	r19, r0
    6db6:	40 1d       	adc	r20, r0
    6db8:	50 1d       	adc	r21, r0
    6dba:	60 1d       	adc	r22, r0
    6dbc:	70 1d       	adc	r23, r0
    6dbe:	80 1d       	adc	r24, r0
    6dc0:	90 1d       	adc	r25, r0
    6dc2:	08 95       	ret

00006dc4 <__subdi3>:
    6dc4:	2a 19       	sub	r18, r10
    6dc6:	3b 09       	sbc	r19, r11
    6dc8:	4c 09       	sbc	r20, r12
    6dca:	5d 09       	sbc	r21, r13
    6dcc:	6e 09       	sbc	r22, r14
    6dce:	7f 09       	sbc	r23, r15
    6dd0:	80 0b       	sbc	r24, r16
    6dd2:	91 0b       	sbc	r25, r17
    6dd4:	08 95       	ret

00006dd6 <__cmpdi2>:
    6dd6:	2a 15       	cp	r18, r10
    6dd8:	3b 05       	cpc	r19, r11
    6dda:	4c 05       	cpc	r20, r12
    6ddc:	5d 05       	cpc	r21, r13
    6dde:	6e 05       	cpc	r22, r14
    6de0:	7f 05       	cpc	r23, r15
    6de2:	80 07       	cpc	r24, r16
    6de4:	91 07       	cpc	r25, r17
    6de6:	08 95       	ret

00006de8 <__udivmodhi4>:
    6de8:	aa 1b       	sub	r26, r26
    6dea:	bb 1b       	sub	r27, r27
    6dec:	51 e1       	ldi	r21, 0x11	; 17
    6dee:	07 c0       	rjmp	.+14     	; 0x6dfe <__udivmodhi4_ep>

00006df0 <__udivmodhi4_loop>:
    6df0:	aa 1f       	adc	r26, r26
    6df2:	bb 1f       	adc	r27, r27
    6df4:	a6 17       	cp	r26, r22
    6df6:	b7 07       	cpc	r27, r23
    6df8:	10 f0       	brcs	.+4      	; 0x6dfe <__udivmodhi4_ep>
    6dfa:	a6 1b       	sub	r26, r22
    6dfc:	b7 0b       	sbc	r27, r23

00006dfe <__udivmodhi4_ep>:
    6dfe:	88 1f       	adc	r24, r24
    6e00:	99 1f       	adc	r25, r25
    6e02:	5a 95       	dec	r21
    6e04:	a9 f7       	brne	.-22     	; 0x6df0 <__udivmodhi4_loop>
    6e06:	80 95       	com	r24
    6e08:	90 95       	com	r25
    6e0a:	bc 01       	movw	r22, r24
    6e0c:	cd 01       	movw	r24, r26
    6e0e:	08 95       	ret

00006e10 <_exit>:
    6e10:	f8 94       	cli

00006e12 <__stop_program>:
    6e12:	ff cf       	rjmp	.-2      	; 0x6e12 <__stop_program>
