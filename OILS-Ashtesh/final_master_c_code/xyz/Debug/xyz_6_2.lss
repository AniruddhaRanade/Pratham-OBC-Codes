
xyz_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00006dde  00006e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039b  00800194  00800194  00006f06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006f06  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000410  00000000  00000000  00006f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000070a8  00000000  00000000  00007346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018d8  00000000  00000000  0000e3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000032af  00000000  00000000  0000fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000105c  00000000  00000000  00012f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dc3  00000000  00000000  00013fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000058ec  00000000  00000000  00014d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000320  00000000  00000000  0001a683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 42 2c 	jmp	0x5884	; 0x5884 <__vector_14>
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	86 0c       	add	r8, r6
      8e:	2c 0c       	add	r2, r12
      90:	35 0c       	add	r3, r5
      92:	3e 0c       	add	r3, r14
      94:	47 0c       	add	r4, r7
      96:	50 0c       	add	r5, r0
      98:	59 0c       	add	r5, r9
      9a:	62 0c       	add	r6, r2
      9c:	6b 0c       	add	r6, r11
      9e:	74 0c       	add	r7, r4
      a0:	7d 0c       	add	r7, r13
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1be>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__trampolines_end+0x2e8>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__trampolines_end+0x2e6>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__trampolines_end+0x27e>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__trampolines_end+0x272>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	ee ed       	ldi	r30, 0xDE	; 222
     7e0:	fd e6       	ldi	r31, 0x6D	; 109
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a4 39       	cpi	r26, 0x94	; 148
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a4 e9       	ldi	r26, 0x94	; 148
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	af 32       	cpi	r26, 0x2F	; 47
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 ce 2c 	call	0x599c	; 0x599c <main>
     806:	0c 94 ed 36 	jmp	0x6dda	; 0x6dda <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6c 97       	sbiw	r28, 0x1c	; 28
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9c 8f       	std	Y+28, r25	; 0x1c
     842:	8b 8f       	std	Y+27, r24	; 0x1b
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 02 05 	lds	r24, 0x0502
     848:	90 91 03 05 	lds	r25, 0x0503
     84c:	a0 91 04 05 	lds	r26, 0x0504
     850:	b0 91 05 05 	lds	r27, 0x0505
     854:	80 93 f5 01 	sts	0x01F5, r24
     858:	90 93 f6 01 	sts	0x01F6, r25
     85c:	a0 93 f7 01 	sts	0x01F7, r26
     860:	b0 93 f8 01 	sts	0x01F8, r27
	  v_B[1] = -1*Current_state.mm.B_y;
     864:	80 91 06 05 	lds	r24, 0x0506
     868:	90 91 07 05 	lds	r25, 0x0507
     86c:	a0 91 08 05 	lds	r26, 0x0508
     870:	b0 91 09 05 	lds	r27, 0x0509
     874:	b0 58       	subi	r27, 0x80	; 128
     876:	80 93 f1 01 	sts	0x01F1, r24
     87a:	90 93 f2 01 	sts	0x01F2, r25
     87e:	a0 93 f3 01 	sts	0x01F3, r26
     882:	b0 93 f4 01 	sts	0x01F4, r27
	  v_B[0] = Current_state.mm.B_z;
     886:	80 91 0a 05 	lds	r24, 0x050A
     88a:	90 91 0b 05 	lds	r25, 0x050B
     88e:	a0 91 0c 05 	lds	r26, 0x050C
     892:	b0 91 0d 05 	lds	r27, 0x050D
     896:	80 93 ed 01 	sts	0x01ED, r24
     89a:	90 93 ee 01 	sts	0x01EE, r25
     89e:	a0 93 ef 01 	sts	0x01EF, r26
     8a2:	b0 93 f0 01 	sts	0x01F0, r27
	  
	if(first_B)
     8a6:	80 91 0c 01 	lds	r24, 0x010C
     8aa:	88 23       	and	r24, r24
     8ac:	49 f0       	breq	.+18     	; 0x8c0 <detumbling+0xb4>
	{
		
		copy_vector(v_B, v_B_old);
     8ae:	64 e9       	ldi	r22, 0x94	; 148
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8d ee       	ldi	r24, 0xED	; 237
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <copy_vector>
		first_B = 0;
     8ba:	10 92 0c 01 	sts	0x010C, r1
     8be:	89 c0       	rjmp	.+274    	; 0x9d2 <detumbling+0x1c6>
     8c0:	0d ee       	ldi	r16, 0xED	; 237
     8c2:	11 e0       	ldi	r17, 0x01	; 1
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f4 e9       	ldi	r31, 0x94	; 148
     8c8:	af 2e       	mov	r10, r31
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	bf 2e       	mov	r11, r31
     8ce:	f0 2d       	mov	r31, r0
     8d0:	1e 01       	movw	r2, r28
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	28 0e       	add	r2, r24
     8d6:	31 1c       	adc	r3, r1
     8d8:	fe 01       	movw	r30, r28
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	fa 8f       	std	Y+26, r31	; 0x1a
     8de:	e9 8f       	std	Y+25, r30	; 0x19
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f9 ef       	ldi	r31, 0xF9	; 249
     8e4:	8f 2e       	mov	r8, r31
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	9f 2e       	mov	r9, r31
     8ea:	f0 2d       	mov	r31, r0
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8ec:	f8 01       	movw	r30, r16
     8ee:	c1 90       	ld	r12, Z+
     8f0:	d1 90       	ld	r13, Z+
     8f2:	e1 90       	ld	r14, Z+
     8f4:	f1 90       	ld	r15, Z+
     8f6:	8f 01       	movw	r16, r30
     8f8:	f5 01       	movw	r30, r10
     8fa:	41 90       	ld	r4, Z+
     8fc:	51 90       	ld	r5, Z+
     8fe:	61 90       	ld	r6, Z+
     900:	71 90       	ld	r7, Z+
     902:	5f 01       	movw	r10, r30
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     928:	a3 01       	movw	r20, r6
     92a:	92 01       	movw	r18, r4
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     940:	e9 8d       	ldd	r30, Y+25	; 0x19
     942:	fa 8d       	ldd	r31, Y+26	; 0x1a
     944:	61 93       	st	Z+, r22
     946:	71 93       	st	Z+, r23
     948:	81 93       	st	Z+, r24
     94a:	91 93       	st	Z+, r25
     94c:	fa 8f       	std	Y+26, r31	; 0x1a
     94e:	e9 8f       	std	Y+25, r30	; 0x19
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     950:	08 15       	cp	r16, r8
     952:	19 05       	cpc	r17, r9
     954:	59 f6       	brne	.-106    	; 0x8ec <detumbling+0xe0>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vector_norm>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	9f eb       	ldi	r25, 0xBF	; 191
     96a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     96e:	6b 01       	movw	r12, r22
     970:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	6d 85       	ldd	r22, Y+13	; 0x0d
     978:	7e 85       	ldd	r23, Y+14	; 0x0e
     97a:	8f 85       	ldd	r24, Y+15	; 0x0f
     97c:	98 89       	ldd	r25, Y+16	; 0x10
     97e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     982:	eb 8d       	ldd	r30, Y+27	; 0x1b
     984:	fc 8d       	ldd	r31, Y+28	; 0x1c
     986:	60 83       	st	Z, r22
     988:	71 83       	std	Z+1, r23	; 0x01
     98a:	82 83       	std	Z+2, r24	; 0x02
     98c:	93 83       	std	Z+3, r25	; 0x03
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	69 89       	ldd	r22, Y+17	; 0x11
     994:	7a 89       	ldd	r23, Y+18	; 0x12
     996:	8b 89       	ldd	r24, Y+19	; 0x13
     998:	9c 89       	ldd	r25, Y+20	; 0x14
     99a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     99e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9a2:	64 83       	std	Z+4, r22	; 0x04
     9a4:	75 83       	std	Z+5, r23	; 0x05
     9a6:	86 83       	std	Z+6, r24	; 0x06
     9a8:	97 83       	std	Z+7, r25	; 0x07
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	6d 89       	ldd	r22, Y+21	; 0x15
     9b0:	7e 89       	ldd	r23, Y+22	; 0x16
     9b2:	8f 89       	ldd	r24, Y+23	; 0x17
     9b4:	98 8d       	ldd	r25, Y+24	; 0x18
     9b6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     9ba:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9bc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9be:	60 87       	std	Z+8, r22	; 0x08
     9c0:	71 87       	std	Z+9, r23	; 0x09
     9c2:	82 87       	std	Z+10, r24	; 0x0a
     9c4:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9c6:	64 e9       	ldi	r22, 0x94	; 148
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	8d ee       	ldi	r24, 0xED	; 237
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <copy_vector>
	
}
     9d2:	6c 96       	adiw	r28, 0x1c	; 28
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	3f 90       	pop	r3
     a00:	2f 90       	pop	r2
     a02:	08 95       	ret

00000a04 <nominal>:
 

void nominal(vector v_m_N)
{
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	e3 97       	sbiw	r28, 0x33	; 51
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9b ab       	std	Y+51, r25	; 0x33
     a3a:	8a ab       	std	Y+50, r24	; 0x32
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a3c:	60 91 02 05 	lds	r22, 0x0502
     a40:	70 91 03 05 	lds	r23, 0x0503
     a44:	80 91 04 05 	lds	r24, 0x0504
     a48:	90 91 05 05 	lds	r25, 0x0505
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e4       	ldi	r19, 0x40	; 64
     a50:	4c e1       	ldi	r20, 0x1C	; 28
     a52:	56 e4       	ldi	r21, 0x46	; 70
     a54:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     a58:	60 93 f5 01 	sts	0x01F5, r22
     a5c:	70 93 f6 01 	sts	0x01F6, r23
     a60:	80 93 f7 01 	sts	0x01F7, r24
     a64:	90 93 f8 01 	sts	0x01F8, r25
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a68:	60 91 06 05 	lds	r22, 0x0506
     a6c:	70 91 07 05 	lds	r23, 0x0507
     a70:	80 91 08 05 	lds	r24, 0x0508
     a74:	90 91 09 05 	lds	r25, 0x0509
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e4       	ldi	r19, 0x40	; 64
     a7c:	4c e1       	ldi	r20, 0x1C	; 28
     a7e:	56 e4       	ldi	r21, 0x46	; 70
     a80:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	b0 58       	subi	r27, 0x80	; 128
     a8a:	80 93 f1 01 	sts	0x01F1, r24
     a8e:	90 93 f2 01 	sts	0x01F2, r25
     a92:	a0 93 f3 01 	sts	0x01F3, r26
     a96:	b0 93 f4 01 	sts	0x01F4, r27
	     v_B[0] = Current_state.mm.B_z/10000;
     a9a:	60 91 0a 05 	lds	r22, 0x050A
     a9e:	70 91 0b 05 	lds	r23, 0x050B
     aa2:	80 91 0c 05 	lds	r24, 0x050C
     aa6:	90 91 0d 05 	lds	r25, 0x050D
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e4       	ldi	r19, 0x40	; 64
     aae:	4c e1       	ldi	r20, 0x1C	; 28
     ab0:	56 e4       	ldi	r21, 0x46	; 70
     ab2:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     ab6:	60 93 ed 01 	sts	0x01ED, r22
     aba:	70 93 ee 01 	sts	0x01EE, r23
     abe:	80 93 ef 01 	sts	0x01EF, r24
     ac2:	90 93 f0 01 	sts	0x01F0, r25
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     ac6:	8d ee       	ldi	r24, 0xED	; 237
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vector_norm>
     ace:	2b 01       	movw	r4, r22
     ad0:	3c 01       	movw	r6, r24
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     ad2:	80 90 82 04 	lds	r8, 0x0482
     ad6:	90 90 83 04 	lds	r9, 0x0483
     ada:	a0 90 84 04 	lds	r10, 0x0484
     ade:	b0 90 85 04 	lds	r11, 0x0485
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f6 e7       	ldi	r31, 0x76	; 118
     ae6:	ef 2e       	mov	r14, r31
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	ff 2e       	mov	r15, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9e 87       	std	Y+14, r25	; 0x0e
     af4:	8d 87       	std	Y+13, r24	; 0x0d
     af6:	0f 2e       	mov	r0, r31
     af8:	f2 e8       	ldi	r31, 0x82	; 130
     afa:	cf 2e       	mov	r12, r31
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	05 ed       	ldi	r16, 0xD5	; 213
     b04:	11 e0       	ldi	r17, 0x01	; 1
     b06:	1c 01       	movw	r2, r24
     b08:	f7 01       	movw	r30, r14
     b0a:	61 91       	ld	r22, Z+
     b0c:	71 91       	ld	r23, Z+
     b0e:	81 91       	ld	r24, Z+
     b10:	91 91       	ld	r25, Z+
     b12:	7f 01       	movw	r14, r30
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     b1c:	a5 01       	movw	r20, r10
     b1e:	94 01       	movw	r18, r8
     b20:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     b24:	d1 01       	movw	r26, r2
     b26:	6d 93       	st	X+, r22
     b28:	7d 93       	st	X+, r23
     b2a:	8d 93       	st	X+, r24
     b2c:	9d 93       	st	X+, r25
     b2e:	1d 01       	movw	r2, r26
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	f8 01       	movw	r30, r16
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     b4a:	d8 01       	movw	r26, r16
     b4c:	6d 93       	st	X+, r22
     b4e:	7d 93       	st	X+, r23
     b50:	8d 93       	st	X+, r24
     b52:	9d 93       	st	X+, r25
     b54:	8d 01       	movw	r16, r26
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b56:	ec 14       	cp	r14, r12
     b58:	fd 04       	cpc	r15, r13
     b5a:	b1 f6       	brne	.-84     	; 0xb08 <nominal+0x104>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b5c:	a3 01       	movw	r20, r6
     b5e:	92 01       	movw	r18, r4
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     b68:	6a a7       	std	Y+42, r22	; 0x2a
     b6a:	7b a7       	std	Y+43, r23	; 0x2b
     b6c:	8c a7       	std	Y+44, r24	; 0x2c
     b6e:	9d a7       	std	Y+45, r25	; 0x2d
     b70:	e0 ea       	ldi	r30, 0xA0	; 160
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	ff a3       	std	Y+39, r31	; 0x27
     b76:	ee a3       	std	Y+38, r30	; 0x26
     b78:	21 2c       	mov	r2, r1
     b7a:	31 2c       	mov	r3, r1
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f5 ed       	ldi	r31, 0xD5	; 213
     b80:	cf 2e       	mov	r12, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	df 2e       	mov	r13, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	ce a6       	std	Y+46, r12	; 0x2e
     b8a:	d6 01       	movw	r26, r12
     b8c:	bf a7       	std	Y+47, r27	; 0x2f
     b8e:	cd 84       	ldd	r12, Y+13	; 0x0d
     b90:	c8 aa       	std	Y+48, r12	; 0x30
     b92:	de 84       	ldd	r13, Y+14	; 0x0e
     b94:	d9 aa       	std	Y+49, r13	; 0x31
     b96:	3d 8e       	std	Y+29, r3	; 0x1d
     b98:	2c 8e       	std	Y+28, r2	; 0x1c
     b9a:	ee a0       	ldd	r14, Y+38	; 0x26
     b9c:	ff a0       	ldd	r15, Y+39	; 0x27
     b9e:	f9 a6       	std	Y+41, r15	; 0x29
     ba0:	e8 a6       	std	Y+40, r14	; 0x28
     ba2:	81 ee       	ldi	r24, 0xE1	; 225
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	98 8f       	std	Y+24, r25	; 0x18
     ba8:	8f 8b       	std	Y+23, r24	; 0x17
     baa:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bac:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bae:	a8 5d       	subi	r26, 0xD8	; 216
     bb0:	be 4f       	sbci	r27, 0xFE	; 254
     bb2:	ba 8f       	std	Y+26, r27	; 0x1a
     bb4:	a9 8f       	std	Y+25, r26	; 0x19
     bb6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bb8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bba:	e4 5b       	subi	r30, 0xB4	; 180
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	fe 8b       	std	Y+22, r31	; 0x16
     bc0:	ed 8b       	std	Y+21, r30	; 0x15
     bc2:	ce a4       	ldd	r12, Y+46	; 0x2e
     bc4:	c9 8a       	std	Y+17, r12	; 0x11
     bc6:	df a4       	ldd	r13, Y+47	; 0x2f
     bc8:	da 8a       	std	Y+18, r13	; 0x12
     bca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bce:	80 59       	subi	r24, 0x90	; 144
     bd0:	9e 4f       	sbci	r25, 0xFE	; 254
     bd2:	9c 8b       	std	Y+20, r25	; 0x14
     bd4:	8b 8b       	std	Y+19, r24	; 0x13
     bd6:	c8 a8       	ldd	r12, Y+48	; 0x30
     bd8:	cf 86       	std	Y+15, r12	; 0x0f
     bda:	d9 a8       	ldd	r13, Y+49	; 0x31
     bdc:	d8 8a       	std	Y+16, r13	; 0x10
     bde:	03 e0       	ldi	r16, 0x03	; 3
     be0:	1b 8e       	std	Y+27, r1	; 0x1b
     be2:	21 2c       	mov	r2, r1
     be4:	31 2c       	mov	r3, r1
     be6:	10 e0       	ldi	r17, 0x00	; 0
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     be8:	af 85       	ldd	r26, Y+15	; 0x0f
     bea:	b8 89       	ldd	r27, Y+16	; 0x10
     bec:	6d 91       	ld	r22, X+
     bee:	7d 91       	ld	r23, X+
     bf0:	8d 91       	ld	r24, X+
     bf2:	9d 91       	ld	r25, X+
     bf4:	b8 8b       	std	Y+16, r27	; 0x10
     bf6:	af 87       	std	Y+15, r26	; 0x0f
     bf8:	eb 89       	ldd	r30, Y+19	; 0x13
     bfa:	fc 89       	ldd	r31, Y+20	; 0x14
     bfc:	21 91       	ld	r18, Z+
     bfe:	31 91       	ld	r19, Z+
     c00:	41 91       	ld	r20, Z+
     c02:	51 91       	ld	r21, Z+
     c04:	fc 8b       	std	Y+20, r31	; 0x14
     c06:	eb 8b       	std	Y+19, r30	; 0x13
     c08:	a9 89       	ldd	r26, Y+17	; 0x11
     c0a:	ba 89       	ldd	r27, Y+18	; 0x12
     c0c:	8d 90       	ld	r8, X+
     c0e:	9d 90       	ld	r9, X+
     c10:	ad 90       	ld	r10, X+
     c12:	bd 90       	ld	r11, X+
     c14:	ba 8b       	std	Y+18, r27	; 0x12
     c16:	a9 8b       	std	Y+17, r26	; 0x11
     c18:	ed 89       	ldd	r30, Y+21	; 0x15
     c1a:	fe 89       	ldd	r31, Y+22	; 0x16
     c1c:	41 90       	ld	r4, Z+
     c1e:	51 90       	ld	r5, Z+
     c20:	61 90       	ld	r6, Z+
     c22:	71 90       	ld	r7, Z+
     c24:	fe 8b       	std	Y+22, r31	; 0x16
     c26:	ed 8b       	std	Y+21, r30	; 0x15
     c28:	af 89       	ldd	r26, Y+23	; 0x17
     c2a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c2c:	cd 90       	ld	r12, X+
     c2e:	dd 90       	ld	r13, X+
     c30:	ed 90       	ld	r14, X+
     c32:	fd 90       	ld	r15, X+
     c34:	b8 8f       	std	Y+24, r27	; 0x18
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	ce 8e       	std	Y+30, r12	; 0x1e
     c3a:	df 8e       	std	Y+31, r13	; 0x1f
     c3c:	e8 a2       	std	Y+32, r14	; 0x20
     c3e:	f9 a2       	std	Y+33, r15	; 0x21
     c40:	a9 8d       	ldd	r26, Y+25	; 0x19
     c42:	ba 8d       	ldd	r27, Y+26	; 0x1a
     c44:	cd 90       	ld	r12, X+
     c46:	dd 90       	ld	r13, X+
     c48:	ed 90       	ld	r14, X+
     c4a:	fd 90       	ld	r15, X+
     c4c:	ba 8f       	std	Y+26, r27	; 0x1a
     c4e:	a9 8f       	std	Y+25, r26	; 0x19
     c50:	ca a2       	std	Y+34, r12	; 0x22
     c52:	db a2       	std	Y+35, r13	; 0x23
     c54:	ec a2       	std	Y+36, r14	; 0x24
     c56:	fd a2       	std	Y+37, r15	; 0x25
     c58:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	a3 01       	movw	r20, r6
     c62:	92 01       	movw	r18, r4
     c64:	c5 01       	movw	r24, r10
     c66:	b4 01       	movw	r22, r8
     c68:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
     c7c:	2a a1       	ldd	r18, Y+34	; 0x22
     c7e:	3b a1       	ldd	r19, Y+35	; 0x23
     c80:	4c a1       	ldd	r20, Y+36	; 0x24
     c82:	5d a1       	ldd	r21, Y+37	; 0x25
     c84:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c86:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c88:	88 a1       	ldd	r24, Y+32	; 0x20
     c8a:	99 a1       	ldd	r25, Y+33	; 0x21
     c8c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     c9c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c9e:	32 2d       	mov	r19, r2
     ca0:	43 2d       	mov	r20, r3
     ca2:	51 2f       	mov	r21, r17
     ca4:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     ca8:	01 50       	subi	r16, 0x01	; 1
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     caa:	29 f0       	breq	.+10     	; 0xcb6 <nominal+0x2b2>
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     cac:	6b 8f       	std	Y+27, r22	; 0x1b
     cae:	27 2e       	mov	r2, r23
     cb0:	38 2e       	mov	r3, r24
     cb2:	19 2f       	mov	r17, r25
     cb4:	99 cf       	rjmp	.-206    	; 0xbe8 <nominal+0x1e4>
    v_m_temp[i] /= norm_B * norm_B;	
     cb6:	2a a5       	ldd	r18, Y+42	; 0x2a
     cb8:	3b a5       	ldd	r19, Y+43	; 0x2b
     cba:	4c a5       	ldd	r20, Y+44	; 0x2c
     cbc:	5d a5       	ldd	r21, Y+45	; 0x2d
     cbe:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     cc2:	e8 a5       	ldd	r30, Y+40	; 0x28
     cc4:	f9 a5       	ldd	r31, Y+41	; 0x29
     cc6:	60 83       	st	Z, r22
     cc8:	71 83       	std	Z+1, r23	; 0x01
     cca:	82 83       	std	Z+2, r24	; 0x02
     ccc:	93 83       	std	Z+3, r25	; 0x03
     cce:	8e a1       	ldd	r24, Y+38	; 0x26
     cd0:	9f a1       	ldd	r25, Y+39	; 0x27
     cd2:	04 96       	adiw	r24, 0x04	; 4
     cd4:	9f a3       	std	Y+39, r25	; 0x27
     cd6:	8e a3       	std	Y+38, r24	; 0x26
     cd8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     cda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     cdc:	1c 96       	adiw	r26, 0x0c	; 12
     cde:	bd 8f       	std	Y+29, r27	; 0x1d
     ce0:	ac 8f       	std	Y+28, r26	; 0x1c
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     ce2:	94 97       	sbiw	r26, 0x24	; 36
     ce4:	09 f0       	breq	.+2      	; 0xce8 <nominal+0x2e4>
     ce6:	59 cf       	rjmp	.-334    	; 0xb9a <nominal+0x196>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     ce8:	4a a9       	ldd	r20, Y+50	; 0x32
     cea:	5b a9       	ldd	r21, Y+51	; 0x33
     cec:	6d ee       	ldi	r22, 0xED	; 237
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	80 ea       	ldi	r24, 0xA0	; 160
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cf8:	60 91 d4 01 	lds	r22, 0x01D4
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 fe 32 	call	0x65fc	; 0x65fc <__floatunsisf>
     d06:	ab 01       	movw	r20, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	8a a9       	ldd	r24, Y+50	; 0x32
     d0c:	9b a9       	ldd	r25, Y+51	; 0x33
     d0e:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     d12:	e3 96       	adiw	r28, 0x33	; 51
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	3f 90       	pop	r3
     d40:	2f 90       	pop	r2
     d42:	08 95       	ret

00000d44 <apply_torque>:

void apply_torque(vector v_m)
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	8c 01       	movw	r16, r24
     d64:	ec 01       	movw	r28, r24
     d66:	0f 2e       	mov	r0, r31
     d68:	f3 e0       	ldi	r31, 0x03	; 3
     d6a:	9f 2e       	mov	r9, r31
     d6c:	f0 2d       	mov	r31, r0
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d6e:	48 80       	ld	r4, Y
     d70:	59 80       	ldd	r5, Y+1	; 0x01
     d72:	6a 80       	ldd	r6, Y+2	; 0x02
     d74:	7b 80       	ldd	r7, Y+3	; 0x03
     d76:	73 01       	movw	r14, r6
     d78:	62 01       	movw	r12, r4
     d7a:	e8 94       	clt
     d7c:	f7 f8       	bld	r15, 7
     d7e:	23 e3       	ldi	r18, 0x33	; 51
     d80:	33 e3       	ldi	r19, 0x33	; 51
     d82:	43 e7       	ldi	r20, 0x73	; 115
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
     d8e:	18 16       	cp	r1, r24
     d90:	fc f4       	brge	.+62     	; 0xdd0 <apply_torque+0x8c>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d92:	a3 01       	movw	r20, r6
     d94:	92 01       	movw	r18, r4
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f eb       	ldi	r21, 0xBF	; 191
     da6:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
     daa:	81 11       	cpse	r24, r1
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <apply_torque+0x7c>
			v_m[i] = -1*M_MAX;
     dae:	83 e3       	ldi	r24, 0x33	; 51
     db0:	93 e3       	ldi	r25, 0x33	; 51
     db2:	a3 e7       	ldi	r26, 0x73	; 115
     db4:	bf eb       	ldi	r27, 0xBF	; 191
     db6:	88 83       	st	Y, r24
     db8:	99 83       	std	Y+1, r25	; 0x01
     dba:	aa 83       	std	Y+2, r26	; 0x02
     dbc:	bb 83       	std	Y+3, r27	; 0x03
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <apply_torque+0x8c>
			else
			v_m[i] = M_MAX;
     dc0:	83 e3       	ldi	r24, 0x33	; 51
     dc2:	93 e3       	ldi	r25, 0x33	; 51
     dc4:	a3 e7       	ldi	r26, 0x73	; 115
     dc6:	bf e3       	ldi	r27, 0x3F	; 63
     dc8:	88 83       	st	Y, r24
     dca:	99 83       	std	Y+1, r25	; 0x01
     dcc:	aa 83       	std	Y+2, r26	; 0x02
     dce:	bb 83       	std	Y+3, r27	; 0x03
     dd0:	9a 94       	dec	r9
     dd2:	24 96       	adiw	r28, 0x04	; 4
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     dd4:	91 10       	cpse	r9, r1
     dd6:	cb cf       	rjmp	.-106    	; 0xd6e <apply_torque+0x2a>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     dd8:	45 ed       	ldi	r20, 0xD5	; 213
     dda:	5f e0       	ldi	r21, 0x0F	; 15
     ddc:	61 ec       	ldi	r22, 0xC1	; 193
     dde:	7e e3       	ldi	r23, 0x3E	; 62
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <scalar_into_vector>
     de6:	e8 01       	movw	r28, r16
     de8:	0f 2e       	mov	r0, r31
     dea:	f3 e0       	ldi	r31, 0x03	; 3
     dec:	9f 2e       	mov	r9, r31
     dee:	f0 2d       	mov	r31, r0
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     df0:	48 80       	ld	r4, Y
     df2:	59 80       	ldd	r5, Y+1	; 0x01
     df4:	6a 80       	ldd	r6, Y+2	; 0x02
     df6:	7b 80       	ldd	r7, Y+3	; 0x03
     df8:	73 01       	movw	r14, r6
     dfa:	62 01       	movw	r12, r4
     dfc:	e8 94       	clt
     dfe:	f7 f8       	bld	r15, 7
     e00:	28 ea       	ldi	r18, 0xA8	; 168
     e02:	36 ec       	ldi	r19, 0xC6	; 198
     e04:	4b e8       	ldi	r20, 0x8B	; 139
     e06:	5e e3       	ldi	r21, 0x3E	; 62
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
     e10:	18 16       	cp	r1, r24
     e12:	fc f4       	brge	.+62     	; 0xe52 <apply_torque+0x10e>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     e14:	a3 01       	movw	r20, r6
     e16:	92 01       	movw	r18, r4
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f eb       	ldi	r21, 0xBF	; 191
     e28:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
     e2c:	81 11       	cpse	r24, r1
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <apply_torque+0xfe>
			v_m[i] = -1*I_MAX;
     e30:	88 ea       	ldi	r24, 0xA8	; 168
     e32:	96 ec       	ldi	r25, 0xC6	; 198
     e34:	ab e8       	ldi	r26, 0x8B	; 139
     e36:	be eb       	ldi	r27, 0xBE	; 190
     e38:	88 83       	st	Y, r24
     e3a:	99 83       	std	Y+1, r25	; 0x01
     e3c:	aa 83       	std	Y+2, r26	; 0x02
     e3e:	bb 83       	std	Y+3, r27	; 0x03
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <apply_torque+0x10e>
			else
			v_m[i] = I_MAX;
     e42:	88 ea       	ldi	r24, 0xA8	; 168
     e44:	96 ec       	ldi	r25, 0xC6	; 198
     e46:	ab e8       	ldi	r26, 0x8B	; 139
     e48:	be e3       	ldi	r27, 0x3E	; 62
     e4a:	88 83       	st	Y, r24
     e4c:	99 83       	std	Y+1, r25	; 0x01
     e4e:	aa 83       	std	Y+2, r26	; 0x02
     e50:	bb 83       	std	Y+3, r27	; 0x03
     e52:	9a 94       	dec	r9
     e54:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
     e56:	91 10       	cpse	r9, r1
     e58:	cb cf       	rjmp	.-106    	; 0xdf0 <apply_torque+0xac>
     e5a:	78 01       	movw	r14, r16
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
	{
		//sen = ((int8_t)((lambda))/2);
		st =(int32_t)(v_m[i]*65535000);
     e60:	d7 01       	movw	r26, r14
     e62:	6d 91       	ld	r22, X+
     e64:	7d 91       	ld	r23, X+
     e66:	8d 91       	ld	r24, X+
     e68:	9d 91       	ld	r25, X+
     e6a:	7d 01       	movw	r14, r26
     e6c:	26 e0       	ldi	r18, 0x06	; 6
     e6e:	3f ef       	ldi	r19, 0xFF	; 255
     e70:	49 e7       	ldi	r20, 0x79	; 121
     e72:	5c e4       	ldi	r21, 0x4C	; 76
     e74:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     e78:	0e 94 cd 32 	call	0x659a	; 0x659a <__fixsfsi>
     e7c:	b7 2e       	mov	r11, r23
     e7e:	c8 2e       	mov	r12, r24
     e80:	d9 2e       	mov	r13, r25
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		sen2 = (int8_t)(st>>16);
		sen3 = (int8_t)(st>>24);
		transmit_UART0(sen);
     e82:	86 2f       	mov	r24, r22
     e84:	99 27       	eor	r25, r25
     e86:	87 fd       	sbrc	r24, 7
     e88:	90 95       	com	r25
     e8a:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
		transmit_UART0(sen1);
     e8e:	8b 2d       	mov	r24, r11
     e90:	99 27       	eor	r25, r25
     e92:	87 fd       	sbrc	r24, 7
     e94:	90 95       	com	r25
     e96:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
		transmit_UART0(sen2);
     e9a:	8c 2d       	mov	r24, r12
     e9c:	99 27       	eor	r25, r25
     e9e:	87 fd       	sbrc	r24, 7
     ea0:	90 95       	com	r25
     ea2:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
		transmit_UART0(sen3);
     ea6:	8d 2d       	mov	r24, r13
     ea8:	99 27       	eor	r25, r25
     eaa:	87 fd       	sbrc	r24, 7
     eac:	90 95       	com	r25
     eae:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
	int8_t sen,sen1,sen2,sen3;
	int32_t st;
	// x.f=3.145689123;
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	c3 30       	cpi	r28, 0x03	; 3
     eb6:	d1 05       	cpc	r29, r1
     eb8:	99 f6       	brne	.-90     	; 0xe60 <apply_torque+0x11c>
	transmit_UART0(buf3);*/	
	}
	
	
	sen = Mode;
	transmit_UART0(sen);
     eba:	80 91 26 01 	lds	r24, 0x0126
     ebe:	99 27       	eor	r25, r25
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	90 95       	com	r25
     ec4:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
	sen = gps_power;
	transmit_UART0(sen);
     ec8:	80 91 b0 01 	lds	r24, 0x01B0
     ecc:	99 27       	eor	r25, r25
     ece:	87 fd       	sbrc	r24, 7
     ed0:	90 95       	com	r25
     ed2:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
	if (v_m[0] > 0)
     ed6:	f8 01       	movw	r30, r16
     ed8:	c0 80       	ld	r12, Z
     eda:	d1 80       	ldd	r13, Z+1	; 0x01
     edc:	e2 80       	ldd	r14, Z+2	; 0x02
     ede:	f3 80       	ldd	r15, Z+3	; 0x03
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	c7 01       	movw	r24, r14
     ee8:	b6 01       	movw	r22, r12
     eea:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
     eee:	18 16       	cp	r1, r24
     ef0:	c4 f4       	brge	.+48     	; 0xf22 <apply_torque+0x1de>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     f02:	28 ea       	ldi	r18, 0xA8	; 168
     f04:	36 ec       	ldi	r19, 0xC6	; 198
     f06:	4b e8       	ldi	r20, 0x8B	; 139
     f08:	5e e3       	ldi	r21, 0x3E	; 62
     f0a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     f0e:	9f 77       	andi	r25, 0x7F	; 127
     f10:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
     f14:	70 93 16 05 	sts	0x0516, r23
     f18:	60 93 15 05 	sts	0x0515, r22
		Current_state.pwm.x_dir = 0;
     f1c:	10 92 1b 05 	sts	0x051B, r1
     f20:	1e c0       	rjmp	.+60     	; 0xf5e <apply_torque+0x21a>
	}
	else
	{
	Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
     f22:	28 ea       	ldi	r18, 0xA8	; 168
     f24:	36 ec       	ldi	r19, 0xC6	; 198
     f26:	4b e8       	ldi	r20, 0x8B	; 139
     f28:	5e e3       	ldi	r21, 0x3E	; 62
     f2a:	c7 01       	movw	r24, r14
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     f4a:	9f 77       	andi	r25, 0x7F	; 127
     f4c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
     f50:	70 93 16 05 	sts	0x0516, r23
     f54:	60 93 15 05 	sts	0x0515, r22
	Current_state.pwm.x_dir = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 1b 05 	sts	0x051B, r24
	}
	if (v_m[1] > 0)
     f5e:	d8 01       	movw	r26, r16
     f60:	14 96       	adiw	r26, 0x04	; 4
     f62:	cd 90       	ld	r12, X+
     f64:	dd 90       	ld	r13, X+
     f66:	ed 90       	ld	r14, X+
     f68:	fc 90       	ld	r15, X
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	c7 01       	movw	r24, r14
     f74:	b6 01       	movw	r22, r12
     f76:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	c4 f4       	brge	.+48     	; 0xfae <apply_torque+0x26a>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	c7 01       	movw	r24, r14
     f88:	b6 01       	movw	r22, r12
     f8a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     f8e:	28 ea       	ldi	r18, 0xA8	; 168
     f90:	36 ec       	ldi	r19, 0xC6	; 198
     f92:	4b e8       	ldi	r20, 0x8B	; 139
     f94:	5e e3       	ldi	r21, 0x3E	; 62
     f96:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     f9a:	9f 77       	andi	r25, 0x7F	; 127
     f9c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
     fa0:	70 93 18 05 	sts	0x0518, r23
     fa4:	60 93 17 05 	sts	0x0517, r22
		Current_state.pwm.y_dir = 0;
     fa8:	10 92 1c 05 	sts	0x051C, r1
     fac:	1e c0       	rjmp	.+60     	; 0xfea <apply_torque+0x2a6>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
     fae:	28 ea       	ldi	r18, 0xA8	; 168
     fb0:	36 ec       	ldi	r19, 0xC6	; 198
     fb2:	4b e8       	ldi	r20, 0x8B	; 139
     fb4:	5e e3       	ldi	r21, 0x3E	; 62
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
     fd6:	9f 77       	andi	r25, 0x7F	; 127
     fd8:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
     fdc:	70 93 18 05 	sts	0x0518, r23
     fe0:	60 93 17 05 	sts	0x0517, r22
		Current_state.pwm.y_dir = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 1c 05 	sts	0x051C, r24
	}
	if (v_m[2] > 0)
     fea:	f8 01       	movw	r30, r16
     fec:	c0 84       	ldd	r12, Z+8	; 0x08
     fee:	d1 84       	ldd	r13, Z+9	; 0x09
     ff0:	e2 84       	ldd	r14, Z+10	; 0x0a
     ff2:	f3 84       	ldd	r15, Z+11	; 0x0b
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	c4 f4       	brge	.+48     	; 0x1036 <apply_torque+0x2f2>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    1016:	28 ea       	ldi	r18, 0xA8	; 168
    1018:	36 ec       	ldi	r19, 0xC6	; 198
    101a:	4b e8       	ldi	r20, 0x8B	; 139
    101c:	5e e3       	ldi	r21, 0x3E	; 62
    101e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
    1028:	70 93 1a 05 	sts	0x051A, r23
    102c:	60 93 19 05 	sts	0x0519, r22
		Current_state.pwm.z_dir = 0;
    1030:	10 92 1d 05 	sts	0x051D, r1
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <apply_torque+0x32e>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
    1036:	28 ea       	ldi	r18, 0xA8	; 168
    1038:	36 ec       	ldi	r19, 0xC6	; 198
    103a:	4b e8       	ldi	r20, 0x8B	; 139
    103c:	5e e3       	ldi	r21, 0x3E	; 62
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    105e:	9f 77       	andi	r25, 0x7F	; 127
    1060:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fixunssfsi>
    1064:	70 93 1a 05 	sts	0x051A, r23
    1068:	60 93 19 05 	sts	0x0519, r22
		Current_state.pwm.z_dir = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 1d 05 	sts	0x051D, r24
	}
 
 
PORTA=0xA0;
    1072:	80 ea       	ldi	r24, 0xA0	; 160
    1074:	8b bb       	out	0x1b, r24	; 27
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	08 95       	ret

00001096 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	e0 97       	sbiw	r28, 0x30	; 48
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    10ca:	0e 94 c3 20 	call	0x4186	; 0x4186 <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ce:	8f ec       	ldi	r24, 0xCF	; 207
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <control+0x3c>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <control+0x42>
    10d8:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    10da:	0e 94 66 20 	call	0x40cc	; 0x40cc <read_MM>
  // write apply torquer function here
   if(Mode == DETUMBLING)
    10de:	80 91 26 01 	lds	r24, 0x0126
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	21 f4       	brne	.+8      	; 0x10ee <control+0x58>
   apply_torque(v_m_D);
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	2c de       	rcall	.-936    	; 0xd44 <apply_torque>
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <control+0x62>
   else if(Mode == NOMINAL)
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <control+0x62>
   apply_torque(v_m_N);
    10f2:	ce 01       	movw	r24, r28
    10f4:	0d 96       	adiw	r24, 0x0d	; 13
    10f6:	26 de       	rcall	.-948    	; 0xd44 <apply_torque>
   
  set_PWM();
    10f8:	0e 94 92 20 	call	0x4124	; 0x4124 <set_PWM>
    10fc:	8f e1       	ldi	r24, 0x1F	; 31
    10fe:	9e e4       	ldi	r25, 0x4E	; 78
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <__stack+0x7>
    1106:	00 00       	nop
  
  _delay_ms(10);
  detumbling(v_m_D);
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	7f db       	rcall	.-2306   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    110e:	80 91 02 05 	lds	r24, 0x0502
    1112:	90 91 03 05 	lds	r25, 0x0503
    1116:	a0 91 04 05 	lds	r26, 0x0504
    111a:	b0 91 05 05 	lds	r27, 0x0505
    111e:	80 93 f5 01 	sts	0x01F5, r24
    1122:	90 93 f6 01 	sts	0x01F6, r25
    1126:	a0 93 f7 01 	sts	0x01F7, r26
    112a:	b0 93 f8 01 	sts	0x01F8, r27
  v_B[1] = -1*Current_state.mm.B_y;
    112e:	80 91 06 05 	lds	r24, 0x0506
    1132:	90 91 07 05 	lds	r25, 0x0507
    1136:	a0 91 08 05 	lds	r26, 0x0508
    113a:	b0 91 09 05 	lds	r27, 0x0509
    113e:	b0 58       	subi	r27, 0x80	; 128
    1140:	80 93 f1 01 	sts	0x01F1, r24
    1144:	90 93 f2 01 	sts	0x01F2, r25
    1148:	a0 93 f3 01 	sts	0x01F3, r26
    114c:	b0 93 f4 01 	sts	0x01F4, r27
  v_B[0] = Current_state.mm.B_z;
    1150:	80 91 0a 05 	lds	r24, 0x050A
    1154:	90 91 0b 05 	lds	r25, 0x050B
    1158:	a0 91 0c 05 	lds	r26, 0x050C
    115c:	b0 91 0d 05 	lds	r27, 0x050D
    1160:	80 93 ed 01 	sts	0x01ED, r24
    1164:	90 93 ee 01 	sts	0x01EE, r25
    1168:	a0 93 ef 01 	sts	0x01EF, r26
    116c:	b0 93 f0 01 	sts	0x01F0, r27
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2))
    1170:	80 91 b0 01 	lds	r24, 0x01B0
    1174:	90 91 b1 01 	lds	r25, 0x01B1
    1178:	02 97       	sbiw	r24, 0x02	; 2
    117a:	79 f4       	brne	.+30     	; 0x119a <__stack+0x9b>
		{
   uint8_t q= 90;
   transmit_UART0(q);
    117c:	8a e5       	ldi	r24, 0x5A	; 90
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
    read_GPS();
    1184:	0e 94 61 20 	call	0x40c2	; 0x40c2 <read_GPS>
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	e9 e6       	ldi	r30, 0x69	; 105
    118c:	28 e1       	ldi	r18, 0x18	; 24
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	e0 40       	sbci	r30, 0x00	; 0
    1192:	20 40       	sbci	r18, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <__stack+0x8f>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <__stack+0x99>
    1198:	00 00       	nop
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    119a:	80 91 27 01 	lds	r24, 0x0127
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <__stack+0xa9>
      copy_gps_reading();  //check if gps is on but pdop data
    11a2:	0e 94 d7 20 	call	0x41ae	; 0x41ae <copy_gps_reading>
    11a6:	65 c0       	rjmp	.+202    	; 0x1272 <__stack+0x173>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    11a8:	20 91 92 04 	lds	r18, 0x0492
    11ac:	30 91 93 04 	lds	r19, 0x0493
    11b0:	40 91 94 04 	lds	r20, 0x0494
    11b4:	50 91 95 04 	lds	r21, 0x0495
    11b8:	60 91 96 04 	lds	r22, 0x0496
    11bc:	70 91 97 04 	lds	r23, 0x0497
    11c0:	80 91 98 04 	lds	r24, 0x0498
    11c4:	90 91 99 04 	lds	r25, 0x0499
    11c8:	a2 e0       	ldi	r26, 0x02	; 2
    11ca:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__adddi3_s8>
    11ce:	20 93 92 04 	sts	0x0492, r18
    11d2:	30 93 93 04 	sts	0x0493, r19
    11d6:	40 93 94 04 	sts	0x0494, r20
    11da:	50 93 95 04 	sts	0x0495, r21
    11de:	60 93 96 04 	sts	0x0496, r22
    11e2:	70 93 97 04 	sts	0x0497, r23
    11e6:	80 93 98 04 	sts	0x0498, r24
    11ea:	90 93 99 04 	sts	0x0499, r25
	  seconds_since_pivot += FRAME_TIME;
    11ee:	20 91 8a 04 	lds	r18, 0x048A
    11f2:	30 91 8b 04 	lds	r19, 0x048B
    11f6:	40 91 8c 04 	lds	r20, 0x048C
    11fa:	50 91 8d 04 	lds	r21, 0x048D
    11fe:	60 91 8e 04 	lds	r22, 0x048E
    1202:	70 91 8f 04 	lds	r23, 0x048F
    1206:	80 91 90 04 	lds	r24, 0x0490
    120a:	90 91 91 04 	lds	r25, 0x0491
    120e:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__adddi3_s8>
    1212:	20 93 8a 04 	sts	0x048A, r18
    1216:	30 93 8b 04 	sts	0x048B, r19
    121a:	40 93 8c 04 	sts	0x048C, r20
    121e:	50 93 8d 04 	sts	0x048D, r21
    1222:	60 93 8e 04 	sts	0x048E, r22
    1226:	70 93 8f 04 	sts	0x048F, r23
    122a:	80 93 90 04 	sts	0x0490, r24
    122e:	90 93 91 04 	sts	0x0491, r25
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	 /////////////////////////////////////////
	 Current_state.gps.seconds += FRAME_TIME;
    1232:	e3 ed       	ldi	r30, 0xD3	; 211
    1234:	f4 e0       	ldi	r31, 0x04	; 4
    1236:	80 81       	ld	r24, Z
    1238:	8e 5f       	subi	r24, 0xFE	; 254
    123a:	80 83       	st	Z, r24
	 if(Current_state.gps.seconds > 58)
    123c:	80 81       	ld	r24, Z
    123e:	8b 33       	cpi	r24, 0x3B	; 59
    1240:	38 f0       	brcs	.+14     	; 0x1250 <__stack+0x151>
	 {
		 Current_state.gps.seconds = 0;
    1242:	10 92 d3 04 	sts	0x04D3, r1
		 Current_state.gps.minutes += 1;
    1246:	e2 ed       	ldi	r30, 0xD2	; 210
    1248:	f4 e0       	ldi	r31, 0x04	; 4
    124a:	80 81       	ld	r24, Z
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 83       	st	Z, r24
		 
	 }
	 if (Current_state.gps.minutes > 59)
    1250:	80 91 d2 04 	lds	r24, 0x04D2
    1254:	8c 33       	cpi	r24, 0x3C	; 60
    1256:	38 f0       	brcs	.+14     	; 0x1266 <__stack+0x167>
	 {
		 Current_state.gps.minutes = 0;
    1258:	10 92 d2 04 	sts	0x04D2, r1
		 Current_state.gps.hours += 1;
    125c:	e1 ed       	ldi	r30, 0xD1	; 209
    125e:	f4 e0       	ldi	r31, 0x04	; 4
    1260:	80 81       	ld	r24, Z
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 83       	st	Z, r24
	 }
	 if (Current_state.gps.hours > 23)
    1266:	80 91 d1 04 	lds	r24, 0x04D1
    126a:	88 31       	cpi	r24, 0x18	; 24
    126c:	10 f0       	brcs	.+4      	; 0x1272 <__stack+0x173>
	 {
		 Current_state.gps.hours = 0;
    126e:	10 92 d1 04 	sts	0x04D1, r1
	 /////////////////////////////////////////
	  }

	  
    uint8_t e=100;
    transmit_UART0(e);
    1272:	84 e6       	ldi	r24, 0x64	; 100
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
    read_SS();
    127a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    127e:	0e 94 c8 24 	call	0x4990	; 0x4990 <light_cal>
    1282:	80 93 d4 01 	sts	0x01D4, r24
	if(GPS_done != 255)
    1286:	80 91 27 01 	lds	r24, 0x0127
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	09 f4       	brne	.+2      	; 0x1290 <__stack+0x191>
    128e:	43 c0       	rjmp	.+134    	; 0x1316 <__stack+0x217>
	{
		
    sgp_orbit_propagator();
    1290:	0e 94 df 22 	call	0x45be	; 0x45be <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    1294:	ce 01       	movw	r24, r28
    1296:	49 96       	adiw	r24, 0x19	; 25
    1298:	0e 94 7e 23 	call	0x46fc	; 0x46fc <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    129c:	ce 01       	movw	r24, r28
    129e:	85 96       	adiw	r24, 0x25	; 37
    12a0:	0e 94 4d 24 	call	0x489a	; 0x489a <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    12a4:	23 ed       	ldi	r18, 0xD3	; 211
    12a6:	31 e0       	ldi	r19, 0x01	; 1
    12a8:	46 e7       	ldi	r20, 0x76	; 118
    12aa:	54 e0       	ldi	r21, 0x04	; 4
    12ac:	be 01       	movw	r22, r28
    12ae:	67 5e       	subi	r22, 0xE7	; 231
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	ce 01       	movw	r24, r28
    12b4:	85 96       	adiw	r24, 0x25	; 37
    12b6:	0e 94 ed 24 	call	0x49da	; 0x49da <quest>
    12ba:	80 93 d4 01 	sts	0x01D4, r24
    
    omega_estimation(q_o, v_w);
    12be:	61 ee       	ldi	r22, 0xE1	; 225
    12c0:	71 e0       	ldi	r23, 0x01	; 1
    12c2:	86 e7       	ldi	r24, 0x76	; 118
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    12ca:	60 91 d4 01 	lds	r22, 0x01D4
    12ce:	80 91 d3 01 	lds	r24, 0x01D3
    12d2:	68 9f       	mul	r22, r24
    12d4:	b0 01       	movw	r22, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	88 27       	eor	r24, r24
    12da:	77 fd       	sbrc	r23, 7
    12dc:	80 95       	com	r24
    12de:	98 2f       	mov	r25, r24
    12e0:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    12e4:	ab 01       	movw	r20, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	81 ee       	ldi	r24, 0xE1	; 225
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    12f0:	81 ee       	ldi	r24, 0xE1	; 225
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vector_norm>
    12f8:	60 93 86 04 	sts	0x0486, r22
    12fc:	70 93 87 04 	sts	0x0487, r23
    1300:	80 93 88 04 	sts	0x0488, r24
    1304:	90 93 89 04 	sts	0x0489, r25
    convert_unit_quaternion(q_o);
    1308:	86 e7       	ldi	r24, 0x76	; 118
    130a:	94 e0       	ldi	r25, 0x04	; 4
    130c:	0e 94 39 20 	call	0x4072	; 0x4072 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    1310:	ce 01       	movw	r24, r28
    1312:	0d 96       	adiw	r24, 0x0d	; 13
    1314:	77 db       	rcall	.-2322   	; 0xa04 <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    1316:	80 91 c6 01 	lds	r24, 0x01C6
    131a:	88 37       	cpi	r24, 0x78	; 120
    131c:	dc f4       	brge	.+54     	; 0x1354 <__stack+0x255>
    131e:	20 91 20 05 	lds	r18, 0x0520
    1322:	30 91 21 05 	lds	r19, 0x0521
    1326:	40 91 22 05 	lds	r20, 0x0522
    132a:	50 91 23 05 	lds	r21, 0x0523
    132e:	60 91 24 05 	lds	r22, 0x0524
    1332:	70 91 25 05 	lds	r23, 0x0525
    1336:	80 91 26 05 	lds	r24, 0x0526
    133a:	90 91 27 05 	lds	r25, 0x0527
    133e:	20 32       	cpi	r18, 0x20	; 32
    1340:	31 4a       	sbci	r19, 0xA1	; 161
    1342:	47 40       	sbci	r20, 0x07	; 7
    1344:	51 05       	cpc	r21, r1
    1346:	61 05       	cpc	r22, r1
    1348:	71 05       	cpc	r23, r1
    134a:	81 05       	cpc	r24, r1
    134c:	91 05       	cpc	r25, r1
    134e:	09 f0       	breq	.+2      	; 0x1352 <__stack+0x253>
    1350:	08 f4       	brcc	.+2      	; 0x1354 <__stack+0x255>
    1352:	6b c0       	rjmp	.+214    	; 0x142a <__stack+0x32b>
		{    avg_md_new = 0;
    1354:	10 92 b4 01 	sts	0x01B4, r1
    1358:	10 92 b5 01 	sts	0x01B5, r1
    135c:	10 92 b6 01 	sts	0x01B6, r1
    1360:	10 92 b7 01 	sts	0x01B7, r1
			star_flag = 121;                 // 91
    1364:	89 e7       	ldi	r24, 0x79	; 121
    1366:	80 93 c6 01 	sts	0x01C6, r24
			if (light ==1)
    136a:	80 91 d4 01 	lds	r24, 0x01D4
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	21 f5       	brne	.+72     	; 0x13ba <__stack+0x2bb>
			{
				time_l = time_l +2;
    1372:	80 91 ac 01 	lds	r24, 0x01AC
    1376:	90 91 ad 01 	lds	r25, 0x01AD
    137a:	02 96       	adiw	r24, 0x02	; 2
    137c:	90 93 ad 01 	sts	0x01AD, r25
    1380:	80 93 ac 01 	sts	0x01AC, r24
				time_e =0;
    1384:	10 92 af 01 	sts	0x01AF, r1
    1388:	10 92 ae 01 	sts	0x01AE, r1
				start_time = time_l % 720;   //690
    138c:	60 ed       	ldi	r22, 0xD0	; 208
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <__divmodhi4>
    1394:	90 93 c5 01 	sts	0x01C5, r25
    1398:	80 93 c4 01 	sts	0x01C4, r24
				if (start_time <600)       //600
    139c:	88 35       	cpi	r24, 0x58	; 88
    139e:	92 40       	sbci	r25, 0x02	; 2
    13a0:	2c f4       	brge	.+10     	; 0x13ac <__stack+0x2ad>
				{
					gps_power =0;          // 0 
    13a2:	10 92 b1 01 	sts	0x01B1, r1
    13a6:	10 92 b0 01 	sts	0x01B0, r1
    13aa:	29 c1       	rjmp	.+594    	; 0x15fe <__stack+0x4ff>
				}
				else
				{
					gps_power =2;
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	90 93 b1 01 	sts	0x01B1, r25
    13b4:	80 93 b0 01 	sts	0x01B0, r24
    13b8:	22 c1       	rjmp	.+580    	; 0x15fe <__stack+0x4ff>
				}
			}
			else
			{
				start_time =0;
    13ba:	10 92 c5 01 	sts	0x01C5, r1
    13be:	10 92 c4 01 	sts	0x01C4, r1
				time_e = time_e +2;
    13c2:	60 91 ae 01 	lds	r22, 0x01AE
    13c6:	70 91 af 01 	lds	r23, 0x01AF
    13ca:	6e 5f       	subi	r22, 0xFE	; 254
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	70 93 af 01 	sts	0x01AF, r23
    13d2:	60 93 ae 01 	sts	0x01AE, r22
				if (time_e > (eclipse_time-150))
    13d6:	88 27       	eor	r24, r24
    13d8:	77 fd       	sbrc	r23, 7
    13da:	80 95       	com	r24
    13dc:	98 2f       	mov	r25, r24
    13de:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	46 e1       	ldi	r20, 0x16	; 22
    13ec:	53 e4       	ldi	r21, 0x43	; 67
    13ee:	60 91 04 01 	lds	r22, 0x0104
    13f2:	70 91 05 01 	lds	r23, 0x0105
    13f6:	80 91 06 01 	lds	r24, 0x0106
    13fa:	90 91 07 01 	lds	r25, 0x0107
    13fe:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    140e:	18 16       	cp	r1, r24
    1410:	3c f4       	brge	.+14     	; 0x1420 <__stack+0x321>
				{
					gps_power =2;
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	90 93 b1 01 	sts	0x01B1, r25
    141a:	80 93 b0 01 	sts	0x01B0, r24
    141e:	ef c0       	rjmp	.+478    	; 0x15fe <__stack+0x4ff>
				}
				else
				{
					gps_power =0;
    1420:	10 92 b1 01 	sts	0x01B1, r1
    1424:	10 92 b0 01 	sts	0x01B0, r1
    1428:	ea c0       	rjmp	.+468    	; 0x15fe <__stack+0x4ff>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vector_norm>
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	60 93 c0 01 	sts	0x01C0, r22
    143a:	70 93 c1 01 	sts	0x01C1, r23
    143e:	80 93 c2 01 	sts	0x01C2, r24
    1442:	90 93 c3 01 	sts	0x01C3, r25
			md_start = norm_m_d * light;
    1446:	60 91 d4 01 	lds	r22, 0x01D4
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    1460:	6b 01       	movw	r12, r22
    1462:	7c 01       	movw	r14, r24
    1464:	60 93 bc 01 	sts	0x01BC, r22
    1468:	70 93 bd 01 	sts	0x01BD, r23
    146c:	80 93 be 01 	sts	0x01BE, r24
    1470:	90 93 bf 01 	sts	0x01BF, r25
			if (md_start != 0)
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <__stack+0x385>
    1482:	60 c0       	rjmp	.+192    	; 0x1544 <__stack+0x445>
			{
				if (num==2)
    1484:	00 91 08 01 	lds	r16, 0x0108
    1488:	10 91 09 01 	lds	r17, 0x0109
    148c:	02 30       	cpi	r16, 0x02	; 2
    148e:	11 05       	cpc	r17, r1
    1490:	a9 f4       	brne	.+42     	; 0x14bc <__stack+0x3bd>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    1492:	a7 01       	movw	r20, r14
    1494:	96 01       	movw	r18, r12
    1496:	c7 01       	movw	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    14aa:	60 93 b4 01 	sts	0x01B4, r22
    14ae:	70 93 b5 01 	sts	0x01B5, r23
    14b2:	80 93 b6 01 	sts	0x01B6, r24
    14b6:	90 93 b7 01 	sts	0x01B7, r25
    14ba:	2c c0       	rjmp	.+88     	; 0x1514 <__stack+0x415>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    14bc:	b8 01       	movw	r22, r16
    14be:	61 50       	subi	r22, 0x01	; 1
    14c0:	71 09       	sbc	r23, r1
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <__floatunsisf>
    14ca:	20 91 b8 01 	lds	r18, 0x01B8
    14ce:	30 91 b9 01 	lds	r19, 0x01B9
    14d2:	40 91 ba 01 	lds	r20, 0x01BA
    14d6:	50 91 bb 01 	lds	r21, 0x01BB
    14da:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	c7 01       	movw	r24, r14
    14e4:	b6 01       	movw	r22, r12
    14e6:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    14ea:	6b 01       	movw	r12, r22
    14ec:	7c 01       	movw	r14, r24
    14ee:	b8 01       	movw	r22, r16
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 fe 32 	call	0x65fc	; 0x65fc <__floatunsisf>
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	c7 01       	movw	r24, r14
    14fe:	b6 01       	movw	r22, r12
    1500:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    1504:	60 93 b4 01 	sts	0x01B4, r22
    1508:	70 93 b5 01 	sts	0x01B5, r23
    150c:	80 93 b6 01 	sts	0x01B6, r24
    1510:	90 93 b7 01 	sts	0x01B7, r25
				}
				num = num +1;
    1514:	0f 5f       	subi	r16, 0xFF	; 255
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	10 93 09 01 	sts	0x0109, r17
    151c:	00 93 08 01 	sts	0x0108, r16
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1520:	c0 90 b4 01 	lds	r12, 0x01B4
    1524:	d0 90 b5 01 	lds	r13, 0x01B5
    1528:	e0 90 b6 01 	lds	r14, 0x01B6
    152c:	f0 90 b7 01 	lds	r15, 0x01B7
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	c7 01       	movw	r24, r14
    1538:	b6 01       	movw	r22, r12
    153a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    153e:	81 11       	cpse	r24, r1
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <__stack+0x463>
    1542:	1a c0       	rjmp	.+52     	; 0x1578 <__stack+0x479>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	90 93 09 01 	sts	0x0109, r25
    154c:	80 93 08 01 	sts	0x0108, r24
				avg_md_new = 0;
    1550:	10 92 b4 01 	sts	0x01B4, r1
    1554:	10 92 b5 01 	sts	0x01B5, r1
    1558:	10 92 b6 01 	sts	0x01B6, r1
    155c:	10 92 b7 01 	sts	0x01B7, r1
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <__stack+0x479>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1562:	2a e0       	ldi	r18, 0x0A	; 10
    1564:	37 ed       	ldi	r19, 0xD7	; 215
    1566:	43 e2       	ldi	r20, 0x23	; 35
    1568:	5d e3       	ldi	r21, 0x3D	; 61
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    1572:	88 23       	and	r24, r24
    1574:	84 f0       	brlt	.+32     	; 0x1596 <__stack+0x497>
    1576:	19 c0       	rjmp	.+50     	; 0x15aa <__stack+0x4ab>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	60 91 b8 01 	lds	r22, 0x01B8
    1582:	70 91 b9 01 	lds	r23, 0x01B9
    1586:	80 91 ba 01 	lds	r24, 0x01BA
    158a:	90 91 bb 01 	lds	r25, 0x01BB
    158e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    1592:	88 23       	and	r24, r24
    1594:	51 f0       	breq	.+20     	; 0x15aa <__stack+0x4ab>
			{
				flag_on = flag_on +2;
    1596:	80 91 b2 01 	lds	r24, 0x01B2
    159a:	90 91 b3 01 	lds	r25, 0x01B3
    159e:	02 96       	adiw	r24, 0x02	; 2
    15a0:	90 93 b3 01 	sts	0x01B3, r25
    15a4:	80 93 b2 01 	sts	0x01B2, r24
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <__stack+0x4b3>
			}
			else
			{
				flag_on = 0;
    15aa:	10 92 b3 01 	sts	0x01B3, r1
    15ae:	10 92 b2 01 	sts	0x01B2, r1
			}
			if (flag_on > gps_start)
    15b2:	60 91 b2 01 	lds	r22, 0x01B2
    15b6:	70 91 b3 01 	lds	r23, 0x01B3
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 fe 32 	call	0x65fc	; 0x65fc <__floatunsisf>
    15c2:	20 91 00 01 	lds	r18, 0x0100
    15c6:	30 91 01 01 	lds	r19, 0x0101
    15ca:	40 91 02 01 	lds	r20, 0x0102
    15ce:	50 91 03 01 	lds	r21, 0x0103
    15d2:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    15d6:	18 16       	cp	r1, r24
    15d8:	64 f4       	brge	.+24     	; 0x15f2 <__stack+0x4f3>
			{
				gps_power = 2;
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	90 93 b1 01 	sts	0x01B1, r25
    15e2:	80 93 b0 01 	sts	0x01B0, r24
				star_flag = star_flag +2;
    15e6:	80 91 c6 01 	lds	r24, 0x01C6
    15ea:	8e 5f       	subi	r24, 0xFE	; 254
    15ec:	80 93 c6 01 	sts	0x01C6, r24
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <__stack+0x4ff>
			}
			else
			{
				gps_power=0;
    15f2:	10 92 b1 01 	sts	0x01B1, r1
    15f6:	10 92 b0 01 	sts	0x01B0, r1
				star_flag = 0;                        
    15fa:	10 92 c6 01 	sts	0x01C6, r1
			}
			
		}
  avg_md = avg_md_new;
    15fe:	80 91 b4 01 	lds	r24, 0x01B4
    1602:	90 91 b5 01 	lds	r25, 0x01B5
    1606:	a0 91 b6 01 	lds	r26, 0x01B6
    160a:	b0 91 b7 01 	lds	r27, 0x01B7
    160e:	80 93 b8 01 	sts	0x01B8, r24
    1612:	90 93 b9 01 	sts	0x01B9, r25
    1616:	a0 93 ba 01 	sts	0x01BA, r26
    161a:	b0 93 bb 01 	sts	0x01BB, r27
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    161e:	c0 90 86 04 	lds	r12, 0x0486
    1622:	d0 90 87 04 	lds	r13, 0x0487
    1626:	e0 90 88 04 	lds	r14, 0x0488
    162a:	f0 90 89 04 	lds	r15, 0x0489
    162e:	2f e6       	ldi	r18, 0x6F	; 111
    1630:	32 e1       	ldi	r19, 0x12	; 18
    1632:	43 e8       	ldi	r20, 0x83	; 131
    1634:	5b e3       	ldi	r21, 0x3B	; 59
    1636:	c7 01       	movw	r24, r14
    1638:	b6 01       	movw	r22, r12
    163a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    163e:	88 23       	and	r24, r24
    1640:	bc f4       	brge	.+46     	; 0x1670 <__stack+0x571>
    1642:	90 91 d4 01 	lds	r25, 0x01D4
    1646:	80 91 d3 01 	lds	r24, 0x01D3
    164a:	98 9f       	mul	r25, r24
    164c:	c0 01       	movw	r24, r0
    164e:	11 24       	eor	r1, r1
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	71 f4       	brne	.+28     	; 0x1670 <__stack+0x571>
   {
	   flag_N = flag_N+1;
    1654:	80 91 d1 01 	lds	r24, 0x01D1
    1658:	90 91 d2 01 	lds	r25, 0x01D2
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	90 93 d2 01 	sts	0x01D2, r25
    1662:	80 93 d1 01 	sts	0x01D1, r24
	   flag_D = 0;
    1666:	10 92 d0 01 	sts	0x01D0, r1
    166a:	10 92 cf 01 	sts	0x01CF, r1
    166e:	17 c0       	rjmp	.+46     	; 0x169e <__stack+0x59f>
   }
   else if (mod_w > TOLW_N2D)
    1670:	2f e6       	ldi	r18, 0x6F	; 111
    1672:	32 e1       	ldi	r19, 0x12	; 18
    1674:	43 e0       	ldi	r20, 0x03	; 3
    1676:	5c e3       	ldi	r21, 0x3C	; 60
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    1680:	18 16       	cp	r1, r24
    1682:	6c f4       	brge	.+26     	; 0x169e <__stack+0x59f>
   {
	   flag_D = flag_D +1;
    1684:	80 91 cf 01 	lds	r24, 0x01CF
    1688:	90 91 d0 01 	lds	r25, 0x01D0
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	90 93 d0 01 	sts	0x01D0, r25
    1692:	80 93 cf 01 	sts	0x01CF, r24
	   flag_N = 0;
    1696:	10 92 d2 01 	sts	0x01D2, r1
    169a:	10 92 d1 01 	sts	0x01D1, r1
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    169e:	20 90 20 05 	lds	r2, 0x0520
    16a2:	30 90 21 05 	lds	r3, 0x0521
    16a6:	40 90 22 05 	lds	r4, 0x0522
    16aa:	50 90 23 05 	lds	r5, 0x0523
    16ae:	60 90 24 05 	lds	r6, 0x0524
    16b2:	70 90 25 05 	lds	r7, 0x0525
    16b6:	80 90 26 05 	lds	r8, 0x0526
    16ba:	90 90 27 05 	lds	r9, 0x0527
    16be:	22 2d       	mov	r18, r2
    16c0:	33 2d       	mov	r19, r3
    16c2:	44 2d       	mov	r20, r4
    16c4:	55 2d       	mov	r21, r5
    16c6:	66 2d       	mov	r22, r6
    16c8:	77 2d       	mov	r23, r7
    16ca:	88 2d       	mov	r24, r8
    16cc:	99 2d       	mov	r25, r9
    16ce:	23 3f       	cpi	r18, 0xF3	; 243
    16d0:	31 40       	sbci	r19, 0x01	; 1
    16d2:	41 05       	cpc	r20, r1
    16d4:	51 05       	cpc	r21, r1
    16d6:	61 05       	cpc	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	81 05       	cpc	r24, r1
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <__stack+0x5e3>
    16e0:	a0 f4       	brcc	.+40     	; 0x170a <__stack+0x60b>
	{
		Mode = DETUMBLING;
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	80 93 26 01 	sts	0x0126, r24
		t_now = 0;
    16e8:	10 92 c7 01 	sts	0x01C7, r1
    16ec:	10 92 c8 01 	sts	0x01C8, r1
    16f0:	10 92 c9 01 	sts	0x01C9, r1
    16f4:	10 92 ca 01 	sts	0x01CA, r1
    16f8:	10 92 cb 01 	sts	0x01CB, r1
    16fc:	10 92 cc 01 	sts	0x01CC, r1
    1700:	10 92 cd 01 	sts	0x01CD, r1
    1704:	10 92 ce 01 	sts	0x01CE, r1
    1708:	77 c0       	rjmp	.+238    	; 0x17f8 <__stack+0x6f9>
	}
	else
	{
		if (star_flag >0)
    170a:	80 91 c6 01 	lds	r24, 0x01C6
    170e:	18 16       	cp	r1, r24
    1710:	5c f5       	brge	.+86     	; 0x1768 <__stack+0x669>
		{
			if (Mode == DETUMBLING)
    1712:	80 91 26 01 	lds	r24, 0x0126
    1716:	84 30       	cpi	r24, 0x04	; 4
    1718:	39 f5       	brne	.+78     	; 0x1768 <__stack+0x669>
			{
				if (flag_N > tol_time)
    171a:	a0 91 d1 01 	lds	r26, 0x01D1
    171e:	b0 91 d2 01 	lds	r27, 0x01D2
    1722:	e0 91 0a 01 	lds	r30, 0x010A
    1726:	f0 91 0b 01 	lds	r31, 0x010B
    172a:	ea 17       	cp	r30, r26
    172c:	fb 07       	cpc	r31, r27
    172e:	c4 f4       	brge	.+48     	; 0x1760 <__stack+0x661>
				{
					Mode = NOMINAL;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	80 93 26 01 	sts	0x0126, r24
					t_now = Time;
    1736:	20 92 c7 01 	sts	0x01C7, r2
    173a:	30 92 c8 01 	sts	0x01C8, r3
    173e:	40 92 c9 01 	sts	0x01C9, r4
    1742:	50 92 ca 01 	sts	0x01CA, r5
    1746:	60 92 cb 01 	sts	0x01CB, r6
    174a:	70 92 cc 01 	sts	0x01CC, r7
    174e:	80 92 cd 01 	sts	0x01CD, r8
    1752:	90 92 ce 01 	sts	0x01CE, r9
					flag_N = 0;
    1756:	10 92 d2 01 	sts	0x01D2, r1
    175a:	10 92 d1 01 	sts	0x01D1, r1
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <__stack+0x669>
				}
				else
				{flag_D = 0;}	
    1760:	10 92 d0 01 	sts	0x01D0, r1
    1764:	10 92 cf 01 	sts	0x01CF, r1
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1768:	80 91 26 01 	lds	r24, 0x0126
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	09 f0       	breq	.+2      	; 0x1772 <__stack+0x673>
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <__stack+0x6f9>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    1772:	a0 91 cf 01 	lds	r26, 0x01CF
    1776:	b0 91 d0 01 	lds	r27, 0x01D0
    177a:	e0 91 0a 01 	lds	r30, 0x010A
    177e:	f0 91 0b 01 	lds	r31, 0x010B
    1782:	ea 17       	cp	r30, r26
    1784:	fb 07       	cpc	r31, r27
    1786:	a4 f5       	brge	.+104    	; 0x17f0 <__stack+0x6f1>
    1788:	20 91 c7 01 	lds	r18, 0x01C7
    178c:	30 91 c8 01 	lds	r19, 0x01C8
    1790:	40 91 c9 01 	lds	r20, 0x01C9
    1794:	50 91 ca 01 	lds	r21, 0x01CA
    1798:	60 91 cb 01 	lds	r22, 0x01CB
    179c:	70 91 cc 01 	lds	r23, 0x01CC
    17a0:	80 91 cd 01 	lds	r24, 0x01CD
    17a4:	90 91 ce 01 	lds	r25, 0x01CE
    17a8:	20 5f       	subi	r18, 0xF0	; 240
    17aa:	38 4d       	sbci	r19, 0xD8	; 216
    17ac:	4f 4f       	sbci	r20, 0xFF	; 255
    17ae:	5f 4f       	sbci	r21, 0xFF	; 255
    17b0:	6f 4f       	sbci	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	8f 4f       	sbci	r24, 0xFF	; 255
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	a2 2e       	mov	r10, r18
    17ba:	b3 2e       	mov	r11, r19
    17bc:	c4 2e       	mov	r12, r20
    17be:	d5 2e       	mov	r13, r21
    17c0:	e6 2e       	mov	r14, r22
    17c2:	f7 2e       	mov	r15, r23
    17c4:	08 2f       	mov	r16, r24
    17c6:	19 2f       	mov	r17, r25
    17c8:	22 2d       	mov	r18, r2
    17ca:	33 2d       	mov	r19, r3
    17cc:	44 2d       	mov	r20, r4
    17ce:	55 2d       	mov	r21, r5
    17d0:	66 2d       	mov	r22, r6
    17d2:	77 2d       	mov	r23, r7
    17d4:	88 2d       	mov	r24, r8
    17d6:	99 2d       	mov	r25, r9
    17d8:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__cmpdi2>
    17dc:	49 f0       	breq	.+18     	; 0x17f0 <__stack+0x6f1>
    17de:	40 f0       	brcs	.+16     	; 0x17f0 <__stack+0x6f1>
		 {
			 Mode = DETUMBLING;
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	80 93 26 01 	sts	0x0126, r24
			 flag_D = 0;
    17e6:	10 92 d0 01 	sts	0x01D0, r1
    17ea:	10 92 cf 01 	sts	0x01CF, r1
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <__stack+0x6f9>
		 }
		 else
		 {
			 flag_N = 0;
    17f0:	10 92 d2 01 	sts	0x01D2, r1
    17f4:	10 92 d1 01 	sts	0x01D1, r1
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    17f8:	80 91 b0 01 	lds	r24, 0x01B0
    17fc:	80 93 db 04 	sts	0x04DB, r24
}
    1800:	e0 96       	adiw	r28, 0x30	; 48
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	7f 90       	pop	r7
    1826:	6f 90       	pop	r6
    1828:	5f 90       	pop	r5
    182a:	4f 90       	pop	r4
    182c:	3f 90       	pop	r3
    182e:	2f 90       	pop	r2
    1830:	08 95       	ret

00001832 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	32 97       	sbiw	r30, 0x02	; 2
    1838:	eb 30       	cpi	r30, 0x0B	; 11
    183a:	f1 05       	cpc	r31, r1
    183c:	20 f4       	brcc	.+8      	; 0x1846 <days_in_months+0x14>
    183e:	ea 5b       	subi	r30, 0xBA	; 186
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	0c 94 84 36 	jmp	0x6d08	; 0x6d08 <__tablejump2__>
  {
    case 1:
      return 0;
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	08 95       	ret
      break;
    case 2:
      return 31;
      break;
    case 3:
      return 59;
    1858:	2b e3       	ldi	r18, 0x3B	; 59
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	08 95       	ret
      break;
    case 4:
      return 90;
    186a:	2a e5       	ldi	r18, 0x5A	; 90
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	08 95       	ret
      break;
    case 5:
      return 120;
    187c:	28 e7       	ldi	r18, 0x78	; 120
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	08 95       	ret
      break;
    case 6:
      return 151;
    188e:	27 e9       	ldi	r18, 0x97	; 151
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	08 95       	ret
      break;
    case 7:
      return 181;
    18a0:	25 eb       	ldi	r18, 0xB5	; 181
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	08 95       	ret
      break;
    case 8:
      return 212;
    18b2:	24 ed       	ldi	r18, 0xD4	; 212
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	08 95       	ret
      break;
    case 9:
      return 243;
    18c4:	23 ef       	ldi	r18, 0xF3	; 243
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret
      break;
    case 10:
      return 273;
    18d6:	21 e1       	ldi	r18, 0x11	; 17
    18d8:	31 e0       	ldi	r19, 0x01	; 1
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	08 95       	ret
      break;
    case 11:
      return 304;
    18e8:	20 e3       	ldi	r18, 0x30	; 48
    18ea:	31 e0       	ldi	r19, 0x01	; 1
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	08 95       	ret
      break;
    case 12:
      return 334;
    18fa:	2e e4       	ldi	r18, 0x4E	; 78
    18fc:	31 e0       	ldi	r19, 0x01	; 1
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	08 95       	ret
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    190c:	2f e1       	ldi	r18, 0x1F	; 31
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    191c:	08 95       	ret

0000191e <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    191e:	2f 92       	push	r2
    1920:	3f 92       	push	r3
    1922:	4f 92       	push	r4
    1924:	5f 92       	push	r5
    1926:	6f 92       	push	r6
    1928:	7f 92       	push	r7
    192a:	8f 92       	push	r8
    192c:	9f 92       	push	r9
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	67 97       	sbiw	r28, 0x17	; 23
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	1c 01       	movw	r2, r24
    1954:	86 2f       	mov	r24, r22
    1956:	4b 83       	std	Y+3, r20	; 0x03
    1958:	52 2e       	mov	r5, r18
    195a:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    195c:	6a df       	rcall	.-300    	; 0x1832 <days_in_months>
    195e:	2c 83       	std	Y+4, r18	; 0x04
    1960:	3d 83       	std	Y+5, r19	; 0x05
    1962:	4e 83       	std	Y+6, r20	; 0x06
    1964:	5f 83       	std	Y+7, r21	; 0x07
    1966:	68 87       	std	Y+8, r22	; 0x08
    1968:	79 87       	std	Y+9, r23	; 0x09
    196a:	8a 87       	std	Y+10, r24	; 0x0a
    196c:	9b 87       	std	Y+11, r25	; 0x0b
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    196e:	2e 2d       	mov	r18, r14
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	20 58       	subi	r18, 0x80	; 128
    1980:	3c 45       	sbci	r19, 0x5C	; 92
    1982:	44 49       	sbci	r20, 0x94	; 148
    1984:	5b 4c       	sbci	r21, 0xCB	; 203
    1986:	6e 40       	sbci	r22, 0x0E	; 14
    1988:	71 09       	sbc	r23, r1
    198a:	81 09       	sbc	r24, r1
    198c:	91 09       	sbc	r25, r1
    198e:	72 2e       	mov	r7, r18
    1990:	83 2e       	mov	r8, r19
    1992:	94 2e       	mov	r9, r20
    1994:	65 2e       	mov	r6, r21
    1996:	b6 2f       	mov	r27, r22
    1998:	a7 2f       	mov	r26, r23
    199a:	f8 2f       	mov	r31, r24
    199c:	e9 2f       	mov	r30, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    199e:	20 2f       	mov	r18, r16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	04 e0       	ldi	r16, 0x04	; 4
    19b0:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    19b4:	b1 2c       	mov	r11, r1
    19b6:	c1 2c       	mov	r12, r1
    19b8:	d1 2c       	mov	r13, r1
    19ba:	e1 2c       	mov	r14, r1
    19bc:	f1 2c       	mov	r15, r1
    19be:	00 e0       	ldi	r16, 0x00	; 0
    19c0:	10 e0       	ldi	r17, 0x00	; 0
    19c2:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    19c6:	02 e0       	ldi	r16, 0x02	; 2
    19c8:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    19cc:	a2 2e       	mov	r10, r18
    19ce:	b3 2e       	mov	r11, r19
    19d0:	c4 2e       	mov	r12, r20
    19d2:	d5 2e       	mov	r13, r21
    19d4:	e6 2e       	mov	r14, r22
    19d6:	f7 2e       	mov	r15, r23
    19d8:	08 2f       	mov	r16, r24
    19da:	19 2f       	mov	r17, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    19dc:	27 2d       	mov	r18, r7
    19de:	38 2d       	mov	r19, r8
    19e0:	49 2d       	mov	r20, r9
    19e2:	56 2d       	mov	r21, r6
    19e4:	6b 2f       	mov	r22, r27
    19e6:	7a 2f       	mov	r23, r26
    19e8:	8f 2f       	mov	r24, r31
    19ea:	9e 2f       	mov	r25, r30
    19ec:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    19f0:	62 2e       	mov	r6, r18
    19f2:	73 2e       	mov	r7, r19
    19f4:	84 2e       	mov	r8, r20
    19f6:	95 2e       	mov	r9, r21
    19f8:	46 2e       	mov	r4, r22
    19fa:	b7 2f       	mov	r27, r23
    19fc:	a8 2f       	mov	r26, r24
    19fe:	f9 2f       	mov	r31, r25
  now += ((uint64_t)hours) * 60 * 60;
    1a00:	25 2d       	mov	r18, r5
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	04 e0       	ldi	r16, 0x04	; 4
    1a12:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1a16:	a5 2c       	mov	r10, r5
    1a18:	b1 2c       	mov	r11, r1
    1a1a:	c1 2c       	mov	r12, r1
    1a1c:	d1 2c       	mov	r13, r1
    1a1e:	e1 2c       	mov	r14, r1
    1a20:	f1 2c       	mov	r15, r1
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	10 e0       	ldi	r17, 0x00	; 0
    1a26:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1a2a:	a2 2e       	mov	r10, r18
    1a2c:	b3 2e       	mov	r11, r19
    1a2e:	c4 2e       	mov	r12, r20
    1a30:	d5 2e       	mov	r13, r21
    1a32:	e6 2e       	mov	r14, r22
    1a34:	f7 2e       	mov	r15, r23
    1a36:	e8 2f       	mov	r30, r24
    1a38:	19 2f       	mov	r17, r25
    1a3a:	04 e0       	ldi	r16, 0x04	; 4
    1a3c:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1a40:	0e 2f       	mov	r16, r30
    1a42:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1a46:	04 e0       	ldi	r16, 0x04	; 4
    1a48:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1a4c:	a2 2e       	mov	r10, r18
    1a4e:	b3 2e       	mov	r11, r19
    1a50:	c4 2e       	mov	r12, r20
    1a52:	d5 2e       	mov	r13, r21
    1a54:	e6 2e       	mov	r14, r22
    1a56:	f7 2e       	mov	r15, r23
    1a58:	08 2f       	mov	r16, r24
    1a5a:	19 2f       	mov	r17, r25
    1a5c:	26 2d       	mov	r18, r6
    1a5e:	37 2d       	mov	r19, r7
    1a60:	48 2d       	mov	r20, r8
    1a62:	59 2d       	mov	r21, r9
    1a64:	64 2d       	mov	r22, r4
    1a66:	7b 2f       	mov	r23, r27
    1a68:	8a 2f       	mov	r24, r26
    1a6a:	9f 2f       	mov	r25, r31
    1a6c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    1a70:	f2 2f       	mov	r31, r18
    1a72:	3d 87       	std	Y+13, r19	; 0x0d
    1a74:	4e 87       	std	Y+14, r20	; 0x0e
    1a76:	5f 87       	std	Y+15, r21	; 0x0f
    1a78:	68 8b       	std	Y+16, r22	; 0x10
    1a7a:	79 8b       	std	Y+17, r23	; 0x11
    1a7c:	8a 8b       	std	Y+18, r24	; 0x12
    1a7e:	9b 8b       	std	Y+19, r25	; 0x13
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1a80:	22 2d       	mov	r18, r2
    1a82:	33 2d       	mov	r19, r3
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	03 e0       	ldi	r16, 0x03	; 3
    1a92:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1a96:	e2 2f       	mov	r30, r18
    1a98:	3a 83       	std	Y+2, r19	; 0x02
    1a9a:	4f 8b       	std	Y+23, r20	; 0x17
    1a9c:	5c 8b       	std	Y+20, r21	; 0x14
    1a9e:	b6 2f       	mov	r27, r22
    1aa0:	a7 2f       	mov	r26, r23
    1aa2:	8d 8b       	std	Y+21, r24	; 0x15
    1aa4:	9e 8b       	std	Y+22, r25	; 0x16
    1aa6:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1aaa:	a2 2e       	mov	r10, r18
    1aac:	b3 2e       	mov	r11, r19
    1aae:	c4 2e       	mov	r12, r20
    1ab0:	d5 2e       	mov	r13, r21
    1ab2:	e6 2e       	mov	r14, r22
    1ab4:	f7 2e       	mov	r15, r23
    1ab6:	08 2f       	mov	r16, r24
    1ab8:	19 2f       	mov	r17, r25
    1aba:	2e 2f       	mov	r18, r30
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	4f 89       	ldd	r20, Y+23	; 0x17
    1ac0:	5c 89       	ldd	r21, Y+20	; 0x14
    1ac2:	6b 2f       	mov	r22, r27
    1ac4:	7a 2f       	mov	r23, r26
    1ac6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    1aca:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    1ace:	a2 2c       	mov	r10, r2
    1ad0:	b3 2c       	mov	r11, r3
    1ad2:	c1 2c       	mov	r12, r1
    1ad4:	d1 2c       	mov	r13, r1
    1ad6:	e1 2c       	mov	r14, r1
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    1ae2:	a2 2e       	mov	r10, r18
    1ae4:	b3 2e       	mov	r11, r19
    1ae6:	c4 2e       	mov	r12, r20
    1ae8:	d5 2e       	mov	r13, r21
    1aea:	e6 2e       	mov	r14, r22
    1aec:	f7 2e       	mov	r15, r23
    1aee:	e8 2f       	mov	r30, r24
    1af0:	19 2f       	mov	r17, r25
    1af2:	04 e0       	ldi	r16, 0x04	; 4
    1af4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1af8:	0e 2f       	mov	r16, r30
    1afa:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1afe:	a2 2e       	mov	r10, r18
    1b00:	b3 2e       	mov	r11, r19
    1b02:	c4 2e       	mov	r12, r20
    1b04:	d5 2e       	mov	r13, r21
    1b06:	e6 2e       	mov	r14, r22
    1b08:	f7 2e       	mov	r15, r23
    1b0a:	e8 2f       	mov	r30, r24
    1b0c:	19 2f       	mov	r17, r25
    1b0e:	04 e0       	ldi	r16, 0x04	; 4
    1b10:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1b14:	0e 2f       	mov	r16, r30
    1b16:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1b1a:	a2 2e       	mov	r10, r18
    1b1c:	b3 2e       	mov	r11, r19
    1b1e:	c4 2e       	mov	r12, r20
    1b20:	d5 2e       	mov	r13, r21
    1b22:	e6 2e       	mov	r14, r22
    1b24:	f7 2e       	mov	r15, r23
    1b26:	e8 2f       	mov	r30, r24
    1b28:	19 2f       	mov	r17, r25
    1b2a:	04 e0       	ldi	r16, 0x04	; 4
    1b2c:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1b30:	0e 2f       	mov	r16, r30
    1b32:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1b36:	07 e0       	ldi	r16, 0x07	; 7
    1b38:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1b3c:	a2 2e       	mov	r10, r18
    1b3e:	b3 2e       	mov	r11, r19
    1b40:	c4 2e       	mov	r12, r20
    1b42:	d5 2e       	mov	r13, r21
    1b44:	e6 2e       	mov	r14, r22
    1b46:	f7 2e       	mov	r15, r23
    1b48:	08 2f       	mov	r16, r24
    1b4a:	19 2f       	mov	r17, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1b4c:	2f 2f       	mov	r18, r31
    1b4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b50:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b52:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b54:	68 89       	ldd	r22, Y+16	; 0x10
    1b56:	79 89       	ldd	r23, Y+17	; 0x11
    1b58:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b5c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    1b60:	72 2e       	mov	r7, r18
    1b62:	83 2e       	mov	r8, r19
    1b64:	94 2e       	mov	r9, r20
    1b66:	b5 2f       	mov	r27, r21
    1b68:	66 2e       	mov	r6, r22
    1b6a:	57 2e       	mov	r5, r23
    1b6c:	f8 2f       	mov	r31, r24
    1b6e:	e9 2f       	mov	r30, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1b70:	2b 81       	ldd	r18, Y+3	; 0x03
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	af ef       	ldi	r26, 0xFF	; 255
    1b82:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__adddi3_s8>
    1b86:	ac 80       	ldd	r10, Y+4	; 0x04
    1b88:	bd 80       	ldd	r11, Y+5	; 0x05
    1b8a:	ce 80       	ldd	r12, Y+6	; 0x06
    1b8c:	df 80       	ldd	r13, Y+7	; 0x07
    1b8e:	e8 84       	ldd	r14, Y+8	; 0x08
    1b90:	f9 84       	ldd	r15, Y+9	; 0x09
    1b92:	0a 85       	ldd	r16, Y+10	; 0x0a
    1b94:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b96:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
    1b9a:	a2 2e       	mov	r10, r18
    1b9c:	b3 2e       	mov	r11, r19
    1b9e:	c4 2e       	mov	r12, r20
    1ba0:	d5 2e       	mov	r13, r21
    1ba2:	e6 2e       	mov	r14, r22
    1ba4:	f7 2e       	mov	r15, r23
    1ba6:	a8 2f       	mov	r26, r24
    1ba8:	19 2f       	mov	r17, r25
    1baa:	02 e0       	ldi	r16, 0x02	; 2
    1bac:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1bb0:	0a 2f       	mov	r16, r26
    1bb2:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1bb6:	a2 2e       	mov	r10, r18
    1bb8:	b3 2e       	mov	r11, r19
    1bba:	c4 2e       	mov	r12, r20
    1bbc:	d5 2e       	mov	r13, r21
    1bbe:	e6 2e       	mov	r14, r22
    1bc0:	f7 2e       	mov	r15, r23
    1bc2:	a8 2f       	mov	r26, r24
    1bc4:	19 2f       	mov	r17, r25
    1bc6:	04 e0       	ldi	r16, 0x04	; 4
    1bc8:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1bcc:	0a 2f       	mov	r16, r26
    1bce:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1bd2:	a2 2e       	mov	r10, r18
    1bd4:	b3 2e       	mov	r11, r19
    1bd6:	c4 2e       	mov	r12, r20
    1bd8:	d5 2e       	mov	r13, r21
    1bda:	e6 2e       	mov	r14, r22
    1bdc:	f7 2e       	mov	r15, r23
    1bde:	a8 2f       	mov	r26, r24
    1be0:	19 2f       	mov	r17, r25
    1be2:	04 e0       	ldi	r16, 0x04	; 4
    1be4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1be8:	0a 2f       	mov	r16, r26
    1bea:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1bee:	07 e0       	ldi	r16, 0x07	; 7
    1bf0:	0e 94 99 36 	call	0x6d32	; 0x6d32 <__ashldi3>
    1bf4:	a2 2e       	mov	r10, r18
    1bf6:	b3 2e       	mov	r11, r19
    1bf8:	c4 2e       	mov	r12, r20
    1bfa:	d5 2e       	mov	r13, r21
    1bfc:	e6 2e       	mov	r14, r22
    1bfe:	f7 2e       	mov	r15, r23
    1c00:	08 2f       	mov	r16, r24
    1c02:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1c04:	27 2d       	mov	r18, r7
    1c06:	38 2d       	mov	r19, r8
    1c08:	49 2d       	mov	r20, r9
    1c0a:	5b 2f       	mov	r21, r27
    1c0c:	66 2d       	mov	r22, r6
    1c0e:	75 2d       	mov	r23, r5
    1c10:	8f 2f       	mov	r24, r31
    1c12:	9e 2f       	mov	r25, r30
    1c14:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__adddi3>
  return now;
}
    1c18:	67 96       	adiw	r28, 0x17	; 23
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	7f 90       	pop	r7
    1c3e:	6f 90       	pop	r6
    1c40:	5f 90       	pop	r5
    1c42:	4f 90       	pop	r4
    1c44:	3f 90       	pop	r3
    1c46:	2f 90       	pop	r2
    1c48:	08 95       	ret

00001c4a <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1c5e:	e1 2c       	mov	r14, r1
    1c60:	0e e1       	ldi	r16, 0x1E	; 30
    1c62:	24 e0       	ldi	r18, 0x04	; 4
    1c64:	44 e1       	ldi	r20, 0x14	; 20
    1c66:	63 e0       	ldi	r22, 0x03	; 3
    1c68:	80 ee       	ldi	r24, 0xE0	; 224
    1c6a:	97 e0       	ldi	r25, 0x07	; 7
    1c6c:	58 de       	rcall	.-848    	; 0x191e <get_seconds_since_pivot>
    1c6e:	a2 2e       	mov	r10, r18
    1c70:	b3 2e       	mov	r11, r19
    1c72:	c4 2e       	mov	r12, r20
    1c74:	d5 2e       	mov	r13, r21
    1c76:	d6 2f       	mov	r29, r22
    1c78:	f7 2e       	mov	r15, r23
    1c7a:	c8 2f       	mov	r28, r24
    1c7c:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1c7e:	80 91 d6 04 	lds	r24, 0x04D6
    1c82:	90 91 d7 04 	lds	r25, 0x04D7
    1c86:	e0 90 d3 04 	lds	r14, 0x04D3
    1c8a:	00 91 d2 04 	lds	r16, 0x04D2
    1c8e:	20 91 d1 04 	lds	r18, 0x04D1
    1c92:	40 91 d4 04 	lds	r20, 0x04D4
    1c96:	60 91 d5 04 	lds	r22, 0x04D5
    1c9a:	41 de       	rcall	.-894    	; 0x191e <get_seconds_since_pivot>
    1c9c:	20 93 8a 04 	sts	0x048A, r18
    1ca0:	30 93 8b 04 	sts	0x048B, r19
    1ca4:	40 93 8c 04 	sts	0x048C, r20
    1ca8:	50 93 8d 04 	sts	0x048D, r21
    1cac:	60 93 8e 04 	sts	0x048E, r22
    1cb0:	70 93 8f 04 	sts	0x048F, r23
    1cb4:	80 93 90 04 	sts	0x0490, r24
    1cb8:	90 93 91 04 	sts	0x0491, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1cbc:	ed 2e       	mov	r14, r29
    1cbe:	0c 2f       	mov	r16, r28
    1cc0:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__subdi3>
    1cc4:	20 93 92 04 	sts	0x0492, r18
    1cc8:	30 93 93 04 	sts	0x0493, r19
    1ccc:	40 93 94 04 	sts	0x0494, r20
    1cd0:	50 93 95 04 	sts	0x0495, r21
    1cd4:	60 93 96 04 	sts	0x0496, r22
    1cd8:	70 93 97 04 	sts	0x0497, r23
    1cdc:	80 93 98 04 	sts	0x0498, r24
    1ce0:	90 93 99 04 	sts	0x0499, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	08 95       	ret

00001cfa <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	a4 97       	sbiw	r28, 0x24	; 36
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	8c 01       	movw	r16, r24
    1d28:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1d2a:	20 91 92 04 	lds	r18, 0x0492
    1d2e:	30 91 93 04 	lds	r19, 0x0493
    1d32:	40 91 94 04 	lds	r20, 0x0494
    1d36:	50 91 95 04 	lds	r21, 0x0495
    1d3a:	60 91 96 04 	lds	r22, 0x0496
    1d3e:	70 91 97 04 	lds	r23, 0x0497
    1d42:	80 91 98 04 	lds	r24, 0x0498
    1d46:	90 91 99 04 	lds	r25, 0x0499
    1d4a:	0e 94 3b 33 	call	0x6676	; 0x6676 <__floatundisf>
    1d4e:	27 eb       	ldi	r18, 0xB7	; 183
    1d50:	39 e5       	ldi	r19, 0x59	; 89
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1d5a:	2e eb       	ldi	r18, 0xBE	; 190
    1d5c:	37 ef       	ldi	r19, 0xF7	; 247
    1d5e:	48 e9       	ldi	r20, 0x98	; 152
    1d60:	58 e3       	ldi	r21, 0x38	; 56
    1d62:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    1d66:	2b 01       	movw	r4, r22
    1d68:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d6a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    1d6e:	6b 01       	movw	r12, r22
    1d70:	7c 01       	movw	r14, r24
    1d72:	69 83       	std	Y+1, r22	; 0x01
    1d74:	7a 83       	std	Y+2, r23	; 0x02
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	c3 01       	movw	r24, r6
    1d7c:	b2 01       	movw	r22, r4
    1d7e:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    1d82:	6d 83       	std	Y+5, r22	; 0x05
    1d84:	7e 83       	std	Y+6, r23	; 0x06
    1d86:	8f 83       	std	Y+7, r24	; 0x07
    1d88:	98 87       	std	Y+8, r25	; 0x08
    1d8a:	19 86       	std	Y+9, r1	; 0x09
    1d8c:	1a 86       	std	Y+10, r1	; 0x0a
    1d8e:	1b 86       	std	Y+11, r1	; 0x0b
    1d90:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	b0 58       	subi	r27, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d98:	8d 87       	std	Y+13, r24	; 0x0d
    1d9a:	9e 87       	std	Y+14, r25	; 0x0e
    1d9c:	af 87       	std	Y+15, r26	; 0x0f
    1d9e:	b8 8b       	std	Y+16, r27	; 0x10
    1da0:	c9 8a       	std	Y+17, r12	; 0x11
    1da2:	da 8a       	std	Y+18, r13	; 0x12
    1da4:	eb 8a       	std	Y+19, r14	; 0x13
    1da6:	fc 8a       	std	Y+20, r15	; 0x14
    1da8:	1d 8a       	std	Y+21, r1	; 0x15
    1daa:	1e 8a       	std	Y+22, r1	; 0x16
    1dac:	1f 8a       	std	Y+23, r1	; 0x17
    1dae:	18 8e       	std	Y+24, r1	; 0x18
    1db0:	19 8e       	std	Y+25, r1	; 0x19
    1db2:	1a 8e       	std	Y+26, r1	; 0x1a
    1db4:	1b 8e       	std	Y+27, r1	; 0x1b
    1db6:	1c 8e       	std	Y+28, r1	; 0x1c
    1db8:	1d 8e       	std	Y+29, r1	; 0x1d
    1dba:	1e 8e       	std	Y+30, r1	; 0x1e
    1dbc:	1f 8e       	std	Y+31, r1	; 0x1f
    1dbe:	18 a2       	std	Y+32, r1	; 0x20
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e8       	ldi	r26, 0x80	; 128
    1dc6:	bf e3       	ldi	r27, 0x3F	; 63
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	ab a3       	std	Y+35, r26	; 0x23
    1dce:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1dd0:	a5 01       	movw	r20, r10
    1dd2:	be 01       	movw	r22, r28
    1dd4:	6f 5f       	subi	r22, 0xFF	; 255
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	c8 01       	movw	r24, r16
    1dda:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1dde:	a4 96       	adiw	r28, 0x24	; 36
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	08 95       	ret

00001e08 <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1e08:	4f 92       	push	r4
    1e0a:	5f 92       	push	r5
    1e0c:	6f 92       	push	r6
    1e0e:	7f 92       	push	r7
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	a4 97       	sbiw	r28, 0x24	; 36
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	8c 01       	movw	r16, r24
    1e36:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1e38:	20 91 92 04 	lds	r18, 0x0492
    1e3c:	30 91 93 04 	lds	r19, 0x0493
    1e40:	40 91 94 04 	lds	r20, 0x0494
    1e44:	50 91 95 04 	lds	r21, 0x0495
    1e48:	60 91 96 04 	lds	r22, 0x0496
    1e4c:	70 91 97 04 	lds	r23, 0x0497
    1e50:	80 91 98 04 	lds	r24, 0x0498
    1e54:	90 91 99 04 	lds	r25, 0x0499
    1e58:	0e 94 3b 33 	call	0x6676	; 0x6676 <__floatundisf>
    1e5c:	27 eb       	ldi	r18, 0xB7	; 183
    1e5e:	39 e5       	ldi	r19, 0x59	; 89
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1e68:	2e eb       	ldi	r18, 0xBE	; 190
    1e6a:	37 ef       	ldi	r19, 0xF7	; 247
    1e6c:	48 e9       	ldi	r20, 0x98	; 152
    1e6e:	58 e3       	ldi	r21, 0x38	; 56
    1e70:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    1e74:	2b 01       	movw	r4, r22
    1e76:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1e78:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    1e7c:	6b 01       	movw	r12, r22
    1e7e:	7c 01       	movw	r14, r24
    1e80:	69 83       	std	Y+1, r22	; 0x01
    1e82:	7a 83       	std	Y+2, r23	; 0x02
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	9c 83       	std	Y+4, r25	; 0x04
    1e88:	c3 01       	movw	r24, r6
    1e8a:	b2 01       	movw	r22, r4
    1e8c:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    1e90:	2b 01       	movw	r4, r22
    1e92:	3c 01       	movw	r6, r24
    1e94:	77 fa       	bst	r7, 7
    1e96:	70 94       	com	r7
    1e98:	77 f8       	bld	r7, 7
    1e9a:	70 94       	com	r7
    1e9c:	4d 82       	std	Y+5, r4	; 0x05
    1e9e:	5e 82       	std	Y+6, r5	; 0x06
    1ea0:	6f 82       	std	Y+7, r6	; 0x07
    1ea2:	78 86       	std	Y+8, r7	; 0x08
    1ea4:	19 86       	std	Y+9, r1	; 0x09
    1ea6:	1a 86       	std	Y+10, r1	; 0x0a
    1ea8:	1b 86       	std	Y+11, r1	; 0x0b
    1eaa:	1c 86       	std	Y+12, r1	; 0x0c
    1eac:	6d 87       	std	Y+13, r22	; 0x0d
    1eae:	7e 87       	std	Y+14, r23	; 0x0e
    1eb0:	8f 87       	std	Y+15, r24	; 0x0f
    1eb2:	98 8b       	std	Y+16, r25	; 0x10
    1eb4:	c9 8a       	std	Y+17, r12	; 0x11
    1eb6:	da 8a       	std	Y+18, r13	; 0x12
    1eb8:	eb 8a       	std	Y+19, r14	; 0x13
    1eba:	fc 8a       	std	Y+20, r15	; 0x14
    1ebc:	1d 8a       	std	Y+21, r1	; 0x15
    1ebe:	1e 8a       	std	Y+22, r1	; 0x16
    1ec0:	1f 8a       	std	Y+23, r1	; 0x17
    1ec2:	18 8e       	std	Y+24, r1	; 0x18
    1ec4:	19 8e       	std	Y+25, r1	; 0x19
    1ec6:	1a 8e       	std	Y+26, r1	; 0x1a
    1ec8:	1b 8e       	std	Y+27, r1	; 0x1b
    1eca:	1c 8e       	std	Y+28, r1	; 0x1c
    1ecc:	1d 8e       	std	Y+29, r1	; 0x1d
    1ece:	1e 8e       	std	Y+30, r1	; 0x1e
    1ed0:	1f 8e       	std	Y+31, r1	; 0x1f
    1ed2:	18 a2       	std	Y+32, r1	; 0x20
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	89 a3       	std	Y+33, r24	; 0x21
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	ab a3       	std	Y+35, r26	; 0x23
    1ee2:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1ee4:	a5 01       	movw	r20, r10
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	c8 01       	movw	r24, r16
    1eee:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <vector_into_matrix>
}
    1ef2:	a4 96       	adiw	r28, 0x24	; 36
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	7f 90       	pop	r7
    1f14:	6f 90       	pop	r6
    1f16:	5f 90       	pop	r5
    1f18:	4f 90       	pop	r4
    1f1a:	08 95       	ret

00001f1c <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	c8 54       	subi	r28, 0x48	; 72
    1f32:	d1 09       	sbc	r29, r1
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	8c 01       	movw	r16, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	6a 01       	movw	r12, r20
    1f44:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1f46:	ae 01       	movw	r20, r28
    1f48:	43 5f       	subi	r20, 0xF3	; 243
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <vector_cross_product>
  convert_unit_vector(v_o_y);
    1f52:	ce 01       	movw	r24, r28
    1f54:	0d 96       	adiw	r24, 0x0d	; 13
    1f56:	0e 94 04 20 	call	0x4008	; 0x4008 <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	a2 81       	ldd	r26, Z+2	; 0x02
    1f62:	b3 81       	ldd	r27, Z+3	; 0x03
    1f64:	b0 58       	subi	r27, 0x80	; 128
    1f66:	89 8f       	std	Y+25, r24	; 0x19
    1f68:	9a 8f       	std	Y+26, r25	; 0x1a
    1f6a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f6c:	bc 8f       	std	Y+28, r27	; 0x1c
    1f6e:	44 81       	ldd	r20, Z+4	; 0x04
    1f70:	55 81       	ldd	r21, Z+5	; 0x05
    1f72:	66 81       	ldd	r22, Z+6	; 0x06
    1f74:	77 81       	ldd	r23, Z+7	; 0x07
    1f76:	70 58       	subi	r23, 0x80	; 128
    1f78:	4d 8f       	std	Y+29, r20	; 0x1d
    1f7a:	5e 8f       	std	Y+30, r21	; 0x1e
    1f7c:	6f 8f       	std	Y+31, r22	; 0x1f
    1f7e:	78 a3       	std	Y+32, r23	; 0x20
    1f80:	80 85       	ldd	r24, Z+8	; 0x08
    1f82:	91 85       	ldd	r25, Z+9	; 0x09
    1f84:	a2 85       	ldd	r26, Z+10	; 0x0a
    1f86:	b3 85       	ldd	r27, Z+11	; 0x0b
    1f88:	b0 58       	subi	r27, 0x80	; 128
    1f8a:	89 a3       	std	Y+33, r24	; 0x21
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	ab a3       	std	Y+35, r26	; 0x23
    1f90:	bc a3       	std	Y+36, r27	; 0x24
  convert_unit_vector(v_o_z);
    1f92:	ce 01       	movw	r24, r28
    1f94:	49 96       	adiw	r24, 0x19	; 25
    1f96:	0e 94 04 20 	call	0x4008	; 0x4008 <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1f9a:	ae 01       	movw	r20, r28
    1f9c:	4f 5f       	subi	r20, 0xFF	; 255
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	be 01       	movw	r22, r28
    1fa2:	67 5e       	subi	r22, 0xE7	; 231
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	0d 96       	adiw	r24, 0x0d	; 13
    1faa:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <vector_cross_product>
  convert_unit_vector(v_o_x);
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 04 20 	call	0x4008	; 0x4008 <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	ab 81       	ldd	r26, Y+3	; 0x03
    1fbc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fbe:	8d a3       	std	Y+37, r24	; 0x25
    1fc0:	9e a3       	std	Y+38, r25	; 0x26
    1fc2:	af a3       	std	Y+39, r26	; 0x27
    1fc4:	b8 a7       	std	Y+40, r27	; 0x28
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	af 85       	ldd	r26, Y+15	; 0x0f
    1fcc:	b8 89       	ldd	r27, Y+16	; 0x10
    1fce:	89 a7       	std	Y+41, r24	; 0x29
    1fd0:	9a a7       	std	Y+42, r25	; 0x2a
    1fd2:	ab a7       	std	Y+43, r26	; 0x2b
    1fd4:	bc a7       	std	Y+44, r27	; 0x2c
    1fd6:	89 8d       	ldd	r24, Y+25	; 0x19
    1fd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fda:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1fdc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1fde:	8d a7       	std	Y+45, r24	; 0x2d
    1fe0:	9e a7       	std	Y+46, r25	; 0x2e
    1fe2:	af a7       	std	Y+47, r26	; 0x2f
    1fe4:	b8 ab       	std	Y+48, r27	; 0x30
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	af 81       	ldd	r26, Y+7	; 0x07
    1fec:	b8 85       	ldd	r27, Y+8	; 0x08
    1fee:	89 ab       	std	Y+49, r24	; 0x31
    1ff0:	9a ab       	std	Y+50, r25	; 0x32
    1ff2:	ab ab       	std	Y+51, r26	; 0x33
    1ff4:	bc ab       	std	Y+52, r27	; 0x34
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffa:	ab 89       	ldd	r26, Y+19	; 0x13
    1ffc:	bc 89       	ldd	r27, Y+20	; 0x14
    1ffe:	8d ab       	std	Y+53, r24	; 0x35
    2000:	9e ab       	std	Y+54, r25	; 0x36
    2002:	af ab       	std	Y+55, r26	; 0x37
    2004:	b8 af       	std	Y+56, r27	; 0x38
    2006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    200a:	af 8d       	ldd	r26, Y+31	; 0x1f
    200c:	b8 a1       	ldd	r27, Y+32	; 0x20
    200e:	89 af       	std	Y+57, r24	; 0x39
    2010:	9a af       	std	Y+58, r25	; 0x3a
    2012:	ab af       	std	Y+59, r26	; 0x3b
    2014:	bc af       	std	Y+60, r27	; 0x3c
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	ab 85       	ldd	r26, Y+11	; 0x0b
    201c:	bc 85       	ldd	r27, Y+12	; 0x0c
    201e:	21 96       	adiw	r28, 0x01	; 1
    2020:	8c af       	std	Y+60, r24	; 0x3c
    2022:	9d af       	std	Y+61, r25	; 0x3d
    2024:	ae af       	std	Y+62, r26	; 0x3e
    2026:	bf af       	std	Y+63, r27	; 0x3f
    2028:	21 97       	sbiw	r28, 0x01	; 1
    202a:	8d 89       	ldd	r24, Y+21	; 0x15
    202c:	9e 89       	ldd	r25, Y+22	; 0x16
    202e:	af 89       	ldd	r26, Y+23	; 0x17
    2030:	b8 8d       	ldd	r27, Y+24	; 0x18
    2032:	25 96       	adiw	r28, 0x05	; 5
    2034:	8c af       	std	Y+60, r24	; 0x3c
    2036:	9d af       	std	Y+61, r25	; 0x3d
    2038:	ae af       	std	Y+62, r26	; 0x3e
    203a:	bf af       	std	Y+63, r27	; 0x3f
    203c:	25 97       	sbiw	r28, 0x05	; 5
    203e:	09 a1       	ldd	r16, Y+33	; 0x21
    2040:	1a a1       	ldd	r17, Y+34	; 0x22
    2042:	2b a1       	ldd	r18, Y+35	; 0x23
    2044:	3c a1       	ldd	r19, Y+36	; 0x24
    2046:	29 96       	adiw	r28, 0x09	; 9
    2048:	0c af       	std	Y+60, r16	; 0x3c
    204a:	1d af       	std	Y+61, r17	; 0x3d
    204c:	2e af       	std	Y+62, r18	; 0x3e
    204e:	3f af       	std	Y+63, r19	; 0x3f
    2050:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    2052:	a7 01       	movw	r20, r14
    2054:	be 01       	movw	r22, r28
    2056:	6b 5d       	subi	r22, 0xDB	; 219
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	c6 01       	movw	r24, r12
    205c:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <vector_into_matrix>
}
    2060:	c8 5b       	subi	r28, 0xB8	; 184
    2062:	df 4f       	sbci	r29, 0xFF	; 255
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	08 95       	ret

00002080 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    2080:	2f 92       	push	r2
    2082:	3f 92       	push	r3
    2084:	4f 92       	push	r4
    2086:	5f 92       	push	r5
    2088:	6f 92       	push	r6
    208a:	7f 92       	push	r7
    208c:	8f 92       	push	r8
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	2c 97       	sbiw	r28, 0x0c	; 12
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    20b4:	dc 01       	movw	r26, r24
    20b6:	8d 90       	ld	r8, X+
    20b8:	9d 90       	ld	r9, X+
    20ba:	ad 90       	ld	r10, X+
    20bc:	bc 90       	ld	r11, X
    20be:	13 97       	sbiw	r26, 0x03	; 3
    20c0:	14 96       	adiw	r26, 0x04	; 4
    20c2:	cd 90       	ld	r12, X+
    20c4:	dd 90       	ld	r13, X+
    20c6:	ed 90       	ld	r14, X+
    20c8:	fc 90       	ld	r15, X
    20ca:	17 97       	sbiw	r26, 0x07	; 7
    20cc:	18 96       	adiw	r26, 0x08	; 8
    20ce:	8d 91       	ld	r24, X+
    20d0:	9d 91       	ld	r25, X+
    20d2:	0d 90       	ld	r0, X+
    20d4:	bc 91       	ld	r27, X
    20d6:	a0 2d       	mov	r26, r0
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	ab 83       	std	Y+3, r26	; 0x03
    20de:	bc 83       	std	Y+4, r27	; 0x04
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    20e0:	a5 01       	movw	r20, r10
    20e2:	94 01       	movw	r18, r8
    20e4:	c7 01       	movw	r24, r14
    20e6:	b6 01       	movw	r22, r12
    20e8:	0e 94 0b 32 	call	0x6416	; 0x6416 <atan2>
    20ec:	69 87       	std	Y+9, r22	; 0x09
    20ee:	7a 87       	std	Y+10, r23	; 0x0a
    20f0:	8b 87       	std	Y+11, r24	; 0x0b
    20f2:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    20f4:	a5 01       	movw	r20, r10
    20f6:	94 01       	movw	r18, r8
    20f8:	c5 01       	movw	r24, r10
    20fa:	b4 01       	movw	r22, r8
    20fc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2100:	4b 01       	movw	r8, r22
    2102:	5c 01       	movw	r10, r24
    2104:	a7 01       	movw	r20, r14
    2106:	96 01       	movw	r18, r12
    2108:	c7 01       	movw	r24, r14
    210a:	b6 01       	movw	r22, r12
    210c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2110:	9b 01       	movw	r18, r22
    2112:	ac 01       	movw	r20, r24
    2114:	c5 01       	movw	r24, r10
    2116:	b4 01       	movw	r22, r8
    2118:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    211c:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    2120:	2b 01       	movw	r4, r22
    2122:	3c 01       	movw	r6, r24
  
  beta = atan2(z, (1 - F) * rho);
    2124:	25 e4       	ldi	r18, 0x45	; 69
    2126:	34 e2       	ldi	r19, 0x24	; 36
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	69 81       	ldd	r22, Y+1	; 0x01
    2136:	7a 81       	ldd	r23, Y+2	; 0x02
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	0e 94 0b 32 	call	0x6416	; 0x6416 <atan2>
    2140:	6b 01       	movw	r12, r22
    2142:	7c 01       	movw	r14, r24
    2144:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    2146:	c7 01       	movw	r24, r14
    2148:	b6 01       	movw	r22, r12
    214a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e4       	ldi	r20, 0x40	; 64
    2154:	50 e4       	ldi	r21, 0x40	; 64
    2156:	0e 94 e6 34 	call	0x69cc	; 0x69cc <pow>
    215a:	4b 01       	movw	r8, r22
    215c:	5c 01       	movw	r10, r24
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e4       	ldi	r20, 0x40	; 64
    216c:	50 e4       	ldi	r21, 0x40	; 64
    216e:	0e 94 e6 34 	call	0x69cc	; 0x69cc <pow>
    2172:	6b 01       	movw	r12, r22
    2174:	7c 01       	movw	r14, r24
    2176:	2e ea       	ldi	r18, 0xAE	; 174
    2178:	39 ec       	ldi	r19, 0xC9	; 201
    217a:	46 e2       	ldi	r20, 0x26	; 38
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	c5 01       	movw	r24, r10
    2180:	b4 01       	movw	r22, r8
    2182:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	c3 01       	movw	r24, r6
    218c:	b2 01       	movw	r22, r4
    218e:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2192:	4b 01       	movw	r8, r22
    2194:	5c 01       	movw	r10, r24
    2196:	21 e5       	ldi	r18, 0x51	; 81
    2198:	39 e5       	ldi	r19, 0x59	; 89
    219a:	47 e2       	ldi	r20, 0x27	; 39
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	c7 01       	movw	r24, r14
    21a0:	b6 01       	movw	r22, r12
    21a2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    21a6:	29 81       	ldd	r18, Y+1	; 0x01
    21a8:	3a 81       	ldd	r19, Y+2	; 0x02
    21aa:	4b 81       	ldd	r20, Y+3	; 0x03
    21ac:	5c 81       	ldd	r21, Y+4	; 0x04
    21ae:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    21b2:	a5 01       	movw	r20, r10
    21b4:	94 01       	movw	r18, r8
    21b6:	0e 94 0b 32 	call	0x6416	; 0x6416 <atan2>
    21ba:	4b 01       	movw	r8, r22
    21bc:	5c 01       	movw	r10, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    21be:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    21c2:	6b 01       	movw	r12, r22
    21c4:	7c 01       	movw	r14, r24
    21c6:	c5 01       	movw	r24, r10
    21c8:	b4 01       	movw	r22, r8
    21ca:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    21ce:	25 e4       	ldi	r18, 0x45	; 69
    21d0:	34 e2       	ldi	r19, 0x24	; 36
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    21da:	a7 01       	movw	r20, r14
    21dc:	96 01       	movw	r18, r12
    21de:	0e 94 0b 32 	call	0x6416	; 0x6416 <atan2>
    21e2:	6b 01       	movw	r12, r22
    21e4:	7c 01       	movw	r14, r24
    21e6:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    21e8:	09 f0       	breq	.+2      	; 0x21ec <ecef2lla+0x16c>
    21ea:	ad cf       	rjmp	.-166    	; 0x2146 <ecef2lla+0xc6>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    21ec:	c5 01       	movw	r24, r10
    21ee:	b4 01       	movw	r22, r8
    21f0:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    21f4:	6b 01       	movw	r12, r22
    21f6:	7c 01       	movw	r14, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    21f8:	2a e8       	ldi	r18, 0x8A	; 138
    21fa:	3c e5       	ldi	r19, 0x5C	; 92
    21fc:	4b ed       	ldi	r20, 0xDB	; 219
    21fe:	5b e3       	ldi	r21, 0x3B	; 59
    2200:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2204:	a7 01       	movw	r20, r14
    2206:	96 01       	movw	r18, r12
    2208:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    220c:	9b 01       	movw	r18, r22
    220e:	ac 01       	movw	r20, r24
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	80 e8       	ldi	r24, 0x80	; 128
    2216:	9f e3       	ldi	r25, 0x3F	; 63
    2218:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    221c:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	62 e3       	ldi	r22, 0x32	; 50
    2226:	75 ea       	ldi	r23, 0xA5	; 165
    2228:	82 ec       	ldi	r24, 0xC2	; 194
    222a:	9a e4       	ldi	r25, 0x4A	; 74
    222c:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2230:	6d 83       	std	Y+5, r22	; 0x05
    2232:	7e 83       	std	Y+6, r23	; 0x06
    2234:	8f 83       	std	Y+7, r24	; 0x07
    2236:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2238:	c5 01       	movw	r24, r10
    223a:	b4 01       	movw	r22, r8
    223c:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
  
  v_lla[0] = phi;
    2240:	f1 01       	movw	r30, r2
    2242:	80 82       	st	Z, r8
    2244:	91 82       	std	Z+1, r9	; 0x01
    2246:	a2 82       	std	Z+2, r10	; 0x02
    2248:	b3 82       	std	Z+3, r11	; 0x03
  v_lla[1] = lambda;
    224a:	29 85       	ldd	r18, Y+9	; 0x09
    224c:	3a 85       	ldd	r19, Y+10	; 0x0a
    224e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2250:	5c 85       	ldd	r21, Y+12	; 0x0c
    2252:	24 83       	std	Z+4, r18	; 0x04
    2254:	35 83       	std	Z+5, r19	; 0x05
    2256:	46 83       	std	Z+6, r20	; 0x06
    2258:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    225a:	a3 01       	movw	r20, r6
    225c:	92 01       	movw	r18, r4
    225e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2262:	2b 01       	movw	r4, r22
    2264:	3c 01       	movw	r6, r24
    2266:	2a e8       	ldi	r18, 0x8A	; 138
    2268:	3c e5       	ldi	r19, 0x5C	; 92
    226a:	4b ed       	ldi	r20, 0xDB	; 219
    226c:	5b e3       	ldi	r21, 0x3B	; 59
    226e:	6d 81       	ldd	r22, Y+5	; 0x05
    2270:	7e 81       	ldd	r23, Y+6	; 0x06
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    227a:	a7 01       	movw	r20, r14
    227c:	96 01       	movw	r18, r12
    227e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2282:	29 81       	ldd	r18, Y+1	; 0x01
    2284:	3a 81       	ldd	r19, Y+2	; 0x02
    2286:	4b 81       	ldd	r20, Y+3	; 0x03
    2288:	5c 81       	ldd	r21, Y+4	; 0x04
    228a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    228e:	a7 01       	movw	r20, r14
    2290:	96 01       	movw	r18, r12
    2292:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	c3 01       	movw	r24, r6
    229c:	b2 01       	movw	r22, r4
    229e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    22a2:	2d 81       	ldd	r18, Y+5	; 0x05
    22a4:	3e 81       	ldd	r19, Y+6	; 0x06
    22a6:	4f 81       	ldd	r20, Y+7	; 0x07
    22a8:	58 85       	ldd	r21, Y+8	; 0x08
    22aa:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    22ae:	f1 01       	movw	r30, r2
    22b0:	60 87       	std	Z+8, r22	; 0x08
    22b2:	71 87       	std	Z+9, r23	; 0x09
    22b4:	82 87       	std	Z+10, r24	; 0x0a
    22b6:	93 87       	std	Z+11, r25	; 0x0b
   Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	44 e3       	ldi	r20, 0x34	; 52
    22be:	53 e4       	ldi	r21, 0x43	; 67
    22c0:	c5 01       	movw	r24, r10
    22c2:	b4 01       	movw	r22, r8
    22c4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    22c8:	28 ed       	ldi	r18, 0xD8	; 216
    22ca:	3f e0       	ldi	r19, 0x0F	; 15
    22cc:	49 e4       	ldi	r20, 0x49	; 73
    22ce:	50 e4       	ldi	r21, 0x40	; 64
    22d0:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	48 ec       	ldi	r20, 0xC8	; 200
    22da:	52 e4       	ldi	r21, 0x42	; 66
    22dc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    22e0:	0e 94 cd 32 	call	0x659a	; 0x659a <__fixsfsi>
    22e4:	60 93 c5 04 	sts	0x04C5, r22
    22e8:	70 93 c6 04 	sts	0x04C6, r23
    22ec:	80 93 c7 04 	sts	0x04C7, r24
    22f0:	90 93 c8 04 	sts	0x04C8, r25
   Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	44 e3       	ldi	r20, 0x34	; 52
    22fa:	53 e4       	ldi	r21, 0x43	; 67
    22fc:	d1 01       	movw	r26, r2
    22fe:	14 96       	adiw	r26, 0x04	; 4
    2300:	6d 91       	ld	r22, X+
    2302:	7d 91       	ld	r23, X+
    2304:	8d 91       	ld	r24, X+
    2306:	9c 91       	ld	r25, X
    2308:	17 97       	sbiw	r26, 0x07	; 7
    230a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    230e:	28 ed       	ldi	r18, 0xD8	; 216
    2310:	3f e0       	ldi	r19, 0x0F	; 15
    2312:	49 e4       	ldi	r20, 0x49	; 73
    2314:	50 e4       	ldi	r21, 0x40	; 64
    2316:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	48 ec       	ldi	r20, 0xC8	; 200
    2320:	52 e4       	ldi	r21, 0x42	; 66
    2322:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2326:	0e 94 cd 32 	call	0x659a	; 0x659a <__fixsfsi>
    232a:	60 93 c9 04 	sts	0x04C9, r22
    232e:	70 93 ca 04 	sts	0x04CA, r23
    2332:	80 93 cb 04 	sts	0x04CB, r24
    2336:	90 93 cc 04 	sts	0x04CC, r25
   Current_state.gps.alt=v_lla[2]; 
    233a:	f1 01       	movw	r30, r2
    233c:	60 85       	ldd	r22, Z+8	; 0x08
    233e:	71 85       	ldd	r23, Z+9	; 0x09
    2340:	82 85       	ldd	r24, Z+10	; 0x0a
    2342:	93 85       	ldd	r25, Z+11	; 0x0b
    2344:	0e 94 cd 32 	call	0x659a	; 0x659a <__fixsfsi>
    2348:	60 93 cd 04 	sts	0x04CD, r22
    234c:	70 93 ce 04 	sts	0x04CE, r23
    2350:	80 93 cf 04 	sts	0x04CF, r24
    2354:	90 93 d0 04 	sts	0x04D0, r25
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    2358:	2c 96       	adiw	r28, 0x0c	; 12
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	df 90       	pop	r13
    2370:	cf 90       	pop	r12
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	9f 90       	pop	r9
    2378:	8f 90       	pop	r8
    237a:	7f 90       	pop	r7
    237c:	6f 90       	pop	r6
    237e:	5f 90       	pop	r5
    2380:	4f 90       	pop	r4
    2382:	3f 90       	pop	r3
    2384:	2f 90       	pop	r2
    2386:	08 95       	ret

00002388 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    2388:	2f 92       	push	r2
    238a:	3f 92       	push	r3
    238c:	4f 92       	push	r4
    238e:	5f 92       	push	r5
    2390:	6f 92       	push	r6
    2392:	7f 92       	push	r7
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	af 92       	push	r10
    239a:	bf 92       	push	r11
    239c:	cf 92       	push	r12
    239e:	df 92       	push	r13
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	ac 97       	sbiw	r28, 0x2c	; 44
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	1c 01       	movw	r2, r24
    23be:	7b 01       	movw	r14, r22
    23c0:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    23c2:	db 01       	movw	r26, r22
    23c4:	4d 90       	ld	r4, X+
    23c6:	5d 90       	ld	r5, X+
    23c8:	6d 90       	ld	r6, X+
    23ca:	7c 90       	ld	r7, X
    23cc:	c3 01       	movw	r24, r6
    23ce:	b2 01       	movw	r22, r4
    23d0:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    23d4:	6d a3       	std	Y+37, r22	; 0x25
    23d6:	7e a3       	std	Y+38, r23	; 0x26
    23d8:	8f a3       	std	Y+39, r24	; 0x27
    23da:	98 a7       	std	Y+40, r25	; 0x28
    23dc:	f7 01       	movw	r30, r14
    23de:	c4 80       	ldd	r12, Z+4	; 0x04
    23e0:	d5 80       	ldd	r13, Z+5	; 0x05
    23e2:	e6 80       	ldd	r14, Z+6	; 0x06
    23e4:	f7 80       	ldd	r15, Z+7	; 0x07
    23e6:	c7 01       	movw	r24, r14
    23e8:	b6 01       	movw	r22, r12
    23ea:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    23ee:	4b 01       	movw	r8, r22
    23f0:	5c 01       	movw	r10, r24
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    23f2:	c3 01       	movw	r24, r6
    23f4:	b2 01       	movw	r22, r4
    23f6:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    23fa:	2b 01       	movw	r4, r22
    23fc:	3c 01       	movw	r6, r24
    23fe:	c7 01       	movw	r24, r14
    2400:	b6 01       	movw	r22, r12
    2402:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    2406:	6b 01       	movw	r12, r22
    2408:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    240a:	77 fa       	bst	r7, 7
    240c:	70 94       	com	r7
    240e:	77 f8       	bld	r7, 7
    2410:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	af a1       	ldd	r26, Y+39	; 0x27
    2418:	b8 a5       	ldd	r27, Y+40	; 0x28
    241a:	b0 58       	subi	r27, 0x80	; 128
    241c:	89 a7       	std	Y+41, r24	; 0x29
    241e:	9a a7       	std	Y+42, r25	; 0x2a
    2420:	ab a7       	std	Y+43, r26	; 0x2b
    2422:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2424:	a5 01       	movw	r20, r10
    2426:	94 01       	movw	r18, r8
    2428:	c3 01       	movw	r24, r6
    242a:	b2 01       	movw	r22, r4
    242c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2430:	69 83       	std	Y+1, r22	; 0x01
    2432:	7a 83       	std	Y+2, r23	; 0x02
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    2438:	a3 01       	movw	r20, r6
    243a:	92 01       	movw	r18, r4
    243c:	c7 01       	movw	r24, r14
    243e:	b6 01       	movw	r22, r12
    2440:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2444:	6d 83       	std	Y+5, r22	; 0x05
    2446:	7e 83       	std	Y+6, r23	; 0x06
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	8d a1       	ldd	r24, Y+37	; 0x25
    244e:	9e a1       	ldd	r25, Y+38	; 0x26
    2450:	af a1       	ldd	r26, Y+39	; 0x27
    2452:	b8 a5       	ldd	r27, Y+40	; 0x28
    2454:	89 87       	std	Y+9, r24	; 0x09
    2456:	9a 87       	std	Y+10, r25	; 0x0a
    2458:	ab 87       	std	Y+11, r26	; 0x0b
    245a:	bc 87       	std	Y+12, r27	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    245c:	d7 01       	movw	r26, r14
    245e:	c6 01       	movw	r24, r12
    2460:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2462:	8d 87       	std	Y+13, r24	; 0x0d
    2464:	9e 87       	std	Y+14, r25	; 0x0e
    2466:	af 87       	std	Y+15, r26	; 0x0f
    2468:	b8 8b       	std	Y+16, r27	; 0x10
    246a:	89 8a       	std	Y+17, r8	; 0x11
    246c:	9a 8a       	std	Y+18, r9	; 0x12
    246e:	ab 8a       	std	Y+19, r10	; 0x13
    2470:	bc 8a       	std	Y+20, r11	; 0x14
    2472:	1d 8a       	std	Y+21, r1	; 0x15
    2474:	1e 8a       	std	Y+22, r1	; 0x16
    2476:	1f 8a       	std	Y+23, r1	; 0x17
    2478:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    247a:	a5 01       	movw	r20, r10
    247c:	94 01       	movw	r18, r8
    247e:	69 a5       	ldd	r22, Y+41	; 0x29
    2480:	7a a5       	ldd	r23, Y+42	; 0x2a
    2482:	8b a5       	ldd	r24, Y+43	; 0x2b
    2484:	9c a5       	ldd	r25, Y+44	; 0x2c
    2486:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    248a:	69 8f       	std	Y+25, r22	; 0x19
    248c:	7a 8f       	std	Y+26, r23	; 0x1a
    248e:	8b 8f       	std	Y+27, r24	; 0x1b
    2490:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    2492:	29 a5       	ldd	r18, Y+41	; 0x29
    2494:	3a a5       	ldd	r19, Y+42	; 0x2a
    2496:	4b a5       	ldd	r20, Y+43	; 0x2b
    2498:	5c a5       	ldd	r21, Y+44	; 0x2c
    249a:	c7 01       	movw	r24, r14
    249c:	b6 01       	movw	r22, r12
    249e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    24a2:	6d 8f       	std	Y+29, r22	; 0x1d
    24a4:	7e 8f       	std	Y+30, r23	; 0x1e
    24a6:	8f 8f       	std	Y+31, r24	; 0x1f
    24a8:	98 a3       	std	Y+32, r25	; 0x20
    24aa:	49 a2       	std	Y+33, r4	; 0x21
    24ac:	5a a2       	std	Y+34, r5	; 0x22
    24ae:	6b a2       	std	Y+35, r6	; 0x23
    24b0:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    24b2:	a8 01       	movw	r20, r16
    24b4:	be 01       	movw	r22, r28
    24b6:	6f 5f       	subi	r22, 0xFF	; 255
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	c1 01       	movw	r24, r2
    24bc:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <vector_into_matrix>
}
    24c0:	ac 96       	adiw	r28, 0x2c	; 44
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	9f 90       	pop	r9
    24e2:	8f 90       	pop	r8
    24e4:	7f 90       	pop	r7
    24e6:	6f 90       	pop	r6
    24e8:	5f 90       	pop	r5
    24ea:	4f 90       	pop	r4
    24ec:	3f 90       	pop	r3
    24ee:	2f 90       	pop	r2
    24f0:	08 95       	ret

000024f2 <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    24f2:	1f 92       	push	r1
    24f4:	0f 92       	push	r0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	0b b6       	in	r0, 0x3b	; 59
    24fe:	0f 92       	push	r0
    2500:	2f 93       	push	r18
    2502:	8f 93       	push	r24
    2504:	9f 93       	push	r25
    2506:	af 93       	push	r26
    2508:	bf 93       	push	r27
    250a:	ef 93       	push	r30
    250c:	ff 93       	push	r31
  PORTA ^= 0xf0;
    250e:	9b b3       	in	r25, 0x1b	; 27
    2510:	80 ef       	ldi	r24, 0xF0	; 240
    2512:	89 27       	eor	r24, r25
    2514:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    2516:	8c b1       	in	r24, 0x0c	; 12
    2518:	80 93 fa 01 	sts	0x01FA, r24
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    251c:	80 91 fb 01 	lds	r24, 0x01FB
    2520:	90 91 fc 01 	lds	r25, 0x01FC
    2524:	a0 91 fd 01 	lds	r26, 0x01FD
    2528:	b0 91 fe 01 	lds	r27, 0x01FE
    252c:	ba 2f       	mov	r27, r26
    252e:	a9 2f       	mov	r26, r25
    2530:	98 2f       	mov	r25, r24
    2532:	88 27       	eor	r24, r24
    2534:	80 93 fb 01 	sts	0x01FB, r24
    2538:	90 93 fc 01 	sts	0x01FC, r25
    253c:	a0 93 fd 01 	sts	0x01FD, r26
    2540:	b0 93 fe 01 	sts	0x01FE, r27
  buffer &= 0xFFFFFF00;
    2544:	80 91 fb 01 	lds	r24, 0x01FB
    2548:	90 91 fc 01 	lds	r25, 0x01FC
    254c:	a0 91 fd 01 	lds	r26, 0x01FD
    2550:	b0 91 fe 01 	lds	r27, 0x01FE
    2554:	88 27       	eor	r24, r24
    2556:	80 93 fb 01 	sts	0x01FB, r24
    255a:	90 93 fc 01 	sts	0x01FC, r25
    255e:	a0 93 fd 01 	sts	0x01FD, r26
    2562:	b0 93 fe 01 	sts	0x01FE, r27
  buffer |= (uint32_t) last_byte;
    2566:	20 91 fa 01 	lds	r18, 0x01FA
    256a:	80 91 fb 01 	lds	r24, 0x01FB
    256e:	90 91 fc 01 	lds	r25, 0x01FC
    2572:	a0 91 fd 01 	lds	r26, 0x01FD
    2576:	b0 91 fe 01 	lds	r27, 0x01FE
    257a:	82 2b       	or	r24, r18
    257c:	80 93 fb 01 	sts	0x01FB, r24
    2580:	90 93 fc 01 	sts	0x01FC, r25
    2584:	a0 93 fd 01 	sts	0x01FD, r26
    2588:	b0 93 fe 01 	sts	0x01FE, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    258c:	80 91 11 01 	lds	r24, 0x0111
    2590:	8c 30       	cpi	r24, 0x0C	; 12
    2592:	08 f0       	brcs	.+2      	; 0x2596 <__vector_18+0xa4>
    2594:	86 c0       	rjmp	.+268    	; 0x26a2 <__vector_18+0x1b0>
  {
    
    if(pos<4)
    2596:	80 91 11 01 	lds	r24, 0x0111
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	28 f5       	brcc	.+74     	; 0x25e8 <__vector_18+0xf6>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    259e:	ed ea       	ldi	r30, 0xAD	; 173
    25a0:	f4 e0       	ldi	r31, 0x04	; 4
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	a2 81       	ldd	r26, Z+2	; 0x02
    25a8:	b3 81       	ldd	r27, Z+3	; 0x03
    25aa:	89 2f       	mov	r24, r25
    25ac:	9a 2f       	mov	r25, r26
    25ae:	ab 2f       	mov	r26, r27
    25b0:	bb 27       	eor	r27, r27
    25b2:	a7 fd       	sbrc	r26, 7
    25b4:	ba 95       	dec	r27
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	a2 81       	ldd	r26, Z+2	; 0x02
    25c4:	b3 81       	ldd	r27, Z+3	; 0x03
    25c6:	bb 27       	eor	r27, r27
    25c8:	80 83       	st	Z, r24
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	a2 83       	std	Z+2, r26	; 0x02
    25ce:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	a2 81       	ldd	r26, Z+2	; 0x02
    25d6:	b3 81       	ldd	r27, Z+3	; 0x03
    25d8:	20 91 fa 01 	lds	r18, 0x01FA
    25dc:	b2 2b       	or	r27, r18
    25de:	80 83       	st	Z, r24
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	a2 83       	std	Z+2, r26	; 0x02
    25e4:	b3 83       	std	Z+3, r27	; 0x03
    25e6:	51 c0       	rjmp	.+162    	; 0x268a <__vector_18+0x198>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    25e8:	80 91 11 01 	lds	r24, 0x0111
    25ec:	88 30       	cpi	r24, 0x08	; 8
    25ee:	28 f5       	brcc	.+74     	; 0x263a <__vector_18+0x148>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    25f0:	e1 eb       	ldi	r30, 0xB1	; 177
    25f2:	f4 e0       	ldi	r31, 0x04	; 4
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	a2 81       	ldd	r26, Z+2	; 0x02
    25fa:	b3 81       	ldd	r27, Z+3	; 0x03
    25fc:	89 2f       	mov	r24, r25
    25fe:	9a 2f       	mov	r25, r26
    2600:	ab 2f       	mov	r26, r27
    2602:	bb 27       	eor	r27, r27
    2604:	a7 fd       	sbrc	r26, 7
    2606:	ba 95       	dec	r27
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y &= 0x00FFFFFF;
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	a2 81       	ldd	r26, Z+2	; 0x02
    2616:	b3 81       	ldd	r27, Z+3	; 0x03
    2618:	bb 27       	eor	r27, r27
    261a:	80 83       	st	Z, r24
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	a2 83       	std	Z+2, r26	; 0x02
    2620:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	a2 81       	ldd	r26, Z+2	; 0x02
    2628:	b3 81       	ldd	r27, Z+3	; 0x03
    262a:	20 91 fa 01 	lds	r18, 0x01FA
    262e:	b2 2b       	or	r27, r18
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
    2638:	28 c0       	rjmp	.+80     	; 0x268a <__vector_18+0x198>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    263a:	80 91 11 01 	lds	r24, 0x0111
    263e:	8c 30       	cpi	r24, 0x0C	; 12
    2640:	20 f5       	brcc	.+72     	; 0x268a <__vector_18+0x198>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    2642:	e5 eb       	ldi	r30, 0xB5	; 181
    2644:	f4 e0       	ldi	r31, 0x04	; 4
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	a2 81       	ldd	r26, Z+2	; 0x02
    264c:	b3 81       	ldd	r27, Z+3	; 0x03
    264e:	89 2f       	mov	r24, r25
    2650:	9a 2f       	mov	r25, r26
    2652:	ab 2f       	mov	r26, r27
    2654:	bb 27       	eor	r27, r27
    2656:	a7 fd       	sbrc	r26, 7
    2658:	ba 95       	dec	r27
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	a2 83       	std	Z+2, r26	; 0x02
    2660:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z &= 0x00FFFFFF;
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	a2 81       	ldd	r26, Z+2	; 0x02
    2668:	b3 81       	ldd	r27, Z+3	; 0x03
    266a:	bb 27       	eor	r27, r27
    266c:	80 83       	st	Z, r24
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	a2 83       	std	Z+2, r26	; 0x02
    2672:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	a2 81       	ldd	r26, Z+2	; 0x02
    267a:	b3 81       	ldd	r27, Z+3	; 0x03
    267c:	20 91 fa 01 	lds	r18, 0x01FA
    2680:	b2 2b       	or	r27, r18
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    268a:	80 91 11 01 	lds	r24, 0x0111
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	80 93 11 01 	sts	0x0111, r24
    if(pos == 12)
    2694:	80 91 11 01 	lds	r24, 0x0111
    2698:	8c 30       	cpi	r24, 0x0C	; 12
    269a:	19 f4       	brne	.+6      	; 0x26a2 <__vector_18+0x1b0>
	{
      pos = 0xFF;
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	80 93 11 01 	sts	0x0111, r24
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    26a2:	80 91 10 01 	lds	r24, 0x0110
    26a6:	8c 30       	cpi	r24, 0x0C	; 12
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <__vector_18+0x1ba>
    26aa:	86 c0       	rjmp	.+268    	; 0x27b8 <__vector_18+0x2c6>
  {
	  
    if(vel < 4)
    26ac:	80 91 10 01 	lds	r24, 0x0110
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	28 f5       	brcc	.+74     	; 0x26fe <__vector_18+0x20c>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    26b4:	e9 eb       	ldi	r30, 0xB9	; 185
    26b6:	f4 e0       	ldi	r31, 0x04	; 4
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	a2 81       	ldd	r26, Z+2	; 0x02
    26be:	b3 81       	ldd	r27, Z+3	; 0x03
    26c0:	89 2f       	mov	r24, r25
    26c2:	9a 2f       	mov	r25, r26
    26c4:	ab 2f       	mov	r26, r27
    26c6:	bb 27       	eor	r27, r27
    26c8:	a7 fd       	sbrc	r26, 7
    26ca:	ba 95       	dec	r27
    26cc:	80 83       	st	Z, r24
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	a2 83       	std	Z+2, r26	; 0x02
    26d2:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_x &= 0x00FFFFFF;
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	a2 81       	ldd	r26, Z+2	; 0x02
    26da:	b3 81       	ldd	r27, Z+3	; 0x03
    26dc:	bb 27       	eor	r27, r27
    26de:	80 83       	st	Z, r24
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	a2 83       	std	Z+2, r26	; 0x02
    26e4:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	a2 81       	ldd	r26, Z+2	; 0x02
    26ec:	b3 81       	ldd	r27, Z+3	; 0x03
    26ee:	20 91 fa 01 	lds	r18, 0x01FA
    26f2:	b2 2b       	or	r27, r18
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
    26fc:	51 c0       	rjmp	.+162    	; 0x27a0 <__vector_18+0x2ae>
		
	}
	else if(vel < 8)
    26fe:	80 91 10 01 	lds	r24, 0x0110
    2702:	88 30       	cpi	r24, 0x08	; 8
    2704:	28 f5       	brcc	.+74     	; 0x2750 <__vector_18+0x25e>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    2706:	ed eb       	ldi	r30, 0xBD	; 189
    2708:	f4 e0       	ldi	r31, 0x04	; 4
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	a2 81       	ldd	r26, Z+2	; 0x02
    2710:	b3 81       	ldd	r27, Z+3	; 0x03
    2712:	89 2f       	mov	r24, r25
    2714:	9a 2f       	mov	r25, r26
    2716:	ab 2f       	mov	r26, r27
    2718:	bb 27       	eor	r27, r27
    271a:	a7 fd       	sbrc	r26, 7
    271c:	ba 95       	dec	r27
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_y &= 0x00FFFFFF;
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	a2 81       	ldd	r26, Z+2	; 0x02
    272c:	b3 81       	ldd	r27, Z+3	; 0x03
    272e:	bb 27       	eor	r27, r27
    2730:	80 83       	st	Z, r24
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	a2 83       	std	Z+2, r26	; 0x02
    2736:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	a2 81       	ldd	r26, Z+2	; 0x02
    273e:	b3 81       	ldd	r27, Z+3	; 0x03
    2740:	20 91 fa 01 	lds	r18, 0x01FA
    2744:	b2 2b       	or	r27, r18
    2746:	80 83       	st	Z, r24
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	a2 83       	std	Z+2, r26	; 0x02
    274c:	b3 83       	std	Z+3, r27	; 0x03
    274e:	28 c0       	rjmp	.+80     	; 0x27a0 <__vector_18+0x2ae>
	}
	else if(vel < 12)
    2750:	80 91 10 01 	lds	r24, 0x0110
    2754:	8c 30       	cpi	r24, 0x0C	; 12
    2756:	20 f5       	brcc	.+72     	; 0x27a0 <__vector_18+0x2ae>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    2758:	e1 ec       	ldi	r30, 0xC1	; 193
    275a:	f4 e0       	ldi	r31, 0x04	; 4
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	a2 81       	ldd	r26, Z+2	; 0x02
    2762:	b3 81       	ldd	r27, Z+3	; 0x03
    2764:	89 2f       	mov	r24, r25
    2766:	9a 2f       	mov	r25, r26
    2768:	ab 2f       	mov	r26, r27
    276a:	bb 27       	eor	r27, r27
    276c:	a7 fd       	sbrc	r26, 7
    276e:	ba 95       	dec	r27
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_z &= 0x00FFFFFF;
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	a2 81       	ldd	r26, Z+2	; 0x02
    277e:	b3 81       	ldd	r27, Z+3	; 0x03
    2780:	bb 27       	eor	r27, r27
    2782:	80 83       	st	Z, r24
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	a2 83       	std	Z+2, r26	; 0x02
    2788:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	a2 81       	ldd	r26, Z+2	; 0x02
    2790:	b3 81       	ldd	r27, Z+3	; 0x03
    2792:	20 91 fa 01 	lds	r18, 0x01FA
    2796:	b2 2b       	or	r27, r18
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	a2 83       	std	Z+2, r26	; 0x02
    279e:	b3 83       	std	Z+3, r27	; 0x03
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    27a0:	80 91 10 01 	lds	r24, 0x0110
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 93 10 01 	sts	0x0110, r24
    if(vel == 12)
    27aa:	80 91 10 01 	lds	r24, 0x0110
    27ae:	8c 30       	cpi	r24, 0x0C	; 12
    27b0:	19 f4       	brne	.+6      	; 0x27b8 <__vector_18+0x2c6>
     {
		  vel = 0xFF;
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	80 93 10 01 	sts	0x0110, r24

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    27b8:	80 91 0f 01 	lds	r24, 0x010F
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	20 f5       	brcc	.+72     	; 0x2808 <__vector_18+0x316>
  {
    if(dop >= 2)
    27c0:	80 91 0f 01 	lds	r24, 0x010F
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	a0 f0       	brcs	.+40     	; 0x27f0 <__vector_18+0x2fe>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    27c8:	e8 ed       	ldi	r30, 0xD8	; 216
    27ca:	f4 e0       	ldi	r31, 0x04	; 4
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	89 2f       	mov	r24, r25
    27d2:	99 27       	eor	r25, r25
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	80 83       	st	Z, r24
		 Current_state.gps.pdop &= 0x00FF;
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	99 27       	eor	r25, r25
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	20 91 fa 01 	lds	r18, 0x01FA
    27ea:	92 2b       	or	r25, r18
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    27f0:	80 91 0f 01 	lds	r24, 0x010F
    27f4:	8f 5f       	subi	r24, 0xFF	; 255
    27f6:	80 93 0f 01 	sts	0x010F, r24
    if(dop == 4)
    27fa:	80 91 0f 01 	lds	r24, 0x010F
    27fe:	84 30       	cpi	r24, 0x04	; 4
    2800:	19 f4       	brne	.+6      	; 0x2808 <__vector_18+0x316>
      dop = 0xFF;
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	80 93 0f 01 	sts	0x010F, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    2808:	80 91 0e 01 	lds	r24, 0x010E
    280c:	80 31       	cpi	r24, 0x10	; 16
    280e:	08 f0       	brcs	.+2      	; 0x2812 <__vector_18+0x320>
    2810:	8b c0       	rjmp	.+278    	; 0x2928 <__vector_18+0x436>
  {
	if(geo < 4);  
    2812:	80 91 0e 01 	lds	r24, 0x010E
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	08 f4       	brcc	.+2      	; 0x281c <__vector_18+0x32a>
    281a:	7a c0       	rjmp	.+244    	; 0x2910 <__vector_18+0x41e>
    else if(geo < 8)
    281c:	80 91 0e 01 	lds	r24, 0x010E
    2820:	88 30       	cpi	r24, 0x08	; 8
    2822:	28 f5       	brcc	.+74     	; 0x286e <__vector_18+0x37c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    2824:	e5 ec       	ldi	r30, 0xC5	; 197
    2826:	f4 e0       	ldi	r31, 0x04	; 4
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	a2 81       	ldd	r26, Z+2	; 0x02
    282e:	b3 81       	ldd	r27, Z+3	; 0x03
    2830:	89 2f       	mov	r24, r25
    2832:	9a 2f       	mov	r25, r26
    2834:	ab 2f       	mov	r26, r27
    2836:	bb 27       	eor	r27, r27
    2838:	a7 fd       	sbrc	r26, 7
    283a:	ba 95       	dec	r27
    283c:	80 83       	st	Z, r24
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	a2 83       	std	Z+2, r26	; 0x02
    2842:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat &= 0x00FFFFFF;
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	a2 81       	ldd	r26, Z+2	; 0x02
    284a:	b3 81       	ldd	r27, Z+3	; 0x03
    284c:	bb 27       	eor	r27, r27
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	a2 81       	ldd	r26, Z+2	; 0x02
    285c:	b3 81       	ldd	r27, Z+3	; 0x03
    285e:	20 91 fa 01 	lds	r18, 0x01FA
    2862:	b2 2b       	or	r27, r18
    2864:	80 83       	st	Z, r24
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	a2 83       	std	Z+2, r26	; 0x02
    286a:	b3 83       	std	Z+3, r27	; 0x03
    286c:	51 c0       	rjmp	.+162    	; 0x2910 <__vector_18+0x41e>
	}
	else if(geo < 12)
    286e:	80 91 0e 01 	lds	r24, 0x010E
    2872:	8c 30       	cpi	r24, 0x0C	; 12
    2874:	28 f5       	brcc	.+74     	; 0x28c0 <__vector_18+0x3ce>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    2876:	e9 ec       	ldi	r30, 0xC9	; 201
    2878:	f4 e0       	ldi	r31, 0x04	; 4
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	a2 81       	ldd	r26, Z+2	; 0x02
    2880:	b3 81       	ldd	r27, Z+3	; 0x03
    2882:	89 2f       	mov	r24, r25
    2884:	9a 2f       	mov	r25, r26
    2886:	ab 2f       	mov	r26, r27
    2888:	bb 27       	eor	r27, r27
    288a:	a7 fd       	sbrc	r26, 7
    288c:	ba 95       	dec	r27
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon &= 0x00FFFFFF;
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	a2 81       	ldd	r26, Z+2	; 0x02
    289c:	b3 81       	ldd	r27, Z+3	; 0x03
    289e:	bb 27       	eor	r27, r27
    28a0:	80 83       	st	Z, r24
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	a2 83       	std	Z+2, r26	; 0x02
    28a6:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	a2 81       	ldd	r26, Z+2	; 0x02
    28ae:	b3 81       	ldd	r27, Z+3	; 0x03
    28b0:	20 91 fa 01 	lds	r18, 0x01FA
    28b4:	b2 2b       	or	r27, r18
    28b6:	80 83       	st	Z, r24
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	a2 83       	std	Z+2, r26	; 0x02
    28bc:	b3 83       	std	Z+3, r27	; 0x03
    28be:	28 c0       	rjmp	.+80     	; 0x2910 <__vector_18+0x41e>
	}
	else if(geo < 16 )
    28c0:	80 91 0e 01 	lds	r24, 0x010E
    28c4:	80 31       	cpi	r24, 0x10	; 16
    28c6:	20 f5       	brcc	.+72     	; 0x2910 <__vector_18+0x41e>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    28c8:	ed ec       	ldi	r30, 0xCD	; 205
    28ca:	f4 e0       	ldi	r31, 0x04	; 4
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	a2 81       	ldd	r26, Z+2	; 0x02
    28d2:	b3 81       	ldd	r27, Z+3	; 0x03
    28d4:	89 2f       	mov	r24, r25
    28d6:	9a 2f       	mov	r25, r26
    28d8:	ab 2f       	mov	r26, r27
    28da:	bb 27       	eor	r27, r27
    28dc:	a7 fd       	sbrc	r26, 7
    28de:	ba 95       	dec	r27
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt &= 0x00FFFFFF;
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	a2 81       	ldd	r26, Z+2	; 0x02
    28ee:	b3 81       	ldd	r27, Z+3	; 0x03
    28f0:	bb 27       	eor	r27, r27
    28f2:	80 83       	st	Z, r24
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	a2 83       	std	Z+2, r26	; 0x02
    28f8:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2900:	b3 81       	ldd	r27, Z+3	; 0x03
    2902:	20 91 fa 01 	lds	r18, 0x01FA
    2906:	b2 2b       	or	r27, r18
    2908:	80 83       	st	Z, r24
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	a2 83       	std	Z+2, r26	; 0x02
    290e:	b3 83       	std	Z+3, r27	; 0x03
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    2910:	80 91 0e 01 	lds	r24, 0x010E
    2914:	8f 5f       	subi	r24, 0xFF	; 255
    2916:	80 93 0e 01 	sts	0x010E, r24
    if(geo == 16)
    291a:	80 91 0e 01 	lds	r24, 0x010E
    291e:	80 31       	cpi	r24, 0x10	; 16
    2920:	19 f4       	brne	.+6      	; 0x2928 <__vector_18+0x436>
	{
      geo = 0xFF;
    2922:	8f ef       	ldi	r24, 0xFF	; 255
    2924:	80 93 0e 01 	sts	0x010E, r24

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    2928:	80 91 0d 01 	lds	r24, 0x010D
    292c:	87 30       	cpi	r24, 0x07	; 7
    292e:	08 f0       	brcs	.+2      	; 0x2932 <__vector_18+0x440>
    2930:	54 c0       	rjmp	.+168    	; 0x29da <__vector_18+0x4e8>
  {
	  
	  if(time == 0)
    2932:	80 91 0d 01 	lds	r24, 0x010D
    2936:	81 11       	cpse	r24, r1
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <__vector_18+0x452>
	  {
		  Current_state.gps.hours = last_byte;
    293a:	80 91 fa 01 	lds	r24, 0x01FA
    293e:	80 93 d1 04 	sts	0x04D1, r24
    2942:	3c c0       	rjmp	.+120    	; 0x29bc <__vector_18+0x4ca>
	  }
	  else if(time == 1)
    2944:	80 91 0d 01 	lds	r24, 0x010D
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	29 f4       	brne	.+10     	; 0x2956 <__vector_18+0x464>
	  {
		  Current_state.gps.minutes = last_byte;
    294c:	80 91 fa 01 	lds	r24, 0x01FA
    2950:	80 93 d2 04 	sts	0x04D2, r24
    2954:	33 c0       	rjmp	.+102    	; 0x29bc <__vector_18+0x4ca>
	  }
	  else if(time == 2)
    2956:	80 91 0d 01 	lds	r24, 0x010D
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	29 f4       	brne	.+10     	; 0x2968 <__vector_18+0x476>
	  {
		  Current_state.gps.seconds = last_byte;
    295e:	80 91 fa 01 	lds	r24, 0x01FA
    2962:	80 93 d3 04 	sts	0x04D3, r24
    2966:	2a c0       	rjmp	.+84     	; 0x29bc <__vector_18+0x4ca>
	  }
	  else if(time == 3)
    2968:	80 91 0d 01 	lds	r24, 0x010D
    296c:	83 30       	cpi	r24, 0x03	; 3
    296e:	29 f4       	brne	.+10     	; 0x297a <__vector_18+0x488>
	  {
		  Current_state.gps.date = last_byte;
    2970:	80 91 fa 01 	lds	r24, 0x01FA
    2974:	80 93 d4 04 	sts	0x04D4, r24
    2978:	21 c0       	rjmp	.+66     	; 0x29bc <__vector_18+0x4ca>
	  }else if(time == 4)
    297a:	80 91 0d 01 	lds	r24, 0x010D
    297e:	84 30       	cpi	r24, 0x04	; 4
    2980:	29 f4       	brne	.+10     	; 0x298c <__vector_18+0x49a>
	  {
		  Current_state.gps.month = last_byte;
    2982:	80 91 fa 01 	lds	r24, 0x01FA
    2986:	80 93 d5 04 	sts	0x04D5, r24
    298a:	18 c0       	rjmp	.+48     	; 0x29bc <__vector_18+0x4ca>
	  }else if(time > 4)
    298c:	80 91 0d 01 	lds	r24, 0x010D
    2990:	85 30       	cpi	r24, 0x05	; 5
    2992:	a0 f0       	brcs	.+40     	; 0x29bc <__vector_18+0x4ca>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    2994:	e6 ed       	ldi	r30, 0xD6	; 214
    2996:	f4 e0       	ldi	r31, 0x04	; 4
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	89 2f       	mov	r24, r25
    299e:	99 27       	eor	r25, r25
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
		  Current_state.gps.year &= 0x00FF;
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	99 27       	eor	r25, r25
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	20 91 fa 01 	lds	r18, 0x01FA
    29b6:	92 2b       	or	r25, r18
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    29bc:	80 91 0d 01 	lds	r24, 0x010D
    29c0:	8f 5f       	subi	r24, 0xFF	; 255
    29c2:	80 93 0d 01 	sts	0x010D, r24
    if(time == 7)
    29c6:	80 91 0d 01 	lds	r24, 0x010D
    29ca:	87 30       	cpi	r24, 0x07	; 7
    29cc:	31 f4       	brne	.+12     	; 0x29da <__vector_18+0x4e8>
    {
      time = 0xFF;
    29ce:	8f ef       	ldi	r24, 0xFF	; 255
    29d0:	80 93 0d 01 	sts	0x010D, r24
      ///* * The Entire message has been read
      message_end = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	80 93 f9 01 	sts	0x01F9, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    29da:	80 91 fb 01 	lds	r24, 0x01FB
    29de:	90 91 fc 01 	lds	r25, 0x01FC
    29e2:	a0 91 fd 01 	lds	r26, 0x01FD
    29e6:	b0 91 fe 01 	lds	r27, 0x01FE
    29ea:	8c 3a       	cpi	r24, 0xAC	; 172
    29ec:	94 40       	sbci	r25, 0x04	; 4
    29ee:	af 43       	sbci	r26, 0x3F	; 63
    29f0:	bf 43       	sbci	r27, 0x3F	; 63
    29f2:	29 f4       	brne	.+10     	; 0x29fe <__vector_18+0x50c>
  {
    message_end = 0;
    29f4:	10 92 f9 01 	sts	0x01F9, r1
    pos = 0;
    29f8:	10 92 11 01 	sts	0x0111, r1
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <__vector_18+0x58a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    29fe:	80 91 fb 01 	lds	r24, 0x01FB
    2a02:	90 91 fc 01 	lds	r25, 0x01FC
    2a06:	a0 91 fd 01 	lds	r26, 0x01FD
    2a0a:	b0 91 fe 01 	lds	r27, 0x01FE
    2a0e:	8c 3a       	cpi	r24, 0xAC	; 172
    2a10:	95 40       	sbci	r25, 0x05	; 5
    2a12:	af 43       	sbci	r26, 0x3F	; 63
    2a14:	bf 43       	sbci	r27, 0x3F	; 63
    2a16:	19 f4       	brne	.+6      	; 0x2a1e <__vector_18+0x52c>
    vel = 0;
    2a18:	10 92 10 01 	sts	0x0110, r1
    2a1c:	2f c0       	rjmp	.+94     	; 0x2a7c <__vector_18+0x58a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2a1e:	80 91 fb 01 	lds	r24, 0x01FB
    2a22:	90 91 fc 01 	lds	r25, 0x01FC
    2a26:	a0 91 fd 01 	lds	r26, 0x01FD
    2a2a:	b0 91 fe 01 	lds	r27, 0x01FE
    2a2e:	8c 3a       	cpi	r24, 0xAC	; 172
    2a30:	9b 40       	sbci	r25, 0x0B	; 11
    2a32:	af 43       	sbci	r26, 0x3F	; 63
    2a34:	bf 43       	sbci	r27, 0x3F	; 63
    2a36:	19 f4       	brne	.+6      	; 0x2a3e <__vector_18+0x54c>
    dop = 0;
    2a38:	10 92 0f 01 	sts	0x010F, r1
    2a3c:	1f c0       	rjmp	.+62     	; 0x2a7c <__vector_18+0x58a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    2a3e:	80 91 fb 01 	lds	r24, 0x01FB
    2a42:	90 91 fc 01 	lds	r25, 0x01FC
    2a46:	a0 91 fd 01 	lds	r26, 0x01FD
    2a4a:	b0 91 fe 01 	lds	r27, 0x01FE
    2a4e:	8c 3a       	cpi	r24, 0xAC	; 172
    2a50:	9e 40       	sbci	r25, 0x0E	; 14
    2a52:	af 43       	sbci	r26, 0x3F	; 63
    2a54:	bf 43       	sbci	r27, 0x3F	; 63
    2a56:	19 f4       	brne	.+6      	; 0x2a5e <__vector_18+0x56c>
    geo = 0;
    2a58:	10 92 0e 01 	sts	0x010E, r1
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <__vector_18+0x58a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2a5e:	80 91 fb 01 	lds	r24, 0x01FB
    2a62:	90 91 fc 01 	lds	r25, 0x01FC
    2a66:	a0 91 fd 01 	lds	r26, 0x01FD
    2a6a:	b0 91 fe 01 	lds	r27, 0x01FE
    2a6e:	8c 3a       	cpi	r24, 0xAC	; 172
    2a70:	9f 40       	sbci	r25, 0x0F	; 15
    2a72:	af 43       	sbci	r26, 0x3F	; 63
    2a74:	bf 43       	sbci	r27, 0x3F	; 63
    2a76:	11 f4       	brne	.+4      	; 0x2a7c <__vector_18+0x58a>
    time = 0;
    2a78:	10 92 0d 01 	sts	0x010D, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end) //&& (Current_state.gps.pdop!=0))
    2a7c:	80 91 d8 04 	lds	r24, 0x04D8
    2a80:	90 91 d9 04 	lds	r25, 0x04D9
    2a84:	80 91 f9 01 	lds	r24, 0x01F9
    2a88:	88 23       	and	r24, r24
    2a8a:	a1 f0       	breq	.+40     	; 0x2ab4 <__vector_18+0x5c2>
  {
    GPS_done = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	80 93 27 01 	sts	0x0127, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2a92:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	90 93 d9 04 	sts	0x04D9, r25
    2a9c:	80 93 d8 04 	sts	0x04D8, r24
    message_end = 0;
    2aa0:	10 92 f9 01 	sts	0x01F9, r1
    buffer = 0;
    2aa4:	10 92 fb 01 	sts	0x01FB, r1
    2aa8:	10 92 fc 01 	sts	0x01FC, r1
    2aac:	10 92 fd 01 	sts	0x01FD, r1
    2ab0:	10 92 fe 01 	sts	0x01FE, r1
  }
}
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	bf 91       	pop	r27
    2aba:	af 91       	pop	r26
    2abc:	9f 91       	pop	r25
    2abe:	8f 91       	pop	r24
    2ac0:	2f 91       	pop	r18
    2ac2:	0f 90       	pop	r0
    2ac4:	0b be       	out	0x3b, r0	; 59
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	0f 90       	pop	r0
    2acc:	1f 90       	pop	r1
    2ace:	18 95       	reti

00002ad0 <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2ad0:	2f 92       	push	r2
    2ad2:	3f 92       	push	r3
    2ad4:	4f 92       	push	r4
    2ad6:	5f 92       	push	r5
    2ad8:	6f 92       	push	r6
    2ada:	7f 92       	push	r7
    2adc:	8f 92       	push	r8
    2ade:	9f 92       	push	r9
    2ae0:	af 92       	push	r10
    2ae2:	bf 92       	push	r11
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	cc 54       	subi	r28, 0x4C	; 76
    2afa:	d1 09       	sbc	r29, r1
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	fc 01       	movw	r30, r24
    2b08:	49 83       	std	Y+1, r20	; 0x01
    2b0a:	5a 83       	std	Y+2, r21	; 0x02
    2b0c:	6b 83       	std	Y+3, r22	; 0x03
    2b0e:	7c 83       	std	Y+4, r23	; 0x04
    2b10:	32 2e       	mov	r3, r18
    2b12:	2b 96       	adiw	r28, 0x0b	; 11
    2b14:	1f af       	std	Y+63, r17	; 0x3f
    2b16:	0e af       	std	Y+62, r16	; 0x3e
    2b18:	2b 97       	sbiw	r28, 0x0b	; 11
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2b1a:	80 80       	ld	r8, Z
    2b1c:	91 80       	ldd	r9, Z+1	; 0x01
    2b1e:	a2 80       	ldd	r10, Z+2	; 0x02
    2b20:	b3 80       	ldd	r11, Z+3	; 0x03
    2b22:	c4 80       	ldd	r12, Z+4	; 0x04
    2b24:	d5 80       	ldd	r13, Z+5	; 0x05
    2b26:	e6 80       	ldd	r14, Z+6	; 0x06
    2b28:	f7 80       	ldd	r15, Z+7	; 0x07
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a e7       	ldi	r20, 0x7A	; 122
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	60 85       	ldd	r22, Z+8	; 0x08
    2b34:	71 85       	ldd	r23, Z+9	; 0x09
    2b36:	82 85       	ldd	r24, Z+10	; 0x0a
    2b38:	93 85       	ldd	r25, Z+11	; 0x0b
    2b3a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2b3e:	69 8b       	std	Y+17, r22	; 0x11
    2b40:	7a 8b       	std	Y+18, r23	; 0x12
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
    2b44:	9c 8b       	std	Y+20, r25	; 0x14
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2b46:	c5 01       	movw	r24, r10
    2b48:	b4 01       	movw	r22, r8
    2b4a:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    2b4e:	2b 01       	movw	r4, r22
    2b50:	3c 01       	movw	r6, r24
    2b52:	c5 01       	movw	r24, r10
    2b54:	b4 01       	movw	r22, r8
    2b56:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    2b5a:	6d 83       	std	Y+5, r22	; 0x05
    2b5c:	7e 83       	std	Y+6, r23	; 0x06
    2b5e:	8f 83       	std	Y+7, r24	; 0x07
    2b60:	98 87       	std	Y+8, r25	; 0x08
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 ee       	ldi	r19, 0xE0	; 224
    2b66:	4b ef       	ldi	r20, 0xFB	; 251
    2b68:	54 e4       	ldi	r21, 0x44	; 68
    2b6a:	69 81       	ldd	r22, Y+1	; 0x01
    2b6c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2b76:	6e a7       	std	Y+46, r22	; 0x2e
    2b78:	7f a7       	std	Y+47, r23	; 0x2f
    2b7a:	88 ab       	std	Y+48, r24	; 0x30
    2b7c:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2b7e:	c7 01       	movw	r24, r14
    2b80:	b6 01       	movw	r22, r12
    2b82:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    2b86:	60 93 3f 02 	sts	0x023F, r22
    2b8a:	70 93 40 02 	sts	0x0240, r23
    2b8e:	80 93 41 02 	sts	0x0241, r24
    2b92:	90 93 42 02 	sts	0x0242, r25
  sl[1] = sin(lon);
    2b96:	c7 01       	movw	r24, r14
    2b98:	b6 01       	movw	r22, r12
    2b9a:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    2b9e:	60 93 03 02 	sts	0x0203, r22
    2ba2:	70 93 04 02 	sts	0x0204, r23
    2ba6:	80 93 05 02 	sts	0x0205, r24
    2baa:	90 93 06 02 	sts	0x0206, r25
  one = A2 * clat * clat;
    2bae:	2e e2       	ldi	r18, 0x2E	; 46
    2bb0:	3f e2       	ldi	r19, 0x2F	; 47
    2bb2:	4b e1       	ldi	r20, 0x1B	; 27
    2bb4:	5c e4       	ldi	r21, 0x4C	; 76
    2bb6:	6d 81       	ldd	r22, Y+5	; 0x05
    2bb8:	7e 81       	ldd	r23, Y+6	; 0x06
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	98 85       	ldd	r25, Y+8	; 0x08
    2bbe:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    2bc4:	3e 81       	ldd	r19, Y+6	; 0x06
    2bc6:	4f 81       	ldd	r20, Y+7	; 0x07
    2bc8:	58 85       	ldd	r21, Y+8	; 0x08
    2bca:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2bce:	4b 01       	movw	r8, r22
    2bd0:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2bd2:	2b e3       	ldi	r18, 0x3B	; 59
    2bd4:	35 e2       	ldi	r19, 0x25	; 37
    2bd6:	4a e1       	ldi	r20, 0x1A	; 26
    2bd8:	5c e4       	ldi	r21, 0x4C	; 76
    2bda:	c3 01       	movw	r24, r6
    2bdc:	b2 01       	movw	r22, r4
    2bde:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2be2:	a3 01       	movw	r20, r6
    2be4:	92 01       	movw	r18, r4
    2be6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2bea:	6b 01       	movw	r12, r22
    2bec:	7c 01       	movw	r14, r24
  three = one + two;
    2bee:	9b 01       	movw	r18, r22
    2bf0:	ac 01       	movw	r20, r24
    2bf2:	c5 01       	movw	r24, r10
    2bf4:	b4 01       	movw	r22, r8
    2bf6:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2bfa:	69 8f       	std	Y+25, r22	; 0x19
    2bfc:	7a 8f       	std	Y+26, r23	; 0x1a
    2bfe:	8b 8f       	std	Y+27, r24	; 0x1b
    2c00:	9c 8f       	std	Y+28, r25	; 0x1c
  four = sqrt(three);
    2c02:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    2c06:	69 83       	std	Y+1, r22	; 0x01
    2c08:	7a 83       	std	Y+2, r23	; 0x02
    2c0a:	8b 83       	std	Y+3, r24	; 0x03
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2c0e:	9b 01       	movw	r18, r22
    2c10:	ac 01       	movw	r20, r24
    2c12:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2c16:	29 89       	ldd	r18, Y+17	; 0x11
    2c18:	3a 89       	ldd	r19, Y+18	; 0x12
    2c1a:	4b 89       	ldd	r20, Y+19	; 0x13
    2c1c:	5c 89       	ldd	r21, Y+20	; 0x14
    2c1e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2c22:	29 89       	ldd	r18, Y+17	; 0x11
    2c24:	3a 89       	ldd	r19, Y+18	; 0x12
    2c26:	4b 89       	ldd	r20, Y+19	; 0x13
    2c28:	5c 89       	ldd	r21, Y+20	; 0x14
    2c2a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2c2e:	69 87       	std	Y+9, r22	; 0x09
    2c30:	7a 87       	std	Y+10, r23	; 0x0a
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	2e e2       	ldi	r18, 0x2E	; 46
    2c38:	3f e2       	ldi	r19, 0x2F	; 47
    2c3a:	4b e1       	ldi	r20, 0x1B	; 27
    2c3c:	5c e4       	ldi	r21, 0x4C	; 76
    2c3e:	c5 01       	movw	r24, r10
    2c40:	b4 01       	movw	r22, r8
    2c42:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2c46:	4b 01       	movw	r8, r22
    2c48:	5c 01       	movw	r10, r24
    2c4a:	2b e3       	ldi	r18, 0x3B	; 59
    2c4c:	35 e2       	ldi	r19, 0x25	; 37
    2c4e:	4a e1       	ldi	r20, 0x1A	; 26
    2c50:	5c e4       	ldi	r21, 0x4C	; 76
    2c52:	c7 01       	movw	r24, r14
    2c54:	b6 01       	movw	r22, r12
    2c56:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2c5a:	9b 01       	movw	r18, r22
    2c5c:	ac 01       	movw	r20, r24
    2c5e:	c5 01       	movw	r24, r10
    2c60:	b4 01       	movw	r22, r8
    2c62:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2c66:	29 8d       	ldd	r18, Y+25	; 0x19
    2c68:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c6a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2c6c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2c6e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2c72:	9b 01       	movw	r18, r22
    2c74:	ac 01       	movw	r20, r24
    2c76:	69 85       	ldd	r22, Y+9	; 0x09
    2c78:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c7e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2c82:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    2c86:	4b 01       	movw	r8, r22
    2c88:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2c8a:	29 81       	ldd	r18, Y+1	; 0x01
    2c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c8e:	4b 81       	ldd	r20, Y+3	; 0x03
    2c90:	5c 81       	ldd	r21, Y+4	; 0x04
    2c92:	69 89       	ldd	r22, Y+17	; 0x11
    2c94:	7a 89       	ldd	r23, Y+18	; 0x12
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2c9e:	a5 01       	movw	r20, r10
    2ca0:	94 01       	movw	r18, r8
    2ca2:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2ca6:	25 96       	adiw	r28, 0x05	; 5
    2ca8:	6c af       	std	Y+60, r22	; 0x3c
    2caa:	7d af       	std	Y+61, r23	; 0x3d
    2cac:	8e af       	std	Y+62, r24	; 0x3e
    2cae:	9f af       	std	Y+63, r25	; 0x3f
    2cb0:	25 97       	sbiw	r28, 0x05	; 5
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2cb2:	20 e8       	ldi	r18, 0x80	; 128
    2cb4:	39 ef       	ldi	r19, 0xF9	; 249
    2cb6:	44 e8       	ldi	r20, 0x84	; 132
    2cb8:	58 e4       	ldi	r21, 0x48	; 72
    2cba:	c3 01       	movw	r24, r6
    2cbc:	b2 01       	movw	r22, r4
    2cbe:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2cc2:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc4:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc6:	4f 81       	ldd	r20, Y+7	; 0x07
    2cc8:	58 85       	ldd	r21, Y+8	; 0x08
    2cca:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2cce:	6b 01       	movw	r12, r22
    2cd0:	7c 01       	movw	r14, r24
    2cd2:	a5 01       	movw	r20, r10
    2cd4:	94 01       	movw	r18, r8
    2cd6:	69 81       	ldd	r22, Y+1	; 0x01
    2cd8:	7a 81       	ldd	r23, Y+2	; 0x02
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2ce2:	9b 01       	movw	r18, r22
    2ce4:	ac 01       	movw	r20, r24
    2ce6:	c7 01       	movw	r24, r14
    2ce8:	b6 01       	movw	r22, r12
    2cea:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2cee:	29 96       	adiw	r28, 0x09	; 9
    2cf0:	6c af       	std	Y+60, r22	; 0x3c
    2cf2:	7d af       	std	Y+61, r23	; 0x3d
    2cf4:	8e af       	std	Y+62, r24	; 0x3e
    2cf6:	9f af       	std	Y+63, r25	; 0x3f
    2cf8:	29 97       	sbiw	r28, 0x09	; 9
  slat = slat * cd - clat * sd;
    2cfa:	25 96       	adiw	r28, 0x05	; 5
    2cfc:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cfe:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d00:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d02:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d04:	25 97       	sbiw	r28, 0x05	; 5
    2d06:	c3 01       	movw	r24, r6
    2d08:	b2 01       	movw	r22, r4
    2d0a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2d0e:	6b 01       	movw	r12, r22
    2d10:	7c 01       	movw	r14, r24
    2d12:	29 96       	adiw	r28, 0x09	; 9
    2d14:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d16:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d18:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d1a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d1c:	29 97       	sbiw	r28, 0x09	; 9
    2d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d20:	7e 81       	ldd	r23, Y+6	; 0x06
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2d2a:	9b 01       	movw	r18, r22
    2d2c:	ac 01       	movw	r20, r24
    2d2e:	c7 01       	movw	r24, r14
    2d30:	b6 01       	movw	r22, r12
    2d32:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2d36:	6d 8f       	std	Y+29, r22	; 0x1d
    2d38:	7e 8f       	std	Y+30, r23	; 0x1e
    2d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d3c:	98 a3       	std	Y+32, r25	; 0x20
  clat = clat * cd + one * sd;
    2d3e:	25 96       	adiw	r28, 0x05	; 5
    2d40:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d42:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d44:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d46:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d48:	25 97       	sbiw	r28, 0x05	; 5
    2d4a:	6d 81       	ldd	r22, Y+5	; 0x05
    2d4c:	7e 81       	ldd	r23, Y+6	; 0x06
    2d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d50:	98 85       	ldd	r25, Y+8	; 0x08
    2d52:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2d56:	6b 01       	movw	r12, r22
    2d58:	7c 01       	movw	r14, r24
    2d5a:	29 96       	adiw	r28, 0x09	; 9
    2d5c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d5e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d60:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d62:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d64:	29 97       	sbiw	r28, 0x09	; 9
    2d66:	c3 01       	movw	r24, r6
    2d68:	b2 01       	movw	r22, r4
    2d6a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2d6e:	9b 01       	movw	r18, r22
    2d70:	ac 01       	movw	r20, r24
    2d72:	c7 01       	movw	r24, r14
    2d74:	b6 01       	movw	r22, r12
    2d76:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2d7a:	69 8f       	std	Y+25, r22	; 0x19
    2d7c:	7a 8f       	std	Y+26, r23	; 0x1a
    2d7e:	8b 8f       	std	Y+27, r24	; 0x1b
    2d80:	9c 8f       	std	Y+28, r25	; 0x1c
  
  p[1] = 2.0 * slat;
    2d82:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d84:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d86:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d88:	58 a1       	ldd	r21, Y+32	; 0x20
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2d92:	60 93 43 03 	sts	0x0343, r22
    2d96:	70 93 44 03 	sts	0x0344, r23
    2d9a:	80 93 45 03 	sts	0x0345, r24
    2d9e:	90 93 46 03 	sts	0x0346, r25
  p[2] = 2.0 * clat;
    2da2:	29 8d       	ldd	r18, Y+25	; 0x19
    2da4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2da6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2da8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2daa:	ca 01       	movw	r24, r20
    2dac:	b9 01       	movw	r22, r18
    2dae:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    2db2:	60 93 47 03 	sts	0x0347, r22
    2db6:	70 93 48 03 	sts	0x0348, r23
    2dba:	80 93 49 03 	sts	0x0349, r24
    2dbe:	90 93 4a 03 	sts	0x034A, r25
  p[3] = 4.5 * slat * slat - 1.5;
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e9       	ldi	r20, 0x90	; 144
    2dc8:	50 e4       	ldi	r21, 0x40	; 64
    2dca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dcc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2dd6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dd8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2dda:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2ddc:	58 a1       	ldd	r21, Y+32	; 0x20
    2dde:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 ec       	ldi	r20, 0xC0	; 192
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2dee:	60 93 4b 03 	sts	0x034B, r22
    2df2:	70 93 4c 03 	sts	0x034C, r23
    2df6:	80 93 4d 03 	sts	0x034D, r24
    2dfa:	90 93 4e 03 	sts	0x034E, r25
  p[4] = sqrt(27) * clat * slat;
    2dfe:	21 ee       	ldi	r18, 0xE1	; 225
    2e00:	36 e4       	ldi	r19, 0x46	; 70
    2e02:	46 ea       	ldi	r20, 0xA6	; 166
    2e04:	50 e4       	ldi	r21, 0x40	; 64
    2e06:	69 8d       	ldd	r22, Y+25	; 0x19
    2e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2e12:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e14:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e16:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e18:	58 a1       	ldd	r21, Y+32	; 0x20
    2e1a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2e1e:	60 93 4f 03 	sts	0x034F, r22
    2e22:	70 93 50 03 	sts	0x0350, r23
    2e26:	80 93 51 03 	sts	0x0351, r24
    2e2a:	90 93 52 03 	sts	0x0352, r25
  q[1] = -1 * clat;
    2e2e:	89 8d       	ldd	r24, Y+25	; 0x19
    2e30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e32:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2e34:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2e36:	b0 58       	subi	r27, 0x80	; 128
    2e38:	80 93 7b 02 	sts	0x027B, r24
    2e3c:	90 93 7c 02 	sts	0x027C, r25
    2e40:	a0 93 7d 02 	sts	0x027D, r26
    2e44:	b0 93 7e 02 	sts	0x027E, r27
  q[2] = slat;
    2e48:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e4a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e4c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e4e:	58 a1       	ldd	r21, Y+32	; 0x20
    2e50:	20 93 7f 02 	sts	0x027F, r18
    2e54:	30 93 80 02 	sts	0x0280, r19
    2e58:	40 93 81 02 	sts	0x0281, r20
    2e5c:	50 93 82 02 	sts	0x0282, r21
  q[3] = -3.0 * clat * slat;
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e4       	ldi	r20, 0x40	; 64
    2e66:	50 ec       	ldi	r21, 0xC0	; 192
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2e74:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e76:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e78:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e7a:	58 a1       	ldd	r21, Y+32	; 0x20
    2e7c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2e80:	60 93 83 02 	sts	0x0283, r22
    2e84:	70 93 84 02 	sts	0x0284, r23
    2e88:	80 93 85 02 	sts	0x0285, r24
    2e8c:	90 93 86 02 	sts	0x0286, r25
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2e90:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e92:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e94:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e96:	58 a1       	ldd	r21, Y+32	; 0x20
    2e98:	ca 01       	movw	r24, r20
    2e9a:	b9 01       	movw	r22, r18
    2e9c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2ea0:	6b 01       	movw	r12, r22
    2ea2:	7c 01       	movw	r14, r24
    2ea4:	29 8d       	ldd	r18, Y+25	; 0x19
    2ea6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ea8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2eaa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2eac:	ca 01       	movw	r24, r20
    2eae:	b9 01       	movw	r22, r18
    2eb0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2eb4:	9b 01       	movw	r18, r22
    2eb6:	ac 01       	movw	r20, r24
    2eb8:	c7 01       	movw	r24, r14
    2eba:	b6 01       	movw	r22, r12
    2ebc:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2ec0:	27 ed       	ldi	r18, 0xD7	; 215
    2ec2:	33 eb       	ldi	r19, 0xB3	; 179
    2ec4:	4d ed       	ldi	r20, 0xDD	; 221
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    2ecc:	60 93 87 02 	sts	0x0287, r22
    2ed0:	70 93 88 02 	sts	0x0288, r23
    2ed4:	80 93 89 02 	sts	0x0289, r24
    2ed8:	90 93 8a 02 	sts	0x028A, r25
  
  ratio = RE / r;
    2edc:	a5 01       	movw	r20, r10
    2ede:	94 01       	movw	r18, r8
    2ee0:	6a e9       	ldi	r22, 0x9A	; 154
    2ee2:	79 e1       	ldi	r23, 0x19	; 25
    2ee4:	87 ec       	ldi	r24, 0xC7	; 199
    2ee6:	95 e4       	ldi	r25, 0x45	; 69
    2ee8:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2eec:	21 96       	adiw	r28, 0x01	; 1
    2eee:	6c af       	std	Y+60, r22	; 0x3c
    2ef0:	7d af       	std	Y+61, r23	; 0x3d
    2ef2:	8e af       	std	Y+62, r24	; 0x3e
    2ef4:	9f af       	std	Y+63, r25	; 0x3f
    2ef6:	21 97       	sbiw	r28, 0x01	; 1
  
  max = (order * (order + 3)) / 2;
    2ef8:	43 2d       	mov	r20, r3
    2efa:	50 e0       	ldi	r21, 0x00	; 0
    2efc:	9a 01       	movw	r18, r20
    2efe:	2d 5f       	subi	r18, 0xFD	; 253
    2f00:	3f 4f       	sbci	r19, 0xFF	; 255
    2f02:	42 9f       	mul	r20, r18
    2f04:	c0 01       	movw	r24, r0
    2f06:	43 9f       	mul	r20, r19
    2f08:	90 0d       	add	r25, r0
    2f0a:	52 9f       	mul	r21, r18
    2f0c:	90 0d       	add	r25, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	99 23       	and	r25, r25
    2f12:	0c f4       	brge	.+2      	; 0x2f16 <igrf+0x446>
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	95 95       	asr	r25
    2f18:	87 95       	ror	r24
    2f1a:	88 af       	std	Y+56, r24	; 0x38
  for(k = 1; k <= max; k++)
    2f1c:	88 23       	and	r24, r24
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <igrf+0x452>
    2f20:	0f c4       	rjmp	.+2078   	; 0x3740 <igrf+0xc70>
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2f22:	1d a6       	std	Y+45, r1	; 0x2d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    2f24:	22 24       	eor	r2, r2
    2f26:	23 94       	inc	r2
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2f28:	1d 82       	std	Y+5, r1	; 0x05
    2f2a:	33 24       	eor	r3, r3
    2f2c:	33 94       	inc	r3
    2f2e:	31 e0       	ldi	r19, 0x01	; 1
    2f30:	39 8b       	std	Y+17, r19	; 0x11
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2f32:	19 a6       	std	Y+41, r1	; 0x29
    2f34:	1a a6       	std	Y+42, r1	; 0x2a
    2f36:	1b a6       	std	Y+43, r1	; 0x2b
    2f38:	1c a6       	std	Y+44, r1	; 0x2c
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    2f3a:	1d a2       	std	Y+37, r1	; 0x25
    2f3c:	1e a2       	std	Y+38, r1	; 0x26
    2f3e:	1f a2       	std	Y+39, r1	; 0x27
    2f40:	18 a6       	std	Y+40, r1	; 0x28
    2f42:	19 ae       	std	Y+57, r1	; 0x39
    2f44:	1a ae       	std	Y+58, r1	; 0x3a
    2f46:	1b ae       	std	Y+59, r1	; 0x3b
    2f48:	1c ae       	std	Y+60, r1	; 0x3c
    2f4a:	19 a2       	std	Y+33, r1	; 0x21
    2f4c:	1a a2       	std	Y+34, r1	; 0x22
    2f4e:	1b a2       	std	Y+35, r1	; 0x23
    2f50:	1c a2       	std	Y+36, r1	; 0x24
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2f52:	4d 81       	ldd	r20, Y+5	; 0x05
    2f54:	43 15       	cp	r20, r3
    2f56:	e8 f4       	brcc	.+58     	; 0x2f92 <igrf+0x4c2>
    {
      m = 0;
      n++;
    2f58:	4f 5f       	subi	r20, 0xFF	; 255
    2f5a:	4d 83       	std	Y+5, r20	; 0x05
      rr = pow(ratio, n + 2);
    2f5c:	64 2f       	mov	r22, r20
    2f5e:	70 e0       	ldi	r23, 0x00	; 0
    2f60:	6e 5f       	subi	r22, 0xFE	; 254
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255
    2f64:	88 27       	eor	r24, r24
    2f66:	77 fd       	sbrc	r23, 7
    2f68:	80 95       	com	r24
    2f6a:	98 2f       	mov	r25, r24
    2f6c:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    2f70:	9b 01       	movw	r18, r22
    2f72:	ac 01       	movw	r20, r24
    2f74:	21 96       	adiw	r28, 0x01	; 1
    2f76:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f78:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f7e:	21 97       	sbiw	r28, 0x01	; 1
    2f80:	0e 94 e6 34 	call	0x69cc	; 0x69cc <pow>
    2f84:	69 a7       	std	Y+41, r22	; 0x29
    2f86:	7a a7       	std	Y+42, r23	; 0x2a
    2f88:	8b a7       	std	Y+43, r24	; 0x2b
    2f8a:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2f8c:	5d 81       	ldd	r21, Y+5	; 0x05
    2f8e:	5d a7       	std	Y+45, r21	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2f90:	31 2c       	mov	r3, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2f92:	84 e0       	ldi	r24, 0x04	; 4
    2f94:	82 15       	cp	r24, r2
    2f96:	08 f0       	brcs	.+2      	; 0x2f9a <igrf+0x4ca>
    2f98:	22 c2       	rjmp	.+1092   	; 0x33de <igrf+0x90e>
    {
      if(m == n)
    2f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9c:	39 12       	cpse	r3, r25
    2f9e:	00 c1       	rjmp	.+512    	; 0x31a0 <igrf+0x6d0>
      {
        one = sqrt(1 - (0.5 / fm));
    2fa0:	a3 2d       	mov	r26, r3
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	ba 83       	std	Y+2, r27	; 0x02
    2fa6:	a9 83       	std	Y+1, r26	; 0x01
    2fa8:	bd 01       	movw	r22, r26
    2faa:	88 27       	eor	r24, r24
    2fac:	77 fd       	sbrc	r23, 7
    2fae:	80 95       	com	r24
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    2fb6:	6b 01       	movw	r12, r22
    2fb8:	7c 01       	movw	r14, r24
    2fba:	9b 01       	movw	r18, r22
    2fbc:	ac 01       	movw	r20, r24
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	9f e3       	ldi	r25, 0x3F	; 63
    2fc6:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    2fca:	9b 01       	movw	r18, r22
    2fcc:	ac 01       	movw	r20, r24
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	80 e8       	ldi	r24, 0x80	; 128
    2fd4:	9f e3       	ldi	r25, 0x3F	; 63
    2fd6:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    2fda:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    2fde:	4b 01       	movw	r8, r22
    2fe0:	5c 01       	movw	r10, r24
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    2fe2:	62 2c       	mov	r6, r2
    2fe4:	71 2c       	mov	r7, r1
    2fe6:	83 01       	movw	r16, r6
    2fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fea:	fa 81       	ldd	r31, Y+2	; 0x02
    2fec:	0e 1b       	sub	r16, r30
    2fee:	1f 0b       	sbc	r17, r31
    2ff0:	01 50       	subi	r16, 0x01	; 1
    2ff2:	11 09       	sbc	r17, r1
    2ff4:	66 0c       	add	r6, r6
    2ff6:	77 1c       	adc	r7, r7
    2ff8:	66 0c       	add	r6, r6
    2ffa:	77 1c       	adc	r7, r7
    2ffc:	93 01       	movw	r18, r6
    2ffe:	21 5c       	subi	r18, 0xC1	; 193
    3000:	3c 4f       	sbci	r19, 0xFC	; 252
    3002:	29 01       	movw	r4, r18
    3004:	a7 01       	movw	r20, r14
    3006:	96 01       	movw	r18, r12
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	80 e8       	ldi	r24, 0x80	; 128
    300e:	9f e3       	ldi	r25, 0x3F	; 63
    3010:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3020:	a5 01       	movw	r20, r10
    3022:	94 01       	movw	r18, r8
    3024:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3028:	29 8d       	ldd	r18, Y+25	; 0x19
    302a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    302c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    302e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3030:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3034:	a8 01       	movw	r20, r16
    3036:	44 0f       	add	r20, r20
    3038:	55 1f       	adc	r21, r21
    303a:	44 0f       	add	r20, r20
    303c:	55 1f       	adc	r21, r21
    303e:	5e 87       	std	Y+14, r21	; 0x0e
    3040:	4d 87       	std	Y+13, r20	; 0x0d
    3042:	8a 01       	movw	r16, r20
    3044:	01 5c       	subi	r16, 0xC1	; 193
    3046:	1c 4f       	sbci	r17, 0xFC	; 252
    3048:	d8 01       	movw	r26, r16
    304a:	2d 91       	ld	r18, X+
    304c:	3d 91       	ld	r19, X+
    304e:	4d 91       	ld	r20, X+
    3050:	5c 91       	ld	r21, X
    3052:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3056:	f2 01       	movw	r30, r4
    3058:	60 83       	st	Z, r22
    305a:	71 83       	std	Z+1, r23	; 0x01
    305c:	82 83       	std	Z+2, r24	; 0x02
    305e:	93 83       	std	Z+3, r25	; 0x03
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    3060:	93 01       	movw	r18, r6
    3062:	29 58       	subi	r18, 0x89	; 137
    3064:	3d 4f       	sbci	r19, 0xFD	; 253
    3066:	3a 87       	std	Y+10, r19	; 0x0a
    3068:	29 87       	std	Y+9, r18	; 0x09
    306a:	ed 85       	ldd	r30, Y+13	; 0x0d
    306c:	fe 85       	ldd	r31, Y+14	; 0x0e
    306e:	e9 58       	subi	r30, 0x89	; 137
    3070:	fd 4f       	sbci	r31, 0xFD	; 253
    3072:	20 81       	ld	r18, Z
    3074:	31 81       	ldd	r19, Z+1	; 0x01
    3076:	42 81       	ldd	r20, Z+2	; 0x02
    3078:	53 81       	ldd	r21, Z+3	; 0x03
    307a:	69 8d       	ldd	r22, Y+25	; 0x19
    307c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3082:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3086:	2b 01       	movw	r4, r22
    3088:	3c 01       	movw	r6, r24
    308a:	d8 01       	movw	r26, r16
    308c:	2d 91       	ld	r18, X+
    308e:	3d 91       	ld	r19, X+
    3090:	4d 91       	ld	r20, X+
    3092:	5c 91       	ld	r21, X
    3094:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3096:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3098:	8f 8d       	ldd	r24, Y+31	; 0x1f
    309a:	98 a1       	ldd	r25, Y+32	; 0x20
    309c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    30a0:	a7 01       	movw	r20, r14
    30a2:	96 01       	movw	r18, r12
    30a4:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	c3 01       	movw	r24, r6
    30ae:	b2 01       	movw	r22, r4
    30b0:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    30b4:	a5 01       	movw	r20, r10
    30b6:	94 01       	movw	r18, r8
    30b8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    30bc:	e9 85       	ldd	r30, Y+9	; 0x09
    30be:	fa 85       	ldd	r31, Y+10	; 0x0a
    30c0:	60 83       	st	Z, r22
    30c2:	71 83       	std	Z+1, r23	; 0x01
    30c4:	82 83       	std	Z+2, r24	; 0x02
    30c6:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    30c8:	09 81       	ldd	r16, Y+1	; 0x01
    30ca:	1a 81       	ldd	r17, Y+2	; 0x02
    30cc:	01 50       	subi	r16, 0x01	; 1
    30ce:	11 09       	sbc	r17, r1
    30d0:	af e3       	ldi	r26, 0x3F	; 63
    30d2:	b2 e0       	ldi	r27, 0x02	; 2
    30d4:	cd 90       	ld	r12, X+
    30d6:	dd 90       	ld	r13, X+
    30d8:	ed 90       	ld	r14, X+
    30da:	fc 90       	ld	r15, X
    30dc:	00 0f       	add	r16, r16
    30de:	11 1f       	adc	r17, r17
    30e0:	00 0f       	add	r16, r16
    30e2:	11 1f       	adc	r17, r17
    30e4:	f8 01       	movw	r30, r16
    30e6:	e5 5c       	subi	r30, 0xC5	; 197
    30e8:	fd 4f       	sbci	r31, 0xFD	; 253
    30ea:	80 80       	ld	r8, Z
    30ec:	91 80       	ldd	r9, Z+1	; 0x01
    30ee:	a2 80       	ldd	r10, Z+2	; 0x02
    30f0:	b3 80       	ldd	r11, Z+3	; 0x03
    30f2:	e9 81       	ldd	r30, Y+1	; 0x01
    30f4:	fa 81       	ldd	r31, Y+2	; 0x02
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	ee 0f       	add	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	fa 87       	std	Y+10, r31	; 0x0a
    3100:	e9 87       	std	Y+9, r30	; 0x09
    3102:	e1 50       	subi	r30, 0x01	; 1
    3104:	fe 4f       	sbci	r31, 0xFE	; 254
    3106:	fa 83       	std	Y+2, r31	; 0x02
    3108:	e9 83       	std	Y+1, r30	; 0x01
    310a:	01 50       	subi	r16, 0x01	; 1
    310c:	1e 4f       	sbci	r17, 0xFE	; 254
    310e:	d8 01       	movw	r26, r16
    3110:	2d 91       	ld	r18, X+
    3112:	3d 91       	ld	r19, X+
    3114:	4d 91       	ld	r20, X+
    3116:	5c 91       	ld	r21, X
    3118:	c7 01       	movw	r24, r14
    311a:	b6 01       	movw	r22, r12
    311c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3120:	2b 01       	movw	r4, r22
    3122:	3c 01       	movw	r6, r24
    3124:	e3 e0       	ldi	r30, 0x03	; 3
    3126:	f2 e0       	ldi	r31, 0x02	; 2
    3128:	20 81       	ld	r18, Z
    312a:	31 81       	ldd	r19, Z+1	; 0x01
    312c:	42 81       	ldd	r20, Z+2	; 0x02
    312e:	53 81       	ldd	r21, Z+3	; 0x03
    3130:	c5 01       	movw	r24, r10
    3132:	b4 01       	movw	r22, r8
    3134:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3138:	9b 01       	movw	r18, r22
    313a:	ac 01       	movw	r20, r24
    313c:	c3 01       	movw	r24, r6
    313e:	b2 01       	movw	r22, r4
    3140:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3144:	a9 81       	ldd	r26, Y+1	; 0x01
    3146:	ba 81       	ldd	r27, Y+2	; 0x02
    3148:	6d 93       	st	X+, r22
    314a:	7d 93       	st	X+, r23
    314c:	8d 93       	st	X+, r24
    314e:	9c 93       	st	X, r25
    3150:	13 97       	sbiw	r26, 0x03	; 3
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    3152:	e9 85       	ldd	r30, Y+9	; 0x09
    3154:	fa 85       	ldd	r31, Y+10	; 0x0a
    3156:	e5 5c       	subi	r30, 0xC5	; 197
    3158:	fd 4f       	sbci	r31, 0xFD	; 253
    315a:	3f 01       	movw	r6, r30
    315c:	a5 01       	movw	r20, r10
    315e:	94 01       	movw	r18, r8
    3160:	c7 01       	movw	r24, r14
    3162:	b6 01       	movw	r22, r12
    3164:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3168:	6b 01       	movw	r12, r22
    316a:	7c 01       	movw	r14, r24
    316c:	a3 e0       	ldi	r26, 0x03	; 3
    316e:	b2 e0       	ldi	r27, 0x02	; 2
    3170:	2d 91       	ld	r18, X+
    3172:	3d 91       	ld	r19, X+
    3174:	4d 91       	ld	r20, X+
    3176:	5c 91       	ld	r21, X
    3178:	f8 01       	movw	r30, r16
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	c7 01       	movw	r24, r14
    318c:	b6 01       	movw	r22, r12
    318e:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3192:	d3 01       	movw	r26, r6
    3194:	6d 93       	st	X+, r22
    3196:	7d 93       	st	X+, r23
    3198:	8d 93       	st	X+, r24
    319a:	9c 93       	st	X, r25
    319c:	13 97       	sbiw	r26, 0x03	; 3
    319e:	1f c1       	rjmp	.+574    	; 0x33de <igrf+0x90e>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    31a0:	bd a5       	ldd	r27, Y+45	; 0x2d
    31a2:	0b 2f       	mov	r16, r27
    31a4:	10 e0       	ldi	r17, 0x00	; 0
    31a6:	33 9c       	mul	r3, r3
    31a8:	c0 01       	movw	r24, r0
    31aa:	11 24       	eor	r1, r1
    31ac:	00 9f       	mul	r16, r16
    31ae:	b0 01       	movw	r22, r0
    31b0:	01 9f       	mul	r16, r17
    31b2:	70 0d       	add	r23, r0
    31b4:	70 0d       	add	r23, r0
    31b6:	11 24       	eor	r1, r1
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	68 1b       	sub	r22, r24
    31be:	79 0b       	sbc	r23, r25
    31c0:	88 27       	eor	r24, r24
    31c2:	77 fd       	sbrc	r23, 7
    31c4:	80 95       	com	r24
    31c6:	98 2f       	mov	r25, r24
    31c8:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    31cc:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    31d0:	4b 01       	movw	r8, r22
    31d2:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    31d4:	b8 01       	movw	r22, r16
    31d6:	88 27       	eor	r24, r24
    31d8:	77 fd       	sbrc	r23, 7
    31da:	80 95       	com	r24
    31dc:	98 2f       	mov	r25, r24
    31de:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    31e2:	2b 01       	movw	r4, r22
    31e4:	3c 01       	movw	r6, r24
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    31f2:	69 87       	std	Y+9, r22	; 0x09
    31f4:	7a 87       	std	Y+10, r23	; 0x0a
    31f6:	8b 87       	std	Y+11, r24	; 0x0b
    31f8:	9c 87       	std	Y+12, r25	; 0x0c
    31fa:	9b 01       	movw	r18, r22
    31fc:	ac 01       	movw	r20, r24
    31fe:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3202:	6b 01       	movw	r12, r22
    3204:	7c 01       	movw	r14, r24
    3206:	e9 81       	ldd	r30, Y+1	; 0x01
    3208:	fa 81       	ldd	r31, Y+2	; 0x02
    320a:	bf 01       	movw	r22, r30
    320c:	88 27       	eor	r24, r24
    320e:	77 fd       	sbrc	r23, 7
    3210:	80 95       	com	r24
    3212:	98 2f       	mov	r25, r24
    3214:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    3218:	9b 01       	movw	r18, r22
    321a:	ac 01       	movw	r20, r24
    321c:	c7 01       	movw	r24, r14
    321e:	b6 01       	movw	r22, r12
    3220:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3224:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    3228:	a5 01       	movw	r20, r10
    322a:	94 01       	movw	r18, r8
    322c:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3230:	6b 01       	movw	r12, r22
    3232:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    3234:	a3 01       	movw	r20, r6
    3236:	92 01       	movw	r18, r4
    3238:	c3 01       	movw	r24, r6
    323a:	b2 01       	movw	r22, r4
    323c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    324c:	a5 01       	movw	r20, r10
    324e:	94 01       	movw	r18, r8
    3250:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3254:	6d 87       	std	Y+13, r22	; 0x0d
    3256:	7e 87       	std	Y+14, r23	; 0x0e
    3258:	8f 87       	std	Y+15, r24	; 0x0f
    325a:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    325c:	82 2d       	mov	r24, r2
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	fd 81       	ldd	r31, Y+5	; 0x05
    3262:	2f 2f       	mov	r18, r31
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	ac 01       	movw	r20, r24
    3268:	42 1b       	sub	r20, r18
    326a:	53 0b       	sbc	r21, r19
    326c:	5e 8b       	std	Y+22, r21	; 0x16
    326e:	4d 8b       	std	Y+21, r20	; 0x15
    3270:	8a 01       	movw	r16, r20
    3272:	02 1b       	sub	r16, r18
    3274:	13 0b       	sbc	r17, r19
    3276:	0f 5f       	subi	r16, 0xFF	; 255
    3278:	1f 4f       	sbci	r17, 0xFF	; 255
    327a:	dc 01       	movw	r26, r24
    327c:	aa 0f       	add	r26, r26
    327e:	bb 1f       	adc	r27, r27
    3280:	aa 0f       	add	r26, r26
    3282:	bb 1f       	adc	r27, r27
    3284:	ba 83       	std	Y+2, r27	; 0x02
    3286:	a9 83       	std	Y+1, r26	; 0x01
    3288:	a1 5c       	subi	r26, 0xC1	; 193
    328a:	bc 4f       	sbci	r27, 0xFC	; 252
    328c:	bb ab       	std	Y+51, r27	; 0x33
    328e:	aa ab       	std	Y+50, r26	; 0x32
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	40 e8       	ldi	r20, 0x80	; 128
    3296:	5f e3       	ldi	r21, 0x3F	; 63
    3298:	c3 01       	movw	r24, r6
    329a:	b2 01       	movw	r22, r4
    329c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    32a0:	4b 01       	movw	r8, r22
    32a2:	5c 01       	movw	r10, r24
    32a4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    32a6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    32a8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    32aa:	58 a1       	ldd	r21, Y+32	; 0x20
    32ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    32ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    32b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b2:	98 89       	ldd	r25, Y+16	; 0x10
    32b4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    32b8:	ed 89       	ldd	r30, Y+21	; 0x15
    32ba:	fe 89       	ldd	r31, Y+22	; 0x16
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	2d 96       	adiw	r28, 0x0d	; 13
    32c6:	ff af       	std	Y+63, r31	; 0x3f
    32c8:	ee af       	std	Y+62, r30	; 0x3e
    32ca:	2d 97       	sbiw	r28, 0x0d	; 13
    32cc:	e1 5c       	subi	r30, 0xC1	; 193
    32ce:	fc 4f       	sbci	r31, 0xFC	; 252
    32d0:	fe 8b       	std	Y+22, r31	; 0x16
    32d2:	ed 8b       	std	Y+21, r30	; 0x15
    32d4:	20 81       	ld	r18, Z
    32d6:	31 81       	ldd	r19, Z+1	; 0x01
    32d8:	42 81       	ldd	r20, Z+2	; 0x02
    32da:	53 81       	ldd	r21, Z+3	; 0x03
    32dc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    32e0:	a3 01       	movw	r20, r6
    32e2:	92 01       	movw	r18, r4
    32e4:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    32e8:	6c ab       	std	Y+52, r22	; 0x34
    32ea:	7d ab       	std	Y+53, r23	; 0x35
    32ec:	8e ab       	std	Y+54, r24	; 0x36
    32ee:	9f ab       	std	Y+55, r25	; 0x37
    32f0:	00 0f       	add	r16, r16
    32f2:	11 1f       	adc	r17, r17
    32f4:	00 0f       	add	r16, r16
    32f6:	11 1f       	adc	r17, r17
    32f8:	f8 01       	movw	r30, r16
    32fa:	e1 5c       	subi	r30, 0xC1	; 193
    32fc:	fc 4f       	sbci	r31, 0xFC	; 252
    32fe:	20 81       	ld	r18, Z
    3300:	31 81       	ldd	r19, Z+1	; 0x01
    3302:	42 81       	ldd	r20, Z+2	; 0x02
    3304:	53 81       	ldd	r21, Z+3	; 0x03
    3306:	c7 01       	movw	r24, r14
    3308:	b6 01       	movw	r22, r12
    330a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    330e:	29 85       	ldd	r18, Y+9	; 0x09
    3310:	3a 85       	ldd	r19, Y+10	; 0x0a
    3312:	4b 85       	ldd	r20, Y+11	; 0x0b
    3314:	5c 85       	ldd	r21, Y+12	; 0x0c
    3316:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    331a:	9b 01       	movw	r18, r22
    331c:	ac 01       	movw	r20, r24
    331e:	6c a9       	ldd	r22, Y+52	; 0x34
    3320:	7d a9       	ldd	r23, Y+53	; 0x35
    3322:	8e a9       	ldd	r24, Y+54	; 0x36
    3324:	9f a9       	ldd	r25, Y+55	; 0x37
    3326:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    332a:	9b 01       	movw	r18, r22
    332c:	ac 01       	movw	r20, r24
    332e:	c5 01       	movw	r24, r10
    3330:	b4 01       	movw	r22, r8
    3332:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3336:	aa a9       	ldd	r26, Y+50	; 0x32
    3338:	bb a9       	ldd	r27, Y+51	; 0x33
    333a:	6d 93       	st	X+, r22
    333c:	7d 93       	st	X+, r23
    333e:	8d 93       	st	X+, r24
    3340:	9c 93       	st	X, r25
    3342:	13 97       	sbiw	r26, 0x03	; 3
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    3344:	e9 81       	ldd	r30, Y+1	; 0x01
    3346:	fa 81       	ldd	r31, Y+2	; 0x02
    3348:	e9 58       	subi	r30, 0x89	; 137
    334a:	fd 4f       	sbci	r31, 0xFD	; 253
    334c:	fa 83       	std	Y+2, r31	; 0x02
    334e:	e9 83       	std	Y+1, r30	; 0x01
    3350:	2d 96       	adiw	r28, 0x0d	; 13
    3352:	ee ad       	ldd	r30, Y+62	; 0x3e
    3354:	ff ad       	ldd	r31, Y+63	; 0x3f
    3356:	2d 97       	sbiw	r28, 0x0d	; 13
    3358:	e9 58       	subi	r30, 0x89	; 137
    335a:	fd 4f       	sbci	r31, 0xFD	; 253
    335c:	20 81       	ld	r18, Z
    335e:	31 81       	ldd	r19, Z+1	; 0x01
    3360:	42 81       	ldd	r20, Z+2	; 0x02
    3362:	53 81       	ldd	r21, Z+3	; 0x03
    3364:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3366:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    336a:	98 a1       	ldd	r25, Y+32	; 0x20
    336c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3370:	4b 01       	movw	r8, r22
    3372:	5c 01       	movw	r10, r24
    3374:	ad 89       	ldd	r26, Y+21	; 0x15
    3376:	be 89       	ldd	r27, Y+22	; 0x16
    3378:	2d 91       	ld	r18, X+
    337a:	3d 91       	ld	r19, X+
    337c:	4d 91       	ld	r20, X+
    337e:	5c 91       	ld	r21, X
    3380:	69 8d       	ldd	r22, Y+25	; 0x19
    3382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3388:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    338c:	a3 01       	movw	r20, r6
    338e:	92 01       	movw	r18, r4
    3390:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	c5 01       	movw	r24, r10
    339a:	b4 01       	movw	r22, r8
    339c:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    33a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    33a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    33a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    33a6:	58 89       	ldd	r21, Y+16	; 0x10
    33a8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    33ac:	4b 01       	movw	r8, r22
    33ae:	5c 01       	movw	r10, r24
    33b0:	f8 01       	movw	r30, r16
    33b2:	e9 58       	subi	r30, 0x89	; 137
    33b4:	fd 4f       	sbci	r31, 0xFD	; 253
    33b6:	20 81       	ld	r18, Z
    33b8:	31 81       	ldd	r19, Z+1	; 0x01
    33ba:	42 81       	ldd	r20, Z+2	; 0x02
    33bc:	53 81       	ldd	r21, Z+3	; 0x03
    33be:	c7 01       	movw	r24, r14
    33c0:	b6 01       	movw	r22, r12
    33c2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    33c6:	9b 01       	movw	r18, r22
    33c8:	ac 01       	movw	r20, r24
    33ca:	c5 01       	movw	r24, r10
    33cc:	b4 01       	movw	r22, r8
    33ce:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    33d2:	e9 81       	ldd	r30, Y+1	; 0x01
    33d4:	fa 81       	ldd	r31, Y+2	; 0x02
    33d6:	60 83       	st	Z, r22
    33d8:	71 83       	std	Z+1, r23	; 0x01
    33da:	82 83       	std	Z+2, r24	; 0x02
    33dc:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    33de:	f9 89       	ldd	r31, Y+17	; 0x11
    33e0:	0f 2f       	mov	r16, r31
    33e2:	10 e0       	ldi	r17, 0x00	; 0
    33e4:	f8 01       	movw	r30, r16
    33e6:	ee 0f       	add	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	e4 54       	subi	r30, 0x44	; 68
    33f0:	fb 4f       	sbci	r31, 0xFB	; 251
    33f2:	c5 90       	lpm	r12, Z+
    33f4:	d5 90       	lpm	r13, Z+
    33f6:	e5 90       	lpm	r14, Z+
    33f8:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    33fa:	f8 01       	movw	r30, r16
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	ee 0f       	add	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	e4 55       	subi	r30, 0x54	; 84
    3406:	fe 4f       	sbci	r31, 0xFE	; 254
    3408:	25 91       	lpm	r18, Z+
    340a:	35 91       	lpm	r19, Z+
    340c:	45 91       	lpm	r20, Z+
    340e:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3410:	6e a5       	ldd	r22, Y+46	; 0x2e
    3412:	7f a5       	ldd	r23, Y+47	; 0x2f
    3414:	88 a9       	ldd	r24, Y+48	; 0x30
    3416:	99 a9       	ldd	r25, Y+49	; 0x31
    3418:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    341c:	9b 01       	movw	r18, r22
    341e:	ac 01       	movw	r20, r24
    3420:	c7 01       	movw	r24, r14
    3422:	b6 01       	movw	r22, r12
    3424:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3428:	29 a5       	ldd	r18, Y+41	; 0x29
    342a:	3a a5       	ldd	r19, Y+42	; 0x2a
    342c:	4b a5       	ldd	r20, Y+43	; 0x2b
    342e:	5c a5       	ldd	r21, Y+44	; 0x2c
    3430:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3434:	6b 01       	movw	r12, r22
    3436:	7c 01       	movw	r14, r24
    
    
    if(m == 0)
    3438:	31 10       	cpse	r3, r1
    343a:	36 c0       	rjmp	.+108    	; 0x34a8 <igrf+0x9d8>
    {
      x += one * q[k];
    343c:	02 2d       	mov	r16, r2
    343e:	10 e0       	ldi	r17, 0x00	; 0
    3440:	00 0f       	add	r16, r16
    3442:	11 1f       	adc	r17, r17
    3444:	00 0f       	add	r16, r16
    3446:	11 1f       	adc	r17, r17
    3448:	f8 01       	movw	r30, r16
    344a:	e9 58       	subi	r30, 0x89	; 137
    344c:	fd 4f       	sbci	r31, 0xFD	; 253
    344e:	20 81       	ld	r18, Z
    3450:	31 81       	ldd	r19, Z+1	; 0x01
    3452:	42 81       	ldd	r20, Z+2	; 0x02
    3454:	53 81       	ldd	r21, Z+3	; 0x03
    3456:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    345a:	9b 01       	movw	r18, r22
    345c:	ac 01       	movw	r20, r24
    345e:	69 a1       	ldd	r22, Y+33	; 0x21
    3460:	7a a1       	ldd	r23, Y+34	; 0x22
    3462:	8b a1       	ldd	r24, Y+35	; 0x23
    3464:	9c a1       	ldd	r25, Y+36	; 0x24
    3466:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    346a:	69 a3       	std	Y+33, r22	; 0x21
    346c:	7a a3       	std	Y+34, r23	; 0x22
    346e:	8b a3       	std	Y+35, r24	; 0x23
    3470:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    3472:	f8 01       	movw	r30, r16
    3474:	e1 5c       	subi	r30, 0xC1	; 193
    3476:	fc 4f       	sbci	r31, 0xFC	; 252
    3478:	20 81       	ld	r18, Z
    347a:	31 81       	ldd	r19, Z+1	; 0x01
    347c:	42 81       	ldd	r20, Z+2	; 0x02
    347e:	53 81       	ldd	r21, Z+3	; 0x03
    3480:	c7 01       	movw	r24, r14
    3482:	b6 01       	movw	r22, r12
    3484:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3488:	9b 01       	movw	r18, r22
    348a:	ac 01       	movw	r20, r24
    348c:	6d a1       	ldd	r22, Y+37	; 0x25
    348e:	7e a1       	ldd	r23, Y+38	; 0x26
    3490:	8f a1       	ldd	r24, Y+39	; 0x27
    3492:	98 a5       	ldd	r25, Y+40	; 0x28
    3494:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3498:	6d a3       	std	Y+37, r22	; 0x25
    349a:	7e a3       	std	Y+38, r23	; 0x26
    349c:	8f a3       	std	Y+39, r24	; 0x27
    349e:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    34a0:	29 89       	ldd	r18, Y+17	; 0x11
    34a2:	2f 5f       	subi	r18, 0xFF	; 255
    34a4:	29 8b       	std	Y+17, r18	; 0x11
    34a6:	45 c1       	rjmp	.+650    	; 0x3732 <igrf+0xc62>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    34a8:	0f 5f       	subi	r16, 0xFF	; 255
    34aa:	1f 4f       	sbci	r17, 0xFF	; 255
    34ac:	f8 01       	movw	r30, r16
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	e4 54       	subi	r30, 0x44	; 68
    34b8:	fb 4f       	sbci	r31, 0xFB	; 251
    34ba:	85 90       	lpm	r8, Z+
    34bc:	95 90       	lpm	r9, Z+
    34be:	a5 90       	lpm	r10, Z+
    34c0:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    34c2:	f8 01       	movw	r30, r16
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	e4 55       	subi	r30, 0x54	; 84
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	25 91       	lpm	r18, Z+
    34d2:	35 91       	lpm	r19, Z+
    34d4:	45 91       	lpm	r20, Z+
    34d6:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    34d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    34da:	7f a5       	ldd	r23, Y+47	; 0x2f
    34dc:	88 a9       	ldd	r24, Y+48	; 0x30
    34de:	99 a9       	ldd	r25, Y+49	; 0x31
    34e0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    34e4:	9b 01       	movw	r18, r22
    34e6:	ac 01       	movw	r20, r24
    34e8:	c5 01       	movw	r24, r10
    34ea:	b4 01       	movw	r22, r8
    34ec:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    34f0:	29 a5       	ldd	r18, Y+41	; 0x29
    34f2:	3a a5       	ldd	r19, Y+42	; 0x2a
    34f4:	4b a5       	ldd	r20, Y+43	; 0x2b
    34f6:	5c a5       	ldd	r21, Y+44	; 0x2c
    34f8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    34fc:	2b 01       	movw	r4, r22
    34fe:	3c 01       	movw	r6, r24
      three = one * cl[m] + two * sl[m];
    3500:	03 2d       	mov	r16, r3
    3502:	10 e0       	ldi	r17, 0x00	; 0
    3504:	c8 01       	movw	r24, r16
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	fc 01       	movw	r30, r24
    3510:	e5 5c       	subi	r30, 0xC5	; 197
    3512:	fd 4f       	sbci	r31, 0xFD	; 253
    3514:	20 81       	ld	r18, Z
    3516:	31 81       	ldd	r19, Z+1	; 0x01
    3518:	42 81       	ldd	r20, Z+2	; 0x02
    351a:	53 81       	ldd	r21, Z+3	; 0x03
    351c:	29 83       	std	Y+1, r18	; 0x01
    351e:	3a 83       	std	Y+2, r19	; 0x02
    3520:	4b 83       	std	Y+3, r20	; 0x03
    3522:	5c 83       	std	Y+4, r21	; 0x04
    3524:	9c 01       	movw	r18, r24
    3526:	21 50       	subi	r18, 0x01	; 1
    3528:	3e 4f       	sbci	r19, 0xFE	; 254
    352a:	d9 01       	movw	r26, r18
    352c:	8d 91       	ld	r24, X+
    352e:	9d 91       	ld	r25, X+
    3530:	0d 90       	ld	r0, X+
    3532:	bc 91       	ld	r27, X
    3534:	a0 2d       	mov	r26, r0
    3536:	89 87       	std	Y+9, r24	; 0x09
    3538:	9a 87       	std	Y+10, r25	; 0x0a
    353a:	ab 87       	std	Y+11, r26	; 0x0b
    353c:	bc 87       	std	Y+12, r27	; 0x0c
    353e:	a7 01       	movw	r20, r14
    3540:	96 01       	movw	r18, r12
    3542:	69 81       	ldd	r22, Y+1	; 0x01
    3544:	7a 81       	ldd	r23, Y+2	; 0x02
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    354e:	4b 01       	movw	r8, r22
    3550:	5c 01       	movw	r10, r24
    3552:	a3 01       	movw	r20, r6
    3554:	92 01       	movw	r18, r4
    3556:	69 85       	ldd	r22, Y+9	; 0x09
    3558:	7a 85       	ldd	r23, Y+10	; 0x0a
    355a:	8b 85       	ldd	r24, Y+11	; 0x0b
    355c:	9c 85       	ldd	r25, Y+12	; 0x0c
    355e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3562:	9b 01       	movw	r18, r22
    3564:	ac 01       	movw	r20, r24
    3566:	c5 01       	movw	r24, r10
    3568:	b4 01       	movw	r22, r8
    356a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    356e:	4b 01       	movw	r8, r22
    3570:	5c 01       	movw	r10, r24
      x += three * q[k];
    3572:	82 2d       	mov	r24, r2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	fc 01       	movw	r30, r24
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	fe 87       	std	Y+14, r31	; 0x0e
    3582:	ed 87       	std	Y+13, r30	; 0x0d
    3584:	9f 01       	movw	r18, r30
    3586:	29 58       	subi	r18, 0x89	; 137
    3588:	3d 4f       	sbci	r19, 0xFD	; 253
    358a:	d9 01       	movw	r26, r18
    358c:	8d 91       	ld	r24, X+
    358e:	9d 91       	ld	r25, X+
    3590:	0d 90       	ld	r0, X+
    3592:	bc 91       	ld	r27, X
    3594:	a0 2d       	mov	r26, r0
    3596:	8d 8b       	std	Y+21, r24	; 0x15
    3598:	9e 8b       	std	Y+22, r25	; 0x16
    359a:	af 8b       	std	Y+23, r26	; 0x17
    359c:	b8 8f       	std	Y+24, r27	; 0x18
    359e:	a5 01       	movw	r20, r10
    35a0:	94 01       	movw	r18, r8
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    35aa:	9b 01       	movw	r18, r22
    35ac:	ac 01       	movw	r20, r24
    35ae:	69 a1       	ldd	r22, Y+33	; 0x21
    35b0:	7a a1       	ldd	r23, Y+34	; 0x22
    35b2:	8b a1       	ldd	r24, Y+35	; 0x23
    35b4:	9c a1       	ldd	r25, Y+36	; 0x24
    35b6:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    35ba:	69 a3       	std	Y+33, r22	; 0x21
    35bc:	7a a3       	std	Y+34, r23	; 0x22
    35be:	8b a3       	std	Y+35, r24	; 0x23
    35c0:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    35c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    35c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    35c6:	21 5c       	subi	r18, 0xC1	; 193
    35c8:	3c 4f       	sbci	r19, 0xFC	; 252
    35ca:	d9 01       	movw	r26, r18
    35cc:	8d 91       	ld	r24, X+
    35ce:	9d 91       	ld	r25, X+
    35d0:	0d 90       	ld	r0, X+
    35d2:	bc 91       	ld	r27, X
    35d4:	a0 2d       	mov	r26, r0
    35d6:	8d 87       	std	Y+13, r24	; 0x0d
    35d8:	9e 87       	std	Y+14, r25	; 0x0e
    35da:	af 87       	std	Y+15, r26	; 0x0f
    35dc:	b8 8b       	std	Y+16, r27	; 0x10
    35de:	a5 01       	movw	r20, r10
    35e0:	94 01       	movw	r18, r8
    35e2:	bc 01       	movw	r22, r24
    35e4:	cd 01       	movw	r24, r26
    35e6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    35ea:	9b 01       	movw	r18, r22
    35ec:	ac 01       	movw	r20, r24
    35ee:	6d a1       	ldd	r22, Y+37	; 0x25
    35f0:	7e a1       	ldd	r23, Y+38	; 0x26
    35f2:	8f a1       	ldd	r24, Y+39	; 0x27
    35f4:	98 a5       	ldd	r25, Y+40	; 0x28
    35f6:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    35fa:	6d a3       	std	Y+37, r22	; 0x25
    35fc:	7e a3       	std	Y+38, r23	; 0x26
    35fe:	8f a3       	std	Y+39, r24	; 0x27
    3600:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	a9 01       	movw	r20, r18
    3608:	69 8d       	ldd	r22, Y+25	; 0x19
    360a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    360c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3610:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    3614:	18 16       	cp	r1, r24
    3616:	0c f0       	brlt	.+2      	; 0x361a <igrf+0xb4a>
    3618:	57 c0       	rjmp	.+174    	; 0x36c8 <igrf+0xbf8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    361a:	29 85       	ldd	r18, Y+9	; 0x09
    361c:	3a 85       	ldd	r19, Y+10	; 0x0a
    361e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3620:	5c 85       	ldd	r21, Y+12	; 0x0c
    3622:	c7 01       	movw	r24, r14
    3624:	b6 01       	movw	r22, r12
    3626:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    362a:	6b 01       	movw	r12, r22
    362c:	7c 01       	movw	r14, r24
    362e:	29 81       	ldd	r18, Y+1	; 0x01
    3630:	3a 81       	ldd	r19, Y+2	; 0x02
    3632:	4b 81       	ldd	r20, Y+3	; 0x03
    3634:	5c 81       	ldd	r21, Y+4	; 0x04
    3636:	c3 01       	movw	r24, r6
    3638:	b2 01       	movw	r22, r4
    363a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    363e:	9b 01       	movw	r18, r22
    3640:	ac 01       	movw	r20, r24
    3642:	c7 01       	movw	r24, r14
    3644:	b6 01       	movw	r22, r12
    3646:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    364a:	6b 01       	movw	r12, r22
    364c:	7c 01       	movw	r14, r24
    364e:	b8 01       	movw	r22, r16
    3650:	88 27       	eor	r24, r24
    3652:	77 fd       	sbrc	r23, 7
    3654:	80 95       	com	r24
    3656:	98 2f       	mov	r25, r24
    3658:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    365c:	9b 01       	movw	r18, r22
    365e:	ac 01       	movw	r20, r24
    3660:	c7 01       	movw	r24, r14
    3662:	b6 01       	movw	r22, r12
    3664:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3668:	9b 01       	movw	r18, r22
    366a:	ac 01       	movw	r20, r24
    366c:	6d 85       	ldd	r22, Y+13	; 0x0d
    366e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	98 89       	ldd	r25, Y+16	; 0x10
    3674:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3678:	6b 01       	movw	r12, r22
    367a:	7c 01       	movw	r14, r24
    367c:	bd a5       	ldd	r27, Y+45	; 0x2d
    367e:	6b 2f       	mov	r22, r27
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3696:	29 8d       	ldd	r18, Y+25	; 0x19
    3698:	3a 8d       	ldd	r19, Y+26	; 0x1a
    369a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    369c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    369e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    36a2:	9b 01       	movw	r18, r22
    36a4:	ac 01       	movw	r20, r24
    36a6:	c7 01       	movw	r24, r14
    36a8:	b6 01       	movw	r22, r12
    36aa:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    36ae:	9b 01       	movw	r18, r22
    36b0:	ac 01       	movw	r20, r24
    36b2:	69 ad       	ldd	r22, Y+57	; 0x39
    36b4:	7a ad       	ldd	r23, Y+58	; 0x3a
    36b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    36b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    36ba:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    36be:	69 af       	std	Y+57, r22	; 0x39
    36c0:	7a af       	std	Y+58, r23	; 0x3a
    36c2:	8b af       	std	Y+59, r24	; 0x3b
    36c4:	9c af       	std	Y+60, r25	; 0x3c
    36c6:	32 c0       	rjmp	.+100    	; 0x372c <igrf+0xc5c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    36c8:	29 85       	ldd	r18, Y+9	; 0x09
    36ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    36cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    36ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    36d0:	c7 01       	movw	r24, r14
    36d2:	b6 01       	movw	r22, r12
    36d4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    36d8:	6b 01       	movw	r12, r22
    36da:	7c 01       	movw	r14, r24
    36dc:	29 81       	ldd	r18, Y+1	; 0x01
    36de:	3a 81       	ldd	r19, Y+2	; 0x02
    36e0:	4b 81       	ldd	r20, Y+3	; 0x03
    36e2:	5c 81       	ldd	r21, Y+4	; 0x04
    36e4:	c3 01       	movw	r24, r6
    36e6:	b2 01       	movw	r22, r4
    36e8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    36ec:	9b 01       	movw	r18, r22
    36ee:	ac 01       	movw	r20, r24
    36f0:	c7 01       	movw	r24, r14
    36f2:	b6 01       	movw	r22, r12
    36f4:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    36f8:	9b 01       	movw	r18, r22
    36fa:	ac 01       	movw	r20, r24
    36fc:	6d 89       	ldd	r22, Y+21	; 0x15
    36fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3700:	8f 89       	ldd	r24, Y+23	; 0x17
    3702:	98 8d       	ldd	r25, Y+24	; 0x18
    3704:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3708:	2d 8d       	ldd	r18, Y+29	; 0x1d
    370a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    370c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    370e:	58 a1       	ldd	r21, Y+32	; 0x20
    3710:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3714:	9b 01       	movw	r18, r22
    3716:	ac 01       	movw	r20, r24
    3718:	69 ad       	ldd	r22, Y+57	; 0x39
    371a:	7a ad       	ldd	r23, Y+58	; 0x3a
    371c:	8b ad       	ldd	r24, Y+59	; 0x3b
    371e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3720:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3724:	69 af       	std	Y+57, r22	; 0x39
    3726:	7a af       	std	Y+58, r23	; 0x3a
    3728:	8b af       	std	Y+59, r24	; 0x3b
    372a:	9c af       	std	Y+60, r25	; 0x3c
        
      l += 2;
    372c:	e9 89       	ldd	r30, Y+17	; 0x11
    372e:	ee 5f       	subi	r30, 0xFE	; 254
    3730:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    3732:	33 94       	inc	r3
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    3734:	23 94       	inc	r2
    3736:	f8 ad       	ldd	r31, Y+56	; 0x38
    3738:	f2 15       	cp	r31, r2
    373a:	08 f0       	brcs	.+2      	; 0x373e <igrf+0xc6e>
    373c:	0a cc       	rjmp	.-2028   	; 0x2f52 <igrf+0x482>
    373e:	0c c0       	rjmp	.+24     	; 0x3758 <igrf+0xc88>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    3740:	1d a2       	std	Y+37, r1	; 0x25
    3742:	1e a2       	std	Y+38, r1	; 0x26
    3744:	1f a2       	std	Y+39, r1	; 0x27
    3746:	18 a6       	std	Y+40, r1	; 0x28
    3748:	19 ae       	std	Y+57, r1	; 0x39
    374a:	1a ae       	std	Y+58, r1	; 0x3a
    374c:	1b ae       	std	Y+59, r1	; 0x3b
    374e:	1c ae       	std	Y+60, r1	; 0x3c
    3750:	19 a2       	std	Y+33, r1	; 0x21
    3752:	1a a2       	std	Y+34, r1	; 0x22
    3754:	1b a2       	std	Y+35, r1	; 0x23
    3756:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3758:	25 96       	adiw	r28, 0x05	; 5
    375a:	2c ad       	ldd	r18, Y+60	; 0x3c
    375c:	3d ad       	ldd	r19, Y+61	; 0x3d
    375e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3760:	5f ad       	ldd	r21, Y+63	; 0x3f
    3762:	25 97       	sbiw	r28, 0x05	; 5
    3764:	6d a1       	ldd	r22, Y+37	; 0x25
    3766:	7e a1       	ldd	r23, Y+38	; 0x26
    3768:	8f a1       	ldd	r24, Y+39	; 0x27
    376a:	98 a5       	ldd	r25, Y+40	; 0x28
    376c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3770:	6b 01       	movw	r12, r22
    3772:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    3774:	25 96       	adiw	r28, 0x05	; 5
    3776:	2c ad       	ldd	r18, Y+60	; 0x3c
    3778:	3d ad       	ldd	r19, Y+61	; 0x3d
    377a:	4e ad       	ldd	r20, Y+62	; 0x3e
    377c:	5f ad       	ldd	r21, Y+63	; 0x3f
    377e:	25 97       	sbiw	r28, 0x05	; 5
    3780:	69 a1       	ldd	r22, Y+33	; 0x21
    3782:	7a a1       	ldd	r23, Y+34	; 0x22
    3784:	8b a1       	ldd	r24, Y+35	; 0x23
    3786:	9c a1       	ldd	r25, Y+36	; 0x24
    3788:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    378c:	4b 01       	movw	r8, r22
    378e:	5c 01       	movw	r10, r24
    3790:	29 96       	adiw	r28, 0x09	; 9
    3792:	2c ad       	ldd	r18, Y+60	; 0x3c
    3794:	3d ad       	ldd	r19, Y+61	; 0x3d
    3796:	4e ad       	ldd	r20, Y+62	; 0x3e
    3798:	5f ad       	ldd	r21, Y+63	; 0x3f
    379a:	29 97       	sbiw	r28, 0x09	; 9
    379c:	6d a1       	ldd	r22, Y+37	; 0x25
    379e:	7e a1       	ldd	r23, Y+38	; 0x26
    37a0:	8f a1       	ldd	r24, Y+39	; 0x27
    37a2:	98 a5       	ldd	r25, Y+40	; 0x28
    37a4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    37a8:	9b 01       	movw	r18, r22
    37aa:	ac 01       	movw	r20, r24
    37ac:	c5 01       	movw	r24, r10
    37ae:	b4 01       	movw	r22, r8
    37b0:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    37b4:	2b 96       	adiw	r28, 0x0b	; 11
    37b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    37b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    37ba:	2b 97       	sbiw	r28, 0x0b	; 11
    37bc:	6d 93       	st	X+, r22
    37be:	7d 93       	st	X+, r23
    37c0:	8d 93       	st	X+, r24
    37c2:	9c 93       	st	X, r25
    37c4:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    37c6:	29 ad       	ldd	r18, Y+57	; 0x39
    37c8:	3a ad       	ldd	r19, Y+58	; 0x3a
    37ca:	4b ad       	ldd	r20, Y+59	; 0x3b
    37cc:	5c ad       	ldd	r21, Y+60	; 0x3c
    37ce:	14 96       	adiw	r26, 0x04	; 4
    37d0:	2d 93       	st	X+, r18
    37d2:	3d 93       	st	X+, r19
    37d4:	4d 93       	st	X+, r20
    37d6:	5c 93       	st	X, r21
    37d8:	17 97       	sbiw	r26, 0x07	; 7
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    37da:	29 96       	adiw	r28, 0x09	; 9
    37dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    37de:	3d ad       	ldd	r19, Y+61	; 0x3d
    37e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    37e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    37e4:	29 97       	sbiw	r28, 0x09	; 9
    37e6:	69 a1       	ldd	r22, Y+33	; 0x21
    37e8:	7a a1       	ldd	r23, Y+34	; 0x22
    37ea:	8b a1       	ldd	r24, Y+35	; 0x23
    37ec:	9c a1       	ldd	r25, Y+36	; 0x24
    37ee:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
    37f6:	c7 01       	movw	r24, r14
    37f8:	b6 01       	movw	r22, r12
    37fa:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    37fe:	2b 96       	adiw	r28, 0x0b	; 11
    3800:	ee ad       	ldd	r30, Y+62	; 0x3e
    3802:	ff ad       	ldd	r31, Y+63	; 0x3f
    3804:	2b 97       	sbiw	r28, 0x0b	; 11
    3806:	60 87       	std	Z+8, r22	; 0x08
    3808:	71 87       	std	Z+9, r23	; 0x09
    380a:	82 87       	std	Z+10, r24	; 0x0a
    380c:	93 87       	std	Z+11, r25	; 0x0b
     
}
    380e:	c4 5b       	subi	r28, 0xB4	; 180
    3810:	df 4f       	sbci	r29, 0xFF	; 255
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	bf 90       	pop	r11
    382e:	af 90       	pop	r10
    3830:	9f 90       	pop	r9
    3832:	8f 90       	pop	r8
    3834:	7f 90       	pop	r7
    3836:	6f 90       	pop	r6
    3838:	5f 90       	pop	r5
    383a:	4f 90       	pop	r4
    383c:	3f 90       	pop	r3
    383e:	2f 90       	pop	r2
    3840:	08 95       	ret

00003842 <init_UART_MM>:
#include "uart.h"
uint8_t mag_count = 0;
uint8_t mag_data[7];
volatile static int16_t x, y, z;
void init_UART_MM(void )
{
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29

  UCSR1A = 0;
    3846:	cb e9       	ldi	r28, 0x9B	; 155
    3848:	d0 e0       	ldi	r29, 0x00	; 0
    384a:	18 82       	st	Y, r1
  UCSR1B = 0;
    384c:	aa e9       	ldi	r26, 0x9A	; 154
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	1c 92       	st	X, r1
  UCSR1C = 0;
    3852:	ed e9       	ldi	r30, 0x9D	; 157
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    3858:	88 81       	ld	r24, Y
    385a:	82 60       	ori	r24, 0x02	; 2
    385c:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    385e:	8c 91       	ld	r24, X
    3860:	88 69       	ori	r24, 0x98	; 152
    3862:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |=_BV(USBS1) | _BV(UCSZ11) | _BV(UCSZ10);
    3864:	80 81       	ld	r24, Z
    3866:	8e 60       	ori	r24, 0x0E	; 14
    3868:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    386a:	87 e6       	ldi	r24, 0x67	; 103
    386c:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
    3870:	10 92 98 00 	sts	0x0098, r1
}
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	08 95       	ret

0000387a <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
  
  ///Send the poll command
 // send_MM_cmd("*00P\r");
  uint8_t c= 80;
  
  transmit_UART0(c);
    3888:	80 e5       	ldi	r24, 0x50	; 80
    388a:	0e 94 2e 2c 	call	0x585c	; 0x585c <transmit_UART0>
  xp = ((int16_t)receive_UART0()) << 8;
    388e:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    3892:	c8 2e       	mov	r12, r24
    3894:	d1 2c       	mov	r13, r1
    3896:	dc 2c       	mov	r13, r12
    3898:	cc 24       	eor	r12, r12
  xp &= 0xFF00;
  xp |= (int16_t)receive_UART0();
    389a:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    389e:	c8 2a       	or	r12, r24
  
  
  yp = ((int16_t)receive_UART0()) << 8;
    38a0:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    38a4:	e8 2e       	mov	r14, r24
    38a6:	f1 2c       	mov	r15, r1
    38a8:	fe 2c       	mov	r15, r14
    38aa:	ee 24       	eor	r14, r14
  yp &= 0xFF00;
  yp |= (int16_t)receive_UART0();
    38ac:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    38b0:	e8 2a       	or	r14, r24
  
  zp = ((int16_t)receive_UART0()) << 8;
    38b2:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    38b6:	c8 2f       	mov	r28, r24
    38b8:	d0 e0       	ldi	r29, 0x00	; 0
    38ba:	dc 2f       	mov	r29, r28
    38bc:	cc 27       	eor	r28, r28
  zp &= 0xFF00;
  zp |= (int16_t)receive_UART0();
    38be:	0e 94 32 2c 	call	0x5864	; 0x5864 <receive_UART0>
    38c2:	18 2f       	mov	r17, r24
  
  //receive_MM();
  

  ///Convert the readings to Gauss
  Current_state.mm.B_x = ((float) xp) / 15000;
    38c4:	b6 01       	movw	r22, r12
    38c6:	88 27       	eor	r24, r24
    38c8:	77 fd       	sbrc	r23, 7
    38ca:	80 95       	com	r24
    38cc:	98 2f       	mov	r25, r24
    38ce:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e6       	ldi	r19, 0x60	; 96
    38d6:	4a e6       	ldi	r20, 0x6A	; 106
    38d8:	56 e4       	ldi	r21, 0x46	; 70
    38da:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    38de:	60 93 02 05 	sts	0x0502, r22
    38e2:	70 93 03 05 	sts	0x0503, r23
    38e6:	80 93 04 05 	sts	0x0504, r24
    38ea:	90 93 05 05 	sts	0x0505, r25
  Current_state.mm.B_y = ((float) yp) / 15000;
    38ee:	b7 01       	movw	r22, r14
    38f0:	88 27       	eor	r24, r24
    38f2:	77 fd       	sbrc	r23, 7
    38f4:	80 95       	com	r24
    38f6:	98 2f       	mov	r25, r24
    38f8:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e6       	ldi	r19, 0x60	; 96
    3900:	4a e6       	ldi	r20, 0x6A	; 106
    3902:	56 e4       	ldi	r21, 0x46	; 70
    3904:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3908:	60 93 06 05 	sts	0x0506, r22
    390c:	70 93 07 05 	sts	0x0507, r23
    3910:	80 93 08 05 	sts	0x0508, r24
    3914:	90 93 09 05 	sts	0x0509, r25
  yp &= 0xFF00;
  yp |= (int16_t)receive_UART0();
  
  zp = ((int16_t)receive_UART0()) << 8;
  zp &= 0xFF00;
  zp |= (int16_t)receive_UART0();
    3918:	be 01       	movw	r22, r28
    391a:	61 2b       	or	r22, r17
  

  ///Convert the readings to Gauss
  Current_state.mm.B_x = ((float) xp) / 15000;
  Current_state.mm.B_y = ((float) yp) / 15000;
  Current_state.mm.B_z = ((float) zp) / 15000;
    391c:	88 27       	eor	r24, r24
    391e:	77 fd       	sbrc	r23, 7
    3920:	80 95       	com	r24
    3922:	98 2f       	mov	r25, r24
    3924:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e6       	ldi	r19, 0x60	; 96
    392c:	4a e6       	ldi	r20, 0x6A	; 106
    392e:	56 e4       	ldi	r21, 0x46	; 70
    3930:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3934:	60 93 0a 05 	sts	0x050A, r22
    3938:	70 93 0b 05 	sts	0x050B, r23
    393c:	80 93 0c 05 	sts	0x050C, r24
    3940:	90 93 0d 05 	sts	0x050D, r25
}
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	1f 91       	pop	r17
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	08 95       	ret

00003954 <__vector_30>:

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
    3954:	1f 92       	push	r1
    3956:	0f 92       	push	r0
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	0f 92       	push	r0
    395c:	11 24       	eor	r1, r1
    395e:	0b b6       	in	r0, 0x3b	; 59
    3960:	0f 92       	push	r0
    3962:	2f 93       	push	r18
    3964:	3f 93       	push	r19
    3966:	4f 93       	push	r20
    3968:	5f 93       	push	r21
    396a:	6f 93       	push	r22
    396c:	7f 93       	push	r23
    396e:	8f 93       	push	r24
    3970:	9f 93       	push	r25
    3972:	af 93       	push	r26
    3974:	bf 93       	push	r27
    3976:	ef 93       	push	r30
    3978:	ff 93       	push	r31
	
	mag_data[mag_count] = UDR1;
    397a:	80 91 0d 04 	lds	r24, 0x040D
    397e:	90 91 9c 00 	lds	r25, 0x009C
    3982:	e8 2f       	mov	r30, r24
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	e6 56       	subi	r30, 0x66	; 102
    3988:	fb 4f       	sbci	r31, 0xFB	; 251
    398a:	90 83       	st	Z, r25
	mag_count++;
    398c:	8f 5f       	subi	r24, 0xFF	; 255
	if (mag_count == 7)
    398e:	87 30       	cpi	r24, 0x07	; 7
    3990:	19 f0       	breq	.+6      	; 0x3998 <__vector_30+0x44>

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
	
	mag_data[mag_count] = UDR1;
	mag_count++;
    3992:	80 93 0d 04 	sts	0x040D, r24
    3996:	a1 c0       	rjmp	.+322    	; 0x3ada <__vector_30+0x186>
	if (mag_count == 7)
	{
		mag_count = 0;
    3998:	10 92 0d 04 	sts	0x040D, r1
		x = ((int16_t)mag_data[0])<<8;
    399c:	80 91 9a 04 	lds	r24, 0x049A
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	98 2f       	mov	r25, r24
    39a4:	88 27       	eor	r24, r24
    39a6:	90 93 0c 04 	sts	0x040C, r25
    39aa:	80 93 0b 04 	sts	0x040B, r24
		x &= 0xFF00;
    39ae:	80 91 0b 04 	lds	r24, 0x040B
    39b2:	90 91 0c 04 	lds	r25, 0x040C
    39b6:	88 27       	eor	r24, r24
    39b8:	90 93 0c 04 	sts	0x040C, r25
    39bc:	80 93 0b 04 	sts	0x040B, r24
		x |= (int16_t)mag_data[1];
    39c0:	80 91 0b 04 	lds	r24, 0x040B
    39c4:	90 91 0c 04 	lds	r25, 0x040C
    39c8:	20 91 9b 04 	lds	r18, 0x049B
    39cc:	82 2b       	or	r24, r18
    39ce:	90 93 0c 04 	sts	0x040C, r25
    39d2:	80 93 0b 04 	sts	0x040B, r24
		
		
		y = ((int16_t)mag_data[2]) << 8;
    39d6:	80 91 9c 04 	lds	r24, 0x049C
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	98 2f       	mov	r25, r24
    39de:	88 27       	eor	r24, r24
    39e0:	90 93 0a 04 	sts	0x040A, r25
    39e4:	80 93 09 04 	sts	0x0409, r24
		y &= 0xFF00;
    39e8:	80 91 09 04 	lds	r24, 0x0409
    39ec:	90 91 0a 04 	lds	r25, 0x040A
    39f0:	88 27       	eor	r24, r24
    39f2:	90 93 0a 04 	sts	0x040A, r25
    39f6:	80 93 09 04 	sts	0x0409, r24
		y |= (int16_t)mag_data[3];
    39fa:	80 91 09 04 	lds	r24, 0x0409
    39fe:	90 91 0a 04 	lds	r25, 0x040A
    3a02:	20 91 9d 04 	lds	r18, 0x049D
    3a06:	82 2b       	or	r24, r18
    3a08:	90 93 0a 04 	sts	0x040A, r25
    3a0c:	80 93 09 04 	sts	0x0409, r24
		
		z = ((int16_t)mag_data[4]) << 8;
    3a10:	80 91 9e 04 	lds	r24, 0x049E
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	98 2f       	mov	r25, r24
    3a18:	88 27       	eor	r24, r24
    3a1a:	90 93 08 04 	sts	0x0408, r25
    3a1e:	80 93 07 04 	sts	0x0407, r24
		z &= 0xFF00;
    3a22:	80 91 07 04 	lds	r24, 0x0407
    3a26:	90 91 08 04 	lds	r25, 0x0408
    3a2a:	88 27       	eor	r24, r24
    3a2c:	90 93 08 04 	sts	0x0408, r25
    3a30:	80 93 07 04 	sts	0x0407, r24
		z |= (int16_t)mag_data[5];
    3a34:	80 91 07 04 	lds	r24, 0x0407
    3a38:	90 91 08 04 	lds	r25, 0x0408
    3a3c:	20 91 9f 04 	lds	r18, 0x049F
    3a40:	82 2b       	or	r24, r18
    3a42:	90 93 08 04 	sts	0x0408, r25
    3a46:	80 93 07 04 	sts	0x0407, r24
		
		///Convert the readings to Gauss
		Current_state.mm.B_x = ((float) x) / 15000;
    3a4a:	60 91 0b 04 	lds	r22, 0x040B
    3a4e:	70 91 0c 04 	lds	r23, 0x040C
    3a52:	88 27       	eor	r24, r24
    3a54:	77 fd       	sbrc	r23, 7
    3a56:	80 95       	com	r24
    3a58:	98 2f       	mov	r25, r24
    3a5a:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e6       	ldi	r19, 0x60	; 96
    3a62:	4a e6       	ldi	r20, 0x6A	; 106
    3a64:	56 e4       	ldi	r21, 0x46	; 70
    3a66:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3a6a:	60 93 02 05 	sts	0x0502, r22
    3a6e:	70 93 03 05 	sts	0x0503, r23
    3a72:	80 93 04 05 	sts	0x0504, r24
    3a76:	90 93 05 05 	sts	0x0505, r25
		Current_state.mm.B_y = ((float) y) / 15000;
    3a7a:	60 91 09 04 	lds	r22, 0x0409
    3a7e:	70 91 0a 04 	lds	r23, 0x040A
    3a82:	88 27       	eor	r24, r24
    3a84:	77 fd       	sbrc	r23, 7
    3a86:	80 95       	com	r24
    3a88:	98 2f       	mov	r25, r24
    3a8a:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e6       	ldi	r19, 0x60	; 96
    3a92:	4a e6       	ldi	r20, 0x6A	; 106
    3a94:	56 e4       	ldi	r21, 0x46	; 70
    3a96:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3a9a:	60 93 06 05 	sts	0x0506, r22
    3a9e:	70 93 07 05 	sts	0x0507, r23
    3aa2:	80 93 08 05 	sts	0x0508, r24
    3aa6:	90 93 09 05 	sts	0x0509, r25
		Current_state.mm.B_z = ((float) z) / 15000;
    3aaa:	60 91 07 04 	lds	r22, 0x0407
    3aae:	70 91 08 04 	lds	r23, 0x0408
    3ab2:	88 27       	eor	r24, r24
    3ab4:	77 fd       	sbrc	r23, 7
    3ab6:	80 95       	com	r24
    3ab8:	98 2f       	mov	r25, r24
    3aba:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e6       	ldi	r19, 0x60	; 96
    3ac2:	4a e6       	ldi	r20, 0x6A	; 106
    3ac4:	56 e4       	ldi	r21, 0x46	; 70
    3ac6:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    3aca:	60 93 0a 05 	sts	0x050A, r22
    3ace:	70 93 0b 05 	sts	0x050B, r23
    3ad2:	80 93 0c 05 	sts	0x050C, r24
    3ad6:	90 93 0d 05 	sts	0x050D, r25
	}
}
    3ada:	ff 91       	pop	r31
    3adc:	ef 91       	pop	r30
    3ade:	bf 91       	pop	r27
    3ae0:	af 91       	pop	r26
    3ae2:	9f 91       	pop	r25
    3ae4:	8f 91       	pop	r24
    3ae6:	7f 91       	pop	r23
    3ae8:	6f 91       	pop	r22
    3aea:	5f 91       	pop	r21
    3aec:	4f 91       	pop	r20
    3aee:	3f 91       	pop	r19
    3af0:	2f 91       	pop	r18
    3af2:	0f 90       	pop	r0
    3af4:	0b be       	out	0x3b, r0	; 59
    3af6:	0f 90       	pop	r0
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	0f 90       	pop	r0
    3afc:	1f 90       	pop	r1
    3afe:	18 95       	reti

00003b00 <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	fc 01       	movw	r30, r24
    3b06:	eb 01       	movw	r28, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3b08:	40 81       	ld	r20, Z
    3b0a:	51 81       	ldd	r21, Z+1	; 0x01
    3b0c:	62 81       	ldd	r22, Z+2	; 0x02
    3b0e:	73 81       	ldd	r23, Z+3	; 0x03
    3b10:	48 83       	st	Y, r20
    3b12:	59 83       	std	Y+1, r21	; 0x01
    3b14:	6a 83       	std	Y+2, r22	; 0x02
    3b16:	7b 83       	std	Y+3, r23	; 0x03
    3b18:	44 81       	ldd	r20, Z+4	; 0x04
    3b1a:	55 81       	ldd	r21, Z+5	; 0x05
    3b1c:	66 81       	ldd	r22, Z+6	; 0x06
    3b1e:	77 81       	ldd	r23, Z+7	; 0x07
    3b20:	4c 83       	std	Y+4, r20	; 0x04
    3b22:	5d 83       	std	Y+5, r21	; 0x05
    3b24:	6e 83       	std	Y+6, r22	; 0x06
    3b26:	7f 83       	std	Y+7, r23	; 0x07
    3b28:	80 85       	ldd	r24, Z+8	; 0x08
    3b2a:	91 85       	ldd	r25, Z+9	; 0x09
    3b2c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3b2e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3b30:	88 87       	std	Y+8, r24	; 0x08
    3b32:	99 87       	std	Y+9, r25	; 0x09
    3b34:	aa 87       	std	Y+10, r26	; 0x0a
    3b36:	bb 87       	std	Y+11, r27	; 0x0b
}
    3b38:	df 91       	pop	r29
    3b3a:	cf 91       	pop	r28
    3b3c:	08 95       	ret

00003b3e <copy_quaternion>:

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3b3e:	dc 01       	movw	r26, r24
    3b40:	e6 2f       	mov	r30, r22
    3b42:	f7 2f       	mov	r31, r23
  uint8_t i;
  for(i = 0; i < 4; i++)
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    q_dest[i] = q_src[i];
    3b46:	4d 91       	ld	r20, X+
    3b48:	5d 91       	ld	r21, X+
    3b4a:	6d 91       	ld	r22, X+
    3b4c:	7d 91       	ld	r23, X+
    3b4e:	41 93       	st	Z+, r20
    3b50:	51 93       	st	Z+, r21
    3b52:	61 93       	st	Z+, r22
    3b54:	71 93       	st	Z+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	84 30       	cpi	r24, 0x04	; 4
    3b5a:	a9 f7       	brne	.-22     	; 0x3b46 <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3b5c:	08 95       	ret

00003b5e <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3b5e:	4f 92       	push	r4
    3b60:	5f 92       	push	r5
    3b62:	6f 92       	push	r6
    3b64:	7f 92       	push	r7
    3b66:	8f 92       	push	r8
    3b68:	9f 92       	push	r9
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	84 80       	ldd	r8, Z+4	; 0x04
    3b82:	95 80       	ldd	r9, Z+5	; 0x05
    3b84:	a6 80       	ldd	r10, Z+6	; 0x06
    3b86:	b7 80       	ldd	r11, Z+7	; 0x07
    3b88:	c0 84       	ldd	r12, Z+8	; 0x08
    3b8a:	d1 84       	ldd	r13, Z+9	; 0x09
    3b8c:	e2 84       	ldd	r14, Z+10	; 0x0a
    3b8e:	f3 84       	ldd	r15, Z+11	; 0x0b
    3b90:	9b 01       	movw	r18, r22
    3b92:	ac 01       	movw	r20, r24
    3b94:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3b98:	2b 01       	movw	r4, r22
    3b9a:	3c 01       	movw	r6, r24
    3b9c:	a5 01       	movw	r20, r10
    3b9e:	94 01       	movw	r18, r8
    3ba0:	c5 01       	movw	r24, r10
    3ba2:	b4 01       	movw	r22, r8
    3ba4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3ba8:	9b 01       	movw	r18, r22
    3baa:	ac 01       	movw	r20, r24
    3bac:	c3 01       	movw	r24, r6
    3bae:	b2 01       	movw	r22, r4
    3bb0:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3bb4:	4b 01       	movw	r8, r22
    3bb6:	5c 01       	movw	r10, r24
    3bb8:	a7 01       	movw	r20, r14
    3bba:	96 01       	movw	r18, r12
    3bbc:	c7 01       	movw	r24, r14
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3bc4:	9b 01       	movw	r18, r22
    3bc6:	ac 01       	movw	r20, r24
    3bc8:	c5 01       	movw	r24, r10
    3bca:	b4 01       	movw	r22, r8
    3bcc:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3bd0:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
}
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	cf 90       	pop	r12
    3bdc:	bf 90       	pop	r11
    3bde:	af 90       	pop	r10
    3be0:	9f 90       	pop	r9
    3be2:	8f 90       	pop	r8
    3be4:	7f 90       	pop	r7
    3be6:	6f 90       	pop	r6
    3be8:	5f 90       	pop	r5
    3bea:	4f 90       	pop	r4
    3bec:	08 95       	ret

00003bee <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3bee:	4f 92       	push	r4
    3bf0:	5f 92       	push	r5
    3bf2:	6f 92       	push	r6
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <quaternion_norm+0x1e>
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <quaternion_norm+0x20>
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	fc 01       	movw	r30, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3c14:	60 81       	ld	r22, Z
    3c16:	71 81       	ldd	r23, Z+1	; 0x01
    3c18:	82 81       	ldd	r24, Z+2	; 0x02
    3c1a:	93 81       	ldd	r25, Z+3	; 0x03
    3c1c:	84 80       	ldd	r8, Z+4	; 0x04
    3c1e:	95 80       	ldd	r9, Z+5	; 0x05
    3c20:	a6 80       	ldd	r10, Z+6	; 0x06
    3c22:	b7 80       	ldd	r11, Z+7	; 0x07
    3c24:	c0 84       	ldd	r12, Z+8	; 0x08
    3c26:	d1 84       	ldd	r13, Z+9	; 0x09
    3c28:	e2 84       	ldd	r14, Z+10	; 0x0a
    3c2a:	f3 84       	ldd	r15, Z+11	; 0x0b
    3c2c:	44 84       	ldd	r4, Z+12	; 0x0c
    3c2e:	55 84       	ldd	r5, Z+13	; 0x0d
    3c30:	66 84       	ldd	r6, Z+14	; 0x0e
    3c32:	77 84       	ldd	r7, Z+15	; 0x0f
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
    3c38:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3c3c:	69 83       	std	Y+1, r22	; 0x01
    3c3e:	7a 83       	std	Y+2, r23	; 0x02
    3c40:	8b 83       	std	Y+3, r24	; 0x03
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	a5 01       	movw	r20, r10
    3c46:	94 01       	movw	r18, r8
    3c48:	c5 01       	movw	r24, r10
    3c4a:	b4 01       	movw	r22, r8
    3c4c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3c50:	9b 01       	movw	r18, r22
    3c52:	ac 01       	movw	r20, r24
    3c54:	69 81       	ldd	r22, Y+1	; 0x01
    3c56:	7a 81       	ldd	r23, Y+2	; 0x02
    3c58:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3c60:	4b 01       	movw	r8, r22
    3c62:	5c 01       	movw	r10, r24
    3c64:	a7 01       	movw	r20, r14
    3c66:	96 01       	movw	r18, r12
    3c68:	c7 01       	movw	r24, r14
    3c6a:	b6 01       	movw	r22, r12
    3c6c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3c70:	9b 01       	movw	r18, r22
    3c72:	ac 01       	movw	r20, r24
    3c74:	c5 01       	movw	r24, r10
    3c76:	b4 01       	movw	r22, r8
    3c78:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3c7c:	6b 01       	movw	r12, r22
    3c7e:	7c 01       	movw	r14, r24
    3c80:	a3 01       	movw	r20, r6
    3c82:	92 01       	movw	r18, r4
    3c84:	c3 01       	movw	r24, r6
    3c86:	b2 01       	movw	r22, r4
    3c88:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3c8c:	9b 01       	movw	r18, r22
    3c8e:	ac 01       	movw	r20, r24
    3c90:	c7 01       	movw	r24, r14
    3c92:	b6 01       	movw	r22, r12
    3c94:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3c98:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
}
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	bf 90       	pop	r11
    3cb2:	af 90       	pop	r10
    3cb4:	9f 90       	pop	r9
    3cb6:	8f 90       	pop	r8
    3cb8:	7f 90       	pop	r7
    3cba:	6f 90       	pop	r6
    3cbc:	5f 90       	pop	r5
    3cbe:	4f 90       	pop	r4
    3cc0:	08 95       	ret

00003cc2 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3cc2:	cf 92       	push	r12
    3cc4:	df 92       	push	r13
    3cc6:	ef 92       	push	r14
    3cc8:	ff 92       	push	r15
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	ec 01       	movw	r28, r24
    3cd4:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3cd6:	fb 01       	movw	r30, r22
    3cd8:	20 81       	ld	r18, Z
    3cda:	31 81       	ldd	r19, Z+1	; 0x01
    3cdc:	42 81       	ldd	r20, Z+2	; 0x02
    3cde:	53 81       	ldd	r21, Z+3	; 0x03
    3ce0:	68 81       	ld	r22, Y
    3ce2:	79 81       	ldd	r23, Y+1	; 0x01
    3ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3cec:	6b 01       	movw	r12, r22
    3cee:	7c 01       	movw	r14, r24
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	24 81       	ldd	r18, Z+4	; 0x04
    3cf4:	35 81       	ldd	r19, Z+5	; 0x05
    3cf6:	46 81       	ldd	r20, Z+6	; 0x06
    3cf8:	57 81       	ldd	r21, Z+7	; 0x07
    3cfa:	6c 81       	ldd	r22, Y+4	; 0x04
    3cfc:	7d 81       	ldd	r23, Y+5	; 0x05
    3cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    3d00:	9f 81       	ldd	r25, Y+7	; 0x07
    3d02:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3d06:	9b 01       	movw	r18, r22
    3d08:	ac 01       	movw	r20, r24
    3d0a:	c7 01       	movw	r24, r14
    3d0c:	b6 01       	movw	r22, r12
    3d0e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3d12:	6b 01       	movw	r12, r22
    3d14:	7c 01       	movw	r14, r24
    3d16:	f8 01       	movw	r30, r16
    3d18:	20 85       	ldd	r18, Z+8	; 0x08
    3d1a:	31 85       	ldd	r19, Z+9	; 0x09
    3d1c:	42 85       	ldd	r20, Z+10	; 0x0a
    3d1e:	53 85       	ldd	r21, Z+11	; 0x0b
    3d20:	68 85       	ldd	r22, Y+8	; 0x08
    3d22:	79 85       	ldd	r23, Y+9	; 0x09
    3d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d28:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3d2c:	9b 01       	movw	r18, r22
    3d2e:	ac 01       	movw	r20, r24
    3d30:	c7 01       	movw	r24, r14
    3d32:	b6 01       	movw	r22, r12
    3d34:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	ef 90       	pop	r14
    3d44:	df 90       	pop	r13
    3d46:	cf 90       	pop	r12
    3d48:	08 95       	ret

00003d4a <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	7c 01       	movw	r14, r24
    3d5a:	06 2f       	mov	r16, r22
    3d5c:	17 2f       	mov	r17, r23
    3d5e:	c4 2f       	mov	r28, r20
    3d60:	d5 2f       	mov	r29, r21
  uint8_t i;
  for(i = 0; i < 3; i++)
    3d62:	d1 2c       	mov	r13, r1
    v_res[i] = v_a[i] + v_b[i];
    3d64:	f7 01       	movw	r30, r14
    3d66:	61 91       	ld	r22, Z+
    3d68:	71 91       	ld	r23, Z+
    3d6a:	81 91       	ld	r24, Z+
    3d6c:	91 91       	ld	r25, Z+
    3d6e:	7f 01       	movw	r14, r30
    3d70:	f8 01       	movw	r30, r16
    3d72:	21 91       	ld	r18, Z+
    3d74:	31 91       	ld	r19, Z+
    3d76:	41 91       	ld	r20, Z+
    3d78:	51 91       	ld	r21, Z+
    3d7a:	8f 01       	movw	r16, r30
    3d7c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3d80:	69 93       	st	Y+, r22
    3d82:	79 93       	st	Y+, r23
    3d84:	89 93       	st	Y+, r24
    3d86:	99 93       	st	Y+, r25
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3d88:	d3 94       	inc	r13
    3d8a:	f3 e0       	ldi	r31, 0x03	; 3
    3d8c:	df 12       	cpse	r13, r31
    3d8e:	ea cf       	rjmp	.-44     	; 0x3d64 <add_vectors+0x1a>
    v_res[i] = v_a[i] + v_b[i];
}
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	1f 91       	pop	r17
    3d96:	0f 91       	pop	r16
    3d98:	ff 90       	pop	r15
    3d9a:	ef 90       	pop	r14
    3d9c:	df 90       	pop	r13
    3d9e:	08 95       	ret

00003da0 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3da0:	4f 92       	push	r4
    3da2:	5f 92       	push	r5
    3da4:	6f 92       	push	r6
    3da6:	7f 92       	push	r7
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	af 92       	push	r10
    3dae:	bf 92       	push	r11
    3db0:	cf 92       	push	r12
    3db2:	df 92       	push	r13
    3db4:	ef 92       	push	r14
    3db6:	ff 92       	push	r15
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	4b 01       	movw	r8, r22
    3dc2:	5a 01       	movw	r10, r20
    3dc4:	c1 2c       	mov	r12, r1
    3dc6:	d1 2c       	mov	r13, r1
    3dc8:	48 2e       	mov	r4, r24
    3dca:	59 2e       	mov	r5, r25
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3dcc:	61 2c       	mov	r6, r1
    3dce:	75 01       	movw	r14, r10
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3dd0:	f5 01       	movw	r30, r10
    3dd2:	10 82       	st	Z, r1
    3dd4:	11 82       	std	Z+1, r1	; 0x01
    3dd6:	12 82       	std	Z+2, r1	; 0x02
    3dd8:	13 82       	std	Z+3, r1	; 0x03
    3dda:	04 2d       	mov	r16, r4
    3ddc:	15 2d       	mov	r17, r5
    3dde:	e4 01       	movw	r28, r8
    3de0:	cc 0d       	add	r28, r12
    3de2:	dd 1d       	adc	r29, r13
    for(j = 0; j < 3; j++)
    3de4:	76 2c       	mov	r7, r6
      v_res[i] += v[j] * m[j][i];
    3de6:	f8 01       	movw	r30, r16
    3de8:	61 91       	ld	r22, Z+
    3dea:	71 91       	ld	r23, Z+
    3dec:	81 91       	ld	r24, Z+
    3dee:	91 91       	ld	r25, Z+
    3df0:	8f 01       	movw	r16, r30
    3df2:	28 81       	ld	r18, Y
    3df4:	39 81       	ldd	r19, Y+1	; 0x01
    3df6:	4a 81       	ldd	r20, Y+2	; 0x02
    3df8:	5b 81       	ldd	r21, Y+3	; 0x03
    3dfa:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3dfe:	9b 01       	movw	r18, r22
    3e00:	ac 01       	movw	r20, r24
    3e02:	f7 01       	movw	r30, r14
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    3e10:	f7 01       	movw	r30, r14
    3e12:	60 83       	st	Z, r22
    3e14:	71 83       	std	Z+1, r23	; 0x01
    3e16:	82 83       	std	Z+2, r24	; 0x02
    3e18:	93 83       	std	Z+3, r25	; 0x03
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3e1a:	73 94       	inc	r7
    3e1c:	2c 96       	adiw	r28, 0x0c	; 12
    3e1e:	f3 e0       	ldi	r31, 0x03	; 3
    3e20:	7f 12       	cpse	r7, r31
    3e22:	e1 cf       	rjmp	.-62     	; 0x3de6 <vector_into_matrix+0x46>
    3e24:	84 e0       	ldi	r24, 0x04	; 4
    3e26:	a8 0e       	add	r10, r24
    3e28:	b1 1c       	adc	r11, r1
    3e2a:	e4 e0       	ldi	r30, 0x04	; 4
    3e2c:	ce 0e       	add	r12, r30
    3e2e:	d1 1c       	adc	r13, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3e30:	fc e0       	ldi	r31, 0x0C	; 12
    3e32:	cf 16       	cp	r12, r31
    3e34:	d1 04       	cpc	r13, r1
    3e36:	59 f6       	brne	.-106    	; 0x3dce <vector_into_matrix+0x2e>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	df 90       	pop	r13
    3e46:	cf 90       	pop	r12
    3e48:	bf 90       	pop	r11
    3e4a:	af 90       	pop	r10
    3e4c:	9f 90       	pop	r9
    3e4e:	8f 90       	pop	r8
    3e50:	7f 90       	pop	r7
    3e52:	6f 90       	pop	r6
    3e54:	5f 90       	pop	r5
    3e56:	4f 90       	pop	r4
    3e58:	08 95       	ret

00003e5a <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3e5a:	af 92       	push	r10
    3e5c:	bf 92       	push	r11
    3e5e:	cf 92       	push	r12
    3e60:	df 92       	push	r13
    3e62:	ef 92       	push	r14
    3e64:	ff 92       	push	r15
    3e66:	0f 93       	push	r16
    3e68:	1f 93       	push	r17
    3e6a:	cf 93       	push	r28
    3e6c:	df 93       	push	r29
    3e6e:	ec 01       	movw	r28, r24
    3e70:	8b 01       	movw	r16, r22
    3e72:	5a 01       	movw	r10, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3e74:	fb 01       	movw	r30, r22
    3e76:	20 85       	ldd	r18, Z+8	; 0x08
    3e78:	31 85       	ldd	r19, Z+9	; 0x09
    3e7a:	42 85       	ldd	r20, Z+10	; 0x0a
    3e7c:	53 85       	ldd	r21, Z+11	; 0x0b
    3e7e:	6c 81       	ldd	r22, Y+4	; 0x04
    3e80:	7d 81       	ldd	r23, Y+5	; 0x05
    3e82:	8e 81       	ldd	r24, Y+6	; 0x06
    3e84:	9f 81       	ldd	r25, Y+7	; 0x07
    3e86:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3e8a:	6b 01       	movw	r12, r22
    3e8c:	7c 01       	movw	r14, r24
    3e8e:	f8 01       	movw	r30, r16
    3e90:	24 81       	ldd	r18, Z+4	; 0x04
    3e92:	35 81       	ldd	r19, Z+5	; 0x05
    3e94:	46 81       	ldd	r20, Z+6	; 0x06
    3e96:	57 81       	ldd	r21, Z+7	; 0x07
    3e98:	68 85       	ldd	r22, Y+8	; 0x08
    3e9a:	79 85       	ldd	r23, Y+9	; 0x09
    3e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3ea4:	9b 01       	movw	r18, r22
    3ea6:	ac 01       	movw	r20, r24
    3ea8:	c7 01       	movw	r24, r14
    3eaa:	b6 01       	movw	r22, r12
    3eac:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3eb0:	f5 01       	movw	r30, r10
    3eb2:	60 83       	st	Z, r22
    3eb4:	71 83       	std	Z+1, r23	; 0x01
    3eb6:	82 83       	std	Z+2, r24	; 0x02
    3eb8:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3eba:	f8 01       	movw	r30, r16
    3ebc:	20 81       	ld	r18, Z
    3ebe:	31 81       	ldd	r19, Z+1	; 0x01
    3ec0:	42 81       	ldd	r20, Z+2	; 0x02
    3ec2:	53 81       	ldd	r21, Z+3	; 0x03
    3ec4:	68 85       	ldd	r22, Y+8	; 0x08
    3ec6:	79 85       	ldd	r23, Y+9	; 0x09
    3ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ecc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3ed0:	6b 01       	movw	r12, r22
    3ed2:	7c 01       	movw	r14, r24
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	20 85       	ldd	r18, Z+8	; 0x08
    3ed8:	31 85       	ldd	r19, Z+9	; 0x09
    3eda:	42 85       	ldd	r20, Z+10	; 0x0a
    3edc:	53 85       	ldd	r21, Z+11	; 0x0b
    3ede:	68 81       	ld	r22, Y
    3ee0:	79 81       	ldd	r23, Y+1	; 0x01
    3ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3eea:	9b 01       	movw	r18, r22
    3eec:	ac 01       	movw	r20, r24
    3eee:	c7 01       	movw	r24, r14
    3ef0:	b6 01       	movw	r22, r12
    3ef2:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3ef6:	f5 01       	movw	r30, r10
    3ef8:	64 83       	std	Z+4, r22	; 0x04
    3efa:	75 83       	std	Z+5, r23	; 0x05
    3efc:	86 83       	std	Z+6, r24	; 0x06
    3efe:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    3f00:	f8 01       	movw	r30, r16
    3f02:	24 81       	ldd	r18, Z+4	; 0x04
    3f04:	35 81       	ldd	r19, Z+5	; 0x05
    3f06:	46 81       	ldd	r20, Z+6	; 0x06
    3f08:	57 81       	ldd	r21, Z+7	; 0x07
    3f0a:	68 81       	ld	r22, Y
    3f0c:	79 81       	ldd	r23, Y+1	; 0x01
    3f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f10:	9b 81       	ldd	r25, Y+3	; 0x03
    3f12:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3f16:	6b 01       	movw	r12, r22
    3f18:	7c 01       	movw	r14, r24
    3f1a:	f8 01       	movw	r30, r16
    3f1c:	20 81       	ld	r18, Z
    3f1e:	31 81       	ldd	r19, Z+1	; 0x01
    3f20:	42 81       	ldd	r20, Z+2	; 0x02
    3f22:	53 81       	ldd	r21, Z+3	; 0x03
    3f24:	6c 81       	ldd	r22, Y+4	; 0x04
    3f26:	7d 81       	ldd	r23, Y+5	; 0x05
    3f28:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f2c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3f30:	9b 01       	movw	r18, r22
    3f32:	ac 01       	movw	r20, r24
    3f34:	c7 01       	movw	r24, r14
    3f36:	b6 01       	movw	r22, r12
    3f38:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    3f3c:	f5 01       	movw	r30, r10
    3f3e:	60 87       	std	Z+8, r22	; 0x08
    3f40:	71 87       	std	Z+9, r23	; 0x09
    3f42:	82 87       	std	Z+10, r24	; 0x0a
    3f44:	93 87       	std	Z+11, r25	; 0x0b
}
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	1f 91       	pop	r17
    3f4c:	0f 91       	pop	r16
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	bf 90       	pop	r11
    3f58:	af 90       	pop	r10
    3f5a:	08 95       	ret

00003f5c <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    3f5c:	cf 92       	push	r12
    3f5e:	df 92       	push	r13
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	cf 93       	push	r28
    3f66:	df 93       	push	r29
    3f68:	ec 01       	movw	r28, r24
    3f6a:	6a 01       	movw	r12, r20
    3f6c:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3f6e:	9a 01       	movw	r18, r20
    3f70:	ab 01       	movw	r20, r22
    3f72:	68 81       	ld	r22, Y
    3f74:	79 81       	ldd	r23, Y+1	; 0x01
    3f76:	8a 81       	ldd	r24, Y+2	; 0x02
    3f78:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3f7e:	68 83       	st	Y, r22
    3f80:	79 83       	std	Y+1, r23	; 0x01
    3f82:	8a 83       	std	Y+2, r24	; 0x02
    3f84:	9b 83       	std	Y+3, r25	; 0x03
    3f86:	a7 01       	movw	r20, r14
    3f88:	96 01       	movw	r18, r12
    3f8a:	6c 81       	ldd	r22, Y+4	; 0x04
    3f8c:	7d 81       	ldd	r23, Y+5	; 0x05
    3f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f90:	9f 81       	ldd	r25, Y+7	; 0x07
    3f92:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3f96:	6c 83       	std	Y+4, r22	; 0x04
    3f98:	7d 83       	std	Y+5, r23	; 0x05
    3f9a:	8e 83       	std	Y+6, r24	; 0x06
    3f9c:	9f 83       	std	Y+7, r25	; 0x07
    3f9e:	a7 01       	movw	r20, r14
    3fa0:	96 01       	movw	r18, r12
    3fa2:	68 85       	ldd	r22, Y+8	; 0x08
    3fa4:	79 85       	ldd	r23, Y+9	; 0x09
    3fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3faa:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3fae:	68 87       	std	Y+8, r22	; 0x08
    3fb0:	79 87       	std	Y+9, r23	; 0x09
    3fb2:	8a 87       	std	Y+10, r24	; 0x0a
    3fb4:	9b 87       	std	Y+11, r25	; 0x0b
}
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	ff 90       	pop	r15
    3fbc:	ef 90       	pop	r14
    3fbe:	df 90       	pop	r13
    3fc0:	cf 90       	pop	r12
    3fc2:	08 95       	ret

00003fc4 <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    3fc4:	cf 92       	push	r12
    3fc6:	df 92       	push	r13
    3fc8:	ef 92       	push	r14
    3fca:	ff 92       	push	r15
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	6a 01       	movw	r12, r20
    3fd4:	7b 01       	movw	r14, r22
    3fd6:	ec 01       	movw	r28, r24
  uint8_t i;
  for(i = 0; i < 4; i++)
    3fd8:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] * s;
    3fda:	a7 01       	movw	r20, r14
    3fdc:	96 01       	movw	r18, r12
    3fde:	68 81       	ld	r22, Y
    3fe0:	79 81       	ldd	r23, Y+1	; 0x01
    3fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    3fea:	69 93       	st	Y+, r22
    3fec:	79 93       	st	Y+, r23
    3fee:	89 93       	st	Y+, r24
    3ff0:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3ff2:	1f 5f       	subi	r17, 0xFF	; 255
    3ff4:	14 30       	cpi	r17, 0x04	; 4
    3ff6:	89 f7       	brne	.-30     	; 0x3fda <scalar_into_quaternion+0x16>
    q[i] = q[i] * s;
}
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	cf 90       	pop	r12
    4006:	08 95       	ret

00004008 <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    4016:	a3 dd       	rcall	.-1210   	; 0x3b5e <vector_norm>
    4018:	6b 01       	movw	r12, r22
    401a:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    401c:	9b 01       	movw	r18, r22
    401e:	ac 01       	movw	r20, r24
    4020:	68 81       	ld	r22, Y
    4022:	79 81       	ldd	r23, Y+1	; 0x01
    4024:	8a 81       	ldd	r24, Y+2	; 0x02
    4026:	9b 81       	ldd	r25, Y+3	; 0x03
    4028:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    402c:	68 83       	st	Y, r22
    402e:	79 83       	std	Y+1, r23	; 0x01
    4030:	8a 83       	std	Y+2, r24	; 0x02
    4032:	9b 83       	std	Y+3, r25	; 0x03
    4034:	a7 01       	movw	r20, r14
    4036:	96 01       	movw	r18, r12
    4038:	6c 81       	ldd	r22, Y+4	; 0x04
    403a:	7d 81       	ldd	r23, Y+5	; 0x05
    403c:	8e 81       	ldd	r24, Y+6	; 0x06
    403e:	9f 81       	ldd	r25, Y+7	; 0x07
    4040:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4044:	6c 83       	std	Y+4, r22	; 0x04
    4046:	7d 83       	std	Y+5, r23	; 0x05
    4048:	8e 83       	std	Y+6, r24	; 0x06
    404a:	9f 83       	std	Y+7, r25	; 0x07
    404c:	a7 01       	movw	r20, r14
    404e:	96 01       	movw	r18, r12
    4050:	68 85       	ldd	r22, Y+8	; 0x08
    4052:	79 85       	ldd	r23, Y+9	; 0x09
    4054:	8a 85       	ldd	r24, Y+10	; 0x0a
    4056:	9b 85       	ldd	r25, Y+11	; 0x0b
    4058:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    405c:	68 87       	std	Y+8, r22	; 0x08
    405e:	79 87       	std	Y+9, r23	; 0x09
    4060:	8a 87       	std	Y+10, r24	; 0x0a
    4062:	9b 87       	std	Y+11, r25	; 0x0b
}
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	df 90       	pop	r13
    406e:	cf 90       	pop	r12
    4070:	08 95       	ret

00004072 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    4072:	cf 92       	push	r12
    4074:	df 92       	push	r13
    4076:	ef 92       	push	r14
    4078:	ff 92       	push	r15
    407a:	0f 93       	push	r16
    407c:	1f 93       	push	r17
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	08 2f       	mov	r16, r24
    4084:	19 2f       	mov	r17, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    4086:	b3 dd       	rcall	.-1178   	; 0x3bee <quaternion_norm>
    4088:	6b 01       	movw	r12, r22
    408a:	7c 01       	movw	r14, r24
    408c:	c0 2f       	mov	r28, r16
    408e:	d1 2f       	mov	r29, r17
  
  for(i = 0; i < 4; i++)
    4090:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] / norm;
    4092:	a7 01       	movw	r20, r14
    4094:	96 01       	movw	r18, r12
    4096:	68 81       	ld	r22, Y
    4098:	79 81       	ldd	r23, Y+1	; 0x01
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	9b 81       	ldd	r25, Y+3	; 0x03
    409e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    40a2:	69 93       	st	Y+, r22
    40a4:	79 93       	st	Y+, r23
    40a6:	89 93       	st	Y+, r24
    40a8:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    40aa:	1f 5f       	subi	r17, 0xFF	; 255
    40ac:	14 30       	cpi	r17, 0x04	; 4
    40ae:	89 f7       	brne	.-30     	; 0x4092 <convert_unit_quaternion+0x20>
    q[i] = q[i] / norm;
}
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	08 95       	ret

000040c2 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    40c2:	57 9a       	sbi	0x0a, 7	; 10
    40c4:	08 95       	ret

000040c6 <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS1();// make this poll_ss()
    40c6:	0c 94 b3 2b 	jmp	0x5766	; 0x5766 <poll_SS1>
    40ca:	08 95       	ret

000040cc <read_MM>:
void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
 // poll_MM(); //for uart 1
  poll_MM1();// for uart0
    40cc:	d6 cb       	rjmp	.-2132   	; 0x387a <poll_MM1>
    40ce:	08 95       	ret

000040d0 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    40d0:	84 b3       	in	r24, 0x14	; 20
    40d2:	88 63       	ori	r24, 0x38	; 56
    40d4:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    40d6:	82 b1       	in	r24, 0x02	; 2
    40d8:	88 63       	ori	r24, 0x38	; 56
    40da:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    40dc:	ab e8       	ldi	r26, 0x8B	; 139
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	1c 92       	st	X, r1
  TCCR3B = 0;
    40e2:	ea e8       	ldi	r30, 0x8A	; 138
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	10 82       	st	Z, r1
  TCCR3C = 0;
    40e8:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    40ec:	8c 91       	ld	r24, X
    40ee:	8a 6a       	ori	r24, 0xAA	; 170
    40f0:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    40f2:	80 81       	ld	r24, Z
    40f4:	81 61       	ori	r24, 0x11	; 17
    40f6:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    40f8:	8f ef       	ldi	r24, 0xFF	; 255
    40fa:	9f ef       	ldi	r25, 0xFF	; 255
    40fc:	90 93 81 00 	sts	0x0081, r25
    4100:	80 93 80 00 	sts	0x0080, r24
  OCR3A = 0x0000;
    4104:	10 92 87 00 	sts	0x0087, r1
    4108:	10 92 86 00 	sts	0x0086, r1
  OCR3B = 0x0000;
    410c:	10 92 85 00 	sts	0x0085, r1
    4110:	10 92 84 00 	sts	0x0084, r1
  OCR3C = 0x0000;
    4114:	10 92 83 00 	sts	0x0083, r1
    4118:	10 92 82 00 	sts	0x0082, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    411c:	85 b3       	in	r24, 0x15	; 21
    411e:	87 7c       	andi	r24, 0xC7	; 199
    4120:	85 bb       	out	0x15, r24	; 21
    4122:	08 95       	ret

00004124 <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4124:	85 b3       	in	r24, 0x15	; 21
    4126:	87 7c       	andi	r24, 0xC7	; 199
    4128:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    412a:	80 91 1b 05 	lds	r24, 0x051B
    412e:	88 23       	and	r24, r24
    4130:	11 f0       	breq	.+4      	; 0x4136 <set_PWM+0x12>
   PORTC |= _BV(PC5);
    4132:	ad 9a       	sbi	0x15, 5	; 21
    4134:	01 c0       	rjmp	.+2      	; 0x4138 <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    4136:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    4138:	80 91 1c 05 	lds	r24, 0x051C
    413c:	88 23       	and	r24, r24
    413e:	11 f0       	breq	.+4      	; 0x4144 <set_PWM+0x20>
   PORTC |= _BV(PC4);
    4140:	ac 9a       	sbi	0x15, 4	; 21
    4142:	01 c0       	rjmp	.+2      	; 0x4146 <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    4144:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    4146:	80 91 1d 05 	lds	r24, 0x051D
    414a:	88 23       	and	r24, r24
    414c:	11 f0       	breq	.+4      	; 0x4152 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    414e:	ab 9a       	sbi	0x15, 3	; 21
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    4152:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    4154:	80 91 15 05 	lds	r24, 0x0515
    4158:	90 91 16 05 	lds	r25, 0x0516
    415c:	90 93 87 00 	sts	0x0087, r25
    4160:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
    4164:	80 91 17 05 	lds	r24, 0x0517
    4168:	90 91 18 05 	lds	r25, 0x0518
    416c:	90 93 85 00 	sts	0x0085, r25
    4170:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
    4174:	80 91 19 05 	lds	r24, 0x0519
    4178:	90 91 1a 05 	lds	r25, 0x051A
    417c:	90 93 83 00 	sts	0x0083, r25
    4180:	80 93 82 00 	sts	0x0082, r24
    4184:	08 95       	ret

00004186 <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    4186:	10 92 16 05 	sts	0x0516, r1
    418a:	10 92 15 05 	sts	0x0515, r1
  Current_state.pwm.y = 0;
    418e:	10 92 18 05 	sts	0x0518, r1
    4192:	10 92 17 05 	sts	0x0517, r1
  Current_state.pwm.z = 0;
    4196:	10 92 1a 05 	sts	0x051A, r1
    419a:	10 92 19 05 	sts	0x0519, r1
  Current_state.pwm.x_dir = 0;
    419e:	10 92 1b 05 	sts	0x051B, r1
  Current_state.pwm.y_dir = 0;
    41a2:	10 92 1c 05 	sts	0x051C, r1
  Current_state.pwm.z_dir = 0;
    41a6:	10 92 1d 05 	sts	0x051D, r1
  set_PWM();
    41aa:	bc cf       	rjmp	.-136    	; 0x4124 <set_PWM>
    41ac:	08 95       	ret

000041ae <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    41ae:	ef 92       	push	r14
    41b0:	ff 92       	push	r15
    41b2:	0f 93       	push	r16
    41b4:	1f 93       	push	r17
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    41ba:	10 92 dd 04 	sts	0x04DD, r1
    41be:	10 92 dc 04 	sts	0x04DC, r1
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    41c2:	60 91 ad 04 	lds	r22, 0x04AD
    41c6:	70 91 ae 04 	lds	r23, 0x04AE
    41ca:	80 91 af 04 	lds	r24, 0x04AF
    41ce:	90 91 b0 04 	lds	r25, 0x04B0
    41d2:	0f 2e       	mov	r0, r31
    41d4:	fa e1       	ldi	r31, 0x1A	; 26
    41d6:	ef 2e       	mov	r14, r31
    41d8:	f4 e0       	ldi	r31, 0x04	; 4
    41da:	ff 2e       	mov	r15, r31
    41dc:	f0 2d       	mov	r31, r0
    41de:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	48 ec       	ldi	r20, 0xC8	; 200
    41e8:	52 e4       	ldi	r21, 0x42	; 66
    41ea:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    41ee:	f7 01       	movw	r30, r14
    41f0:	60 83       	st	Z, r22
    41f2:	71 83       	std	Z+1, r23	; 0x01
    41f4:	82 83       	std	Z+2, r24	; 0x02
    41f6:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    41f8:	60 91 b1 04 	lds	r22, 0x04B1
    41fc:	70 91 b2 04 	lds	r23, 0x04B2
    4200:	80 91 b3 04 	lds	r24, 0x04B3
    4204:	90 91 b4 04 	lds	r25, 0x04B4
    4208:	0e e1       	ldi	r16, 0x1E	; 30
    420a:	14 e0       	ldi	r17, 0x04	; 4
    420c:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	48 ec       	ldi	r20, 0xC8	; 200
    4216:	52 e4       	ldi	r21, 0x42	; 66
    4218:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    421c:	f8 01       	movw	r30, r16
    421e:	60 83       	st	Z, r22
    4220:	71 83       	std	Z+1, r23	; 0x01
    4222:	82 83       	std	Z+2, r24	; 0x02
    4224:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    4226:	60 91 b5 04 	lds	r22, 0x04B5
    422a:	70 91 b6 04 	lds	r23, 0x04B6
    422e:	80 91 b7 04 	lds	r24, 0x04B7
    4232:	90 91 b8 04 	lds	r25, 0x04B8
    4236:	c2 e2       	ldi	r28, 0x22	; 34
    4238:	d4 e0       	ldi	r29, 0x04	; 4
    423a:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	48 ec       	ldi	r20, 0xC8	; 200
    4244:	52 e4       	ldi	r21, 0x42	; 66
    4246:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    424a:	68 83       	st	Y, r22
    424c:	79 83       	std	Y+1, r23	; 0x01
    424e:	8a 83       	std	Y+2, r24	; 0x02
    4250:	9b 83       	std	Y+3, r25	; 0x03
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    4252:	60 91 b9 04 	lds	r22, 0x04B9
    4256:	70 91 ba 04 	lds	r23, 0x04BA
    425a:	80 91 bb 04 	lds	r24, 0x04BB
    425e:	90 91 bc 04 	lds	r25, 0x04BC
    4262:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	4a e7       	ldi	r20, 0x7A	; 122
    426c:	54 e4       	ldi	r21, 0x44	; 68
    426e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4272:	60 93 0e 04 	sts	0x040E, r22
    4276:	70 93 0f 04 	sts	0x040F, r23
    427a:	80 93 10 04 	sts	0x0410, r24
    427e:	90 93 11 04 	sts	0x0411, r25
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    4282:	60 91 bd 04 	lds	r22, 0x04BD
    4286:	70 91 be 04 	lds	r23, 0x04BE
    428a:	80 91 bf 04 	lds	r24, 0x04BF
    428e:	90 91 c0 04 	lds	r25, 0x04C0
    4292:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	4a e7       	ldi	r20, 0x7A	; 122
    429c:	54 e4       	ldi	r21, 0x44	; 68
    429e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    42a2:	60 93 12 04 	sts	0x0412, r22
    42a6:	70 93 13 04 	sts	0x0413, r23
    42aa:	80 93 14 04 	sts	0x0414, r24
    42ae:	90 93 15 04 	sts	0x0415, r25
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    42b2:	60 91 c1 04 	lds	r22, 0x04C1
    42b6:	70 91 c2 04 	lds	r23, 0x04C2
    42ba:	80 91 c3 04 	lds	r24, 0x04C3
    42be:	90 91 c4 04 	lds	r25, 0x04C4
    42c2:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	4a e7       	ldi	r20, 0x7A	; 122
    42cc:	54 e4       	ldi	r21, 0x44	; 68
    42ce:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    42d2:	60 93 16 04 	sts	0x0416, r22
    42d6:	70 93 17 04 	sts	0x0417, r23
    42da:	80 93 18 04 	sts	0x0418, r24
    42de:	90 93 19 04 	sts	0x0419, r25
   
  get_seconds_since_equinox();//check
    42e2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    42e6:	f7 01       	movw	r30, r14
    42e8:	80 81       	ld	r24, Z
    42ea:	91 81       	ldd	r25, Z+1	; 0x01
    42ec:	a2 81       	ldd	r26, Z+2	; 0x02
    42ee:	b3 81       	ldd	r27, Z+3	; 0x03
    42f0:	80 93 36 04 	sts	0x0436, r24
    42f4:	90 93 37 04 	sts	0x0437, r25
    42f8:	a0 93 38 04 	sts	0x0438, r26
    42fc:	b0 93 39 04 	sts	0x0439, r27
  r_ecef_ash[1] = v_r_ecef[1];
    4300:	f8 01       	movw	r30, r16
    4302:	80 81       	ld	r24, Z
    4304:	91 81       	ldd	r25, Z+1	; 0x01
    4306:	a2 81       	ldd	r26, Z+2	; 0x02
    4308:	b3 81       	ldd	r27, Z+3	; 0x03
    430a:	80 93 3a 04 	sts	0x043A, r24
    430e:	90 93 3b 04 	sts	0x043B, r25
    4312:	a0 93 3c 04 	sts	0x043C, r26
    4316:	b0 93 3d 04 	sts	0x043D, r27
  r_ecef_ash[2] = v_r_ecef[2];
    431a:	88 81       	ld	r24, Y
    431c:	99 81       	ldd	r25, Y+1	; 0x01
    431e:	aa 81       	ldd	r26, Y+2	; 0x02
    4320:	bb 81       	ldd	r27, Y+3	; 0x03
    4322:	80 93 3e 04 	sts	0x043E, r24
    4326:	90 93 3f 04 	sts	0x043F, r25
    432a:	a0 93 40 04 	sts	0x0440, r26
    432e:	b0 93 41 04 	sts	0x0441, r27
  ecef2eci(v_r_ecef, v_r);
    4332:	62 e4       	ldi	r22, 0x42	; 66
    4334:	74 e0       	ldi	r23, 0x04	; 4
    4336:	c7 01       	movw	r24, r14
    4338:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    433c:	6a e2       	ldi	r22, 0x2A	; 42
    433e:	74 e0       	ldi	r23, 0x04	; 4
    4340:	8e e0       	ldi	r24, 0x0E	; 14
    4342:	94 e0       	ldi	r25, 0x04	; 4
    4344:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4348:	60 91 c5 04 	lds	r22, 0x04C5
    434c:	70 91 c6 04 	lds	r23, 0x04C6
    4350:	80 91 c7 04 	lds	r24, 0x04C7
    4354:	90 91 c8 04 	lds	r25, 0x04C8
    4358:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    435c:	20 e8       	ldi	r18, 0x80	; 128
    435e:	36 e9       	ldi	r19, 0x96	; 150
    4360:	48 e1       	ldi	r20, 0x18	; 24
    4362:	5b e4       	ldi	r21, 0x4B	; 75
    4364:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4368:	25 e3       	ldi	r18, 0x35	; 53
    436a:	3a ef       	ldi	r19, 0xFA	; 250
    436c:	4e e8       	ldi	r20, 0x8E	; 142
    436e:	5c e3       	ldi	r21, 0x3C	; 60
    4370:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4374:	60 93 a1 04 	sts	0x04A1, r22
    4378:	70 93 a2 04 	sts	0x04A2, r23
    437c:	80 93 a3 04 	sts	0x04A3, r24
    4380:	90 93 a4 04 	sts	0x04A4, r25
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    4384:	60 91 c9 04 	lds	r22, 0x04C9
    4388:	70 91 ca 04 	lds	r23, 0x04CA
    438c:	80 91 cb 04 	lds	r24, 0x04CB
    4390:	90 91 cc 04 	lds	r25, 0x04CC
    4394:	0e 94 00 33 	call	0x6600	; 0x6600 <__floatsisf>
    4398:	20 e8       	ldi	r18, 0x80	; 128
    439a:	36 e9       	ldi	r19, 0x96	; 150
    439c:	48 e1       	ldi	r20, 0x18	; 24
    439e:	5b e4       	ldi	r21, 0x4B	; 75
    43a0:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    43a4:	25 e3       	ldi	r18, 0x35	; 53
    43a6:	3a ef       	ldi	r19, 0xFA	; 250
    43a8:	4e e8       	ldi	r20, 0x8E	; 142
    43aa:	5c e3       	ldi	r21, 0x3C	; 60
    43ac:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    43b0:	60 93 a5 04 	sts	0x04A5, r22
    43b4:	70 93 a6 04 	sts	0x04A6, r23
    43b8:	80 93 a7 04 	sts	0x04A7, r24
    43bc:	90 93 a8 04 	sts	0x04A8, r25
  
  GPS_done = 0;
    43c0:	10 92 27 01 	sts	0x0127, r1
}
    43c4:	df 91       	pop	r29
    43c6:	cf 91       	pop	r28
    43c8:	1f 91       	pop	r17
    43ca:	0f 91       	pop	r16
    43cc:	ff 90       	pop	r15
    43ce:	ef 90       	pop	r14
    43d0:	08 95       	ret

000043d2 <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    43d2:	4f 92       	push	r4
    43d4:	5f 92       	push	r5
    43d6:	6f 92       	push	r6
    43d8:	7f 92       	push	r7
    43da:	8f 92       	push	r8
    43dc:	9f 92       	push	r9
    43de:	af 92       	push	r10
    43e0:	bf 92       	push	r11
    43e2:	cf 92       	push	r12
    43e4:	df 92       	push	r13
    43e6:	ef 92       	push	r14
    43e8:	ff 92       	push	r15
    43ea:	0f 93       	push	r16
    43ec:	1f 93       	push	r17
    43ee:	cf 93       	push	r28
    43f0:	df 93       	push	r29
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	64 97       	sbiw	r28, 0x14	; 20
    43f8:	0f b6       	in	r0, 0x3f	; 63
    43fa:	f8 94       	cli
    43fc:	de bf       	out	0x3e, r29	; 62
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	8c 01       	movw	r16, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    4404:	86 e3       	ldi	r24, 0x36	; 54
    4406:	94 e0       	ldi	r25, 0x04	; 4
    4408:	aa db       	rcall	.-2220   	; 0x3b5e <vector_norm>
    440a:	2b 01       	movw	r4, r22
    440c:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    440e:	9b 01       	movw	r18, r22
    4410:	ac 01       	movw	r20, r24
    4412:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4416:	9b 01       	movw	r18, r22
    4418:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    441a:	61 eb       	ldi	r22, 0xB1	; 177
    441c:	7a e1       	ldi	r23, 0x1A	; 26
    441e:	86 e7       	ldi	r24, 0x76	; 118
    4420:	91 e5       	ldi	r25, 0x51	; 81
    4422:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4426:	6d 87       	std	Y+13, r22	; 0x0d
    4428:	7e 87       	std	Y+14, r23	; 0x0e
    442a:	8f 87       	std	Y+15, r24	; 0x0f
    442c:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	40 e4       	ldi	r20, 0x40	; 64
    4434:	50 e4       	ldi	r21, 0x40	; 64
    4436:	c3 01       	movw	r24, r6
    4438:	b2 01       	movw	r22, r4
    443a:	0e 94 e6 34 	call	0x69cc	; 0x69cc <pow>
    443e:	6b 01       	movw	r12, r22
    4440:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e8       	ldi	r20, 0x80	; 128
    4448:	50 e4       	ldi	r21, 0x40	; 64
    444a:	c3 01       	movw	r24, r6
    444c:	b2 01       	movw	r22, r4
    444e:	0e 94 e6 34 	call	0x69cc	; 0x69cc <pow>
    4452:	2b 01       	movw	r4, r22
    4454:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    4456:	80 90 3e 04 	lds	r8, 0x043E
    445a:	90 90 3f 04 	lds	r9, 0x043F
    445e:	a0 90 40 04 	lds	r10, 0x0440
    4462:	b0 90 41 04 	lds	r11, 0x0441
    4466:	a5 01       	movw	r20, r10
    4468:	94 01       	movw	r18, r8
    446a:	c5 01       	movw	r24, r10
    446c:	b4 01       	movw	r22, r8
    446e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4472:	28 e9       	ldi	r18, 0x98	; 152
    4474:	38 e0       	ldi	r19, 0x08	; 8
    4476:	45 e0       	ldi	r20, 0x05	; 5
    4478:	5c e3       	ldi	r21, 0x3C	; 60
    447a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    447e:	2a ec       	ldi	r18, 0xCA	; 202
    4480:	3e ef       	ldi	r19, 0xFE	; 254
    4482:	43 e1       	ldi	r20, 0x13	; 19
    4484:	56 e5       	ldi	r21, 0x56	; 86
    4486:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    448a:	a3 01       	movw	r20, r6
    448c:	92 01       	movw	r18, r4
    448e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4492:	69 8b       	std	Y+17, r22	; 0x11
    4494:	7a 8b       	std	Y+18, r23	; 0x12
    4496:	8b 8b       	std	Y+19, r24	; 0x13
    4498:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e8       	ldi	r20, 0x80	; 128
    44a0:	5f e3       	ldi	r21, 0x3F	; 63
    44a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    44a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    44a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a8:	98 89       	ldd	r25, Y+16	; 0x10
    44aa:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    44ae:	29 89       	ldd	r18, Y+17	; 0x11
    44b0:	3a 89       	ldd	r19, Y+18	; 0x12
    44b2:	4b 89       	ldd	r20, Y+19	; 0x13
    44b4:	5c 89       	ldd	r21, Y+20	; 0x14
    44b6:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    44ba:	2b 01       	movw	r4, r22
    44bc:	3c 01       	movw	r6, r24
    44be:	21 ef       	ldi	r18, 0xF1	; 241
    44c0:	39 e4       	ldi	r19, 0x49	; 73
    44c2:	45 eb       	ldi	r20, 0xB5	; 181
    44c4:	57 ed       	ldi	r21, 0xD7	; 215
    44c6:	60 91 36 04 	lds	r22, 0x0436
    44ca:	70 91 37 04 	lds	r23, 0x0437
    44ce:	80 91 38 04 	lds	r24, 0x0438
    44d2:	90 91 39 04 	lds	r25, 0x0439
    44d6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    44da:	a3 01       	movw	r20, r6
    44dc:	92 01       	movw	r18, r4
    44de:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    44e2:	a7 01       	movw	r20, r14
    44e4:	96 01       	movw	r18, r12
    44e6:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    44ea:	69 83       	std	Y+1, r22	; 0x01
    44ec:	7a 83       	std	Y+2, r23	; 0x02
    44ee:	8b 83       	std	Y+3, r24	; 0x03
    44f0:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    44f2:	21 ef       	ldi	r18, 0xF1	; 241
    44f4:	39 e4       	ldi	r19, 0x49	; 73
    44f6:	45 eb       	ldi	r20, 0xB5	; 181
    44f8:	57 ed       	ldi	r21, 0xD7	; 215
    44fa:	60 91 3a 04 	lds	r22, 0x043A
    44fe:	70 91 3b 04 	lds	r23, 0x043B
    4502:	80 91 3c 04 	lds	r24, 0x043C
    4506:	90 91 3d 04 	lds	r25, 0x043D
    450a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    450e:	9b 01       	movw	r18, r22
    4510:	ac 01       	movw	r20, r24
    4512:	c3 01       	movw	r24, r6
    4514:	b2 01       	movw	r22, r4
    4516:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    451a:	a7 01       	movw	r20, r14
    451c:	96 01       	movw	r18, r12
    451e:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4522:	6d 83       	std	Y+5, r22	; 0x05
    4524:	7e 83       	std	Y+6, r23	; 0x06
    4526:	8f 83       	std	Y+7, r24	; 0x07
    4528:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    452a:	21 ef       	ldi	r18, 0xF1	; 241
    452c:	39 e4       	ldi	r19, 0x49	; 73
    452e:	45 eb       	ldi	r20, 0xB5	; 181
    4530:	57 ed       	ldi	r21, 0xD7	; 215
    4532:	c5 01       	movw	r24, r10
    4534:	b4 01       	movw	r22, r8
    4536:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    453a:	2b 01       	movw	r4, r22
    453c:	3c 01       	movw	r6, r24
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e4       	ldi	r20, 0x40	; 64
    4544:	50 e4       	ldi	r21, 0x40	; 64
    4546:	6d 85       	ldd	r22, Y+13	; 0x0d
    4548:	7e 85       	ldd	r23, Y+14	; 0x0e
    454a:	8f 85       	ldd	r24, Y+15	; 0x0f
    454c:	98 89       	ldd	r25, Y+16	; 0x10
    454e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 e8       	ldi	r20, 0x80	; 128
    4558:	5f e3       	ldi	r21, 0x3F	; 63
    455a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    455e:	29 89       	ldd	r18, Y+17	; 0x11
    4560:	3a 89       	ldd	r19, Y+18	; 0x12
    4562:	4b 89       	ldd	r20, Y+19	; 0x13
    4564:	5c 89       	ldd	r21, Y+20	; 0x14
    4566:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    456a:	9b 01       	movw	r18, r22
    456c:	ac 01       	movw	r20, r24
    456e:	c3 01       	movw	r24, r6
    4570:	b2 01       	movw	r22, r4
    4572:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4576:	a7 01       	movw	r20, r14
    4578:	96 01       	movw	r18, r12
    457a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    457e:	69 87       	std	Y+9, r22	; 0x09
    4580:	7a 87       	std	Y+10, r23	; 0x0a
    4582:	8b 87       	std	Y+11, r24	; 0x0b
    4584:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    4586:	b8 01       	movw	r22, r16
    4588:	ce 01       	movw	r24, r28
    458a:	01 96       	adiw	r24, 0x01	; 1
    458c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    4590:	64 96       	adiw	r28, 0x14	; 20
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
    459c:	df 91       	pop	r29
    459e:	cf 91       	pop	r28
    45a0:	1f 91       	pop	r17
    45a2:	0f 91       	pop	r16
    45a4:	ff 90       	pop	r15
    45a6:	ef 90       	pop	r14
    45a8:	df 90       	pop	r13
    45aa:	cf 90       	pop	r12
    45ac:	bf 90       	pop	r11
    45ae:	af 90       	pop	r10
    45b0:	9f 90       	pop	r9
    45b2:	8f 90       	pop	r8
    45b4:	7f 90       	pop	r7
    45b6:	6f 90       	pop	r6
    45b8:	5f 90       	pop	r5
    45ba:	4f 90       	pop	r4
    45bc:	08 95       	ret

000045be <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    45be:	4f 92       	push	r4
    45c0:	5f 92       	push	r5
    45c2:	7f 92       	push	r7
    45c4:	8f 92       	push	r8
    45c6:	9f 92       	push	r9
    45c8:	af 92       	push	r10
    45ca:	bf 92       	push	r11
    45cc:	cf 92       	push	r12
    45ce:	df 92       	push	r13
    45d0:	ef 92       	push	r14
    45d2:	ff 92       	push	r15
    45d4:	0f 93       	push	r16
    45d6:	1f 93       	push	r17
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
    45e0:	68 97       	sbiw	r28, 0x18	; 24
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	0f 2e       	mov	r0, r31
    45ee:	fa e0       	ldi	r31, 0x0A	; 10
    45f0:	7f 2e       	mov	r7, r31
    45f2:	f0 2d       	mov	r31, r0
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    45f4:	5e 01       	movw	r10, r28
    45f6:	8d e0       	ldi	r24, 0x0D	; 13
    45f8:	a8 0e       	add	r10, r24
    45fa:	b1 1c       	adc	r11, r1
    45fc:	0f 2e       	mov	r0, r31
    45fe:	f2 e4       	ldi	r31, 0x42	; 66
    4600:	4f 2e       	mov	r4, r31
    4602:	f4 e0       	ldi	r31, 0x04	; 4
    4604:	5f 2e       	mov	r5, r31
    4606:	f0 2d       	mov	r31, r0
    4608:	0f 2e       	mov	r0, r31
    460a:	f6 e3       	ldi	r31, 0x36	; 54
    460c:	cf 2e       	mov	r12, r31
    460e:	f4 e0       	ldi	r31, 0x04	; 4
    4610:	df 2e       	mov	r13, r31
    4612:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    4614:	ce 01       	movw	r24, r28
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	dc de       	rcall	.-584    	; 0x43d2 <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    461a:	b5 01       	movw	r22, r10
    461c:	8a e2       	ldi	r24, 0x2A	; 42
    461e:	94 e0       	ldi	r25, 0x04	; 4
    4620:	6f da       	rcall	.-2850   	; 0x3b00 <copy_vector>
    4622:	fe 01       	movw	r30, r28
    4624:	31 96       	adiw	r30, 0x01	; 1
    4626:	7f 01       	movw	r14, r30
    4628:	45 01       	movw	r8, r10
    462a:	0a e2       	ldi	r16, 0x2A	; 42
    462c:	14 e0       	ldi	r17, 0x04	; 4
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    462e:	f7 01       	movw	r30, r14
    4630:	61 91       	ld	r22, Z+
    4632:	71 91       	ld	r23, Z+
    4634:	81 91       	ld	r24, Z+
    4636:	91 91       	ld	r25, Z+
    4638:	7f 01       	movw	r14, r30
    463a:	2d ec       	ldi	r18, 0xCD	; 205
    463c:	3c ec       	ldi	r19, 0xCC	; 204
    463e:	4c e4       	ldi	r20, 0x4C	; 76
    4640:	5e e3       	ldi	r21, 0x3E	; 62
    4642:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4646:	9b 01       	movw	r18, r22
    4648:	ac 01       	movw	r20, r24
    464a:	f8 01       	movw	r30, r16
    464c:	60 81       	ld	r22, Z
    464e:	71 81       	ldd	r23, Z+1	; 0x01
    4650:	82 81       	ldd	r24, Z+2	; 0x02
    4652:	93 81       	ldd	r25, Z+3	; 0x03
    4654:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4658:	f8 01       	movw	r30, r16
    465a:	61 93       	st	Z+, r22
    465c:	71 93       	st	Z+, r23
    465e:	81 93       	st	Z+, r24
    4660:	91 93       	st	Z+, r25
    4662:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    4664:	e8 14       	cp	r14, r8
    4666:	f9 04       	cpc	r15, r9
    4668:	11 f7       	brne	.-60     	; 0x462e <sgp_orbit_propagator+0x70>
    466a:	45 01       	movw	r8, r10
    466c:	72 01       	movw	r14, r4
    466e:	0a e2       	ldi	r16, 0x2A	; 42
    4670:	14 e0       	ldi	r17, 0x04	; 4
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4672:	f8 01       	movw	r30, r16
    4674:	61 91       	ld	r22, Z+
    4676:	71 91       	ld	r23, Z+
    4678:	81 91       	ld	r24, Z+
    467a:	91 91       	ld	r25, Z+
    467c:	8f 01       	movw	r16, r30
    467e:	f4 01       	movw	r30, r8
    4680:	21 91       	ld	r18, Z+
    4682:	31 91       	ld	r19, Z+
    4684:	41 91       	ld	r20, Z+
    4686:	51 91       	ld	r21, Z+
    4688:	4f 01       	movw	r8, r30
    468a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e0       	ldi	r20, 0x00	; 0
    4694:	5f e3       	ldi	r21, 0x3F	; 63
    4696:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    469a:	2d ec       	ldi	r18, 0xCD	; 205
    469c:	3c ec       	ldi	r19, 0xCC	; 204
    469e:	4c e4       	ldi	r20, 0x4C	; 76
    46a0:	5e e3       	ldi	r21, 0x3E	; 62
    46a2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    46a6:	9b 01       	movw	r18, r22
    46a8:	ac 01       	movw	r20, r24
    46aa:	f7 01       	movw	r30, r14
    46ac:	60 81       	ld	r22, Z
    46ae:	71 81       	ldd	r23, Z+1	; 0x01
    46b0:	82 81       	ldd	r24, Z+2	; 0x02
    46b2:	93 81       	ldd	r25, Z+3	; 0x03
    46b4:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    46b8:	f7 01       	movw	r30, r14
    46ba:	61 93       	st	Z+, r22
    46bc:	71 93       	st	Z+, r23
    46be:	81 93       	st	Z+, r24
    46c0:	91 93       	st	Z+, r25
    46c2:	7f 01       	movw	r14, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    46c4:	0c 15       	cp	r16, r12
    46c6:	1d 05       	cpc	r17, r13
    46c8:	a1 f6       	brne	.-88     	; 0x4672 <sgp_orbit_propagator+0xb4>
    46ca:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <sgp_orbit_propagator+0x112>
    46ce:	a2 cf       	rjmp	.-188    	; 0x4614 <sgp_orbit_propagator+0x56>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    46d0:	68 96       	adiw	r28, 0x18	; 24
    46d2:	0f b6       	in	r0, 0x3f	; 63
    46d4:	f8 94       	cli
    46d6:	de bf       	out	0x3e, r29	; 62
    46d8:	0f be       	out	0x3f, r0	; 63
    46da:	cd bf       	out	0x3d, r28	; 61
    46dc:	df 91       	pop	r29
    46de:	cf 91       	pop	r28
    46e0:	1f 91       	pop	r17
    46e2:	0f 91       	pop	r16
    46e4:	ff 90       	pop	r15
    46e6:	ef 90       	pop	r14
    46e8:	df 90       	pop	r13
    46ea:	cf 90       	pop	r12
    46ec:	bf 90       	pop	r11
    46ee:	af 90       	pop	r10
    46f0:	9f 90       	pop	r9
    46f2:	8f 90       	pop	r8
    46f4:	7f 90       	pop	r7
    46f6:	5f 90       	pop	r5
    46f8:	4f 90       	pop	r4
    46fa:	08 95       	ret

000046fc <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    46fc:	4f 92       	push	r4
    46fe:	5f 92       	push	r5
    4700:	6f 92       	push	r6
    4702:	7f 92       	push	r7
    4704:	8f 92       	push	r8
    4706:	9f 92       	push	r9
    4708:	af 92       	push	r10
    470a:	bf 92       	push	r11
    470c:	cf 92       	push	r12
    470e:	df 92       	push	r13
    4710:	ef 92       	push	r14
    4712:	ff 92       	push	r15
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	2c 97       	sbiw	r28, 0x0c	; 12
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    472e:	20 91 92 04 	lds	r18, 0x0492
    4732:	30 91 93 04 	lds	r19, 0x0493
    4736:	40 91 94 04 	lds	r20, 0x0494
    473a:	50 91 95 04 	lds	r21, 0x0495
    473e:	60 91 96 04 	lds	r22, 0x0496
    4742:	70 91 97 04 	lds	r23, 0x0497
    4746:	80 91 98 04 	lds	r24, 0x0498
    474a:	90 91 99 04 	lds	r25, 0x0499
    474e:	0e 94 3b 33 	call	0x6676	; 0x6676 <__floatundisf>
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	30 ec       	ldi	r19, 0xC0	; 192
    4756:	48 ea       	ldi	r20, 0xA8	; 168
    4758:	57 e4       	ldi	r21, 0x47	; 71
    475a:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    475e:	2b ed       	ldi	r18, 0xDB	; 219
    4760:	3f e0       	ldi	r19, 0x0F	; 15
    4762:	49 ec       	ldi	r20, 0xC9	; 201
    4764:	50 e4       	ldi	r21, 0x40	; 64
    4766:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    476a:	21 ed       	ldi	r18, 0xD1	; 209
    476c:	30 ea       	ldi	r19, 0xA0	; 160
    476e:	46 eb       	ldi	r20, 0xB6	; 182
    4770:	53 e4       	ldi	r21, 0x43	; 67
    4772:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4776:	4b 01       	movw	r8, r22
    4778:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    477a:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    477e:	20 e9       	ldi	r18, 0x90	; 144
    4780:	3e e2       	ldi	r19, 0x2E	; 46
    4782:	4c ec       	ldi	r20, 0xCC	; 204
    4784:	5e e3       	ldi	r21, 0x3E	; 62
    4786:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    478a:	0e 94 e5 31 	call	0x63ca	; 0x63ca <asin>
    478e:	6b 01       	movw	r12, r22
    4790:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    4792:	c5 01       	movw	r24, r10
    4794:	b4 01       	movw	r22, r8
    4796:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    479a:	2b 01       	movw	r4, r22
    479c:	3c 01       	movw	r6, r24
    479e:	c7 01       	movw	r24, r14
    47a0:	b6 01       	movw	r22, r12
    47a2:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    47a6:	4b 01       	movw	r8, r22
    47a8:	5c 01       	movw	r10, r24
    47aa:	9b 01       	movw	r18, r22
    47ac:	ac 01       	movw	r20, r24
    47ae:	c3 01       	movw	r24, r6
    47b0:	b2 01       	movw	r22, r4
    47b2:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    47b6:	0e 94 72 31 	call	0x62e4	; 0x62e4 <acos>
    47ba:	2b 01       	movw	r4, r22
    47bc:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	a9 01       	movw	r20, r18
    47c4:	c7 01       	movw	r24, r14
    47c6:	b6 01       	movw	r22, r12
    47c8:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    47cc:	88 23       	and	r24, r24
    47ce:	54 f4       	brge	.+20     	; 0x47e4 <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    47d0:	a3 01       	movw	r20, r6
    47d2:	92 01       	movw	r18, r4
    47d4:	6b ed       	ldi	r22, 0xDB	; 219
    47d6:	7f e0       	ldi	r23, 0x0F	; 15
    47d8:	89 ec       	ldi	r24, 0xC9	; 201
    47da:	90 e4       	ldi	r25, 0x40	; 64
    47dc:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    47e0:	2b 01       	movw	r4, r22
    47e2:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    47e4:	c3 01       	movw	r24, r6
    47e6:	b2 01       	movw	r22, r4
    47e8:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    47ec:	9b 01       	movw	r18, r22
    47ee:	ac 01       	movw	r20, r24
    47f0:	c5 01       	movw	r24, r10
    47f2:	b4 01       	movw	r22, r8
    47f4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    47f8:	69 83       	std	Y+1, r22	; 0x01
    47fa:	7a 83       	std	Y+2, r23	; 0x02
    47fc:	8b 83       	std	Y+3, r24	; 0x03
    47fe:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    4800:	c3 01       	movw	r24, r6
    4802:	b2 01       	movw	r22, r4
    4804:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    4808:	9b 01       	movw	r18, r22
    480a:	ac 01       	movw	r20, r24
    480c:	c5 01       	movw	r24, r10
    480e:	b4 01       	movw	r22, r8
    4810:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4814:	6d 83       	std	Y+5, r22	; 0x05
    4816:	7e 83       	std	Y+6, r23	; 0x06
    4818:	8f 83       	std	Y+7, r24	; 0x07
    481a:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    481c:	c7 01       	movw	r24, r14
    481e:	b6 01       	movw	r22, r12
    4820:	0e 94 32 35 	call	0x6a64	; 0x6a64 <sin>
    4824:	69 87       	std	Y+9, r22	; 0x09
    4826:	7a 87       	std	Y+10, r23	; 0x0a
    4828:	8b 87       	std	Y+11, r24	; 0x0b
    482a:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    482c:	2d ec       	ldi	r18, 0xCD	; 205
    482e:	3c ec       	ldi	r19, 0xCC	; 204
    4830:	4c ec       	ldi	r20, 0xCC	; 204
    4832:	5d e3       	ldi	r21, 0x3D	; 61
    4834:	60 91 26 04 	lds	r22, 0x0426
    4838:	70 91 27 04 	lds	r23, 0x0427
    483c:	80 91 28 04 	lds	r24, 0x0428
    4840:	90 91 29 04 	lds	r25, 0x0429
    4844:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4848:	60 93 26 04 	sts	0x0426, r22
    484c:	70 93 27 04 	sts	0x0427, r23
    4850:	80 93 28 04 	sts	0x0428, r24
    4854:	90 93 29 04 	sts	0x0429, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    4858:	98 01       	movw	r18, r16
    485a:	ae 01       	movw	r20, r28
    485c:	4f 5f       	subi	r20, 0xFF	; 255
    485e:	5f 4f       	sbci	r21, 0xFF	; 255
    4860:	6a e2       	ldi	r22, 0x2A	; 42
    4862:	74 e0       	ldi	r23, 0x04	; 4
    4864:	82 e4       	ldi	r24, 0x42	; 66
    4866:	94 e0       	ldi	r25, 0x04	; 4
    4868:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    486c:	2c 96       	adiw	r28, 0x0c	; 12
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	ff 90       	pop	r15
    4882:	ef 90       	pop	r14
    4884:	df 90       	pop	r13
    4886:	cf 90       	pop	r12
    4888:	bf 90       	pop	r11
    488a:	af 90       	pop	r10
    488c:	9f 90       	pop	r9
    488e:	8f 90       	pop	r8
    4890:	7f 90       	pop	r7
    4892:	6f 90       	pop	r6
    4894:	5f 90       	pop	r5
    4896:	4f 90       	pop	r4
    4898:	08 95       	ret

0000489a <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    489a:	af 92       	push	r10
    489c:	bf 92       	push	r11
    489e:	cf 92       	push	r12
    48a0:	df 92       	push	r13
    48a2:	ef 92       	push	r14
    48a4:	ff 92       	push	r15
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
    48b2:	e0 97       	sbiw	r28, 0x30	; 48
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	0f be       	out	0x3f, r0	; 63
    48bc:	cd bf       	out	0x3d, r28	; 61
    48be:	5c 01       	movw	r10, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    48c0:	20 91 8a 04 	lds	r18, 0x048A
    48c4:	30 91 8b 04 	lds	r19, 0x048B
    48c8:	40 91 8c 04 	lds	r20, 0x048C
    48cc:	50 91 8d 04 	lds	r21, 0x048D
    48d0:	60 91 8e 04 	lds	r22, 0x048E
    48d4:	70 91 8f 04 	lds	r23, 0x048F
    48d8:	80 91 90 04 	lds	r24, 0x0490
    48dc:	90 91 91 04 	lds	r25, 0x0491
    48e0:	0e 94 3b 33 	call	0x6676	; 0x6676 <__floatundisf>
    48e4:	20 ec       	ldi	r18, 0xC0	; 192
    48e6:	39 e9       	ldi	r19, 0x99	; 153
    48e8:	40 ef       	ldi	r20, 0xF0	; 240
    48ea:	5b e4       	ldi	r21, 0x4B	; 75
    48ec:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	4c ef       	ldi	r20, 0xFC	; 252
    48f6:	54 e4       	ldi	r21, 0x44	; 68
    48f8:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    48fc:	6b 01       	movw	r12, r22
    48fe:	7c 01       	movw	r14, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    4900:	be 01       	movw	r22, r28
    4902:	6f 5f       	subi	r22, 0xFF	; 255
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	82 e4       	ldi	r24, 0x42	; 66
    4908:	94 e0       	ldi	r25, 0x04	; 4
    490a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    490e:	be 01       	movw	r22, r28
    4910:	63 5f       	subi	r22, 0xF3	; 243
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	ce 01       	movw	r24, r28
    4916:	01 96       	adiw	r24, 0x01	; 1
    4918:	0e 94 40 10 	call	0x2080	; 0x2080 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    491c:	61 ea       	ldi	r22, 0xA1	; 161
    491e:	74 e0       	ldi	r23, 0x04	; 4
    4920:	ce 01       	movw	r24, r28
    4922:	0d 96       	adiw	r24, 0x0d	; 13
    4924:	ed d8       	rcall	.-3622   	; 0x3b00 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4926:	8e 01       	movw	r16, r28
    4928:	07 5e       	subi	r16, 0xE7	; 231
    492a:	1f 4f       	sbci	r17, 0xFF	; 255
    492c:	28 e0       	ldi	r18, 0x08	; 8
    492e:	b7 01       	movw	r22, r14
    4930:	a6 01       	movw	r20, r12
    4932:	ce 01       	movw	r24, r28
    4934:	0d 96       	adiw	r24, 0x0d	; 13
    4936:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    493a:	ae 01       	movw	r20, r28
    493c:	4f 5f       	subi	r20, 0xFF	; 255
    493e:	5f 4f       	sbci	r21, 0xFF	; 255
    4940:	be 01       	movw	r22, r28
    4942:	63 5f       	subi	r22, 0xF3	; 243
    4944:	7f 4f       	sbci	r23, 0xFF	; 255
    4946:	c8 01       	movw	r24, r16
    4948:	0e 94 c4 11 	call	0x2388	; 0x2388 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    494c:	be 01       	movw	r22, r28
    494e:	6b 5d       	subi	r22, 0xDB	; 219
    4950:	7f 4f       	sbci	r23, 0xFF	; 255
    4952:	ce 01       	movw	r24, r28
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    495a:	95 01       	movw	r18, r10
    495c:	ae 01       	movw	r20, r28
    495e:	4b 5d       	subi	r20, 0xDB	; 219
    4960:	5f 4f       	sbci	r21, 0xFF	; 255
    4962:	6a e2       	ldi	r22, 0x2A	; 42
    4964:	74 e0       	ldi	r23, 0x04	; 4
    4966:	82 e4       	ldi	r24, 0x42	; 66
    4968:	94 e0       	ldi	r25, 0x04	; 4
    496a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    496e:	e0 96       	adiw	r28, 0x30	; 48
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	df 90       	pop	r13
    4988:	cf 90       	pop	r12
    498a:	bf 90       	pop	r11
    498c:	af 90       	pop	r10
    498e:	08 95       	ret

00004990 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4990:	ff 92       	push	r15
    4992:	0f 93       	push	r16
    4994:	1f 93       	push	r17
    4996:	cf 93       	push	r28
    4998:	df 93       	push	r29
    499a:	ca ee       	ldi	r28, 0xEA	; 234
    499c:	d4 e0       	ldi	r29, 0x04	; 4
    499e:	02 e0       	ldi	r16, 0x02	; 2
    49a0:	15 e0       	ldi	r17, 0x05	; 5
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    49a2:	f1 2c       	mov	r15, r1
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    49a4:	69 91       	ld	r22, Y+
    49a6:	79 91       	ld	r23, Y+
    49a8:	89 91       	ld	r24, Y+
    49aa:	99 91       	ld	r25, Y+
    49ac:	27 e2       	ldi	r18, 0x27	; 39
    49ae:	31 e3       	ldi	r19, 0x31	; 49
    49b0:	48 ec       	ldi	r20, 0xC8	; 200
    49b2:	5e e3       	ldi	r21, 0x3E	; 62
    49b4:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    49b8:	88 23       	and	r24, r24
    49ba:	0c f4       	brge	.+2      	; 0x49be <light_cal+0x2e>
		  num_dark_sensors++;
    49bc:	f3 94       	inc	r15
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    49be:	c0 17       	cp	r28, r16
    49c0:	d1 07       	cpc	r29, r17
    49c2:	81 f7       	brne	.-32     	; 0x49a4 <light_cal+0x14>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	96 e0       	ldi	r25, 0x06	; 6
    49c8:	f9 12       	cpse	r15, r25
    49ca:	01 c0       	rjmp	.+2      	; 0x49ce <light_cal+0x3e>
    49cc:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    49ce:	df 91       	pop	r29
    49d0:	cf 91       	pop	r28
    49d2:	1f 91       	pop	r17
    49d4:	0f 91       	pop	r16
    49d6:	ff 90       	pop	r15
    49d8:	08 95       	ret

000049da <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    49da:	2f 92       	push	r2
    49dc:	3f 92       	push	r3
    49de:	4f 92       	push	r4
    49e0:	5f 92       	push	r5
    49e2:	6f 92       	push	r6
    49e4:	7f 92       	push	r7
    49e6:	8f 92       	push	r8
    49e8:	9f 92       	push	r9
    49ea:	af 92       	push	r10
    49ec:	bf 92       	push	r11
    49ee:	cf 92       	push	r12
    49f0:	df 92       	push	r13
    49f2:	ef 92       	push	r14
    49f4:	ff 92       	push	r15
    49f6:	0f 93       	push	r16
    49f8:	1f 93       	push	r17
    49fa:	cf 93       	push	r28
    49fc:	df 93       	push	r29
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	cb 57       	subi	r28, 0x7B	; 123
    4a04:	d1 09       	sbc	r29, r1
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	e1 96       	adiw	r28, 0x31	; 49
    4a12:	9f af       	std	Y+63, r25	; 0x3f
    4a14:	8e af       	std	Y+62, r24	; 0x3e
    4a16:	e1 97       	sbiw	r28, 0x31	; 49
    4a18:	1b 01       	movw	r2, r22
    4a1a:	e3 96       	adiw	r28, 0x33	; 51
    4a1c:	5f af       	std	Y+63, r21	; 0x3f
    4a1e:	4e af       	std	Y+62, r20	; 0x3e
    4a20:	e3 97       	sbiw	r28, 0x33	; 51
    4a22:	79 01       	movw	r14, r18
    4a24:	0a ee       	ldi	r16, 0xEA	; 234
    4a26:	14 e0       	ldi	r17, 0x04	; 4
    4a28:	0f 2e       	mov	r0, r31
    4a2a:	f2 e0       	ldi	r31, 0x02	; 2
    4a2c:	cf 2e       	mov	r12, r31
    4a2e:	f5 e0       	ldi	r31, 0x05	; 5
    4a30:	df 2e       	mov	r13, r31
    4a32:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4a34:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4a36:	f8 01       	movw	r30, r16
    4a38:	61 91       	ld	r22, Z+
    4a3a:	71 91       	ld	r23, Z+
    4a3c:	81 91       	ld	r24, Z+
    4a3e:	91 91       	ld	r25, Z+
    4a40:	8f 01       	movw	r16, r30
    4a42:	27 e2       	ldi	r18, 0x27	; 39
    4a44:	31 e3       	ldi	r19, 0x31	; 49
    4a46:	48 ec       	ldi	r20, 0xC8	; 200
    4a48:	5e e3       	ldi	r21, 0x3E	; 62
    4a4a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    4a4e:	88 23       	and	r24, r24
    4a50:	0c f4       	brge	.+2      	; 0x4a54 <quest+0x7a>
      num_dark_sensors++;
    4a52:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    4a54:	0c 15       	cp	r16, r12
    4a56:	1d 05       	cpc	r17, r13
    4a58:	71 f7       	brne	.-36     	; 0x4a36 <quest+0x5c>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4a5a:	f1 e0       	ldi	r31, 0x01	; 1
    4a5c:	e4 96       	adiw	r28, 0x34	; 52
    4a5e:	ff af       	std	Y+63, r31	; 0x3f
    4a60:	e4 97       	sbiw	r28, 0x34	; 52
    4a62:	26 e0       	ldi	r18, 0x06	; 6
    4a64:	b2 12       	cpse	r11, r18
    4a66:	03 c0       	rjmp	.+6      	; 0x4a6e <quest+0x94>
    4a68:	e4 96       	adiw	r28, 0x34	; 52
    4a6a:	1f ae       	std	Y+63, r1	; 0x3f
    4a6c:	e4 97       	sbiw	r28, 0x34	; 52
    light = 0;
  
  if(light)
    4a6e:	e4 96       	adiw	r28, 0x34	; 52
    4a70:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a72:	e4 97       	sbiw	r28, 0x34	; 52
    4a74:	88 23       	and	r24, r24
    4a76:	09 f4       	brne	.+2      	; 0x4a7a <quest+0xa0>
    4a78:	0e c3       	rjmp	.+1564   	; 0x5096 <quest+0x6bc>
  {
    if(!*p_w_ctrl)
    4a7a:	f7 01       	movw	r30, r14
    4a7c:	80 81       	ld	r24, Z
    4a7e:	81 11       	cpse	r24, r1
    4a80:	0f c0       	rjmp	.+30     	; 0x4aa0 <quest+0xc6>
    {
      time_since_light += FRAME_TIME;
    4a82:	80 91 4e 04 	lds	r24, 0x044E
    4a86:	90 91 4f 04 	lds	r25, 0x044F
    4a8a:	02 96       	adiw	r24, 0x02	; 2
    4a8c:	90 93 4f 04 	sts	0x044F, r25
    4a90:	80 93 4e 04 	sts	0x044E, r24
      if(time_since_light == 300)
    4a94:	8c 32       	cpi	r24, 0x2C	; 44
    4a96:	91 40       	sbci	r25, 0x01	; 1
    4a98:	19 f4       	brne	.+6      	; 0x4aa0 <quest+0xc6>
        *p_w_ctrl = 1;
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	f7 01       	movw	r30, r14
    4a9e:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4aa0:	80 91 12 01 	lds	r24, 0x0112
    4aa4:	81 11       	cpse	r24, r1
    4aa6:	10 c3       	rjmp	.+1568   	; 0x50c8 <quest+0x6ee>
    {
      *p_w_ctrl = 0;
    4aa8:	f7 01       	movw	r30, r14
    4aaa:	10 82       	st	Z, r1
      time_since_light = 0;
    4aac:	10 92 4f 04 	sts	0x044F, r1
    4ab0:	10 92 4e 04 	sts	0x044E, r1
    4ab4:	09 c3       	rjmp	.+1554   	; 0x50c8 <quest+0x6ee>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4ab6:	89 86       	std	Y+9, r8	; 0x09
    4ab8:	9a 86       	std	Y+10, r9	; 0x0a
    4aba:	ab 86       	std	Y+11, r10	; 0x0b
    4abc:	bc 86       	std	Y+12, r11	; 0x0c
    4abe:	08 c0       	rjmp	.+16     	; 0x4ad0 <quest+0xf6>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4ac0:	f7 fa       	bst	r15, 7
    4ac2:	f0 94       	com	r15
    4ac4:	f7 f8       	bld	r15, 7
    4ac6:	f0 94       	com	r15
    4ac8:	c9 86       	std	Y+9, r12	; 0x09
    4aca:	da 86       	std	Y+10, r13	; 0x0a
    4acc:	eb 86       	std	Y+11, r14	; 0x0b
    4ace:	fc 86       	std	Y+12, r15	; 0x0c
    4ad0:	8e 01       	movw	r16, r28
    4ad2:	0f 5f       	subi	r16, 0xFF	; 255
    4ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	0d 96       	adiw	r24, 0x0d	; 13
    4ada:	af 96       	adiw	r28, 0x2f	; 47
    4adc:	9f af       	std	Y+63, r25	; 0x3f
    4ade:	8e af       	std	Y+62, r24	; 0x3e
    4ae0:	af 97       	sbiw	r28, 0x2f	; 47

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4ae2:	f8 01       	movw	r30, r16
    4ae4:	c0 80       	ld	r12, Z
    4ae6:	d1 80       	ldd	r13, Z+1	; 0x01
    4ae8:	e2 80       	ldd	r14, Z+2	; 0x02
    4aea:	f3 80       	ldd	r15, Z+3	; 0x03
    4aec:	46 01       	movw	r8, r12
    4aee:	57 01       	movw	r10, r14
    4af0:	e8 94       	clt
    4af2:	b7 f8       	bld	r11, 7
    4af4:	26 e6       	ldi	r18, 0x66	; 102
    4af6:	36 e6       	ldi	r19, 0x66	; 102
    4af8:	46 e8       	ldi	r20, 0x86	; 134
    4afa:	5f e3       	ldi	r21, 0x3F	; 63
    4afc:	c5 01       	movw	r24, r10
    4afe:	b4 01       	movw	r22, r8
    4b00:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    4b04:	21 ec       	ldi	r18, 0xC1	; 193
    4b06:	3a ec       	ldi	r19, 0xCA	; 202
    4b08:	41 ec       	ldi	r20, 0xC1	; 193
    4b0a:	5f e3       	ldi	r21, 0x3F	; 63
    4b0c:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    4b10:	0e 94 72 31 	call	0x62e4	; 0x62e4 <acos>
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	44 e3       	ldi	r20, 0x34	; 52
    4b1a:	53 e4       	ldi	r21, 0x43	; 67
    4b1c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4b20:	20 ed       	ldi	r18, 0xD0	; 208
    4b22:	3f e0       	ldi	r19, 0x0F	; 15
    4b24:	49 e4       	ldi	r20, 0x49	; 73
    4b26:	50 e4       	ldi	r21, 0x40	; 64
    4b28:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    4b2c:	26 e6       	ldi	r18, 0x66	; 102
    4b2e:	36 e6       	ldi	r19, 0x66	; 102
    4b30:	4e e1       	ldi	r20, 0x1E	; 30
    4b32:	51 e4       	ldi	r21, 0x41	; 65
    4b34:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4b38:	23 e3       	ldi	r18, 0x33	; 51
    4b3a:	33 e3       	ldi	r19, 0x33	; 51
    4b3c:	43 ed       	ldi	r20, 0xD3	; 211
    4b3e:	5f e3       	ldi	r21, 0x3F	; 63
    4b40:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4b44:	20 ed       	ldi	r18, 0xD0	; 208
    4b46:	3f e0       	ldi	r19, 0x0F	; 15
    4b48:	49 e4       	ldi	r20, 0x49	; 73
    4b4a:	50 e4       	ldi	r21, 0x40	; 64
    4b4c:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	44 e3       	ldi	r20, 0x34	; 52
    4b56:	53 e4       	ldi	r21, 0x43	; 67
    4b58:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4b5c:	2b 01       	movw	r4, r22
    4b5e:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	a9 01       	movw	r20, r18
    4b66:	c7 01       	movw	r24, r14
    4b68:	b6 01       	movw	r22, r12
    4b6a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__cmpsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	c1 f0       	breq	.+48     	; 0x4ba2 <quest+0x1c8>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4b72:	c3 01       	movw	r24, r6
    4b74:	b2 01       	movw	r22, r4
    4b76:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    4b7a:	2b 01       	movw	r4, r22
    4b7c:	3c 01       	movw	r6, r24
    4b7e:	a7 01       	movw	r20, r14
    4b80:	96 01       	movw	r18, r12
    4b82:	c5 01       	movw	r24, r10
    4b84:	b4 01       	movw	r22, r8
    4b86:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4b8a:	9b 01       	movw	r18, r22
    4b8c:	ac 01       	movw	r20, r24
    4b8e:	c3 01       	movw	r24, r6
    4b90:	b2 01       	movw	r22, r4
    4b92:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4b96:	f8 01       	movw	r30, r16
    4b98:	60 83       	st	Z, r22
    4b9a:	71 83       	std	Z+1, r23	; 0x01
    4b9c:	82 83       	std	Z+2, r24	; 0x02
    4b9e:	93 83       	std	Z+3, r25	; 0x03
    4ba0:	09 c0       	rjmp	.+18     	; 0x4bb4 <quest+0x1da>
		else
		v_sun_m[i] = cos(angle);
    4ba2:	c3 01       	movw	r24, r6
    4ba4:	b2 01       	movw	r22, r4
    4ba6:	0e 94 62 32 	call	0x64c4	; 0x64c4 <cos>
    4baa:	f8 01       	movw	r30, r16
    4bac:	60 83       	st	Z, r22
    4bae:	71 83       	std	Z+1, r23	; 0x01
    4bb0:	82 83       	std	Z+2, r24	; 0x02
    4bb2:	93 83       	std	Z+3, r25	; 0x03
    4bb4:	0c 5f       	subi	r16, 0xFC	; 252
    4bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4bb8:	af 96       	adiw	r28, 0x2f	; 47
    4bba:	8e ad       	ldd	r24, Y+62	; 0x3e
    4bbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bbe:	af 97       	sbiw	r28, 0x2f	; 47
    4bc0:	08 17       	cp	r16, r24
    4bc2:	19 07       	cpc	r17, r25
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <quest+0x1ee>
    4bc6:	8d cf       	rjmp	.-230    	; 0x4ae2 <quest+0x108>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4bc8:	ce 01       	movw	r24, r28
    4bca:	01 96       	adiw	r24, 0x01	; 1
    4bcc:	1d da       	rcall	.-3014   	; 0x4008 <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4bce:	80 91 02 05 	lds	r24, 0x0502
    4bd2:	90 91 03 05 	lds	r25, 0x0503
    4bd6:	a0 91 04 05 	lds	r26, 0x0504
    4bda:	b0 91 05 05 	lds	r27, 0x0505
    4bde:	8d 8b       	std	Y+21, r24	; 0x15
    4be0:	9e 8b       	std	Y+22, r25	; 0x16
    4be2:	af 8b       	std	Y+23, r26	; 0x17
    4be4:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4be6:	80 91 06 05 	lds	r24, 0x0506
    4bea:	90 91 07 05 	lds	r25, 0x0507
    4bee:	a0 91 08 05 	lds	r26, 0x0508
    4bf2:	b0 91 09 05 	lds	r27, 0x0509
    4bf6:	b0 58       	subi	r27, 0x80	; 128
    4bf8:	89 8b       	std	Y+17, r24	; 0x11
    4bfa:	9a 8b       	std	Y+18, r25	; 0x12
    4bfc:	ab 8b       	std	Y+19, r26	; 0x13
    4bfe:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4c00:	80 91 0a 05 	lds	r24, 0x050A
    4c04:	90 91 0b 05 	lds	r25, 0x050B
    4c08:	a0 91 0c 05 	lds	r26, 0x050C
    4c0c:	b0 91 0d 05 	lds	r27, 0x050D
    4c10:	8d 87       	std	Y+13, r24	; 0x0d
    4c12:	9e 87       	std	Y+14, r25	; 0x0e
    4c14:	af 87       	std	Y+15, r26	; 0x0f
    4c16:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4c18:	ae 01       	movw	r20, r28
    4c1a:	47 5e       	subi	r20, 0xE7	; 231
    4c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c1e:	be 01       	movw	r22, r28
    4c20:	6f 5f       	subi	r22, 0xFF	; 255
    4c22:	7f 4f       	sbci	r23, 0xFF	; 255
    4c24:	ce 01       	movw	r24, r28
    4c26:	0d 96       	adiw	r24, 0x0d	; 13
    4c28:	18 d9       	rcall	.-3536   	; 0x3e5a <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4c2a:	ce 01       	movw	r24, r28
    4c2c:	49 96       	adiw	r24, 0x19	; 25
    4c2e:	ec d9       	rcall	.-3112   	; 0x4008 <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4c30:	ae 01       	movw	r20, r28
    4c32:	4b 5d       	subi	r20, 0xDB	; 219
    4c34:	5f 4f       	sbci	r21, 0xFF	; 255
    4c36:	b1 01       	movw	r22, r2
    4c38:	e1 96       	adiw	r28, 0x31	; 49
    4c3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c3e:	e1 97       	sbiw	r28, 0x31	; 49
    4c40:	0c d9       	rcall	.-3560   	; 0x3e5a <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4c42:	ce 01       	movw	r24, r28
    4c44:	85 96       	adiw	r24, 0x25	; 37
    4c46:	e0 d9       	rcall	.-3136   	; 0x4008 <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4c48:	be 01       	movw	r22, r28
    4c4a:	6b 5d       	subi	r22, 0xDB	; 219
    4c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c4e:	ce 01       	movw	r24, r28
    4c50:	49 96       	adiw	r24, 0x19	; 25
    4c52:	37 d8       	rcall	.-3986   	; 0x3cc2 <vector_dot_product>
    4c54:	6b 01       	movw	r12, r22
    4c56:	7c 01       	movw	r14, r24
    4c58:	e1 96       	adiw	r28, 0x31	; 49
    4c5a:	6e ad       	ldd	r22, Y+62	; 0x3e
    4c5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    4c5e:	e1 97       	sbiw	r28, 0x31	; 49
    4c60:	ce 01       	movw	r24, r28
    4c62:	0d 96       	adiw	r24, 0x0d	; 13
    4c64:	2e d8       	rcall	.-4004   	; 0x3cc2 <vector_dot_product>
    4c66:	4b 01       	movw	r8, r22
    4c68:	5c 01       	movw	r10, r24
    4c6a:	b1 01       	movw	r22, r2
    4c6c:	ce 01       	movw	r24, r28
    4c6e:	01 96       	adiw	r24, 0x01	; 1
    4c70:	28 d8       	rcall	.-4016   	; 0x3cc2 <vector_dot_product>
    4c72:	2b 01       	movw	r4, r22
    4c74:	3c 01       	movw	r6, r24
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	c7 01       	movw	r24, r14
    4c80:	b6 01       	movw	r22, r12
    4c82:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4c86:	6b 01       	movw	r12, r22
    4c88:	7c 01       	movw	r14, r24
    4c8a:	26 e6       	ldi	r18, 0x66	; 102
    4c8c:	36 e6       	ldi	r19, 0x66	; 102
    4c8e:	46 e6       	ldi	r20, 0x66	; 102
    4c90:	5f e3       	ldi	r21, 0x3F	; 63
    4c92:	c5 01       	movw	r24, r10
    4c94:	b4 01       	movw	r22, r8
    4c96:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4c9a:	4b 01       	movw	r8, r22
    4c9c:	5c 01       	movw	r10, r24
    4c9e:	20 ed       	ldi	r18, 0xD0	; 208
    4ca0:	3c ec       	ldi	r19, 0xCC	; 204
    4ca2:	4c ec       	ldi	r20, 0xCC	; 204
    4ca4:	5d e3       	ldi	r21, 0x3D	; 61
    4ca6:	c3 01       	movw	r24, r6
    4ca8:	b2 01       	movw	r22, r4
    4caa:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4cae:	9b 01       	movw	r18, r22
    4cb0:	ac 01       	movw	r20, r24
    4cb2:	c5 01       	movw	r24, r10
    4cb4:	b4 01       	movw	r22, r8
    4cb6:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4cba:	9b 01       	movw	r18, r22
    4cbc:	ac 01       	movw	r20, r24
    4cbe:	c7 01       	movw	r24, r14
    4cc0:	b6 01       	movw	r22, r12
    4cc2:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4cc6:	4b 01       	movw	r8, r22
    4cc8:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4cca:	ae 01       	movw	r20, r28
    4ccc:	47 5b       	subi	r20, 0xB7	; 183
    4cce:	5f 4f       	sbci	r21, 0xFF	; 255
    4cd0:	e1 96       	adiw	r28, 0x31	; 49
    4cd2:	6e ad       	ldd	r22, Y+62	; 0x3e
    4cd4:	7f ad       	ldd	r23, Y+63	; 0x3f
    4cd6:	e1 97       	sbiw	r28, 0x31	; 49
    4cd8:	ce 01       	movw	r24, r28
    4cda:	0d 96       	adiw	r24, 0x0d	; 13
    4cdc:	be d8       	rcall	.-3716   	; 0x3e5a <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4cde:	ae 01       	movw	r20, r28
    4ce0:	4b 5a       	subi	r20, 0xAB	; 171
    4ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ce4:	b1 01       	movw	r22, r2
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	01 96       	adiw	r24, 0x01	; 1
    4cea:	b7 d8       	rcall	.-3730   	; 0x3e5a <vector_cross_product>
    4cec:	fe 01       	movw	r30, r28
    4cee:	e7 5b       	subi	r30, 0xB7	; 183
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	7f 01       	movw	r14, r30
    4cf4:	8e 01       	movw	r16, r28
    4cf6:	0b 5a       	subi	r16, 0xAB	; 171
    4cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfa:	6f 01       	movw	r12, r30
    4cfc:	fc e0       	ldi	r31, 0x0C	; 12
    4cfe:	cf 0e       	add	r12, r31
    4d00:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4d02:	f7 01       	movw	r30, r14
    4d04:	61 91       	ld	r22, Z+
    4d06:	71 91       	ld	r23, Z+
    4d08:	81 91       	ld	r24, Z+
    4d0a:	91 91       	ld	r25, Z+
    4d0c:	7f 01       	movw	r14, r30
    4d0e:	26 e6       	ldi	r18, 0x66	; 102
    4d10:	36 e6       	ldi	r19, 0x66	; 102
    4d12:	46 e6       	ldi	r20, 0x66	; 102
    4d14:	5f e3       	ldi	r21, 0x3F	; 63
    4d16:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4d1a:	2b 01       	movw	r4, r22
    4d1c:	3c 01       	movw	r6, r24
    4d1e:	20 ed       	ldi	r18, 0xD0	; 208
    4d20:	3c ec       	ldi	r19, 0xCC	; 204
    4d22:	4c ec       	ldi	r20, 0xCC	; 204
    4d24:	5d e3       	ldi	r21, 0x3D	; 61
    4d26:	f8 01       	movw	r30, r16
    4d28:	60 81       	ld	r22, Z
    4d2a:	71 81       	ldd	r23, Z+1	; 0x01
    4d2c:	82 81       	ldd	r24, Z+2	; 0x02
    4d2e:	93 81       	ldd	r25, Z+3	; 0x03
    4d30:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4d34:	9b 01       	movw	r18, r22
    4d36:	ac 01       	movw	r20, r24
    4d38:	c3 01       	movw	r24, r6
    4d3a:	b2 01       	movw	r22, r4
    4d3c:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4d40:	f8 01       	movw	r30, r16
    4d42:	61 93       	st	Z+, r22
    4d44:	71 93       	st	Z+, r23
    4d46:	81 93       	st	Z+, r24
    4d48:	91 93       	st	Z+, r25
    4d4a:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4d4c:	ec 14       	cp	r14, r12
    4d4e:	fd 04       	cpc	r15, r13
    4d50:	c1 f6       	brne	.-80     	; 0x4d02 <quest+0x328>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4d52:	ae 01       	movw	r20, r28
    4d54:	4f 5c       	subi	r20, 0xCF	; 207
    4d56:	5f 4f       	sbci	r21, 0xFF	; 255
    4d58:	be 01       	movw	r22, r28
    4d5a:	6b 5d       	subi	r22, 0xDB	; 219
    4d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5e:	ce 01       	movw	r24, r28
    4d60:	49 96       	adiw	r24, 0x19	; 25
    4d62:	7b d8       	rcall	.-3850   	; 0x3e5a <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4d64:	be 01       	movw	r22, r28
    4d66:	6b 5a       	subi	r22, 0xAB	; 171
    4d68:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	c1 96       	adiw	r24, 0x31	; 49
    4d6e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    4d72:	a5 01       	movw	r20, r10
    4d74:	94 01       	movw	r18, r8
    4d76:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4d7a:	6b 01       	movw	r12, r22
    4d7c:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4d7e:	ae 01       	movw	r20, r28
    4d80:	43 5c       	subi	r20, 0xC3	; 195
    4d82:	5f 4f       	sbci	r21, 0xFF	; 255
    4d84:	be 01       	movw	r22, r28
    4d86:	6b 5d       	subi	r22, 0xDB	; 219
    4d88:	7f 4f       	sbci	r23, 0xFF	; 255
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	49 96       	adiw	r24, 0x19	; 25
    4d8e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4d92:	be 01       	movw	r22, r28
    4d94:	6b 5a       	subi	r22, 0xAB	; 171
    4d96:	7f 4f       	sbci	r23, 0xFF	; 255
    4d98:	ce 01       	movw	r24, r28
    4d9a:	cd 96       	adiw	r24, 0x3d	; 61
    4d9c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    4da0:	2b 01       	movw	r4, r22
    4da2:	3c 01       	movw	r6, r24
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4da4:	a7 01       	movw	r20, r14
    4da6:	96 01       	movw	r18, r12
    4da8:	c7 01       	movw	r24, r14
    4daa:	b6 01       	movw	r22, r12
    4dac:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4db0:	4b 01       	movw	r8, r22
    4db2:	5c 01       	movw	r10, r24
    4db4:	a3 01       	movw	r20, r6
    4db6:	92 01       	movw	r18, r4
    4db8:	c3 01       	movw	r24, r6
    4dba:	b2 01       	movw	r22, r4
    4dbc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	ac 01       	movw	r20, r24
    4dc4:	c5 01       	movw	r24, r10
    4dc6:	b4 01       	movw	r22, r8
    4dc8:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4dcc:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    4dd0:	4b 01       	movw	r8, r22
    4dd2:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	a9 01       	movw	r20, r18
    4dda:	c7 01       	movw	r24, r14
    4ddc:	b6 01       	movw	r22, r12
    4dde:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    4de2:	18 16       	cp	r1, r24
    4de4:	0c f0       	brlt	.+2      	; 0x4de8 <quest+0x40e>
    4de6:	96 c0       	rjmp	.+300    	; 0x4f14 <quest+0x53a>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4de8:	a7 01       	movw	r20, r14
    4dea:	96 01       	movw	r18, r12
    4dec:	c5 01       	movw	r24, r10
    4dee:	b4 01       	movw	r22, r8
    4df0:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4df4:	6b 01       	movw	r12, r22
    4df6:	7c 01       	movw	r14, r24
    4df8:	a5 01       	movw	r20, r10
    4dfa:	94 01       	movw	r18, r8
    4dfc:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4e00:	4b 01       	movw	r8, r22
    4e02:	5c 01       	movw	r10, r24
    4e04:	be 01       	movw	r22, r28
    4e06:	6b 5d       	subi	r22, 0xDB	; 219
    4e08:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0a:	ce 01       	movw	r24, r28
    4e0c:	49 96       	adiw	r24, 0x19	; 25
    4e0e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	40 e8       	ldi	r20, 0x80	; 128
    4e18:	5f e3       	ldi	r21, 0x3F	; 63
    4e1a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4e1e:	9b 01       	movw	r18, r22
    4e20:	ac 01       	movw	r20, r24
    4e22:	c5 01       	movw	r24, r10
    4e24:	b4 01       	movw	r22, r8
    4e26:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4e2a:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    4e2e:	9b 01       	movw	r18, r22
    4e30:	ac 01       	movw	r20, r24
    4e32:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4e36:	9b 01       	movw	r18, r22
    4e38:	ac 01       	movw	r20, r24
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	80 e8       	ldi	r24, 0x80	; 128
    4e40:	9f e3       	ldi	r25, 0x3F	; 63
    4e42:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4e46:	ec 96       	adiw	r28, 0x3c	; 60
    4e48:	6c af       	std	Y+60, r22	; 0x3c
    4e4a:	7d af       	std	Y+61, r23	; 0x3d
    4e4c:	8e af       	std	Y+62, r24	; 0x3e
    4e4e:	9f af       	std	Y+63, r25	; 0x3f
    4e50:	ec 97       	sbiw	r28, 0x3c	; 60
    4e52:	8e 01       	movw	r16, r28
    4e54:	0f 5c       	subi	r16, 0xCF	; 207
    4e56:	1f 4f       	sbci	r17, 0xFF	; 255
    4e58:	1e 01       	movw	r2, r28
    4e5a:	fd e3       	ldi	r31, 0x3D	; 61
    4e5c:	2f 0e       	add	r2, r31
    4e5e:	31 1c       	adc	r3, r1
    4e60:	ce 01       	movw	r24, r28
    4e62:	8f 59       	subi	r24, 0x9F	; 159
    4e64:	9f 4f       	sbci	r25, 0xFF	; 255
    4e66:	e1 96       	adiw	r28, 0x31	; 49
    4e68:	9f af       	std	Y+63, r25	; 0x3f
    4e6a:	8e af       	std	Y+62, r24	; 0x3e
    4e6c:	e1 97       	sbiw	r28, 0x31	; 49
    4e6e:	af 96       	adiw	r28, 0x2f	; 47
    4e70:	3f ae       	std	Y+63, r3	; 0x3f
    4e72:	2e ae       	std	Y+62, r2	; 0x3e
    4e74:	af 97       	sbiw	r28, 0x2f	; 47
    4e76:	e8 96       	adiw	r28, 0x38	; 56
    4e78:	4c ae       	std	Y+60, r4	; 0x3c
    4e7a:	5d ae       	std	Y+61, r5	; 0x3d
    4e7c:	6e ae       	std	Y+62, r6	; 0x3e
    4e7e:	7f ae       	std	Y+63, r7	; 0x3f
    4e80:	e8 97       	sbiw	r28, 0x38	; 56
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4e82:	f8 01       	movw	r30, r16
    4e84:	21 91       	ld	r18, Z+
    4e86:	31 91       	ld	r19, Z+
    4e88:	41 91       	ld	r20, Z+
    4e8a:	51 91       	ld	r21, Z+
    4e8c:	8f 01       	movw	r16, r30
    4e8e:	f1 01       	movw	r30, r2
    4e90:	41 90       	ld	r4, Z+
    4e92:	51 90       	ld	r5, Z+
    4e94:	61 90       	ld	r6, Z+
    4e96:	71 90       	ld	r7, Z+
    4e98:	1f 01       	movw	r2, r30
    4e9a:	c7 01       	movw	r24, r14
    4e9c:	b6 01       	movw	r22, r12
    4e9e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4ea2:	4b 01       	movw	r8, r22
    4ea4:	5c 01       	movw	r10, r24
    4ea6:	e8 96       	adiw	r28, 0x38	; 56
    4ea8:	2c ad       	ldd	r18, Y+60	; 0x3c
    4eaa:	3d ad       	ldd	r19, Y+61	; 0x3d
    4eac:	4e ad       	ldd	r20, Y+62	; 0x3e
    4eae:	5f ad       	ldd	r21, Y+63	; 0x3f
    4eb0:	e8 97       	sbiw	r28, 0x38	; 56
    4eb2:	c3 01       	movw	r24, r6
    4eb4:	b2 01       	movw	r22, r4
    4eb6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4eba:	9b 01       	movw	r18, r22
    4ebc:	ac 01       	movw	r20, r24
    4ebe:	c5 01       	movw	r24, r10
    4ec0:	b4 01       	movw	r22, r8
    4ec2:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4ec6:	e1 96       	adiw	r28, 0x31	; 49
    4ec8:	ee ad       	ldd	r30, Y+62	; 0x3e
    4eca:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ecc:	e1 97       	sbiw	r28, 0x31	; 49
    4ece:	61 93       	st	Z+, r22
    4ed0:	71 93       	st	Z+, r23
    4ed2:	81 93       	st	Z+, r24
    4ed4:	91 93       	st	Z+, r25
    4ed6:	e1 96       	adiw	r28, 0x31	; 49
    4ed8:	ff af       	std	Y+63, r31	; 0x3f
    4eda:	ee af       	std	Y+62, r30	; 0x3e
    4edc:	e1 97       	sbiw	r28, 0x31	; 49
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4ede:	af 96       	adiw	r28, 0x2f	; 47
    4ee0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ee4:	af 97       	sbiw	r28, 0x2f	; 47
    4ee6:	08 17       	cp	r16, r24
    4ee8:	19 07       	cpc	r17, r25
    4eea:	59 f6       	brne	.-106    	; 0x4e82 <quest+0x4a8>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4eec:	be 01       	movw	r22, r28
    4eee:	6b 5d       	subi	r22, 0xDB	; 219
    4ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef2:	ce 01       	movw	r24, r28
    4ef4:	49 96       	adiw	r24, 0x19	; 25
    4ef6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	40 e8       	ldi	r20, 0x80	; 128
    4f00:	5f e3       	ldi	r21, 0x3F	; 63
    4f02:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4f06:	9b 01       	movw	r18, r22
    4f08:	ac 01       	movw	r20, r24
    4f0a:	c7 01       	movw	r24, r14
    4f0c:	b6 01       	movw	r22, r12
    4f0e:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4f12:	91 c0       	rjmp	.+290    	; 0x5036 <quest+0x65c>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4f14:	a7 01       	movw	r20, r14
    4f16:	96 01       	movw	r18, r12
    4f18:	c5 01       	movw	r24, r10
    4f1a:	b4 01       	movw	r22, r8
    4f1c:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    4f20:	e8 96       	adiw	r28, 0x38	; 56
    4f22:	6c af       	std	Y+60, r22	; 0x3c
    4f24:	7d af       	std	Y+61, r23	; 0x3d
    4f26:	8e af       	std	Y+62, r24	; 0x3e
    4f28:	9f af       	std	Y+63, r25	; 0x3f
    4f2a:	e8 97       	sbiw	r28, 0x38	; 56
    4f2c:	a5 01       	movw	r20, r10
    4f2e:	94 01       	movw	r18, r8
    4f30:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4f34:	6b 01       	movw	r12, r22
    4f36:	7c 01       	movw	r14, r24
    4f38:	be 01       	movw	r22, r28
    4f3a:	6b 5d       	subi	r22, 0xDB	; 219
    4f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3e:	ce 01       	movw	r24, r28
    4f40:	49 96       	adiw	r24, 0x19	; 25
    4f42:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	40 e8       	ldi	r20, 0x80	; 128
    4f4c:	5f e3       	ldi	r21, 0x3F	; 63
    4f4e:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4f52:	9b 01       	movw	r18, r22
    4f54:	ac 01       	movw	r20, r24
    4f56:	c7 01       	movw	r24, r14
    4f58:	b6 01       	movw	r22, r12
    4f5a:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4f5e:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <sqrt>
    4f62:	9b 01       	movw	r18, r22
    4f64:	ac 01       	movw	r20, r24
    4f66:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4f6a:	9b 01       	movw	r18, r22
    4f6c:	ac 01       	movw	r20, r24
    4f6e:	60 e0       	ldi	r22, 0x00	; 0
    4f70:	70 e0       	ldi	r23, 0x00	; 0
    4f72:	80 e8       	ldi	r24, 0x80	; 128
    4f74:	9f e3       	ldi	r25, 0x3F	; 63
    4f76:	0e 94 65 32 	call	0x64ca	; 0x64ca <__divsf3>
    4f7a:	ec 96       	adiw	r28, 0x3c	; 60
    4f7c:	6c af       	std	Y+60, r22	; 0x3c
    4f7e:	7d af       	std	Y+61, r23	; 0x3d
    4f80:	8e af       	std	Y+62, r24	; 0x3e
    4f82:	9f af       	std	Y+63, r25	; 0x3f
    4f84:	ec 97       	sbiw	r28, 0x3c	; 60
    4f86:	8e 01       	movw	r16, r28
    4f88:	0f 5c       	subi	r16, 0xCF	; 207
    4f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8c:	1e 01       	movw	r2, r28
    4f8e:	9d e3       	ldi	r25, 0x3D	; 61
    4f90:	29 0e       	add	r2, r25
    4f92:	31 1c       	adc	r3, r1
    4f94:	fe 01       	movw	r30, r28
    4f96:	ef 59       	subi	r30, 0x9F	; 159
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	e1 96       	adiw	r28, 0x31	; 49
    4f9c:	ff af       	std	Y+63, r31	; 0x3f
    4f9e:	ee af       	std	Y+62, r30	; 0x3e
    4fa0:	e1 97       	sbiw	r28, 0x31	; 49
    4fa2:	af 96       	adiw	r28, 0x2f	; 47
    4fa4:	3f ae       	std	Y+63, r3	; 0x3f
    4fa6:	2e ae       	std	Y+62, r2	; 0x3e
    4fa8:	af 97       	sbiw	r28, 0x2f	; 47
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    4faa:	f8 01       	movw	r30, r16
    4fac:	61 91       	ld	r22, Z+
    4fae:	71 91       	ld	r23, Z+
    4fb0:	81 91       	ld	r24, Z+
    4fb2:	91 91       	ld	r25, Z+
    4fb4:	8f 01       	movw	r16, r30
    4fb6:	f1 01       	movw	r30, r2
    4fb8:	81 90       	ld	r8, Z+
    4fba:	91 90       	ld	r9, Z+
    4fbc:	a1 90       	ld	r10, Z+
    4fbe:	b1 90       	ld	r11, Z+
    4fc0:	1f 01       	movw	r2, r30
    4fc2:	a3 01       	movw	r20, r6
    4fc4:	92 01       	movw	r18, r4
    4fc6:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4fca:	6b 01       	movw	r12, r22
    4fcc:	7c 01       	movw	r14, r24
    4fce:	a5 01       	movw	r20, r10
    4fd0:	94 01       	movw	r18, r8
    4fd2:	e8 96       	adiw	r28, 0x38	; 56
    4fd4:	6c ad       	ldd	r22, Y+60	; 0x3c
    4fd6:	7d ad       	ldd	r23, Y+61	; 0x3d
    4fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fda:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fdc:	e8 97       	sbiw	r28, 0x38	; 56
    4fde:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    4fe2:	9b 01       	movw	r18, r22
    4fe4:	ac 01       	movw	r20, r24
    4fe6:	c7 01       	movw	r24, r14
    4fe8:	b6 01       	movw	r22, r12
    4fea:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    4fee:	e1 96       	adiw	r28, 0x31	; 49
    4ff0:	ee ad       	ldd	r30, Y+62	; 0x3e
    4ff2:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ff4:	e1 97       	sbiw	r28, 0x31	; 49
    4ff6:	61 93       	st	Z+, r22
    4ff8:	71 93       	st	Z+, r23
    4ffa:	81 93       	st	Z+, r24
    4ffc:	91 93       	st	Z+, r25
    4ffe:	e1 96       	adiw	r28, 0x31	; 49
    5000:	ff af       	std	Y+63, r31	; 0x3f
    5002:	ee af       	std	Y+62, r30	; 0x3e
    5004:	e1 97       	sbiw	r28, 0x31	; 49
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    5006:	af 96       	adiw	r28, 0x2f	; 47
    5008:	8e ad       	ldd	r24, Y+62	; 0x3e
    500a:	9f ad       	ldd	r25, Y+63	; 0x3f
    500c:	af 97       	sbiw	r28, 0x2f	; 47
    500e:	08 17       	cp	r16, r24
    5010:	19 07       	cpc	r17, r25
    5012:	59 f6       	brne	.-106    	; 0x4faa <quest+0x5d0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    5014:	be 01       	movw	r22, r28
    5016:	6b 5d       	subi	r22, 0xDB	; 219
    5018:	7f 4f       	sbci	r23, 0xFF	; 255
    501a:	ce 01       	movw	r24, r28
    501c:	49 96       	adiw	r24, 0x19	; 25
    501e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <vector_dot_product>
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e8       	ldi	r20, 0x80	; 128
    5028:	5f e3       	ldi	r21, 0x3F	; 63
    502a:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    502e:	a3 01       	movw	r20, r6
    5030:	92 01       	movw	r18, r4
    5032:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    5036:	a5 96       	adiw	r28, 0x25	; 37
    5038:	0c ad       	ldd	r16, Y+60	; 0x3c
    503a:	1d ad       	ldd	r17, Y+61	; 0x3d
    503c:	2e ad       	ldd	r18, Y+62	; 0x3e
    503e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5040:	a5 97       	sbiw	r28, 0x25	; 37
    5042:	e3 96       	adiw	r28, 0x33	; 51
    5044:	ee ad       	ldd	r30, Y+62	; 0x3e
    5046:	ff ad       	ldd	r31, Y+63	; 0x3f
    5048:	e3 97       	sbiw	r28, 0x33	; 51
    504a:	00 83       	st	Z, r16
    504c:	11 83       	std	Z+1, r17	; 0x01
    504e:	22 83       	std	Z+2, r18	; 0x02
    5050:	33 83       	std	Z+3, r19	; 0x03
    5052:	a9 96       	adiw	r28, 0x29	; 41
    5054:	0c ad       	ldd	r16, Y+60	; 0x3c
    5056:	1d ad       	ldd	r17, Y+61	; 0x3d
    5058:	2e ad       	ldd	r18, Y+62	; 0x3e
    505a:	3f ad       	ldd	r19, Y+63	; 0x3f
    505c:	a9 97       	sbiw	r28, 0x29	; 41
    505e:	04 83       	std	Z+4, r16	; 0x04
    5060:	15 83       	std	Z+5, r17	; 0x05
    5062:	26 83       	std	Z+6, r18	; 0x06
    5064:	37 83       	std	Z+7, r19	; 0x07
    5066:	ad 96       	adiw	r28, 0x2d	; 45
    5068:	0c ad       	ldd	r16, Y+60	; 0x3c
    506a:	1d ad       	ldd	r17, Y+61	; 0x3d
    506c:	2e ad       	ldd	r18, Y+62	; 0x3e
    506e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5070:	ad 97       	sbiw	r28, 0x2d	; 45
    5072:	00 87       	std	Z+8, r16	; 0x08
    5074:	11 87       	std	Z+9, r17	; 0x09
    5076:	22 87       	std	Z+10, r18	; 0x0a
    5078:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    507a:	64 87       	std	Z+12, r22	; 0x0c
    507c:	75 87       	std	Z+13, r23	; 0x0d
    507e:	86 87       	std	Z+14, r24	; 0x0e
    5080:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    5082:	ec 96       	adiw	r28, 0x3c	; 60
    5084:	4c ad       	ldd	r20, Y+60	; 0x3c
    5086:	5d ad       	ldd	r21, Y+61	; 0x3d
    5088:	6e ad       	ldd	r22, Y+62	; 0x3e
    508a:	7f ad       	ldd	r23, Y+63	; 0x3f
    508c:	ec 97       	sbiw	r28, 0x3c	; 60
    508e:	cf 01       	movw	r24, r30
    5090:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <scalar_into_quaternion>
    5094:	7d c0       	rjmp	.+250    	; 0x5190 <quest+0x7b6>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    5096:	e3 96       	adiw	r28, 0x33	; 51
    5098:	ee ad       	ldd	r30, Y+62	; 0x3e
    509a:	ff ad       	ldd	r31, Y+63	; 0x3f
    509c:	e3 97       	sbiw	r28, 0x33	; 51
    509e:	10 82       	st	Z, r1
    50a0:	11 82       	std	Z+1, r1	; 0x01
    50a2:	12 82       	std	Z+2, r1	; 0x02
    50a4:	13 82       	std	Z+3, r1	; 0x03
    50a6:	14 82       	std	Z+4, r1	; 0x04
    50a8:	15 82       	std	Z+5, r1	; 0x05
    50aa:	16 82       	std	Z+6, r1	; 0x06
    50ac:	17 82       	std	Z+7, r1	; 0x07
    50ae:	10 86       	std	Z+8, r1	; 0x08
    50b0:	11 86       	std	Z+9, r1	; 0x09
    50b2:	12 86       	std	Z+10, r1	; 0x0a
    50b4:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	a0 e8       	ldi	r26, 0x80	; 128
    50bc:	bf e3       	ldi	r27, 0x3F	; 63
    50be:	84 87       	std	Z+12, r24	; 0x0c
    50c0:	95 87       	std	Z+13, r25	; 0x0d
    50c2:	a6 87       	std	Z+14, r26	; 0x0e
    50c4:	b7 87       	std	Z+15, r27	; 0x0f
    50c6:	64 c0       	rjmp	.+200    	; 0x5190 <quest+0x7b6>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    50c8:	c0 90 ea 04 	lds	r12, 0x04EA
    50cc:	d0 90 eb 04 	lds	r13, 0x04EB
    50d0:	e0 90 ec 04 	lds	r14, 0x04EC
    50d4:	f0 90 ed 04 	lds	r15, 0x04ED
    50d8:	80 90 ee 04 	lds	r8, 0x04EE
    50dc:	90 90 ef 04 	lds	r9, 0x04EF
    50e0:	a0 90 f0 04 	lds	r10, 0x04F0
    50e4:	b0 90 f1 04 	lds	r11, 0x04F1
    50e8:	a5 01       	movw	r20, r10
    50ea:	94 01       	movw	r18, r8
    50ec:	c7 01       	movw	r24, r14
    50ee:	b6 01       	movw	r22, r12
    50f0:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    50f4:	18 16       	cp	r1, r24
    50f6:	4c f0       	brlt	.+18     	; 0x510a <quest+0x730>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    50f8:	b7 fa       	bst	r11, 7
    50fa:	b0 94       	com	r11
    50fc:	b7 f8       	bld	r11, 7
    50fe:	b0 94       	com	r11
    5100:	89 82       	std	Y+1, r8	; 0x01
    5102:	9a 82       	std	Y+2, r9	; 0x02
    5104:	ab 82       	std	Y+3, r10	; 0x03
    5106:	bc 82       	std	Y+4, r11	; 0x04
    5108:	04 c0       	rjmp	.+8      	; 0x5112 <quest+0x738>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    510a:	c9 82       	std	Y+1, r12	; 0x01
    510c:	da 82       	std	Y+2, r13	; 0x02
    510e:	eb 82       	std	Y+3, r14	; 0x03
    5110:	fc 82       	std	Y+4, r15	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5112:	c0 90 f2 04 	lds	r12, 0x04F2
    5116:	d0 90 f3 04 	lds	r13, 0x04F3
    511a:	e0 90 f4 04 	lds	r14, 0x04F4
    511e:	f0 90 f5 04 	lds	r15, 0x04F5
    5122:	80 90 f6 04 	lds	r8, 0x04F6
    5126:	90 90 f7 04 	lds	r9, 0x04F7
    512a:	a0 90 f8 04 	lds	r10, 0x04F8
    512e:	b0 90 f9 04 	lds	r11, 0x04F9
    5132:	a5 01       	movw	r20, r10
    5134:	94 01       	movw	r18, r8
    5136:	c7 01       	movw	r24, r14
    5138:	b6 01       	movw	r22, r12
    513a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    513e:	18 16       	cp	r1, r24
    5140:	4c f0       	brlt	.+18     	; 0x5154 <quest+0x77a>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5142:	b7 fa       	bst	r11, 7
    5144:	b0 94       	com	r11
    5146:	b7 f8       	bld	r11, 7
    5148:	b0 94       	com	r11
    514a:	8d 82       	std	Y+5, r8	; 0x05
    514c:	9e 82       	std	Y+6, r9	; 0x06
    514e:	af 82       	std	Y+7, r10	; 0x07
    5150:	b8 86       	std	Y+8, r11	; 0x08
    5152:	04 c0       	rjmp	.+8      	; 0x515c <quest+0x782>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    5154:	cd 82       	std	Y+5, r12	; 0x05
    5156:	de 82       	std	Y+6, r13	; 0x06
    5158:	ef 82       	std	Y+7, r14	; 0x07
    515a:	f8 86       	std	Y+8, r15	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    515c:	80 90 fa 04 	lds	r8, 0x04FA
    5160:	90 90 fb 04 	lds	r9, 0x04FB
    5164:	a0 90 fc 04 	lds	r10, 0x04FC
    5168:	b0 90 fd 04 	lds	r11, 0x04FD
    516c:	c0 90 fe 04 	lds	r12, 0x04FE
    5170:	d0 90 ff 04 	lds	r13, 0x04FF
    5174:	e0 90 00 05 	lds	r14, 0x0500
    5178:	f0 90 01 05 	lds	r15, 0x0501
    517c:	a7 01       	movw	r20, r14
    517e:	96 01       	movw	r18, r12
    5180:	c5 01       	movw	r24, r10
    5182:	b4 01       	movw	r22, r8
    5184:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__gesf2>
    5188:	18 16       	cp	r1, r24
    518a:	0c f4       	brge	.+2      	; 0x518e <quest+0x7b4>
    518c:	94 cc       	rjmp	.-1752   	; 0x4ab6 <quest+0xdc>
    518e:	98 cc       	rjmp	.-1744   	; 0x4ac0 <quest+0xe6>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    5190:	e4 96       	adiw	r28, 0x34	; 52
    5192:	ff ad       	ldd	r31, Y+63	; 0x3f
    5194:	e4 97       	sbiw	r28, 0x34	; 52
    5196:	f0 93 12 01 	sts	0x0112, r31
 
  return light;
   
}
    519a:	8f 2f       	mov	r24, r31
    519c:	c5 58       	subi	r28, 0x85	; 133
    519e:	df 4f       	sbci	r29, 0xFF	; 255
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	de bf       	out	0x3e, r29	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	df 91       	pop	r29
    51ac:	cf 91       	pop	r28
    51ae:	1f 91       	pop	r17
    51b0:	0f 91       	pop	r16
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	df 90       	pop	r13
    51b8:	cf 90       	pop	r12
    51ba:	bf 90       	pop	r11
    51bc:	af 90       	pop	r10
    51be:	9f 90       	pop	r9
    51c0:	8f 90       	pop	r8
    51c2:	7f 90       	pop	r7
    51c4:	6f 90       	pop	r6
    51c6:	5f 90       	pop	r5
    51c8:	4f 90       	pop	r4
    51ca:	3f 90       	pop	r3
    51cc:	2f 90       	pop	r2
    51ce:	08 95       	ret

000051d0 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    51d0:	2f 92       	push	r2
    51d2:	3f 92       	push	r3
    51d4:	4f 92       	push	r4
    51d6:	5f 92       	push	r5
    51d8:	6f 92       	push	r6
    51da:	7f 92       	push	r7
    51dc:	8f 92       	push	r8
    51de:	9f 92       	push	r9
    51e0:	af 92       	push	r10
    51e2:	bf 92       	push	r11
    51e4:	cf 92       	push	r12
    51e6:	df 92       	push	r13
    51e8:	ef 92       	push	r14
    51ea:	ff 92       	push	r15
    51ec:	0f 93       	push	r16
    51ee:	1f 93       	push	r17
    51f0:	cf 93       	push	r28
    51f2:	df 93       	push	r29
    51f4:	cd b7       	in	r28, 0x3d	; 61
    51f6:	de b7       	in	r29, 0x3e	; 62
    51f8:	c6 5c       	subi	r28, 0xC6	; 198
    51fa:	d1 09       	sbc	r29, r1
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	cd 53       	subi	r28, 0x3D	; 61
    5208:	df 4f       	sbci	r29, 0xFF	; 255
    520a:	88 83       	st	Y, r24
    520c:	c3 5c       	subi	r28, 0xC3	; 195
    520e:	d0 40       	sbci	r29, 0x00	; 0
    5210:	cc 53       	subi	r28, 0x3C	; 60
    5212:	df 4f       	sbci	r29, 0xFF	; 255
    5214:	98 83       	st	Y, r25
    5216:	c4 5c       	subi	r28, 0xC4	; 196
    5218:	d0 40       	sbci	r29, 0x00	; 0
    521a:	cb 53       	subi	r28, 0x3B	; 59
    521c:	df 4f       	sbci	r29, 0xFF	; 255
    521e:	68 83       	st	Y, r22
    5220:	c5 5c       	subi	r28, 0xC5	; 197
    5222:	d0 40       	sbci	r29, 0x00	; 0
    5224:	ca 53       	subi	r28, 0x3A	; 58
    5226:	df 4f       	sbci	r29, 0xFF	; 255
    5228:	78 83       	st	Y, r23
    522a:	c6 5c       	subi	r28, 0xC6	; 198
    522c:	d0 40       	sbci	r29, 0x00	; 0
    522e:	e8 2e       	mov	r14, r24
    5230:	f9 2e       	mov	r15, r25
    5232:	0c e5       	ldi	r16, 0x5C	; 92
    5234:	14 e0       	ldi	r17, 0x04	; 4
    5236:	9e 01       	movw	r18, r28
    5238:	2f 5e       	subi	r18, 0xEF	; 239
    523a:	3f 4f       	sbci	r19, 0xFF	; 255
    523c:	19 01       	movw	r2, r18
    523e:	ce 01       	movw	r24, r28
    5240:	01 96       	adiw	r24, 0x01	; 1
    5242:	6c 01       	movw	r12, r24
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    5244:	d7 01       	movw	r26, r14
    5246:	8d 90       	ld	r8, X+
    5248:	9d 90       	ld	r9, X+
    524a:	ad 90       	ld	r10, X+
    524c:	bd 90       	ld	r11, X+
    524e:	7d 01       	movw	r14, r26
    5250:	f8 01       	movw	r30, r16
    5252:	41 90       	ld	r4, Z+
    5254:	51 90       	ld	r5, Z+
    5256:	61 90       	ld	r6, Z+
    5258:	71 90       	ld	r7, Z+
    525a:	8f 01       	movw	r16, r30
    525c:	a3 01       	movw	r20, r6
    525e:	92 01       	movw	r18, r4
    5260:	c5 01       	movw	r24, r10
    5262:	b4 01       	movw	r22, r8
    5264:	0e 94 80 31 	call	0x6300	; 0x6300 <__subsf3>
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	40 e0       	ldi	r20, 0x00	; 0
    526e:	5f e3       	ldi	r21, 0x3F	; 63
    5270:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    5274:	d6 01       	movw	r26, r12
    5276:	6d 93       	st	X+, r22
    5278:	7d 93       	st	X+, r23
    527a:	8d 93       	st	X+, r24
    527c:	9d 93       	st	X+, r25
    527e:	6d 01       	movw	r12, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    5280:	a3 01       	movw	r20, r6
    5282:	92 01       	movw	r18, r4
    5284:	c5 01       	movw	r24, r10
    5286:	b4 01       	movw	r22, r8
    5288:	0e 94 81 31 	call	0x6302	; 0x6302 <__addsf3>
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	40 e0       	ldi	r20, 0x00	; 0
    5292:	5f e3       	ldi	r21, 0x3F	; 63
    5294:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    5298:	f1 01       	movw	r30, r2
    529a:	61 93       	st	Z+, r22
    529c:	71 93       	st	Z+, r23
    529e:	81 93       	st	Z+, r24
    52a0:	91 93       	st	Z+, r25
    52a2:	1f 01       	movw	r2, r30
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    52a4:	f4 e0       	ldi	r31, 0x04	; 4
    52a6:	0c 36       	cpi	r16, 0x6C	; 108
    52a8:	1f 07       	cpc	r17, r31
    52aa:	61 f6       	brne	.-104    	; 0x5244 <omega_estimation+0x74>
    52ac:	9e 01       	movw	r18, r28
    52ae:	23 5d       	subi	r18, 0xD3	; 211
    52b0:	3f 4f       	sbci	r19, 0xFF	; 255
    52b2:	8e 01       	movw	r16, r28
    52b4:	0f 5d       	subi	r16, 0xDF	; 223
    52b6:	1f 4f       	sbci	r17, 0xFF	; 255
    52b8:	ae 01       	movw	r20, r28
    52ba:	43 5f       	subi	r20, 0xF3	; 243
    52bc:	5f 4f       	sbci	r21, 0xFF	; 255
    52be:	c8 01       	movw	r24, r16
    52c0:	de 01       	movw	r26, r28
    52c2:	51 96       	adiw	r26, 0x11	; 17
    52c4:	fe 01       	movw	r30, r28
    52c6:	31 96       	adiw	r30, 0x01	; 1
    52c8:	bd 01       	movw	r22, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    52ca:	c1 90       	ld	r12, Z+
    52cc:	d1 90       	ld	r13, Z+
    52ce:	e1 90       	ld	r14, Z+
    52d0:	f1 90       	ld	r15, Z+
    52d2:	d9 01       	movw	r26, r18
    52d4:	cd 92       	st	X+, r12
    52d6:	dd 92       	st	X+, r13
    52d8:	ed 92       	st	X+, r14
    52da:	fd 92       	st	X+, r15
    52dc:	9d 01       	movw	r18, r26
    e[i] = q[i];
    52de:	db 01       	movw	r26, r22
    52e0:	cd 90       	ld	r12, X+
    52e2:	dd 90       	ld	r13, X+
    52e4:	ed 90       	ld	r14, X+
    52e6:	fd 90       	ld	r15, X+
    52e8:	bd 01       	movw	r22, r26
    52ea:	dc 01       	movw	r26, r24
    52ec:	cd 92       	st	X+, r12
    52ee:	dd 92       	st	X+, r13
    52f0:	ed 92       	st	X+, r14
    52f2:	fd 92       	st	X+, r15
    52f4:	cd 01       	movw	r24, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    52f6:	e4 17       	cp	r30, r20
    52f8:	f5 07       	cpc	r31, r21
    52fa:	39 f7       	brne	.-50     	; 0x52ca <omega_estimation+0xfa>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    52fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5300:	af 8d       	ldd	r26, Y+31	; 0x1f
    5302:	b8 a1       	ldd	r27, Y+32	; 0x20
    5304:	c7 54       	subi	r28, 0x47	; 71
    5306:	df 4f       	sbci	r29, 0xFF	; 255
    5308:	88 83       	st	Y, r24
    530a:	99 83       	std	Y+1, r25	; 0x01
    530c:	aa 83       	std	Y+2, r26	; 0x02
    530e:	bb 83       	std	Y+3, r27	; 0x03
    5310:	c9 5b       	subi	r28, 0xB9	; 185
    5312:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5314:	ad 96       	adiw	r28, 0x2d	; 45
    5316:	1c ae       	std	Y+60, r1	; 0x3c
    5318:	1d ae       	std	Y+61, r1	; 0x3d
    531a:	1e ae       	std	Y+62, r1	; 0x3e
    531c:	1f ae       	std	Y+63, r1	; 0x3f
    531e:	ad 97       	sbiw	r28, 0x2d	; 45
    5320:	c9 a4       	ldd	r12, Y+41	; 0x29
    5322:	da a4       	ldd	r13, Y+42	; 0x2a
    5324:	eb a4       	ldd	r14, Y+43	; 0x2b
    5326:	fc a4       	ldd	r15, Y+44	; 0x2c
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 e0       	ldi	r20, 0x00	; 0
    532e:	50 ec       	ldi	r21, 0xC0	; 192
    5330:	c7 01       	movw	r24, r14
    5332:	b6 01       	movw	r22, r12
    5334:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    5338:	e1 96       	adiw	r28, 0x31	; 49
    533a:	6c af       	std	Y+60, r22	; 0x3c
    533c:	7d af       	std	Y+61, r23	; 0x3d
    533e:	8e af       	std	Y+62, r24	; 0x3e
    5340:	9f af       	std	Y+63, r25	; 0x3f
    5342:	e1 97       	sbiw	r28, 0x31	; 49
    5344:	8d a0       	ldd	r8, Y+37	; 0x25
    5346:	9e a0       	ldd	r9, Y+38	; 0x26
    5348:	af a0       	ldd	r10, Y+39	; 0x27
    534a:	b8 a4       	ldd	r11, Y+40	; 0x28
    534c:	a5 01       	movw	r20, r10
    534e:	94 01       	movw	r18, r8
    5350:	c5 01       	movw	r24, r10
    5352:	b4 01       	movw	r22, r8
    5354:	d6 d7       	rcall	.+4012   	; 0x6302 <__addsf3>
    5356:	e5 96       	adiw	r28, 0x35	; 53
    5358:	6c af       	std	Y+60, r22	; 0x3c
    535a:	7d af       	std	Y+61, r23	; 0x3d
    535c:	8e af       	std	Y+62, r24	; 0x3e
    535e:	9f af       	std	Y+63, r25	; 0x3f
    5360:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    5362:	a7 01       	movw	r20, r14
    5364:	96 01       	movw	r18, r12
    5366:	c7 01       	movw	r24, r14
    5368:	b6 01       	movw	r22, r12
    536a:	cb d7       	rcall	.+3990   	; 0x6302 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    536c:	e9 96       	adiw	r28, 0x39	; 57
    536e:	6c af       	std	Y+60, r22	; 0x3c
    5370:	7d af       	std	Y+61, r23	; 0x3d
    5372:	8e af       	std	Y+62, r24	; 0x3e
    5374:	9f af       	std	Y+63, r25	; 0x3f
    5376:	e9 97       	sbiw	r28, 0x39	; 57
    5378:	ed 96       	adiw	r28, 0x3d	; 61
    537a:	1c ae       	std	Y+60, r1	; 0x3c
    537c:	1d ae       	std	Y+61, r1	; 0x3d
    537e:	1e ae       	std	Y+62, r1	; 0x3e
    5380:	1f ae       	std	Y+63, r1	; 0x3f
    5382:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    5384:	c9 a0       	ldd	r12, Y+33	; 0x21
    5386:	da a0       	ldd	r13, Y+34	; 0x22
    5388:	eb a0       	ldd	r14, Y+35	; 0x23
    538a:	fc a0       	ldd	r15, Y+36	; 0x24
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	40 e0       	ldi	r20, 0x00	; 0
    5392:	50 ec       	ldi	r21, 0xC0	; 192
    5394:	c7 01       	movw	r24, r14
    5396:	b6 01       	movw	r22, r12
    5398:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    539c:	c3 58       	subi	r28, 0x83	; 131
    539e:	df 4f       	sbci	r29, 0xFF	; 255
    53a0:	68 83       	st	Y, r22
    53a2:	79 83       	std	Y+1, r23	; 0x01
    53a4:	8a 83       	std	Y+2, r24	; 0x02
    53a6:	9b 83       	std	Y+3, r25	; 0x03
    53a8:	cd 57       	subi	r28, 0x7D	; 125
    53aa:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e0       	ldi	r20, 0x00	; 0
    53b2:	50 ec       	ldi	r21, 0xC0	; 192
    53b4:	c5 01       	movw	r24, r10
    53b6:	b4 01       	movw	r22, r8
    53b8:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    53bc:	cf 57       	subi	r28, 0x7F	; 127
    53be:	df 4f       	sbci	r29, 0xFF	; 255
    53c0:	68 83       	st	Y, r22
    53c2:	79 83       	std	Y+1, r23	; 0x01
    53c4:	8a 83       	std	Y+2, r24	; 0x02
    53c6:	9b 83       	std	Y+3, r25	; 0x03
    53c8:	c1 58       	subi	r28, 0x81	; 129
    53ca:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    53cc:	a7 01       	movw	r20, r14
    53ce:	96 01       	movw	r18, r12
    53d0:	c7 01       	movw	r24, r14
    53d2:	b6 01       	movw	r22, r12
    53d4:	96 d7       	rcall	.+3884   	; 0x6302 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    53d6:	cb 57       	subi	r28, 0x7B	; 123
    53d8:	df 4f       	sbci	r29, 0xFF	; 255
    53da:	68 83       	st	Y, r22
    53dc:	79 83       	std	Y+1, r23	; 0x01
    53de:	8a 83       	std	Y+2, r24	; 0x02
    53e0:	9b 83       	std	Y+3, r25	; 0x03
    53e2:	c5 58       	subi	r28, 0x85	; 133
    53e4:	d0 40       	sbci	r29, 0x00	; 0
    53e6:	c7 57       	subi	r28, 0x77	; 119
    53e8:	df 4f       	sbci	r29, 0xFF	; 255
    53ea:	18 82       	st	Y, r1
    53ec:	19 82       	std	Y+1, r1	; 0x01
    53ee:	1a 82       	std	Y+2, r1	; 0x02
    53f0:	1b 82       	std	Y+3, r1	; 0x03
    53f2:	c9 58       	subi	r28, 0x89	; 137
    53f4:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    53f6:	c7 54       	subi	r28, 0x47	; 71
    53f8:	df 4f       	sbci	r29, 0xFF	; 255
    53fa:	28 81       	ld	r18, Y
    53fc:	39 81       	ldd	r19, Y+1	; 0x01
    53fe:	4a 81       	ldd	r20, Y+2	; 0x02
    5400:	5b 81       	ldd	r21, Y+3	; 0x03
    5402:	c9 5b       	subi	r28, 0xB9	; 185
    5404:	d0 40       	sbci	r29, 0x00	; 0
    5406:	ca 01       	movw	r24, r20
    5408:	b9 01       	movw	r22, r18
    540a:	7b d7       	rcall	.+3830   	; 0x6302 <__addsf3>
    540c:	c3 57       	subi	r28, 0x73	; 115
    540e:	df 4f       	sbci	r29, 0xFF	; 255
    5410:	68 83       	st	Y, r22
    5412:	79 83       	std	Y+1, r23	; 0x01
    5414:	8a 83       	std	Y+2, r24	; 0x02
    5416:	9b 83       	std	Y+3, r25	; 0x03
    5418:	cd 58       	subi	r28, 0x8D	; 141
    541a:	d0 40       	sbci	r29, 0x00	; 0
    541c:	cf 56       	subi	r28, 0x6F	; 111
    541e:	df 4f       	sbci	r29, 0xFF	; 255
    5420:	18 82       	st	Y, r1
    5422:	19 82       	std	Y+1, r1	; 0x01
    5424:	1a 82       	std	Y+2, r1	; 0x02
    5426:	1b 82       	std	Y+3, r1	; 0x03
    5428:	c1 59       	subi	r28, 0x91	; 145
    542a:	d0 40       	sbci	r29, 0x00	; 0
    542c:	cb 56       	subi	r28, 0x6B	; 107
    542e:	df 4f       	sbci	r29, 0xFF	; 255
    5430:	18 82       	st	Y, r1
    5432:	19 82       	std	Y+1, r1	; 0x01
    5434:	1a 82       	std	Y+2, r1	; 0x02
    5436:	1b 82       	std	Y+3, r1	; 0x03
    5438:	c5 59       	subi	r28, 0x95	; 149
    543a:	d0 40       	sbci	r29, 0x00	; 0
    543c:	c7 56       	subi	r28, 0x67	; 103
    543e:	df 4f       	sbci	r29, 0xFF	; 255
    5440:	18 82       	st	Y, r1
    5442:	19 82       	std	Y+1, r1	; 0x01
    5444:	1a 82       	std	Y+2, r1	; 0x02
    5446:	1b 82       	std	Y+3, r1	; 0x03
    5448:	c9 59       	subi	r28, 0x99	; 153
    544a:	d0 40       	sbci	r29, 0x00	; 0
    544c:	c3 56       	subi	r28, 0x63	; 99
    544e:	df 4f       	sbci	r29, 0xFF	; 255
    5450:	68 83       	st	Y, r22
    5452:	79 83       	std	Y+1, r23	; 0x01
    5454:	8a 83       	std	Y+2, r24	; 0x02
    5456:	9b 83       	std	Y+3, r25	; 0x03
    5458:	cd 59       	subi	r28, 0x9D	; 157
    545a:	d0 40       	sbci	r29, 0x00	; 0
    545c:	cf 55       	subi	r28, 0x5F	; 95
    545e:	df 4f       	sbci	r29, 0xFF	; 255
    5460:	18 82       	st	Y, r1
    5462:	19 82       	std	Y+1, r1	; 0x01
    5464:	1a 82       	std	Y+2, r1	; 0x02
    5466:	1b 82       	std	Y+3, r1	; 0x03
    5468:	c1 5a       	subi	r28, 0xA1	; 161
    546a:	d0 40       	sbci	r29, 0x00	; 0
    546c:	cb 55       	subi	r28, 0x5B	; 91
    546e:	df 4f       	sbci	r29, 0xFF	; 255
    5470:	18 82       	st	Y, r1
    5472:	19 82       	std	Y+1, r1	; 0x01
    5474:	1a 82       	std	Y+2, r1	; 0x02
    5476:	1b 82       	std	Y+3, r1	; 0x03
    5478:	c5 5a       	subi	r28, 0xA5	; 165
    547a:	d0 40       	sbci	r29, 0x00	; 0
    547c:	c7 55       	subi	r28, 0x57	; 87
    547e:	df 4f       	sbci	r29, 0xFF	; 255
    5480:	18 82       	st	Y, r1
    5482:	19 82       	std	Y+1, r1	; 0x01
    5484:	1a 82       	std	Y+2, r1	; 0x02
    5486:	1b 82       	std	Y+3, r1	; 0x03
    5488:	c9 5a       	subi	r28, 0xA9	; 169
    548a:	d0 40       	sbci	r29, 0x00	; 0
    548c:	c3 55       	subi	r28, 0x53	; 83
    548e:	df 4f       	sbci	r29, 0xFF	; 255
    5490:	68 83       	st	Y, r22
    5492:	79 83       	std	Y+1, r23	; 0x01
    5494:	8a 83       	std	Y+2, r24	; 0x02
    5496:	9b 83       	std	Y+3, r25	; 0x03
    5498:	cd 5a       	subi	r28, 0xAD	; 173
    549a:	d0 40       	sbci	r29, 0x00	; 0
    549c:	de 01       	movw	r26, r28
    549e:	ab 5b       	subi	r26, 0xBB	; 187
    54a0:	bf 4f       	sbci	r27, 0xFF	; 255
    54a2:	c3 54       	subi	r28, 0x43	; 67
    54a4:	df 4f       	sbci	r29, 0xFF	; 255
    54a6:	b9 83       	std	Y+1, r27	; 0x01
    54a8:	a8 83       	st	Y, r26
    54aa:	cd 5b       	subi	r28, 0xBD	; 189
    54ac:	d0 40       	sbci	r29, 0x00	; 0
    54ae:	c1 54       	subi	r28, 0x41	; 65
    54b0:	df 4f       	sbci	r29, 0xFF	; 255
    54b2:	19 83       	std	Y+1, r17	; 0x01
    54b4:	08 83       	st	Y, r16
    54b6:	cf 5b       	subi	r28, 0xBF	; 191
    54b8:	d0 40       	sbci	r29, 0x00	; 0
    54ba:	c9 54       	subi	r28, 0x49	; 73
    54bc:	df 4f       	sbci	r29, 0xFF	; 255
    54be:	19 82       	std	Y+1, r1	; 0x01
    54c0:	18 82       	st	Y, r1
    54c2:	c7 5b       	subi	r28, 0xB7	; 183
    54c4:	d0 40       	sbci	r29, 0x00	; 0
    54c6:	fe 01       	movw	r30, r28
    54c8:	bd 96       	adiw	r30, 0x2d	; 45
    54ca:	cf 54       	subi	r28, 0x4F	; 79
    54cc:	df 4f       	sbci	r29, 0xFF	; 255
    54ce:	f9 83       	std	Y+1, r31	; 0x01
    54d0:	e8 83       	st	Y, r30
    54d2:	c1 5b       	subi	r28, 0xB1	; 177
    54d4:	d0 40       	sbci	r29, 0x00	; 0
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    54d6:	cf 53       	subi	r28, 0x3F	; 63
    54d8:	df 4f       	sbci	r29, 0xFF	; 255
    54da:	08 83       	st	Y, r16
    54dc:	c1 5c       	subi	r28, 0xC1	; 193
    54de:	d0 40       	sbci	r29, 0x00	; 0
    54e0:	ce 53       	subi	r28, 0x3E	; 62
    54e2:	df 4f       	sbci	r29, 0xFF	; 255
    54e4:	18 83       	st	Y, r17
    54e6:	c2 5c       	subi	r28, 0xC2	; 194
    54e8:	d0 40       	sbci	r29, 0x00	; 0
    54ea:	6b c0       	rjmp	.+214    	; 0x55c2 <omega_estimation+0x3f2>
    54ec:	cd 54       	subi	r28, 0x4D	; 77
    54ee:	df 4f       	sbci	r29, 0xFF	; 255
    54f0:	a8 81       	ld	r26, Y
    54f2:	b9 81       	ldd	r27, Y+1	; 0x01
    54f4:	c3 5b       	subi	r28, 0xB3	; 179
    54f6:	d0 40       	sbci	r29, 0x00	; 0
    54f8:	6d 91       	ld	r22, X+
    54fa:	7d 91       	ld	r23, X+
    54fc:	8d 91       	ld	r24, X+
    54fe:	9d 91       	ld	r25, X+
    5500:	cd 54       	subi	r28, 0x4D	; 77
    5502:	df 4f       	sbci	r29, 0xFF	; 255
    5504:	b9 83       	std	Y+1, r27	; 0x01
    5506:	a8 83       	st	Y, r26
    5508:	c3 5b       	subi	r28, 0xB3	; 179
    550a:	d0 40       	sbci	r29, 0x00	; 0
    550c:	cb 54       	subi	r28, 0x4B	; 75
    550e:	df 4f       	sbci	r29, 0xFF	; 255
    5510:	e8 81       	ld	r30, Y
    5512:	f9 81       	ldd	r31, Y+1	; 0x01
    5514:	c5 5b       	subi	r28, 0xB5	; 181
    5516:	d0 40       	sbci	r29, 0x00	; 0
    5518:	21 91       	ld	r18, Z+
    551a:	31 91       	ld	r19, Z+
    551c:	41 91       	ld	r20, Z+
    551e:	51 91       	ld	r21, Z+
    5520:	cb 54       	subi	r28, 0x4B	; 75
    5522:	df 4f       	sbci	r29, 0xFF	; 255
    5524:	f9 83       	std	Y+1, r31	; 0x01
    5526:	e8 83       	st	Y, r30
    5528:	c5 5b       	subi	r28, 0xB5	; 181
    552a:	d0 40       	sbci	r29, 0x00	; 0
    552c:	d1 01       	movw	r26, r2
    552e:	4d 90       	ld	r4, X+
    5530:	5d 90       	ld	r5, X+
    5532:	6d 90       	ld	r6, X+
    5534:	7d 90       	ld	r7, X+
    5536:	1d 01       	movw	r2, r26
    5538:	e3 d6       	rcall	.+3526   	; 0x6300 <__subsf3>
    553a:	6b 01       	movw	r12, r22
    553c:	7c 01       	movw	r14, r24
    553e:	a3 01       	movw	r20, r6
    5540:	92 01       	movw	r18, r4
    5542:	c5 01       	movw	r24, r10
    5544:	b4 01       	movw	r22, r8
    5546:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    554a:	c7 54       	subi	r28, 0x47	; 71
    554c:	df 4f       	sbci	r29, 0xFF	; 255
    554e:	28 81       	ld	r18, Y
    5550:	39 81       	ldd	r19, Y+1	; 0x01
    5552:	4a 81       	ldd	r20, Y+2	; 0x02
    5554:	5b 81       	ldd	r21, Y+3	; 0x03
    5556:	c9 5b       	subi	r28, 0xB9	; 185
    5558:	d0 40       	sbci	r29, 0x00	; 0
    555a:	b7 d7       	rcall	.+3950   	; 0x64ca <__divsf3>
    555c:	9b 01       	movw	r18, r22
    555e:	ac 01       	movw	r20, r24
    5560:	c7 01       	movw	r24, r14
    5562:	b6 01       	movw	r22, r12
    5564:	ce d6       	rcall	.+3484   	; 0x6302 <__addsf3>
    5566:	f8 01       	movw	r30, r16
    5568:	60 83       	st	Z, r22
    556a:	71 83       	std	Z+1, r23	; 0x01
    556c:	82 83       	std	Z+2, r24	; 0x02
    556e:	93 83       	std	Z+3, r25	; 0x03
    5570:	04 5f       	subi	r16, 0xF4	; 244
    5572:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    5574:	cf 54       	subi	r28, 0x4F	; 79
    5576:	df 4f       	sbci	r29, 0xFF	; 255
    5578:	28 81       	ld	r18, Y
    557a:	39 81       	ldd	r19, Y+1	; 0x01
    557c:	c1 5b       	subi	r28, 0xB1	; 177
    557e:	d0 40       	sbci	r29, 0x00	; 0
    5580:	22 16       	cp	r2, r18
    5582:	33 06       	cpc	r3, r19
    5584:	09 f0       	breq	.+2      	; 0x5588 <omega_estimation+0x3b8>
    5586:	b2 cf       	rjmp	.-156    	; 0x54ec <omega_estimation+0x31c>
    5588:	c9 54       	subi	r28, 0x49	; 73
    558a:	df 4f       	sbci	r29, 0xFF	; 255
    558c:	88 81       	ld	r24, Y
    558e:	99 81       	ldd	r25, Y+1	; 0x01
    5590:	c7 5b       	subi	r28, 0xB7	; 183
    5592:	d0 40       	sbci	r29, 0x00	; 0
    5594:	0c 96       	adiw	r24, 0x0c	; 12
    5596:	c9 54       	subi	r28, 0x49	; 73
    5598:	df 4f       	sbci	r29, 0xFF	; 255
    559a:	99 83       	std	Y+1, r25	; 0x01
    559c:	88 83       	st	Y, r24
    559e:	c7 5b       	subi	r28, 0xB7	; 183
    55a0:	d0 40       	sbci	r29, 0x00	; 0
    55a2:	c3 54       	subi	r28, 0x43	; 67
    55a4:	df 4f       	sbci	r29, 0xFF	; 255
    55a6:	a8 81       	ld	r26, Y
    55a8:	b9 81       	ldd	r27, Y+1	; 0x01
    55aa:	cd 5b       	subi	r28, 0xBD	; 189
    55ac:	d0 40       	sbci	r29, 0x00	; 0
    55ae:	14 96       	adiw	r26, 0x04	; 4
    55b0:	c3 54       	subi	r28, 0x43	; 67
    55b2:	df 4f       	sbci	r29, 0xFF	; 255
    55b4:	b9 83       	std	Y+1, r27	; 0x01
    55b6:	a8 83       	st	Y, r26
    55b8:	cd 5b       	subi	r28, 0xBD	; 189
    55ba:	d0 40       	sbci	r29, 0x00	; 0
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    55bc:	84 97       	sbiw	r24, 0x24	; 36
    55be:	09 f4       	brne	.+2      	; 0x55c2 <omega_estimation+0x3f2>
    55c0:	44 c0       	rjmp	.+136    	; 0x564a <omega_estimation+0x47a>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    55c2:	c1 54       	subi	r28, 0x41	; 65
    55c4:	df 4f       	sbci	r29, 0xFF	; 255
    55c6:	e8 81       	ld	r30, Y
    55c8:	f9 81       	ldd	r31, Y+1	; 0x01
    55ca:	cf 5b       	subi	r28, 0xBF	; 191
    55cc:	d0 40       	sbci	r29, 0x00	; 0
    55ce:	61 91       	ld	r22, Z+
    55d0:	71 91       	ld	r23, Z+
    55d2:	81 91       	ld	r24, Z+
    55d4:	91 91       	ld	r25, Z+
    55d6:	c1 54       	subi	r28, 0x41	; 65
    55d8:	df 4f       	sbci	r29, 0xFF	; 255
    55da:	f9 83       	std	Y+1, r31	; 0x01
    55dc:	e8 83       	st	Y, r30
    55de:	cf 5b       	subi	r28, 0xBF	; 191
    55e0:	d0 40       	sbci	r29, 0x00	; 0
    55e2:	9b 01       	movw	r18, r22
    55e4:	ac 01       	movw	r20, r24
    55e6:	8d d6       	rcall	.+3354   	; 0x6302 <__addsf3>
    55e8:	4b 01       	movw	r8, r22
    55ea:	5c 01       	movw	r10, r24
    55ec:	c3 54       	subi	r28, 0x43	; 67
    55ee:	df 4f       	sbci	r29, 0xFF	; 255
    55f0:	08 81       	ld	r16, Y
    55f2:	19 81       	ldd	r17, Y+1	; 0x01
    55f4:	cd 5b       	subi	r28, 0xBD	; 189
    55f6:	d0 40       	sbci	r29, 0x00	; 0
    55f8:	cf 53       	subi	r28, 0x3F	; 63
    55fa:	df 4f       	sbci	r29, 0xFF	; 255
    55fc:	28 80       	ld	r2, Y
    55fe:	c1 5c       	subi	r28, 0xC1	; 193
    5600:	d0 40       	sbci	r29, 0x00	; 0
    5602:	ce 53       	subi	r28, 0x3E	; 62
    5604:	df 4f       	sbci	r29, 0xFF	; 255
    5606:	38 80       	ld	r3, Y
    5608:	c2 5c       	subi	r28, 0xC2	; 194
    560a:	d0 40       	sbci	r29, 0x00	; 0
    560c:	29 e6       	ldi	r18, 0x69	; 105
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	2c 0f       	add	r18, r28
    5612:	3d 1f       	adc	r19, r29
    5614:	c9 54       	subi	r28, 0x49	; 73
    5616:	df 4f       	sbci	r29, 0xFF	; 255
    5618:	88 81       	ld	r24, Y
    561a:	99 81       	ldd	r25, Y+1	; 0x01
    561c:	c7 5b       	subi	r28, 0xB7	; 183
    561e:	d0 40       	sbci	r29, 0x00	; 0
    5620:	28 0f       	add	r18, r24
    5622:	39 1f       	adc	r19, r25
    5624:	cb 54       	subi	r28, 0x4B	; 75
    5626:	df 4f       	sbci	r29, 0xFF	; 255
    5628:	39 83       	std	Y+1, r19	; 0x01
    562a:	28 83       	st	Y, r18
    562c:	c5 5b       	subi	r28, 0xB5	; 181
    562e:	d0 40       	sbci	r29, 0x00	; 0
    5630:	ad e8       	ldi	r26, 0x8D	; 141
    5632:	b0 e0       	ldi	r27, 0x00	; 0
    5634:	ac 0f       	add	r26, r28
    5636:	bd 1f       	adc	r27, r29
    5638:	a8 0f       	add	r26, r24
    563a:	b9 1f       	adc	r27, r25
    563c:	cd 54       	subi	r28, 0x4D	; 77
    563e:	df 4f       	sbci	r29, 0xFF	; 255
    5640:	b9 83       	std	Y+1, r27	; 0x01
    5642:	a8 83       	st	Y, r26
    5644:	c3 5b       	subi	r28, 0xB3	; 179
    5646:	d0 40       	sbci	r29, 0x00	; 0
    5648:	51 cf       	rjmp	.-350    	; 0x54ec <omega_estimation+0x31c>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    564a:	ae 01       	movw	r20, r28
    564c:	47 5c       	subi	r20, 0xC7	; 199
    564e:	5f 4f       	sbci	r21, 0xFF	; 255
    5650:	be 01       	movw	r22, r28
    5652:	6b 5b       	subi	r22, 0xBB	; 187
    5654:	7f 4f       	sbci	r23, 0xFF	; 255
    5656:	ce 01       	movw	r24, r28
    5658:	8d 96       	adiw	r24, 0x2d	; 45
    565a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <vector_into_matrix>
    565e:	8e 01       	movw	r16, r28
    5660:	07 5c       	subi	r16, 0xC7	; 199
    5662:	1f 4f       	sbci	r17, 0xFF	; 255
    5664:	0f 2e       	mov	r0, r31
    5666:	f0 e5       	ldi	r31, 0x50	; 80
    5668:	cf 2e       	mov	r12, r31
    566a:	f4 e0       	ldi	r31, 0x04	; 4
    566c:	df 2e       	mov	r13, r31
    566e:	f0 2d       	mov	r31, r0
    5670:	cb 53       	subi	r28, 0x3B	; 59
    5672:	df 4f       	sbci	r29, 0xFF	; 255
    5674:	e8 80       	ld	r14, Y
    5676:	c5 5c       	subi	r28, 0xC5	; 197
    5678:	d0 40       	sbci	r29, 0x00	; 0
    567a:	ca 53       	subi	r28, 0x3A	; 58
    567c:	df 4f       	sbci	r29, 0xFF	; 255
    567e:	f8 80       	ld	r15, Y
    5680:	c6 5c       	subi	r28, 0xC6	; 198
    5682:	d0 40       	sbci	r29, 0x00	; 0
    5684:	18 01       	movw	r2, r16
    5686:	bc e0       	ldi	r27, 0x0C	; 12
    5688:	2b 0e       	add	r2, r27
    568a:	31 1c       	adc	r3, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    568c:	f8 01       	movw	r30, r16
    568e:	61 91       	ld	r22, Z+
    5690:	71 91       	ld	r23, Z+
    5692:	81 91       	ld	r24, Z+
    5694:	91 91       	ld	r25, Z+
    5696:	8f 01       	movw	r16, r30
    5698:	d6 01       	movw	r26, r12
    569a:	4d 90       	ld	r4, X+
    569c:	5d 90       	ld	r5, X+
    569e:	6d 90       	ld	r6, X+
    56a0:	7d 90       	ld	r7, X+
    56a2:	6d 01       	movw	r12, r26
    56a4:	28 e0       	ldi	r18, 0x08	; 8
    56a6:	31 e2       	ldi	r19, 0x21	; 33
    56a8:	44 e0       	ldi	r20, 0x04	; 4
    56aa:	5d e3       	ldi	r21, 0x3D	; 61
    56ac:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    56b0:	4b 01       	movw	r8, r22
    56b2:	5c 01       	movw	r10, r24
    56b4:	20 ef       	ldi	r18, 0xF0	; 240
    56b6:	3d eb       	ldi	r19, 0xBD	; 189
    56b8:	47 e7       	ldi	r20, 0x77	; 119
    56ba:	5f e3       	ldi	r21, 0x3F	; 63
    56bc:	c3 01       	movw	r24, r6
    56be:	b2 01       	movw	r22, r4
    56c0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    56c4:	9b 01       	movw	r18, r22
    56c6:	ac 01       	movw	r20, r24
    56c8:	c5 01       	movw	r24, r10
    56ca:	b4 01       	movw	r22, r8
    56cc:	1a d6       	rcall	.+3124   	; 0x6302 <__addsf3>
    56ce:	f7 01       	movw	r30, r14
    56d0:	61 93       	st	Z+, r22
    56d2:	71 93       	st	Z+, r23
    56d4:	81 93       	st	Z+, r24
    56d6:	91 93       	st	Z+, r25
    56d8:	7f 01       	movw	r14, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    56da:	02 15       	cp	r16, r2
    56dc:	13 05       	cpc	r17, r3
    56de:	b1 f6       	brne	.-84     	; 0x568c <omega_estimation+0x4bc>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    56e0:	6c e5       	ldi	r22, 0x5C	; 92
    56e2:	74 e0       	ldi	r23, 0x04	; 4
    56e4:	cd 53       	subi	r28, 0x3D	; 61
    56e6:	df 4f       	sbci	r29, 0xFF	; 255
    56e8:	88 81       	ld	r24, Y
    56ea:	c3 5c       	subi	r28, 0xC3	; 195
    56ec:	d0 40       	sbci	r29, 0x00	; 0
    56ee:	cc 53       	subi	r28, 0x3C	; 60
    56f0:	df 4f       	sbci	r29, 0xFF	; 255
    56f2:	98 81       	ld	r25, Y
    56f4:	c4 5c       	subi	r28, 0xC4	; 196
    56f6:	d0 40       	sbci	r29, 0x00	; 0
    56f8:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    56fc:	60 e5       	ldi	r22, 0x50	; 80
    56fe:	74 e0       	ldi	r23, 0x04	; 4
    5700:	cb 53       	subi	r28, 0x3B	; 59
    5702:	df 4f       	sbci	r29, 0xFF	; 255
    5704:	88 81       	ld	r24, Y
    5706:	c5 5c       	subi	r28, 0xC5	; 197
    5708:	d0 40       	sbci	r29, 0x00	; 0
    570a:	ca 53       	subi	r28, 0x3A	; 58
    570c:	df 4f       	sbci	r29, 0xFF	; 255
    570e:	98 81       	ld	r25, Y
    5710:	c6 5c       	subi	r28, 0xC6	; 198
    5712:	d0 40       	sbci	r29, 0x00	; 0
    5714:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    5718:	ca 53       	subi	r28, 0x3A	; 58
    571a:	df 4f       	sbci	r29, 0xFF	; 255
    571c:	0f b6       	in	r0, 0x3f	; 63
    571e:	f8 94       	cli
    5720:	de bf       	out	0x3e, r29	; 62
    5722:	0f be       	out	0x3f, r0	; 63
    5724:	cd bf       	out	0x3d, r28	; 61
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	1f 91       	pop	r17
    572c:	0f 91       	pop	r16
    572e:	ff 90       	pop	r15
    5730:	ef 90       	pop	r14
    5732:	df 90       	pop	r13
    5734:	cf 90       	pop	r12
    5736:	bf 90       	pop	r11
    5738:	af 90       	pop	r10
    573a:	9f 90       	pop	r9
    573c:	8f 90       	pop	r8
    573e:	7f 90       	pop	r7
    5740:	6f 90       	pop	r6
    5742:	5f 90       	pop	r5
    5744:	4f 90       	pop	r4
    5746:	3f 90       	pop	r3
    5748:	2f 90       	pop	r2
    574a:	08 95       	ret

0000574c <init_SPI>:
}

void init_SPI(void)
{
	///Set MOSI and SCK output, all others input
	DDRB = 0;
    574c:	17 ba       	out	0x17, r1	; 23
	DDRB = _BV(SPICLK) | _BV(SPIDO);
    574e:	86 e0       	ldi	r24, 0x06	; 6
    5750:	87 bb       	out	0x17, r24	; 23
	
	
	DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5752:	87 b3       	in	r24, 0x17	; 23
    5754:	81 63       	ori	r24, 0x31	; 49
    5756:	87 bb       	out	0x17, r24	; 23
	///Switch off all devices
	PORT_CS |= _BV(CC1020) | _BV(ADC_S);
    5758:	88 b3       	in	r24, 0x18	; 24
    575a:	80 63       	ori	r24, 0x30	; 48
    575c:	88 bb       	out	0x18, r24	; 24
	
	PORTB&= ~(1<<PB0);
    575e:	c0 98       	cbi	0x18, 0	; 24
	///Enable SPI, Master, set clock rate
	///@todo Check frequency
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);
    5760:	8f e5       	ldi	r24, 0x5F	; 95
    5762:	8d b9       	out	0x0d, r24	; 13
    5764:	08 95       	ret

00005766 <poll_SS1>:
}

// for oils purpose
	
void poll_SS1(void)
{
    5766:	ef 92       	push	r14
    5768:	ff 92       	push	r15
    576a:	0f 93       	push	r16
    576c:	1f 93       	push	r17
    576e:	cf 93       	push	r28
    5770:	df 93       	push	r29
    5772:	00 e0       	ldi	r16, 0x00	; 0
    5774:	10 e0       	ldi	r17, 0x00	; 0
  //transmit_UART0(c);
 
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    5776:	76 d0       	rcall	.+236    	; 0x5864 <receive_UART0>
    5778:	e8 01       	movw	r28, r16
    577a:	cc 0f       	add	r28, r28
    577c:	dd 1f       	adc	r29, r29
    577e:	c3 55       	subi	r28, 0x53	; 83
    5780:	db 4f       	sbci	r29, 0xFB	; 251
    5782:	9a ab       	std	Y+50, r25	; 0x32
    5784:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    5786:	89 a9       	ldd	r24, Y+49	; 0x31
    5788:	9a a9       	ldd	r25, Y+50	; 0x32
    578a:	98 2f       	mov	r25, r24
    578c:	88 27       	eor	r24, r24
    578e:	9a ab       	std	Y+50, r25	; 0x32
    5790:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] &= 0xFF00;
    5792:	89 a9       	ldd	r24, Y+49	; 0x31
    5794:	9a a9       	ldd	r25, Y+50	; 0x32
    5796:	88 27       	eor	r24, r24
    5798:	9a ab       	std	Y+50, r25	; 0x32
    579a:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    579c:	e9 a8       	ldd	r14, Y+49	; 0x31
    579e:	fa a8       	ldd	r15, Y+50	; 0x32
    57a0:	61 d0       	rcall	.+194    	; 0x5864 <receive_UART0>
    57a2:	8e 29       	or	r24, r14
    57a4:	9f 29       	or	r25, r15
    57a6:	9a ab       	std	Y+50, r25	; 0x32
    57a8:	89 ab       	std	Y+49, r24	; 0x31
    57aa:	0f 5f       	subi	r16, 0xFF	; 255
    57ac:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
 
  while(channel <= 5)
    57ae:	06 30       	cpi	r16, 0x06	; 6
    57b0:	11 05       	cpc	r17, r1
    57b2:	09 f7       	brne	.-62     	; 0x5776 <poll_SS1+0x10>
    57b4:	c0 e0       	ldi	r28, 0x00	; 0
    57b6:	d0 e0       	ldi	r29, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
    57b8:	fe 01       	movw	r30, r28
    57ba:	ee 0f       	add	r30, r30
    57bc:	ff 1f       	adc	r31, r31
    57be:	e3 55       	subi	r30, 0x53	; 83
    57c0:	fb 4f       	sbci	r31, 0xFB	; 251
    57c2:	61 a9       	ldd	r22, Z+49	; 0x31
    57c4:	72 a9       	ldd	r23, Z+50	; 0x32
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	18 d7       	rcall	.+3632   	; 0x65fc <__floatunsisf>
    57cc:	23 e3       	ldi	r18, 0x33	; 51
    57ce:	33 e3       	ldi	r19, 0x33	; 51
    57d0:	43 e5       	ldi	r20, 0x53	; 83
    57d2:	50 e4       	ldi	r21, 0x40	; 64
    57d4:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	40 e8       	ldi	r20, 0x80	; 128
    57de:	5a e3       	ldi	r21, 0x3A	; 58
    57e0:	0e 94 83 34 	call	0x6906	; 0x6906 <__mulsf3>
    57e4:	fe 01       	movw	r30, r28
    57e6:	ee 0f       	add	r30, r30
    57e8:	ff 1f       	adc	r31, r31
    57ea:	ee 0f       	add	r30, r30
    57ec:	ff 1f       	adc	r31, r31
    57ee:	e7 54       	subi	r30, 0x47	; 71
    57f0:	fb 4f       	sbci	r31, 0xFB	; 251
    57f2:	61 ab       	std	Z+49, r22	; 0x31
    57f4:	72 ab       	std	Z+50, r23	; 0x32
    57f6:	83 ab       	std	Z+51, r24	; 0x33
    57f8:	94 ab       	std	Z+52, r25	; 0x34
    Current_state.ss.reading[channel] &= 0xFF00;
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    57fa:	21 96       	adiw	r28, 0x01	; 1
    57fc:	c6 30       	cpi	r28, 0x06	; 6
    57fe:	d1 05       	cpc	r29, r1
    5800:	d9 f6       	brne	.-74     	; 0x57b8 <poll_SS1+0x52>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	ff 90       	pop	r15
    580c:	ef 90       	pop	r14
    580e:	08 95       	ret

00005810 <timer_reset_two_sec>:
    
}

void watch_dog(int time){
  wdt_disable();
  wdt_enable(time);
    5810:	86 b7       	in	r24, 0x36	; 54
    5812:	80 61       	ori	r24, 0x10	; 16
    5814:	86 bf       	out	0x36, r24	; 54
    5816:	1e bc       	out	0x2e, r1	; 46
    5818:	1d bc       	out	0x2d, r1	; 45
    581a:	1c bc       	out	0x2c, r1	; 44
    581c:	88 e0       	ldi	r24, 0x08	; 8
    581e:	9d e3       	ldi	r25, 0x3D	; 61
    5820:	9b bd       	out	0x2b, r25	; 43
    5822:	8a bd       	out	0x2a, r24	; 42
    5824:	1f bc       	out	0x2f, r1	; 47
    5826:	85 e0       	ldi	r24, 0x05	; 5
    5828:	8e bd       	out	0x2e, r24	; 46
    582a:	10 92 7a 00 	sts	0x007A, r1
    582e:	08 95       	ret

00005830 <timer_wait_reset>:
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5830:	06 b6       	in	r0, 0x36	; 54
    5832:	04 fe       	sbrs	r0, 4
    5834:	fd cf       	rjmp	.-6      	; 0x5830 <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    5836:	ec cf       	rjmp	.-40     	; 0x5810 <timer_reset_two_sec>
    5838:	08 95       	ret

0000583a <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    583a:	1b b8       	out	0x0b, r1	; 11
    583c:	1a b8       	out	0x0a, r1	; 10
    583e:	e5 e9       	ldi	r30, 0x95	; 149
    5840:	f0 e0       	ldi	r31, 0x00	; 0
    5842:	10 82       	st	Z, r1
    5844:	59 9a       	sbi	0x0b, 1	; 11
    5846:	8a b1       	in	r24, 0x0a	; 10
    5848:	88 61       	ori	r24, 0x18	; 24
    584a:	8a b9       	out	0x0a, r24	; 10
    584c:	80 81       	ld	r24, Z
    584e:	8e 60       	ori	r24, 0x0E	; 14
    5850:	80 83       	st	Z, r24
    5852:	87 e6       	ldi	r24, 0x67	; 103
    5854:	89 b9       	out	0x09, r24	; 9
    5856:	10 92 90 00 	sts	0x0090, r1
    585a:	08 95       	ret

0000585c <transmit_UART0>:
    585c:	5d 9b       	sbis	0x0b, 5	; 11
    585e:	fe cf       	rjmp	.-4      	; 0x585c <transmit_UART0>
    5860:	8c b9       	out	0x0c, r24	; 12
    5862:	08 95       	ret

00005864 <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    5864:	5f 9b       	sbis	0x0b, 7	; 11
    5866:	fe cf       	rjmp	.-4      	; 0x5864 <receive_UART0>
  return UDR0;
    5868:	8c b1       	in	r24, 0x0c	; 12
}
    586a:	08 95       	ret

0000586c <timer1_init>:
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
}
    586c:	8e b5       	in	r24, 0x2e	; 46
    586e:	81 60       	ori	r24, 0x01	; 1
    5870:	8e bd       	out	0x2e, r24	; 46
    5872:	1d bc       	out	0x2d, r1	; 45
    5874:	1c bc       	out	0x2c, r1	; 44
    5876:	87 b7       	in	r24, 0x37	; 55
    5878:	84 60       	ori	r24, 0x04	; 4
    587a:	87 bf       	out	0x37, r24	; 55
    587c:	78 94       	sei
    587e:	10 92 1f 05 	sts	0x051F, r1
    5882:	08 95       	ret

00005884 <__vector_14>:
    5884:	1f 92       	push	r1
    5886:	0f 92       	push	r0
    5888:	0f b6       	in	r0, 0x3f	; 63
    588a:	0f 92       	push	r0
    588c:	11 24       	eor	r1, r1
    588e:	8f 93       	push	r24
    5890:	80 91 1f 05 	lds	r24, 0x051F
    5894:	8f 5f       	subi	r24, 0xFF	; 255
    5896:	80 93 1f 05 	sts	0x051F, r24
    589a:	8f 91       	pop	r24
    589c:	0f 90       	pop	r0
    589e:	0f be       	out	0x3f, r0	; 63
    58a0:	0f 90       	pop	r0
    58a2:	1f 90       	pop	r1
    58a4:	18 95       	reti

000058a6 <TWI_init_master>:
    58a6:	10 92 71 00 	sts	0x0071, r1
    58aa:	10 92 74 00 	sts	0x0074, r1
    58ae:	8c e0       	ldi	r24, 0x0C	; 12
    58b0:	80 93 70 00 	sts	0x0070, r24
    58b4:	08 95       	ret

000058b6 <TWI_start>:
    58b6:	84 ea       	ldi	r24, 0xA4	; 164
    58b8:	80 93 74 00 	sts	0x0074, r24
    58bc:	e4 e7       	ldi	r30, 0x74	; 116
    58be:	f0 e0       	ldi	r31, 0x00	; 0
    58c0:	80 81       	ld	r24, Z
    58c2:	88 23       	and	r24, r24
    58c4:	ec f7       	brge	.-6      	; 0x58c0 <TWI_start+0xa>
    58c6:	e1 e7       	ldi	r30, 0x71	; 113
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	80 81       	ld	r24, Z
    58cc:	88 7f       	andi	r24, 0xF8	; 248
    58ce:	88 30       	cpi	r24, 0x08	; 8
    58d0:	e1 f7       	brne	.-8      	; 0x58ca <TWI_start+0x14>
    58d2:	08 95       	ret

000058d4 <TWI_write_address>:

void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
    58d4:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    58d8:	84 e8       	ldi	r24, 0x84	; 132
    58da:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    58de:	a4 e7       	ldi	r26, 0x74	; 116
    58e0:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    58e2:	e1 e7       	ldi	r30, 0x71	; 113
    58e4:	f0 e0       	ldi	r31, 0x00	; 0
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    58e6:	04 c0       	rjmp	.+8      	; 0x58f0 <TWI_write_address+0x1c>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    58e8:	80 81       	ld	r24, Z
    58ea:	88 7f       	andi	r24, 0xF8	; 248
    58ec:	88 31       	cpi	r24, 0x18	; 24
    58ee:	e1 f7       	brne	.-8      	; 0x58e8 <TWI_write_address+0x14>
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    58f0:	8c 91       	ld	r24, X
    58f2:	88 23       	and	r24, r24
    58f4:	cc f7       	brge	.-14     	; 0x58e8 <TWI_write_address+0x14>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement

}
    58f6:	08 95       	ret

000058f8 <TWI_read_address>:

void TWI_read_address(unsigned char data) //Function for slave side to read address sent by Master
{
	TWDR=data; // Address and read instruction
    58f8:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    58fc:	84 e8       	ldi	r24, 0x84	; 132
    58fe:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    5902:	e4 e7       	ldi	r30, 0x74	; 116
    5904:	f0 e0       	ldi	r31, 0x00	; 0
    5906:	80 81       	ld	r24, Z
    5908:	88 23       	and	r24, r24
    590a:	ec f7       	brge	.-6      	; 0x5906 <TWI_read_address+0xe>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    590c:	e1 e7       	ldi	r30, 0x71	; 113
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	80 81       	ld	r24, Z
    5912:	88 7f       	andi	r24, 0xF8	; 248
    5914:	80 34       	cpi	r24, 0x40	; 64
    5916:	e1 f7       	brne	.-8      	; 0x5910 <TWI_read_address+0x18>
}
    5918:	08 95       	ret

0000591a <TWI_write_data>:

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
	TWDR=data; // put data in TWDR
    591a:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    591e:	84 e8       	ldi	r24, 0x84	; 132
    5920:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    5924:	e4 e7       	ldi	r30, 0x74	; 116
    5926:	f0 e0       	ldi	r31, 0x00	; 0
    5928:	80 81       	ld	r24, Z
    592a:	88 23       	and	r24, r24
    592c:	ec f7       	brge	.-6      	; 0x5928 <TWI_write_data+0xe>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    592e:	e1 e7       	ldi	r30, 0x71	; 113
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	80 81       	ld	r24, Z
    5934:	88 7f       	andi	r24, 0xF8	; 248
    5936:	88 32       	cpi	r24, 0x28	; 40
    5938:	e1 f7       	brne	.-8      	; 0x5932 <TWI_write_data+0x18>
}
    593a:	08 95       	ret

0000593c <TWI_read_data>:

void TWI_read_data(void) //Function to read data from I2C data line
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    593c:	84 e8       	ldi	r24, 0x84	; 132
    593e:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    5942:	e4 e7       	ldi	r30, 0x74	; 116
    5944:	f0 e0       	ldi	r31, 0x00	; 0
    5946:	80 81       	ld	r24, Z
    5948:	88 23       	and	r24, r24
    594a:	ec f7       	brge	.-6      	; 0x5946 <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    594c:	e1 e7       	ldi	r30, 0x71	; 113
    594e:	f0 e0       	ldi	r31, 0x00	; 0
    5950:	80 81       	ld	r24, Z
    5952:	88 7f       	andi	r24, 0xF8	; 248
    5954:	88 35       	cpi	r24, 0x58	; 88
    5956:	e1 f7       	brne	.-8      	; 0x5950 <TWI_read_data+0x14>
	recv_data=TWDR;//PORTA=recv_data;
    5958:	80 91 73 00 	lds	r24, 0x0073
    595c:	80 93 1e 05 	sts	0x051E, r24
    5960:	08 95       	ret

00005962 <TWI_stop>:
}

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    5962:	84 e9       	ldi	r24, 0x94	; 148
    5964:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    5968:	e4 e7       	ldi	r30, 0x74	; 116
    596a:	f0 e0       	ldi	r31, 0x00	; 0
    596c:	80 81       	ld	r24, Z
    596e:	84 ff       	sbrs	r24, 4
    5970:	fd cf       	rjmp	.-6      	; 0x596c <TWI_stop+0xa>
}
    5972:	08 95       	ret

00005974 <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    5974:	e8 e2       	ldi	r30, 0x28	; 40
    5976:	f5 e0       	ldi	r31, 0x05	; 5
    5978:	8f e2       	ldi	r24, 0x2F	; 47
    597a:	95 e0       	ldi	r25, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    597c:	3f ef       	ldi	r19, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    597e:	21 91       	ld	r18, Z+
    5980:	2f b9       	out	0x0f, r18	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5982:	77 9b       	sbis	0x0e, 7	; 14
    5984:	fe cf       	rjmp	.-4      	; 0x5982 <SendHM+0xe>
		 PORTA = 0xFF;
    5986:	3b bb       	out	0x1b, r19	; 27
    5988:	af ec       	ldi	r26, 0xCF	; 207
    598a:	b7 e0       	ldi	r27, 0x07	; 7
    598c:	11 97       	sbiw	r26, 0x01	; 1
    598e:	f1 f7       	brne	.-4      	; 0x598c <SendHM+0x18>
    5990:	00 c0       	rjmp	.+0      	; 0x5992 <SendHM+0x1e>
    5992:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    5994:	e8 17       	cp	r30, r24
    5996:	f9 07       	cpc	r31, r25
    5998:	91 f7       	brne	.-28     	; 0x597e <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    599a:	08 95       	ret

0000599c <main>:


int main(void){
    599c:	cf 93       	push	r28
    599e:	df 93       	push	r29
    59a0:	cd b7       	in	r28, 0x3d	; 61
    59a2:	de b7       	in	r29, 0x3e	; 62
    59a4:	6b 97       	sbiw	r28, 0x1b	; 27
    59a6:	0f b6       	in	r0, 0x3f	; 63
    59a8:	f8 94       	cli
    59aa:	de bf       	out	0x3e, r29	; 62
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    59b0:	cd de       	rcall	.-614    	; 0x574c <init_SPI>
  init_UART0();
    59b2:	43 df       	rcall	.-378    	; 0x583a <init_UART0>
  init_UART_MM();
    59b4:	0e 94 21 1c 	call	0x3842	; 0x3842 <init_UART_MM>
  configure_torquer();
    59b8:	0e 94 68 20 	call	0x40d0	; 0x40d0 <configure_torquer>
  DDRA=0xF0;
    59bc:	80 ef       	ldi	r24, 0xF0	; 240
    59be:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    59c0:	10 92 da 04 	sts	0x04DA, r1
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    59c4:	87 b3       	in	r24, 0x17	; 23
    59c6:	81 62       	ori	r24, 0x21	; 33
    59c8:	87 bb       	out	0x17, r24	; 23
    59ca:	2f ef       	ldi	r18, 0xFF	; 255
    59cc:	33 ed       	ldi	r19, 0xD3	; 211
    59ce:	80 e3       	ldi	r24, 0x30	; 48
    59d0:	21 50       	subi	r18, 0x01	; 1
    59d2:	30 40       	sbci	r19, 0x00	; 0
    59d4:	80 40       	sbci	r24, 0x00	; 0
    59d6:	e1 f7       	brne	.-8      	; 0x59d0 <main+0x34>
    59d8:	00 c0       	rjmp	.+0      	; 0x59da <main+0x3e>
    59da:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    59dc:	80 ed       	ldi	r24, 0xD0	; 208
    59de:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    59e0:	62 df       	rcall	.-316    	; 0x58a6 <TWI_init_master>
    59e2:	9f ef       	ldi	r25, 0xFF	; 255
    59e4:	a1 e1       	ldi	r26, 0x11	; 17
    59e6:	ba e7       	ldi	r27, 0x7A	; 122
    59e8:	91 50       	subi	r25, 0x01	; 1
    59ea:	a0 40       	sbci	r26, 0x00	; 0
    59ec:	b0 40       	sbci	r27, 0x00	; 0
    59ee:	e1 f7       	brne	.-8      	; 0x59e8 <main+0x4c>
    59f0:	00 c0       	rjmp	.+0      	; 0x59f2 <main+0x56>
    59f2:	00 00       	nop
  //transmit_string_UART0("Code");
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    59f4:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    59f6:	10 92 20 05 	sts	0x0520, r1
    59fa:	10 92 21 05 	sts	0x0521, r1
    59fe:	10 92 22 05 	sts	0x0522, r1
    5a02:	10 92 23 05 	sts	0x0523, r1
    5a06:	10 92 24 05 	sts	0x0524, r1
    5a0a:	10 92 25 05 	sts	0x0525, r1
    5a0e:	10 92 26 05 	sts	0x0526, r1
    5a12:	10 92 27 05 	sts	0x0527, r1
    5a16:	0f 2e       	mov	r0, r31
    5a18:	ff e2       	ldi	r31, 0x2F	; 47
    5a1a:	2f 2e       	mov	r2, r31
    5a1c:	f5 e0       	ldi	r31, 0x05	; 5
    5a1e:	3f 2e       	mov	r3, r31
    5a20:	f0 2d       	mov	r31, r0
	 
	  
  while (1)
  {
	  /////////////////////
	  timer1_init();
    5a22:	24 df       	rcall	.-440    	; 0x586c <timer1_init>
	  uint16_t counter_value=TCNT1;
    5a24:	ec b5       	in	r30, 0x2c	; 44
    5a26:	fd b5       	in	r31, 0x2d	; 45
    5a28:	fa 87       	std	Y+10, r31	; 0x0a
    5a2a:	e9 87       	std	Y+9, r30	; 0x09
	  uint8_t overflow=tot_overflow;
    5a2c:	f0 91 1f 05 	lds	r31, 0x051F
    5a30:	fb 87       	std	Y+11, r31	; 0x0b
	  ///////////////////
	  timer_reset_two_sec();
    5a32:	ee de       	rcall	.-548    	; 0x5810 <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5a34:	80 91 26 01 	lds	r24, 0x0126
    5a38:	84 30       	cpi	r24, 0x04	; 4
    5a3a:	31 f4       	brne	.+12     	; 0x5a48 <main+0xac>
    5a3c:	80 91 25 01 	lds	r24, 0x0125
    5a40:	8c 64       	ori	r24, 0x4C	; 76
    5a42:	80 93 25 01 	sts	0x0125, r24
    5a46:	07 c0       	rjmp	.+14     	; 0x5a56 <main+0xba>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5a48:	81 30       	cpi	r24, 0x01	; 1
    5a4a:	29 f4       	brne	.+10     	; 0x5a56 <main+0xba>
    5a4c:	80 91 25 01 	lds	r24, 0x0125
    5a50:	8c 6c       	ori	r24, 0xCC	; 204
    5a52:	80 93 25 01 	sts	0x0125, r24
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5a56:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5a58:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5a5a:	ab ed       	ldi	r26, 0xDB	; 219
    5a5c:	b4 e0       	ldi	r27, 0x04	; 4
    5a5e:	8c 91       	ld	r24, X
    5a60:	82 30       	cpi	r24, 0x02	; 2
    5a62:	59 f4       	brne	.+22     	; 0x5a7a <main+0xde>
    5a64:	ea ed       	ldi	r30, 0xDA	; 218
    5a66:	f4 e0       	ldi	r31, 0x04	; 4
    5a68:	80 81       	ld	r24, Z
    5a6a:	81 11       	cpse	r24, r1
    5a6c:	06 c0       	rjmp	.+12     	; 0x5a7a <main+0xde>
	{write_data |= (1<<5);}
    5a6e:	80 91 25 01 	lds	r24, 0x0125
    5a72:	80 62       	ori	r24, 0x20	; 32
    5a74:	80 93 25 01 	sts	0x0125, r24
    5a78:	05 c0       	rjmp	.+10     	; 0x5a84 <main+0xe8>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5a7a:	80 91 25 01 	lds	r24, 0x0125
    5a7e:	8f 7d       	andi	r24, 0xDF	; 223
    5a80:	80 93 25 01 	sts	0x0125, r24
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5a84:	80 91 26 01 	lds	r24, 0x0126
    5a88:	81 30       	cpi	r24, 0x01	; 1
    5a8a:	49 f4       	brne	.+18     	; 0x5a9e <main+0x102>
    5a8c:	80 91 13 01 	lds	r24, 0x0113
    5a90:	81 11       	cpse	r24, r1
    5a92:	05 c0       	rjmp	.+10     	; 0x5a9e <main+0x102>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5a94:	80 91 25 01 	lds	r24, 0x0125
    5a98:	8b 79       	andi	r24, 0x9B	; 155
    5a9a:	80 93 25 01 	sts	0x0125, r24
	}
	
	wdt_enable(WDTO_2S);
    5a9e:	8f e0       	ldi	r24, 0x0F	; 15
    5aa0:	28 e1       	ldi	r18, 0x18	; 24
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	0f b6       	in	r0, 0x3f	; 63
    5aa6:	f8 94       	cli
    5aa8:	a8 95       	wdr
    5aaa:	21 bd       	out	0x21, r18	; 33
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    5ab0:	a8 95       	wdr
	
PORTA = 0xAA;
    5ab2:	8a ea       	ldi	r24, 0xAA	; 170
    5ab4:	8b bb       	out	0x1b, r24	; 27
TWI_start(); // Function to send start condition
    5ab6:	ff de       	rcall	.-514    	; 0x58b6 <TWI_start>
PORTA=0b11000000;
    5ab8:	80 ec       	ldi	r24, 0xC0	; 192
    5aba:	8b bb       	out	0x1b, r24	; 27
TWI_write_address(address); // Function to write address and data direction bit(write) on SDA
    5abc:	80 91 24 01 	lds	r24, 0x0124
    5ac0:	09 df       	rcall	.-494    	; 0x58d4 <TWI_write_address>

PORTA=0b01100000;
    5ac2:	80 e6       	ldi	r24, 0x60	; 96
    5ac4:	8b bb       	out	0x1b, r24	; 27
TWI_write_data(write_data);     // Function to write data in slave
    5ac6:	80 91 25 01 	lds	r24, 0x0125
    5aca:	27 df       	rcall	.-434    	; 0x591a <TWI_write_data>
PORTA=0b10100000;
    5acc:	80 ea       	ldi	r24, 0xA0	; 160
    5ace:	8b bb       	out	0x1b, r24	; 27
TWI_stop(); // Function to send stop condition
    5ad0:	48 df       	rcall	.-368    	; 0x5962 <TWI_stop>
    5ad2:	8f e1       	ldi	r24, 0x1F	; 31
    5ad4:	9e e4       	ldi	r25, 0x4E	; 78
    5ad6:	01 97       	sbiw	r24, 0x01	; 1
    5ad8:	f1 f7       	brne	.-4      	; 0x5ad6 <main+0x13a>
    5ada:	00 c0       	rjmp	.+0      	; 0x5adc <main+0x140>
    5adc:	00 00       	nop
    5ade:	08 e2       	ldi	r16, 0x28	; 40
    5ae0:	15 e0       	ldi	r17, 0x05	; 5
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
{
	TWI_start();
    5ae2:	e9 de       	rcall	.-558    	; 0x58b6 <TWI_start>
	
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
    5ae4:	90 91 23 01 	lds	r25, 0x0123
    5ae8:	80 91 24 01 	lds	r24, 0x0124
    5aec:	89 0f       	add	r24, r25
    5aee:	04 df       	rcall	.-504    	; 0x58f8 <TWI_read_address>
	TWI_read_data(); // Function to read data from slave
    5af0:	25 df       	rcall	.-438    	; 0x593c <TWI_read_data>
	HM_Data[i] = recv_data;
    5af2:	80 91 1e 05 	lds	r24, 0x051E
    5af6:	d8 01       	movw	r26, r16
    5af8:	8d 93       	st	X+, r24
    5afa:	8d 01       	movw	r16, r26
	TWI_stop();
    5afc:	32 df       	rcall	.-412    	; 0x5962 <TWI_stop>

//if (UniversalCycles%CyclesToCollectData == 0){transmit_string_UART0("PRA");}
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
    5afe:	02 15       	cp	r16, r2
    5b00:	13 05       	cpc	r17, r3
    5b02:	79 f7       	brne	.-34     	; 0x5ae2 <main+0x146>
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
	TWI_read_data(); // Function to read data from slave
	HM_Data[i] = recv_data;
	TWI_stop();
}
wdt_disable();
    5b04:	88 e1       	ldi	r24, 0x18	; 24
    5b06:	0f b6       	in	r0, 0x3f	; 63
    5b08:	f8 94       	cli
    5b0a:	81 bd       	out	0x21, r24	; 33
    5b0c:	11 bc       	out	0x21, r1	; 33
    5b0e:	0f be       	out	0x3f, r0	; 63
    5b10:	ef e1       	ldi	r30, 0x1F	; 31
    5b12:	fe e4       	ldi	r31, 0x4E	; 78
    5b14:	31 97       	sbiw	r30, 0x01	; 1
    5b16:	f1 f7       	brne	.-4      	; 0x5b14 <main+0x178>
    5b18:	00 c0       	rjmp	.+0      	; 0x5b1a <main+0x17e>
    5b1a:	00 00       	nop
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5b1c:	a5 ec       	ldi	r26, 0xC5	; 197
    5b1e:	b4 e0       	ldi	r27, 0x04	; 4
    5b20:	8d 90       	ld	r8, X+
    5b22:	9d 90       	ld	r9, X+
    5b24:	ad 90       	ld	r10, X+
    5b26:	bc 90       	ld	r11, X
    5b28:	13 97       	sbiw	r26, 0x03	; 3
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5b2a:	cd 90       	ld	r12, X+
    5b2c:	dd 90       	ld	r13, X+
    5b2e:	ed 90       	ld	r14, X+
    5b30:	fc 90       	ld	r15, X
G3 = (uint8_t)Current_state.gps.lon;
    5b32:	a9 ec       	ldi	r26, 0xC9	; 201
    5b34:	b4 e0       	ldi	r27, 0x04	; 4
    5b36:	8d 91       	ld	r24, X+
    5b38:	9d 91       	ld	r25, X+
    5b3a:	0d 90       	ld	r0, X+
    5b3c:	bc 91       	ld	r27, X
    5b3e:	a0 2d       	mov	r26, r0
    5b40:	89 83       	std	Y+1, r24	; 0x01
    5b42:	9a 83       	std	Y+2, r25	; 0x02
    5b44:	ab 83       	std	Y+3, r26	; 0x03
    5b46:	bc 83       	std	Y+4, r27	; 0x04
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5b48:	a9 ec       	ldi	r26, 0xC9	; 201
    5b4a:	b4 e0       	ldi	r27, 0x04	; 4
    5b4c:	8d 91       	ld	r24, X+
    5b4e:	9d 91       	ld	r25, X+
    5b50:	0d 90       	ld	r0, X+
    5b52:	bc 91       	ld	r27, X
    5b54:	a0 2d       	mov	r26, r0
    5b56:	8d 83       	std	Y+5, r24	; 0x05
    5b58:	9e 83       	std	Y+6, r25	; 0x06
    5b5a:	af 83       	std	Y+7, r26	; 0x07
    5b5c:	b8 87       	std	Y+8, r27	; 0x08
G5 = Current_state.gps.seconds;
    5b5e:	e3 ed       	ldi	r30, 0xD3	; 211
    5b60:	f4 e0       	ldi	r31, 0x04	; 4
    5b62:	50 80       	ld	r5, Z
G6 = Current_state.gps.minutes;
    5b64:	a2 ed       	ldi	r26, 0xD2	; 210
    5b66:	b4 e0       	ldi	r27, 0x04	; 4
    5b68:	6c 90       	ld	r6, X
G7 = Current_state.gps.hours;
    5b6a:	e1 ed       	ldi	r30, 0xD1	; 209
    5b6c:	f4 e0       	ldi	r31, 0x04	; 4
    5b6e:	70 80       	ld	r7, Z
G8 = Current_state.gps.date;
    5b70:	a4 ed       	ldi	r26, 0xD4	; 212
    5b72:	b4 e0       	ldi	r27, 0x04	; 4
    5b74:	0c 91       	ld	r16, X
G9 = (uint8_t)(q_o[0]*127);
    5b76:	20 e0       	ldi	r18, 0x00	; 0
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	4e ef       	ldi	r20, 0xFE	; 254
    5b7c:	52 e4       	ldi	r21, 0x42	; 66
    5b7e:	e6 e7       	ldi	r30, 0x76	; 118
    5b80:	f4 e0       	ldi	r31, 0x04	; 4
    5b82:	60 81       	ld	r22, Z
    5b84:	71 81       	ldd	r23, Z+1	; 0x01
    5b86:	82 81       	ldd	r24, Z+2	; 0x02
    5b88:	93 81       	ldd	r25, Z+3	; 0x03
    5b8a:	bd d6       	rcall	.+3450   	; 0x6906 <__mulsf3>
    5b8c:	0b d5       	rcall	.+2582   	; 0x65a4 <__fixunssfsi>
    5b8e:	16 2f       	mov	r17, r22
G10 = (uint8_t)(q_o[1]*127);
    5b90:	20 e0       	ldi	r18, 0x00	; 0
    5b92:	30 e0       	ldi	r19, 0x00	; 0
    5b94:	4e ef       	ldi	r20, 0xFE	; 254
    5b96:	52 e4       	ldi	r21, 0x42	; 66
    5b98:	aa e7       	ldi	r26, 0x7A	; 122
    5b9a:	b4 e0       	ldi	r27, 0x04	; 4
    5b9c:	6d 91       	ld	r22, X+
    5b9e:	7d 91       	ld	r23, X+
    5ba0:	8d 91       	ld	r24, X+
    5ba2:	9c 91       	ld	r25, X
    5ba4:	b0 d6       	rcall	.+3424   	; 0x6906 <__mulsf3>
    5ba6:	fe d4       	rcall	.+2556   	; 0x65a4 <__fixunssfsi>
    5ba8:	6c 87       	std	Y+12, r22	; 0x0c
G11 = (uint8_t)(q_o[2]*127);
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	4e ef       	ldi	r20, 0xFE	; 254
    5bb0:	52 e4       	ldi	r21, 0x42	; 66
    5bb2:	60 91 7e 04 	lds	r22, 0x047E
    5bb6:	70 91 7f 04 	lds	r23, 0x047F
    5bba:	80 91 80 04 	lds	r24, 0x0480
    5bbe:	90 91 81 04 	lds	r25, 0x0481
    5bc2:	a1 d6       	rcall	.+3394   	; 0x6906 <__mulsf3>
    5bc4:	ef d4       	rcall	.+2526   	; 0x65a4 <__fixunssfsi>
    5bc6:	46 2e       	mov	r4, r22
G12 = (uint8_t)(q_o[3]*127);
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	4e ef       	ldi	r20, 0xFE	; 254
    5bce:	52 e4       	ldi	r21, 0x42	; 66
    5bd0:	60 91 82 04 	lds	r22, 0x0482
    5bd4:	70 91 83 04 	lds	r23, 0x0483
    5bd8:	80 91 84 04 	lds	r24, 0x0484
    5bdc:	90 91 85 04 	lds	r25, 0x0485
    5be0:	92 d6       	rcall	.+3364   	; 0x6906 <__mulsf3>
    5be2:	e0 d4       	rcall	.+2496   	; 0x65a4 <__fixunssfsi>
}
wdt_disable();
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5be4:	80 92 14 01 	sts	0x0114, r8
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5be8:	d0 92 15 01 	sts	0x0115, r13
G3 = (uint8_t)Current_state.gps.lon;
    5bec:	b9 81       	ldd	r27, Y+1	; 0x01
    5bee:	b0 93 16 01 	sts	0x0116, r27
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5bf2:	ee 81       	ldd	r30, Y+6	; 0x06
    5bf4:	e0 93 17 01 	sts	0x0117, r30

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    5bf8:	50 92 18 01 	sts	0x0118, r5
GPS_Data[5] = G6;
    5bfc:	60 92 19 01 	sts	0x0119, r6
GPS_Data[6] = G7;
    5c00:	70 92 1a 01 	sts	0x011A, r7
GPS_Data[7] = G8;
    5c04:	00 93 1b 01 	sts	0x011B, r16
GPS_Data[8] = G9;
    5c08:	10 93 1c 01 	sts	0x011C, r17
GPS_Data[9] = G10;
    5c0c:	fc 85       	ldd	r31, Y+12	; 0x0c
    5c0e:	f0 93 1d 01 	sts	0x011D, r31
GPS_Data[10] = G11;
    5c12:	40 92 1e 01 	sts	0x011E, r4
GPS_Data[11] = G12;
    5c16:	60 93 1f 01 	sts	0x011F, r22
//////////////////////////////////////////

///////////////////////////////////////
if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5c1a:	80 91 6e 04 	lds	r24, 0x046E
    5c1e:	81 30       	cpi	r24, 0x01	; 1
    5c20:	29 f0       	breq	.+10     	; 0x5c2c <main+0x290>
    5c22:	80 91 6d 04 	lds	r24, 0x046D
    5c26:	81 30       	cpi	r24, 0x01	; 1
    5c28:	09 f0       	breq	.+2      	; 0x5c2c <main+0x290>
    5c2a:	4f c0       	rjmp	.+158    	; 0x5cca <main+0x32e>
{
	
	if(FirstTimeOuter ==0)
    5c2c:	80 91 73 04 	lds	r24, 0x0473
    5c30:	81 11       	cpse	r24, r1
    5c32:	0e c0       	rjmp	.+28     	; 0x5c50 <main+0x2b4>
	{
		
	FirstTimeInner = 0;
    5c34:	10 92 72 04 	sts	0x0472, r1
	FirstTimeNormal = 0;
    5c38:	10 92 71 04 	sts	0x0471, r1
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5c3c:	80 91 25 01 	lds	r24, 0x0125
    5c40:	8d 7f       	andi	r24, 0xFD	; 253
    5c42:	80 61       	ori	r24, 0x10	; 16
    5c44:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 1;
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	80 93 73 04 	sts	0x0473, r24
    5c4e:	37 c0       	rjmp	.+110    	; 0x5cbe <main+0x322>
	}
	else if(FirstTimeOuter == 1)
    5c50:	81 30       	cpi	r24, 0x01	; 1
    5c52:	e9 f4       	brne	.+58     	; 0x5c8e <main+0x2f2>
	{
		
		if(countu ==0)
    5c54:	80 91 6f 04 	lds	r24, 0x046F
    5c58:	81 11       	cpse	r24, r1
    5c5a:	15 c0       	rjmp	.+42     	; 0x5c86 <main+0x2ea>
    5c5c:	83 e0       	ldi	r24, 0x03	; 3
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5c60:	31 eb       	ldi	r19, 0xB1	; 177
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5c62:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5c64:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5c66:	77 9b       	sbis	0x0e, 7	; 14
    5c68:	fe cf       	rjmp	.-4      	; 0x5c66 <main+0x2ca>
			PORTA = 0xFF;
    5c6a:	2b bb       	out	0x1b, r18	; 27
    5c6c:	af ec       	ldi	r26, 0xCF	; 207
    5c6e:	b7 e0       	ldi	r27, 0x07	; 7
    5c70:	11 97       	sbiw	r26, 0x01	; 1
    5c72:	f1 f7       	brne	.-4      	; 0x5c70 <main+0x2d4>
    5c74:	00 c0       	rjmp	.+0      	; 0x5c76 <main+0x2da>
    5c76:	00 00       	nop
    5c78:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5c7a:	00 97       	sbiw	r24, 0x00	; 0
    5c7c:	99 f7       	brne	.-26     	; 0x5c64 <main+0x2c8>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5c7e:	82 e0       	ldi	r24, 0x02	; 2
    5c80:	80 93 73 04 	sts	0x0473, r24
    5c84:	1c c0       	rjmp	.+56     	; 0x5cbe <main+0x322>
		}
		else if(countu == 1)
    5c86:	81 30       	cpi	r24, 0x01	; 1
    5c88:	d1 f4       	brne	.+52     	; 0x5cbe <main+0x322>
		{
			
			SendHM();
    5c8a:	74 de       	rcall	.-792    	; 0x5974 <SendHM>
    5c8c:	18 c0       	rjmp	.+48     	; 0x5cbe <main+0x322>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5c8e:	72 de       	rcall	.-796    	; 0x5974 <SendHM>
		if(countu ==0)
    5c90:	80 91 6f 04 	lds	r24, 0x046F
    5c94:	81 11       	cpse	r24, r1
    5c96:	13 c0       	rjmp	.+38     	; 0x5cbe <main+0x322>
    5c98:	e4 e1       	ldi	r30, 0x14	; 20
    5c9a:	f1 e0       	ldi	r31, 0x01	; 1
    5c9c:	80 e2       	ldi	r24, 0x20	; 32
    5c9e:	91 e0       	ldi	r25, 0x01	; 1
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
				while(!(SPSR & (1<<SPIF) ));
				PORTA = 0xFF;
    5ca0:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5ca2:	21 91       	ld	r18, Z+
    5ca4:	2f b9       	out	0x0f, r18	; 15
				while(!(SPSR & (1<<SPIF) ));
    5ca6:	77 9b       	sbis	0x0e, 7	; 14
    5ca8:	fe cf       	rjmp	.-4      	; 0x5ca6 <main+0x30a>
				PORTA = 0xFF;
    5caa:	3b bb       	out	0x1b, r19	; 27
    5cac:	af ec       	ldi	r26, 0xCF	; 207
    5cae:	b7 e0       	ldi	r27, 0x07	; 7
    5cb0:	11 97       	sbiw	r26, 0x01	; 1
    5cb2:	f1 f7       	brne	.-4      	; 0x5cb0 <main+0x314>
    5cb4:	00 c0       	rjmp	.+0      	; 0x5cb6 <main+0x31a>
    5cb6:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5cb8:	e8 17       	cp	r30, r24
    5cba:	f9 07       	cpc	r31, r25
    5cbc:	91 f7       	brne	.-28     	; 0x5ca2 <main+0x306>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5cbe:	80 91 70 04 	lds	r24, 0x0470
    5cc2:	8e 5f       	subi	r24, 0xFE	; 254
    5cc4:	80 93 70 04 	sts	0x0470, r24
    5cc8:	97 c0       	rjmp	.+302    	; 0x5df8 <main+0x45c>
}
else if(flag_mumbai ==1) //Check for Circles
    5cca:	80 91 6c 04 	lds	r24, 0x046C
    5cce:	81 30       	cpi	r24, 0x01	; 1
    5cd0:	09 f0       	breq	.+2      	; 0x5cd4 <main+0x338>
    5cd2:	4f c0       	rjmp	.+158    	; 0x5d72 <main+0x3d6>
{
	
	if(FirstTimeInner ==0)
    5cd4:	80 91 72 04 	lds	r24, 0x0472
    5cd8:	81 11       	cpse	r24, r1
    5cda:	0e c0       	rjmp	.+28     	; 0x5cf8 <main+0x35c>
	{
		
		FirstTimeOuter = 0;
    5cdc:	10 92 73 04 	sts	0x0473, r1
		FirstTimeNormal = 0;
    5ce0:	10 92 71 04 	sts	0x0471, r1
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5ce4:	80 91 25 01 	lds	r24, 0x0125
    5ce8:	8d 7f       	andi	r24, 0xFD	; 253
    5cea:	80 61       	ori	r24, 0x10	; 16
    5cec:	80 93 25 01 	sts	0x0125, r24
		FirstTimeInner = 1;
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	80 93 72 04 	sts	0x0472, r24
    5cf6:	37 c0       	rjmp	.+110    	; 0x5d66 <main+0x3ca>
		
	}
	else if(FirstTimeInner == 1)
    5cf8:	81 30       	cpi	r24, 0x01	; 1
    5cfa:	e9 f4       	brne	.+58     	; 0x5d36 <main+0x39a>
	{
		
		if(countu ==0)
    5cfc:	80 91 6f 04 	lds	r24, 0x046F
    5d00:	81 11       	cpse	r24, r1
    5d02:	15 c0       	rjmp	.+42     	; 0x5d2e <main+0x392>
    5d04:	83 e0       	ldi	r24, 0x03	; 3
    5d06:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5d08:	31 ef       	ldi	r19, 0xF1	; 241
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5d0a:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5d0c:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d0e:	77 9b       	sbis	0x0e, 7	; 14
    5d10:	fe cf       	rjmp	.-4      	; 0x5d0e <main+0x372>
			PORTA = 0xFF;
    5d12:	2b bb       	out	0x1b, r18	; 27
    5d14:	ef ec       	ldi	r30, 0xCF	; 207
    5d16:	f7 e0       	ldi	r31, 0x07	; 7
    5d18:	31 97       	sbiw	r30, 0x01	; 1
    5d1a:	f1 f7       	brne	.-4      	; 0x5d18 <main+0x37c>
    5d1c:	00 c0       	rjmp	.+0      	; 0x5d1e <main+0x382>
    5d1e:	00 00       	nop
    5d20:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5d22:	00 97       	sbiw	r24, 0x00	; 0
    5d24:	99 f7       	brne	.-26     	; 0x5d0c <main+0x370>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5d26:	82 e0       	ldi	r24, 0x02	; 2
    5d28:	80 93 72 04 	sts	0x0472, r24
    5d2c:	1c c0       	rjmp	.+56     	; 0x5d66 <main+0x3ca>
		}
		
		else if(countu == 1)
    5d2e:	81 30       	cpi	r24, 0x01	; 1
    5d30:	d1 f4       	brne	.+52     	; 0x5d66 <main+0x3ca>
		{
			
			SendHM();
    5d32:	20 de       	rcall	.-960    	; 0x5974 <SendHM>
    5d34:	18 c0       	rjmp	.+48     	; 0x5d66 <main+0x3ca>
		
	}
	else
	{
		
		SendHM();
    5d36:	1e de       	rcall	.-964    	; 0x5974 <SendHM>
		if(countu ==0)
    5d38:	80 91 6f 04 	lds	r24, 0x046F
    5d3c:	81 11       	cpse	r24, r1
    5d3e:	13 c0       	rjmp	.+38     	; 0x5d66 <main+0x3ca>
    5d40:	e4 e1       	ldi	r30, 0x14	; 20
    5d42:	f1 e0       	ldi	r31, 0x01	; 1
    5d44:	80 e2       	ldi	r24, 0x20	; 32
    5d46:	91 e0       	ldi	r25, 0x01	; 1
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5d48:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5d4a:	21 91       	ld	r18, Z+
    5d4c:	2f b9       	out	0x0f, r18	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d4e:	77 9b       	sbis	0x0e, 7	; 14
    5d50:	fe cf       	rjmp	.-4      	; 0x5d4e <main+0x3b2>
			PORTA = 0xFF;
    5d52:	3b bb       	out	0x1b, r19	; 27
    5d54:	af ec       	ldi	r26, 0xCF	; 207
    5d56:	b7 e0       	ldi	r27, 0x07	; 7
    5d58:	11 97       	sbiw	r26, 0x01	; 1
    5d5a:	f1 f7       	brne	.-4      	; 0x5d58 <main+0x3bc>
    5d5c:	00 c0       	rjmp	.+0      	; 0x5d5e <main+0x3c2>
    5d5e:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5d60:	e8 17       	cp	r30, r24
    5d62:	f9 07       	cpc	r31, r25
    5d64:	91 f7       	brne	.-28     	; 0x5d4a <main+0x3ae>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5d66:	80 91 70 04 	lds	r24, 0x0470
    5d6a:	8e 5f       	subi	r24, 0xFE	; 254
    5d6c:	80 93 70 04 	sts	0x0470, r24
    5d70:	43 c0       	rjmp	.+134    	; 0x5df8 <main+0x45c>
}
else
{

	countd = 0;
    5d72:	10 92 70 04 	sts	0x0470, r1
	countu = 0;
    5d76:	10 92 6f 04 	sts	0x046F, r1
	if(FirstTimeNormal == 0)
    5d7a:	80 91 71 04 	lds	r24, 0x0471
    5d7e:	81 11       	cpse	r24, r1
    5d80:	14 c0       	rjmp	.+40     	; 0x5daa <main+0x40e>
    5d82:	83 e0       	ldi	r24, 0x03	; 3
    5d84:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5d86:	31 ed       	ldi	r19, 0xD1	; 209
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5d88:	2f ef       	ldi	r18, 0xFF	; 255
	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5d8a:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d8c:	77 9b       	sbis	0x0e, 7	; 14
    5d8e:	fe cf       	rjmp	.-4      	; 0x5d8c <main+0x3f0>
			PORTA = 0xFF;
    5d90:	2b bb       	out	0x1b, r18	; 27
    5d92:	ef ec       	ldi	r30, 0xCF	; 207
    5d94:	f7 e0       	ldi	r31, 0x07	; 7
    5d96:	31 97       	sbiw	r30, 0x01	; 1
    5d98:	f1 f7       	brne	.-4      	; 0x5d96 <main+0x3fa>
    5d9a:	00 c0       	rjmp	.+0      	; 0x5d9c <main+0x400>
    5d9c:	00 00       	nop
    5d9e:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5da0:	00 97       	sbiw	r24, 0x00	; 0
    5da2:	99 f7       	brne	.-26     	; 0x5d8a <main+0x3ee>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	80 93 71 04 	sts	0x0471, r24
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5daa:	40 91 21 01 	lds	r20, 0x0121
    5dae:	50 91 22 01 	lds	r21, 0x0122
    5db2:	9a 01       	movw	r18, r20
    5db4:	ad ec       	ldi	r26, 0xCD	; 205
    5db6:	bc ec       	ldi	r27, 0xCC	; 204
    5db8:	ad d7       	rcall	.+3930   	; 0x6d14 <__umulhisi3>
    5dba:	96 95       	lsr	r25
    5dbc:	87 95       	ror	r24
    5dbe:	96 95       	lsr	r25
    5dc0:	87 95       	ror	r24
    5dc2:	96 95       	lsr	r25
    5dc4:	87 95       	ror	r24
    5dc6:	9c 01       	movw	r18, r24
    5dc8:	22 0f       	add	r18, r18
    5dca:	33 1f       	adc	r19, r19
    5dcc:	88 0f       	add	r24, r24
    5dce:	99 1f       	adc	r25, r25
    5dd0:	88 0f       	add	r24, r24
    5dd2:	99 1f       	adc	r25, r25
    5dd4:	88 0f       	add	r24, r24
    5dd6:	99 1f       	adc	r25, r25
    5dd8:	82 0f       	add	r24, r18
    5dda:	93 1f       	adc	r25, r19
    5ddc:	48 17       	cp	r20, r24
    5dde:	59 07       	cpc	r21, r25
    5de0:	09 f4       	brne	.+2      	; 0x5de4 <main+0x448>
    5de2:	c8 dd       	rcall	.-1136   	; 0x5974 <SendHM>
	write_data &= ~(1<<4);
    5de4:	80 91 25 01 	lds	r24, 0x0125
    5de8:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5dea:	82 60       	ori	r24, 0x02	; 2
    5dec:	80 93 25 01 	sts	0x0125, r24
	FirstTimeInner = 0;
    5df0:	10 92 72 04 	sts	0x0472, r1
	FirstTimeOuter = 0;
    5df4:	10 92 73 04 	sts	0x0473, r1
}

if ((countd >120)&&(countd <=150))
    5df8:	80 91 70 04 	lds	r24, 0x0470
    5dfc:	97 e8       	ldi	r25, 0x87	; 135
    5dfe:	98 0f       	add	r25, r24
    5e00:	9e 31       	cpi	r25, 0x1E	; 30
    5e02:	e0 f4       	brcc	.+56     	; 0x5e3c <main+0x4a0>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5e04:	90 91 25 01 	lds	r25, 0x0125
    5e08:	9f 7e       	andi	r25, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5e0a:	92 60       	ori	r25, 0x02	; 2
    5e0c:	90 93 25 01 	sts	0x0125, r25
	if (countd == 122)
    5e10:	8a 37       	cpi	r24, 0x7A	; 122
    5e12:	89 f4       	brne	.+34     	; 0x5e36 <main+0x49a>
    5e14:	83 e0       	ldi	r24, 0x03	; 3
    5e16:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5e18:	31 ed       	ldi	r19, 0xD1	; 209
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
    5e1a:	2f ef       	ldi	r18, 0xFF	; 255
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5e1c:	3f b9       	out	0x0f, r19	; 15
		while(!(SPSR & (1<<SPIF) ));
    5e1e:	77 9b       	sbis	0x0e, 7	; 14
    5e20:	fe cf       	rjmp	.-4      	; 0x5e1e <main+0x482>
		PORTA = 0xFF;
    5e22:	2b bb       	out	0x1b, r18	; 27
    5e24:	af ec       	ldi	r26, 0xCF	; 207
    5e26:	b7 e0       	ldi	r27, 0x07	; 7
    5e28:	11 97       	sbiw	r26, 0x01	; 1
    5e2a:	f1 f7       	brne	.-4      	; 0x5e28 <main+0x48c>
    5e2c:	00 c0       	rjmp	.+0      	; 0x5e2e <main+0x492>
    5e2e:	00 00       	nop
    5e30:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5e32:	00 97       	sbiw	r24, 0x00	; 0
    5e34:	99 f7       	brne	.-26     	; 0x5e1c <main+0x480>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5e36:	81 e0       	ldi	r24, 0x01	; 1
    5e38:	80 93 6f 04 	sts	0x046F, r24
}
if (countd >150)
    5e3c:	80 91 70 04 	lds	r24, 0x0470
    5e40:	87 39       	cpi	r24, 0x97	; 151
    5e42:	70 f0       	brcs	.+28     	; 0x5e60 <main+0x4c4>
{

	countd=0;
    5e44:	10 92 70 04 	sts	0x0470, r1
	countu=0;
    5e48:	10 92 6f 04 	sts	0x046F, r1
	write_data &= ~(1<<1); 
    5e4c:	80 91 25 01 	lds	r24, 0x0125
    5e50:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5e52:	80 61       	ori	r24, 0x10	; 16
    5e54:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 0;
    5e58:	10 92 73 04 	sts	0x0473, r1
	FirstTimeInner = 0;
    5e5c:	10 92 72 04 	sts	0x0472, r1
		
}

	
		PORTB |= (1<<PB0);
    5e60:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5e62:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    5e64:	80 91 74 04 	lds	r24, 0x0474
    5e68:	90 91 75 04 	lds	r25, 0x0475
    5e6c:	89 2b       	or	r24, r25
    5e6e:	79 f4       	brne	.+30     	; 0x5e8e <main+0x4f2>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5e70:	80 91 2e 05 	lds	r24, 0x052E
    5e74:	88 23       	and	r24, r24
    5e76:	4c f1       	brlt	.+82     	; 0x5eca <main+0x52e>
	     	{
		     	counter1 = 1;
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	90 93 75 04 	sts	0x0475, r25
    5e80:	80 93 74 04 	sts	0x0474, r24
		     	write_data &= ~(1<<7);
    5e84:	80 91 25 01 	lds	r24, 0x0125
    5e88:	8f 77       	andi	r24, 0x7F	; 127
    5e8a:	80 93 25 01 	sts	0x0125, r24
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5e8e:	80 91 74 04 	lds	r24, 0x0474
    5e92:	90 91 75 04 	lds	r25, 0x0475
    5e96:	9c 01       	movw	r18, r24
    5e98:	21 50       	subi	r18, 0x01	; 1
    5e9a:	31 09       	sbc	r19, r1
    5e9c:	26 30       	cpi	r18, 0x06	; 6
    5e9e:	31 05       	cpc	r19, r1
    5ea0:	28 f4       	brcc	.+10     	; 0x5eac <main+0x510>
     	{
	     	counter1 = counter1+1;
    5ea2:	01 96       	adiw	r24, 0x01	; 1
    5ea4:	90 93 75 04 	sts	0x0475, r25
    5ea8:	80 93 74 04 	sts	0x0474, r24
     	}
     	
     	if(counter1 == 7)
    5eac:	80 91 74 04 	lds	r24, 0x0474
    5eb0:	90 91 75 04 	lds	r25, 0x0475
    5eb4:	07 97       	sbiw	r24, 0x07	; 7
    5eb6:	49 f4       	brne	.+18     	; 0x5eca <main+0x52e>
     	{
	     	counter1 = 0;
    5eb8:	10 92 75 04 	sts	0x0475, r1
    5ebc:	10 92 74 04 	sts	0x0474, r1
	     	write_data |= (1<<7);
    5ec0:	80 91 25 01 	lds	r24, 0x0125
    5ec4:	80 68       	ori	r24, 0x80	; 128
    5ec6:	80 93 25 01 	sts	0x0125, r24
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5eca:	80 91 2e 05 	lds	r24, 0x052E
    5ece:	85 fd       	sbrc	r24, 5
    5ed0:	05 c0       	rjmp	.+10     	; 0x5edc <main+0x540>
			 {
				Current_state.gps.gps_OC = 1;
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
    5ed4:	ea ed       	ldi	r30, 0xDA	; 218
    5ed6:	f4 e0       	ldi	r31, 0x04	; 4
    5ed8:	80 83       	st	Z, r24
    5eda:	03 c0       	rjmp	.+6      	; 0x5ee2 <main+0x546>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5edc:	aa ed       	ldi	r26, 0xDA	; 218
    5ede:	b4 e0       	ldi	r27, 0x04	; 4
    5ee0:	1c 92       	st	X, r1
			}


	wdt_enable(WDTO_2S);
    5ee2:	8f e0       	ldi	r24, 0x0F	; 15
    5ee4:	e8 e1       	ldi	r30, 0x18	; 24
    5ee6:	f0 e0       	ldi	r31, 0x00	; 0
    5ee8:	0f b6       	in	r0, 0x3f	; 63
    5eea:	f8 94       	cli
    5eec:	a8 95       	wdr
    5eee:	e1 bd       	out	0x21, r30	; 33
    5ef0:	0f be       	out	0x3f, r0	; 63
    5ef2:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    5ef4:	a8 95       	wdr
	control();
    5ef6:	0e 94 4b 08 	call	0x1096	; 0x1096 <control>
	wdt_disable();
    5efa:	88 e1       	ldi	r24, 0x18	; 24
    5efc:	0f b6       	in	r0, 0x3f	; 63
    5efe:	f8 94       	cli
    5f00:	81 bd       	out	0x21, r24	; 33
    5f02:	11 bc       	out	0x21, r1	; 33
    5f04:	0f be       	out	0x3f, r0	; 63
    5f06:	0f 2e       	mov	r0, r31
    5f08:	f4 e1       	ldi	r31, 0x14	; 20
    5f0a:	ef 2e       	mov	r14, r31
    5f0c:	f1 e0       	ldi	r31, 0x01	; 1
    5f0e:	ff 2e       	mov	r15, r31
    5f10:	f0 2d       	mov	r31, r0
    5f12:	00 e2       	ldi	r16, 0x20	; 32
    5f14:	11 e0       	ldi	r17, 0x01	; 1
	for (int i=0;i<12;i++)
	{
		transmit_UART0(GPS_Data[i]);
    5f16:	d7 01       	movw	r26, r14
    5f18:	8d 91       	ld	r24, X+
    5f1a:	7d 01       	movw	r14, r26
    5f1c:	9f dc       	rcall	.-1730   	; 0x585c <transmit_UART0>

	wdt_enable(WDTO_2S);
	wdt_reset();
	control();
	wdt_disable();
	for (int i=0;i<12;i++)
    5f1e:	e0 16       	cp	r14, r16
    5f20:	f1 06       	cpc	r15, r17
    5f22:	c9 f7       	brne	.-14     	; 0x5f16 <main+0x57a>
	{
		transmit_UART0(GPS_Data[i]);
	}
	//int w = 2;Current_state.gps.lat = 168;Current_state.gps.lon = 96;
	//flag_india = (int8_t)(Current_state.gps.lat);//(pow((Current_state.gps.lat - 22.5833),2) + cos(Current_state.gps.lat*3.141592/180)*pow((Current_state.gps.lon - 82.7666),2))*255/70000;
	transmit_UART0(flag_india);
    5f24:	80 91 6e 04 	lds	r24, 0x046E
    5f28:	99 dc       	rcall	.-1742   	; 0x585c <transmit_UART0>
	transmit_UART0(flag_mumbai);
    5f2a:	80 91 6c 04 	lds	r24, 0x046C
    5f2e:	96 dc       	rcall	.-1748   	; 0x585c <transmit_UART0>
	transmit_UART0(flag_france);
    5f30:	80 91 6d 04 	lds	r24, 0x046D
    5f34:	93 dc       	rcall	.-1754   	; 0x585c <transmit_UART0>
    5f36:	08 e2       	ldi	r16, 0x28	; 40
    5f38:	15 e0       	ldi	r17, 0x05	; 5
	for (int i = 0; i<7;i++)
	{
		transmit_UART0(HM_Data[i]);
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	81 91       	ld	r24, Z+
    5f3e:	8f 01       	movw	r16, r30
    5f40:	8d dc       	rcall	.-1766   	; 0x585c <transmit_UART0>
	//int w = 2;Current_state.gps.lat = 168;Current_state.gps.lon = 96;
	//flag_india = (int8_t)(Current_state.gps.lat);//(pow((Current_state.gps.lat - 22.5833),2) + cos(Current_state.gps.lat*3.141592/180)*pow((Current_state.gps.lon - 82.7666),2))*255/70000;
	transmit_UART0(flag_india);
	transmit_UART0(flag_mumbai);
	transmit_UART0(flag_france);
	for (int i = 0; i<7;i++)
    5f42:	20 16       	cp	r2, r16
    5f44:	31 06       	cpc	r3, r17
    5f46:	c9 f7       	brne	.-14     	; 0x5f3a <main+0x59e>
	{
		transmit_UART0(HM_Data[i]);
	}
	
	light_main = light_cal();	
    5f48:	0e 94 c8 24 	call	0x4990	; 0x4990 <light_cal>
    5f4c:	80 93 13 01 	sts	0x0113, r24
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    5f50:	80 91 2e 05 	lds	r24, 0x052E
    5f54:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    5f56:	0e 94 c3 20 	call	0x4186	; 0x4186 <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    5f5a:	20 91 20 05 	lds	r18, 0x0520
    5f5e:	30 91 21 05 	lds	r19, 0x0521
    5f62:	40 91 22 05 	lds	r20, 0x0522
    5f66:	50 91 23 05 	lds	r21, 0x0523
    5f6a:	60 91 24 05 	lds	r22, 0x0524
    5f6e:	70 91 25 05 	lds	r23, 0x0525
    5f72:	80 91 26 05 	lds	r24, 0x0526
    5f76:	90 91 27 05 	lds	r25, 0x0527
    5f7a:	a2 e0       	ldi	r26, 0x02	; 2
    5f7c:	fc d6       	rcall	.+3576   	; 0x6d76 <__adddi3_s8>
    5f7e:	20 93 20 05 	sts	0x0520, r18
    5f82:	30 93 21 05 	sts	0x0521, r19
    5f86:	40 93 22 05 	sts	0x0522, r20
    5f8a:	50 93 23 05 	sts	0x0523, r21
    5f8e:	60 93 24 05 	sts	0x0524, r22
    5f92:	70 93 25 05 	sts	0x0525, r23
    5f96:	80 93 26 05 	sts	0x0526, r24
    5f9a:	90 93 27 05 	sts	0x0527, r25
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    5f9e:	a5 ec       	ldi	r26, 0xC5	; 197
    5fa0:	b4 e0       	ldi	r27, 0x04	; 4
    5fa2:	6d 91       	ld	r22, X+
    5fa4:	7d 91       	ld	r23, X+
    5fa6:	8d 91       	ld	r24, X+
    5fa8:	9c 91       	ld	r25, X
    5faa:	2a d3       	rcall	.+1620   	; 0x6600 <__floatsisf>
    5fac:	20 e0       	ldi	r18, 0x00	; 0
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	48 ec       	ldi	r20, 0xC8	; 200
    5fb2:	52 e4       	ldi	r21, 0x42	; 66
    5fb4:	8a d2       	rcall	.+1300   	; 0x64ca <__divsf3>
    5fb6:	29 e9       	ldi	r18, 0x99	; 153
    5fb8:	3a ea       	ldi	r19, 0xAA	; 170
    5fba:	44 eb       	ldi	r20, 0xB4	; 180
    5fbc:	51 e4       	ldi	r21, 0x41	; 65
    5fbe:	a0 d1       	rcall	.+832    	; 0x6300 <__subsf3>
    5fc0:	69 83       	std	Y+1, r22	; 0x01
    5fc2:	7a 83       	std	Y+2, r23	; 0x02
    5fc4:	8b 83       	std	Y+3, r24	; 0x03
    5fc6:	9c 83       	std	Y+4, r25	; 0x04
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    5fc8:	e9 ec       	ldi	r30, 0xC9	; 201
    5fca:	f4 e0       	ldi	r31, 0x04	; 4
    5fcc:	60 81       	ld	r22, Z
    5fce:	71 81       	ldd	r23, Z+1	; 0x01
    5fd0:	82 81       	ldd	r24, Z+2	; 0x02
    5fd2:	93 81       	ldd	r25, Z+3	; 0x03
    5fd4:	15 d3       	rcall	.+1578   	; 0x6600 <__floatsisf>
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	48 ec       	ldi	r20, 0xC8	; 200
    5fdc:	52 e4       	ldi	r21, 0x42	; 66
    5fde:	75 d2       	rcall	.+1258   	; 0x64ca <__divsf3>
    5fe0:	20 e8       	ldi	r18, 0x80	; 128
    5fe2:	38 e8       	ldi	r19, 0x88	; 136
    5fe4:	45 ea       	ldi	r20, 0xA5	; 165
    5fe6:	52 e4       	ldi	r21, 0x42	; 66
    5fe8:	8b d1       	rcall	.+790    	; 0x6300 <__subsf3>
    5fea:	2b 01       	movw	r4, r22
    5fec:	3c 01       	movw	r6, r24
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    5fee:	a5 ec       	ldi	r26, 0xC5	; 197
    5ff0:	b4 e0       	ldi	r27, 0x04	; 4
    5ff2:	6d 91       	ld	r22, X+
    5ff4:	7d 91       	ld	r23, X+
    5ff6:	8d 91       	ld	r24, X+
    5ff8:	9c 91       	ld	r25, X
    5ffa:	02 d3       	rcall	.+1540   	; 0x6600 <__floatsisf>
    5ffc:	20 e0       	ldi	r18, 0x00	; 0
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	48 ec       	ldi	r20, 0xC8	; 200
    6002:	52 e4       	ldi	r21, 0x42	; 66
    6004:	62 d2       	rcall	.+1220   	; 0x64ca <__divsf3>
    6006:	28 ed       	ldi	r18, 0xD8	; 216
    6008:	3f e0       	ldi	r19, 0x0F	; 15
    600a:	49 e4       	ldi	r20, 0x49	; 73
    600c:	50 e4       	ldi	r21, 0x40	; 64
    600e:	7b d4       	rcall	.+2294   	; 0x6906 <__mulsf3>
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	44 e3       	ldi	r20, 0x34	; 52
    6016:	53 e4       	ldi	r21, 0x43	; 67
    6018:	58 d2       	rcall	.+1200   	; 0x64ca <__divsf3>
    601a:	6c 87       	std	Y+12, r22	; 0x0c
    601c:	7d 87       	std	Y+13, r23	; 0x0d
    601e:	8e 87       	std	Y+14, r24	; 0x0e
    6020:	9f 87       	std	Y+15, r25	; 0x0f
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    6022:	a5 ec       	ldi	r26, 0xC5	; 197
    6024:	b4 e0       	ldi	r27, 0x04	; 4
    6026:	8d 91       	ld	r24, X+
    6028:	9d 91       	ld	r25, X+
    602a:	0d 90       	ld	r0, X+
    602c:	bc 91       	ld	r27, X
    602e:	a0 2d       	mov	r26, r0
    6030:	88 8b       	std	Y+16, r24	; 0x10
    6032:	99 8b       	std	Y+17, r25	; 0x11
    6034:	aa 8b       	std	Y+18, r26	; 0x12
    6036:	bb 8b       	std	Y+19, r27	; 0x13
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6038:	a9 ec       	ldi	r26, 0xC9	; 201
    603a:	b4 e0       	ldi	r27, 0x04	; 4
    603c:	8d 91       	ld	r24, X+
    603e:	9d 91       	ld	r25, X+
    6040:	0d 90       	ld	r0, X+
    6042:	bc 91       	ld	r27, X
    6044:	a0 2d       	mov	r26, r0
    6046:	8c 8b       	std	Y+20, r24	; 0x14
    6048:	9d 8b       	std	Y+21, r25	; 0x15
    604a:	ae 8b       	std	Y+22, r26	; 0x16
    604c:	bf 8b       	std	Y+23, r27	; 0x17
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    604e:	a5 ec       	ldi	r26, 0xC5	; 197
    6050:	b4 e0       	ldi	r27, 0x04	; 4
    6052:	8d 91       	ld	r24, X+
    6054:	9d 91       	ld	r25, X+
    6056:	0d 90       	ld	r0, X+
    6058:	bc 91       	ld	r27, X
    605a:	a0 2d       	mov	r26, r0
    605c:	88 8f       	std	Y+24, r24	; 0x18
    605e:	99 8f       	std	Y+25, r25	; 0x19
    6060:	aa 8f       	std	Y+26, r26	; 0x1a
    6062:	bb 8f       	std	Y+27, r27	; 0x1b
// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    6064:	e5 ec       	ldi	r30, 0xC5	; 197
    6066:	f4 e0       	ldi	r31, 0x04	; 4
    6068:	60 81       	ld	r22, Z
    606a:	71 81       	ldd	r23, Z+1	; 0x01
    606c:	82 81       	ldd	r24, Z+2	; 0x02
    606e:	93 81       	ldd	r25, Z+3	; 0x03
    6070:	c7 d2       	rcall	.+1422   	; 0x6600 <__floatsisf>
    6072:	20 e0       	ldi	r18, 0x00	; 0
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	48 ec       	ldi	r20, 0xC8	; 200
    6078:	52 e4       	ldi	r21, 0x42	; 66
    607a:	27 d2       	rcall	.+1102   	; 0x64ca <__divsf3>
    607c:	26 ea       	ldi	r18, 0xA6	; 166
    607e:	3b e9       	ldi	r19, 0x9B	; 155
    6080:	48 e9       	ldi	r20, 0x98	; 152
    6082:	51 e4       	ldi	r21, 0x41	; 65
    6084:	3d d1       	rcall	.+634    	; 0x6300 <__subsf3>
    6086:	4b 01       	movw	r8, r22
    6088:	5c 01       	movw	r10, r24
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    608a:	a9 ec       	ldi	r26, 0xC9	; 201
    608c:	b4 e0       	ldi	r27, 0x04	; 4
    608e:	6d 91       	ld	r22, X+
    6090:	7d 91       	ld	r23, X+
    6092:	8d 91       	ld	r24, X+
    6094:	9c 91       	ld	r25, X
    6096:	b4 d2       	rcall	.+1384   	; 0x6600 <__floatsisf>
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	48 ec       	ldi	r20, 0xC8	; 200
    609e:	52 e4       	ldi	r21, 0x42	; 66
    60a0:	14 d2       	rcall	.+1064   	; 0x64ca <__divsf3>
    60a2:	26 e0       	ldi	r18, 0x06	; 6
    60a4:	31 ec       	ldi	r19, 0xC1	; 193
    60a6:	41 e9       	ldi	r20, 0x91	; 145
    60a8:	52 e4       	ldi	r21, 0x42	; 66
    60aa:	2a d1       	rcall	.+596    	; 0x6300 <__subsf3>
    60ac:	6b 01       	movw	r12, r22
    60ae:	7c 01       	movw	r14, r24
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    60b0:	e5 ec       	ldi	r30, 0xC5	; 197
    60b2:	f4 e0       	ldi	r31, 0x04	; 4
    60b4:	60 81       	ld	r22, Z
    60b6:	71 81       	ldd	r23, Z+1	; 0x01
    60b8:	82 81       	ldd	r24, Z+2	; 0x02
    60ba:	93 81       	ldd	r25, Z+3	; 0x03
    60bc:	a1 d2       	rcall	.+1346   	; 0x6600 <__floatsisf>
    60be:	20 e0       	ldi	r18, 0x00	; 0
    60c0:	30 e0       	ldi	r19, 0x00	; 0
    60c2:	48 ec       	ldi	r20, 0xC8	; 200
    60c4:	52 e4       	ldi	r21, 0x42	; 66
    60c6:	01 d2       	rcall	.+1026   	; 0x64ca <__divsf3>
    60c8:	28 ed       	ldi	r18, 0xD8	; 216
    60ca:	3f e0       	ldi	r19, 0x0F	; 15
    60cc:	49 e4       	ldi	r20, 0x49	; 73
    60ce:	50 e4       	ldi	r21, 0x40	; 64
    60d0:	1a d4       	rcall	.+2100   	; 0x6906 <__mulsf3>
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	44 e3       	ldi	r20, 0x34	; 52
    60d8:	53 e4       	ldi	r21, 0x43	; 67
    60da:	f7 d1       	rcall	.+1006   	; 0x64ca <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    60dc:	f3 d1       	rcall	.+998    	; 0x64c4 <cos>
    60de:	6d 83       	std	Y+5, r22	; 0x05
    60e0:	7e 83       	std	Y+6, r23	; 0x06
    60e2:	8f 83       	std	Y+7, r24	; 0x07
    60e4:	98 87       	std	Y+8, r25	; 0x08
    60e6:	a5 01       	movw	r20, r10
    60e8:	94 01       	movw	r18, r8
    60ea:	c5 01       	movw	r24, r10
    60ec:	b4 01       	movw	r22, r8
    60ee:	0b d4       	rcall	.+2070   	; 0x6906 <__mulsf3>
    60f0:	4b 01       	movw	r8, r22
    60f2:	5c 01       	movw	r10, r24
    60f4:	a7 01       	movw	r20, r14
    60f6:	96 01       	movw	r18, r12
    60f8:	6d 81       	ldd	r22, Y+5	; 0x05
    60fa:	7e 81       	ldd	r23, Y+6	; 0x06
    60fc:	8f 81       	ldd	r24, Y+7	; 0x07
    60fe:	98 85       	ldd	r25, Y+8	; 0x08
    6100:	02 d4       	rcall	.+2052   	; 0x6906 <__mulsf3>
    6102:	a7 01       	movw	r20, r14
    6104:	96 01       	movw	r18, r12
    6106:	ff d3       	rcall	.+2046   	; 0x6906 <__mulsf3>
    6108:	9b 01       	movw	r18, r22
    610a:	ac 01       	movw	r20, r24
    610c:	c5 01       	movw	r24, r10
    610e:	b4 01       	movw	r22, r8
    6110:	f8 d0       	rcall	.+496    	; 0x6302 <__addsf3>
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	48 ec       	ldi	r20, 0xC8	; 200
    6118:	52 e4       	ldi	r21, 0x42	; 66
    611a:	d0 d1       	rcall	.+928    	; 0x64bc <__cmpsf2>
    611c:	88 23       	and	r24, r24
    611e:	5c f4       	brge	.+22     	; 0x6136 <main+0x79a>
    6120:	80 91 26 01 	lds	r24, 0x0126
    6124:	81 30       	cpi	r24, 0x01	; 1
    6126:	39 f4       	brne	.+14     	; 0x6136 <main+0x79a>
		{
			flag_mumbai = 1;
    6128:	80 93 6c 04 	sts	0x046C, r24
			flag_india = 0;
    612c:	10 92 6e 04 	sts	0x046E, r1
			flag_france = 0;
    6130:	10 92 6d 04 	sts	0x046D, r1
    6134:	94 c0       	rjmp	.+296    	; 0x625e <main+0x8c2>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    6136:	6c 85       	ldd	r22, Y+12	; 0x0c
    6138:	7d 85       	ldd	r23, Y+13	; 0x0d
    613a:	8e 85       	ldd	r24, Y+14	; 0x0e
    613c:	9f 85       	ldd	r25, Y+15	; 0x0f
    613e:	c2 d1       	rcall	.+900    	; 0x64c4 <cos>
    6140:	6b 01       	movw	r12, r22
    6142:	7c 01       	movw	r14, r24
    6144:	29 81       	ldd	r18, Y+1	; 0x01
    6146:	3a 81       	ldd	r19, Y+2	; 0x02
    6148:	4b 81       	ldd	r20, Y+3	; 0x03
    614a:	5c 81       	ldd	r21, Y+4	; 0x04
    614c:	ca 01       	movw	r24, r20
    614e:	b9 01       	movw	r22, r18
    6150:	da d3       	rcall	.+1972   	; 0x6906 <__mulsf3>
    6152:	4b 01       	movw	r8, r22
    6154:	5c 01       	movw	r10, r24
    6156:	a3 01       	movw	r20, r6
    6158:	92 01       	movw	r18, r4
    615a:	c7 01       	movw	r24, r14
    615c:	b6 01       	movw	r22, r12
    615e:	d3 d3       	rcall	.+1958   	; 0x6906 <__mulsf3>
    6160:	a3 01       	movw	r20, r6
    6162:	92 01       	movw	r18, r4
    6164:	d0 d3       	rcall	.+1952   	; 0x6906 <__mulsf3>
    6166:	9b 01       	movw	r18, r22
    6168:	ac 01       	movw	r20, r24
    616a:	c5 01       	movw	r24, r10
    616c:	b4 01       	movw	r22, r8
    616e:	c9 d0       	rcall	.+402    	; 0x6302 <__addsf3>
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e4       	ldi	r19, 0x40	; 64
    6174:	4c e1       	ldi	r20, 0x1C	; 28
    6176:	54 e4       	ldi	r21, 0x44	; 68
    6178:	a1 d1       	rcall	.+834    	; 0x64bc <__cmpsf2>
    617a:	88 23       	and	r24, r24
    617c:	5c f4       	brge	.+22     	; 0x6194 <main+0x7f8>
    617e:	80 91 26 01 	lds	r24, 0x0126
    6182:	81 30       	cpi	r24, 0x01	; 1
    6184:	39 f4       	brne	.+14     	; 0x6194 <main+0x7f8>
	  {
      flag_mumbai = 0;
    6186:	10 92 6c 04 	sts	0x046C, r1
      flag_india = 1;
    618a:	80 93 6e 04 	sts	0x046E, r24
	  flag_france = 0;
    618e:	10 92 6d 04 	sts	0x046D, r1
    6192:	65 c0       	rjmp	.+202    	; 0x625e <main+0x8c2>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6194:	6c 89       	ldd	r22, Y+20	; 0x14
    6196:	7d 89       	ldd	r23, Y+21	; 0x15
    6198:	8e 89       	ldd	r24, Y+22	; 0x16
    619a:	9f 89       	ldd	r25, Y+23	; 0x17
    619c:	31 d2       	rcall	.+1122   	; 0x6600 <__floatsisf>
    619e:	20 e0       	ldi	r18, 0x00	; 0
    61a0:	30 e0       	ldi	r19, 0x00	; 0
    61a2:	48 ec       	ldi	r20, 0xC8	; 200
    61a4:	52 e4       	ldi	r21, 0x42	; 66
    61a6:	91 d1       	rcall	.+802    	; 0x64ca <__divsf3>
    61a8:	28 eb       	ldi	r18, 0xB8	; 184
    61aa:	3e e1       	ldi	r19, 0x1E	; 30
    61ac:	45 e1       	ldi	r20, 0x15	; 21
    61ae:	50 e4       	ldi	r21, 0x40	; 64
    61b0:	a7 d0       	rcall	.+334    	; 0x6300 <__subsf3>
    61b2:	6b 01       	movw	r12, r22
    61b4:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    61b6:	68 89       	ldd	r22, Y+16	; 0x10
    61b8:	79 89       	ldd	r23, Y+17	; 0x11
    61ba:	8a 89       	ldd	r24, Y+18	; 0x12
    61bc:	9b 89       	ldd	r25, Y+19	; 0x13
    61be:	20 d2       	rcall	.+1088   	; 0x6600 <__floatsisf>
    61c0:	20 e0       	ldi	r18, 0x00	; 0
    61c2:	30 e0       	ldi	r19, 0x00	; 0
    61c4:	48 ec       	ldi	r20, 0xC8	; 200
    61c6:	52 e4       	ldi	r21, 0x42	; 66
    61c8:	80 d1       	rcall	.+768    	; 0x64ca <__divsf3>
    61ca:	23 e3       	ldi	r18, 0x33	; 51
    61cc:	33 e3       	ldi	r19, 0x33	; 51
    61ce:	43 e4       	ldi	r20, 0x43	; 67
    61d0:	52 e4       	ldi	r21, 0x42	; 66
    61d2:	96 d0       	rcall	.+300    	; 0x6300 <__subsf3>
    61d4:	4b 01       	movw	r8, r22
    61d6:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    61d8:	68 8d       	ldd	r22, Y+24	; 0x18
    61da:	79 8d       	ldd	r23, Y+25	; 0x19
    61dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    61de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    61e0:	0f d2       	rcall	.+1054   	; 0x6600 <__floatsisf>
    61e2:	20 e0       	ldi	r18, 0x00	; 0
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	48 ec       	ldi	r20, 0xC8	; 200
    61e8:	52 e4       	ldi	r21, 0x42	; 66
    61ea:	6f d1       	rcall	.+734    	; 0x64ca <__divsf3>
    61ec:	28 ed       	ldi	r18, 0xD8	; 216
    61ee:	3f e0       	ldi	r19, 0x0F	; 15
    61f0:	49 e4       	ldi	r20, 0x49	; 73
    61f2:	50 e4       	ldi	r21, 0x40	; 64
    61f4:	88 d3       	rcall	.+1808   	; 0x6906 <__mulsf3>
    61f6:	20 e0       	ldi	r18, 0x00	; 0
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	44 e3       	ldi	r20, 0x34	; 52
    61fc:	53 e4       	ldi	r21, 0x43	; 67
    61fe:	65 d1       	rcall	.+714    	; 0x64ca <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    6200:	61 d1       	rcall	.+706    	; 0x64c4 <cos>
    6202:	2b 01       	movw	r4, r22
    6204:	3c 01       	movw	r6, r24
    6206:	a5 01       	movw	r20, r10
    6208:	94 01       	movw	r18, r8
    620a:	c5 01       	movw	r24, r10
    620c:	b4 01       	movw	r22, r8
    620e:	7b d3       	rcall	.+1782   	; 0x6906 <__mulsf3>
    6210:	4b 01       	movw	r8, r22
    6212:	5c 01       	movw	r10, r24
    6214:	a7 01       	movw	r20, r14
    6216:	96 01       	movw	r18, r12
    6218:	c3 01       	movw	r24, r6
    621a:	b2 01       	movw	r22, r4
    621c:	74 d3       	rcall	.+1768   	; 0x6906 <__mulsf3>
    621e:	a7 01       	movw	r20, r14
    6220:	96 01       	movw	r18, r12
    6222:	71 d3       	rcall	.+1762   	; 0x6906 <__mulsf3>
    6224:	9b 01       	movw	r18, r22
    6226:	ac 01       	movw	r20, r24
    6228:	c5 01       	movw	r24, r10
    622a:	b4 01       	movw	r22, r8
    622c:	6a d0       	rcall	.+212    	; 0x6302 <__addsf3>
    622e:	20 e0       	ldi	r18, 0x00	; 0
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	48 ec       	ldi	r20, 0xC8	; 200
    6234:	52 e4       	ldi	r21, 0x42	; 66
    6236:	42 d1       	rcall	.+644    	; 0x64bc <__cmpsf2>
    6238:	88 23       	and	r24, r24
    623a:	5c f4       	brge	.+22     	; 0x6252 <main+0x8b6>
    623c:	80 91 26 01 	lds	r24, 0x0126
    6240:	81 30       	cpi	r24, 0x01	; 1
    6242:	39 f4       	brne	.+14     	; 0x6252 <main+0x8b6>
      {
	  flag_mumbai = 0;
    6244:	10 92 6c 04 	sts	0x046C, r1
      flag_france = 1;
    6248:	80 93 6d 04 	sts	0x046D, r24
	  flag_india = 0;
    624c:	10 92 6e 04 	sts	0x046E, r1
    6250:	06 c0       	rjmp	.+12     	; 0x625e <main+0x8c2>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    6252:	10 92 6d 04 	sts	0x046D, r1
	  flag_india = 0;
    6256:	10 92 6e 04 	sts	0x046E, r1
	  flag_mumbai = 0;
    625a:	10 92 6c 04 	sts	0x046C, r1
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    625e:	80 91 21 01 	lds	r24, 0x0121
    6262:	90 91 22 01 	lds	r25, 0x0122
    6266:	01 96       	adiw	r24, 0x01	; 1
    6268:	90 93 22 01 	sts	0x0122, r25
    626c:	80 93 21 01 	sts	0x0121, r24
    //}
	//////////////////////////////////
	overflow=tot_overflow-overflow;
    6270:	10 91 1f 05 	lds	r17, 0x051F
	counter_value = TCNT1 + (65535-counter_value);
    6274:	6c b5       	in	r22, 0x2c	; 44
    6276:	7d b5       	in	r23, 0x2d	; 45
    6278:	61 50       	subi	r22, 0x01	; 1
    627a:	71 09       	sbc	r23, r1
    627c:	29 85       	ldd	r18, Y+9	; 0x09
    627e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6280:	62 1b       	sub	r22, r18
    6282:	73 0b       	sbc	r23, r19
	uint32_t net_time =  (counter_value*DT + overflow*T)*1e3;
    6284:	80 e0       	ldi	r24, 0x00	; 0
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	b9 d1       	rcall	.+882    	; 0x65fc <__floatunsisf>
    628a:	2f e6       	ldi	r18, 0x6F	; 111
    628c:	32 e1       	ldi	r19, 0x12	; 18
    628e:	43 e0       	ldi	r20, 0x03	; 3
    6290:	59 e3       	ldi	r21, 0x39	; 57
    6292:	39 d3       	rcall	.+1650   	; 0x6906 <__mulsf3>
    6294:	6b 01       	movw	r12, r22
    6296:	7c 01       	movw	r14, r24
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    //}
	//////////////////////////////////
	overflow=tot_overflow-overflow;
    6298:	61 2f       	mov	r22, r17
    629a:	3b 85       	ldd	r19, Y+11	; 0x0b
    629c:	63 1b       	sub	r22, r19
	counter_value = TCNT1 + (65535-counter_value);
	uint32_t net_time =  (counter_value*DT + overflow*T)*1e3;
    629e:	70 e0       	ldi	r23, 0x00	; 0
    62a0:	80 e0       	ldi	r24, 0x00	; 0
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	ad d1       	rcall	.+858    	; 0x6600 <__floatsisf>
    62a6:	26 e5       	ldi	r18, 0x56	; 86
    62a8:	3e e0       	ldi	r19, 0x0E	; 14
    62aa:	43 e0       	ldi	r20, 0x03	; 3
    62ac:	51 e4       	ldi	r21, 0x41	; 65
    62ae:	2b d3       	rcall	.+1622   	; 0x6906 <__mulsf3>
    62b0:	9b 01       	movw	r18, r22
    62b2:	ac 01       	movw	r20, r24
    62b4:	c7 01       	movw	r24, r14
    62b6:	b6 01       	movw	r22, r12
    62b8:	24 d0       	rcall	.+72     	; 0x6302 <__addsf3>
    62ba:	20 e0       	ldi	r18, 0x00	; 0
    62bc:	30 e0       	ldi	r19, 0x00	; 0
    62be:	4a e7       	ldi	r20, 0x7A	; 122
    62c0:	54 e4       	ldi	r21, 0x44	; 68
    62c2:	21 d3       	rcall	.+1602   	; 0x6906 <__mulsf3>
    62c4:	6f d1       	rcall	.+734    	; 0x65a4 <__fixunssfsi>
    62c6:	17 2f       	mov	r17, r23
    62c8:	f8 2e       	mov	r15, r24
    62ca:	09 2f       	mov	r16, r25
	transmit_UART0((uint8_t)(net_time));
    62cc:	86 2f       	mov	r24, r22
    62ce:	c6 da       	rcall	.-2676   	; 0x585c <transmit_UART0>
	transmit_UART0((uint8_t)(net_time>>8));
    62d0:	81 2f       	mov	r24, r17
    62d2:	c4 da       	rcall	.-2680   	; 0x585c <transmit_UART0>
	transmit_UART0((uint8_t)(net_time>>16));
    62d4:	8f 2d       	mov	r24, r15
    62d6:	c2 da       	rcall	.-2684   	; 0x585c <transmit_UART0>
	transmit_UART0((uint8_t)(net_time>>24));
    62d8:	80 2f       	mov	r24, r16
    62da:	c0 da       	rcall	.-2688   	; 0x585c <transmit_UART0>
	transmit_UART0('\r');
    62dc:	8d e0       	ldi	r24, 0x0D	; 13
    62de:	be da       	rcall	.-2692   	; 0x585c <transmit_UART0>
	//////////////////////////////////
	timer_wait_reset();
    62e0:	a7 da       	rcall	.-2738   	; 0x5830 <timer_wait_reset>
	//wdt_disable();
  }
    62e2:	9f cb       	rjmp	.-2242   	; 0x5a22 <main+0x86>

000062e4 <acos>:
    62e4:	9f 93       	push	r25
    62e6:	9f 77       	andi	r25, 0x7F	; 127
    62e8:	04 d2       	rcall	.+1032   	; 0x66f2 <__fp_arccos>
    62ea:	0f 90       	pop	r0
    62ec:	00 20       	and	r0, r0
    62ee:	3a f4       	brpl	.+14     	; 0x62fe <acos+0x1a>
    62f0:	90 58       	subi	r25, 0x80	; 128
    62f2:	a2 ea       	ldi	r26, 0xA2	; 162
    62f4:	2a ed       	ldi	r18, 0xDA	; 218
    62f6:	3f e0       	ldi	r19, 0x0F	; 15
    62f8:	49 e4       	ldi	r20, 0x49	; 73
    62fa:	50 e4       	ldi	r21, 0x40	; 64
    62fc:	13 d0       	rcall	.+38     	; 0x6324 <__addsf3x>
    62fe:	ad c2       	rjmp	.+1370   	; 0x685a <__fp_round>

00006300 <__subsf3>:
    6300:	50 58       	subi	r21, 0x80	; 128

00006302 <__addsf3>:
    6302:	bb 27       	eor	r27, r27
    6304:	aa 27       	eor	r26, r26
    6306:	0e d0       	rcall	.+28     	; 0x6324 <__addsf3x>
    6308:	a8 c2       	rjmp	.+1360   	; 0x685a <__fp_round>
    630a:	71 d2       	rcall	.+1250   	; 0x67ee <__fp_pscA>
    630c:	30 f0       	brcs	.+12     	; 0x631a <__addsf3+0x18>
    630e:	76 d2       	rcall	.+1260   	; 0x67fc <__fp_pscB>
    6310:	20 f0       	brcs	.+8      	; 0x631a <__addsf3+0x18>
    6312:	31 f4       	brne	.+12     	; 0x6320 <__addsf3+0x1e>
    6314:	9f 3f       	cpi	r25, 0xFF	; 255
    6316:	11 f4       	brne	.+4      	; 0x631c <__addsf3+0x1a>
    6318:	1e f4       	brtc	.+6      	; 0x6320 <__addsf3+0x1e>
    631a:	30 c2       	rjmp	.+1120   	; 0x677c <__fp_nan>
    631c:	0e f4       	brtc	.+2      	; 0x6320 <__addsf3+0x1e>
    631e:	e0 95       	com	r30
    6320:	e7 fb       	bst	r30, 7
    6322:	26 c2       	rjmp	.+1100   	; 0x6770 <__fp_inf>

00006324 <__addsf3x>:
    6324:	e9 2f       	mov	r30, r25
    6326:	bb d2       	rcall	.+1398   	; 0x689e <__fp_split3>
    6328:	80 f3       	brcs	.-32     	; 0x630a <__addsf3+0x8>
    632a:	ba 17       	cp	r27, r26
    632c:	62 07       	cpc	r22, r18
    632e:	73 07       	cpc	r23, r19
    6330:	84 07       	cpc	r24, r20
    6332:	95 07       	cpc	r25, r21
    6334:	18 f0       	brcs	.+6      	; 0x633c <__addsf3x+0x18>
    6336:	71 f4       	brne	.+28     	; 0x6354 <__addsf3x+0x30>
    6338:	9e f5       	brtc	.+102    	; 0x63a0 <__addsf3x+0x7c>
    633a:	d3 c2       	rjmp	.+1446   	; 0x68e2 <__fp_zero>
    633c:	0e f4       	brtc	.+2      	; 0x6340 <__addsf3x+0x1c>
    633e:	e0 95       	com	r30
    6340:	0b 2e       	mov	r0, r27
    6342:	ba 2f       	mov	r27, r26
    6344:	a0 2d       	mov	r26, r0
    6346:	0b 01       	movw	r0, r22
    6348:	b9 01       	movw	r22, r18
    634a:	90 01       	movw	r18, r0
    634c:	0c 01       	movw	r0, r24
    634e:	ca 01       	movw	r24, r20
    6350:	a0 01       	movw	r20, r0
    6352:	11 24       	eor	r1, r1
    6354:	ff 27       	eor	r31, r31
    6356:	59 1b       	sub	r21, r25
    6358:	99 f0       	breq	.+38     	; 0x6380 <__addsf3x+0x5c>
    635a:	59 3f       	cpi	r21, 0xF9	; 249
    635c:	50 f4       	brcc	.+20     	; 0x6372 <__addsf3x+0x4e>
    635e:	50 3e       	cpi	r21, 0xE0	; 224
    6360:	68 f1       	brcs	.+90     	; 0x63bc <__addsf3x+0x98>
    6362:	1a 16       	cp	r1, r26
    6364:	f0 40       	sbci	r31, 0x00	; 0
    6366:	a2 2f       	mov	r26, r18
    6368:	23 2f       	mov	r18, r19
    636a:	34 2f       	mov	r19, r20
    636c:	44 27       	eor	r20, r20
    636e:	58 5f       	subi	r21, 0xF8	; 248
    6370:	f3 cf       	rjmp	.-26     	; 0x6358 <__addsf3x+0x34>
    6372:	46 95       	lsr	r20
    6374:	37 95       	ror	r19
    6376:	27 95       	ror	r18
    6378:	a7 95       	ror	r26
    637a:	f0 40       	sbci	r31, 0x00	; 0
    637c:	53 95       	inc	r21
    637e:	c9 f7       	brne	.-14     	; 0x6372 <__addsf3x+0x4e>
    6380:	7e f4       	brtc	.+30     	; 0x63a0 <__addsf3x+0x7c>
    6382:	1f 16       	cp	r1, r31
    6384:	ba 0b       	sbc	r27, r26
    6386:	62 0b       	sbc	r22, r18
    6388:	73 0b       	sbc	r23, r19
    638a:	84 0b       	sbc	r24, r20
    638c:	ba f0       	brmi	.+46     	; 0x63bc <__addsf3x+0x98>
    638e:	91 50       	subi	r25, 0x01	; 1
    6390:	a1 f0       	breq	.+40     	; 0x63ba <__addsf3x+0x96>
    6392:	ff 0f       	add	r31, r31
    6394:	bb 1f       	adc	r27, r27
    6396:	66 1f       	adc	r22, r22
    6398:	77 1f       	adc	r23, r23
    639a:	88 1f       	adc	r24, r24
    639c:	c2 f7       	brpl	.-16     	; 0x638e <__addsf3x+0x6a>
    639e:	0e c0       	rjmp	.+28     	; 0x63bc <__addsf3x+0x98>
    63a0:	ba 0f       	add	r27, r26
    63a2:	62 1f       	adc	r22, r18
    63a4:	73 1f       	adc	r23, r19
    63a6:	84 1f       	adc	r24, r20
    63a8:	48 f4       	brcc	.+18     	; 0x63bc <__addsf3x+0x98>
    63aa:	87 95       	ror	r24
    63ac:	77 95       	ror	r23
    63ae:	67 95       	ror	r22
    63b0:	b7 95       	ror	r27
    63b2:	f7 95       	ror	r31
    63b4:	9e 3f       	cpi	r25, 0xFE	; 254
    63b6:	08 f0       	brcs	.+2      	; 0x63ba <__addsf3x+0x96>
    63b8:	b3 cf       	rjmp	.-154    	; 0x6320 <__addsf3+0x1e>
    63ba:	93 95       	inc	r25
    63bc:	88 0f       	add	r24, r24
    63be:	08 f0       	brcs	.+2      	; 0x63c2 <__addsf3x+0x9e>
    63c0:	99 27       	eor	r25, r25
    63c2:	ee 0f       	add	r30, r30
    63c4:	97 95       	ror	r25
    63c6:	87 95       	ror	r24
    63c8:	08 95       	ret

000063ca <asin>:
    63ca:	9f 93       	push	r25
    63cc:	9f 77       	andi	r25, 0x7F	; 127
    63ce:	ee e3       	ldi	r30, 0x3E	; 62
    63d0:	89 37       	cpi	r24, 0x79	; 121
    63d2:	9e 07       	cpc	r25, r30
    63d4:	20 f4       	brcc	.+8      	; 0x63de <asin+0x14>
    63d6:	e2 ea       	ldi	r30, 0xA2	; 162
    63d8:	f0 e0       	ldi	r31, 0x00	; 0
    63da:	f8 d1       	rcall	.+1008   	; 0x67cc <__fp_powsodd>
    63dc:	09 c0       	rjmp	.+18     	; 0x63f0 <asin+0x26>
    63de:	89 d1       	rcall	.+786    	; 0x66f2 <__fp_arccos>
    63e0:	90 58       	subi	r25, 0x80	; 128
    63e2:	a2 ea       	ldi	r26, 0xA2	; 162
    63e4:	2a ed       	ldi	r18, 0xDA	; 218
    63e6:	3f e0       	ldi	r19, 0x0F	; 15
    63e8:	49 ec       	ldi	r20, 0xC9	; 201
    63ea:	5f e3       	ldi	r21, 0x3F	; 63
    63ec:	9b df       	rcall	.-202    	; 0x6324 <__addsf3x>
    63ee:	35 d2       	rcall	.+1130   	; 0x685a <__fp_round>
    63f0:	0f 90       	pop	r0
    63f2:	07 fc       	sbrc	r0, 7
    63f4:	90 58       	subi	r25, 0x80	; 128
    63f6:	08 95       	ret
    63f8:	fa d1       	rcall	.+1012   	; 0x67ee <__fp_pscA>
    63fa:	58 f0       	brcs	.+22     	; 0x6412 <asin+0x48>
    63fc:	80 e8       	ldi	r24, 0x80	; 128
    63fe:	91 e0       	ldi	r25, 0x01	; 1
    6400:	09 f4       	brne	.+2      	; 0x6404 <asin+0x3a>
    6402:	9e ef       	ldi	r25, 0xFE	; 254
    6404:	fb d1       	rcall	.+1014   	; 0x67fc <__fp_pscB>
    6406:	28 f0       	brcs	.+10     	; 0x6412 <asin+0x48>
    6408:	40 e8       	ldi	r20, 0x80	; 128
    640a:	51 e0       	ldi	r21, 0x01	; 1
    640c:	59 f4       	brne	.+22     	; 0x6424 <atan2+0xe>
    640e:	5e ef       	ldi	r21, 0xFE	; 254
    6410:	09 c0       	rjmp	.+18     	; 0x6424 <atan2+0xe>
    6412:	b4 c1       	rjmp	.+872    	; 0x677c <__fp_nan>
    6414:	66 c2       	rjmp	.+1228   	; 0x68e2 <__fp_zero>

00006416 <atan2>:
    6416:	e9 2f       	mov	r30, r25
    6418:	e0 78       	andi	r30, 0x80	; 128
    641a:	41 d2       	rcall	.+1154   	; 0x689e <__fp_split3>
    641c:	68 f3       	brcs	.-38     	; 0x63f8 <asin+0x2e>
    641e:	09 2e       	mov	r0, r25
    6420:	05 2a       	or	r0, r21
    6422:	c1 f3       	breq	.-16     	; 0x6414 <asin+0x4a>
    6424:	26 17       	cp	r18, r22
    6426:	37 07       	cpc	r19, r23
    6428:	48 07       	cpc	r20, r24
    642a:	59 07       	cpc	r21, r25
    642c:	38 f0       	brcs	.+14     	; 0x643c <atan2+0x26>
    642e:	0e 2e       	mov	r0, r30
    6430:	07 f8       	bld	r0, 7
    6432:	e0 25       	eor	r30, r0
    6434:	69 f0       	breq	.+26     	; 0x6450 <atan2+0x3a>
    6436:	e0 25       	eor	r30, r0
    6438:	e0 64       	ori	r30, 0x40	; 64
    643a:	0a c0       	rjmp	.+20     	; 0x6450 <atan2+0x3a>
    643c:	ef 63       	ori	r30, 0x3F	; 63
    643e:	07 f8       	bld	r0, 7
    6440:	00 94       	com	r0
    6442:	07 fa       	bst	r0, 7
    6444:	db 01       	movw	r26, r22
    6446:	b9 01       	movw	r22, r18
    6448:	9d 01       	movw	r18, r26
    644a:	dc 01       	movw	r26, r24
    644c:	ca 01       	movw	r24, r20
    644e:	ad 01       	movw	r20, r26
    6450:	ef 93       	push	r30
    6452:	4a d0       	rcall	.+148    	; 0x64e8 <__divsf3_pse>
    6454:	02 d2       	rcall	.+1028   	; 0x685a <__fp_round>
    6456:	0a d0       	rcall	.+20     	; 0x646c <atan>
    6458:	5f 91       	pop	r21
    645a:	55 23       	and	r21, r21
    645c:	31 f0       	breq	.+12     	; 0x646a <atan2+0x54>
    645e:	2b ed       	ldi	r18, 0xDB	; 219
    6460:	3f e0       	ldi	r19, 0x0F	; 15
    6462:	49 e4       	ldi	r20, 0x49	; 73
    6464:	50 fd       	sbrc	r21, 0
    6466:	49 ec       	ldi	r20, 0xC9	; 201
    6468:	4c cf       	rjmp	.-360    	; 0x6302 <__addsf3>
    646a:	08 95       	ret

0000646c <atan>:
    646c:	df 93       	push	r29
    646e:	dd 27       	eor	r29, r29
    6470:	b9 2f       	mov	r27, r25
    6472:	bf 77       	andi	r27, 0x7F	; 127
    6474:	40 e8       	ldi	r20, 0x80	; 128
    6476:	5f e3       	ldi	r21, 0x3F	; 63
    6478:	16 16       	cp	r1, r22
    647a:	17 06       	cpc	r1, r23
    647c:	48 07       	cpc	r20, r24
    647e:	5b 07       	cpc	r21, r27
    6480:	10 f4       	brcc	.+4      	; 0x6486 <atan+0x1a>
    6482:	d9 2f       	mov	r29, r25
    6484:	39 d2       	rcall	.+1138   	; 0x68f8 <inverse>
    6486:	9f 93       	push	r25
    6488:	8f 93       	push	r24
    648a:	7f 93       	push	r23
    648c:	6f 93       	push	r22
    648e:	32 d3       	rcall	.+1636   	; 0x6af4 <square>
    6490:	e6 eb       	ldi	r30, 0xB6	; 182
    6492:	f0 e0       	ldi	r31, 0x00	; 0
    6494:	76 d1       	rcall	.+748    	; 0x6782 <__fp_powser>
    6496:	e1 d1       	rcall	.+962    	; 0x685a <__fp_round>
    6498:	2f 91       	pop	r18
    649a:	3f 91       	pop	r19
    649c:	4f 91       	pop	r20
    649e:	5f 91       	pop	r21
    64a0:	3e d2       	rcall	.+1148   	; 0x691e <__mulsf3x>
    64a2:	dd 23       	and	r29, r29
    64a4:	49 f0       	breq	.+18     	; 0x64b8 <atan+0x4c>
    64a6:	90 58       	subi	r25, 0x80	; 128
    64a8:	a2 ea       	ldi	r26, 0xA2	; 162
    64aa:	2a ed       	ldi	r18, 0xDA	; 218
    64ac:	3f e0       	ldi	r19, 0x0F	; 15
    64ae:	49 ec       	ldi	r20, 0xC9	; 201
    64b0:	5f e3       	ldi	r21, 0x3F	; 63
    64b2:	d0 78       	andi	r29, 0x80	; 128
    64b4:	5d 27       	eor	r21, r29
    64b6:	36 df       	rcall	.-404    	; 0x6324 <__addsf3x>
    64b8:	df 91       	pop	r29
    64ba:	cf c1       	rjmp	.+926    	; 0x685a <__fp_round>

000064bc <__cmpsf2>:
    64bc:	35 d1       	rcall	.+618    	; 0x6728 <__fp_cmp>
    64be:	08 f4       	brcc	.+2      	; 0x64c2 <__cmpsf2+0x6>
    64c0:	81 e0       	ldi	r24, 0x01	; 1
    64c2:	08 95       	ret

000064c4 <cos>:
    64c4:	a3 d1       	rcall	.+838    	; 0x680c <__fp_rempio2>
    64c6:	e3 95       	inc	r30
    64c8:	d9 c1       	rjmp	.+946    	; 0x687c <__fp_sinus>

000064ca <__divsf3>:
    64ca:	0c d0       	rcall	.+24     	; 0x64e4 <__divsf3x>
    64cc:	c6 c1       	rjmp	.+908    	; 0x685a <__fp_round>
    64ce:	96 d1       	rcall	.+812    	; 0x67fc <__fp_pscB>
    64d0:	40 f0       	brcs	.+16     	; 0x64e2 <__divsf3+0x18>
    64d2:	8d d1       	rcall	.+794    	; 0x67ee <__fp_pscA>
    64d4:	30 f0       	brcs	.+12     	; 0x64e2 <__divsf3+0x18>
    64d6:	21 f4       	brne	.+8      	; 0x64e0 <__divsf3+0x16>
    64d8:	5f 3f       	cpi	r21, 0xFF	; 255
    64da:	19 f0       	breq	.+6      	; 0x64e2 <__divsf3+0x18>
    64dc:	49 c1       	rjmp	.+658    	; 0x6770 <__fp_inf>
    64de:	51 11       	cpse	r21, r1
    64e0:	01 c2       	rjmp	.+1026   	; 0x68e4 <__fp_szero>
    64e2:	4c c1       	rjmp	.+664    	; 0x677c <__fp_nan>

000064e4 <__divsf3x>:
    64e4:	dc d1       	rcall	.+952    	; 0x689e <__fp_split3>
    64e6:	98 f3       	brcs	.-26     	; 0x64ce <__divsf3+0x4>

000064e8 <__divsf3_pse>:
    64e8:	99 23       	and	r25, r25
    64ea:	c9 f3       	breq	.-14     	; 0x64de <__divsf3+0x14>
    64ec:	55 23       	and	r21, r21
    64ee:	b1 f3       	breq	.-20     	; 0x64dc <__divsf3+0x12>
    64f0:	95 1b       	sub	r25, r21
    64f2:	55 0b       	sbc	r21, r21
    64f4:	bb 27       	eor	r27, r27
    64f6:	aa 27       	eor	r26, r26
    64f8:	62 17       	cp	r22, r18
    64fa:	73 07       	cpc	r23, r19
    64fc:	84 07       	cpc	r24, r20
    64fe:	38 f0       	brcs	.+14     	; 0x650e <__divsf3_pse+0x26>
    6500:	9f 5f       	subi	r25, 0xFF	; 255
    6502:	5f 4f       	sbci	r21, 0xFF	; 255
    6504:	22 0f       	add	r18, r18
    6506:	33 1f       	adc	r19, r19
    6508:	44 1f       	adc	r20, r20
    650a:	aa 1f       	adc	r26, r26
    650c:	a9 f3       	breq	.-22     	; 0x64f8 <__divsf3_pse+0x10>
    650e:	33 d0       	rcall	.+102    	; 0x6576 <__divsf3_pse+0x8e>
    6510:	0e 2e       	mov	r0, r30
    6512:	3a f0       	brmi	.+14     	; 0x6522 <__divsf3_pse+0x3a>
    6514:	e0 e8       	ldi	r30, 0x80	; 128
    6516:	30 d0       	rcall	.+96     	; 0x6578 <__divsf3_pse+0x90>
    6518:	91 50       	subi	r25, 0x01	; 1
    651a:	50 40       	sbci	r21, 0x00	; 0
    651c:	e6 95       	lsr	r30
    651e:	00 1c       	adc	r0, r0
    6520:	ca f7       	brpl	.-14     	; 0x6514 <__divsf3_pse+0x2c>
    6522:	29 d0       	rcall	.+82     	; 0x6576 <__divsf3_pse+0x8e>
    6524:	fe 2f       	mov	r31, r30
    6526:	27 d0       	rcall	.+78     	; 0x6576 <__divsf3_pse+0x8e>
    6528:	66 0f       	add	r22, r22
    652a:	77 1f       	adc	r23, r23
    652c:	88 1f       	adc	r24, r24
    652e:	bb 1f       	adc	r27, r27
    6530:	26 17       	cp	r18, r22
    6532:	37 07       	cpc	r19, r23
    6534:	48 07       	cpc	r20, r24
    6536:	ab 07       	cpc	r26, r27
    6538:	b0 e8       	ldi	r27, 0x80	; 128
    653a:	09 f0       	breq	.+2      	; 0x653e <__divsf3_pse+0x56>
    653c:	bb 0b       	sbc	r27, r27
    653e:	80 2d       	mov	r24, r0
    6540:	bf 01       	movw	r22, r30
    6542:	ff 27       	eor	r31, r31
    6544:	93 58       	subi	r25, 0x83	; 131
    6546:	5f 4f       	sbci	r21, 0xFF	; 255
    6548:	2a f0       	brmi	.+10     	; 0x6554 <__divsf3_pse+0x6c>
    654a:	9e 3f       	cpi	r25, 0xFE	; 254
    654c:	51 05       	cpc	r21, r1
    654e:	68 f0       	brcs	.+26     	; 0x656a <__divsf3_pse+0x82>
    6550:	0f c1       	rjmp	.+542    	; 0x6770 <__fp_inf>
    6552:	c8 c1       	rjmp	.+912    	; 0x68e4 <__fp_szero>
    6554:	5f 3f       	cpi	r21, 0xFF	; 255
    6556:	ec f3       	brlt	.-6      	; 0x6552 <__divsf3_pse+0x6a>
    6558:	98 3e       	cpi	r25, 0xE8	; 232
    655a:	dc f3       	brlt	.-10     	; 0x6552 <__divsf3_pse+0x6a>
    655c:	86 95       	lsr	r24
    655e:	77 95       	ror	r23
    6560:	67 95       	ror	r22
    6562:	b7 95       	ror	r27
    6564:	f7 95       	ror	r31
    6566:	9f 5f       	subi	r25, 0xFF	; 255
    6568:	c9 f7       	brne	.-14     	; 0x655c <__divsf3_pse+0x74>
    656a:	88 0f       	add	r24, r24
    656c:	91 1d       	adc	r25, r1
    656e:	96 95       	lsr	r25
    6570:	87 95       	ror	r24
    6572:	97 f9       	bld	r25, 7
    6574:	08 95       	ret
    6576:	e1 e0       	ldi	r30, 0x01	; 1
    6578:	66 0f       	add	r22, r22
    657a:	77 1f       	adc	r23, r23
    657c:	88 1f       	adc	r24, r24
    657e:	bb 1f       	adc	r27, r27
    6580:	62 17       	cp	r22, r18
    6582:	73 07       	cpc	r23, r19
    6584:	84 07       	cpc	r24, r20
    6586:	ba 07       	cpc	r27, r26
    6588:	20 f0       	brcs	.+8      	; 0x6592 <__divsf3_pse+0xaa>
    658a:	62 1b       	sub	r22, r18
    658c:	73 0b       	sbc	r23, r19
    658e:	84 0b       	sbc	r24, r20
    6590:	ba 0b       	sbc	r27, r26
    6592:	ee 1f       	adc	r30, r30
    6594:	88 f7       	brcc	.-30     	; 0x6578 <__divsf3_pse+0x90>
    6596:	e0 95       	com	r30
    6598:	08 95       	ret

0000659a <__fixsfsi>:
    659a:	04 d0       	rcall	.+8      	; 0x65a4 <__fixunssfsi>
    659c:	68 94       	set
    659e:	b1 11       	cpse	r27, r1
    65a0:	a1 c1       	rjmp	.+834    	; 0x68e4 <__fp_szero>
    65a2:	08 95       	ret

000065a4 <__fixunssfsi>:
    65a4:	84 d1       	rcall	.+776    	; 0x68ae <__fp_splitA>
    65a6:	88 f0       	brcs	.+34     	; 0x65ca <__fixunssfsi+0x26>
    65a8:	9f 57       	subi	r25, 0x7F	; 127
    65aa:	90 f0       	brcs	.+36     	; 0x65d0 <__fixunssfsi+0x2c>
    65ac:	b9 2f       	mov	r27, r25
    65ae:	99 27       	eor	r25, r25
    65b0:	b7 51       	subi	r27, 0x17	; 23
    65b2:	a0 f0       	brcs	.+40     	; 0x65dc <__fixunssfsi+0x38>
    65b4:	d1 f0       	breq	.+52     	; 0x65ea <__fixunssfsi+0x46>
    65b6:	66 0f       	add	r22, r22
    65b8:	77 1f       	adc	r23, r23
    65ba:	88 1f       	adc	r24, r24
    65bc:	99 1f       	adc	r25, r25
    65be:	1a f0       	brmi	.+6      	; 0x65c6 <__fixunssfsi+0x22>
    65c0:	ba 95       	dec	r27
    65c2:	c9 f7       	brne	.-14     	; 0x65b6 <__fixunssfsi+0x12>
    65c4:	12 c0       	rjmp	.+36     	; 0x65ea <__fixunssfsi+0x46>
    65c6:	b1 30       	cpi	r27, 0x01	; 1
    65c8:	81 f0       	breq	.+32     	; 0x65ea <__fixunssfsi+0x46>
    65ca:	8b d1       	rcall	.+790    	; 0x68e2 <__fp_zero>
    65cc:	b1 e0       	ldi	r27, 0x01	; 1
    65ce:	08 95       	ret
    65d0:	88 c1       	rjmp	.+784    	; 0x68e2 <__fp_zero>
    65d2:	67 2f       	mov	r22, r23
    65d4:	78 2f       	mov	r23, r24
    65d6:	88 27       	eor	r24, r24
    65d8:	b8 5f       	subi	r27, 0xF8	; 248
    65da:	39 f0       	breq	.+14     	; 0x65ea <__fixunssfsi+0x46>
    65dc:	b9 3f       	cpi	r27, 0xF9	; 249
    65de:	cc f3       	brlt	.-14     	; 0x65d2 <__fixunssfsi+0x2e>
    65e0:	86 95       	lsr	r24
    65e2:	77 95       	ror	r23
    65e4:	67 95       	ror	r22
    65e6:	b3 95       	inc	r27
    65e8:	d9 f7       	brne	.-10     	; 0x65e0 <__fixunssfsi+0x3c>
    65ea:	3e f4       	brtc	.+14     	; 0x65fa <__fixunssfsi+0x56>
    65ec:	90 95       	com	r25
    65ee:	80 95       	com	r24
    65f0:	70 95       	com	r23
    65f2:	61 95       	neg	r22
    65f4:	7f 4f       	sbci	r23, 0xFF	; 255
    65f6:	8f 4f       	sbci	r24, 0xFF	; 255
    65f8:	9f 4f       	sbci	r25, 0xFF	; 255
    65fa:	08 95       	ret

000065fc <__floatunsisf>:
    65fc:	e8 94       	clt
    65fe:	09 c0       	rjmp	.+18     	; 0x6612 <__floatsisf+0x12>

00006600 <__floatsisf>:
    6600:	97 fb       	bst	r25, 7
    6602:	3e f4       	brtc	.+14     	; 0x6612 <__floatsisf+0x12>
    6604:	90 95       	com	r25
    6606:	80 95       	com	r24
    6608:	70 95       	com	r23
    660a:	61 95       	neg	r22
    660c:	7f 4f       	sbci	r23, 0xFF	; 255
    660e:	8f 4f       	sbci	r24, 0xFF	; 255
    6610:	9f 4f       	sbci	r25, 0xFF	; 255
    6612:	99 23       	and	r25, r25
    6614:	a9 f0       	breq	.+42     	; 0x6640 <__floatsisf+0x40>
    6616:	f9 2f       	mov	r31, r25
    6618:	96 e9       	ldi	r25, 0x96	; 150
    661a:	bb 27       	eor	r27, r27
    661c:	93 95       	inc	r25
    661e:	f6 95       	lsr	r31
    6620:	87 95       	ror	r24
    6622:	77 95       	ror	r23
    6624:	67 95       	ror	r22
    6626:	b7 95       	ror	r27
    6628:	f1 11       	cpse	r31, r1
    662a:	f8 cf       	rjmp	.-16     	; 0x661c <__floatsisf+0x1c>
    662c:	fa f4       	brpl	.+62     	; 0x666c <__floatsisf+0x6c>
    662e:	bb 0f       	add	r27, r27
    6630:	11 f4       	brne	.+4      	; 0x6636 <__floatsisf+0x36>
    6632:	60 ff       	sbrs	r22, 0
    6634:	1b c0       	rjmp	.+54     	; 0x666c <__floatsisf+0x6c>
    6636:	6f 5f       	subi	r22, 0xFF	; 255
    6638:	7f 4f       	sbci	r23, 0xFF	; 255
    663a:	8f 4f       	sbci	r24, 0xFF	; 255
    663c:	9f 4f       	sbci	r25, 0xFF	; 255
    663e:	16 c0       	rjmp	.+44     	; 0x666c <__floatsisf+0x6c>
    6640:	88 23       	and	r24, r24
    6642:	11 f0       	breq	.+4      	; 0x6648 <__floatsisf+0x48>
    6644:	96 e9       	ldi	r25, 0x96	; 150
    6646:	11 c0       	rjmp	.+34     	; 0x666a <__floatsisf+0x6a>
    6648:	77 23       	and	r23, r23
    664a:	21 f0       	breq	.+8      	; 0x6654 <__floatsisf+0x54>
    664c:	9e e8       	ldi	r25, 0x8E	; 142
    664e:	87 2f       	mov	r24, r23
    6650:	76 2f       	mov	r23, r22
    6652:	05 c0       	rjmp	.+10     	; 0x665e <__floatsisf+0x5e>
    6654:	66 23       	and	r22, r22
    6656:	71 f0       	breq	.+28     	; 0x6674 <__floatsisf+0x74>
    6658:	96 e8       	ldi	r25, 0x86	; 134
    665a:	86 2f       	mov	r24, r22
    665c:	70 e0       	ldi	r23, 0x00	; 0
    665e:	60 e0       	ldi	r22, 0x00	; 0
    6660:	2a f0       	brmi	.+10     	; 0x666c <__floatsisf+0x6c>
    6662:	9a 95       	dec	r25
    6664:	66 0f       	add	r22, r22
    6666:	77 1f       	adc	r23, r23
    6668:	88 1f       	adc	r24, r24
    666a:	da f7       	brpl	.-10     	; 0x6662 <__floatsisf+0x62>
    666c:	88 0f       	add	r24, r24
    666e:	96 95       	lsr	r25
    6670:	87 95       	ror	r24
    6672:	97 f9       	bld	r25, 7
    6674:	08 95       	ret

00006676 <__floatundisf>:
    6676:	e8 94       	clt

00006678 <__fp_di2sf>:
    6678:	f9 2f       	mov	r31, r25
    667a:	96 eb       	ldi	r25, 0xB6	; 182
    667c:	ff 23       	and	r31, r31
    667e:	81 f0       	breq	.+32     	; 0x66a0 <__fp_di2sf+0x28>
    6680:	12 16       	cp	r1, r18
    6682:	13 06       	cpc	r1, r19
    6684:	14 06       	cpc	r1, r20
    6686:	44 0b       	sbc	r20, r20
    6688:	93 95       	inc	r25
    668a:	f6 95       	lsr	r31
    668c:	87 95       	ror	r24
    668e:	77 95       	ror	r23
    6690:	67 95       	ror	r22
    6692:	57 95       	ror	r21
    6694:	40 40       	sbci	r20, 0x00	; 0
    6696:	ff 23       	and	r31, r31
    6698:	b9 f7       	brne	.-18     	; 0x6688 <__fp_di2sf+0x10>
    669a:	1b c0       	rjmp	.+54     	; 0x66d2 <__fp_di2sf+0x5a>
    669c:	99 27       	eor	r25, r25
    669e:	08 95       	ret
    66a0:	88 23       	and	r24, r24
    66a2:	51 f4       	brne	.+20     	; 0x66b8 <__fp_di2sf+0x40>
    66a4:	98 50       	subi	r25, 0x08	; 8
    66a6:	d2 f7       	brpl	.-12     	; 0x669c <__fp_di2sf+0x24>
    66a8:	87 2b       	or	r24, r23
    66aa:	76 2f       	mov	r23, r22
    66ac:	65 2f       	mov	r22, r21
    66ae:	54 2f       	mov	r21, r20
    66b0:	43 2f       	mov	r20, r19
    66b2:	32 2f       	mov	r19, r18
    66b4:	20 e0       	ldi	r18, 0x00	; 0
    66b6:	b1 f3       	breq	.-20     	; 0x66a4 <__fp_di2sf+0x2c>
    66b8:	12 16       	cp	r1, r18
    66ba:	13 06       	cpc	r1, r19
    66bc:	14 06       	cpc	r1, r20
    66be:	44 0b       	sbc	r20, r20
    66c0:	88 23       	and	r24, r24
    66c2:	3a f0       	brmi	.+14     	; 0x66d2 <__fp_di2sf+0x5a>
    66c4:	9a 95       	dec	r25
    66c6:	44 0f       	add	r20, r20
    66c8:	55 1f       	adc	r21, r21
    66ca:	66 1f       	adc	r22, r22
    66cc:	77 1f       	adc	r23, r23
    66ce:	88 1f       	adc	r24, r24
    66d0:	ca f7       	brpl	.-14     	; 0x66c4 <__fp_di2sf+0x4c>
    66d2:	55 23       	and	r21, r21
    66d4:	4a f4       	brpl	.+18     	; 0x66e8 <__fp_di2sf+0x70>
    66d6:	44 0f       	add	r20, r20
    66d8:	55 1f       	adc	r21, r21
    66da:	11 f4       	brne	.+4      	; 0x66e0 <__fp_di2sf+0x68>
    66dc:	60 ff       	sbrs	r22, 0
    66de:	04 c0       	rjmp	.+8      	; 0x66e8 <__fp_di2sf+0x70>
    66e0:	6f 5f       	subi	r22, 0xFF	; 255
    66e2:	7f 4f       	sbci	r23, 0xFF	; 255
    66e4:	8f 4f       	sbci	r24, 0xFF	; 255
    66e6:	9f 4f       	sbci	r25, 0xFF	; 255
    66e8:	88 0f       	add	r24, r24
    66ea:	96 95       	lsr	r25
    66ec:	87 95       	ror	r24
    66ee:	97 f9       	bld	r25, 7
    66f0:	08 95       	ret

000066f2 <__fp_arccos>:
    66f2:	df 93       	push	r29
    66f4:	cf 93       	push	r28
    66f6:	1f 93       	push	r17
    66f8:	0f 93       	push	r16
    66fa:	8b 01       	movw	r16, r22
    66fc:	ec 01       	movw	r28, r24
    66fe:	e3 ee       	ldi	r30, 0xE3	; 227
    6700:	f0 e0       	ldi	r31, 0x00	; 0
    6702:	3f d0       	rcall	.+126    	; 0x6782 <__fp_powser>
    6704:	aa d0       	rcall	.+340    	; 0x685a <__fp_round>
    6706:	98 01       	movw	r18, r16
    6708:	ae 01       	movw	r20, r28
    670a:	8b 01       	movw	r16, r22
    670c:	ec 01       	movw	r28, r24
    670e:	60 e0       	ldi	r22, 0x00	; 0
    6710:	70 e0       	ldi	r23, 0x00	; 0
    6712:	80 e8       	ldi	r24, 0x80	; 128
    6714:	9f e3       	ldi	r25, 0x3F	; 63
    6716:	f4 dd       	rcall	.-1048   	; 0x6300 <__subsf3>
    6718:	af d1       	rcall	.+862    	; 0x6a78 <sqrt>
    671a:	98 01       	movw	r18, r16
    671c:	ae 01       	movw	r20, r28
    671e:	0f 91       	pop	r16
    6720:	1f 91       	pop	r17
    6722:	cf 91       	pop	r28
    6724:	df 91       	pop	r29
    6726:	fb c0       	rjmp	.+502    	; 0x691e <__mulsf3x>

00006728 <__fp_cmp>:
    6728:	99 0f       	add	r25, r25
    672a:	00 08       	sbc	r0, r0
    672c:	55 0f       	add	r21, r21
    672e:	aa 0b       	sbc	r26, r26
    6730:	e0 e8       	ldi	r30, 0x80	; 128
    6732:	fe ef       	ldi	r31, 0xFE	; 254
    6734:	16 16       	cp	r1, r22
    6736:	17 06       	cpc	r1, r23
    6738:	e8 07       	cpc	r30, r24
    673a:	f9 07       	cpc	r31, r25
    673c:	c0 f0       	brcs	.+48     	; 0x676e <__fp_cmp+0x46>
    673e:	12 16       	cp	r1, r18
    6740:	13 06       	cpc	r1, r19
    6742:	e4 07       	cpc	r30, r20
    6744:	f5 07       	cpc	r31, r21
    6746:	98 f0       	brcs	.+38     	; 0x676e <__fp_cmp+0x46>
    6748:	62 1b       	sub	r22, r18
    674a:	73 0b       	sbc	r23, r19
    674c:	84 0b       	sbc	r24, r20
    674e:	95 0b       	sbc	r25, r21
    6750:	39 f4       	brne	.+14     	; 0x6760 <__fp_cmp+0x38>
    6752:	0a 26       	eor	r0, r26
    6754:	61 f0       	breq	.+24     	; 0x676e <__fp_cmp+0x46>
    6756:	23 2b       	or	r18, r19
    6758:	24 2b       	or	r18, r20
    675a:	25 2b       	or	r18, r21
    675c:	21 f4       	brne	.+8      	; 0x6766 <__fp_cmp+0x3e>
    675e:	08 95       	ret
    6760:	0a 26       	eor	r0, r26
    6762:	09 f4       	brne	.+2      	; 0x6766 <__fp_cmp+0x3e>
    6764:	a1 40       	sbci	r26, 0x01	; 1
    6766:	a6 95       	lsr	r26
    6768:	8f ef       	ldi	r24, 0xFF	; 255
    676a:	81 1d       	adc	r24, r1
    676c:	81 1d       	adc	r24, r1
    676e:	08 95       	ret

00006770 <__fp_inf>:
    6770:	97 f9       	bld	r25, 7
    6772:	9f 67       	ori	r25, 0x7F	; 127
    6774:	80 e8       	ldi	r24, 0x80	; 128
    6776:	70 e0       	ldi	r23, 0x00	; 0
    6778:	60 e0       	ldi	r22, 0x00	; 0
    677a:	08 95       	ret

0000677c <__fp_nan>:
    677c:	9f ef       	ldi	r25, 0xFF	; 255
    677e:	80 ec       	ldi	r24, 0xC0	; 192
    6780:	08 95       	ret

00006782 <__fp_powser>:
    6782:	df 93       	push	r29
    6784:	cf 93       	push	r28
    6786:	1f 93       	push	r17
    6788:	0f 93       	push	r16
    678a:	ff 92       	push	r15
    678c:	ef 92       	push	r14
    678e:	df 92       	push	r13
    6790:	7b 01       	movw	r14, r22
    6792:	8c 01       	movw	r16, r24
    6794:	68 94       	set
    6796:	05 c0       	rjmp	.+10     	; 0x67a2 <__fp_powser+0x20>
    6798:	da 2e       	mov	r13, r26
    679a:	ef 01       	movw	r28, r30
    679c:	c0 d0       	rcall	.+384    	; 0x691e <__mulsf3x>
    679e:	fe 01       	movw	r30, r28
    67a0:	e8 94       	clt
    67a2:	a5 91       	lpm	r26, Z+
    67a4:	25 91       	lpm	r18, Z+
    67a6:	35 91       	lpm	r19, Z+
    67a8:	45 91       	lpm	r20, Z+
    67aa:	55 91       	lpm	r21, Z+
    67ac:	ae f3       	brts	.-22     	; 0x6798 <__fp_powser+0x16>
    67ae:	ef 01       	movw	r28, r30
    67b0:	b9 dd       	rcall	.-1166   	; 0x6324 <__addsf3x>
    67b2:	fe 01       	movw	r30, r28
    67b4:	97 01       	movw	r18, r14
    67b6:	a8 01       	movw	r20, r16
    67b8:	da 94       	dec	r13
    67ba:	79 f7       	brne	.-34     	; 0x679a <__fp_powser+0x18>
    67bc:	df 90       	pop	r13
    67be:	ef 90       	pop	r14
    67c0:	ff 90       	pop	r15
    67c2:	0f 91       	pop	r16
    67c4:	1f 91       	pop	r17
    67c6:	cf 91       	pop	r28
    67c8:	df 91       	pop	r29
    67ca:	08 95       	ret

000067cc <__fp_powsodd>:
    67cc:	9f 93       	push	r25
    67ce:	8f 93       	push	r24
    67d0:	7f 93       	push	r23
    67d2:	6f 93       	push	r22
    67d4:	ff 93       	push	r31
    67d6:	ef 93       	push	r30
    67d8:	9b 01       	movw	r18, r22
    67da:	ac 01       	movw	r20, r24
    67dc:	94 d0       	rcall	.+296    	; 0x6906 <__mulsf3>
    67de:	ef 91       	pop	r30
    67e0:	ff 91       	pop	r31
    67e2:	cf df       	rcall	.-98     	; 0x6782 <__fp_powser>
    67e4:	2f 91       	pop	r18
    67e6:	3f 91       	pop	r19
    67e8:	4f 91       	pop	r20
    67ea:	5f 91       	pop	r21
    67ec:	8c c0       	rjmp	.+280    	; 0x6906 <__mulsf3>

000067ee <__fp_pscA>:
    67ee:	00 24       	eor	r0, r0
    67f0:	0a 94       	dec	r0
    67f2:	16 16       	cp	r1, r22
    67f4:	17 06       	cpc	r1, r23
    67f6:	18 06       	cpc	r1, r24
    67f8:	09 06       	cpc	r0, r25
    67fa:	08 95       	ret

000067fc <__fp_pscB>:
    67fc:	00 24       	eor	r0, r0
    67fe:	0a 94       	dec	r0
    6800:	12 16       	cp	r1, r18
    6802:	13 06       	cpc	r1, r19
    6804:	14 06       	cpc	r1, r20
    6806:	05 06       	cpc	r0, r21
    6808:	08 95       	ret
    680a:	b8 cf       	rjmp	.-144    	; 0x677c <__fp_nan>

0000680c <__fp_rempio2>:
    680c:	50 d0       	rcall	.+160    	; 0x68ae <__fp_splitA>
    680e:	e8 f3       	brcs	.-6      	; 0x680a <__fp_pscB+0xe>
    6810:	e8 94       	clt
    6812:	e0 e0       	ldi	r30, 0x00	; 0
    6814:	bb 27       	eor	r27, r27
    6816:	9f 57       	subi	r25, 0x7F	; 127
    6818:	f0 f0       	brcs	.+60     	; 0x6856 <__fp_rempio2+0x4a>
    681a:	2a ed       	ldi	r18, 0xDA	; 218
    681c:	3f e0       	ldi	r19, 0x0F	; 15
    681e:	49 ec       	ldi	r20, 0xC9	; 201
    6820:	06 c0       	rjmp	.+12     	; 0x682e <__fp_rempio2+0x22>
    6822:	ee 0f       	add	r30, r30
    6824:	bb 0f       	add	r27, r27
    6826:	66 1f       	adc	r22, r22
    6828:	77 1f       	adc	r23, r23
    682a:	88 1f       	adc	r24, r24
    682c:	28 f0       	brcs	.+10     	; 0x6838 <__fp_rempio2+0x2c>
    682e:	b2 3a       	cpi	r27, 0xA2	; 162
    6830:	62 07       	cpc	r22, r18
    6832:	73 07       	cpc	r23, r19
    6834:	84 07       	cpc	r24, r20
    6836:	28 f0       	brcs	.+10     	; 0x6842 <__fp_rempio2+0x36>
    6838:	b2 5a       	subi	r27, 0xA2	; 162
    683a:	62 0b       	sbc	r22, r18
    683c:	73 0b       	sbc	r23, r19
    683e:	84 0b       	sbc	r24, r20
    6840:	e3 95       	inc	r30
    6842:	9a 95       	dec	r25
    6844:	72 f7       	brpl	.-36     	; 0x6822 <__fp_rempio2+0x16>
    6846:	80 38       	cpi	r24, 0x80	; 128
    6848:	30 f4       	brcc	.+12     	; 0x6856 <__fp_rempio2+0x4a>
    684a:	9a 95       	dec	r25
    684c:	bb 0f       	add	r27, r27
    684e:	66 1f       	adc	r22, r22
    6850:	77 1f       	adc	r23, r23
    6852:	88 1f       	adc	r24, r24
    6854:	d2 f7       	brpl	.-12     	; 0x684a <__fp_rempio2+0x3e>
    6856:	90 48       	sbci	r25, 0x80	; 128
    6858:	83 c1       	rjmp	.+774    	; 0x6b60 <__fp_mpack_finite>

0000685a <__fp_round>:
    685a:	09 2e       	mov	r0, r25
    685c:	03 94       	inc	r0
    685e:	00 0c       	add	r0, r0
    6860:	11 f4       	brne	.+4      	; 0x6866 <__fp_round+0xc>
    6862:	88 23       	and	r24, r24
    6864:	52 f0       	brmi	.+20     	; 0x687a <__fp_round+0x20>
    6866:	bb 0f       	add	r27, r27
    6868:	40 f4       	brcc	.+16     	; 0x687a <__fp_round+0x20>
    686a:	bf 2b       	or	r27, r31
    686c:	11 f4       	brne	.+4      	; 0x6872 <__fp_round+0x18>
    686e:	60 ff       	sbrs	r22, 0
    6870:	04 c0       	rjmp	.+8      	; 0x687a <__fp_round+0x20>
    6872:	6f 5f       	subi	r22, 0xFF	; 255
    6874:	7f 4f       	sbci	r23, 0xFF	; 255
    6876:	8f 4f       	sbci	r24, 0xFF	; 255
    6878:	9f 4f       	sbci	r25, 0xFF	; 255
    687a:	08 95       	ret

0000687c <__fp_sinus>:
    687c:	ef 93       	push	r30
    687e:	e0 ff       	sbrs	r30, 0
    6880:	06 c0       	rjmp	.+12     	; 0x688e <__fp_sinus+0x12>
    6882:	a2 ea       	ldi	r26, 0xA2	; 162
    6884:	2a ed       	ldi	r18, 0xDA	; 218
    6886:	3f e0       	ldi	r19, 0x0F	; 15
    6888:	49 ec       	ldi	r20, 0xC9	; 201
    688a:	5f eb       	ldi	r21, 0xBF	; 191
    688c:	4b dd       	rcall	.-1386   	; 0x6324 <__addsf3x>
    688e:	e5 df       	rcall	.-54     	; 0x685a <__fp_round>
    6890:	0f 90       	pop	r0
    6892:	03 94       	inc	r0
    6894:	01 fc       	sbrc	r0, 1
    6896:	90 58       	subi	r25, 0x80	; 128
    6898:	eb e0       	ldi	r30, 0x0B	; 11
    689a:	f1 e0       	ldi	r31, 0x01	; 1
    689c:	97 cf       	rjmp	.-210    	; 0x67cc <__fp_powsodd>

0000689e <__fp_split3>:
    689e:	57 fd       	sbrc	r21, 7
    68a0:	90 58       	subi	r25, 0x80	; 128
    68a2:	44 0f       	add	r20, r20
    68a4:	55 1f       	adc	r21, r21
    68a6:	59 f0       	breq	.+22     	; 0x68be <__fp_splitA+0x10>
    68a8:	5f 3f       	cpi	r21, 0xFF	; 255
    68aa:	71 f0       	breq	.+28     	; 0x68c8 <__fp_splitA+0x1a>
    68ac:	47 95       	ror	r20

000068ae <__fp_splitA>:
    68ae:	88 0f       	add	r24, r24
    68b0:	97 fb       	bst	r25, 7
    68b2:	99 1f       	adc	r25, r25
    68b4:	61 f0       	breq	.+24     	; 0x68ce <__fp_splitA+0x20>
    68b6:	9f 3f       	cpi	r25, 0xFF	; 255
    68b8:	79 f0       	breq	.+30     	; 0x68d8 <__fp_splitA+0x2a>
    68ba:	87 95       	ror	r24
    68bc:	08 95       	ret
    68be:	12 16       	cp	r1, r18
    68c0:	13 06       	cpc	r1, r19
    68c2:	14 06       	cpc	r1, r20
    68c4:	55 1f       	adc	r21, r21
    68c6:	f2 cf       	rjmp	.-28     	; 0x68ac <__fp_split3+0xe>
    68c8:	46 95       	lsr	r20
    68ca:	f1 df       	rcall	.-30     	; 0x68ae <__fp_splitA>
    68cc:	08 c0       	rjmp	.+16     	; 0x68de <__fp_splitA+0x30>
    68ce:	16 16       	cp	r1, r22
    68d0:	17 06       	cpc	r1, r23
    68d2:	18 06       	cpc	r1, r24
    68d4:	99 1f       	adc	r25, r25
    68d6:	f1 cf       	rjmp	.-30     	; 0x68ba <__fp_splitA+0xc>
    68d8:	86 95       	lsr	r24
    68da:	71 05       	cpc	r23, r1
    68dc:	61 05       	cpc	r22, r1
    68de:	08 94       	sec
    68e0:	08 95       	ret

000068e2 <__fp_zero>:
    68e2:	e8 94       	clt

000068e4 <__fp_szero>:
    68e4:	bb 27       	eor	r27, r27
    68e6:	66 27       	eor	r22, r22
    68e8:	77 27       	eor	r23, r23
    68ea:	cb 01       	movw	r24, r22
    68ec:	97 f9       	bld	r25, 7
    68ee:	08 95       	ret

000068f0 <__gesf2>:
    68f0:	1b df       	rcall	.-458    	; 0x6728 <__fp_cmp>
    68f2:	08 f4       	brcc	.+2      	; 0x68f6 <__gesf2+0x6>
    68f4:	8f ef       	ldi	r24, 0xFF	; 255
    68f6:	08 95       	ret

000068f8 <inverse>:
    68f8:	9b 01       	movw	r18, r22
    68fa:	ac 01       	movw	r20, r24
    68fc:	60 e0       	ldi	r22, 0x00	; 0
    68fe:	70 e0       	ldi	r23, 0x00	; 0
    6900:	80 e8       	ldi	r24, 0x80	; 128
    6902:	9f e3       	ldi	r25, 0x3F	; 63
    6904:	e2 cd       	rjmp	.-1084   	; 0x64ca <__divsf3>

00006906 <__mulsf3>:
    6906:	0b d0       	rcall	.+22     	; 0x691e <__mulsf3x>
    6908:	a8 cf       	rjmp	.-176    	; 0x685a <__fp_round>
    690a:	71 df       	rcall	.-286    	; 0x67ee <__fp_pscA>
    690c:	28 f0       	brcs	.+10     	; 0x6918 <__mulsf3+0x12>
    690e:	76 df       	rcall	.-276    	; 0x67fc <__fp_pscB>
    6910:	18 f0       	brcs	.+6      	; 0x6918 <__mulsf3+0x12>
    6912:	95 23       	and	r25, r21
    6914:	09 f0       	breq	.+2      	; 0x6918 <__mulsf3+0x12>
    6916:	2c cf       	rjmp	.-424    	; 0x6770 <__fp_inf>
    6918:	31 cf       	rjmp	.-414    	; 0x677c <__fp_nan>
    691a:	11 24       	eor	r1, r1
    691c:	e3 cf       	rjmp	.-58     	; 0x68e4 <__fp_szero>

0000691e <__mulsf3x>:
    691e:	bf df       	rcall	.-130    	; 0x689e <__fp_split3>
    6920:	a0 f3       	brcs	.-24     	; 0x690a <__mulsf3+0x4>

00006922 <__mulsf3_pse>:
    6922:	95 9f       	mul	r25, r21
    6924:	d1 f3       	breq	.-12     	; 0x691a <__mulsf3+0x14>
    6926:	95 0f       	add	r25, r21
    6928:	50 e0       	ldi	r21, 0x00	; 0
    692a:	55 1f       	adc	r21, r21
    692c:	62 9f       	mul	r22, r18
    692e:	f0 01       	movw	r30, r0
    6930:	72 9f       	mul	r23, r18
    6932:	bb 27       	eor	r27, r27
    6934:	f0 0d       	add	r31, r0
    6936:	b1 1d       	adc	r27, r1
    6938:	63 9f       	mul	r22, r19
    693a:	aa 27       	eor	r26, r26
    693c:	f0 0d       	add	r31, r0
    693e:	b1 1d       	adc	r27, r1
    6940:	aa 1f       	adc	r26, r26
    6942:	64 9f       	mul	r22, r20
    6944:	66 27       	eor	r22, r22
    6946:	b0 0d       	add	r27, r0
    6948:	a1 1d       	adc	r26, r1
    694a:	66 1f       	adc	r22, r22
    694c:	82 9f       	mul	r24, r18
    694e:	22 27       	eor	r18, r18
    6950:	b0 0d       	add	r27, r0
    6952:	a1 1d       	adc	r26, r1
    6954:	62 1f       	adc	r22, r18
    6956:	73 9f       	mul	r23, r19
    6958:	b0 0d       	add	r27, r0
    695a:	a1 1d       	adc	r26, r1
    695c:	62 1f       	adc	r22, r18
    695e:	83 9f       	mul	r24, r19
    6960:	a0 0d       	add	r26, r0
    6962:	61 1d       	adc	r22, r1
    6964:	22 1f       	adc	r18, r18
    6966:	74 9f       	mul	r23, r20
    6968:	33 27       	eor	r19, r19
    696a:	a0 0d       	add	r26, r0
    696c:	61 1d       	adc	r22, r1
    696e:	23 1f       	adc	r18, r19
    6970:	84 9f       	mul	r24, r20
    6972:	60 0d       	add	r22, r0
    6974:	21 1d       	adc	r18, r1
    6976:	82 2f       	mov	r24, r18
    6978:	76 2f       	mov	r23, r22
    697a:	6a 2f       	mov	r22, r26
    697c:	11 24       	eor	r1, r1
    697e:	9f 57       	subi	r25, 0x7F	; 127
    6980:	50 40       	sbci	r21, 0x00	; 0
    6982:	8a f0       	brmi	.+34     	; 0x69a6 <__mulsf3_pse+0x84>
    6984:	e1 f0       	breq	.+56     	; 0x69be <__mulsf3_pse+0x9c>
    6986:	88 23       	and	r24, r24
    6988:	4a f0       	brmi	.+18     	; 0x699c <__mulsf3_pse+0x7a>
    698a:	ee 0f       	add	r30, r30
    698c:	ff 1f       	adc	r31, r31
    698e:	bb 1f       	adc	r27, r27
    6990:	66 1f       	adc	r22, r22
    6992:	77 1f       	adc	r23, r23
    6994:	88 1f       	adc	r24, r24
    6996:	91 50       	subi	r25, 0x01	; 1
    6998:	50 40       	sbci	r21, 0x00	; 0
    699a:	a9 f7       	brne	.-22     	; 0x6986 <__mulsf3_pse+0x64>
    699c:	9e 3f       	cpi	r25, 0xFE	; 254
    699e:	51 05       	cpc	r21, r1
    69a0:	70 f0       	brcs	.+28     	; 0x69be <__mulsf3_pse+0x9c>
    69a2:	e6 ce       	rjmp	.-564    	; 0x6770 <__fp_inf>
    69a4:	9f cf       	rjmp	.-194    	; 0x68e4 <__fp_szero>
    69a6:	5f 3f       	cpi	r21, 0xFF	; 255
    69a8:	ec f3       	brlt	.-6      	; 0x69a4 <__mulsf3_pse+0x82>
    69aa:	98 3e       	cpi	r25, 0xE8	; 232
    69ac:	dc f3       	brlt	.-10     	; 0x69a4 <__mulsf3_pse+0x82>
    69ae:	86 95       	lsr	r24
    69b0:	77 95       	ror	r23
    69b2:	67 95       	ror	r22
    69b4:	b7 95       	ror	r27
    69b6:	f7 95       	ror	r31
    69b8:	e7 95       	ror	r30
    69ba:	9f 5f       	subi	r25, 0xFF	; 255
    69bc:	c1 f7       	brne	.-16     	; 0x69ae <__mulsf3_pse+0x8c>
    69be:	fe 2b       	or	r31, r30
    69c0:	88 0f       	add	r24, r24
    69c2:	91 1d       	adc	r25, r1
    69c4:	96 95       	lsr	r25
    69c6:	87 95       	ror	r24
    69c8:	97 f9       	bld	r25, 7
    69ca:	08 95       	ret

000069cc <pow>:
    69cc:	fa 01       	movw	r30, r20
    69ce:	ee 0f       	add	r30, r30
    69d0:	ff 1f       	adc	r31, r31
    69d2:	30 96       	adiw	r30, 0x00	; 0
    69d4:	21 05       	cpc	r18, r1
    69d6:	31 05       	cpc	r19, r1
    69d8:	99 f1       	breq	.+102    	; 0x6a40 <pow+0x74>
    69da:	61 15       	cp	r22, r1
    69dc:	71 05       	cpc	r23, r1
    69de:	61 f4       	brne	.+24     	; 0x69f8 <pow+0x2c>
    69e0:	80 38       	cpi	r24, 0x80	; 128
    69e2:	bf e3       	ldi	r27, 0x3F	; 63
    69e4:	9b 07       	cpc	r25, r27
    69e6:	49 f1       	breq	.+82     	; 0x6a3a <pow+0x6e>
    69e8:	68 94       	set
    69ea:	90 38       	cpi	r25, 0x80	; 128
    69ec:	81 05       	cpc	r24, r1
    69ee:	61 f0       	breq	.+24     	; 0x6a08 <pow+0x3c>
    69f0:	80 38       	cpi	r24, 0x80	; 128
    69f2:	bf ef       	ldi	r27, 0xFF	; 255
    69f4:	9b 07       	cpc	r25, r27
    69f6:	41 f0       	breq	.+16     	; 0x6a08 <pow+0x3c>
    69f8:	99 23       	and	r25, r25
    69fa:	42 f5       	brpl	.+80     	; 0x6a4c <pow+0x80>
    69fc:	ff 3f       	cpi	r31, 0xFF	; 255
    69fe:	e1 05       	cpc	r30, r1
    6a00:	31 05       	cpc	r19, r1
    6a02:	21 05       	cpc	r18, r1
    6a04:	11 f1       	breq	.+68     	; 0x6a4a <pow+0x7e>
    6a06:	e8 94       	clt
    6a08:	08 94       	sec
    6a0a:	e7 95       	ror	r30
    6a0c:	d9 01       	movw	r26, r18
    6a0e:	aa 23       	and	r26, r26
    6a10:	29 f4       	brne	.+10     	; 0x6a1c <pow+0x50>
    6a12:	ab 2f       	mov	r26, r27
    6a14:	be 2f       	mov	r27, r30
    6a16:	f8 5f       	subi	r31, 0xF8	; 248
    6a18:	d0 f3       	brcs	.-12     	; 0x6a0e <pow+0x42>
    6a1a:	10 c0       	rjmp	.+32     	; 0x6a3c <pow+0x70>
    6a1c:	ff 5f       	subi	r31, 0xFF	; 255
    6a1e:	70 f4       	brcc	.+28     	; 0x6a3c <pow+0x70>
    6a20:	a6 95       	lsr	r26
    6a22:	e0 f7       	brcc	.-8      	; 0x6a1c <pow+0x50>
    6a24:	f7 39       	cpi	r31, 0x97	; 151
    6a26:	50 f0       	brcs	.+20     	; 0x6a3c <pow+0x70>
    6a28:	19 f0       	breq	.+6      	; 0x6a30 <pow+0x64>
    6a2a:	ff 3a       	cpi	r31, 0xAF	; 175
    6a2c:	38 f4       	brcc	.+14     	; 0x6a3c <pow+0x70>
    6a2e:	9f 77       	andi	r25, 0x7F	; 127
    6a30:	9f 93       	push	r25
    6a32:	0c d0       	rcall	.+24     	; 0x6a4c <pow+0x80>
    6a34:	0f 90       	pop	r0
    6a36:	07 fc       	sbrc	r0, 7
    6a38:	90 58       	subi	r25, 0x80	; 128
    6a3a:	08 95       	ret
    6a3c:	3e f0       	brts	.+14     	; 0x6a4c <pow+0x80>
    6a3e:	9e ce       	rjmp	.-708    	; 0x677c <__fp_nan>
    6a40:	60 e0       	ldi	r22, 0x00	; 0
    6a42:	70 e0       	ldi	r23, 0x00	; 0
    6a44:	80 e8       	ldi	r24, 0x80	; 128
    6a46:	9f e3       	ldi	r25, 0x3F	; 63
    6a48:	08 95       	ret
    6a4a:	4f e7       	ldi	r20, 0x7F	; 127
    6a4c:	9f 77       	andi	r25, 0x7F	; 127
    6a4e:	5f 93       	push	r21
    6a50:	4f 93       	push	r20
    6a52:	3f 93       	push	r19
    6a54:	2f 93       	push	r18
    6a56:	d2 d0       	rcall	.+420    	; 0x6bfc <log>
    6a58:	2f 91       	pop	r18
    6a5a:	3f 91       	pop	r19
    6a5c:	4f 91       	pop	r20
    6a5e:	5f 91       	pop	r21
    6a60:	52 df       	rcall	.-348    	; 0x6906 <__mulsf3>
    6a62:	50 c0       	rjmp	.+160    	; 0x6b04 <exp>

00006a64 <sin>:
    6a64:	9f 93       	push	r25
    6a66:	d2 de       	rcall	.-604    	; 0x680c <__fp_rempio2>
    6a68:	0f 90       	pop	r0
    6a6a:	07 fc       	sbrc	r0, 7
    6a6c:	ee 5f       	subi	r30, 0xFE	; 254
    6a6e:	06 cf       	rjmp	.-500    	; 0x687c <__fp_sinus>
    6a70:	11 f4       	brne	.+4      	; 0x6a76 <sin+0x12>
    6a72:	0e f4       	brtc	.+2      	; 0x6a76 <sin+0x12>
    6a74:	83 ce       	rjmp	.-762    	; 0x677c <__fp_nan>
    6a76:	72 c0       	rjmp	.+228    	; 0x6b5c <__fp_mpack>

00006a78 <sqrt>:
    6a78:	1a df       	rcall	.-460    	; 0x68ae <__fp_splitA>
    6a7a:	d0 f3       	brcs	.-12     	; 0x6a70 <sin+0xc>
    6a7c:	99 23       	and	r25, r25
    6a7e:	d9 f3       	breq	.-10     	; 0x6a76 <sin+0x12>
    6a80:	ce f3       	brts	.-14     	; 0x6a74 <sin+0x10>
    6a82:	9f 57       	subi	r25, 0x7F	; 127
    6a84:	55 0b       	sbc	r21, r21
    6a86:	87 ff       	sbrs	r24, 7
    6a88:	77 d0       	rcall	.+238    	; 0x6b78 <__fp_norm2>
    6a8a:	00 24       	eor	r0, r0
    6a8c:	a0 e6       	ldi	r26, 0x60	; 96
    6a8e:	40 ea       	ldi	r20, 0xA0	; 160
    6a90:	90 01       	movw	r18, r0
    6a92:	80 58       	subi	r24, 0x80	; 128
    6a94:	56 95       	lsr	r21
    6a96:	97 95       	ror	r25
    6a98:	28 f4       	brcc	.+10     	; 0x6aa4 <sqrt+0x2c>
    6a9a:	80 5c       	subi	r24, 0xC0	; 192
    6a9c:	66 0f       	add	r22, r22
    6a9e:	77 1f       	adc	r23, r23
    6aa0:	88 1f       	adc	r24, r24
    6aa2:	20 f0       	brcs	.+8      	; 0x6aac <sqrt+0x34>
    6aa4:	26 17       	cp	r18, r22
    6aa6:	37 07       	cpc	r19, r23
    6aa8:	48 07       	cpc	r20, r24
    6aaa:	30 f4       	brcc	.+12     	; 0x6ab8 <sqrt+0x40>
    6aac:	62 1b       	sub	r22, r18
    6aae:	73 0b       	sbc	r23, r19
    6ab0:	84 0b       	sbc	r24, r20
    6ab2:	20 29       	or	r18, r0
    6ab4:	31 29       	or	r19, r1
    6ab6:	4a 2b       	or	r20, r26
    6ab8:	a6 95       	lsr	r26
    6aba:	17 94       	ror	r1
    6abc:	07 94       	ror	r0
    6abe:	20 25       	eor	r18, r0
    6ac0:	31 25       	eor	r19, r1
    6ac2:	4a 27       	eor	r20, r26
    6ac4:	58 f7       	brcc	.-42     	; 0x6a9c <sqrt+0x24>
    6ac6:	66 0f       	add	r22, r22
    6ac8:	77 1f       	adc	r23, r23
    6aca:	88 1f       	adc	r24, r24
    6acc:	20 f0       	brcs	.+8      	; 0x6ad6 <sqrt+0x5e>
    6ace:	26 17       	cp	r18, r22
    6ad0:	37 07       	cpc	r19, r23
    6ad2:	48 07       	cpc	r20, r24
    6ad4:	30 f4       	brcc	.+12     	; 0x6ae2 <sqrt+0x6a>
    6ad6:	62 0b       	sbc	r22, r18
    6ad8:	73 0b       	sbc	r23, r19
    6ada:	84 0b       	sbc	r24, r20
    6adc:	20 0d       	add	r18, r0
    6ade:	31 1d       	adc	r19, r1
    6ae0:	41 1d       	adc	r20, r1
    6ae2:	a0 95       	com	r26
    6ae4:	81 f7       	brne	.-32     	; 0x6ac6 <sqrt+0x4e>
    6ae6:	b9 01       	movw	r22, r18
    6ae8:	84 2f       	mov	r24, r20
    6aea:	91 58       	subi	r25, 0x81	; 129
    6aec:	88 0f       	add	r24, r24
    6aee:	96 95       	lsr	r25
    6af0:	87 95       	ror	r24
    6af2:	08 95       	ret

00006af4 <square>:
    6af4:	9b 01       	movw	r18, r22
    6af6:	ac 01       	movw	r20, r24
    6af8:	06 cf       	rjmp	.-500    	; 0x6906 <__mulsf3>
    6afa:	19 f4       	brne	.+6      	; 0x6b02 <square+0xe>
    6afc:	0e f0       	brts	.+2      	; 0x6b00 <square+0xc>
    6afe:	38 ce       	rjmp	.-912    	; 0x6770 <__fp_inf>
    6b00:	f0 ce       	rjmp	.-544    	; 0x68e2 <__fp_zero>
    6b02:	3c ce       	rjmp	.-904    	; 0x677c <__fp_nan>

00006b04 <exp>:
    6b04:	d4 de       	rcall	.-600    	; 0x68ae <__fp_splitA>
    6b06:	c8 f3       	brcs	.-14     	; 0x6afa <square+0x6>
    6b08:	96 38       	cpi	r25, 0x86	; 134
    6b0a:	c0 f7       	brcc	.-16     	; 0x6afc <square+0x8>
    6b0c:	07 f8       	bld	r0, 7
    6b0e:	0f 92       	push	r0
    6b10:	e8 94       	clt
    6b12:	2b e3       	ldi	r18, 0x3B	; 59
    6b14:	3a ea       	ldi	r19, 0xAA	; 170
    6b16:	48 eb       	ldi	r20, 0xB8	; 184
    6b18:	5f e7       	ldi	r21, 0x7F	; 127
    6b1a:	03 df       	rcall	.-506    	; 0x6922 <__mulsf3_pse>
    6b1c:	0f 92       	push	r0
    6b1e:	0f 92       	push	r0
    6b20:	0f 92       	push	r0
    6b22:	4d b7       	in	r20, 0x3d	; 61
    6b24:	5e b7       	in	r21, 0x3e	; 62
    6b26:	0f 92       	push	r0
    6b28:	a9 d0       	rcall	.+338    	; 0x6c7c <modf>
    6b2a:	e9 e2       	ldi	r30, 0x29	; 41
    6b2c:	f1 e0       	ldi	r31, 0x01	; 1
    6b2e:	29 de       	rcall	.-942    	; 0x6782 <__fp_powser>
    6b30:	4f 91       	pop	r20
    6b32:	5f 91       	pop	r21
    6b34:	ef 91       	pop	r30
    6b36:	ff 91       	pop	r31
    6b38:	e5 95       	asr	r30
    6b3a:	ee 1f       	adc	r30, r30
    6b3c:	ff 1f       	adc	r31, r31
    6b3e:	49 f0       	breq	.+18     	; 0x6b52 <exp+0x4e>
    6b40:	fe 57       	subi	r31, 0x7E	; 126
    6b42:	e0 68       	ori	r30, 0x80	; 128
    6b44:	44 27       	eor	r20, r20
    6b46:	ee 0f       	add	r30, r30
    6b48:	44 1f       	adc	r20, r20
    6b4a:	fa 95       	dec	r31
    6b4c:	e1 f7       	brne	.-8      	; 0x6b46 <exp+0x42>
    6b4e:	41 95       	neg	r20
    6b50:	55 0b       	sbc	r21, r21
    6b52:	1b d0       	rcall	.+54     	; 0x6b8a <ldexp>
    6b54:	0f 90       	pop	r0
    6b56:	07 fe       	sbrs	r0, 7
    6b58:	cf ce       	rjmp	.-610    	; 0x68f8 <inverse>
    6b5a:	08 95       	ret

00006b5c <__fp_mpack>:
    6b5c:	9f 3f       	cpi	r25, 0xFF	; 255
    6b5e:	31 f0       	breq	.+12     	; 0x6b6c <__fp_mpack_finite+0xc>

00006b60 <__fp_mpack_finite>:
    6b60:	91 50       	subi	r25, 0x01	; 1
    6b62:	20 f4       	brcc	.+8      	; 0x6b6c <__fp_mpack_finite+0xc>
    6b64:	87 95       	ror	r24
    6b66:	77 95       	ror	r23
    6b68:	67 95       	ror	r22
    6b6a:	b7 95       	ror	r27
    6b6c:	88 0f       	add	r24, r24
    6b6e:	91 1d       	adc	r25, r1
    6b70:	96 95       	lsr	r25
    6b72:	87 95       	ror	r24
    6b74:	97 f9       	bld	r25, 7
    6b76:	08 95       	ret

00006b78 <__fp_norm2>:
    6b78:	91 50       	subi	r25, 0x01	; 1
    6b7a:	50 40       	sbci	r21, 0x00	; 0
    6b7c:	66 0f       	add	r22, r22
    6b7e:	77 1f       	adc	r23, r23
    6b80:	88 1f       	adc	r24, r24
    6b82:	d2 f7       	brpl	.-12     	; 0x6b78 <__fp_norm2>
    6b84:	08 95       	ret
    6b86:	f4 cd       	rjmp	.-1048   	; 0x6770 <__fp_inf>
    6b88:	e9 cf       	rjmp	.-46     	; 0x6b5c <__fp_mpack>

00006b8a <ldexp>:
    6b8a:	91 de       	rcall	.-734    	; 0x68ae <__fp_splitA>
    6b8c:	e8 f3       	brcs	.-6      	; 0x6b88 <__fp_norm2+0x10>
    6b8e:	99 23       	and	r25, r25
    6b90:	d9 f3       	breq	.-10     	; 0x6b88 <__fp_norm2+0x10>
    6b92:	94 0f       	add	r25, r20
    6b94:	51 1d       	adc	r21, r1
    6b96:	bb f3       	brvs	.-18     	; 0x6b86 <__fp_norm2+0xe>
    6b98:	91 50       	subi	r25, 0x01	; 1
    6b9a:	50 40       	sbci	r21, 0x00	; 0
    6b9c:	94 f0       	brlt	.+36     	; 0x6bc2 <ldexp+0x38>
    6b9e:	59 f0       	breq	.+22     	; 0x6bb6 <ldexp+0x2c>
    6ba0:	88 23       	and	r24, r24
    6ba2:	32 f0       	brmi	.+12     	; 0x6bb0 <ldexp+0x26>
    6ba4:	66 0f       	add	r22, r22
    6ba6:	77 1f       	adc	r23, r23
    6ba8:	88 1f       	adc	r24, r24
    6baa:	91 50       	subi	r25, 0x01	; 1
    6bac:	50 40       	sbci	r21, 0x00	; 0
    6bae:	c1 f7       	brne	.-16     	; 0x6ba0 <ldexp+0x16>
    6bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    6bb2:	51 05       	cpc	r21, r1
    6bb4:	44 f7       	brge	.-48     	; 0x6b86 <__fp_norm2+0xe>
    6bb6:	88 0f       	add	r24, r24
    6bb8:	91 1d       	adc	r25, r1
    6bba:	96 95       	lsr	r25
    6bbc:	87 95       	ror	r24
    6bbe:	97 f9       	bld	r25, 7
    6bc0:	08 95       	ret
    6bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    6bc4:	ac f0       	brlt	.+42     	; 0x6bf0 <ldexp+0x66>
    6bc6:	98 3e       	cpi	r25, 0xE8	; 232
    6bc8:	9c f0       	brlt	.+38     	; 0x6bf0 <ldexp+0x66>
    6bca:	bb 27       	eor	r27, r27
    6bcc:	86 95       	lsr	r24
    6bce:	77 95       	ror	r23
    6bd0:	67 95       	ror	r22
    6bd2:	b7 95       	ror	r27
    6bd4:	08 f4       	brcc	.+2      	; 0x6bd8 <ldexp+0x4e>
    6bd6:	b1 60       	ori	r27, 0x01	; 1
    6bd8:	93 95       	inc	r25
    6bda:	c1 f7       	brne	.-16     	; 0x6bcc <ldexp+0x42>
    6bdc:	bb 0f       	add	r27, r27
    6bde:	58 f7       	brcc	.-42     	; 0x6bb6 <ldexp+0x2c>
    6be0:	11 f4       	brne	.+4      	; 0x6be6 <ldexp+0x5c>
    6be2:	60 ff       	sbrs	r22, 0
    6be4:	e8 cf       	rjmp	.-48     	; 0x6bb6 <ldexp+0x2c>
    6be6:	6f 5f       	subi	r22, 0xFF	; 255
    6be8:	7f 4f       	sbci	r23, 0xFF	; 255
    6bea:	8f 4f       	sbci	r24, 0xFF	; 255
    6bec:	9f 4f       	sbci	r25, 0xFF	; 255
    6bee:	e3 cf       	rjmp	.-58     	; 0x6bb6 <ldexp+0x2c>
    6bf0:	79 ce       	rjmp	.-782    	; 0x68e4 <__fp_szero>
    6bf2:	0e f0       	brts	.+2      	; 0x6bf6 <ldexp+0x6c>
    6bf4:	b3 cf       	rjmp	.-154    	; 0x6b5c <__fp_mpack>
    6bf6:	c2 cd       	rjmp	.-1148   	; 0x677c <__fp_nan>
    6bf8:	68 94       	set
    6bfa:	ba cd       	rjmp	.-1164   	; 0x6770 <__fp_inf>

00006bfc <log>:
    6bfc:	58 de       	rcall	.-848    	; 0x68ae <__fp_splitA>
    6bfe:	c8 f3       	brcs	.-14     	; 0x6bf2 <ldexp+0x68>
    6c00:	99 23       	and	r25, r25
    6c02:	d1 f3       	breq	.-12     	; 0x6bf8 <ldexp+0x6e>
    6c04:	c6 f3       	brts	.-16     	; 0x6bf6 <ldexp+0x6c>
    6c06:	df 93       	push	r29
    6c08:	cf 93       	push	r28
    6c0a:	1f 93       	push	r17
    6c0c:	0f 93       	push	r16
    6c0e:	ff 92       	push	r15
    6c10:	c9 2f       	mov	r28, r25
    6c12:	dd 27       	eor	r29, r29
    6c14:	88 23       	and	r24, r24
    6c16:	2a f0       	brmi	.+10     	; 0x6c22 <log+0x26>
    6c18:	21 97       	sbiw	r28, 0x01	; 1
    6c1a:	66 0f       	add	r22, r22
    6c1c:	77 1f       	adc	r23, r23
    6c1e:	88 1f       	adc	r24, r24
    6c20:	da f7       	brpl	.-10     	; 0x6c18 <log+0x1c>
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	40 e8       	ldi	r20, 0x80	; 128
    6c28:	5f eb       	ldi	r21, 0xBF	; 191
    6c2a:	9f e3       	ldi	r25, 0x3F	; 63
    6c2c:	88 39       	cpi	r24, 0x98	; 152
    6c2e:	20 f0       	brcs	.+8      	; 0x6c38 <log+0x3c>
    6c30:	80 3e       	cpi	r24, 0xE0	; 224
    6c32:	30 f0       	brcs	.+12     	; 0x6c40 <log+0x44>
    6c34:	21 96       	adiw	r28, 0x01	; 1
    6c36:	8f 77       	andi	r24, 0x7F	; 127
    6c38:	64 db       	rcall	.-2360   	; 0x6302 <__addsf3>
    6c3a:	e1 e5       	ldi	r30, 0x51	; 81
    6c3c:	f1 e0       	ldi	r31, 0x01	; 1
    6c3e:	03 c0       	rjmp	.+6      	; 0x6c46 <log+0x4a>
    6c40:	60 db       	rcall	.-2368   	; 0x6302 <__addsf3>
    6c42:	ee e7       	ldi	r30, 0x7E	; 126
    6c44:	f1 e0       	ldi	r31, 0x01	; 1
    6c46:	9d dd       	rcall	.-1222   	; 0x6782 <__fp_powser>
    6c48:	8b 01       	movw	r16, r22
    6c4a:	be 01       	movw	r22, r28
    6c4c:	ec 01       	movw	r28, r24
    6c4e:	fb 2e       	mov	r15, r27
    6c50:	6f 57       	subi	r22, 0x7F	; 127
    6c52:	71 09       	sbc	r23, r1
    6c54:	75 95       	asr	r23
    6c56:	77 1f       	adc	r23, r23
    6c58:	88 0b       	sbc	r24, r24
    6c5a:	99 0b       	sbc	r25, r25
    6c5c:	d1 dc       	rcall	.-1630   	; 0x6600 <__floatsisf>
    6c5e:	28 e1       	ldi	r18, 0x18	; 24
    6c60:	32 e7       	ldi	r19, 0x72	; 114
    6c62:	41 e3       	ldi	r20, 0x31	; 49
    6c64:	5f e3       	ldi	r21, 0x3F	; 63
    6c66:	5b de       	rcall	.-842    	; 0x691e <__mulsf3x>
    6c68:	af 2d       	mov	r26, r15
    6c6a:	98 01       	movw	r18, r16
    6c6c:	ae 01       	movw	r20, r28
    6c6e:	ff 90       	pop	r15
    6c70:	0f 91       	pop	r16
    6c72:	1f 91       	pop	r17
    6c74:	cf 91       	pop	r28
    6c76:	df 91       	pop	r29
    6c78:	55 db       	rcall	.-2390   	; 0x6324 <__addsf3x>
    6c7a:	ef cd       	rjmp	.-1058   	; 0x685a <__fp_round>

00006c7c <modf>:
    6c7c:	fa 01       	movw	r30, r20
    6c7e:	dc 01       	movw	r26, r24
    6c80:	aa 0f       	add	r26, r26
    6c82:	bb 1f       	adc	r27, r27
    6c84:	9b 01       	movw	r18, r22
    6c86:	ac 01       	movw	r20, r24
    6c88:	bf 57       	subi	r27, 0x7F	; 127
    6c8a:	28 f4       	brcc	.+10     	; 0x6c96 <modf+0x1a>
    6c8c:	22 27       	eor	r18, r18
    6c8e:	33 27       	eor	r19, r19
    6c90:	44 27       	eor	r20, r20
    6c92:	50 78       	andi	r21, 0x80	; 128
    6c94:	1f c0       	rjmp	.+62     	; 0x6cd4 <modf+0x58>
    6c96:	b7 51       	subi	r27, 0x17	; 23
    6c98:	88 f4       	brcc	.+34     	; 0x6cbc <modf+0x40>
    6c9a:	ab 2f       	mov	r26, r27
    6c9c:	00 24       	eor	r0, r0
    6c9e:	46 95       	lsr	r20
    6ca0:	37 95       	ror	r19
    6ca2:	27 95       	ror	r18
    6ca4:	01 1c       	adc	r0, r1
    6ca6:	a3 95       	inc	r26
    6ca8:	d2 f3       	brmi	.-12     	; 0x6c9e <modf+0x22>
    6caa:	00 20       	and	r0, r0
    6cac:	69 f0       	breq	.+26     	; 0x6cc8 <modf+0x4c>
    6cae:	22 0f       	add	r18, r18
    6cb0:	33 1f       	adc	r19, r19
    6cb2:	44 1f       	adc	r20, r20
    6cb4:	b3 95       	inc	r27
    6cb6:	da f3       	brmi	.-10     	; 0x6cae <modf+0x32>
    6cb8:	0d d0       	rcall	.+26     	; 0x6cd4 <modf+0x58>
    6cba:	22 cb       	rjmp	.-2492   	; 0x6300 <__subsf3>
    6cbc:	61 30       	cpi	r22, 0x01	; 1
    6cbe:	71 05       	cpc	r23, r1
    6cc0:	a0 e8       	ldi	r26, 0x80	; 128
    6cc2:	8a 07       	cpc	r24, r26
    6cc4:	b9 46       	sbci	r27, 0x69	; 105
    6cc6:	30 f4       	brcc	.+12     	; 0x6cd4 <modf+0x58>
    6cc8:	9b 01       	movw	r18, r22
    6cca:	ac 01       	movw	r20, r24
    6ccc:	66 27       	eor	r22, r22
    6cce:	77 27       	eor	r23, r23
    6cd0:	88 27       	eor	r24, r24
    6cd2:	90 78       	andi	r25, 0x80	; 128
    6cd4:	30 96       	adiw	r30, 0x00	; 0
    6cd6:	21 f0       	breq	.+8      	; 0x6ce0 <modf+0x64>
    6cd8:	20 83       	st	Z, r18
    6cda:	31 83       	std	Z+1, r19	; 0x01
    6cdc:	42 83       	std	Z+2, r20	; 0x02
    6cde:	53 83       	std	Z+3, r21	; 0x03
    6ce0:	08 95       	ret

00006ce2 <__divmodhi4>:
    6ce2:	97 fb       	bst	r25, 7
    6ce4:	07 2e       	mov	r0, r23
    6ce6:	16 f4       	brtc	.+4      	; 0x6cec <__divmodhi4+0xa>
    6ce8:	00 94       	com	r0
    6cea:	06 d0       	rcall	.+12     	; 0x6cf8 <__divmodhi4_neg1>
    6cec:	77 fd       	sbrc	r23, 7
    6cee:	08 d0       	rcall	.+16     	; 0x6d00 <__divmodhi4_neg2>
    6cf0:	60 d0       	rcall	.+192    	; 0x6db2 <__udivmodhi4>
    6cf2:	07 fc       	sbrc	r0, 7
    6cf4:	05 d0       	rcall	.+10     	; 0x6d00 <__divmodhi4_neg2>
    6cf6:	3e f4       	brtc	.+14     	; 0x6d06 <__divmodhi4_exit>

00006cf8 <__divmodhi4_neg1>:
    6cf8:	90 95       	com	r25
    6cfa:	81 95       	neg	r24
    6cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    6cfe:	08 95       	ret

00006d00 <__divmodhi4_neg2>:
    6d00:	70 95       	com	r23
    6d02:	61 95       	neg	r22
    6d04:	7f 4f       	sbci	r23, 0xFF	; 255

00006d06 <__divmodhi4_exit>:
    6d06:	08 95       	ret

00006d08 <__tablejump2__>:
    6d08:	ee 0f       	add	r30, r30
    6d0a:	ff 1f       	adc	r31, r31

00006d0c <__tablejump__>:
    6d0c:	05 90       	lpm	r0, Z+
    6d0e:	f4 91       	lpm	r31, Z
    6d10:	e0 2d       	mov	r30, r0
    6d12:	09 94       	ijmp

00006d14 <__umulhisi3>:
    6d14:	a2 9f       	mul	r26, r18
    6d16:	b0 01       	movw	r22, r0
    6d18:	b3 9f       	mul	r27, r19
    6d1a:	c0 01       	movw	r24, r0
    6d1c:	a3 9f       	mul	r26, r19
    6d1e:	70 0d       	add	r23, r0
    6d20:	81 1d       	adc	r24, r1
    6d22:	11 24       	eor	r1, r1
    6d24:	91 1d       	adc	r25, r1
    6d26:	b2 9f       	mul	r27, r18
    6d28:	70 0d       	add	r23, r0
    6d2a:	81 1d       	adc	r24, r1
    6d2c:	11 24       	eor	r1, r1
    6d2e:	91 1d       	adc	r25, r1
    6d30:	08 95       	ret

00006d32 <__ashldi3>:
    6d32:	0f 93       	push	r16
    6d34:	08 30       	cpi	r16, 0x08	; 8
    6d36:	90 f0       	brcs	.+36     	; 0x6d5c <__ashldi3+0x2a>
    6d38:	98 2f       	mov	r25, r24
    6d3a:	87 2f       	mov	r24, r23
    6d3c:	76 2f       	mov	r23, r22
    6d3e:	65 2f       	mov	r22, r21
    6d40:	54 2f       	mov	r21, r20
    6d42:	43 2f       	mov	r20, r19
    6d44:	32 2f       	mov	r19, r18
    6d46:	22 27       	eor	r18, r18
    6d48:	08 50       	subi	r16, 0x08	; 8
    6d4a:	f4 cf       	rjmp	.-24     	; 0x6d34 <__ashldi3+0x2>
    6d4c:	22 0f       	add	r18, r18
    6d4e:	33 1f       	adc	r19, r19
    6d50:	44 1f       	adc	r20, r20
    6d52:	55 1f       	adc	r21, r21
    6d54:	66 1f       	adc	r22, r22
    6d56:	77 1f       	adc	r23, r23
    6d58:	88 1f       	adc	r24, r24
    6d5a:	99 1f       	adc	r25, r25
    6d5c:	0a 95       	dec	r16
    6d5e:	b2 f7       	brpl	.-20     	; 0x6d4c <__ashldi3+0x1a>
    6d60:	0f 91       	pop	r16
    6d62:	08 95       	ret

00006d64 <__adddi3>:
    6d64:	2a 0d       	add	r18, r10
    6d66:	3b 1d       	adc	r19, r11
    6d68:	4c 1d       	adc	r20, r12
    6d6a:	5d 1d       	adc	r21, r13
    6d6c:	6e 1d       	adc	r22, r14
    6d6e:	7f 1d       	adc	r23, r15
    6d70:	80 1f       	adc	r24, r16
    6d72:	91 1f       	adc	r25, r17
    6d74:	08 95       	ret

00006d76 <__adddi3_s8>:
    6d76:	00 24       	eor	r0, r0
    6d78:	a7 fd       	sbrc	r26, 7
    6d7a:	00 94       	com	r0
    6d7c:	2a 0f       	add	r18, r26
    6d7e:	30 1d       	adc	r19, r0
    6d80:	40 1d       	adc	r20, r0
    6d82:	50 1d       	adc	r21, r0
    6d84:	60 1d       	adc	r22, r0
    6d86:	70 1d       	adc	r23, r0
    6d88:	80 1d       	adc	r24, r0
    6d8a:	90 1d       	adc	r25, r0
    6d8c:	08 95       	ret

00006d8e <__subdi3>:
    6d8e:	2a 19       	sub	r18, r10
    6d90:	3b 09       	sbc	r19, r11
    6d92:	4c 09       	sbc	r20, r12
    6d94:	5d 09       	sbc	r21, r13
    6d96:	6e 09       	sbc	r22, r14
    6d98:	7f 09       	sbc	r23, r15
    6d9a:	80 0b       	sbc	r24, r16
    6d9c:	91 0b       	sbc	r25, r17
    6d9e:	08 95       	ret

00006da0 <__cmpdi2>:
    6da0:	2a 15       	cp	r18, r10
    6da2:	3b 05       	cpc	r19, r11
    6da4:	4c 05       	cpc	r20, r12
    6da6:	5d 05       	cpc	r21, r13
    6da8:	6e 05       	cpc	r22, r14
    6daa:	7f 05       	cpc	r23, r15
    6dac:	80 07       	cpc	r24, r16
    6dae:	91 07       	cpc	r25, r17
    6db0:	08 95       	ret

00006db2 <__udivmodhi4>:
    6db2:	aa 1b       	sub	r26, r26
    6db4:	bb 1b       	sub	r27, r27
    6db6:	51 e1       	ldi	r21, 0x11	; 17
    6db8:	07 c0       	rjmp	.+14     	; 0x6dc8 <__udivmodhi4_ep>

00006dba <__udivmodhi4_loop>:
    6dba:	aa 1f       	adc	r26, r26
    6dbc:	bb 1f       	adc	r27, r27
    6dbe:	a6 17       	cp	r26, r22
    6dc0:	b7 07       	cpc	r27, r23
    6dc2:	10 f0       	brcs	.+4      	; 0x6dc8 <__udivmodhi4_ep>
    6dc4:	a6 1b       	sub	r26, r22
    6dc6:	b7 0b       	sbc	r27, r23

00006dc8 <__udivmodhi4_ep>:
    6dc8:	88 1f       	adc	r24, r24
    6dca:	99 1f       	adc	r25, r25
    6dcc:	5a 95       	dec	r21
    6dce:	a9 f7       	brne	.-22     	; 0x6dba <__udivmodhi4_loop>
    6dd0:	80 95       	com	r24
    6dd2:	90 95       	com	r25
    6dd4:	bc 01       	movw	r22, r24
    6dd6:	cd 01       	movw	r24, r26
    6dd8:	08 95       	ret

00006dda <_exit>:
    6dda:	f8 94       	cli

00006ddc <__stop_program>:
    6ddc:	ff cf       	rjmp	.-2      	; 0x6ddc <__stop_program>
