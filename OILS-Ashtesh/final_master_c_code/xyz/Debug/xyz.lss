
xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000714c  000071e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000714c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039c  00800192  00800192  00007272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000072a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000072e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b93  00000000  00000000  000076b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c9  00000000  00000000  0000e243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030df  00000000  00000000  0000fa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fd0  00000000  00000000  00012aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df1  00000000  00000000  00013abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051da  00000000  00000000  000148ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  00019a87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <__vector_14>
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c3 0d       	add	r28, r3
      8e:	cc 0d       	add	r28, r12
      90:	d5 0d       	add	r29, r5
      92:	de 0d       	add	r29, r14
      94:	e7 0d       	add	r30, r7
      96:	f0 0d       	add	r31, r0
      98:	f9 0d       	add	r31, r9
      9a:	02 0e       	add	r0, r18
      9c:	0b 0e       	add	r0, r27
      9e:	14 0e       	add	r1, r20
      a0:	1d 0e       	add	r1, r29
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <detumbling+0x3b6>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	ec e4       	ldi	r30, 0x4C	; 76
     7e0:	f1 e7       	ldi	r31, 0x71	; 113
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a2 39       	cpi	r26, 0x92	; 146
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a2 e9       	ldi	r26, 0x92	; 146
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	ae 32       	cpi	r26, 0x2E	; 46
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <main>
     806:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	c2 54       	subi	r28, 0x42	; 66
     836:	d1 09       	sbc	r29, r1
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	23 96       	adiw	r28, 0x03	; 3
     844:	9f af       	std	Y+63, r25	; 0x3f
     846:	8e af       	std	Y+62, r24	; 0x3e
     848:	23 97       	sbiw	r28, 0x03	; 3
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     84a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
     84e:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
     852:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
     856:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
     85a:	eb ee       	ldi	r30, 0xEB	; 235
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	80 87       	std	Z+8, r24	; 0x08
     860:	91 87       	std	Z+9, r25	; 0x09
     862:	a2 87       	std	Z+10, r26	; 0x0a
     864:	b3 87       	std	Z+11, r27	; 0x0b
	  v_B[1] = Current_state.mm.B_y;
     866:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
     86a:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
     86e:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
     872:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
     876:	84 83       	std	Z+4, r24	; 0x04
     878:	95 83       	std	Z+5, r25	; 0x05
     87a:	a6 83       	std	Z+6, r26	; 0x06
     87c:	b7 83       	std	Z+7, r27	; 0x07
	  v_B[0] = Current_state.mm.B_z;
     87e:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
     882:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
     886:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
     88a:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
     88e:	80 83       	st	Z, r24
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	a2 83       	std	Z+2, r26	; 0x02
     894:	b3 83       	std	Z+3, r27	; 0x03
	  
	if(first_B)
     896:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <first_B>
     89a:	88 23       	and	r24, r24
     89c:	41 f0       	breq	.+16     	; 0x8ae <detumbling+0xa2>
	{
		
		copy_vector(v_B, v_B_old);
     89e:	62 e9       	ldi	r22, 0x92	; 146
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	cf 01       	movw	r24, r30
     8a4:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <copy_vector>
		first_B = 0;
     8a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <first_B>
     8ac:	87 c1       	rjmp	.+782    	; 0xbbc <detumbling+0x3b0>
     8ae:	0b ee       	ldi	r16, 0xEB	; 235
     8b0:	11 e0       	ldi	r17, 0x01	; 1
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f2 e9       	ldi	r31, 0x92	; 146
     8b6:	2f 2e       	mov	r2, r31
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	3f 2e       	mov	r3, r31
     8bc:	f0 2d       	mov	r31, r0
     8be:	2e 01       	movw	r4, r28
     8c0:	8d e0       	ldi	r24, 0x0D	; 13
     8c2:	48 0e       	add	r4, r24
     8c4:	51 1c       	adc	r5, r1
     8c6:	fe 01       	movw	r30, r28
     8c8:	31 96       	adiw	r30, 0x01	; 1
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
	  v_B[1] = Current_state.mm.B_y;
	  v_B[0] = Current_state.mm.B_z;
	  
	if(first_B)
     8ca:	fe af       	std	Y+62, r31	; 0x3e
     8cc:	ed af       	std	Y+61, r30	; 0x3d
     8ce:	32 01       	movw	r6, r4
     8d0:	21 96       	adiw	r28, 0x01	; 1
     8d2:	5f ae       	std	Y+63, r5	; 0x3f
     8d4:	4e ae       	std	Y+62, r4	; 0x3e
     8d6:	21 97       	sbiw	r28, 0x01	; 1
     8d8:	2f 01       	movw	r4, r30
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8da:	f8 01       	movw	r30, r16
     8dc:	c1 90       	ld	r12, Z+
     8de:	d1 90       	ld	r13, Z+
     8e0:	e1 90       	ld	r14, Z+
     8e2:	f1 90       	ld	r15, Z+
     8e4:	8f 01       	movw	r16, r30
     8e6:	f1 01       	movw	r30, r2
     8e8:	81 90       	ld	r8, Z+
     8ea:	91 90       	ld	r9, Z+
     8ec:	a1 90       	ld	r10, Z+
     8ee:	b1 90       	ld	r11, Z+
     8f0:	1f 01       	movw	r2, r30
     8f2:	a5 01       	movw	r20, r10
     8f4:	94 01       	movw	r18, r8
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     90a:	f3 01       	movw	r30, r6
     90c:	61 93       	st	Z+, r22
     90e:	71 93       	st	Z+, r23
     910:	81 93       	st	Z+, r24
     912:	91 93       	st	Z+, r25
     914:	3f 01       	movw	r6, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     916:	a5 01       	movw	r20, r10
     918:	94 01       	movw	r18, r8
     91a:	c7 01       	movw	r24, r14
     91c:	b6 01       	movw	r22, r12
     91e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     92e:	f2 01       	movw	r30, r4
     930:	61 93       	st	Z+, r22
     932:	71 93       	st	Z+, r23
     934:	81 93       	st	Z+, r24
     936:	91 93       	st	Z+, r25
     938:	2f 01       	movw	r4, r30
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	07 3f       	cpi	r16, 0xF7	; 247
     93e:	1f 07       	cpc	r17, r31
     940:	61 f6       	brne	.-104    	; 0x8da <detumbling+0xce>
     942:	6d ac       	ldd	r6, Y+61	; 0x3d
     944:	7e ac       	ldd	r7, Y+62	; 0x3e
     946:	21 96       	adiw	r28, 0x01	; 1
     948:	4e ac       	ldd	r4, Y+62	; 0x3e
     94a:	5f ac       	ldd	r5, Y+63	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	7e 01       	movw	r14, r28
     950:	8a e1       	ldi	r24, 0x1A	; 26
     952:	e8 0e       	add	r14, r24
     954:	f1 1c       	adc	r15, r1
     956:	8e 01       	movw	r16, r28
     958:	04 5d       	subi	r16, 0xD4	; 212
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	5e 01       	movw	r10, r28
     95e:	9d e0       	ldi	r25, 0x0D	; 13
     960:	a9 0e       	add	r10, r25
     962:	b1 1c       	adc	r11, r1
     964:	42 01       	movw	r8, r4
     966:	63 01       	movw	r12, r6
	uint8_t dB_send[9];
	uint8_t dB_receive[9];
	
	//transmit_UART0((uint8_t)33);
	for(int iter=0; iter<3; iter++){
		B_avg_send[2*iter] = (uint8_t)((int16_t)(abs(v_B_avg[iter]*15000)));
     968:	f6 01       	movw	r30, r12
     96a:	61 91       	ld	r22, Z+
     96c:	71 91       	ld	r23, Z+
     96e:	81 91       	ld	r24, Z+
     970:	91 91       	ld	r25, Z+
     972:	6f 01       	movw	r12, r30
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e6       	ldi	r19, 0x60	; 96
     978:	4a e6       	ldi	r20, 0x6A	; 106
     97a:	56 e4       	ldi	r21, 0x46	; 70
     97c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     980:	0e 94 81 34 	call	0x6902	; 0x6902 <__fixsfsi>
     984:	9b 01       	movw	r18, r22
     986:	77 23       	and	r23, r23
     988:	24 f4       	brge	.+8      	; 0x992 <detumbling+0x186>
     98a:	22 27       	eor	r18, r18
     98c:	33 27       	eor	r19, r19
     98e:	26 1b       	sub	r18, r22
     990:	37 0b       	sbc	r19, r23
     992:	f7 01       	movw	r30, r14
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	20 83       	st	Z, r18
		B_avg_send[2*iter+1] = (uint8_t)((int16_t)(abs(v_B_avg[iter]*15000))>>8);
     998:	f7 01       	movw	r30, r14
     99a:	30 83       	st	Z, r19
		dB_send[2*iter] = (uint8_t)((int16_t)(abs(v_dB[iter]*15000)));
     99c:	f4 01       	movw	r30, r8
     99e:	61 91       	ld	r22, Z+
     9a0:	71 91       	ld	r23, Z+
     9a2:	81 91       	ld	r24, Z+
     9a4:	91 91       	ld	r25, Z+
     9a6:	4f 01       	movw	r8, r30
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e6       	ldi	r19, 0x60	; 96
     9ac:	4a e6       	ldi	r20, 0x6A	; 106
     9ae:	56 e4       	ldi	r21, 0x46	; 70
     9b0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     9b4:	0e 94 81 34 	call	0x6902	; 0x6902 <__fixsfsi>
     9b8:	9b 01       	movw	r18, r22
     9ba:	77 23       	and	r23, r23
     9bc:	24 f4       	brge	.+8      	; 0x9c6 <detumbling+0x1ba>
     9be:	22 27       	eor	r18, r18
     9c0:	33 27       	eor	r19, r19
     9c2:	26 1b       	sub	r18, r22
     9c4:	37 0b       	sbc	r19, r23
     9c6:	f8 01       	movw	r30, r16
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	20 83       	st	Z, r18
		dB_send[2*iter+1] = (uint8_t)((int16_t)(abs(v_dB[iter]*15000))>>8);
     9cc:	f8 01       	movw	r30, r16
     9ce:	30 83       	st	Z, r19
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	ef 0e       	add	r14, r31
     9d4:	f1 1c       	adc	r15, r1
     9d6:	0e 5f       	subi	r16, 0xFE	; 254
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t B_avg_receive[9];
	uint8_t dB_send[9];
	uint8_t dB_receive[9];
	
	//transmit_UART0((uint8_t)33);
	for(int iter=0; iter<3; iter++){
     9da:	ca 14       	cp	r12, r10
     9dc:	db 04       	cpc	r13, r11
     9de:	21 f6       	brne	.-120    	; 0x968 <detumbling+0x15c>
     9e0:	7e 01       	movw	r14, r28
     9e2:	81 e3       	ldi	r24, 0x31	; 49
     9e4:	e8 0e       	add	r14, r24
     9e6:	f1 1c       	adc	r15, r1
     9e8:	8e 01       	movw	r16, r28
     9ea:	01 5e       	subi	r16, 0xE1	; 225
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if(v_B_avg[iter-6]>=0){
			B_avg_send[iter]= 0 ;
		}
		else
			B_avg_send[iter] = 1;
     9ee:	dd 24       	eor	r13, r13
     9f0:	d3 94       	inc	r13
		dB_send[2*iter+1] = (uint8_t)((int16_t)(abs(v_dB[iter]*15000))>>8);
	}
	
	for(int iter=6; iter<9; iter++){
		
		if(v_B_avg[iter-6]>=0){
     9f2:	f3 01       	movw	r30, r6
     9f4:	61 91       	ld	r22, Z+
     9f6:	71 91       	ld	r23, Z+
     9f8:	81 91       	ld	r24, Z+
     9fa:	91 91       	ld	r25, Z+
     9fc:	3f 01       	movw	r6, r30
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	a9 01       	movw	r20, r18
     a04:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
     a08:	88 23       	and	r24, r24
     a0a:	1c f0       	brlt	.+6      	; 0xa12 <detumbling+0x206>
			B_avg_send[iter]= 0 ;
     a0c:	f8 01       	movw	r30, r16
     a0e:	10 82       	st	Z, r1
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <detumbling+0x20a>
		}
		else
			B_avg_send[iter] = 1;
     a12:	f8 01       	movw	r30, r16
     a14:	d0 82       	st	Z, r13
	
		if(v_dB[iter-6]>=0){
     a16:	f2 01       	movw	r30, r4
     a18:	61 91       	ld	r22, Z+
     a1a:	71 91       	ld	r23, Z+
     a1c:	81 91       	ld	r24, Z+
     a1e:	91 91       	ld	r25, Z+
     a20:	2f 01       	movw	r4, r30
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a9 01       	movw	r20, r18
     a28:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
     a2c:	88 23       	and	r24, r24
     a2e:	1c f0       	brlt	.+6      	; 0xa36 <detumbling+0x22a>
			dB_send[iter]= 0 ;
     a30:	f7 01       	movw	r30, r14
     a32:	10 82       	st	Z, r1
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <detumbling+0x22e>
		}
		else
			dB_send[iter] = 1;
     a36:	f7 01       	movw	r30, r14
     a38:	d0 82       	st	Z, r13
     a3a:	ff ef       	ldi	r31, 0xFF	; 255
     a3c:	ef 1a       	sub	r14, r31
     a3e:	ff 0a       	sbc	r15, r31
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
		B_avg_send[2*iter+1] = (uint8_t)((int16_t)(abs(v_B_avg[iter]*15000))>>8);
		dB_send[2*iter] = (uint8_t)((int16_t)(abs(v_dB[iter]*15000)));
		dB_send[2*iter+1] = (uint8_t)((int16_t)(abs(v_dB[iter]*15000))>>8);
	}
	
	for(int iter=6; iter<9; iter++){
     a44:	a6 14       	cp	r10, r6
     a46:	b7 04       	cpc	r11, r7
     a48:	a1 f6       	brne	.-88     	; 0x9f2 <detumbling+0x1e6>
     a4a:	3e 01       	movw	r6, r28
     a4c:	89 e1       	ldi	r24, 0x19	; 25
     a4e:	68 0e       	add	r6, r24
     a50:	71 1c       	adc	r7, r1
     a52:	6e 01       	movw	r12, r28
     a54:	92 e2       	ldi	r25, 0x22	; 34
     a56:	c9 0e       	add	r12, r25
     a58:	d1 1c       	adc	r13, r1
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     a5a:	36 2c       	mov	r3, r6
     a5c:	27 2c       	mov	r2, r7
     a5e:	4e 01       	movw	r8, r28
     a60:	eb e2       	ldi	r30, 0x2B	; 43
     a62:	8e 0e       	add	r8, r30
     a64:	91 1c       	adc	r9, r1
	uint8_t dB_send_data_match = 0;
	
	while(!B_avg_send_data_match){
		B_avg_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
     a66:	5c 2c       	mov	r5, r12
     a68:	dd ae       	std	Y+61, r13	; 0x3d
			B_avg_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
			if(B_avg_send[iter]!=B_avg_receive[iter]){
				B_avg_send_data_match = 0;
     a6a:	41 2c       	mov	r4, r1
     a6c:	24 c0       	rjmp	.+72     	; 0xab6 <detumbling+0x2aa>
	
	while(!B_avg_send_data_match){
		B_avg_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(B_avg_send[iter]);
     a6e:	f8 01       	movw	r30, r16
     a70:	81 91       	ld	r24, Z+
     a72:	8f 01       	movw	r16, r30
     a74:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
	uint8_t dB_send_data_match = 0;
	
	while(!B_avg_send_data_match){
		B_avg_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
     a78:	0c 15       	cp	r16, r12
     a7a:	1d 05       	cpc	r17, r13
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <detumbling+0x262>
     a7e:	56 01       	movw	r10, r12
     a80:	05 2d       	mov	r16, r5
     a82:	1d ad       	ldd	r17, Y+61	; 0x3d
			transmit_UART0(B_avg_send[iter]);
		}
		
		for (int iter=0; iter<9; iter++){
			B_avg_receive[iter] = receive_UART0();
     a84:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
     a88:	f8 01       	movw	r30, r16
     a8a:	81 93       	st	Z+, r24
     a8c:	8f 01       	movw	r16, r30
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(B_avg_send[iter]);
		}
		
		for (int iter=0; iter<9; iter++){
     a8e:	e8 15       	cp	r30, r8
     a90:	f9 05       	cpc	r31, r9
     a92:	c1 f7       	brne	.-16     	; 0xa84 <detumbling+0x278>
     a94:	11 e0       	ldi	r17, 0x01	; 1
			B_avg_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
			if(B_avg_send[iter]!=B_avg_receive[iter]){
     a96:	f7 01       	movw	r30, r14
     a98:	21 91       	ld	r18, Z+
     a9a:	7f 01       	movw	r14, r30
     a9c:	f5 01       	movw	r30, r10
     a9e:	91 91       	ld	r25, Z+
     aa0:	5f 01       	movw	r10, r30
     aa2:	29 13       	cpse	r18, r25
				B_avg_send_data_match = 0;
     aa4:	14 2d       	mov	r17, r4
		
		for (int iter=0; iter<9; iter++){
			B_avg_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
     aa6:	ce 14       	cp	r12, r14
     aa8:	df 04       	cpc	r13, r15
     aaa:	a9 f7       	brne	.-22     	; 0xa96 <detumbling+0x28a>
			if(B_avg_send[iter]!=B_avg_receive[iter]){
				B_avg_send_data_match = 0;
			}
		}
		transmit_UART0(B_avg_send_data_match);
     aac:	81 2f       	mov	r24, r17
     aae:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
		
		
	uint8_t B_avg_send_data_match = 0;
	uint8_t dB_send_data_match = 0;
	
	while(!B_avg_send_data_match){
     ab2:	11 11       	cpse	r17, r1
     ab4:	2c c0       	rjmp	.+88     	; 0xb0e <detumbling+0x302>
     ab6:	73 01       	movw	r14, r6
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     ab8:	03 2d       	mov	r16, r3
     aba:	12 2d       	mov	r17, r2
     abc:	d8 cf       	rjmp	.-80     	; 0xa6e <detumbling+0x262>
	
	while(!dB_send_data_match){
		dB_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(dB_send[iter]);
     abe:	f8 01       	movw	r30, r16
     ac0:	81 91       	ld	r24, Z+
     ac2:	8f 01       	movw	r16, r30
     ac4:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
	}
	
	while(!dB_send_data_match){
		dB_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
     ac8:	0c 15       	cp	r16, r12
     aca:	1d 05       	cpc	r17, r13
     acc:	c1 f7       	brne	.-16     	; 0xabe <detumbling+0x2b2>
     ace:	56 01       	movw	r10, r12
     ad0:	0d ad       	ldd	r16, Y+61	; 0x3d
     ad2:	1f ad       	ldd	r17, Y+63	; 0x3f
			transmit_UART0(dB_send[iter]);
		}
		
		for (int iter=0; iter<9; iter++){
			dB_receive[iter] = receive_UART0();
     ad4:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
     ad8:	f8 01       	movw	r30, r16
     ada:	81 93       	st	Z+, r24
     adc:	8f 01       	movw	r16, r30
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(dB_send[iter]);
		}
		
		for (int iter=0; iter<9; iter++){
     ade:	e8 15       	cp	r30, r8
     ae0:	f9 05       	cpc	r31, r9
     ae2:	c1 f7       	brne	.-16     	; 0xad4 <detumbling+0x2c8>
     ae4:	11 e0       	ldi	r17, 0x01	; 1
			dB_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
			if(dB_send[iter]!=dB_receive[iter]){
     ae6:	f7 01       	movw	r30, r14
     ae8:	91 91       	ld	r25, Z+
     aea:	7f 01       	movw	r14, r30
     aec:	f5 01       	movw	r30, r10
     aee:	81 91       	ld	r24, Z+
     af0:	5f 01       	movw	r10, r30
     af2:	98 13       	cpse	r25, r24
				dB_send_data_match = 0;
     af4:	14 2d       	mov	r17, r4
		
		for (int iter=0; iter<9; iter++){
			dB_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
     af6:	ce 14       	cp	r12, r14
     af8:	df 04       	cpc	r13, r15
     afa:	a9 f7       	brne	.-22     	; 0xae6 <detumbling+0x2da>
			if(dB_send[iter]!=dB_receive[iter]){
				dB_send_data_match = 0;
			}
		}
		transmit_UART0(B_avg_send_data_match);
     afc:	85 2d       	mov	r24, r5
     afe:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
			}
		}
		transmit_UART0(B_avg_send_data_match);
	}
	
	while(!dB_send_data_match){
     b02:	11 11       	cpse	r17, r1
     b04:	17 c0       	rjmp	.+46     	; 0xb34 <detumbling+0x328>
     b06:	73 01       	movw	r14, r6
     b08:	03 2d       	mov	r16, r3
     b0a:	12 2d       	mov	r17, r2
     b0c:	d8 cf       	rjmp	.-80     	; 0xabe <detumbling+0x2b2>
     b0e:	51 2e       	mov	r5, r17
     b10:	3e 01       	movw	r6, r28
     b12:	fb e2       	ldi	r31, 0x2B	; 43
     b14:	6f 0e       	add	r6, r31
     b16:	71 1c       	adc	r7, r1
     b18:	6e 01       	movw	r12, r28
     b1a:	84 e3       	ldi	r24, 0x34	; 52
     b1c:	c8 0e       	add	r12, r24
     b1e:	d1 1c       	adc	r13, r1
     b20:	36 2c       	mov	r3, r6
     b22:	27 2c       	mov	r2, r7
     b24:	4e 01       	movw	r8, r28
     b26:	9d e3       	ldi	r25, 0x3D	; 61
     b28:	89 0e       	add	r8, r25
     b2a:	91 1c       	adc	r9, r1
		dB_send_data_match = 1;
		
		for(int iter=0; iter<9; iter++){
     b2c:	cd ae       	std	Y+61, r12	; 0x3d
     b2e:	df ae       	std	Y+63, r13	; 0x3f
			dB_receive[iter] = receive_UART0();
		}
		
		for (int iter=0; iter<9; iter++){
			if(dB_send[iter]!=dB_receive[iter]){
				dB_send_data_match = 0;
     b30:	41 2c       	mov	r4, r1
     b32:	e9 cf       	rjmp	.-46     	; 0xb06 <detumbling+0x2fa>
			}
		}
		transmit_UART0(dB_send_data_match);
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <vector_norm>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	9f eb       	ldi	r25, 0xBF	; 191
     b48:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     b4c:	6b 01       	movw	r12, r22
     b4e:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	6d 85       	ldd	r22, Y+13	; 0x0d
     b56:	7e 85       	ldd	r23, Y+14	; 0x0e
     b58:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5a:	98 89       	ldd	r25, Y+16	; 0x10
     b5c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     b60:	23 96       	adiw	r28, 0x03	; 3
     b62:	ee ad       	ldd	r30, Y+62	; 0x3e
     b64:	ff ad       	ldd	r31, Y+63	; 0x3f
     b66:	23 97       	sbiw	r28, 0x03	; 3
     b68:	60 83       	st	Z, r22
     b6a:	71 83       	std	Z+1, r23	; 0x01
     b6c:	82 83       	std	Z+2, r24	; 0x02
     b6e:	93 83       	std	Z+3, r25	; 0x03
     b70:	a7 01       	movw	r20, r14
     b72:	96 01       	movw	r18, r12
     b74:	69 89       	ldd	r22, Y+17	; 0x11
     b76:	7a 89       	ldd	r23, Y+18	; 0x12
     b78:	8b 89       	ldd	r24, Y+19	; 0x13
     b7a:	9c 89       	ldd	r25, Y+20	; 0x14
     b7c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     b80:	23 96       	adiw	r28, 0x03	; 3
     b82:	ee ad       	ldd	r30, Y+62	; 0x3e
     b84:	ff ad       	ldd	r31, Y+63	; 0x3f
     b86:	23 97       	sbiw	r28, 0x03	; 3
     b88:	64 83       	std	Z+4, r22	; 0x04
     b8a:	75 83       	std	Z+5, r23	; 0x05
     b8c:	86 83       	std	Z+6, r24	; 0x06
     b8e:	97 83       	std	Z+7, r25	; 0x07
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	6d 89       	ldd	r22, Y+21	; 0x15
     b96:	7e 89       	ldd	r23, Y+22	; 0x16
     b98:	8f 89       	ldd	r24, Y+23	; 0x17
     b9a:	98 8d       	ldd	r25, Y+24	; 0x18
     b9c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     ba0:	23 96       	adiw	r28, 0x03	; 3
     ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba6:	23 97       	sbiw	r28, 0x03	; 3
     ba8:	60 87       	std	Z+8, r22	; 0x08
     baa:	71 87       	std	Z+9, r23	; 0x09
     bac:	82 87       	std	Z+10, r24	; 0x0a
     bae:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     bb0:	62 e9       	ldi	r22, 0x92	; 146
     bb2:	71 e0       	ldi	r23, 0x01	; 1
     bb4:	8b ee       	ldi	r24, 0xEB	; 235
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <copy_vector>
	
}
     bbc:	ce 5b       	subi	r28, 0xBE	; 190
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	6f 90       	pop	r6
     be6:	5f 90       	pop	r5
     be8:	4f 90       	pop	r4
     bea:	3f 90       	pop	r3
     bec:	2f 90       	pop	r2
     bee:	08 95       	ret

00000bf0 <nominal>:
 

void nominal(vector v_m_N)
{
     bf0:	2f 92       	push	r2
     bf2:	3f 92       	push	r3
     bf4:	4f 92       	push	r4
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	e9 97       	sbiw	r28, 0x39	; 57
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	9d ab       	std	Y+53, r25	; 0x35
     c26:	8c ab       	std	Y+52, r24	; 0x34
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     c28:	60 91 01 05 	lds	r22, 0x0501	; 0x800501 <Current_state+0x56>
     c2c:	70 91 02 05 	lds	r23, 0x0502	; 0x800502 <Current_state+0x57>
     c30:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Current_state+0x58>
     c34:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <Current_state+0x59>
     c38:	0b ee       	ldi	r16, 0xEB	; 235
     c3a:	11 e0       	ldi	r17, 0x01	; 1
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e4       	ldi	r19, 0x40	; 64
     c40:	4c e1       	ldi	r20, 0x1C	; 28
     c42:	56 e4       	ldi	r21, 0x46	; 70
     c44:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     c48:	f8 01       	movw	r30, r16
     c4a:	60 87       	std	Z+8, r22	; 0x08
     c4c:	71 87       	std	Z+9, r23	; 0x09
     c4e:	82 87       	std	Z+10, r24	; 0x0a
     c50:	93 87       	std	Z+11, r25	; 0x0b
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     c52:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <Current_state+0x5a>
     c56:	70 91 06 05 	lds	r23, 0x0506	; 0x800506 <Current_state+0x5b>
     c5a:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <Current_state+0x5c>
     c5e:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <Current_state+0x5d>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e4       	ldi	r19, 0x40	; 64
     c66:	4c e1       	ldi	r20, 0x1C	; 28
     c68:	56 e4       	ldi	r21, 0x46	; 70
     c6a:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	b0 58       	subi	r27, 0x80	; 128
     c74:	f8 01       	movw	r30, r16
     c76:	84 83       	std	Z+4, r24	; 0x04
     c78:	95 83       	std	Z+5, r25	; 0x05
     c7a:	a6 83       	std	Z+6, r26	; 0x06
     c7c:	b7 83       	std	Z+7, r27	; 0x07
	     v_B[0] = Current_state.mm.B_z/10000;
     c7e:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <Current_state+0x5e>
     c82:	70 91 0a 05 	lds	r23, 0x050A	; 0x80050a <Current_state+0x5f>
     c86:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <Current_state+0x60>
     c8a:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <Current_state+0x61>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e4       	ldi	r19, 0x40	; 64
     c92:	4c e1       	ldi	r20, 0x1C	; 28
     c94:	56 e4       	ldi	r21, 0x46	; 70
     c96:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     c9a:	f8 01       	movw	r30, r16
     c9c:	60 83       	st	Z, r22
     c9e:	71 83       	std	Z+1, r23	; 0x01
     ca0:	82 83       	std	Z+2, r24	; 0x02
     ca2:	93 83       	std	Z+3, r25	; 0x03
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <vector_norm>
     caa:	6f 87       	std	Y+15, r22	; 0x0f
     cac:	78 8b       	std	Y+16, r23	; 0x10
     cae:	89 8b       	std	Y+17, r24	; 0x11
     cb0:	9a 8b       	std	Y+18, r25	; 0x12
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     cb2:	40 90 80 04 	lds	r4, 0x0480	; 0x800480 <q_o+0xc>
     cb6:	50 90 81 04 	lds	r5, 0x0481	; 0x800481 <q_o+0xd>
     cba:	60 90 82 04 	lds	r6, 0x0482	; 0x800482 <q_o+0xe>
     cbe:	70 90 83 04 	lds	r7, 0x0483	; 0x800483 <q_o+0xf>
     cc2:	0f 2e       	mov	r0, r31
     cc4:	f4 e7       	ldi	r31, 0x74	; 116
     cc6:	ef 2e       	mov	r14, r31
     cc8:	f4 e0       	ldi	r31, 0x04	; 4
     cca:	ff 2e       	mov	r15, r31
     ccc:	f0 2d       	mov	r31, r0
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	4c 01       	movw	r8, r24
     cd4:	0f 2e       	mov	r0, r31
     cd6:	f3 ed       	ldi	r31, 0xD3	; 211
     cd8:	2f 2e       	mov	r2, r31
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	3f 2e       	mov	r3, r31
     cde:	f0 2d       	mov	r31, r0
     ce0:	0f 2e       	mov	r0, r31
     ce2:	f0 e8       	ldi	r31, 0x80	; 128
     ce4:	af 2e       	mov	r10, r31
     ce6:	f4 e0       	ldi	r31, 0x04	; 4
     ce8:	bf 2e       	mov	r11, r31
     cea:	f0 2d       	mov	r31, r0
     cec:	81 01       	movw	r16, r2
     cee:	6c 01       	movw	r12, r24
     cf0:	f7 01       	movw	r30, r14
     cf2:	61 91       	ld	r22, Z+
     cf4:	71 91       	ld	r23, Z+
     cf6:	81 91       	ld	r24, Z+
     cf8:	91 91       	ld	r25, Z+
     cfa:	7f 01       	movw	r14, r30
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     d04:	a3 01       	movw	r20, r6
     d06:	92 01       	movw	r18, r4
     d08:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     d0c:	f6 01       	movw	r30, r12
     d0e:	61 93       	st	Z+, r22
     d10:	71 93       	st	Z+, r23
     d12:	81 93       	st	Z+, r24
     d14:	91 93       	st	Z+, r25
     d16:	6f 01       	movw	r12, r30
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	f8 01       	movw	r30, r16
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     d32:	f8 01       	movw	r30, r16
     d34:	61 93       	st	Z+, r22
     d36:	71 93       	st	Z+, r23
     d38:	81 93       	st	Z+, r24
     d3a:	91 93       	st	Z+, r25
     d3c:	8f 01       	movw	r16, r30
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     d3e:	ea 14       	cp	r14, r10
     d40:	fb 04       	cpc	r15, r11
     d42:	b1 f6       	brne	.-84     	; 0xcf0 <nominal+0x100>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     d44:	2f 85       	ldd	r18, Y+15	; 0x0f
     d46:	38 89       	ldd	r19, Y+16	; 0x10
     d48:	49 89       	ldd	r20, Y+17	; 0x11
     d4a:	5a 89       	ldd	r21, Y+18	; 0x12
     d4c:	ca 01       	movw	r24, r20
     d4e:	b9 01       	movw	r22, r18
     d50:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     d54:	6c a7       	std	Y+44, r22	; 0x2c
     d56:	7d a7       	std	Y+45, r23	; 0x2d
     d58:	8e a7       	std	Y+46, r24	; 0x2e
     d5a:	9f a7       	std	Y+47, r25	; 0x2f
     d5c:	8e e9       	ldi	r24, 0x9E	; 158
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9f a3       	std	Y+39, r25	; 0x27
     d62:	8e a3       	std	Y+38, r24	; 0x26
     d64:	c1 2c       	mov	r12, r1
     d66:	d1 2c       	mov	r13, r1
     d68:	fe 01       	movw	r30, r28
     d6a:	3d 96       	adiw	r30, 0x0d	; 13
     d6c:	fe 87       	std	Y+14, r31	; 0x0e
     d6e:	ed 87       	std	Y+13, r30	; 0x0d
     d70:	28 aa       	std	Y+48, r2	; 0x30
     d72:	39 aa       	std	Y+49, r3	; 0x31
     d74:	8a aa       	std	Y+50, r8	; 0x32
     d76:	9b aa       	std	Y+51, r9	; 0x33
     d78:	86 01       	movw	r16, r12
     d7a:	ce a0       	ldd	r12, Y+38	; 0x26
     d7c:	df a0       	ldd	r13, Y+39	; 0x27
     d7e:	d9 a6       	std	Y+41, r13	; 0x29
     d80:	c8 a6       	std	Y+40, r12	; 0x28
     d82:	c8 01       	movw	r24, r16
     d84:	82 59       	subi	r24, 0x92	; 146
     d86:	9e 4f       	sbci	r25, 0xFE	; 254
     d88:	9d 8b       	std	Y+21, r25	; 0x15
     d8a:	8c 8b       	std	Y+20, r24	; 0x14
     d8c:	f8 01       	movw	r30, r16
     d8e:	e6 5b       	subi	r30, 0xB6	; 182
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	ff 8b       	std	Y+23, r31	; 0x17
     d94:	ee 8b       	std	Y+22, r30	; 0x16
     d96:	8f ed       	ldi	r24, 0xDF	; 223
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	99 8f       	std	Y+25, r25	; 0x19
     d9c:	88 8f       	std	Y+24, r24	; 0x18
     d9e:	f8 01       	movw	r30, r16
     da0:	ea 5d       	subi	r30, 0xDA	; 218
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	fb 8f       	std	Y+27, r31	; 0x1b
     da6:	ea 8f       	std	Y+26, r30	; 0x1a
     da8:	c8 a8       	ldd	r12, Y+48	; 0x30
     daa:	d9 a8       	ldd	r13, Y+49	; 0x31
     dac:	ea a8       	ldd	r14, Y+50	; 0x32
     dae:	fb a8       	ldd	r15, Y+51	; 0x33
     db0:	1f 86       	std	Y+15, r1	; 0x0f
     db2:	1b 8a       	std	Y+19, r1	; 0x13
     db4:	31 2c       	mov	r3, r1
     db6:	21 2c       	mov	r2, r1
     db8:	1b a7       	std	Y+43, r17	; 0x2b
     dba:	0a a7       	std	Y+42, r16	; 0x2a
     dbc:	87 01       	movw	r16, r14
     dbe:	dd 8e       	std	Y+29, r13	; 0x1d
     dc0:	cc 8e       	std	Y+28, r12	; 0x1c
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     dc2:	f8 01       	movw	r30, r16
     dc4:	61 91       	ld	r22, Z+
     dc6:	71 91       	ld	r23, Z+
     dc8:	81 91       	ld	r24, Z+
     dca:	91 91       	ld	r25, Z+
     dcc:	8f 01       	movw	r16, r30
     dce:	ec 89       	ldd	r30, Y+20	; 0x14
     dd0:	fd 89       	ldd	r31, Y+21	; 0x15
     dd2:	21 91       	ld	r18, Z+
     dd4:	31 91       	ld	r19, Z+
     dd6:	41 91       	ld	r20, Z+
     dd8:	51 91       	ld	r21, Z+
     dda:	fd 8b       	std	Y+21, r31	; 0x15
     ddc:	ec 8b       	std	Y+20, r30	; 0x14
     dde:	ec 8d       	ldd	r30, Y+28	; 0x1c
     de0:	fd 8d       	ldd	r31, Y+29	; 0x1d
     de2:	81 90       	ld	r8, Z+
     de4:	91 90       	ld	r9, Z+
     de6:	a1 90       	ld	r10, Z+
     de8:	b1 90       	ld	r11, Z+
     dea:	fd 8f       	std	Y+29, r31	; 0x1d
     dec:	ec 8f       	std	Y+28, r30	; 0x1c
     dee:	ee 89       	ldd	r30, Y+22	; 0x16
     df0:	ff 89       	ldd	r31, Y+23	; 0x17
     df2:	41 90       	ld	r4, Z+
     df4:	51 90       	ld	r5, Z+
     df6:	61 90       	ld	r6, Z+
     df8:	71 90       	ld	r7, Z+
     dfa:	ff 8b       	std	Y+23, r31	; 0x17
     dfc:	ee 8b       	std	Y+22, r30	; 0x16
     dfe:	e8 8d       	ldd	r30, Y+24	; 0x18
     e00:	f9 8d       	ldd	r31, Y+25	; 0x19
     e02:	c1 90       	ld	r12, Z+
     e04:	d1 90       	ld	r13, Z+
     e06:	e1 90       	ld	r14, Z+
     e08:	f1 90       	ld	r15, Z+
     e0a:	f9 8f       	std	Y+25, r31	; 0x19
     e0c:	e8 8f       	std	Y+24, r30	; 0x18
     e0e:	ce aa       	std	Y+54, r12	; 0x36
     e10:	df aa       	std	Y+55, r13	; 0x37
     e12:	e8 ae       	std	Y+56, r14	; 0x38
     e14:	f9 ae       	std	Y+57, r15	; 0x39
     e16:	ea 8d       	ldd	r30, Y+26	; 0x1a
     e18:	fb 8d       	ldd	r31, Y+27	; 0x1b
     e1a:	c1 90       	ld	r12, Z+
     e1c:	d1 90       	ld	r13, Z+
     e1e:	e1 90       	ld	r14, Z+
     e20:	f1 90       	ld	r15, Z+
     e22:	fb 8f       	std	Y+27, r31	; 0x1b
     e24:	ea 8f       	std	Y+26, r30	; 0x1a
     e26:	ce 8e       	std	Y+30, r12	; 0x1e
     e28:	df 8e       	std	Y+31, r13	; 0x1f
     e2a:	e8 a2       	std	Y+32, r14	; 0x20
     e2c:	f9 a2       	std	Y+33, r15	; 0x21
     e2e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	a3 01       	movw	r20, r6
     e38:	92 01       	movw	r18, r4
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c7 01       	movw	r24, r14
     e48:	b6 01       	movw	r22, r12
     e4a:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     e4e:	4b 01       	movw	r8, r22
     e50:	5c 01       	movw	r10, r24
     e52:	2e 8d       	ldd	r18, Y+30	; 0x1e
     e54:	3f 8d       	ldd	r19, Y+31	; 0x1f
     e56:	48 a1       	ldd	r20, Y+32	; 0x20
     e58:	59 a1       	ldd	r21, Y+33	; 0x21
     e5a:	6e a9       	ldd	r22, Y+54	; 0x36
     e5c:	7f a9       	ldd	r23, Y+55	; 0x37
     e5e:	88 ad       	ldd	r24, Y+56	; 0x38
     e60:	99 ad       	ldd	r25, Y+57	; 0x39
     e62:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c5 01       	movw	r24, r10
     e6c:	b4 01       	movw	r22, r8
     e6e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     e72:	9b 01       	movw	r18, r22
     e74:	ac 01       	movw	r20, r24
     e76:	6f 85       	ldd	r22, Y+15	; 0x0f
     e78:	7b 89       	ldd	r23, Y+19	; 0x13
     e7a:	83 2d       	mov	r24, r3
     e7c:	92 2d       	mov	r25, r2
     e7e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
     e82:	6f 87       	std	Y+15, r22	; 0x0f
     e84:	7b 8b       	std	Y+19, r23	; 0x13
     e86:	38 2e       	mov	r3, r24
     e88:	29 2e       	mov	r2, r25
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     e8a:	cd 84       	ldd	r12, Y+13	; 0x0d
     e8c:	de 84       	ldd	r13, Y+14	; 0x0e
     e8e:	0c 15       	cp	r16, r12
     e90:	1d 05       	cpc	r17, r13
     e92:	09 f0       	breq	.+2      	; 0xe96 <nominal+0x2a6>
     e94:	96 cf       	rjmp	.-212    	; 0xdc2 <nominal+0x1d2>
     e96:	0a a5       	ldd	r16, Y+42	; 0x2a
     e98:	1b a5       	ldd	r17, Y+43	; 0x2b
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     e9a:	2c a5       	ldd	r18, Y+44	; 0x2c
     e9c:	3d a5       	ldd	r19, Y+45	; 0x2d
     e9e:	4e a5       	ldd	r20, Y+46	; 0x2e
     ea0:	5f a5       	ldd	r21, Y+47	; 0x2f
     ea2:	92 2d       	mov	r25, r2
     ea4:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     ea8:	e8 a5       	ldd	r30, Y+40	; 0x28
     eaa:	f9 a5       	ldd	r31, Y+41	; 0x29
     eac:	60 83       	st	Z, r22
     eae:	71 83       	std	Z+1, r23	; 0x01
     eb0:	82 83       	std	Z+2, r24	; 0x02
     eb2:	93 83       	std	Z+3, r25	; 0x03
     eb4:	8e a1       	ldd	r24, Y+38	; 0x26
     eb6:	9f a1       	ldd	r25, Y+39	; 0x27
     eb8:	04 96       	adiw	r24, 0x04	; 4
     eba:	9f a3       	std	Y+39, r25	; 0x27
     ebc:	8e a3       	std	Y+38, r24	; 0x26
     ebe:	04 5f       	subi	r16, 0xF4	; 244
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     ec2:	04 32       	cpi	r16, 0x24	; 36
     ec4:	11 05       	cpc	r17, r1
     ec6:	09 f0       	breq	.+2      	; 0xeca <nominal+0x2da>
     ec8:	58 cf       	rjmp	.-336    	; 0xd7a <nominal+0x18a>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     eca:	4c a9       	ldd	r20, Y+52	; 0x34
     ecc:	5d a9       	ldd	r21, Y+53	; 0x35
     ece:	6b ee       	ldi	r22, 0xEB	; 235
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	8e e9       	ldi	r24, 0x9E	; 158
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     eda:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <light>
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 b2 34 	call	0x6964	; 0x6964 <__floatunsisf>
     ee8:	ab 01       	movw	r20, r22
     eea:	bc 01       	movw	r22, r24
     eec:	8c a9       	ldd	r24, Y+52	; 0x34
     eee:	9d a9       	ldd	r25, Y+53	; 0x35
     ef0:	0e 94 5d 22 	call	0x44ba	; 0x44ba <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     ef4:	e9 96       	adiw	r28, 0x39	; 57
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
     f1a:	6f 90       	pop	r6
     f1c:	5f 90       	pop	r5
     f1e:	4f 90       	pop	r4
     f20:	3f 90       	pop	r3
     f22:	2f 90       	pop	r2
     f24:	08 95       	ret

00000f26 <apply_torque>:

void apply_torque(vector v_m)
{
     f26:	2f 92       	push	r2
     f28:	3f 92       	push	r3
     f2a:	4f 92       	push	r4
     f2c:	5f 92       	push	r5
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	64 97       	sbiw	r28, 0x14	; 20
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	1c 01       	movw	r2, r24
     f5c:	8c 01       	movw	r16, r24
     f5e:	6c 01       	movw	r12, r24
     f60:	8c e0       	ldi	r24, 0x0C	; 12
     f62:	c8 0e       	add	r12, r24
     f64:	d1 1c       	adc	r13, r1
     f66:	71 01       	movw	r14, r2
     f68:	fc 8a       	std	Y+20, r15	; 0x14
     f6a:	eb 8a       	std	Y+19, r14	; 0x13
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     f6c:	d7 01       	movw	r26, r14
     f6e:	4d 90       	ld	r4, X+
     f70:	5d 90       	ld	r5, X+
     f72:	6d 90       	ld	r6, X+
     f74:	7c 90       	ld	r7, X
     f76:	53 01       	movw	r10, r6
     f78:	42 01       	movw	r8, r4
     f7a:	e8 94       	clt
     f7c:	b7 f8       	bld	r11, 7
     f7e:	23 e3       	ldi	r18, 0x33	; 51
     f80:	33 e3       	ldi	r19, 0x33	; 51
     f82:	43 e7       	ldi	r20, 0x73	; 115
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	c5 01       	movw	r24, r10
     f88:	b4 01       	movw	r22, r8
     f8a:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
     f8e:	18 16       	cp	r1, r24
     f90:	14 f5       	brge	.+68     	; 0xfd6 <apply_torque+0xb0>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     f92:	a3 01       	movw	r20, r6
     f94:	92 01       	movw	r18, r4
     f96:	c5 01       	movw	r24, r10
     f98:	b4 01       	movw	r22, r8
     f9a:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f eb       	ldi	r21, 0xBF	; 191
     fa6:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
     faa:	81 11       	cpse	r24, r1
     fac:	0a c0       	rjmp	.+20     	; 0xfc2 <apply_torque+0x9c>
			v_m[i] = -1*M_MAX;
     fae:	83 e3       	ldi	r24, 0x33	; 51
     fb0:	93 e3       	ldi	r25, 0x33	; 51
     fb2:	a3 e7       	ldi	r26, 0x73	; 115
     fb4:	bf eb       	ldi	r27, 0xBF	; 191
     fb6:	f7 01       	movw	r30, r14
     fb8:	80 83       	st	Z, r24
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	a2 83       	std	Z+2, r26	; 0x02
     fbe:	b3 83       	std	Z+3, r27	; 0x03
     fc0:	0a c0       	rjmp	.+20     	; 0xfd6 <apply_torque+0xb0>
			else
			v_m[i] = M_MAX;
     fc2:	83 e3       	ldi	r24, 0x33	; 51
     fc4:	93 e3       	ldi	r25, 0x33	; 51
     fc6:	a3 e7       	ldi	r26, 0x73	; 115
     fc8:	bf e3       	ldi	r27, 0x3F	; 63
     fca:	eb 89       	ldd	r30, Y+19	; 0x13
     fcc:	fc 89       	ldd	r31, Y+20	; 0x14
     fce:	80 83       	st	Z, r24
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	a2 83       	std	Z+2, r26	; 0x02
     fd4:	b3 83       	std	Z+3, r27	; 0x03
     fd6:	f4 e0       	ldi	r31, 0x04	; 4
     fd8:	ef 0e       	add	r14, r31
     fda:	f1 1c       	adc	r15, r1
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     fdc:	ec 14       	cp	r14, r12
     fde:	fd 04       	cpc	r15, r13
     fe0:	19 f6       	brne	.-122    	; 0xf68 <apply_torque+0x42>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     fe2:	45 ed       	ldi	r20, 0xD5	; 213
     fe4:	5f e0       	ldi	r21, 0x0F	; 15
     fe6:	61 ec       	ldi	r22, 0xC1	; 193
     fe8:	7e e3       	ldi	r23, 0x3E	; 62
     fea:	c1 01       	movw	r24, r2
     fec:	0e 94 5d 22 	call	0x44ba	; 0x44ba <scalar_into_vector>
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     ff0:	d8 01       	movw	r26, r16
     ff2:	4d 90       	ld	r4, X+
     ff4:	5d 90       	ld	r5, X+
     ff6:	6d 90       	ld	r6, X+
     ff8:	7c 90       	ld	r7, X
     ffa:	53 01       	movw	r10, r6
     ffc:	42 01       	movw	r8, r4
     ffe:	e8 94       	clt
    1000:	b7 f8       	bld	r11, 7
    1002:	28 ea       	ldi	r18, 0xA8	; 168
    1004:	36 ec       	ldi	r19, 0xC6	; 198
    1006:	4b e8       	ldi	r20, 0x8B	; 139
    1008:	5e e3       	ldi	r21, 0x3E	; 62
    100a:	c5 01       	movw	r24, r10
    100c:	b4 01       	movw	r22, r8
    100e:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    1012:	18 16       	cp	r1, r24
    1014:	0c f5       	brge	.+66     	; 0x1058 <apply_torque+0x132>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
    1016:	a3 01       	movw	r20, r6
    1018:	92 01       	movw	r18, r4
    101a:	c5 01       	movw	r24, r10
    101c:	b4 01       	movw	r22, r8
    101e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f eb       	ldi	r21, 0xBF	; 191
    102a:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    102e:	81 11       	cpse	r24, r1
    1030:	0a c0       	rjmp	.+20     	; 0x1046 <apply_torque+0x120>
			v_m[i] = -1*I_MAX;
    1032:	88 ea       	ldi	r24, 0xA8	; 168
    1034:	96 ec       	ldi	r25, 0xC6	; 198
    1036:	ab e8       	ldi	r26, 0x8B	; 139
    1038:	be eb       	ldi	r27, 0xBE	; 190
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	a2 83       	std	Z+2, r26	; 0x02
    1042:	b3 83       	std	Z+3, r27	; 0x03
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <apply_torque+0x132>
			else
			v_m[i] = I_MAX;
    1046:	88 ea       	ldi	r24, 0xA8	; 168
    1048:	96 ec       	ldi	r25, 0xC6	; 198
    104a:	ab e8       	ldi	r26, 0x8B	; 139
    104c:	be e3       	ldi	r27, 0x3E	; 62
    104e:	f8 01       	movw	r30, r16
    1050:	80 83       	st	Z, r24
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	a2 83       	std	Z+2, r26	; 0x02
    1056:	b3 83       	std	Z+3, r27	; 0x03
    1058:	0c 5f       	subi	r16, 0xFC	; 252
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
    105c:	c0 16       	cp	r12, r16
    105e:	d1 06       	cpc	r13, r17
    1060:	39 f6       	brne	.-114    	; 0xff0 <apply_torque+0xca>
	//transmit_UART0(sen);
	//sen = gps_power;
	//transmit_UART0(sen);
	//Anant Changes-
	uint16_t i_mag[3];
	if (v_m[0] > 0) //v_m is calculated current
    1062:	d1 01       	movw	r26, r2
    1064:	cd 90       	ld	r12, X+
    1066:	dd 90       	ld	r13, X+
    1068:	ed 90       	ld	r14, X+
    106a:	fc 90       	ld	r15, X
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	c7 01       	movw	r24, r14
    1074:	b6 01       	movw	r22, r12
    1076:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    107a:	18 16       	cp	r1, r24
    107c:	d4 f4       	brge	.+52     	; 0x10b2 <apply_torque+0x18c>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	c7 01       	movw	r24, r14
    1088:	b6 01       	movw	r22, r12
    108a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    108e:	28 ea       	ldi	r18, 0xA8	; 168
    1090:	36 ec       	ldi	r19, 0xC6	; 198
    1092:	4b e8       	ldi	r20, 0x8B	; 139
    1094:	5e e3       	ldi	r21, 0x3E	; 62
    1096:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    109a:	9f 77       	andi	r25, 0x7F	; 127
    109c:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    10a0:	e4 e1       	ldi	r30, 0x14	; 20
    10a2:	f5 e0       	ldi	r31, 0x05	; 5
    10a4:	71 83       	std	Z+1, r23	; 0x01
    10a6:	60 83       	st	Z, r22
		Current_state.pwm.x_dir = 0;
    10a8:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
		i_mag[0] = Current_state.pwm.x;
    10ac:	e0 80       	ld	r14, Z
    10ae:	f1 80       	ldd	r15, Z+1	; 0x01
    10b0:	33 c0       	rjmp	.+102    	; 0x1118 <__stack+0x19>
	}
	else
	{
		Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
    10b2:	28 ea       	ldi	r18, 0xA8	; 168
    10b4:	36 ec       	ldi	r19, 0xC6	; 198
    10b6:	4b e8       	ldi	r20, 0x8B	; 139
    10b8:	5e e3       	ldi	r21, 0x3E	; 62
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5f e3       	ldi	r21, 0x3F	; 63
    10ca:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    10da:	9f 77       	andi	r25, 0x7F	; 127
    10dc:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    10e0:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <Current_state+0x6a>
    10e4:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <Current_state+0x69>
		Current_state.pwm.x_dir = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <Current_state+0x6f>
		i_mag[0] = fabs((v_m[0] * PWM_RES) / I_MAX);
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	f1 01       	movw	r30, r2
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    1104:	28 ea       	ldi	r18, 0xA8	; 168
    1106:	36 ec       	ldi	r19, 0xC6	; 198
    1108:	4b e8       	ldi	r20, 0x8B	; 139
    110a:	5e e3       	ldi	r21, 0x3E	; 62
    110c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1110:	9f 77       	andi	r25, 0x7F	; 127
    1112:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    1116:	7b 01       	movw	r14, r22
	}
	if (v_m[1] > 0)
    1118:	d1 01       	movw	r26, r2
    111a:	14 96       	adiw	r26, 0x04	; 4
    111c:	8d 90       	ld	r8, X+
    111e:	9d 90       	ld	r9, X+
    1120:	ad 90       	ld	r10, X+
    1122:	bc 90       	ld	r11, X
    1124:	17 97       	sbiw	r26, 0x07	; 7
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	74 f5       	brge	.+92     	; 0x1194 <__stack+0x95>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    1148:	28 ea       	ldi	r18, 0xA8	; 168
    114a:	36 ec       	ldi	r19, 0xC6	; 198
    114c:	4b e8       	ldi	r20, 0x8B	; 139
    114e:	5e e3       	ldi	r21, 0x3E	; 62
    1150:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1154:	9f 77       	andi	r25, 0x7F	; 127
    1156:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    115a:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <Current_state+0x6c>
    115e:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <Current_state+0x6b>
		Current_state.pwm.y_dir = 0;
    1162:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
		i_mag[1] = fabs((v_m[1] * PWM_RES) / I_MAX);
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	f1 01       	movw	r30, r2
    1170:	64 81       	ldd	r22, Z+4	; 0x04
    1172:	75 81       	ldd	r23, Z+5	; 0x05
    1174:	86 81       	ldd	r24, Z+6	; 0x06
    1176:	97 81       	ldd	r25, Z+7	; 0x07
    1178:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    117c:	28 ea       	ldi	r18, 0xA8	; 168
    117e:	36 ec       	ldi	r19, 0xC6	; 198
    1180:	4b e8       	ldi	r20, 0x8B	; 139
    1182:	5e e3       	ldi	r21, 0x3E	; 62
    1184:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1188:	9f 77       	andi	r25, 0x7F	; 127
    118a:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    118e:	c6 2e       	mov	r12, r22
    1190:	d7 2e       	mov	r13, r23
    1192:	36 c0       	rjmp	.+108    	; 0x1200 <__stack+0x101>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
    1194:	28 ea       	ldi	r18, 0xA8	; 168
    1196:	36 ec       	ldi	r19, 0xC6	; 198
    1198:	4b e8       	ldi	r20, 0x8B	; 139
    119a:	5e e3       	ldi	r21, 0x3E	; 62
    119c:	c5 01       	movw	r24, r10
    119e:	b4 01       	movw	r22, r8
    11a0:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    11bc:	9f 77       	andi	r25, 0x7F	; 127
    11be:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    11c2:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <Current_state+0x6c>
    11c6:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <Current_state+0x6b>
		Current_state.pwm.y_dir = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Current_state+0x70>
		i_mag[1] = fabs((v_m[1] * PWM_RES) / I_MAX);
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f e7       	ldi	r20, 0x7F	; 127
    11d6:	57 e4       	ldi	r21, 0x47	; 71
    11d8:	d1 01       	movw	r26, r2
    11da:	14 96       	adiw	r26, 0x04	; 4
    11dc:	6d 91       	ld	r22, X+
    11de:	7d 91       	ld	r23, X+
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	17 97       	sbiw	r26, 0x07	; 7
    11e6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    11ea:	28 ea       	ldi	r18, 0xA8	; 168
    11ec:	36 ec       	ldi	r19, 0xC6	; 198
    11ee:	4b e8       	ldi	r20, 0x8B	; 139
    11f0:	5e e3       	ldi	r21, 0x3E	; 62
    11f2:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    11f6:	9f 77       	andi	r25, 0x7F	; 127
    11f8:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    11fc:	c6 2e       	mov	r12, r22
    11fe:	d7 2e       	mov	r13, r23
	}
	if (v_m[2] > 0)
    1200:	f1 01       	movw	r30, r2
    1202:	80 84       	ldd	r8, Z+8	; 0x08
    1204:	91 84       	ldd	r9, Z+9	; 0x09
    1206:	a2 84       	ldd	r10, Z+10	; 0x0a
    1208:	b3 84       	ldd	r11, Z+11	; 0x0b
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	c5 01       	movw	r24, r10
    1212:	b4 01       	movw	r22, r8
    1214:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    1218:	18 16       	cp	r1, r24
    121a:	84 f5       	brge	.+96     	; 0x127c <__stack+0x17d>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	4f e7       	ldi	r20, 0x7F	; 127
    1222:	57 e4       	ldi	r21, 0x47	; 71
    1224:	c5 01       	movw	r24, r10
    1226:	b4 01       	movw	r22, r8
    1228:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    122c:	28 ea       	ldi	r18, 0xA8	; 168
    122e:	36 ec       	ldi	r19, 0xC6	; 198
    1230:	4b e8       	ldi	r20, 0x8B	; 139
    1232:	5e e3       	ldi	r21, 0x3E	; 62
    1234:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1238:	9f 77       	andi	r25, 0x7F	; 127
    123a:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    123e:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <Current_state+0x6e>
    1242:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <Current_state+0x6d>
		Current_state.pwm.z_dir = 0;
    1246:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Current_state+0x71>
		i_mag[2] = fabs((v_m[2] * PWM_RES) / I_MAX);
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	d1 01       	movw	r26, r2
    1254:	18 96       	adiw	r26, 0x08	; 8
    1256:	6d 91       	ld	r22, X+
    1258:	7d 91       	ld	r23, X+
    125a:	8d 91       	ld	r24, X+
    125c:	9c 91       	ld	r25, X
    125e:	1b 97       	sbiw	r26, 0x0b	; 11
    1260:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    1264:	28 ea       	ldi	r18, 0xA8	; 168
    1266:	36 ec       	ldi	r19, 0xC6	; 198
    1268:	4b e8       	ldi	r20, 0x8B	; 139
    126a:	5e e3       	ldi	r21, 0x3E	; 62
    126c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1270:	9f 77       	andi	r25, 0x7F	; 127
    1272:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    1276:	06 2f       	mov	r16, r22
    1278:	17 2f       	mov	r17, r23
    127a:	34 c0       	rjmp	.+104    	; 0x12e4 <__stack+0x1e5>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
    127c:	28 ea       	ldi	r18, 0xA8	; 168
    127e:	36 ec       	ldi	r19, 0xC6	; 198
    1280:	4b e8       	ldi	r20, 0x8B	; 139
    1282:	5e e3       	ldi	r21, 0x3E	; 62
    1284:	c5 01       	movw	r24, r10
    1286:	b4 01       	movw	r22, r8
    1288:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	4f e7       	ldi	r20, 0x7F	; 127
    129e:	57 e4       	ldi	r21, 0x47	; 71
    12a0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    12a4:	9f 77       	andi	r25, 0x7F	; 127
    12a6:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    12aa:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <Current_state+0x6e>
    12ae:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <Current_state+0x6d>
		Current_state.pwm.z_dir = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Current_state+0x71>
		i_mag[2] = fabs((v_m[2] * PWM_RES) / I_MAX);
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	f1 01       	movw	r30, r2
    12c2:	60 85       	ldd	r22, Z+8	; 0x08
    12c4:	71 85       	ldd	r23, Z+9	; 0x09
    12c6:	82 85       	ldd	r24, Z+10	; 0x0a
    12c8:	93 85       	ldd	r25, Z+11	; 0x0b
    12ca:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    12ce:	28 ea       	ldi	r18, 0xA8	; 168
    12d0:	36 ec       	ldi	r19, 0xC6	; 198
    12d2:	4b e8       	ldi	r20, 0x8B	; 139
    12d4:	5e e3       	ldi	r21, 0x3E	; 62
    12d6:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    12da:	9f 77       	andi	r25, 0x7F	; 127
    12dc:	0e 94 86 34 	call	0x690c	; 0x690c <__fixunssfsi>
    12e0:	06 2f       	mov	r16, r22
    12e2:	17 2f       	mov	r17, r23
	}
 
	//Anant Changes
	init_UART0();
    12e4:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <init_UART0>
	uint8_t current_data_matched = 0;
	uint8_t i_data[9], i_data_matched[9];
	i_data[0] = Current_state.pwm.x_dir;
    12e8:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
    12ec:	89 83       	std	Y+1, r24	; 0x01
	i_data[1] = (uint8_t)i_mag[0];
    12ee:	ea 82       	std	Y+2, r14	; 0x02
	i_data[2] = (uint8_t)(i_mag[0]>>8);
    12f0:	fb 82       	std	Y+3, r15	; 0x03
	i_data[3] = Current_state.pwm.y_dir;
    12f2:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
    12f6:	8c 83       	std	Y+4, r24	; 0x04
	i_data[4] = (uint8_t)(i_mag[1]);
    12f8:	cd 82       	std	Y+5, r12	; 0x05
	i_data[5] = (uint8_t)(i_mag[1]>>8);
    12fa:	de 82       	std	Y+6, r13	; 0x06
	i_data[6] = Current_state.pwm.z_dir;
    12fc:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Current_state+0x71>
    1300:	8f 83       	std	Y+7, r24	; 0x07
	i_data[7] = (uint8_t)(i_mag[2]);
    1302:	08 87       	std	Y+8, r16	; 0x08
	i_data[8] = (uint8_t)(i_mag[2]>>8);
    1304:	19 87       	std	Y+9, r17	; 0x09
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	3c 01       	movw	r6, r24
    130c:	4e 01       	movw	r8, r28
    130e:	9a e0       	ldi	r25, 0x0A	; 10
    1310:	89 0e       	add	r8, r25
    1312:	91 1c       	adc	r9, r1
   }*/
   
}

void apply_torque(vector v_m)
{
    1314:	46 2c       	mov	r4, r6
    1316:	37 2c       	mov	r3, r7
    1318:	5e 01       	movw	r10, r28
    131a:	a3 e1       	ldi	r26, 0x13	; 19
    131c:	aa 0e       	add	r10, r26
    131e:	b1 1c       	adc	r11, r1
	
	while(!current_data_matched){
		
		current_data_matched = 1;
		
		for(int iter=0; iter<9; iter++){
    1320:	8b 8a       	std	Y+19, r8	; 0x13
    1322:	29 2c       	mov	r2, r9
			i_data_matched[iter] = receive_UART0();
		}
		
		for(int iter=0; iter<9; iter++){
			if(i_data_matched[iter]!=i_data[iter]){
				current_data_matched = 0;
    1324:	51 2c       	mov	r5, r1
    1326:	24 c0       	rjmp	.+72     	; 0x1370 <__stack+0x271>
	while(!current_data_matched){
		
		current_data_matched = 1;
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(i_data[iter]);
    1328:	f8 01       	movw	r30, r16
    132a:	81 91       	ld	r24, Z+
    132c:	8f 01       	movw	r16, r30
    132e:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
	
	while(!current_data_matched){
		
		current_data_matched = 1;
		
		for(int iter=0; iter<9; iter++){
    1332:	08 15       	cp	r16, r8
    1334:	19 05       	cpc	r17, r9
    1336:	c1 f7       	brne	.-16     	; 0x1328 <__stack+0x229>
    1338:	74 01       	movw	r14, r8
    133a:	0b 89       	ldd	r16, Y+19	; 0x13
    133c:	12 2d       	mov	r17, r2
			transmit_UART0(i_data[iter]);
		}
		
		for(int iter=0; iter<9; iter++){
			i_data_matched[iter] = receive_UART0();
    133e:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    1342:	d8 01       	movw	r26, r16
    1344:	8d 93       	st	X+, r24
    1346:	8d 01       	movw	r16, r26
		
		for(int iter=0; iter<9; iter++){
			transmit_UART0(i_data[iter]);
		}
		
		for(int iter=0; iter<9; iter++){
    1348:	aa 15       	cp	r26, r10
    134a:	bb 05       	cpc	r27, r11
    134c:	c1 f7       	brne	.-16     	; 0x133e <__stack+0x23f>
    134e:	11 e0       	ldi	r17, 0x01	; 1
			i_data_matched[iter] = receive_UART0();
		}
		
		for(int iter=0; iter<9; iter++){
			if(i_data_matched[iter]!=i_data[iter]){
    1350:	f7 01       	movw	r30, r14
    1352:	91 91       	ld	r25, Z+
    1354:	7f 01       	movw	r14, r30
    1356:	d6 01       	movw	r26, r12
    1358:	8d 91       	ld	r24, X+
    135a:	6d 01       	movw	r12, r26
    135c:	98 13       	cpse	r25, r24
				current_data_matched = 0;
    135e:	15 2d       	mov	r17, r5
		
		for(int iter=0; iter<9; iter++){
			i_data_matched[iter] = receive_UART0();
		}
		
		for(int iter=0; iter<9; iter++){
    1360:	ea 14       	cp	r14, r10
    1362:	fb 04       	cpc	r15, r11
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__stack+0x251>
			if(i_data_matched[iter]!=i_data[iter]){
				current_data_matched = 0;
			}
		}
		
		transmit_UART0(current_data_matched);
    1366:	81 2f       	mov	r24, r17
    1368:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
	i_data[5] = (uint8_t)(i_mag[1]>>8);
	i_data[6] = Current_state.pwm.z_dir;
	i_data[7] = (uint8_t)(i_mag[2]);
	i_data[8] = (uint8_t)(i_mag[2]>>8);
	
	while(!current_data_matched){
    136c:	11 11       	cpse	r17, r1
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <__stack+0x279>
    1370:	63 01       	movw	r12, r6
   }*/
   
}

void apply_torque(vector v_m)
{
    1372:	04 2d       	mov	r16, r4
    1374:	13 2d       	mov	r17, r3
    1376:	d8 cf       	rjmp	.-80     	; 0x1328 <__stack+0x229>
	*/
	//Anant Changes-
	
	
 
PORTA=0xA0;
    1378:	80 ea       	ldi	r24, 0xA0	; 160
    137a:	8b bb       	out	0x1b, r24	; 27
}
    137c:	64 96       	adiw	r28, 0x14	; 20
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	7f 90       	pop	r7
    13a2:	6f 90       	pop	r6
    13a4:	5f 90       	pop	r5
    13a6:	4f 90       	pop	r4
    13a8:	3f 90       	pop	r3
    13aa:	2f 90       	pop	r2
    13ac:	08 95       	ret

000013ae <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	e0 97       	sbiw	r28, 0x30	; 48
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    13da:	0e 94 75 23 	call	0x46ea	; 0x46ea <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13de:	8f ec       	ldi	r24, 0xCF	; 207
    13e0:	97 e0       	ldi	r25, 0x07	; 7
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <control+0x34>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <control+0x3a>
    13e8:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    13ea:	0e 94 18 23 	call	0x4630	; 0x4630 <read_MM>
  init_UART0();
    13ee:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <init_UART0>
  // write apply torquer function here
   if(Mode == DETUMBLING){
    13f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	39 f4       	brne	.+14     	; 0x1408 <control+0x5a>
   apply_torque(v_m_D); //only currents output
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	93 dd       	rcall	.-1242   	; 0xf26 <apply_torque>
   uint8_t d_flag = 4;
   transmit_UART0(d_flag);
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <control+0x6a>
   }
   else if(Mode == NOMINAL){
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	31 f4       	brne	.+12     	; 0x1418 <control+0x6a>
   apply_torque(v_m_N);
    140c:	ce 01       	movw	r24, r28
    140e:	0d 96       	adiw	r24, 0x0d	; 13
    1410:	8a dd       	rcall	.-1260   	; 0xf26 <apply_torque>
   uint8_t n_flag = 14;
   transmit_UART0(n_flag);
    1412:	8e e0       	ldi	r24, 0x0E	; 14
    1414:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
   }
   
  set_PWM();
    1418:	0e 94 44 23 	call	0x4688	; 0x4688 <set_PWM>
    141c:	8f e1       	ldi	r24, 0x1F	; 31
    141e:	9e e4       	ldi	r25, 0x4E	; 78
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <control+0x72>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <control+0x78>
    1426:	00 00       	nop
  
  _delay_ms(10);
  detumbling(v_m_D); //dB and B_avg output
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	ef d9       	rcall	.-3106   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    142e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
    1432:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
    1436:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
    143a:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
    143e:	eb ee       	ldi	r30, 0xEB	; 235
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	80 87       	std	Z+8, r24	; 0x08
    1444:	91 87       	std	Z+9, r25	; 0x09
    1446:	a2 87       	std	Z+10, r26	; 0x0a
    1448:	b3 87       	std	Z+11, r27	; 0x0b
  v_B[1] = Current_state.mm.B_y;
    144a:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
    144e:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
    1452:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
    1456:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
    145a:	84 83       	std	Z+4, r24	; 0x04
    145c:	95 83       	std	Z+5, r25	; 0x05
    145e:	a6 83       	std	Z+6, r26	; 0x06
    1460:	b7 83       	std	Z+7, r27	; 0x07
  v_B[0] = Current_state.mm.B_z;
    1462:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
    1466:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
    146a:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
    146e:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
    1472:	80 83       	st	Z, r24
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	a2 83       	std	Z+2, r26	; 0x02
    1478:	b3 83       	std	Z+3, r27	; 0x03
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2)){
    147a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    147e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gps_power+0x1>
    1482:	02 97       	sbiw	r24, 0x02	; 2
    1484:	c1 f4       	brne	.+48     	; 0x14b6 <control+0x108>
    1486:	9f e7       	ldi	r25, 0x7F	; 127
    1488:	e8 e3       	ldi	r30, 0x38	; 56
    148a:	11 e0       	ldi	r17, 0x01	; 1
    148c:	91 50       	subi	r25, 0x01	; 1
    148e:	e0 40       	sbci	r30, 0x00	; 0
    1490:	10 40       	sbci	r17, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <control+0xde>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <control+0xe8>
    1496:	00 00       	nop
			_delay_ms(50);
			uint8_t q= 90;
			//Anant Changes
			init_UART0(); //may not work
    1498:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <init_UART0>
			//Anant Changes-
			transmit_UART0(q);
    149c:	8a e5       	ldi	r24, 0x5A	; 90
    149e:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
			read_GPS();
    14a2:	0e 94 13 23 	call	0x4626	; 0x4626 <read_GPS>
			//while(UCSR0B & _BV(RXCIE0));
			//Anant Changes
			while(Current_state.gps.anant_flag==0){
    14a6:	eb ea       	ldi	r30, 0xAB	; 171
    14a8:	f4 e0       	ldi	r31, 0x04	; 4
    14aa:	80 8d       	ldd	r24, Z+24	; 0x18
    14ac:	88 23       	and	r24, r24
    14ae:	e9 f3       	breq	.-6      	; 0x14aa <control+0xfc>
				continue;
			}
			Current_state.gps.anant_flag==1;	
    14b0:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Current_state+0x18>
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <control+0x124>
    14b6:	2f e7       	ldi	r18, 0x7F	; 127
    14b8:	88 e3       	ldi	r24, 0x38	; 56
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	80 40       	sbci	r24, 0x00	; 0
    14c0:	90 40       	sbci	r25, 0x00	; 0
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <control+0x10e>
    14c4:	00 c0       	rjmp	.+0      	; 0x14c6 <control+0x118>
    14c6:	00 00       	nop
		}
		//Anant Changes
		else{
			_delay_ms(50);
			uint8_t q= 91;
			init_UART0();
    14c8:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <init_UART0>
			transmit_UART0(q);
    14cc:	8b e5       	ldi	r24, 0x5B	; 91
    14ce:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    14d2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <control+0x132>
      copy_gps_reading();  //check if gps is on but pdop data
    14da:	0e 94 89 23 	call	0x4712	; 0x4712 <copy_gps_reading>
    14de:	61 c0       	rjmp	.+194    	; 0x15a2 <control+0x1f4>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    14e0:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    14e4:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    14e8:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    14ec:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    14f0:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    14f4:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    14f8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    14fc:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    1500:	a2 e0       	ldi	r26, 0x02	; 2
    1502:	0e 94 72 38 	call	0x70e4	; 0x70e4 <__adddi3_s8>
    1506:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    150a:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    150e:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    1512:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    1516:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    151a:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    151e:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    1522:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
	  seconds_since_pivot += FRAME_TIME;
    1526:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    152a:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    152e:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    1532:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    1536:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    153a:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    153e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    1542:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    1546:	0e 94 72 38 	call	0x70e4	; 0x70e4 <__adddi3_s8>
    154a:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    154e:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1552:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    1556:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    155a:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    155e:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1562:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    1566:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	 /////////////////////////////////////////
	 Current_state.gps.seconds += FRAME_TIME;
    156a:	eb ea       	ldi	r30, 0xAB	; 171
    156c:	f4 e0       	ldi	r31, 0x04	; 4
    156e:	87 a1       	ldd	r24, Z+39	; 0x27
    1570:	8e 5f       	subi	r24, 0xFE	; 254
    1572:	87 a3       	std	Z+39, r24	; 0x27
	 if(Current_state.gps.seconds > 58)
    1574:	87 a1       	ldd	r24, Z+39	; 0x27
    1576:	8b 33       	cpi	r24, 0x3B	; 59
    1578:	20 f0       	brcs	.+8      	; 0x1582 <control+0x1d4>
	 {
		 Current_state.gps.seconds = 0;
    157a:	17 a2       	std	Z+39, r1	; 0x27
		 Current_state.gps.minutes += 1;
    157c:	86 a1       	ldd	r24, Z+38	; 0x26
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	86 a3       	std	Z+38, r24	; 0x26
		 
	 }
	 if (Current_state.gps.minutes > 59)
    1582:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Current_state+0x26>
    1586:	8c 33       	cpi	r24, 0x3C	; 60
    1588:	30 f0       	brcs	.+12     	; 0x1596 <control+0x1e8>
	 {
		 Current_state.gps.minutes = 0;
    158a:	eb ea       	ldi	r30, 0xAB	; 171
    158c:	f4 e0       	ldi	r31, 0x04	; 4
    158e:	16 a2       	std	Z+38, r1	; 0x26
		 Current_state.gps.hours += 1;
    1590:	85 a1       	ldd	r24, Z+37	; 0x25
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	85 a3       	std	Z+37, r24	; 0x25
	 }
	 if (Current_state.gps.hours > 23)
    1596:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <Current_state+0x25>
    159a:	88 31       	cpi	r24, 0x18	; 24
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <control+0x1f4>
	 {
		 Current_state.gps.hours = 0;
    159e:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <Current_state+0x25>
    15a2:	ef e7       	ldi	r30, 0x7F	; 127
    15a4:	18 e3       	ldi	r17, 0x38	; 56
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	e1 50       	subi	r30, 0x01	; 1
    15aa:	10 40       	sbci	r17, 0x00	; 0
    15ac:	20 40       	sbci	r18, 0x00	; 0
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <control+0x1fa>
    15b0:	00 c0       	rjmp	.+0      	; 0x15b2 <control+0x204>
    15b2:	00 00       	nop
	 /////////////////////////////////////////
	  }

	_delay_ms(50);  
    uint8_t e=100;
    transmit_UART0(e);
    15b4:	84 e6       	ldi	r24, 0x64	; 100
    15b6:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
    read_SS();
    15ba:	0e 94 15 23 	call	0x462a	; 0x462a <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    15be:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <light_cal>
    15c2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
	if(GPS_done != 255)
    15c6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <control+0x222>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <control+0x2a8>
	{
		
    sgp_orbit_propagator();
    15d0:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    15d4:	ce 01       	movw	r24, r28
    15d6:	49 96       	adiw	r24, 0x19	; 25
    15d8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    15dc:	ce 01       	movw	r24, r28
    15de:	85 96       	adiw	r24, 0x25	; 37
    15e0:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    15e4:	21 ed       	ldi	r18, 0xD1	; 209
    15e6:	31 e0       	ldi	r19, 0x01	; 1
    15e8:	44 e7       	ldi	r20, 0x74	; 116
    15ea:	54 e0       	ldi	r21, 0x04	; 4
    15ec:	be 01       	movw	r22, r28
    15ee:	67 5e       	subi	r22, 0xE7	; 231
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	ce 01       	movw	r24, r28
    15f4:	85 96       	adiw	r24, 0x25	; 37
    15f6:	0e 94 6f 27 	call	0x4ede	; 0x4ede <quest>
    15fa:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
    
    omega_estimation(q_o, v_w);
    15fe:	6f ed       	ldi	r22, 0xDF	; 223
    1600:	71 e0       	ldi	r23, 0x01	; 1
    1602:	84 e7       	ldi	r24, 0x74	; 116
    1604:	94 e0       	ldi	r25, 0x04	; 4
    1606:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    160a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    160e:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <w_ctrl>
    1612:	86 9f       	mul	r24, r22
    1614:	b0 01       	movw	r22, r0
    1616:	11 24       	eor	r1, r1
    1618:	07 2e       	mov	r0, r23
    161a:	00 0c       	add	r0, r0
    161c:	88 0b       	sbc	r24, r24
    161e:	99 0b       	sbc	r25, r25
    1620:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    1624:	ab 01       	movw	r20, r22
    1626:	bc 01       	movw	r22, r24
    1628:	8f ed       	ldi	r24, 0xDF	; 223
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 5d 22 	call	0x44ba	; 0x44ba <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    1630:	8f ed       	ldi	r24, 0xDF	; 223
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <vector_norm>
    1638:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <mod_w>
    163c:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <mod_w+0x1>
    1640:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <mod_w+0x2>
    1644:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <mod_w+0x3>
    convert_unit_quaternion(q_o);
    1648:	84 e7       	ldi	r24, 0x74	; 116
    164a:	94 e0       	ldi	r25, 0x04	; 4
    164c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    1650:	ce 01       	movw	r24, r28
    1652:	0d 96       	adiw	r24, 0x0d	; 13
    1654:	cd da       	rcall	.-2662   	; 0xbf0 <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    1656:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    165a:	88 37       	cpi	r24, 0x78	; 120
    165c:	dc f4       	brge	.+54     	; 0x1694 <control+0x2e6>
    165e:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <Time>
    1662:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <Time+0x1>
    1666:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <Time+0x2>
    166a:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <Time+0x3>
    166e:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <Time+0x4>
    1672:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <Time+0x5>
    1676:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <Time+0x6>
    167a:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <Time+0x7>
    167e:	20 32       	cpi	r18, 0x20	; 32
    1680:	31 4a       	sbci	r19, 0xA1	; 161
    1682:	47 40       	sbci	r20, 0x07	; 7
    1684:	51 05       	cpc	r21, r1
    1686:	61 05       	cpc	r22, r1
    1688:	71 05       	cpc	r23, r1
    168a:	81 05       	cpc	r24, r1
    168c:	91 05       	cpc	r25, r1
    168e:	09 f0       	breq	.+2      	; 0x1692 <control+0x2e4>
    1690:	08 f4       	brcc	.+2      	; 0x1694 <control+0x2e6>
    1692:	6b c0       	rjmp	.+214    	; 0x176a <control+0x3bc>
		{    avg_md_new = 0;
    1694:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    1698:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    169c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    16a0:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
			star_flag = 121;                 // 91
    16a4:	89 e7       	ldi	r24, 0x79	; 121
    16a6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
			if (light ==1)
    16aa:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	21 f5       	brne	.+72     	; 0x16fa <control+0x34c>
			{
				time_l = time_l +2;
    16b2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <time_l>
    16b6:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <time_l+0x1>
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <time_l+0x1>
    16c0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <time_l>
				time_e =0;
    16c4:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <time_e+0x1>
    16c8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <time_e>
				start_time = time_l % 720;   //690
    16cc:	60 ed       	ldi	r22, 0xD0	; 208
    16ce:	72 e0       	ldi	r23, 0x02	; 2
    16d0:	0e 94 25 38 	call	0x704a	; 0x704a <__divmodhi4>
    16d4:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <start_time+0x1>
    16d8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <start_time>
				if (start_time <600)       //600
    16dc:	88 35       	cpi	r24, 0x58	; 88
    16de:	92 40       	sbci	r25, 0x02	; 2
    16e0:	2c f4       	brge	.+10     	; 0x16ec <control+0x33e>
				{
					gps_power =0;          // 0 
    16e2:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    16e6:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    16ea:	2c c1       	rjmp	.+600    	; 0x1944 <control+0x596>
				}
				else
				{
					gps_power =2;
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    16f4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    16f8:	25 c1       	rjmp	.+586    	; 0x1944 <control+0x596>
				}
			}
			else
			{
				start_time =0;
    16fa:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <start_time+0x1>
    16fe:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <start_time>
				time_e = time_e +2;
    1702:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <time_e>
    1706:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <time_e+0x1>
    170a:	6e 5f       	subi	r22, 0xFE	; 254
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <time_e+0x1>
    1712:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <time_e>
				if (time_e > (eclipse_time-150))
    1716:	07 2e       	mov	r0, r23
    1718:	00 0c       	add	r0, r0
    171a:	88 0b       	sbc	r24, r24
    171c:	99 0b       	sbc	r25, r25
    171e:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    1722:	6b 01       	movw	r12, r22
    1724:	7c 01       	movw	r14, r24
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	46 e1       	ldi	r20, 0x16	; 22
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <eclipse_time>
    1732:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <eclipse_time+0x1>
    1736:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <eclipse_time+0x2>
    173a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <eclipse_time+0x3>
    173e:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    1742:	9b 01       	movw	r18, r22
    1744:	ac 01       	movw	r20, r24
    1746:	c7 01       	movw	r24, r14
    1748:	b6 01       	movw	r22, r12
    174a:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    174e:	18 16       	cp	r1, r24
    1750:	3c f4       	brge	.+14     	; 0x1760 <control+0x3b2>
				{
					gps_power =2;
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    175a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    175e:	f2 c0       	rjmp	.+484    	; 0x1944 <control+0x596>
				}
				else
				{
					gps_power =0;
    1760:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    1764:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    1768:	ed c0       	rjmp	.+474    	; 0x1944 <control+0x596>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <vector_norm>
    1772:	6b 01       	movw	r12, r22
    1774:	7c 01       	movw	r14, r24
    1776:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <norm_m_d>
    177a:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <norm_m_d+0x1>
    177e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <norm_m_d+0x2>
    1782:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <norm_m_d+0x3>
			md_start = norm_m_d * light;
    1786:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    178a:	68 2f       	mov	r22, r24
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	c7 01       	movw	r24, r14
    179c:	b6 01       	movw	r22, r12
    179e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    17a2:	6b 01       	movw	r12, r22
    17a4:	7c 01       	movw	r14, r24
    17a6:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <md_start>
    17aa:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <md_start+0x1>
    17ae:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <md_start+0x2>
    17b2:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <md_start+0x3>
			if (md_start != 0)
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <control+0x418>
    17c4:	62 c0       	rjmp	.+196    	; 0x188a <control+0x4dc>
			{
				if (num==2)
    17c6:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <num>
    17ca:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <num+0x1>
    17ce:	22 e0       	ldi	r18, 0x02	; 2
    17d0:	82 16       	cp	r8, r18
    17d2:	91 04       	cpc	r9, r1
    17d4:	a9 f4       	brne	.+42     	; 0x1800 <control+0x452>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    17d6:	a7 01       	movw	r20, r14
    17d8:	96 01       	movw	r18, r12
    17da:	c7 01       	movw	r24, r14
    17dc:	b6 01       	movw	r22, r12
    17de:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    17ee:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    17f2:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    17f6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    17fa:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
    17fe:	2c c0       	rjmp	.+88     	; 0x1858 <control+0x4aa>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    1800:	b4 01       	movw	r22, r8
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	71 09       	sbc	r23, r1
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 b2 34 	call	0x6964	; 0x6964 <__floatunsisf>
    180e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <avg_md>
    1812:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <avg_md+0x1>
    1816:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <avg_md+0x2>
    181a:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <avg_md+0x3>
    181e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	c7 01       	movw	r24, r14
    1828:	b6 01       	movw	r22, r12
    182a:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    182e:	6b 01       	movw	r12, r22
    1830:	7c 01       	movw	r14, r24
    1832:	b4 01       	movw	r22, r8
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 b2 34 	call	0x6964	; 0x6964 <__floatunsisf>
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	c7 01       	movw	r24, r14
    1842:	b6 01       	movw	r22, r12
    1844:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    1848:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    184c:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    1850:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    1854:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
				}
				num = num +1;
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	88 1a       	sub	r8, r24
    185c:	98 0a       	sbc	r9, r24
    185e:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <num+0x1>
    1862:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <num>
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1866:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <avg_md_new>
    186a:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    186e:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1872:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	c7 01       	movw	r24, r14
    187e:	b6 01       	movw	r22, r12
    1880:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    1884:	81 11       	cpse	r24, r1
    1886:	10 c0       	rjmp	.+32     	; 0x18a8 <control+0x4fa>
    1888:	1a c0       	rjmp	.+52     	; 0x18be <control+0x510>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <num+0x1>
    1892:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <num>
				avg_md_new = 0;
    1896:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    189a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    189e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    18a2:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <control+0x510>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    18a8:	2a e0       	ldi	r18, 0x0A	; 10
    18aa:	37 ed       	ldi	r19, 0xD7	; 215
    18ac:	43 e2       	ldi	r20, 0x23	; 35
    18ae:	5d e3       	ldi	r21, 0x3D	; 61
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	84 f0       	brlt	.+32     	; 0x18dc <control+0x52e>
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <control+0x542>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <avg_md>
    18c8:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <avg_md+0x1>
    18cc:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <avg_md+0x2>
    18d0:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <avg_md+0x3>
    18d4:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    18d8:	88 23       	and	r24, r24
    18da:	51 f0       	breq	.+20     	; 0x18f0 <control+0x542>
			{
				flag_on = flag_on +2;
    18dc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <flag_on>
    18e0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <flag_on+0x1>
    18e4:	02 96       	adiw	r24, 0x02	; 2
    18e6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <flag_on+0x1>
    18ea:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <flag_on>
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <control+0x54a>
			}
			else
			{
				flag_on = 0;
    18f0:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <flag_on+0x1>
    18f4:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <flag_on>
			}
			if (flag_on > gps_start)
    18f8:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <flag_on>
    18fc:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <flag_on+0x1>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 b2 34 	call	0x6964	; 0x6964 <__floatunsisf>
    1908:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    190c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1910:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
    1914:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
    1918:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    191c:	18 16       	cp	r1, r24
    191e:	64 f4       	brge	.+24     	; 0x1938 <control+0x58a>
			{
				gps_power = 2;
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    1928:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
				star_flag = star_flag +2;
    192c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    1930:	8e 5f       	subi	r24, 0xFE	; 254
    1932:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <control+0x596>
			}
			else
			{
				gps_power=0;
    1938:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    193c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
				star_flag = 0;                        
    1940:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <star_flag>
			}
			
		}
  avg_md = avg_md_new;
    1944:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <avg_md_new>
    1948:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    194c:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1950:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    1954:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <avg_md>
    1958:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <avg_md+0x1>
    195c:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <avg_md+0x2>
    1960:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <avg_md+0x3>
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    1964:	c0 90 84 04 	lds	r12, 0x0484	; 0x800484 <mod_w>
    1968:	d0 90 85 04 	lds	r13, 0x0485	; 0x800485 <mod_w+0x1>
    196c:	e0 90 86 04 	lds	r14, 0x0486	; 0x800486 <mod_w+0x2>
    1970:	f0 90 87 04 	lds	r15, 0x0487	; 0x800487 <mod_w+0x3>
    1974:	2f e6       	ldi	r18, 0x6F	; 111
    1976:	32 e1       	ldi	r19, 0x12	; 18
    1978:	43 e8       	ldi	r20, 0x83	; 131
    197a:	5b e3       	ldi	r21, 0x3B	; 59
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    1984:	88 23       	and	r24, r24
    1986:	bc f4       	brge	.+46     	; 0x19b6 <control+0x608>
    1988:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    198c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <w_ctrl>
    1990:	89 9f       	mul	r24, r25
    1992:	c0 01       	movw	r24, r0
    1994:	11 24       	eor	r1, r1
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	71 f4       	brne	.+28     	; 0x19b6 <control+0x608>
   {
	   flag_N = flag_N+1;
    199a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <flag_N>
    199e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <flag_N+0x1>
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <flag_N+0x1>
    19a8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <flag_N>
	   flag_D = 0;
    19ac:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    19b0:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    19b4:	17 c0       	rjmp	.+46     	; 0x19e4 <control+0x636>
   }
   else if (mod_w > TOLW_N2D)
    19b6:	2f e6       	ldi	r18, 0x6F	; 111
    19b8:	32 e1       	ldi	r19, 0x12	; 18
    19ba:	43 e0       	ldi	r20, 0x03	; 3
    19bc:	5c e3       	ldi	r21, 0x3C	; 60
    19be:	c7 01       	movw	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	6c f4       	brge	.+26     	; 0x19e4 <control+0x636>
   {
	   flag_D = flag_D +1;
    19ca:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag_D>
    19ce:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <flag_D+0x1>
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <flag_D+0x1>
    19d8:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <flag_D>
	   flag_N = 0;
    19dc:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    19e0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    19e4:	60 90 1f 05 	lds	r6, 0x051F	; 0x80051f <Time>
    19e8:	70 90 20 05 	lds	r7, 0x0520	; 0x800520 <Time+0x1>
    19ec:	80 90 21 05 	lds	r8, 0x0521	; 0x800521 <Time+0x2>
    19f0:	90 90 22 05 	lds	r9, 0x0522	; 0x800522 <Time+0x3>
    19f4:	b0 91 23 05 	lds	r27, 0x0523	; 0x800523 <Time+0x4>
    19f8:	a0 91 24 05 	lds	r26, 0x0524	; 0x800524 <Time+0x5>
    19fc:	f0 91 25 05 	lds	r31, 0x0525	; 0x800525 <Time+0x6>
    1a00:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <Time+0x7>
    1a04:	26 2d       	mov	r18, r6
    1a06:	37 2d       	mov	r19, r7
    1a08:	48 2d       	mov	r20, r8
    1a0a:	59 2d       	mov	r21, r9
    1a0c:	6b 2f       	mov	r22, r27
    1a0e:	7a 2f       	mov	r23, r26
    1a10:	8f 2f       	mov	r24, r31
    1a12:	9e 2f       	mov	r25, r30
    1a14:	23 3f       	cpi	r18, 0xF3	; 243
    1a16:	31 40       	sbci	r19, 0x01	; 1
    1a18:	41 05       	cpc	r20, r1
    1a1a:	51 05       	cpc	r21, r1
    1a1c:	61 05       	cpc	r22, r1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	81 05       	cpc	r24, r1
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <control+0x67a>
    1a26:	a0 f4       	brcc	.+40     	; 0x1a50 <control+0x6a2>
	{
		Mode = DETUMBLING;
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
		t_now = 0;
    1a2e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <t_now>
    1a32:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <t_now+0x1>
    1a36:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <t_now+0x2>
    1a3a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <t_now+0x3>
    1a3e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <t_now+0x4>
    1a42:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <t_now+0x5>
    1a46:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <t_now+0x6>
    1a4a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <t_now+0x7>
    1a4e:	77 c0       	rjmp	.+238    	; 0x1b3e <control+0x790>
	}
	else
	{
		if (star_flag >0)
    1a50:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    1a54:	18 16       	cp	r1, r24
    1a56:	5c f5       	brge	.+86     	; 0x1aae <control+0x700>
		{
			if (Mode == DETUMBLING)
    1a58:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	39 f5       	brne	.+78     	; 0x1aae <control+0x700>
			{
				if (flag_N > tol_time)
    1a60:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <flag_N>
    1a64:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <flag_N+0x1>
    1a68:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    1a6c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    1a70:	82 17       	cp	r24, r18
    1a72:	93 07       	cpc	r25, r19
    1a74:	c4 f4       	brge	.+48     	; 0x1aa6 <control+0x6f8>
				{
					Mode = NOMINAL;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
					t_now = Time;
    1a7c:	60 92 c5 01 	sts	0x01C5, r6	; 0x8001c5 <t_now>
    1a80:	70 92 c6 01 	sts	0x01C6, r7	; 0x8001c6 <t_now+0x1>
    1a84:	80 92 c7 01 	sts	0x01C7, r8	; 0x8001c7 <t_now+0x2>
    1a88:	90 92 c8 01 	sts	0x01C8, r9	; 0x8001c8 <t_now+0x3>
    1a8c:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <t_now+0x4>
    1a90:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <t_now+0x5>
    1a94:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <t_now+0x6>
    1a98:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <t_now+0x7>
					flag_N = 0;
    1a9c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1aa0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <control+0x700>
				}
				else
				{flag_D = 0;}	
    1aa6:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1aaa:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1aae:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <control+0x70a>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <control+0x790>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    1ab8:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <flag_D>
    1abc:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <flag_D+0x1>
    1ac0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    1ac4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	a4 f5       	brge	.+104    	; 0x1b36 <control+0x788>
    1ace:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <t_now>
    1ad2:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <t_now+0x1>
    1ad6:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <t_now+0x2>
    1ada:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <t_now+0x3>
    1ade:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <t_now+0x4>
    1ae2:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <t_now+0x5>
    1ae6:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <t_now+0x6>
    1aea:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <t_now+0x7>
    1aee:	20 5f       	subi	r18, 0xF0	; 240
    1af0:	38 4d       	sbci	r19, 0xD8	; 216
    1af2:	4f 4f       	sbci	r20, 0xFF	; 255
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	6f 4f       	sbci	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	a2 2e       	mov	r10, r18
    1b00:	b3 2e       	mov	r11, r19
    1b02:	c4 2e       	mov	r12, r20
    1b04:	d5 2e       	mov	r13, r21
    1b06:	e6 2e       	mov	r14, r22
    1b08:	f7 2e       	mov	r15, r23
    1b0a:	08 2f       	mov	r16, r24
    1b0c:	19 2f       	mov	r17, r25
    1b0e:	26 2d       	mov	r18, r6
    1b10:	37 2d       	mov	r19, r7
    1b12:	48 2d       	mov	r20, r8
    1b14:	59 2d       	mov	r21, r9
    1b16:	6b 2f       	mov	r22, r27
    1b18:	7a 2f       	mov	r23, r26
    1b1a:	8f 2f       	mov	r24, r31
    1b1c:	9e 2f       	mov	r25, r30
    1b1e:	0e 94 87 38 	call	0x710e	; 0x710e <__cmpdi2>
    1b22:	49 f0       	breq	.+18     	; 0x1b36 <control+0x788>
    1b24:	40 f0       	brcs	.+16     	; 0x1b36 <control+0x788>
		 {
			 Mode = DETUMBLING;
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
			 flag_D = 0;
    1b2c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1b30:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <control+0x790>
		 }
		 else
		 {
			 flag_N = 0;
    1b36:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1b3a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    1b3e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    1b42:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <Current_state+0x2f>
}
    1b46:	e0 96       	adiw	r28, 0x30	; 48
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	9f 90       	pop	r9
    1b68:	8f 90       	pop	r8
    1b6a:	7f 90       	pop	r7
    1b6c:	6f 90       	pop	r6
    1b6e:	08 95       	ret

00001b70 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	fc 01       	movw	r30, r24
    1b74:	32 97       	sbiw	r30, 0x02	; 2
    1b76:	eb 30       	cpi	r30, 0x0B	; 11
    1b78:	f1 05       	cpc	r31, r1
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <days_in_months+0xe>
    1b7c:	67 c0       	rjmp	.+206    	; 0x1c4c <days_in_months+0xdc>
    1b7e:	ea 5b       	subi	r30, 0xBA	; 186
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	0c 94 38 38 	jmp	0x7070	; 0x7070 <__tablejump2__>
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    1b86:	2f e1       	ldi	r18, 0x1F	; 31
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	08 95       	ret
      break;
    case 3:
      return 59;
    1b98:	2b e3       	ldi	r18, 0x3B	; 59
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	08 95       	ret
      break;
    case 4:
      return 90;
    1baa:	2a e5       	ldi	r18, 0x5A	; 90
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	08 95       	ret
      break;
    case 5:
      return 120;
    1bbc:	28 e7       	ldi	r18, 0x78	; 120
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	08 95       	ret
      break;
    case 6:
      return 151;
    1bce:	27 e9       	ldi	r18, 0x97	; 151
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	08 95       	ret
      break;
    case 7:
      return 181;
    1be0:	25 eb       	ldi	r18, 0xB5	; 181
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	08 95       	ret
      break;
    case 8:
      return 212;
    1bf2:	24 ed       	ldi	r18, 0xD4	; 212
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	08 95       	ret
      break;
    case 9:
      return 243;
    1c04:	23 ef       	ldi	r18, 0xF3	; 243
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	08 95       	ret
      break;
    case 10:
      return 273;
    1c16:	21 e1       	ldi	r18, 0x11	; 17
    1c18:	31 e0       	ldi	r19, 0x01	; 1
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	08 95       	ret
      break;
    case 11:
      return 304;
    1c28:	20 e3       	ldi	r18, 0x30	; 48
    1c2a:	31 e0       	ldi	r19, 0x01	; 1
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	08 95       	ret
      break;
    case 12:
      return 334;
    1c3a:	2e e4       	ldi	r18, 0x4E	; 78
    1c3c:	31 e0       	ldi	r19, 0x01	; 1
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	08 95       	ret
uint64_t days_in_months(uint8_t month)
{
  switch (month)
  {
    case 1:
      return 0;
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    1c5c:	08 95       	ret

00001c5e <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	4f 92       	push	r4
    1c64:	5f 92       	push	r5
    1c66:	6f 92       	push	r6
    1c68:	7f 92       	push	r7
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	65 97       	sbiw	r28, 0x15	; 21
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	2c 01       	movw	r4, r24
    1c94:	86 2f       	mov	r24, r22
    1c96:	49 87       	std	Y+9, r20	; 0x09
    1c98:	62 2e       	mov	r6, r18
    1c9a:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1c9c:	69 df       	rcall	.-302    	; 0x1b70 <days_in_months>
    1c9e:	2a 87       	std	Y+10, r18	; 0x0a
    1ca0:	3b 87       	std	Y+11, r19	; 0x0b
    1ca2:	4c 87       	std	Y+12, r20	; 0x0c
    1ca4:	5d 87       	std	Y+13, r21	; 0x0d
    1ca6:	6e 87       	std	Y+14, r22	; 0x0e
    1ca8:	7f 87       	std	Y+15, r23	; 0x0f
    1caa:	88 8b       	std	Y+16, r24	; 0x10
    1cac:	99 8b       	std	Y+17, r25	; 0x11
    1cae:	2e 2d       	mov	r18, r14
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	20 58       	subi	r18, 0x80	; 128
    1cc0:	3c 45       	sbci	r19, 0x5C	; 92
    1cc2:	44 49       	sbci	r20, 0x94	; 148
    1cc4:	5b 4c       	sbci	r21, 0xCB	; 203
    1cc6:	6e 40       	sbci	r22, 0x0E	; 14
    1cc8:	71 09       	sbc	r23, r1
    1cca:	81 09       	sbc	r24, r1
    1ccc:	91 09       	sbc	r25, r1
    1cce:	82 2e       	mov	r8, r18
    1cd0:	93 2e       	mov	r9, r19
    1cd2:	34 2e       	mov	r3, r20
    1cd4:	75 2e       	mov	r7, r21
    1cd6:	b6 2f       	mov	r27, r22
    1cd8:	a7 2f       	mov	r26, r23
    1cda:	f8 2f       	mov	r31, r24
    1cdc:	e9 2f       	mov	r30, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1cde:	20 2f       	mov	r18, r16
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	04 e0       	ldi	r16, 0x04	; 4
    1cf0:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1cf4:	b1 2c       	mov	r11, r1
    1cf6:	c1 2c       	mov	r12, r1
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	e1 2c       	mov	r14, r1
    1cfc:	f1 2c       	mov	r15, r1
    1cfe:	00 e0       	ldi	r16, 0x00	; 0
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1d06:	02 e0       	ldi	r16, 0x02	; 2
    1d08:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1d0c:	a2 2e       	mov	r10, r18
    1d0e:	b3 2e       	mov	r11, r19
    1d10:	c4 2e       	mov	r12, r20
    1d12:	d5 2e       	mov	r13, r21
    1d14:	e6 2e       	mov	r14, r22
    1d16:	f7 2e       	mov	r15, r23
    1d18:	08 2f       	mov	r16, r24
    1d1a:	19 2f       	mov	r17, r25
    1d1c:	28 2d       	mov	r18, r8
    1d1e:	39 2d       	mov	r19, r9
    1d20:	43 2d       	mov	r20, r3
    1d22:	57 2d       	mov	r21, r7
    1d24:	6b 2f       	mov	r22, r27
    1d26:	7a 2f       	mov	r23, r26
    1d28:	8f 2f       	mov	r24, r31
    1d2a:	9e 2f       	mov	r25, r30
    1d2c:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1d30:	72 2e       	mov	r7, r18
    1d32:	83 2e       	mov	r8, r19
    1d34:	94 2e       	mov	r9, r20
    1d36:	25 2e       	mov	r2, r21
    1d38:	36 2e       	mov	r3, r22
    1d3a:	b7 2f       	mov	r27, r23
    1d3c:	a8 2f       	mov	r26, r24
    1d3e:	f9 2f       	mov	r31, r25
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
    1d40:	26 2d       	mov	r18, r6
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	04 e0       	ldi	r16, 0x04	; 4
    1d52:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1d56:	a6 2c       	mov	r10, r6
    1d58:	b1 2c       	mov	r11, r1
    1d5a:	c1 2c       	mov	r12, r1
    1d5c:	d1 2c       	mov	r13, r1
    1d5e:	e1 2c       	mov	r14, r1
    1d60:	f1 2c       	mov	r15, r1
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1d6a:	a2 2e       	mov	r10, r18
    1d6c:	b3 2e       	mov	r11, r19
    1d6e:	c4 2e       	mov	r12, r20
    1d70:	d5 2e       	mov	r13, r21
    1d72:	e6 2e       	mov	r14, r22
    1d74:	f7 2e       	mov	r15, r23
    1d76:	e8 2f       	mov	r30, r24
    1d78:	19 2f       	mov	r17, r25
    1d7a:	04 e0       	ldi	r16, 0x04	; 4
    1d7c:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1d80:	0e 2f       	mov	r16, r30
    1d82:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1d86:	04 e0       	ldi	r16, 0x04	; 4
    1d88:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1d8c:	a2 2e       	mov	r10, r18
    1d8e:	b3 2e       	mov	r11, r19
    1d90:	c4 2e       	mov	r12, r20
    1d92:	d5 2e       	mov	r13, r21
    1d94:	e6 2e       	mov	r14, r22
    1d96:	f7 2e       	mov	r15, r23
    1d98:	08 2f       	mov	r16, r24
    1d9a:	19 2f       	mov	r17, r25
    1d9c:	27 2d       	mov	r18, r7
    1d9e:	38 2d       	mov	r19, r8
    1da0:	49 2d       	mov	r20, r9
    1da2:	52 2d       	mov	r21, r2
    1da4:	63 2d       	mov	r22, r3
    1da6:	7b 2f       	mov	r23, r27
    1da8:	8a 2f       	mov	r24, r26
    1daa:	9f 2f       	mov	r25, r31
    1dac:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1db0:	22 2e       	mov	r2, r18
    1db2:	33 2e       	mov	r3, r19
    1db4:	4a 8b       	std	Y+18, r20	; 0x12
    1db6:	5b 8b       	std	Y+19, r21	; 0x13
    1db8:	66 2e       	mov	r6, r22
    1dba:	77 2e       	mov	r7, r23
    1dbc:	8c 8b       	std	Y+20, r24	; 0x14
    1dbe:	9d 8b       	std	Y+21, r25	; 0x15
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1dc0:	92 01       	movw	r18, r4
    1dc2:	49 82       	std	Y+1, r4	; 0x01
    1dc4:	3a 83       	std	Y+2, r19	; 0x02
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	03 e0       	ldi	r16, 0x03	; 3
    1dd4:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1dd8:	82 2e       	mov	r8, r18
    1dda:	93 2e       	mov	r9, r19
    1ddc:	44 2e       	mov	r4, r20
    1dde:	55 2e       	mov	r5, r21
    1de0:	b6 2f       	mov	r27, r22
    1de2:	a7 2f       	mov	r26, r23
    1de4:	f8 2f       	mov	r31, r24
    1de6:	e9 2f       	mov	r30, r25
    1de8:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1dec:	a2 2e       	mov	r10, r18
    1dee:	b3 2e       	mov	r11, r19
    1df0:	c4 2e       	mov	r12, r20
    1df2:	d5 2e       	mov	r13, r21
    1df4:	e6 2e       	mov	r14, r22
    1df6:	f7 2e       	mov	r15, r23
    1df8:	08 2f       	mov	r16, r24
    1dfa:	19 2f       	mov	r17, r25
    1dfc:	28 2d       	mov	r18, r8
    1dfe:	39 2d       	mov	r19, r9
    1e00:	44 2d       	mov	r20, r4
    1e02:	55 2d       	mov	r21, r5
    1e04:	6b 2f       	mov	r22, r27
    1e06:	7a 2f       	mov	r23, r26
    1e08:	8f 2f       	mov	r24, r31
    1e0a:	9e 2f       	mov	r25, r30
    1e0c:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1e10:	a9 80       	ldd	r10, Y+1	; 0x01
    1e12:	ba 80       	ldd	r11, Y+2	; 0x02
    1e14:	c1 2c       	mov	r12, r1
    1e16:	d1 2c       	mov	r13, r1
    1e18:	e1 2c       	mov	r14, r1
    1e1a:	f1 2c       	mov	r15, r1
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1e24:	a2 2e       	mov	r10, r18
    1e26:	b3 2e       	mov	r11, r19
    1e28:	c4 2e       	mov	r12, r20
    1e2a:	d5 2e       	mov	r13, r21
    1e2c:	e6 2e       	mov	r14, r22
    1e2e:	f7 2e       	mov	r15, r23
    1e30:	e8 2f       	mov	r30, r24
    1e32:	19 2f       	mov	r17, r25
    1e34:	04 e0       	ldi	r16, 0x04	; 4
    1e36:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1e3a:	0e 2f       	mov	r16, r30
    1e3c:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1e40:	a2 2e       	mov	r10, r18
    1e42:	b3 2e       	mov	r11, r19
    1e44:	c4 2e       	mov	r12, r20
    1e46:	d5 2e       	mov	r13, r21
    1e48:	e6 2e       	mov	r14, r22
    1e4a:	f7 2e       	mov	r15, r23
    1e4c:	e8 2f       	mov	r30, r24
    1e4e:	19 2f       	mov	r17, r25
    1e50:	04 e0       	ldi	r16, 0x04	; 4
    1e52:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1e56:	0e 2f       	mov	r16, r30
    1e58:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1e5c:	a2 2e       	mov	r10, r18
    1e5e:	b3 2e       	mov	r11, r19
    1e60:	c4 2e       	mov	r12, r20
    1e62:	d5 2e       	mov	r13, r21
    1e64:	e6 2e       	mov	r14, r22
    1e66:	f7 2e       	mov	r15, r23
    1e68:	e8 2f       	mov	r30, r24
    1e6a:	19 2f       	mov	r17, r25
    1e6c:	04 e0       	ldi	r16, 0x04	; 4
    1e6e:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1e72:	0e 2f       	mov	r16, r30
    1e74:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1e78:	07 e0       	ldi	r16, 0x07	; 7
    1e7a:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1e7e:	a2 2e       	mov	r10, r18
    1e80:	b3 2e       	mov	r11, r19
    1e82:	c4 2e       	mov	r12, r20
    1e84:	d5 2e       	mov	r13, r21
    1e86:	e6 2e       	mov	r14, r22
    1e88:	f7 2e       	mov	r15, r23
    1e8a:	08 2f       	mov	r16, r24
    1e8c:	19 2f       	mov	r17, r25
    1e8e:	22 2d       	mov	r18, r2
    1e90:	33 2d       	mov	r19, r3
    1e92:	4a 89       	ldd	r20, Y+18	; 0x12
    1e94:	5b 89       	ldd	r21, Y+19	; 0x13
    1e96:	66 2d       	mov	r22, r6
    1e98:	77 2d       	mov	r23, r7
    1e9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e9e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1ea2:	72 2e       	mov	r7, r18
    1ea4:	83 2e       	mov	r8, r19
    1ea6:	94 2e       	mov	r9, r20
    1ea8:	b5 2f       	mov	r27, r21
    1eaa:	66 2e       	mov	r6, r22
    1eac:	57 2e       	mov	r5, r23
    1eae:	f8 2f       	mov	r31, r24
    1eb0:	e9 2f       	mov	r30, r25
    1eb2:	29 85       	ldd	r18, Y+9	; 0x09
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	af ef       	ldi	r26, 0xFF	; 255
    1ec4:	0e 94 72 38 	call	0x70e4	; 0x70e4 <__adddi3_s8>
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eca:	bb 84       	ldd	r11, Y+11	; 0x0b
    1ecc:	cc 84       	ldd	r12, Y+12	; 0x0c
    1ece:	dd 84       	ldd	r13, Y+13	; 0x0d
    1ed0:	ee 84       	ldd	r14, Y+14	; 0x0e
    1ed2:	ff 84       	ldd	r15, Y+15	; 0x0f
    1ed4:	08 89       	ldd	r16, Y+16	; 0x10
    1ed6:	19 89       	ldd	r17, Y+17	; 0x11
    1ed8:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
    1edc:	a2 2e       	mov	r10, r18
    1ede:	b3 2e       	mov	r11, r19
    1ee0:	c4 2e       	mov	r12, r20
    1ee2:	d5 2e       	mov	r13, r21
    1ee4:	e6 2e       	mov	r14, r22
    1ee6:	f7 2e       	mov	r15, r23
    1ee8:	a8 2f       	mov	r26, r24
    1eea:	19 2f       	mov	r17, r25
    1eec:	02 e0       	ldi	r16, 0x02	; 2
    1eee:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1ef2:	0a 2f       	mov	r16, r26
    1ef4:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1ef8:	a2 2e       	mov	r10, r18
    1efa:	b3 2e       	mov	r11, r19
    1efc:	c4 2e       	mov	r12, r20
    1efe:	d5 2e       	mov	r13, r21
    1f00:	e6 2e       	mov	r14, r22
    1f02:	f7 2e       	mov	r15, r23
    1f04:	a8 2f       	mov	r26, r24
    1f06:	19 2f       	mov	r17, r25
    1f08:	04 e0       	ldi	r16, 0x04	; 4
    1f0a:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1f0e:	0a 2f       	mov	r16, r26
    1f10:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1f14:	a2 2e       	mov	r10, r18
    1f16:	b3 2e       	mov	r11, r19
    1f18:	c4 2e       	mov	r12, r20
    1f1a:	d5 2e       	mov	r13, r21
    1f1c:	e6 2e       	mov	r14, r22
    1f1e:	f7 2e       	mov	r15, r23
    1f20:	a8 2f       	mov	r26, r24
    1f22:	19 2f       	mov	r17, r25
    1f24:	04 e0       	ldi	r16, 0x04	; 4
    1f26:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1f2a:	0a 2f       	mov	r16, r26
    1f2c:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1f30:	07 e0       	ldi	r16, 0x07	; 7
    1f32:	0e 94 50 38 	call	0x70a0	; 0x70a0 <__ashldi3>
    1f36:	a2 2e       	mov	r10, r18
    1f38:	b3 2e       	mov	r11, r19
    1f3a:	c4 2e       	mov	r12, r20
    1f3c:	d5 2e       	mov	r13, r21
    1f3e:	e6 2e       	mov	r14, r22
    1f40:	f7 2e       	mov	r15, r23
    1f42:	08 2f       	mov	r16, r24
    1f44:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1f46:	27 2d       	mov	r18, r7
    1f48:	38 2d       	mov	r19, r8
    1f4a:	49 2d       	mov	r20, r9
    1f4c:	5b 2f       	mov	r21, r27
    1f4e:	66 2d       	mov	r22, r6
    1f50:	75 2d       	mov	r23, r5
    1f52:	8f 2f       	mov	r24, r31
    1f54:	9e 2f       	mov	r25, r30
    1f56:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__adddi3>
  return now;
}
    1f5a:	65 96       	adiw	r28, 0x15	; 21
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	bf 90       	pop	r11
    1f78:	af 90       	pop	r10
    1f7a:	9f 90       	pop	r9
    1f7c:	8f 90       	pop	r8
    1f7e:	7f 90       	pop	r7
    1f80:	6f 90       	pop	r6
    1f82:	5f 90       	pop	r5
    1f84:	4f 90       	pop	r4
    1f86:	3f 90       	pop	r3
    1f88:	2f 90       	pop	r2
    1f8a:	08 95       	ret

00001f8c <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1fa0:	e1 2c       	mov	r14, r1
    1fa2:	0e e1       	ldi	r16, 0x1E	; 30
    1fa4:	24 e0       	ldi	r18, 0x04	; 4
    1fa6:	44 e1       	ldi	r20, 0x14	; 20
    1fa8:	63 e0       	ldi	r22, 0x03	; 3
    1faa:	80 ee       	ldi	r24, 0xE0	; 224
    1fac:	97 e0       	ldi	r25, 0x07	; 7
    1fae:	57 de       	rcall	.-850    	; 0x1c5e <get_seconds_since_pivot>
    1fb0:	a2 2e       	mov	r10, r18
    1fb2:	b3 2e       	mov	r11, r19
    1fb4:	c4 2e       	mov	r12, r20
    1fb6:	d5 2e       	mov	r13, r21
    1fb8:	d6 2f       	mov	r29, r22
    1fba:	f7 2e       	mov	r15, r23
    1fbc:	c8 2f       	mov	r28, r24
    1fbe:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1fc0:	eb ea       	ldi	r30, 0xAB	; 171
    1fc2:	f4 e0       	ldi	r31, 0x04	; 4
    1fc4:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fc6:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fc8:	e7 a0       	ldd	r14, Z+39	; 0x27
    1fca:	06 a1       	ldd	r16, Z+38	; 0x26
    1fcc:	25 a1       	ldd	r18, Z+37	; 0x25
    1fce:	40 a5       	ldd	r20, Z+40	; 0x28
    1fd0:	61 a5       	ldd	r22, Z+41	; 0x29
    1fd2:	45 de       	rcall	.-886    	; 0x1c5e <get_seconds_since_pivot>
    1fd4:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    1fd8:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1fdc:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    1fe0:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    1fe4:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    1fe8:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1fec:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    1ff0:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1ff4:	ed 2e       	mov	r14, r29
    1ff6:	0c 2f       	mov	r16, r28
    1ff8:	0e 94 7e 38 	call	0x70fc	; 0x70fc <__subdi3>
    1ffc:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    2000:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    2004:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    2008:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    200c:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    2010:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    2014:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    2018:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	ff 90       	pop	r15
    2026:	ef 90       	pop	r14
    2028:	df 90       	pop	r13
    202a:	cf 90       	pop	r12
    202c:	bf 90       	pop	r11
    202e:	af 90       	pop	r10
    2030:	08 95       	ret

00002032 <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    2032:	4f 92       	push	r4
    2034:	5f 92       	push	r5
    2036:	6f 92       	push	r6
    2038:	7f 92       	push	r7
    203a:	8f 92       	push	r8
    203c:	9f 92       	push	r9
    203e:	af 92       	push	r10
    2040:	bf 92       	push	r11
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	a4 97       	sbiw	r28, 0x24	; 36
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	7c 01       	movw	r14, r24
    2064:	6b 01       	movw	r12, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    2066:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    206a:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    206e:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    2072:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    2076:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    207a:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    207e:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    2082:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    2086:	0e 94 ef 34 	call	0x69de	; 0x69de <__floatundisf>
    208a:	27 eb       	ldi	r18, 0xB7	; 183
    208c:	39 e5       	ldi	r19, 0x59	; 89
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    2096:	2e eb       	ldi	r18, 0xBE	; 190
    2098:	37 ef       	ldi	r19, 0xF7	; 247
    209a:	48 e9       	ldi	r20, 0x98	; 152
    209c:	58 e3       	ldi	r21, 0x38	; 56
    209e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    20a2:	2b 01       	movw	r4, r22
    20a4:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    20a6:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    20aa:	4b 01       	movw	r8, r22
    20ac:	5c 01       	movw	r10, r24
    20ae:	69 83       	std	Y+1, r22	; 0x01
    20b0:	7a 83       	std	Y+2, r23	; 0x02
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	c3 01       	movw	r24, r6
    20b8:	b2 01       	movw	r22, r4
    20ba:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    20be:	6d 83       	std	Y+5, r22	; 0x05
    20c0:	7e 83       	std	Y+6, r23	; 0x06
    20c2:	8f 83       	std	Y+7, r24	; 0x07
    20c4:	98 87       	std	Y+8, r25	; 0x08
    20c6:	19 86       	std	Y+9, r1	; 0x09
    20c8:	1a 86       	std	Y+10, r1	; 0x0a
    20ca:	1b 86       	std	Y+11, r1	; 0x0b
    20cc:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    20ce:	8b 01       	movw	r16, r22
    20d0:	9c 01       	movw	r18, r24
    20d2:	30 58       	subi	r19, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    20d4:	0d 87       	std	Y+13, r16	; 0x0d
    20d6:	1e 87       	std	Y+14, r17	; 0x0e
    20d8:	2f 87       	std	Y+15, r18	; 0x0f
    20da:	38 8b       	std	Y+16, r19	; 0x10
    20dc:	89 8a       	std	Y+17, r8	; 0x11
    20de:	9a 8a       	std	Y+18, r9	; 0x12
    20e0:	ab 8a       	std	Y+19, r10	; 0x13
    20e2:	bc 8a       	std	Y+20, r11	; 0x14
    20e4:	1d 8a       	std	Y+21, r1	; 0x15
    20e6:	1e 8a       	std	Y+22, r1	; 0x16
    20e8:	1f 8a       	std	Y+23, r1	; 0x17
    20ea:	18 8e       	std	Y+24, r1	; 0x18
    20ec:	19 8e       	std	Y+25, r1	; 0x19
    20ee:	1a 8e       	std	Y+26, r1	; 0x1a
    20f0:	1b 8e       	std	Y+27, r1	; 0x1b
    20f2:	1c 8e       	std	Y+28, r1	; 0x1c
    20f4:	1d 8e       	std	Y+29, r1	; 0x1d
    20f6:	1e 8e       	std	Y+30, r1	; 0x1e
    20f8:	1f 8e       	std	Y+31, r1	; 0x1f
    20fa:	18 a2       	std	Y+32, r1	; 0x20
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	ab a3       	std	Y+35, r26	; 0x23
    210a:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    210c:	a6 01       	movw	r20, r12
    210e:	be 01       	movw	r22, r28
    2110:	6f 5f       	subi	r22, 0xFF	; 255
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	c7 01       	movw	r24, r14
    2116:	0e 94 7e 21 	call	0x42fc	; 0x42fc <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    211a:	a4 96       	adiw	r28, 0x24	; 36
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	bf 90       	pop	r11
    2138:	af 90       	pop	r10
    213a:	9f 90       	pop	r9
    213c:	8f 90       	pop	r8
    213e:	7f 90       	pop	r7
    2140:	6f 90       	pop	r6
    2142:	5f 90       	pop	r5
    2144:	4f 90       	pop	r4
    2146:	08 95       	ret

00002148 <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    2148:	4f 92       	push	r4
    214a:	5f 92       	push	r5
    214c:	6f 92       	push	r6
    214e:	7f 92       	push	r7
    2150:	af 92       	push	r10
    2152:	bf 92       	push	r11
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	a4 97       	sbiw	r28, 0x24	; 36
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	8c 01       	movw	r16, r24
    2176:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    2178:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    217c:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    2180:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    2184:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    2188:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    218c:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    2190:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    2194:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    2198:	0e 94 ef 34 	call	0x69de	; 0x69de <__floatundisf>
    219c:	27 eb       	ldi	r18, 0xB7	; 183
    219e:	39 e5       	ldi	r19, 0x59	; 89
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    21a8:	2e eb       	ldi	r18, 0xBE	; 190
    21aa:	37 ef       	ldi	r19, 0xF7	; 247
    21ac:	48 e9       	ldi	r20, 0x98	; 152
    21ae:	58 e3       	ldi	r21, 0x38	; 56
    21b0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    21b4:	2b 01       	movw	r4, r22
    21b6:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    21b8:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    21bc:	6b 01       	movw	r12, r22
    21be:	7c 01       	movw	r14, r24
    21c0:	69 83       	std	Y+1, r22	; 0x01
    21c2:	7a 83       	std	Y+2, r23	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	c3 01       	movw	r24, r6
    21ca:	b2 01       	movw	r22, r4
    21cc:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    21d0:	2b 01       	movw	r4, r22
    21d2:	3c 01       	movw	r6, r24
    21d4:	77 fa       	bst	r7, 7
    21d6:	70 94       	com	r7
    21d8:	77 f8       	bld	r7, 7
    21da:	70 94       	com	r7
    21dc:	4d 82       	std	Y+5, r4	; 0x05
    21de:	5e 82       	std	Y+6, r5	; 0x06
    21e0:	6f 82       	std	Y+7, r6	; 0x07
    21e2:	78 86       	std	Y+8, r7	; 0x08
    21e4:	19 86       	std	Y+9, r1	; 0x09
    21e6:	1a 86       	std	Y+10, r1	; 0x0a
    21e8:	1b 86       	std	Y+11, r1	; 0x0b
    21ea:	1c 86       	std	Y+12, r1	; 0x0c
    21ec:	6d 87       	std	Y+13, r22	; 0x0d
    21ee:	7e 87       	std	Y+14, r23	; 0x0e
    21f0:	8f 87       	std	Y+15, r24	; 0x0f
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	c9 8a       	std	Y+17, r12	; 0x11
    21f6:	da 8a       	std	Y+18, r13	; 0x12
    21f8:	eb 8a       	std	Y+19, r14	; 0x13
    21fa:	fc 8a       	std	Y+20, r15	; 0x14
    21fc:	1d 8a       	std	Y+21, r1	; 0x15
    21fe:	1e 8a       	std	Y+22, r1	; 0x16
    2200:	1f 8a       	std	Y+23, r1	; 0x17
    2202:	18 8e       	std	Y+24, r1	; 0x18
    2204:	19 8e       	std	Y+25, r1	; 0x19
    2206:	1a 8e       	std	Y+26, r1	; 0x1a
    2208:	1b 8e       	std	Y+27, r1	; 0x1b
    220a:	1c 8e       	std	Y+28, r1	; 0x1c
    220c:	1d 8e       	std	Y+29, r1	; 0x1d
    220e:	1e 8e       	std	Y+30, r1	; 0x1e
    2210:	1f 8e       	std	Y+31, r1	; 0x1f
    2212:	18 a2       	std	Y+32, r1	; 0x20
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	89 a3       	std	Y+33, r24	; 0x21
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	ab a3       	std	Y+35, r26	; 0x23
    2222:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    2224:	a5 01       	movw	r20, r10
    2226:	be 01       	movw	r22, r28
    2228:	6f 5f       	subi	r22, 0xFF	; 255
    222a:	7f 4f       	sbci	r23, 0xFF	; 255
    222c:	c8 01       	movw	r24, r16
    222e:	0e 94 7e 21 	call	0x42fc	; 0x42fc <vector_into_matrix>
}
    2232:	a4 96       	adiw	r28, 0x24	; 36
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	cf 90       	pop	r12
    224e:	bf 90       	pop	r11
    2250:	af 90       	pop	r10
    2252:	7f 90       	pop	r7
    2254:	6f 90       	pop	r6
    2256:	5f 90       	pop	r5
    2258:	4f 90       	pop	r4
    225a:	08 95       	ret

0000225c <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	c8 54       	subi	r28, 0x48	; 72
    2272:	d1 09       	sbc	r29, r1
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	8c 01       	movw	r16, r24
    2280:	cb 01       	movw	r24, r22
    2282:	6a 01       	movw	r12, r20
    2284:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    2286:	ae 01       	movw	r20, r28
    2288:	43 5f       	subi	r20, 0xF3	; 243
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	b8 01       	movw	r22, r16
    228e:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <vector_cross_product>
  convert_unit_vector(v_o_y);
    2292:	ce 01       	movw	r24, r28
    2294:	0d 96       	adiw	r24, 0x0d	; 13
    2296:	0e 94 b7 22 	call	0x456e	; 0x456e <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    229a:	f8 01       	movw	r30, r16
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	a2 81       	ldd	r26, Z+2	; 0x02
    22a2:	b3 81       	ldd	r27, Z+3	; 0x03
    22a4:	b0 58       	subi	r27, 0x80	; 128
    22a6:	89 8f       	std	Y+25, r24	; 0x19
    22a8:	9a 8f       	std	Y+26, r25	; 0x1a
    22aa:	ab 8f       	std	Y+27, r26	; 0x1b
    22ac:	bc 8f       	std	Y+28, r27	; 0x1c
    22ae:	84 81       	ldd	r24, Z+4	; 0x04
    22b0:	95 81       	ldd	r25, Z+5	; 0x05
    22b2:	a6 81       	ldd	r26, Z+6	; 0x06
    22b4:	b7 81       	ldd	r27, Z+7	; 0x07
    22b6:	b0 58       	subi	r27, 0x80	; 128
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	af 8f       	std	Y+31, r26	; 0x1f
    22be:	b8 a3       	std	Y+32, r27	; 0x20
    22c0:	00 85       	ldd	r16, Z+8	; 0x08
    22c2:	11 85       	ldd	r17, Z+9	; 0x09
    22c4:	22 85       	ldd	r18, Z+10	; 0x0a
    22c6:	33 85       	ldd	r19, Z+11	; 0x0b
    22c8:	30 58       	subi	r19, 0x80	; 128
    22ca:	09 a3       	std	Y+33, r16	; 0x21
    22cc:	1a a3       	std	Y+34, r17	; 0x22
    22ce:	2b a3       	std	Y+35, r18	; 0x23
    22d0:	3c a3       	std	Y+36, r19	; 0x24
  convert_unit_vector(v_o_z);
    22d2:	ce 01       	movw	r24, r28
    22d4:	49 96       	adiw	r24, 0x19	; 25
    22d6:	0e 94 b7 22 	call	0x456e	; 0x456e <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    22da:	ae 01       	movw	r20, r28
    22dc:	4f 5f       	subi	r20, 0xFF	; 255
    22de:	5f 4f       	sbci	r21, 0xFF	; 255
    22e0:	be 01       	movw	r22, r28
    22e2:	67 5e       	subi	r22, 0xE7	; 231
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	ce 01       	movw	r24, r28
    22e8:	0d 96       	adiw	r24, 0x0d	; 13
    22ea:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <vector_cross_product>
  convert_unit_vector(v_o_x);
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	0e 94 b7 22 	call	0x456e	; 0x456e <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	ab 81       	ldd	r26, Y+3	; 0x03
    22fc:	bc 81       	ldd	r27, Y+4	; 0x04
    22fe:	8d a3       	std	Y+37, r24	; 0x25
    2300:	9e a3       	std	Y+38, r25	; 0x26
    2302:	af a3       	std	Y+39, r26	; 0x27
    2304:	b8 a7       	std	Y+40, r27	; 0x28
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	af 85       	ldd	r26, Y+15	; 0x0f
    230c:	b8 89       	ldd	r27, Y+16	; 0x10
    230e:	89 a7       	std	Y+41, r24	; 0x29
    2310:	9a a7       	std	Y+42, r25	; 0x2a
    2312:	ab a7       	std	Y+43, r26	; 0x2b
    2314:	bc a7       	std	Y+44, r27	; 0x2c
    2316:	89 8d       	ldd	r24, Y+25	; 0x19
    2318:	9a 8d       	ldd	r25, Y+26	; 0x1a
    231a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    231c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    231e:	8d a7       	std	Y+45, r24	; 0x2d
    2320:	9e a7       	std	Y+46, r25	; 0x2e
    2322:	af a7       	std	Y+47, r26	; 0x2f
    2324:	b8 ab       	std	Y+48, r27	; 0x30
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	af 81       	ldd	r26, Y+7	; 0x07
    232c:	b8 85       	ldd	r27, Y+8	; 0x08
    232e:	89 ab       	std	Y+49, r24	; 0x31
    2330:	9a ab       	std	Y+50, r25	; 0x32
    2332:	ab ab       	std	Y+51, r26	; 0x33
    2334:	bc ab       	std	Y+52, r27	; 0x34
    2336:	89 89       	ldd	r24, Y+17	; 0x11
    2338:	9a 89       	ldd	r25, Y+18	; 0x12
    233a:	ab 89       	ldd	r26, Y+19	; 0x13
    233c:	bc 89       	ldd	r27, Y+20	; 0x14
    233e:	8d ab       	std	Y+53, r24	; 0x35
    2340:	9e ab       	std	Y+54, r25	; 0x36
    2342:	af ab       	std	Y+55, r26	; 0x37
    2344:	b8 af       	std	Y+56, r27	; 0x38
    2346:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2348:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234a:	af 8d       	ldd	r26, Y+31	; 0x1f
    234c:	b8 a1       	ldd	r27, Y+32	; 0x20
    234e:	89 af       	std	Y+57, r24	; 0x39
    2350:	9a af       	std	Y+58, r25	; 0x3a
    2352:	ab af       	std	Y+59, r26	; 0x3b
    2354:	bc af       	std	Y+60, r27	; 0x3c
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	ab 85       	ldd	r26, Y+11	; 0x0b
    235c:	bc 85       	ldd	r27, Y+12	; 0x0c
    235e:	21 96       	adiw	r28, 0x01	; 1
    2360:	8c af       	std	Y+60, r24	; 0x3c
    2362:	9d af       	std	Y+61, r25	; 0x3d
    2364:	ae af       	std	Y+62, r26	; 0x3e
    2366:	bf af       	std	Y+63, r27	; 0x3f
    2368:	21 97       	sbiw	r28, 0x01	; 1
    236a:	8d 89       	ldd	r24, Y+21	; 0x15
    236c:	9e 89       	ldd	r25, Y+22	; 0x16
    236e:	af 89       	ldd	r26, Y+23	; 0x17
    2370:	b8 8d       	ldd	r27, Y+24	; 0x18
    2372:	25 96       	adiw	r28, 0x05	; 5
    2374:	8c af       	std	Y+60, r24	; 0x3c
    2376:	9d af       	std	Y+61, r25	; 0x3d
    2378:	ae af       	std	Y+62, r26	; 0x3e
    237a:	bf af       	std	Y+63, r27	; 0x3f
    237c:	25 97       	sbiw	r28, 0x05	; 5
    237e:	89 a1       	ldd	r24, Y+33	; 0x21
    2380:	9a a1       	ldd	r25, Y+34	; 0x22
    2382:	ab a1       	ldd	r26, Y+35	; 0x23
    2384:	bc a1       	ldd	r27, Y+36	; 0x24
    2386:	29 96       	adiw	r28, 0x09	; 9
    2388:	8c af       	std	Y+60, r24	; 0x3c
    238a:	9d af       	std	Y+61, r25	; 0x3d
    238c:	ae af       	std	Y+62, r26	; 0x3e
    238e:	bf af       	std	Y+63, r27	; 0x3f
    2390:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    2392:	a7 01       	movw	r20, r14
    2394:	be 01       	movw	r22, r28
    2396:	6b 5d       	subi	r22, 0xDB	; 219
    2398:	7f 4f       	sbci	r23, 0xFF	; 255
    239a:	c6 01       	movw	r24, r12
    239c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <vector_into_matrix>
}
    23a0:	c8 5b       	subi	r28, 0xB8	; 184
    23a2:	df 4f       	sbci	r29, 0xFF	; 255
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	08 95       	ret

000023c0 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    23c0:	2f 92       	push	r2
    23c2:	3f 92       	push	r3
    23c4:	4f 92       	push	r4
    23c6:	5f 92       	push	r5
    23c8:	6f 92       	push	r6
    23ca:	7f 92       	push	r7
    23cc:	8f 92       	push	r8
    23ce:	9f 92       	push	r9
    23d0:	af 92       	push	r10
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	2c 97       	sbiw	r28, 0x0c	; 12
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	fc 01       	movw	r30, r24
    23f6:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    23f8:	80 80       	ld	r8, Z
    23fa:	91 80       	ldd	r9, Z+1	; 0x01
    23fc:	a2 80       	ldd	r10, Z+2	; 0x02
    23fe:	b3 80       	ldd	r11, Z+3	; 0x03
    2400:	c4 80       	ldd	r12, Z+4	; 0x04
    2402:	d5 80       	ldd	r13, Z+5	; 0x05
    2404:	e6 80       	ldd	r14, Z+6	; 0x06
    2406:	f7 80       	ldd	r15, Z+7	; 0x07
    2408:	40 84       	ldd	r4, Z+8	; 0x08
    240a:	51 84       	ldd	r5, Z+9	; 0x09
    240c:	62 84       	ldd	r6, Z+10	; 0x0a
    240e:	73 84       	ldd	r7, Z+11	; 0x0b
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    2410:	a5 01       	movw	r20, r10
    2412:	94 01       	movw	r18, r8
    2414:	c7 01       	movw	r24, r14
    2416:	b6 01       	movw	r22, r12
    2418:	0e 94 bf 33 	call	0x677e	; 0x677e <atan2>
    241c:	69 87       	std	Y+9, r22	; 0x09
    241e:	7a 87       	std	Y+10, r23	; 0x0a
    2420:	8b 87       	std	Y+11, r24	; 0x0b
    2422:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    2424:	a5 01       	movw	r20, r10
    2426:	94 01       	movw	r18, r8
    2428:	c5 01       	movw	r24, r10
    242a:	b4 01       	movw	r22, r8
    242c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2430:	69 83       	std	Y+1, r22	; 0x01
    2432:	7a 83       	std	Y+2, r23	; 0x02
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	9c 83       	std	Y+4, r25	; 0x04
    2438:	a5 01       	movw	r20, r10
    243a:	94 01       	movw	r18, r8
    243c:	c5 01       	movw	r24, r10
    243e:	b4 01       	movw	r22, r8
    2440:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2444:	4b 01       	movw	r8, r22
    2446:	5c 01       	movw	r10, r24
    2448:	a7 01       	movw	r20, r14
    244a:	96 01       	movw	r18, r12
    244c:	c7 01       	movw	r24, r14
    244e:	b6 01       	movw	r22, r12
    2450:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	c5 01       	movw	r24, r10
    245a:	b4 01       	movw	r22, r8
    245c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2460:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    2464:	69 83       	std	Y+1, r22	; 0x01
    2466:	7a 83       	std	Y+2, r23	; 0x02
    2468:	8b 83       	std	Y+3, r24	; 0x03
    246a:	9c 83       	std	Y+4, r25	; 0x04
  
  beta = atan2(z, (1 - F) * rho);
    246c:	25 e4       	ldi	r18, 0x45	; 69
    246e:	34 e2       	ldi	r19, 0x24	; 36
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2478:	9b 01       	movw	r18, r22
    247a:	ac 01       	movw	r20, r24
    247c:	c3 01       	movw	r24, r6
    247e:	b2 01       	movw	r22, r4
    2480:	0e 94 bf 33 	call	0x677e	; 0x677e <atan2>
    2484:	4b 01       	movw	r8, r22
    2486:	5c 01       	movw	r10, r24
    2488:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    248a:	c5 01       	movw	r24, r10
    248c:	b4 01       	movw	r22, r8
    248e:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e4       	ldi	r20, 0x40	; 64
    2498:	50 e4       	ldi	r21, 0x40	; 64
    249a:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <pow>
    249e:	6b 01       	movw	r12, r22
    24a0:	7c 01       	movw	r14, r24
    24a2:	c5 01       	movw	r24, r10
    24a4:	b4 01       	movw	r22, r8
    24a6:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e4       	ldi	r20, 0x40	; 64
    24b0:	50 e4       	ldi	r21, 0x40	; 64
    24b2:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <pow>
    24b6:	4b 01       	movw	r8, r22
    24b8:	5c 01       	movw	r10, r24
    24ba:	2e ea       	ldi	r18, 0xAE	; 174
    24bc:	39 ec       	ldi	r19, 0xC9	; 201
    24be:	46 e2       	ldi	r20, 0x26	; 38
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	c7 01       	movw	r24, r14
    24c4:	b6 01       	movw	r22, r12
    24c6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    24ca:	9b 01       	movw	r18, r22
    24cc:	ac 01       	movw	r20, r24
    24ce:	69 81       	ldd	r22, Y+1	; 0x01
    24d0:	7a 81       	ldd	r23, Y+2	; 0x02
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    24da:	6b 01       	movw	r12, r22
    24dc:	7c 01       	movw	r14, r24
    24de:	21 e5       	ldi	r18, 0x51	; 81
    24e0:	39 e5       	ldi	r19, 0x59	; 89
    24e2:	47 e2       	ldi	r20, 0x27	; 39
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	c5 01       	movw	r24, r10
    24e8:	b4 01       	movw	r22, r8
    24ea:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    24ee:	a3 01       	movw	r20, r6
    24f0:	92 01       	movw	r18, r4
    24f2:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    24f6:	a7 01       	movw	r20, r14
    24f8:	96 01       	movw	r18, r12
    24fa:	0e 94 bf 33 	call	0x677e	; 0x677e <atan2>
    24fe:	6b 01       	movw	r12, r22
    2500:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    2502:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2506:	4b 01       	movw	r8, r22
    2508:	5c 01       	movw	r10, r24
    250a:	c7 01       	movw	r24, r14
    250c:	b6 01       	movw	r22, r12
    250e:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2512:	25 e4       	ldi	r18, 0x45	; 69
    2514:	34 e2       	ldi	r19, 0x24	; 36
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    251e:	a5 01       	movw	r20, r10
    2520:	94 01       	movw	r18, r8
    2522:	0e 94 bf 33 	call	0x677e	; 0x677e <atan2>
    2526:	4b 01       	movw	r8, r22
    2528:	5c 01       	movw	r10, r24
    252a:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    252c:	09 f0       	breq	.+2      	; 0x2530 <ecef2lla+0x170>
    252e:	ad cf       	rjmp	.-166    	; 0x248a <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    2530:	c7 01       	movw	r24, r14
    2532:	b6 01       	movw	r22, r12
    2534:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2538:	4b 01       	movw	r8, r22
    253a:	5c 01       	movw	r10, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    253c:	2a e8       	ldi	r18, 0x8A	; 138
    253e:	3c e5       	ldi	r19, 0x5C	; 92
    2540:	4b ed       	ldi	r20, 0xDB	; 219
    2542:	5b e3       	ldi	r21, 0x3B	; 59
    2544:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2548:	6d 83       	std	Y+5, r22	; 0x05
    254a:	7e 83       	std	Y+6, r23	; 0x06
    254c:	8f 83       	std	Y+7, r24	; 0x07
    254e:	98 87       	std	Y+8, r25	; 0x08
    2550:	a5 01       	movw	r20, r10
    2552:	94 01       	movw	r18, r8
    2554:	6d 81       	ldd	r22, Y+5	; 0x05
    2556:	7e 81       	ldd	r23, Y+6	; 0x06
    2558:	8f 81       	ldd	r24, Y+7	; 0x07
    255a:	98 85       	ldd	r25, Y+8	; 0x08
    255c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	9f e3       	ldi	r25, 0x3F	; 63
    256c:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    2570:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	62 e3       	ldi	r22, 0x32	; 50
    257a:	75 ea       	ldi	r23, 0xA5	; 165
    257c:	82 ec       	ldi	r24, 0xC2	; 194
    257e:	9a e4       	ldi	r25, 0x4A	; 74
    2580:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    2584:	6d 83       	std	Y+5, r22	; 0x05
    2586:	7e 83       	std	Y+6, r23	; 0x06
    2588:	8f 83       	std	Y+7, r24	; 0x07
    258a:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    258c:	c7 01       	movw	r24, r14
    258e:	b6 01       	movw	r22, r12
    2590:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
  
  v_lla[0] = phi;
    2594:	f1 01       	movw	r30, r2
    2596:	c0 82       	st	Z, r12
    2598:	d1 82       	std	Z+1, r13	; 0x01
    259a:	e2 82       	std	Z+2, r14	; 0x02
    259c:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    259e:	29 85       	ldd	r18, Y+9	; 0x09
    25a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    25a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    25a6:	24 83       	std	Z+4, r18	; 0x04
    25a8:	35 83       	std	Z+5, r19	; 0x05
    25aa:	46 83       	std	Z+6, r20	; 0x06
    25ac:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    25ae:	29 81       	ldd	r18, Y+1	; 0x01
    25b0:	3a 81       	ldd	r19, Y+2	; 0x02
    25b2:	4b 81       	ldd	r20, Y+3	; 0x03
    25b4:	5c 81       	ldd	r21, Y+4	; 0x04
    25b6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    25ba:	69 83       	std	Y+1, r22	; 0x01
    25bc:	7a 83       	std	Y+2, r23	; 0x02
    25be:	8b 83       	std	Y+3, r24	; 0x03
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	2a e8       	ldi	r18, 0x8A	; 138
    25c4:	3c e5       	ldi	r19, 0x5C	; 92
    25c6:	4b ed       	ldi	r20, 0xDB	; 219
    25c8:	5b e3       	ldi	r21, 0x3B	; 59
    25ca:	6d 81       	ldd	r22, Y+5	; 0x05
    25cc:	7e 81       	ldd	r23, Y+6	; 0x06
    25ce:	8f 81       	ldd	r24, Y+7	; 0x07
    25d0:	98 85       	ldd	r25, Y+8	; 0x08
    25d2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    25d6:	a5 01       	movw	r20, r10
    25d8:	94 01       	movw	r18, r8
    25da:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    25de:	a3 01       	movw	r20, r6
    25e0:	92 01       	movw	r18, r4
    25e2:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    25e6:	a5 01       	movw	r20, r10
    25e8:	94 01       	movw	r18, r8
    25ea:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    25ee:	9b 01       	movw	r18, r22
    25f0:	ac 01       	movw	r20, r24
    25f2:	69 81       	ldd	r22, Y+1	; 0x01
    25f4:	7a 81       	ldd	r23, Y+2	; 0x02
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    25fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2600:	3e 81       	ldd	r19, Y+6	; 0x06
    2602:	4f 81       	ldd	r20, Y+7	; 0x07
    2604:	58 85       	ldd	r21, Y+8	; 0x08
    2606:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    260a:	f1 01       	movw	r30, r2
    260c:	60 87       	std	Z+8, r22	; 0x08
    260e:	71 87       	std	Z+9, r23	; 0x09
    2610:	82 87       	std	Z+10, r24	; 0x0a
    2612:	93 87       	std	Z+11, r25	; 0x0b
   Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	44 e3       	ldi	r20, 0x34	; 52
    261a:	53 e4       	ldi	r21, 0x43	; 67
    261c:	c7 01       	movw	r24, r14
    261e:	b6 01       	movw	r22, r12
    2620:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2624:	28 ed       	ldi	r18, 0xD8	; 216
    2626:	3f e0       	ldi	r19, 0x0F	; 15
    2628:	49 e4       	ldi	r20, 0x49	; 73
    262a:	50 e4       	ldi	r21, 0x40	; 64
    262c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	48 ec       	ldi	r20, 0xC8	; 200
    2636:	52 e4       	ldi	r21, 0x42	; 66
    2638:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    263c:	0e 94 81 34 	call	0x6902	; 0x6902 <__fixsfsi>
    2640:	0b ea       	ldi	r16, 0xAB	; 171
    2642:	14 e0       	ldi	r17, 0x04	; 4
    2644:	f8 01       	movw	r30, r16
    2646:	61 8f       	std	Z+25, r22	; 0x19
    2648:	72 8f       	std	Z+26, r23	; 0x1a
    264a:	83 8f       	std	Z+27, r24	; 0x1b
    264c:	94 8f       	std	Z+28, r25	; 0x1c
   Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	44 e3       	ldi	r20, 0x34	; 52
    2654:	53 e4       	ldi	r21, 0x43	; 67
    2656:	f1 01       	movw	r30, r2
    2658:	64 81       	ldd	r22, Z+4	; 0x04
    265a:	75 81       	ldd	r23, Z+5	; 0x05
    265c:	86 81       	ldd	r24, Z+6	; 0x06
    265e:	97 81       	ldd	r25, Z+7	; 0x07
    2660:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2664:	28 ed       	ldi	r18, 0xD8	; 216
    2666:	3f e0       	ldi	r19, 0x0F	; 15
    2668:	49 e4       	ldi	r20, 0x49	; 73
    266a:	50 e4       	ldi	r21, 0x40	; 64
    266c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	48 ec       	ldi	r20, 0xC8	; 200
    2676:	52 e4       	ldi	r21, 0x42	; 66
    2678:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    267c:	0e 94 81 34 	call	0x6902	; 0x6902 <__fixsfsi>
    2680:	f8 01       	movw	r30, r16
    2682:	65 8f       	std	Z+29, r22	; 0x1d
    2684:	76 8f       	std	Z+30, r23	; 0x1e
    2686:	87 8f       	std	Z+31, r24	; 0x1f
    2688:	90 a3       	std	Z+32, r25	; 0x20
   Current_state.gps.alt=v_lla[2]; 
    268a:	f1 01       	movw	r30, r2
    268c:	60 85       	ldd	r22, Z+8	; 0x08
    268e:	71 85       	ldd	r23, Z+9	; 0x09
    2690:	82 85       	ldd	r24, Z+10	; 0x0a
    2692:	93 85       	ldd	r25, Z+11	; 0x0b
    2694:	0e 94 81 34 	call	0x6902	; 0x6902 <__fixsfsi>
    2698:	f8 01       	movw	r30, r16
    269a:	61 a3       	std	Z+33, r22	; 0x21
    269c:	72 a3       	std	Z+34, r23	; 0x22
    269e:	83 a3       	std	Z+35, r24	; 0x23
    26a0:	94 a3       	std	Z+36, r25	; 0x24
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    26a2:	2c 96       	adiw	r28, 0x0c	; 12
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	df 90       	pop	r13
    26bc:	cf 90       	pop	r12
    26be:	bf 90       	pop	r11
    26c0:	af 90       	pop	r10
    26c2:	9f 90       	pop	r9
    26c4:	8f 90       	pop	r8
    26c6:	7f 90       	pop	r7
    26c8:	6f 90       	pop	r6
    26ca:	5f 90       	pop	r5
    26cc:	4f 90       	pop	r4
    26ce:	3f 90       	pop	r3
    26d0:	2f 90       	pop	r2
    26d2:	08 95       	ret

000026d4 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    26d4:	2f 92       	push	r2
    26d6:	3f 92       	push	r3
    26d8:	4f 92       	push	r4
    26da:	5f 92       	push	r5
    26dc:	6f 92       	push	r6
    26de:	7f 92       	push	r7
    26e0:	8f 92       	push	r8
    26e2:	9f 92       	push	r9
    26e4:	af 92       	push	r10
    26e6:	bf 92       	push	r11
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	ac 97       	sbiw	r28, 0x2c	; 44
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	1c 01       	movw	r2, r24
    270a:	7b 01       	movw	r14, r22
    270c:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    270e:	db 01       	movw	r26, r22
    2710:	4d 90       	ld	r4, X+
    2712:	5d 90       	ld	r5, X+
    2714:	6d 90       	ld	r6, X+
    2716:	7c 90       	ld	r7, X
    2718:	c3 01       	movw	r24, r6
    271a:	b2 01       	movw	r22, r4
    271c:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2720:	4b 01       	movw	r8, r22
    2722:	5c 01       	movw	r10, r24
    2724:	f7 01       	movw	r30, r14
    2726:	c4 80       	ldd	r12, Z+4	; 0x04
    2728:	d5 80       	ldd	r13, Z+5	; 0x05
    272a:	e6 80       	ldd	r14, Z+6	; 0x06
    272c:	f7 80       	ldd	r15, Z+7	; 0x07
    272e:	c7 01       	movw	r24, r14
    2730:	b6 01       	movw	r22, r12
    2732:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2736:	6d a3       	std	Y+37, r22	; 0x25
    2738:	7e a3       	std	Y+38, r23	; 0x26
    273a:	8f a3       	std	Y+39, r24	; 0x27
    273c:	98 a7       	std	Y+40, r25	; 0x28
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    273e:	c3 01       	movw	r24, r6
    2740:	b2 01       	movw	r22, r4
    2742:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2746:	2b 01       	movw	r4, r22
    2748:	3c 01       	movw	r6, r24
    274a:	c7 01       	movw	r24, r14
    274c:	b6 01       	movw	r22, r12
    274e:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2752:	6b 01       	movw	r12, r22
    2754:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2756:	77 fa       	bst	r7, 7
    2758:	70 94       	com	r7
    275a:	77 f8       	bld	r7, 7
    275c:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    275e:	d5 01       	movw	r26, r10
    2760:	c4 01       	movw	r24, r8
    2762:	b0 58       	subi	r27, 0x80	; 128
    2764:	89 a7       	std	Y+41, r24	; 0x29
    2766:	9a a7       	std	Y+42, r25	; 0x2a
    2768:	ab a7       	std	Y+43, r26	; 0x2b
    276a:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    276c:	2d a1       	ldd	r18, Y+37	; 0x25
    276e:	3e a1       	ldd	r19, Y+38	; 0x26
    2770:	4f a1       	ldd	r20, Y+39	; 0x27
    2772:	58 a5       	ldd	r21, Y+40	; 0x28
    2774:	c3 01       	movw	r24, r6
    2776:	b2 01       	movw	r22, r4
    2778:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    277c:	69 83       	std	Y+1, r22	; 0x01
    277e:	7a 83       	std	Y+2, r23	; 0x02
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    2784:	a3 01       	movw	r20, r6
    2786:	92 01       	movw	r18, r4
    2788:	c7 01       	movw	r24, r14
    278a:	b6 01       	movw	r22, r12
    278c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2790:	6d 83       	std	Y+5, r22	; 0x05
    2792:	7e 83       	std	Y+6, r23	; 0x06
    2794:	8f 83       	std	Y+7, r24	; 0x07
    2796:	98 87       	std	Y+8, r25	; 0x08
    2798:	89 86       	std	Y+9, r8	; 0x09
    279a:	9a 86       	std	Y+10, r9	; 0x0a
    279c:	ab 86       	std	Y+11, r10	; 0x0b
    279e:	bc 86       	std	Y+12, r11	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    27a0:	d7 01       	movw	r26, r14
    27a2:	c6 01       	movw	r24, r12
    27a4:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    27a6:	8d 87       	std	Y+13, r24	; 0x0d
    27a8:	9e 87       	std	Y+14, r25	; 0x0e
    27aa:	af 87       	std	Y+15, r26	; 0x0f
    27ac:	b8 8b       	std	Y+16, r27	; 0x10
    27ae:	8d a1       	ldd	r24, Y+37	; 0x25
    27b0:	9e a1       	ldd	r25, Y+38	; 0x26
    27b2:	af a1       	ldd	r26, Y+39	; 0x27
    27b4:	b8 a5       	ldd	r27, Y+40	; 0x28
    27b6:	89 8b       	std	Y+17, r24	; 0x11
    27b8:	9a 8b       	std	Y+18, r25	; 0x12
    27ba:	ab 8b       	std	Y+19, r26	; 0x13
    27bc:	bc 8b       	std	Y+20, r27	; 0x14
    27be:	1d 8a       	std	Y+21, r1	; 0x15
    27c0:	1e 8a       	std	Y+22, r1	; 0x16
    27c2:	1f 8a       	std	Y+23, r1	; 0x17
    27c4:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    27c6:	9c 01       	movw	r18, r24
    27c8:	ad 01       	movw	r20, r26
    27ca:	69 a5       	ldd	r22, Y+41	; 0x29
    27cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    27d6:	69 8f       	std	Y+25, r22	; 0x19
    27d8:	7a 8f       	std	Y+26, r23	; 0x1a
    27da:	8b 8f       	std	Y+27, r24	; 0x1b
    27dc:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    27de:	29 a5       	ldd	r18, Y+41	; 0x29
    27e0:	3a a5       	ldd	r19, Y+42	; 0x2a
    27e2:	4b a5       	ldd	r20, Y+43	; 0x2b
    27e4:	5c a5       	ldd	r21, Y+44	; 0x2c
    27e6:	c7 01       	movw	r24, r14
    27e8:	b6 01       	movw	r22, r12
    27ea:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    27ee:	6d 8f       	std	Y+29, r22	; 0x1d
    27f0:	7e 8f       	std	Y+30, r23	; 0x1e
    27f2:	8f 8f       	std	Y+31, r24	; 0x1f
    27f4:	98 a3       	std	Y+32, r25	; 0x20
    27f6:	49 a2       	std	Y+33, r4	; 0x21
    27f8:	5a a2       	std	Y+34, r5	; 0x22
    27fa:	6b a2       	std	Y+35, r6	; 0x23
    27fc:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    27fe:	a8 01       	movw	r20, r16
    2800:	be 01       	movw	r22, r28
    2802:	6f 5f       	subi	r22, 0xFF	; 255
    2804:	7f 4f       	sbci	r23, 0xFF	; 255
    2806:	c1 01       	movw	r24, r2
    2808:	0e 94 7e 21 	call	0x42fc	; 0x42fc <vector_into_matrix>
}
    280c:	ac 96       	adiw	r28, 0x2c	; 44
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	8f 90       	pop	r8
    2830:	7f 90       	pop	r7
    2832:	6f 90       	pop	r6
    2834:	5f 90       	pop	r5
    2836:	4f 90       	pop	r4
    2838:	3f 90       	pop	r3
    283a:	2f 90       	pop	r2
    283c:	08 95       	ret

0000283e <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    283e:	1f 92       	push	r1
    2840:	0f 92       	push	r0
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	0f 92       	push	r0
    2846:	11 24       	eor	r1, r1
    2848:	0b b6       	in	r0, 0x3b	; 59
    284a:	0f 92       	push	r0
    284c:	2f 93       	push	r18
    284e:	8f 93       	push	r24
    2850:	9f 93       	push	r25
    2852:	af 93       	push	r26
    2854:	bf 93       	push	r27
    2856:	ef 93       	push	r30
    2858:	ff 93       	push	r31
	Current_state.gps.anant_flag = 0;
    285a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <Current_state+0x18>
  PORTA ^= 0xf0;
    285e:	9b b3       	in	r25, 0x1b	; 27
    2860:	80 ef       	ldi	r24, 0xF0	; 240
    2862:	89 27       	eor	r24, r25
    2864:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    2866:	8c b1       	in	r24, 0x0c	; 12
    2868:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <last_byte>
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    286c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2870:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2874:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2878:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    287c:	ba 2f       	mov	r27, r26
    287e:	a9 2f       	mov	r26, r25
    2880:	98 2f       	mov	r25, r24
    2882:	88 27       	eor	r24, r24
    2884:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    2888:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    288c:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    2890:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer &= 0xFFFFFF00;
    2894:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2898:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    289c:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    28a0:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    28a4:	88 27       	eor	r24, r24
    28a6:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    28aa:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    28ae:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    28b2:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer |= (uint32_t) last_byte;
    28b6:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    28ba:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    28be:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    28c2:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    28c6:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    28ca:	82 2b       	or	r24, r18
    28cc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    28d0:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    28d4:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    28d8:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
    28dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    28e0:	8c 30       	cpi	r24, 0x0C	; 12
    28e2:	08 f0       	brcs	.+2      	; 0x28e6 <__vector_18+0xa8>
    28e4:	86 c0       	rjmp	.+268    	; 0x29f2 <__vector_18+0x1b4>
  {
    
    if(pos<4)
    28e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	28 f5       	brcc	.+74     	; 0x2938 <__vector_18+0xfa>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    28ee:	eb ea       	ldi	r30, 0xAB	; 171
    28f0:	f4 e0       	ldi	r31, 0x04	; 4
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	a2 81       	ldd	r26, Z+2	; 0x02
    28f8:	b3 81       	ldd	r27, Z+3	; 0x03
    28fa:	89 2f       	mov	r24, r25
    28fc:	9a 2f       	mov	r25, r26
    28fe:	ab 2f       	mov	r26, r27
    2900:	bb 27       	eor	r27, r27
    2902:	a7 fd       	sbrc	r26, 7
    2904:	ba 95       	dec	r27
    2906:	80 83       	st	Z, r24
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	a2 83       	std	Z+2, r26	; 0x02
    290c:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	a2 81       	ldd	r26, Z+2	; 0x02
    2914:	b3 81       	ldd	r27, Z+3	; 0x03
    2916:	bb 27       	eor	r27, r27
    2918:	80 83       	st	Z, r24
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	a2 83       	std	Z+2, r26	; 0x02
    291e:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    2920:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	a2 81       	ldd	r26, Z+2	; 0x02
    292a:	b3 81       	ldd	r27, Z+3	; 0x03
    292c:	b2 2b       	or	r27, r18
    292e:	80 83       	st	Z, r24
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	a2 83       	std	Z+2, r26	; 0x02
    2934:	b3 83       	std	Z+3, r27	; 0x03
    2936:	51 c0       	rjmp	.+162    	; 0x29da <__vector_18+0x19c>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    2938:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    293c:	88 30       	cpi	r24, 0x08	; 8
    293e:	28 f5       	brcc	.+74     	; 0x298a <__vector_18+0x14c>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    2940:	eb ea       	ldi	r30, 0xAB	; 171
    2942:	f4 e0       	ldi	r31, 0x04	; 4
    2944:	84 81       	ldd	r24, Z+4	; 0x04
    2946:	95 81       	ldd	r25, Z+5	; 0x05
    2948:	a6 81       	ldd	r26, Z+6	; 0x06
    294a:	b7 81       	ldd	r27, Z+7	; 0x07
    294c:	89 2f       	mov	r24, r25
    294e:	9a 2f       	mov	r25, r26
    2950:	ab 2f       	mov	r26, r27
    2952:	bb 27       	eor	r27, r27
    2954:	a7 fd       	sbrc	r26, 7
    2956:	ba 95       	dec	r27
    2958:	84 83       	std	Z+4, r24	; 0x04
    295a:	95 83       	std	Z+5, r25	; 0x05
    295c:	a6 83       	std	Z+6, r26	; 0x06
    295e:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y &= 0x00FFFFFF;
    2960:	84 81       	ldd	r24, Z+4	; 0x04
    2962:	95 81       	ldd	r25, Z+5	; 0x05
    2964:	a6 81       	ldd	r26, Z+6	; 0x06
    2966:	b7 81       	ldd	r27, Z+7	; 0x07
    2968:	bb 27       	eor	r27, r27
    296a:	84 83       	std	Z+4, r24	; 0x04
    296c:	95 83       	std	Z+5, r25	; 0x05
    296e:	a6 83       	std	Z+6, r26	; 0x06
    2970:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    2972:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2976:	84 81       	ldd	r24, Z+4	; 0x04
    2978:	95 81       	ldd	r25, Z+5	; 0x05
    297a:	a6 81       	ldd	r26, Z+6	; 0x06
    297c:	b7 81       	ldd	r27, Z+7	; 0x07
    297e:	b2 2b       	or	r27, r18
    2980:	84 83       	std	Z+4, r24	; 0x04
    2982:	95 83       	std	Z+5, r25	; 0x05
    2984:	a6 83       	std	Z+6, r26	; 0x06
    2986:	b7 83       	std	Z+7, r27	; 0x07
    2988:	28 c0       	rjmp	.+80     	; 0x29da <__vector_18+0x19c>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    298a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    298e:	8c 30       	cpi	r24, 0x0C	; 12
    2990:	20 f5       	brcc	.+72     	; 0x29da <__vector_18+0x19c>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    2992:	eb ea       	ldi	r30, 0xAB	; 171
    2994:	f4 e0       	ldi	r31, 0x04	; 4
    2996:	80 85       	ldd	r24, Z+8	; 0x08
    2998:	91 85       	ldd	r25, Z+9	; 0x09
    299a:	a2 85       	ldd	r26, Z+10	; 0x0a
    299c:	b3 85       	ldd	r27, Z+11	; 0x0b
    299e:	89 2f       	mov	r24, r25
    29a0:	9a 2f       	mov	r25, r26
    29a2:	ab 2f       	mov	r26, r27
    29a4:	bb 27       	eor	r27, r27
    29a6:	a7 fd       	sbrc	r26, 7
    29a8:	ba 95       	dec	r27
    29aa:	80 87       	std	Z+8, r24	; 0x08
    29ac:	91 87       	std	Z+9, r25	; 0x09
    29ae:	a2 87       	std	Z+10, r26	; 0x0a
    29b0:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z &= 0x00FFFFFF;
    29b2:	80 85       	ldd	r24, Z+8	; 0x08
    29b4:	91 85       	ldd	r25, Z+9	; 0x09
    29b6:	a2 85       	ldd	r26, Z+10	; 0x0a
    29b8:	b3 85       	ldd	r27, Z+11	; 0x0b
    29ba:	bb 27       	eor	r27, r27
    29bc:	80 87       	std	Z+8, r24	; 0x08
    29be:	91 87       	std	Z+9, r25	; 0x09
    29c0:	a2 87       	std	Z+10, r26	; 0x0a
    29c2:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    29c4:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    29c8:	80 85       	ldd	r24, Z+8	; 0x08
    29ca:	91 85       	ldd	r25, Z+9	; 0x09
    29cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    29ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    29d0:	b2 2b       	or	r27, r18
    29d2:	80 87       	std	Z+8, r24	; 0x08
    29d4:	91 87       	std	Z+9, r25	; 0x09
    29d6:	a2 87       	std	Z+10, r26	; 0x0a
    29d8:	b3 87       	std	Z+11, r27	; 0x0b
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    29da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
    if(pos == 12)
    29e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    29e8:	8c 30       	cpi	r24, 0x0C	; 12
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <__vector_18+0x1b4>
	{
      pos = 0xFF;
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    29f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    29f6:	8c 30       	cpi	r24, 0x0C	; 12
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <__vector_18+0x1be>
    29fa:	86 c0       	rjmp	.+268    	; 0x2b08 <__vector_18+0x2ca>
  {
	  
    if(vel < 4)
    29fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2a00:	84 30       	cpi	r24, 0x04	; 4
    2a02:	28 f5       	brcc	.+74     	; 0x2a4e <__vector_18+0x210>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    2a04:	eb ea       	ldi	r30, 0xAB	; 171
    2a06:	f4 e0       	ldi	r31, 0x04	; 4
    2a08:	84 85       	ldd	r24, Z+12	; 0x0c
    2a0a:	95 85       	ldd	r25, Z+13	; 0x0d
    2a0c:	a6 85       	ldd	r26, Z+14	; 0x0e
    2a0e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2a10:	89 2f       	mov	r24, r25
    2a12:	9a 2f       	mov	r25, r26
    2a14:	ab 2f       	mov	r26, r27
    2a16:	bb 27       	eor	r27, r27
    2a18:	a7 fd       	sbrc	r26, 7
    2a1a:	ba 95       	dec	r27
    2a1c:	84 87       	std	Z+12, r24	; 0x0c
    2a1e:	95 87       	std	Z+13, r25	; 0x0d
    2a20:	a6 87       	std	Z+14, r26	; 0x0e
    2a22:	b7 87       	std	Z+15, r27	; 0x0f
		Current_state.gps.v_x &= 0x00FFFFFF;
    2a24:	84 85       	ldd	r24, Z+12	; 0x0c
    2a26:	95 85       	ldd	r25, Z+13	; 0x0d
    2a28:	a6 85       	ldd	r26, Z+14	; 0x0e
    2a2a:	b7 85       	ldd	r27, Z+15	; 0x0f
    2a2c:	bb 27       	eor	r27, r27
    2a2e:	84 87       	std	Z+12, r24	; 0x0c
    2a30:	95 87       	std	Z+13, r25	; 0x0d
    2a32:	a6 87       	std	Z+14, r26	; 0x0e
    2a34:	b7 87       	std	Z+15, r27	; 0x0f
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    2a36:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2a3a:	84 85       	ldd	r24, Z+12	; 0x0c
    2a3c:	95 85       	ldd	r25, Z+13	; 0x0d
    2a3e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2a40:	b7 85       	ldd	r27, Z+15	; 0x0f
    2a42:	b2 2b       	or	r27, r18
    2a44:	84 87       	std	Z+12, r24	; 0x0c
    2a46:	95 87       	std	Z+13, r25	; 0x0d
    2a48:	a6 87       	std	Z+14, r26	; 0x0e
    2a4a:	b7 87       	std	Z+15, r27	; 0x0f
    2a4c:	51 c0       	rjmp	.+162    	; 0x2af0 <__vector_18+0x2b2>
		
	}
	else if(vel < 8)
    2a4e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2a52:	88 30       	cpi	r24, 0x08	; 8
    2a54:	28 f5       	brcc	.+74     	; 0x2aa0 <__vector_18+0x262>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    2a56:	eb ea       	ldi	r30, 0xAB	; 171
    2a58:	f4 e0       	ldi	r31, 0x04	; 4
    2a5a:	80 89       	ldd	r24, Z+16	; 0x10
    2a5c:	91 89       	ldd	r25, Z+17	; 0x11
    2a5e:	a2 89       	ldd	r26, Z+18	; 0x12
    2a60:	b3 89       	ldd	r27, Z+19	; 0x13
    2a62:	89 2f       	mov	r24, r25
    2a64:	9a 2f       	mov	r25, r26
    2a66:	ab 2f       	mov	r26, r27
    2a68:	bb 27       	eor	r27, r27
    2a6a:	a7 fd       	sbrc	r26, 7
    2a6c:	ba 95       	dec	r27
    2a6e:	80 8b       	std	Z+16, r24	; 0x10
    2a70:	91 8b       	std	Z+17, r25	; 0x11
    2a72:	a2 8b       	std	Z+18, r26	; 0x12
    2a74:	b3 8b       	std	Z+19, r27	; 0x13
		Current_state.gps.v_y &= 0x00FFFFFF;
    2a76:	80 89       	ldd	r24, Z+16	; 0x10
    2a78:	91 89       	ldd	r25, Z+17	; 0x11
    2a7a:	a2 89       	ldd	r26, Z+18	; 0x12
    2a7c:	b3 89       	ldd	r27, Z+19	; 0x13
    2a7e:	bb 27       	eor	r27, r27
    2a80:	80 8b       	std	Z+16, r24	; 0x10
    2a82:	91 8b       	std	Z+17, r25	; 0x11
    2a84:	a2 8b       	std	Z+18, r26	; 0x12
    2a86:	b3 8b       	std	Z+19, r27	; 0x13
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    2a88:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2a8c:	80 89       	ldd	r24, Z+16	; 0x10
    2a8e:	91 89       	ldd	r25, Z+17	; 0x11
    2a90:	a2 89       	ldd	r26, Z+18	; 0x12
    2a92:	b3 89       	ldd	r27, Z+19	; 0x13
    2a94:	b2 2b       	or	r27, r18
    2a96:	80 8b       	std	Z+16, r24	; 0x10
    2a98:	91 8b       	std	Z+17, r25	; 0x11
    2a9a:	a2 8b       	std	Z+18, r26	; 0x12
    2a9c:	b3 8b       	std	Z+19, r27	; 0x13
    2a9e:	28 c0       	rjmp	.+80     	; 0x2af0 <__vector_18+0x2b2>
	}
	else if(vel < 12)
    2aa0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2aa4:	8c 30       	cpi	r24, 0x0C	; 12
    2aa6:	20 f5       	brcc	.+72     	; 0x2af0 <__vector_18+0x2b2>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    2aa8:	eb ea       	ldi	r30, 0xAB	; 171
    2aaa:	f4 e0       	ldi	r31, 0x04	; 4
    2aac:	84 89       	ldd	r24, Z+20	; 0x14
    2aae:	95 89       	ldd	r25, Z+21	; 0x15
    2ab0:	a6 89       	ldd	r26, Z+22	; 0x16
    2ab2:	b7 89       	ldd	r27, Z+23	; 0x17
    2ab4:	89 2f       	mov	r24, r25
    2ab6:	9a 2f       	mov	r25, r26
    2ab8:	ab 2f       	mov	r26, r27
    2aba:	bb 27       	eor	r27, r27
    2abc:	a7 fd       	sbrc	r26, 7
    2abe:	ba 95       	dec	r27
    2ac0:	84 8b       	std	Z+20, r24	; 0x14
    2ac2:	95 8b       	std	Z+21, r25	; 0x15
    2ac4:	a6 8b       	std	Z+22, r26	; 0x16
    2ac6:	b7 8b       	std	Z+23, r27	; 0x17
		Current_state.gps.v_z &= 0x00FFFFFF;
    2ac8:	84 89       	ldd	r24, Z+20	; 0x14
    2aca:	95 89       	ldd	r25, Z+21	; 0x15
    2acc:	a6 89       	ldd	r26, Z+22	; 0x16
    2ace:	b7 89       	ldd	r27, Z+23	; 0x17
    2ad0:	bb 27       	eor	r27, r27
    2ad2:	84 8b       	std	Z+20, r24	; 0x14
    2ad4:	95 8b       	std	Z+21, r25	; 0x15
    2ad6:	a6 8b       	std	Z+22, r26	; 0x16
    2ad8:	b7 8b       	std	Z+23, r27	; 0x17
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    2ada:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2ade:	84 89       	ldd	r24, Z+20	; 0x14
    2ae0:	95 89       	ldd	r25, Z+21	; 0x15
    2ae2:	a6 89       	ldd	r26, Z+22	; 0x16
    2ae4:	b7 89       	ldd	r27, Z+23	; 0x17
    2ae6:	b2 2b       	or	r27, r18
    2ae8:	84 8b       	std	Z+20, r24	; 0x14
    2aea:	95 8b       	std	Z+21, r25	; 0x15
    2aec:	a6 8b       	std	Z+22, r26	; 0x16
    2aee:	b7 8b       	std	Z+23, r27	; 0x17
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    2af0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>
    if(vel == 12)
    2afa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2afe:	8c 30       	cpi	r24, 0x0C	; 12
    2b00:	19 f4       	brne	.+6      	; 0x2b08 <__vector_18+0x2ca>
     {
		  vel = 0xFF;
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    2b08:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2b0c:	84 30       	cpi	r24, 0x04	; 4
    2b0e:	20 f5       	brcc	.+72     	; 0x2b58 <__vector_18+0x31a>
  {
    if(dop >= 2)
    2b10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	a0 f0       	brcs	.+40     	; 0x2b40 <__vector_18+0x302>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    2b18:	eb ea       	ldi	r30, 0xAB	; 171
    2b1a:	f4 e0       	ldi	r31, 0x04	; 4
    2b1c:	84 a5       	ldd	r24, Z+44	; 0x2c
    2b1e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b20:	89 2f       	mov	r24, r25
    2b22:	99 27       	eor	r25, r25
    2b24:	95 a7       	std	Z+45, r25	; 0x2d
    2b26:	84 a7       	std	Z+44, r24	; 0x2c
		 Current_state.gps.pdop &= 0x00FF;
    2b28:	84 a5       	ldd	r24, Z+44	; 0x2c
    2b2a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b2c:	99 27       	eor	r25, r25
    2b2e:	95 a7       	std	Z+45, r25	; 0x2d
    2b30:	84 a7       	std	Z+44, r24	; 0x2c
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    2b32:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2b36:	84 a5       	ldd	r24, Z+44	; 0x2c
    2b38:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b3a:	92 2b       	or	r25, r18
    2b3c:	95 a7       	std	Z+45, r25	; 0x2d
    2b3e:	84 a7       	std	Z+44, r24	; 0x2c
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    2b40:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
    if(dop == 4)
    2b4a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2b4e:	84 30       	cpi	r24, 0x04	; 4
    2b50:	19 f4       	brne	.+6      	; 0x2b58 <__vector_18+0x31a>
      dop = 0xFF;
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    2b58:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2b5c:	80 31       	cpi	r24, 0x10	; 16
    2b5e:	08 f0       	brcs	.+2      	; 0x2b62 <__vector_18+0x324>
    2b60:	8b c0       	rjmp	.+278    	; 0x2c78 <__vector_18+0x43a>
  {
	if(geo < 4);  
    2b62:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__vector_18+0x32e>
    2b6a:	7a c0       	rjmp	.+244    	; 0x2c60 <__vector_18+0x422>
    else if(geo < 8)
    2b6c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2b70:	88 30       	cpi	r24, 0x08	; 8
    2b72:	28 f5       	brcc	.+74     	; 0x2bbe <__vector_18+0x380>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    2b74:	eb ea       	ldi	r30, 0xAB	; 171
    2b76:	f4 e0       	ldi	r31, 0x04	; 4
    2b78:	81 8d       	ldd	r24, Z+25	; 0x19
    2b7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b7c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2b7e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2b80:	89 2f       	mov	r24, r25
    2b82:	9a 2f       	mov	r25, r26
    2b84:	ab 2f       	mov	r26, r27
    2b86:	bb 27       	eor	r27, r27
    2b88:	a7 fd       	sbrc	r26, 7
    2b8a:	ba 95       	dec	r27
    2b8c:	81 8f       	std	Z+25, r24	; 0x19
    2b8e:	92 8f       	std	Z+26, r25	; 0x1a
    2b90:	a3 8f       	std	Z+27, r26	; 0x1b
    2b92:	b4 8f       	std	Z+28, r27	; 0x1c
		Current_state.gps.lat &= 0x00FFFFFF;
    2b94:	81 8d       	ldd	r24, Z+25	; 0x19
    2b96:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b98:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2b9a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2b9c:	bb 27       	eor	r27, r27
    2b9e:	81 8f       	std	Z+25, r24	; 0x19
    2ba0:	92 8f       	std	Z+26, r25	; 0x1a
    2ba2:	a3 8f       	std	Z+27, r26	; 0x1b
    2ba4:	b4 8f       	std	Z+28, r27	; 0x1c
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    2ba6:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2baa:	81 8d       	ldd	r24, Z+25	; 0x19
    2bac:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2bb0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2bb2:	b2 2b       	or	r27, r18
    2bb4:	81 8f       	std	Z+25, r24	; 0x19
    2bb6:	92 8f       	std	Z+26, r25	; 0x1a
    2bb8:	a3 8f       	std	Z+27, r26	; 0x1b
    2bba:	b4 8f       	std	Z+28, r27	; 0x1c
    2bbc:	51 c0       	rjmp	.+162    	; 0x2c60 <__vector_18+0x422>
	}
	else if(geo < 12)
    2bbe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2bc2:	8c 30       	cpi	r24, 0x0C	; 12
    2bc4:	28 f5       	brcc	.+74     	; 0x2c10 <__vector_18+0x3d2>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    2bc6:	eb ea       	ldi	r30, 0xAB	; 171
    2bc8:	f4 e0       	ldi	r31, 0x04	; 4
    2bca:	85 8d       	ldd	r24, Z+29	; 0x1d
    2bcc:	96 8d       	ldd	r25, Z+30	; 0x1e
    2bce:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2bd0:	b0 a1       	ldd	r27, Z+32	; 0x20
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	9a 2f       	mov	r25, r26
    2bd6:	ab 2f       	mov	r26, r27
    2bd8:	bb 27       	eor	r27, r27
    2bda:	a7 fd       	sbrc	r26, 7
    2bdc:	ba 95       	dec	r27
    2bde:	85 8f       	std	Z+29, r24	; 0x1d
    2be0:	96 8f       	std	Z+30, r25	; 0x1e
    2be2:	a7 8f       	std	Z+31, r26	; 0x1f
    2be4:	b0 a3       	std	Z+32, r27	; 0x20
		Current_state.gps.lon &= 0x00FFFFFF;
    2be6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2be8:	96 8d       	ldd	r25, Z+30	; 0x1e
    2bea:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2bec:	b0 a1       	ldd	r27, Z+32	; 0x20
    2bee:	bb 27       	eor	r27, r27
    2bf0:	85 8f       	std	Z+29, r24	; 0x1d
    2bf2:	96 8f       	std	Z+30, r25	; 0x1e
    2bf4:	a7 8f       	std	Z+31, r26	; 0x1f
    2bf6:	b0 a3       	std	Z+32, r27	; 0x20
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    2bf8:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2bfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2bfe:	96 8d       	ldd	r25, Z+30	; 0x1e
    2c00:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2c02:	b0 a1       	ldd	r27, Z+32	; 0x20
    2c04:	b2 2b       	or	r27, r18
    2c06:	85 8f       	std	Z+29, r24	; 0x1d
    2c08:	96 8f       	std	Z+30, r25	; 0x1e
    2c0a:	a7 8f       	std	Z+31, r26	; 0x1f
    2c0c:	b0 a3       	std	Z+32, r27	; 0x20
    2c0e:	28 c0       	rjmp	.+80     	; 0x2c60 <__vector_18+0x422>
	}
	else if(geo < 16 )
    2c10:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2c14:	80 31       	cpi	r24, 0x10	; 16
    2c16:	20 f5       	brcc	.+72     	; 0x2c60 <__vector_18+0x422>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    2c18:	eb ea       	ldi	r30, 0xAB	; 171
    2c1a:	f4 e0       	ldi	r31, 0x04	; 4
    2c1c:	81 a1       	ldd	r24, Z+33	; 0x21
    2c1e:	92 a1       	ldd	r25, Z+34	; 0x22
    2c20:	a3 a1       	ldd	r26, Z+35	; 0x23
    2c22:	b4 a1       	ldd	r27, Z+36	; 0x24
    2c24:	89 2f       	mov	r24, r25
    2c26:	9a 2f       	mov	r25, r26
    2c28:	ab 2f       	mov	r26, r27
    2c2a:	bb 27       	eor	r27, r27
    2c2c:	a7 fd       	sbrc	r26, 7
    2c2e:	ba 95       	dec	r27
    2c30:	81 a3       	std	Z+33, r24	; 0x21
    2c32:	92 a3       	std	Z+34, r25	; 0x22
    2c34:	a3 a3       	std	Z+35, r26	; 0x23
    2c36:	b4 a3       	std	Z+36, r27	; 0x24
		Current_state.gps.alt &= 0x00FFFFFF;
    2c38:	81 a1       	ldd	r24, Z+33	; 0x21
    2c3a:	92 a1       	ldd	r25, Z+34	; 0x22
    2c3c:	a3 a1       	ldd	r26, Z+35	; 0x23
    2c3e:	b4 a1       	ldd	r27, Z+36	; 0x24
    2c40:	bb 27       	eor	r27, r27
    2c42:	81 a3       	std	Z+33, r24	; 0x21
    2c44:	92 a3       	std	Z+34, r25	; 0x22
    2c46:	a3 a3       	std	Z+35, r26	; 0x23
    2c48:	b4 a3       	std	Z+36, r27	; 0x24
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    2c4a:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2c4e:	81 a1       	ldd	r24, Z+33	; 0x21
    2c50:	92 a1       	ldd	r25, Z+34	; 0x22
    2c52:	a3 a1       	ldd	r26, Z+35	; 0x23
    2c54:	b4 a1       	ldd	r27, Z+36	; 0x24
    2c56:	b2 2b       	or	r27, r18
    2c58:	81 a3       	std	Z+33, r24	; 0x21
    2c5a:	92 a3       	std	Z+34, r25	; 0x22
    2c5c:	a3 a3       	std	Z+35, r26	; 0x23
    2c5e:	b4 a3       	std	Z+36, r27	; 0x24
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    2c60:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>
    if(geo == 16)
    2c6a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2c6e:	80 31       	cpi	r24, 0x10	; 16
    2c70:	19 f4       	brne	.+6      	; 0x2c78 <__vector_18+0x43a>
	{
      geo = 0xFF;
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    2c78:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2c7c:	87 30       	cpi	r24, 0x07	; 7
    2c7e:	08 f0       	brcs	.+2      	; 0x2c82 <__vector_18+0x444>
    2c80:	54 c0       	rjmp	.+168    	; 0x2d2a <__vector_18+0x4ec>
  {
	  
	  if(time == 0)
    2c82:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2c86:	81 11       	cpse	r24, r1
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <__vector_18+0x456>
	  {
		  Current_state.gps.hours = last_byte;
    2c8a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2c8e:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <Current_state+0x25>
    2c92:	3c c0       	rjmp	.+120    	; 0x2d0c <__vector_18+0x4ce>
	  }
	  else if(time == 1)
    2c94:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	29 f4       	brne	.+10     	; 0x2ca6 <__vector_18+0x468>
	  {
		  Current_state.gps.minutes = last_byte;
    2c9c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2ca0:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <Current_state+0x26>
    2ca4:	33 c0       	rjmp	.+102    	; 0x2d0c <__vector_18+0x4ce>
	  }
	  else if(time == 2)
    2ca6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2caa:	82 30       	cpi	r24, 0x02	; 2
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <__vector_18+0x47a>
	  {
		  Current_state.gps.seconds = last_byte;
    2cae:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2cb2:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <Current_state+0x27>
    2cb6:	2a c0       	rjmp	.+84     	; 0x2d0c <__vector_18+0x4ce>
	  }
	  else if(time == 3)
    2cb8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2cbc:	83 30       	cpi	r24, 0x03	; 3
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <__vector_18+0x48c>
	  {
		  Current_state.gps.date = last_byte;
    2cc0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2cc4:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <Current_state+0x28>
    2cc8:	21 c0       	rjmp	.+66     	; 0x2d0c <__vector_18+0x4ce>
	  }else if(time == 4)
    2cca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2cce:	84 30       	cpi	r24, 0x04	; 4
    2cd0:	29 f4       	brne	.+10     	; 0x2cdc <__vector_18+0x49e>
	  {
		  Current_state.gps.month = last_byte;
    2cd2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2cd6:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Current_state+0x29>
    2cda:	18 c0       	rjmp	.+48     	; 0x2d0c <__vector_18+0x4ce>
	  }else if(time > 4)
    2cdc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2ce0:	85 30       	cpi	r24, 0x05	; 5
    2ce2:	a0 f0       	brcs	.+40     	; 0x2d0c <__vector_18+0x4ce>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    2ce4:	eb ea       	ldi	r30, 0xAB	; 171
    2ce6:	f4 e0       	ldi	r31, 0x04	; 4
    2ce8:	82 a5       	ldd	r24, Z+42	; 0x2a
    2cea:	93 a5       	ldd	r25, Z+43	; 0x2b
    2cec:	89 2f       	mov	r24, r25
    2cee:	99 27       	eor	r25, r25
    2cf0:	93 a7       	std	Z+43, r25	; 0x2b
    2cf2:	82 a7       	std	Z+42, r24	; 0x2a
		  Current_state.gps.year &= 0x00FF;
    2cf4:	82 a5       	ldd	r24, Z+42	; 0x2a
    2cf6:	93 a5       	ldd	r25, Z+43	; 0x2b
    2cf8:	99 27       	eor	r25, r25
    2cfa:	93 a7       	std	Z+43, r25	; 0x2b
    2cfc:	82 a7       	std	Z+42, r24	; 0x2a
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    2cfe:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2d02:	82 a5       	ldd	r24, Z+42	; 0x2a
    2d04:	93 a5       	ldd	r25, Z+43	; 0x2b
    2d06:	92 2b       	or	r25, r18
    2d08:	93 a7       	std	Z+43, r25	; 0x2b
    2d0a:	82 a7       	std	Z+42, r24	; 0x2a

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    2d0c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2d10:	8f 5f       	subi	r24, 0xFF	; 255
    2d12:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
    if(time == 7)
    2d16:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2d1a:	87 30       	cpi	r24, 0x07	; 7
    2d1c:	31 f4       	brne	.+12     	; 0x2d2a <__vector_18+0x4ec>
    {
      time = 0xFF;
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
      ///* * The Entire message has been read
      message_end = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <message_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    2d2a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2d2e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2d32:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2d36:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2d3a:	8c 3a       	cpi	r24, 0xAC	; 172
    2d3c:	94 40       	sbci	r25, 0x04	; 4
    2d3e:	af 43       	sbci	r26, 0x3F	; 63
    2d40:	bf 43       	sbci	r27, 0x3F	; 63
    2d42:	29 f4       	brne	.+10     	; 0x2d4e <__vector_18+0x510>
  {
    message_end = 0;
    2d44:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    pos = 0;
    2d48:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pos>
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <__vector_18+0x58e>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    2d4e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2d52:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2d56:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2d5a:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2d5e:	8c 3a       	cpi	r24, 0xAC	; 172
    2d60:	95 40       	sbci	r25, 0x05	; 5
    2d62:	af 43       	sbci	r26, 0x3F	; 63
    2d64:	bf 43       	sbci	r27, 0x3F	; 63
    2d66:	19 f4       	brne	.+6      	; 0x2d6e <__vector_18+0x530>
    vel = 0;
    2d68:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vel>
    2d6c:	2f c0       	rjmp	.+94     	; 0x2dcc <__vector_18+0x58e>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2d6e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2d72:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2d76:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2d7a:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2d7e:	8c 3a       	cpi	r24, 0xAC	; 172
    2d80:	9b 40       	sbci	r25, 0x0B	; 11
    2d82:	af 43       	sbci	r26, 0x3F	; 63
    2d84:	bf 43       	sbci	r27, 0x3F	; 63
    2d86:	19 f4       	brne	.+6      	; 0x2d8e <__vector_18+0x550>
    dop = 0;
    2d88:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dop>
    2d8c:	1f c0       	rjmp	.+62     	; 0x2dcc <__vector_18+0x58e>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    2d8e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2d92:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2d96:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2d9a:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2d9e:	8c 3a       	cpi	r24, 0xAC	; 172
    2da0:	9e 40       	sbci	r25, 0x0E	; 14
    2da2:	af 43       	sbci	r26, 0x3F	; 63
    2da4:	bf 43       	sbci	r27, 0x3F	; 63
    2da6:	19 f4       	brne	.+6      	; 0x2dae <__vector_18+0x570>
    geo = 0;
    2da8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <geo>
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <__vector_18+0x58e>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2dae:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2db2:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2db6:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2dba:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2dbe:	8c 3a       	cpi	r24, 0xAC	; 172
    2dc0:	9f 40       	sbci	r25, 0x0F	; 15
    2dc2:	af 43       	sbci	r26, 0x3F	; 63
    2dc4:	bf 43       	sbci	r27, 0x3F	; 63
    2dc6:	11 f4       	brne	.+4      	; 0x2dcc <__vector_18+0x58e>
    time = 0;
    2dc8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end) //&& (Current_state.gps.pdop!=0))
    2dcc:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <Current_state+0x2c>
    2dd0:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <Current_state+0x2d>
    2dd4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <message_end>
    2dd8:	88 23       	and	r24, r24
    2dda:	a9 f0       	breq	.+42     	; 0x2e06 <__vector_18+0x5c8>
  {
    GPS_done = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <GPS_done>
    Current_state.gps.anant_flag = 1;
    2de2:	eb ea       	ldi	r30, 0xAB	; 171
    2de4:	f4 e0       	ldi	r31, 0x04	; 4
    2de6:	80 8f       	std	Z+24, r24	; 0x18
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2de8:	57 98       	cbi	0x0a, 7	; 10
   
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2dea:	8f ef       	ldi	r24, 0xFF	; 255
    2dec:	9f ef       	ldi	r25, 0xFF	; 255
    2dee:	95 a7       	std	Z+45, r25	; 0x2d
    2df0:	84 a7       	std	Z+44, r24	; 0x2c
    message_end = 0;
    2df2:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    buffer = 0;
    2df6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <buffer>
    2dfa:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <buffer+0x1>
    2dfe:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <buffer+0x2>
    2e02:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <buffer+0x3>
  }
}
    2e06:	ff 91       	pop	r31
    2e08:	ef 91       	pop	r30
    2e0a:	bf 91       	pop	r27
    2e0c:	af 91       	pop	r26
    2e0e:	9f 91       	pop	r25
    2e10:	8f 91       	pop	r24
    2e12:	2f 91       	pop	r18
    2e14:	0f 90       	pop	r0
    2e16:	0b be       	out	0x3b, r0	; 59
    2e18:	0f 90       	pop	r0
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	0f 90       	pop	r0
    2e1e:	1f 90       	pop	r1
    2e20:	18 95       	reti

00002e22 <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2e22:	2f 92       	push	r2
    2e24:	3f 92       	push	r3
    2e26:	4f 92       	push	r4
    2e28:	5f 92       	push	r5
    2e2a:	6f 92       	push	r6
    2e2c:	7f 92       	push	r7
    2e2e:	8f 92       	push	r8
    2e30:	9f 92       	push	r9
    2e32:	af 92       	push	r10
    2e34:	bf 92       	push	r11
    2e36:	cf 92       	push	r12
    2e38:	df 92       	push	r13
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	c8 54       	subi	r28, 0x48	; 72
    2e4c:	d1 09       	sbc	r29, r1
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	fc 01       	movw	r30, r24
    2e5a:	2a 01       	movw	r4, r20
    2e5c:	3b 01       	movw	r6, r22
    2e5e:	32 2e       	mov	r3, r18
    2e60:	29 96       	adiw	r28, 0x09	; 9
    2e62:	1f af       	std	Y+63, r17	; 0x3f
    2e64:	0e af       	std	Y+62, r16	; 0x3e
    2e66:	29 97       	sbiw	r28, 0x09	; 9
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2e68:	80 80       	ld	r8, Z
    2e6a:	91 80       	ldd	r9, Z+1	; 0x01
    2e6c:	a2 80       	ldd	r10, Z+2	; 0x02
    2e6e:	b3 80       	ldd	r11, Z+3	; 0x03
    2e70:	c4 80       	ldd	r12, Z+4	; 0x04
    2e72:	d5 80       	ldd	r13, Z+5	; 0x05
    2e74:	e6 80       	ldd	r14, Z+6	; 0x06
    2e76:	f7 80       	ldd	r15, Z+7	; 0x07
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a e7       	ldi	r20, 0x7A	; 122
    2e7e:	54 e4       	ldi	r21, 0x44	; 68
    2e80:	60 85       	ldd	r22, Z+8	; 0x08
    2e82:	71 85       	ldd	r23, Z+9	; 0x09
    2e84:	82 85       	ldd	r24, Z+10	; 0x0a
    2e86:	93 85       	ldd	r25, Z+11	; 0x0b
    2e88:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    2e8c:	6d 83       	std	Y+5, r22	; 0x05
    2e8e:	7e 83       	std	Y+6, r23	; 0x06
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2e94:	c5 01       	movw	r24, r10
    2e96:	b4 01       	movw	r22, r8
    2e98:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2e9c:	69 83       	std	Y+1, r22	; 0x01
    2e9e:	7a 83       	std	Y+2, r23	; 0x02
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
    2ea2:	9c 83       	std	Y+4, r25	; 0x04
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	b4 01       	movw	r22, r8
    2ea8:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2eac:	69 87       	std	Y+9, r22	; 0x09
    2eae:	7a 87       	std	Y+10, r23	; 0x0a
    2eb0:	8b 87       	std	Y+11, r24	; 0x0b
    2eb2:	9c 87       	std	Y+12, r25	; 0x0c
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 ee       	ldi	r19, 0xE0	; 224
    2eb8:	4b ef       	ldi	r20, 0xFB	; 251
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	c3 01       	movw	r24, r6
    2ebe:	b2 01       	movw	r22, r4
    2ec0:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    2ec4:	6e a7       	std	Y+46, r22	; 0x2e
    2ec6:	7f a7       	std	Y+47, r23	; 0x2f
    2ec8:	88 ab       	std	Y+48, r24	; 0x30
    2eca:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2ecc:	c7 01       	movw	r24, r14
    2ece:	b6 01       	movw	r22, r12
    2ed0:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    2ed4:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <cl+0x4>
    2ed8:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <cl+0x5>
    2edc:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <cl+0x6>
    2ee0:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <cl+0x7>
  sl[1] = sin(lon);
    2ee4:	c7 01       	movw	r24, r14
    2ee6:	b6 01       	movw	r22, r12
    2ee8:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    2eec:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <sl+0x4>
    2ef0:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <sl+0x5>
    2ef4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sl+0x6>
    2ef8:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <sl+0x7>
  one = A2 * clat * clat;
    2efc:	2e e2       	ldi	r18, 0x2E	; 46
    2efe:	3f e2       	ldi	r19, 0x2F	; 47
    2f00:	4b e1       	ldi	r20, 0x1B	; 27
    2f02:	5c e4       	ldi	r21, 0x4C	; 76
    2f04:	69 85       	ldd	r22, Y+9	; 0x09
    2f06:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f0c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2f10:	29 85       	ldd	r18, Y+9	; 0x09
    2f12:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f14:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f16:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f18:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2f1c:	4b 01       	movw	r8, r22
    2f1e:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2f20:	2b e3       	ldi	r18, 0x3B	; 59
    2f22:	35 e2       	ldi	r19, 0x25	; 37
    2f24:	4a e1       	ldi	r20, 0x1A	; 26
    2f26:	5c e4       	ldi	r21, 0x4C	; 76
    2f28:	69 81       	ldd	r22, Y+1	; 0x01
    2f2a:	7a 81       	ldd	r23, Y+2	; 0x02
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2f34:	29 81       	ldd	r18, Y+1	; 0x01
    2f36:	3a 81       	ldd	r19, Y+2	; 0x02
    2f38:	4b 81       	ldd	r20, Y+3	; 0x03
    2f3a:	5c 81       	ldd	r21, Y+4	; 0x04
    2f3c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2f40:	69 8b       	std	Y+17, r22	; 0x11
    2f42:	7a 8b       	std	Y+18, r23	; 0x12
    2f44:	8b 8b       	std	Y+19, r24	; 0x13
    2f46:	9c 8b       	std	Y+20, r25	; 0x14
  three = one + two;
    2f48:	9b 01       	movw	r18, r22
    2f4a:	ac 01       	movw	r20, r24
    2f4c:	c5 01       	movw	r24, r10
    2f4e:	b4 01       	movw	r22, r8
    2f50:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2f54:	6d 8b       	std	Y+21, r22	; 0x15
    2f56:	7e 8b       	std	Y+22, r23	; 0x16
    2f58:	8f 8b       	std	Y+23, r24	; 0x17
    2f5a:	98 8f       	std	Y+24, r25	; 0x18
  four = sqrt(three);
    2f5c:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    2f60:	2b 01       	movw	r4, r22
    2f62:	3c 01       	movw	r6, r24
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2f64:	9b 01       	movw	r18, r22
    2f66:	ac 01       	movw	r20, r24
    2f68:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2f6c:	6b 01       	movw	r12, r22
    2f6e:	7c 01       	movw	r14, r24
    2f70:	2d 81       	ldd	r18, Y+5	; 0x05
    2f72:	3e 81       	ldd	r19, Y+6	; 0x06
    2f74:	4f 81       	ldd	r20, Y+7	; 0x07
    2f76:	58 85       	ldd	r21, Y+8	; 0x08
    2f78:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2f7c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f7e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f80:	4f 81       	ldd	r20, Y+7	; 0x07
    2f82:	58 85       	ldd	r21, Y+8	; 0x08
    2f84:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2f88:	69 8f       	std	Y+25, r22	; 0x19
    2f8a:	7a 8f       	std	Y+26, r23	; 0x1a
    2f8c:	8b 8f       	std	Y+27, r24	; 0x1b
    2f8e:	9c 8f       	std	Y+28, r25	; 0x1c
    2f90:	2e e2       	ldi	r18, 0x2E	; 46
    2f92:	3f e2       	ldi	r19, 0x2F	; 47
    2f94:	4b e1       	ldi	r20, 0x1B	; 27
    2f96:	5c e4       	ldi	r21, 0x4C	; 76
    2f98:	c5 01       	movw	r24, r10
    2f9a:	b4 01       	movw	r22, r8
    2f9c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2fa0:	69 a3       	std	Y+33, r22	; 0x21
    2fa2:	7a a3       	std	Y+34, r23	; 0x22
    2fa4:	8b a3       	std	Y+35, r24	; 0x23
    2fa6:	9c a3       	std	Y+36, r25	; 0x24
    2fa8:	2d 81       	ldd	r18, Y+5	; 0x05
    2faa:	3e 81       	ldd	r19, Y+6	; 0x06
    2fac:	4f 81       	ldd	r20, Y+7	; 0x07
    2fae:	58 85       	ldd	r21, Y+8	; 0x08
    2fb0:	c7 01       	movw	r24, r14
    2fb2:	b6 01       	movw	r22, r12
    2fb4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fba:	3e 81       	ldd	r19, Y+6	; 0x06
    2fbc:	4f 81       	ldd	r20, Y+7	; 0x07
    2fbe:	58 85       	ldd	r21, Y+8	; 0x08
    2fc0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2fc4:	6b 01       	movw	r12, r22
    2fc6:	7c 01       	movw	r14, r24
    2fc8:	2e e2       	ldi	r18, 0x2E	; 46
    2fca:	3f e2       	ldi	r19, 0x2F	; 47
    2fcc:	4b e1       	ldi	r20, 0x1B	; 27
    2fce:	5c e4       	ldi	r21, 0x4C	; 76
    2fd0:	c5 01       	movw	r24, r10
    2fd2:	b4 01       	movw	r22, r8
    2fd4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2fd8:	4b 01       	movw	r8, r22
    2fda:	5c 01       	movw	r10, r24
    2fdc:	2b e3       	ldi	r18, 0x3B	; 59
    2fde:	35 e2       	ldi	r19, 0x25	; 37
    2fe0:	4a e1       	ldi	r20, 0x1A	; 26
    2fe2:	5c e4       	ldi	r21, 0x4C	; 76
    2fe4:	69 89       	ldd	r22, Y+17	; 0x11
    2fe6:	7a 89       	ldd	r23, Y+18	; 0x12
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	ac 01       	movw	r20, r24
    2ff4:	c5 01       	movw	r24, r10
    2ff6:	b4 01       	movw	r22, r8
    2ff8:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    2ffc:	2d 89       	ldd	r18, Y+21	; 0x15
    2ffe:	3e 89       	ldd	r19, Y+22	; 0x16
    3000:	4f 89       	ldd	r20, Y+23	; 0x17
    3002:	58 8d       	ldd	r21, Y+24	; 0x18
    3004:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3008:	9b 01       	movw	r18, r22
    300a:	ac 01       	movw	r20, r24
    300c:	c7 01       	movw	r24, r14
    300e:	b6 01       	movw	r22, r12
    3010:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3014:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    3018:	4b 01       	movw	r8, r22
    301a:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    301c:	a3 01       	movw	r20, r6
    301e:	92 01       	movw	r18, r4
    3020:	6d 81       	ldd	r22, Y+5	; 0x05
    3022:	7e 81       	ldd	r23, Y+6	; 0x06
    3024:	8f 81       	ldd	r24, Y+7	; 0x07
    3026:	98 85       	ldd	r25, Y+8	; 0x08
    3028:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    302c:	a5 01       	movw	r20, r10
    302e:	94 01       	movw	r18, r8
    3030:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3034:	23 96       	adiw	r28, 0x03	; 3
    3036:	6c af       	std	Y+60, r22	; 0x3c
    3038:	7d af       	std	Y+61, r23	; 0x3d
    303a:	8e af       	std	Y+62, r24	; 0x3e
    303c:	9f af       	std	Y+63, r25	; 0x3f
    303e:	23 97       	sbiw	r28, 0x03	; 3
  sd = ((A2 - B2) * slat * clat) / (four * r);
    3040:	20 e8       	ldi	r18, 0x80	; 128
    3042:	39 ef       	ldi	r19, 0xF9	; 249
    3044:	44 e8       	ldi	r20, 0x84	; 132
    3046:	58 e4       	ldi	r21, 0x48	; 72
    3048:	69 81       	ldd	r22, Y+1	; 0x01
    304a:	7a 81       	ldd	r23, Y+2	; 0x02
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3054:	29 85       	ldd	r18, Y+9	; 0x09
    3056:	3a 85       	ldd	r19, Y+10	; 0x0a
    3058:	4b 85       	ldd	r20, Y+11	; 0x0b
    305a:	5c 85       	ldd	r21, Y+12	; 0x0c
    305c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3060:	6b 01       	movw	r12, r22
    3062:	7c 01       	movw	r14, r24
    3064:	a5 01       	movw	r20, r10
    3066:	94 01       	movw	r18, r8
    3068:	c3 01       	movw	r24, r6
    306a:	b2 01       	movw	r22, r4
    306c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3070:	9b 01       	movw	r18, r22
    3072:	ac 01       	movw	r20, r24
    3074:	c7 01       	movw	r24, r14
    3076:	b6 01       	movw	r22, r12
    3078:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    307c:	27 96       	adiw	r28, 0x07	; 7
    307e:	6c af       	std	Y+60, r22	; 0x3c
    3080:	7d af       	std	Y+61, r23	; 0x3d
    3082:	8e af       	std	Y+62, r24	; 0x3e
    3084:	9f af       	std	Y+63, r25	; 0x3f
    3086:	27 97       	sbiw	r28, 0x07	; 7
  slat = slat * cd - clat * sd;
    3088:	23 96       	adiw	r28, 0x03	; 3
    308a:	2c ad       	ldd	r18, Y+60	; 0x3c
    308c:	3d ad       	ldd	r19, Y+61	; 0x3d
    308e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3090:	5f ad       	ldd	r21, Y+63	; 0x3f
    3092:	23 97       	sbiw	r28, 0x03	; 3
    3094:	69 81       	ldd	r22, Y+1	; 0x01
    3096:	7a 81       	ldd	r23, Y+2	; 0x02
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    30a0:	6b 01       	movw	r12, r22
    30a2:	7c 01       	movw	r14, r24
    30a4:	27 96       	adiw	r28, 0x07	; 7
    30a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    30a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    30aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    30ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    30ae:	27 97       	sbiw	r28, 0x07	; 7
    30b0:	69 85       	ldd	r22, Y+9	; 0x09
    30b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    30b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    30b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    30b8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    30bc:	9b 01       	movw	r18, r22
    30be:	ac 01       	movw	r20, r24
    30c0:	c7 01       	movw	r24, r14
    30c2:	b6 01       	movw	r22, r12
    30c4:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    30c8:	69 8f       	std	Y+25, r22	; 0x19
    30ca:	7a 8f       	std	Y+26, r23	; 0x1a
    30cc:	8b 8f       	std	Y+27, r24	; 0x1b
    30ce:	9c 8f       	std	Y+28, r25	; 0x1c
  clat = clat * cd + one * sd;
    30d0:	23 96       	adiw	r28, 0x03	; 3
    30d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    30d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    30d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    30d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    30da:	23 97       	sbiw	r28, 0x03	; 3
    30dc:	69 85       	ldd	r22, Y+9	; 0x09
    30de:	7a 85       	ldd	r23, Y+10	; 0x0a
    30e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    30e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    30e4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    30e8:	6b 01       	movw	r12, r22
    30ea:	7c 01       	movw	r14, r24
    30ec:	27 96       	adiw	r28, 0x07	; 7
    30ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    30f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    30f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    30f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    30f6:	27 97       	sbiw	r28, 0x07	; 7
    30f8:	69 81       	ldd	r22, Y+1	; 0x01
    30fa:	7a 81       	ldd	r23, Y+2	; 0x02
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3104:	9b 01       	movw	r18, r22
    3106:	ac 01       	movw	r20, r24
    3108:	c7 01       	movw	r24, r14
    310a:	b6 01       	movw	r22, r12
    310c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3110:	6d 8b       	std	Y+21, r22	; 0x15
    3112:	7e 8b       	std	Y+22, r23	; 0x16
    3114:	8f 8b       	std	Y+23, r24	; 0x17
    3116:	98 8f       	std	Y+24, r25	; 0x18
  
  p[1] = 2.0 * slat;
    3118:	0d e3       	ldi	r16, 0x3D	; 61
    311a:	13 e0       	ldi	r17, 0x03	; 3
    311c:	29 8d       	ldd	r18, Y+25	; 0x19
    311e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3120:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3122:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3124:	ca 01       	movw	r24, r20
    3126:	b9 01       	movw	r22, r18
    3128:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    312c:	d8 01       	movw	r26, r16
    312e:	14 96       	adiw	r26, 0x04	; 4
    3130:	6d 93       	st	X+, r22
    3132:	7d 93       	st	X+, r23
    3134:	8d 93       	st	X+, r24
    3136:	9c 93       	st	X, r25
    3138:	17 97       	sbiw	r26, 0x07	; 7
  p[2] = 2.0 * clat;
    313a:	2d 89       	ldd	r18, Y+21	; 0x15
    313c:	3e 89       	ldd	r19, Y+22	; 0x16
    313e:	4f 89       	ldd	r20, Y+23	; 0x17
    3140:	58 8d       	ldd	r21, Y+24	; 0x18
    3142:	ca 01       	movw	r24, r20
    3144:	b9 01       	movw	r22, r18
    3146:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    314a:	f8 01       	movw	r30, r16
    314c:	60 87       	std	Z+8, r22	; 0x08
    314e:	71 87       	std	Z+9, r23	; 0x09
    3150:	82 87       	std	Z+10, r24	; 0x0a
    3152:	93 87       	std	Z+11, r25	; 0x0b
  p[3] = 4.5 * slat * slat - 1.5;
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e9       	ldi	r20, 0x90	; 144
    315a:	50 e4       	ldi	r21, 0x40	; 64
    315c:	69 8d       	ldd	r22, Y+25	; 0x19
    315e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3164:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3168:	29 8d       	ldd	r18, Y+25	; 0x19
    316a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    316c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    316e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3170:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 ec       	ldi	r20, 0xC0	; 192
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3180:	d8 01       	movw	r26, r16
    3182:	1c 96       	adiw	r26, 0x0c	; 12
    3184:	6d 93       	st	X+, r22
    3186:	7d 93       	st	X+, r23
    3188:	8d 93       	st	X+, r24
    318a:	9c 93       	st	X, r25
    318c:	1f 97       	sbiw	r26, 0x0f	; 15
  p[4] = sqrt(27) * clat * slat;
    318e:	21 ee       	ldi	r18, 0xE1	; 225
    3190:	36 e4       	ldi	r19, 0x46	; 70
    3192:	46 ea       	ldi	r20, 0xA6	; 166
    3194:	50 e4       	ldi	r21, 0x40	; 64
    3196:	6d 89       	ldd	r22, Y+21	; 0x15
    3198:	7e 89       	ldd	r23, Y+22	; 0x16
    319a:	8f 89       	ldd	r24, Y+23	; 0x17
    319c:	98 8d       	ldd	r25, Y+24	; 0x18
    319e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    31a2:	29 8d       	ldd	r18, Y+25	; 0x19
    31a4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    31a6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    31a8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    31aa:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    31ae:	f8 01       	movw	r30, r16
    31b0:	60 8b       	std	Z+16, r22	; 0x10
    31b2:	71 8b       	std	Z+17, r23	; 0x11
    31b4:	82 8b       	std	Z+18, r24	; 0x12
    31b6:	93 8b       	std	Z+19, r25	; 0x13
  q[1] = -1 * clat;
    31b8:	05 e7       	ldi	r16, 0x75	; 117
    31ba:	12 e0       	ldi	r17, 0x02	; 2
    31bc:	8d 89       	ldd	r24, Y+21	; 0x15
    31be:	9e 89       	ldd	r25, Y+22	; 0x16
    31c0:	af 89       	ldd	r26, Y+23	; 0x17
    31c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    31c4:	b0 58       	subi	r27, 0x80	; 128
    31c6:	f8 01       	movw	r30, r16
    31c8:	84 83       	std	Z+4, r24	; 0x04
    31ca:	95 83       	std	Z+5, r25	; 0x05
    31cc:	a6 83       	std	Z+6, r26	; 0x06
    31ce:	b7 83       	std	Z+7, r27	; 0x07
  q[2] = slat;
    31d0:	89 8d       	ldd	r24, Y+25	; 0x19
    31d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31d4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    31d6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    31d8:	80 87       	std	Z+8, r24	; 0x08
    31da:	91 87       	std	Z+9, r25	; 0x09
    31dc:	a2 87       	std	Z+10, r26	; 0x0a
    31de:	b3 87       	std	Z+11, r27	; 0x0b
  q[3] = -3.0 * clat * slat;
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e4       	ldi	r20, 0x40	; 64
    31e6:	50 ec       	ldi	r21, 0xC0	; 192
    31e8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ea:	7e 89       	ldd	r23, Y+22	; 0x16
    31ec:	8f 89       	ldd	r24, Y+23	; 0x17
    31ee:	98 8d       	ldd	r25, Y+24	; 0x18
    31f0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    31f4:	29 8d       	ldd	r18, Y+25	; 0x19
    31f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    31f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    31fa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    31fc:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3200:	d8 01       	movw	r26, r16
    3202:	1c 96       	adiw	r26, 0x0c	; 12
    3204:	6d 93       	st	X+, r22
    3206:	7d 93       	st	X+, r23
    3208:	8d 93       	st	X+, r24
    320a:	9c 93       	st	X, r25
    320c:	1f 97       	sbiw	r26, 0x0f	; 15
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    320e:	29 8d       	ldd	r18, Y+25	; 0x19
    3210:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3212:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3214:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3216:	ca 01       	movw	r24, r20
    3218:	b9 01       	movw	r22, r18
    321a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    321e:	6b 01       	movw	r12, r22
    3220:	7c 01       	movw	r14, r24
    3222:	2d 89       	ldd	r18, Y+21	; 0x15
    3224:	3e 89       	ldd	r19, Y+22	; 0x16
    3226:	4f 89       	ldd	r20, Y+23	; 0x17
    3228:	58 8d       	ldd	r21, Y+24	; 0x18
    322a:	ca 01       	movw	r24, r20
    322c:	b9 01       	movw	r22, r18
    322e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3232:	9b 01       	movw	r18, r22
    3234:	ac 01       	movw	r20, r24
    3236:	c7 01       	movw	r24, r14
    3238:	b6 01       	movw	r22, r12
    323a:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    323e:	27 ed       	ldi	r18, 0xD7	; 215
    3240:	33 eb       	ldi	r19, 0xB3	; 179
    3242:	4d ed       	ldi	r20, 0xDD	; 221
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    324a:	f8 01       	movw	r30, r16
    324c:	60 8b       	std	Z+16, r22	; 0x10
    324e:	71 8b       	std	Z+17, r23	; 0x11
    3250:	82 8b       	std	Z+18, r24	; 0x12
    3252:	93 8b       	std	Z+19, r25	; 0x13
  
  ratio = RE / r;
    3254:	a5 01       	movw	r20, r10
    3256:	94 01       	movw	r18, r8
    3258:	6a e9       	ldi	r22, 0x9A	; 154
    325a:	79 e1       	ldi	r23, 0x19	; 25
    325c:	87 ec       	ldi	r24, 0xC7	; 199
    325e:	95 e4       	ldi	r25, 0x45	; 69
    3260:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3264:	6b af       	std	Y+59, r22	; 0x3b
    3266:	7c af       	std	Y+60, r23	; 0x3c
    3268:	8d af       	std	Y+61, r24	; 0x3d
    326a:	9e af       	std	Y+62, r25	; 0x3e
  
  max = (order * (order + 3)) / 2;
    326c:	23 2d       	mov	r18, r3
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	a9 01       	movw	r20, r18
    3272:	4d 5f       	subi	r20, 0xFD	; 253
    3274:	5f 4f       	sbci	r21, 0xFF	; 255
    3276:	24 9f       	mul	r18, r20
    3278:	c0 01       	movw	r24, r0
    327a:	25 9f       	mul	r18, r21
    327c:	90 0d       	add	r25, r0
    327e:	34 9f       	mul	r19, r20
    3280:	90 0d       	add	r25, r0
    3282:	11 24       	eor	r1, r1
    3284:	99 23       	and	r25, r25
    3286:	0c f4       	brge	.+2      	; 0x328a <igrf+0x468>
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	95 95       	asr	r25
    328c:	87 95       	ror	r24
    328e:	8e ab       	std	Y+54, r24	; 0x36
  for(k = 1; k <= max; k++)
    3290:	88 23       	and	r24, r24
    3292:	09 f4       	brne	.+2      	; 0x3296 <igrf+0x474>
    3294:	f6 c3       	rjmp	.+2028   	; 0x3a82 <igrf+0xc60>
    3296:	41 2c       	mov	r4, r1
    3298:	21 2c       	mov	r2, r1
    329a:	33 24       	eor	r3, r3
    329c:	33 94       	inc	r3
    329e:	f1 e0       	ldi	r31, 0x01	; 1
    32a0:	f9 8b       	std	Y+17, r31	; 0x11
    32a2:	19 a6       	std	Y+41, r1	; 0x29
    32a4:	1a a6       	std	Y+42, r1	; 0x2a
    32a6:	1b a6       	std	Y+43, r1	; 0x2b
    32a8:	1c a6       	std	Y+44, r1	; 0x2c
    32aa:	1d a2       	std	Y+37, r1	; 0x25
    32ac:	1e a2       	std	Y+38, r1	; 0x26
    32ae:	1f a2       	std	Y+39, r1	; 0x27
    32b0:	18 a6       	std	Y+40, r1	; 0x28
    32b2:	1f aa       	std	Y+55, r1	; 0x37
    32b4:	18 ae       	std	Y+56, r1	; 0x38
    32b6:	19 ae       	std	Y+57, r1	; 0x39
    32b8:	1a ae       	std	Y+58, r1	; 0x3a
    32ba:	19 a2       	std	Y+33, r1	; 0x21
    32bc:	1a a2       	std	Y+34, r1	; 0x22
    32be:	1b a2       	std	Y+35, r1	; 0x23
    32c0:	1c a2       	std	Y+36, r1	; 0x24
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    32c2:	29 86       	std	Y+9, r2	; 0x09
    32c4:	4d a6       	std	Y+45, r4	; 0x2d
    32c6:	23 2c       	mov	r2, r3
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    32c8:	29 85       	ldd	r18, Y+9	; 0x09
    32ca:	22 15       	cp	r18, r2
    32cc:	d8 f4       	brcc	.+54     	; 0x3304 <igrf+0x4e2>
    {
      m = 0;
      n++;
    32ce:	2f 5f       	subi	r18, 0xFF	; 255
    32d0:	29 87       	std	Y+9, r18	; 0x09
      rr = pow(ratio, n + 2);
    32d2:	62 2f       	mov	r22, r18
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	6e 5f       	subi	r22, 0xFE	; 254
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	07 2e       	mov	r0, r23
    32dc:	00 0c       	add	r0, r0
    32de:	88 0b       	sbc	r24, r24
    32e0:	99 0b       	sbc	r25, r25
    32e2:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    32e6:	9b 01       	movw	r18, r22
    32e8:	ac 01       	movw	r20, r24
    32ea:	6b ad       	ldd	r22, Y+59	; 0x3b
    32ec:	7c ad       	ldd	r23, Y+60	; 0x3c
    32ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    32f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    32f2:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <pow>
    32f6:	69 a7       	std	Y+41, r22	; 0x29
    32f8:	7a a7       	std	Y+42, r23	; 0x2a
    32fa:	8b a7       	std	Y+43, r24	; 0x2b
    32fc:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    32fe:	39 85       	ldd	r19, Y+9	; 0x09
    3300:	3d a7       	std	Y+45, r19	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    3302:	21 2c       	mov	r2, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    3304:	44 e0       	ldi	r20, 0x04	; 4
    3306:	43 15       	cp	r20, r3
    3308:	08 f0       	brcs	.+2      	; 0x330c <igrf+0x4ea>
    330a:	1c c2       	rjmp	.+1080   	; 0x3744 <igrf+0x922>
    {
      if(m == n)
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	28 12       	cpse	r2, r24
    3310:	01 c1       	rjmp	.+514    	; 0x3514 <igrf+0x6f2>
      {
        one = sqrt(1 - (0.5 / fm));
    3312:	42 2c       	mov	r4, r2
    3314:	51 2c       	mov	r5, r1
    3316:	b2 01       	movw	r22, r4
    3318:	05 2c       	mov	r0, r5
    331a:	00 0c       	add	r0, r0
    331c:	88 0b       	sbc	r24, r24
    331e:	99 0b       	sbc	r25, r25
    3320:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3324:	6b 01       	movw	r12, r22
    3326:	7c 01       	movw	r14, r24
    3328:	9b 01       	movw	r18, r22
    332a:	ac 01       	movw	r20, r24
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	9f e3       	ldi	r25, 0x3F	; 63
    3334:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3338:	4b 01       	movw	r8, r22
    333a:	5c 01       	movw	r10, r24
    333c:	a5 01       	movw	r20, r10
    333e:	94 01       	movw	r18, r8
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	80 e8       	ldi	r24, 0x80	; 128
    3346:	9f e3       	ldi	r25, 0x3F	; 63
    3348:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    334c:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    3350:	69 83       	std	Y+1, r22	; 0x01
    3352:	7a 83       	std	Y+2, r23	; 0x02
    3354:	8b 83       	std	Y+3, r24	; 0x03
    3356:	9c 83       	std	Y+4, r25	; 0x04
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    3358:	63 2c       	mov	r6, r3
    335a:	71 2c       	mov	r7, r1
    335c:	43 01       	movw	r8, r6
    335e:	84 18       	sub	r8, r4
    3360:	95 08       	sbc	r9, r5
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	89 1a       	sub	r8, r25
    3366:	91 08       	sbc	r9, r1
    3368:	66 0c       	add	r6, r6
    336a:	77 1c       	adc	r7, r7
    336c:	66 0c       	add	r6, r6
    336e:	77 1c       	adc	r7, r7
    3370:	d3 01       	movw	r26, r6
    3372:	a3 5c       	subi	r26, 0xC3	; 195
    3374:	bc 4f       	sbci	r27, 0xFC	; 252
    3376:	5d 01       	movw	r10, r26
    3378:	a7 01       	movw	r20, r14
    337a:	96 01       	movw	r18, r12
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 e8       	ldi	r24, 0x80	; 128
    3382:	9f e3       	ldi	r25, 0x3F	; 63
    3384:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e8       	ldi	r20, 0x80	; 128
    338e:	5f e3       	ldi	r21, 0x3F	; 63
    3390:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3394:	29 81       	ldd	r18, Y+1	; 0x01
    3396:	3a 81       	ldd	r19, Y+2	; 0x02
    3398:	4b 81       	ldd	r20, Y+3	; 0x03
    339a:	5c 81       	ldd	r21, Y+4	; 0x04
    339c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    33a0:	2d 89       	ldd	r18, Y+21	; 0x15
    33a2:	3e 89       	ldd	r19, Y+22	; 0x16
    33a4:	4f 89       	ldd	r20, Y+23	; 0x17
    33a6:	58 8d       	ldd	r21, Y+24	; 0x18
    33a8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    33ac:	88 0c       	add	r8, r8
    33ae:	99 1c       	adc	r9, r9
    33b0:	88 0c       	add	r8, r8
    33b2:	99 1c       	adc	r9, r9
    33b4:	84 01       	movw	r16, r8
    33b6:	03 5c       	subi	r16, 0xC3	; 195
    33b8:	1c 4f       	sbci	r17, 0xFC	; 252
    33ba:	f8 01       	movw	r30, r16
    33bc:	20 81       	ld	r18, Z
    33be:	31 81       	ldd	r19, Z+1	; 0x01
    33c0:	42 81       	ldd	r20, Z+2	; 0x02
    33c2:	53 81       	ldd	r21, Z+3	; 0x03
    33c4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    33c8:	d5 01       	movw	r26, r10
    33ca:	6d 93       	st	X+, r22
    33cc:	7d 93       	st	X+, r23
    33ce:	8d 93       	st	X+, r24
    33d0:	9c 93       	st	X, r25
    33d2:	13 97       	sbiw	r26, 0x03	; 3
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    33d4:	f3 01       	movw	r30, r6
    33d6:	eb 58       	subi	r30, 0x8B	; 139
    33d8:	fd 4f       	sbci	r31, 0xFD	; 253
    33da:	5f 01       	movw	r10, r30
    33dc:	f4 01       	movw	r30, r8
    33de:	eb 58       	subi	r30, 0x8B	; 139
    33e0:	fd 4f       	sbci	r31, 0xFD	; 253
    33e2:	20 81       	ld	r18, Z
    33e4:	31 81       	ldd	r19, Z+1	; 0x01
    33e6:	42 81       	ldd	r20, Z+2	; 0x02
    33e8:	53 81       	ldd	r21, Z+3	; 0x03
    33ea:	6d 89       	ldd	r22, Y+21	; 0x15
    33ec:	7e 89       	ldd	r23, Y+22	; 0x16
    33ee:	8f 89       	ldd	r24, Y+23	; 0x17
    33f0:	98 8d       	ldd	r25, Y+24	; 0x18
    33f2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    33f6:	3b 01       	movw	r6, r22
    33f8:	4c 01       	movw	r8, r24
    33fa:	d8 01       	movw	r26, r16
    33fc:	2d 91       	ld	r18, X+
    33fe:	3d 91       	ld	r19, X+
    3400:	4d 91       	ld	r20, X+
    3402:	5c 91       	ld	r21, X
    3404:	69 8d       	ldd	r22, Y+25	; 0x19
    3406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    340a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    340c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3410:	a7 01       	movw	r20, r14
    3412:	96 01       	movw	r18, r12
    3414:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3418:	9b 01       	movw	r18, r22
    341a:	ac 01       	movw	r20, r24
    341c:	c4 01       	movw	r24, r8
    341e:	b3 01       	movw	r22, r6
    3420:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3424:	29 81       	ldd	r18, Y+1	; 0x01
    3426:	3a 81       	ldd	r19, Y+2	; 0x02
    3428:	4b 81       	ldd	r20, Y+3	; 0x03
    342a:	5c 81       	ldd	r21, Y+4	; 0x04
    342c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3430:	f5 01       	movw	r30, r10
    3432:	60 83       	st	Z, r22
    3434:	71 83       	std	Z+1, r23	; 0x01
    3436:	82 83       	std	Z+2, r24	; 0x02
    3438:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    343a:	82 01       	movw	r16, r4
    343c:	01 50       	subi	r16, 0x01	; 1
    343e:	11 09       	sbc	r17, r1
    3440:	c0 90 3d 02 	lds	r12, 0x023D	; 0x80023d <cl+0x4>
    3444:	d0 90 3e 02 	lds	r13, 0x023E	; 0x80023e <cl+0x5>
    3448:	e0 90 3f 02 	lds	r14, 0x023F	; 0x80023f <cl+0x6>
    344c:	f0 90 40 02 	lds	r15, 0x0240	; 0x800240 <cl+0x7>
    3450:	00 0f       	add	r16, r16
    3452:	11 1f       	adc	r17, r17
    3454:	00 0f       	add	r16, r16
    3456:	11 1f       	adc	r17, r17
    3458:	f8 01       	movw	r30, r16
    345a:	e7 5c       	subi	r30, 0xC7	; 199
    345c:	fd 4f       	sbci	r31, 0xFD	; 253
    345e:	80 80       	ld	r8, Z
    3460:	91 80       	ldd	r9, Z+1	; 0x01
    3462:	a2 80       	ldd	r10, Z+2	; 0x02
    3464:	b3 80       	ldd	r11, Z+3	; 0x03
    3466:	44 0c       	add	r4, r4
    3468:	55 1c       	adc	r5, r5
    346a:	44 0c       	add	r4, r4
    346c:	55 1c       	adc	r5, r5
    346e:	92 01       	movw	r18, r4
    3470:	23 50       	subi	r18, 0x03	; 3
    3472:	3e 4f       	sbci	r19, 0xFE	; 254
    3474:	39 01       	movw	r6, r18
    3476:	03 50       	subi	r16, 0x03	; 3
    3478:	1e 4f       	sbci	r17, 0xFE	; 254
    347a:	d8 01       	movw	r26, r16
    347c:	2d 91       	ld	r18, X+
    347e:	3d 91       	ld	r19, X+
    3480:	4d 91       	ld	r20, X+
    3482:	5c 91       	ld	r21, X
    3484:	c7 01       	movw	r24, r14
    3486:	b6 01       	movw	r22, r12
    3488:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    348c:	69 83       	std	Y+1, r22	; 0x01
    348e:	7a 83       	std	Y+2, r23	; 0x02
    3490:	8b 83       	std	Y+3, r24	; 0x03
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    3498:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    349c:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    34a0:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    34a4:	c5 01       	movw	r24, r10
    34a6:	b4 01       	movw	r22, r8
    34a8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    34ac:	9b 01       	movw	r18, r22
    34ae:	ac 01       	movw	r20, r24
    34b0:	69 81       	ldd	r22, Y+1	; 0x01
    34b2:	7a 81       	ldd	r23, Y+2	; 0x02
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    34bc:	f3 01       	movw	r30, r6
    34be:	60 83       	st	Z, r22
    34c0:	71 83       	std	Z+1, r23	; 0x01
    34c2:	82 83       	std	Z+2, r24	; 0x02
    34c4:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    34c6:	92 01       	movw	r18, r4
    34c8:	27 5c       	subi	r18, 0xC7	; 199
    34ca:	3d 4f       	sbci	r19, 0xFD	; 253
    34cc:	29 01       	movw	r4, r18
    34ce:	a5 01       	movw	r20, r10
    34d0:	94 01       	movw	r18, r8
    34d2:	c7 01       	movw	r24, r14
    34d4:	b6 01       	movw	r22, r12
    34d6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    34da:	6b 01       	movw	r12, r22
    34dc:	7c 01       	movw	r14, r24
    34de:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    34e2:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    34e6:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    34ea:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    34ee:	d8 01       	movw	r26, r16
    34f0:	6d 91       	ld	r22, X+
    34f2:	7d 91       	ld	r23, X+
    34f4:	8d 91       	ld	r24, X+
    34f6:	9c 91       	ld	r25, X
    34f8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	c7 01       	movw	r24, r14
    3502:	b6 01       	movw	r22, r12
    3504:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3508:	f2 01       	movw	r30, r4
    350a:	60 83       	st	Z, r22
    350c:	71 83       	std	Z+1, r23	; 0x01
    350e:	82 83       	std	Z+2, r24	; 0x02
    3510:	93 83       	std	Z+3, r25	; 0x03
    3512:	18 c1       	rjmp	.+560    	; 0x3744 <igrf+0x922>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    3514:	fd a5       	ldd	r31, Y+45	; 0x2d
    3516:	0f 2f       	mov	r16, r31
    3518:	10 e0       	ldi	r17, 0x00	; 0
    351a:	22 9c       	mul	r2, r2
    351c:	60 01       	movw	r12, r0
    351e:	11 24       	eor	r1, r1
    3520:	00 9f       	mul	r16, r16
    3522:	40 01       	movw	r8, r0
    3524:	01 9f       	mul	r16, r17
    3526:	90 0c       	add	r9, r0
    3528:	90 0c       	add	r9, r0
    352a:	11 24       	eor	r1, r1
    352c:	8c 18       	sub	r8, r12
    352e:	9d 08       	sbc	r9, r13
    3530:	09 2c       	mov	r0, r9
    3532:	00 0c       	add	r0, r0
    3534:	aa 08       	sbc	r10, r10
    3536:	bb 08       	sbc	r11, r11
    3538:	c5 01       	movw	r24, r10
    353a:	b4 01       	movw	r22, r8
    353c:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3540:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    3544:	4b 01       	movw	r8, r22
    3546:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    3548:	b8 01       	movw	r22, r16
    354a:	11 0f       	add	r17, r17
    354c:	88 0b       	sbc	r24, r24
    354e:	99 0b       	sbc	r25, r25
    3550:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3554:	69 83       	std	Y+1, r22	; 0x01
    3556:	7a 83       	std	Y+2, r23	; 0x02
    3558:	8b 83       	std	Y+3, r24	; 0x03
    355a:	9c 83       	std	Y+4, r25	; 0x04
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e8       	ldi	r20, 0x80	; 128
    3562:	5f e3       	ldi	r21, 0x3F	; 63
    3564:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3568:	6d 83       	std	Y+5, r22	; 0x05
    356a:	7e 83       	std	Y+6, r23	; 0x06
    356c:	8f 83       	std	Y+7, r24	; 0x07
    356e:	98 87       	std	Y+8, r25	; 0x08
    3570:	9b 01       	movw	r18, r22
    3572:	ac 01       	movw	r20, r24
    3574:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3578:	2b 01       	movw	r4, r22
    357a:	3c 01       	movw	r6, r24
    357c:	0d 2c       	mov	r0, r13
    357e:	00 0c       	add	r0, r0
    3580:	ee 08       	sbc	r14, r14
    3582:	ff 08       	sbc	r15, r15
    3584:	c7 01       	movw	r24, r14
    3586:	b6 01       	movw	r22, r12
    3588:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    358c:	9b 01       	movw	r18, r22
    358e:	ac 01       	movw	r20, r24
    3590:	c3 01       	movw	r24, r6
    3592:	b2 01       	movw	r22, r4
    3594:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3598:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    359c:	a5 01       	movw	r20, r10
    359e:	94 01       	movw	r18, r8
    35a0:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    35a4:	6b 01       	movw	r12, r22
    35a6:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    35a8:	29 81       	ldd	r18, Y+1	; 0x01
    35aa:	3a 81       	ldd	r19, Y+2	; 0x02
    35ac:	4b 81       	ldd	r20, Y+3	; 0x03
    35ae:	5c 81       	ldd	r21, Y+4	; 0x04
    35b0:	ca 01       	movw	r24, r20
    35b2:	b9 01       	movw	r22, r18
    35b4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e8       	ldi	r20, 0x80	; 128
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    35c4:	a5 01       	movw	r20, r10
    35c6:	94 01       	movw	r18, r8
    35c8:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    35cc:	6d 87       	std	Y+13, r22	; 0x0d
    35ce:	7e 87       	std	Y+14, r23	; 0x0e
    35d0:	8f 87       	std	Y+15, r24	; 0x0f
    35d2:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    35d4:	83 2d       	mov	r24, r3
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	49 85       	ldd	r20, Y+9	; 0x09
    35da:	24 2f       	mov	r18, r20
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4c 01       	movw	r8, r24
    35e0:	82 1a       	sub	r8, r18
    35e2:	93 0a       	sbc	r9, r19
    35e4:	84 01       	movw	r16, r8
    35e6:	02 1b       	sub	r16, r18
    35e8:	13 0b       	sbc	r17, r19
    35ea:	0f 5f       	subi	r16, 0xFF	; 255
    35ec:	1f 4f       	sbci	r17, 0xFF	; 255
    35ee:	3c 01       	movw	r6, r24
    35f0:	66 0c       	add	r6, r6
    35f2:	77 1c       	adc	r7, r7
    35f4:	66 0c       	add	r6, r6
    35f6:	77 1c       	adc	r7, r7
    35f8:	c3 01       	movw	r24, r6
    35fa:	83 5c       	subi	r24, 0xC3	; 195
    35fc:	9c 4f       	sbci	r25, 0xFC	; 252
    35fe:	5c 01       	movw	r10, r24
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	69 81       	ldd	r22, Y+1	; 0x01
    360a:	7a 81       	ldd	r23, Y+2	; 0x02
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	9c 81       	ldd	r25, Y+4	; 0x04
    3610:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3614:	6d 8f       	std	Y+29, r22	; 0x1d
    3616:	7e 8f       	std	Y+30, r23	; 0x1e
    3618:	8f 8f       	std	Y+31, r24	; 0x1f
    361a:	98 a3       	std	Y+32, r25	; 0x20
    361c:	29 8d       	ldd	r18, Y+25	; 0x19
    361e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3620:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3622:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3624:	6d 85       	ldd	r22, Y+13	; 0x0d
    3626:	7e 85       	ldd	r23, Y+14	; 0x0e
    3628:	8f 85       	ldd	r24, Y+15	; 0x0f
    362a:	98 89       	ldd	r25, Y+16	; 0x10
    362c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3630:	88 0c       	add	r8, r8
    3632:	99 1c       	adc	r9, r9
    3634:	88 0c       	add	r8, r8
    3636:	99 1c       	adc	r9, r9
    3638:	d4 01       	movw	r26, r8
    363a:	a3 5c       	subi	r26, 0xC3	; 195
    363c:	bc 4f       	sbci	r27, 0xFC	; 252
    363e:	2d 01       	movw	r4, r26
    3640:	2d 91       	ld	r18, X+
    3642:	3d 91       	ld	r19, X+
    3644:	4d 91       	ld	r20, X+
    3646:	5c 91       	ld	r21, X
    3648:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    364c:	29 81       	ldd	r18, Y+1	; 0x01
    364e:	3a 81       	ldd	r19, Y+2	; 0x02
    3650:	4b 81       	ldd	r20, Y+3	; 0x03
    3652:	5c 81       	ldd	r21, Y+4	; 0x04
    3654:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3658:	6a ab       	std	Y+50, r22	; 0x32
    365a:	7b ab       	std	Y+51, r23	; 0x33
    365c:	8c ab       	std	Y+52, r24	; 0x34
    365e:	9d ab       	std	Y+53, r25	; 0x35
    3660:	00 0f       	add	r16, r16
    3662:	11 1f       	adc	r17, r17
    3664:	00 0f       	add	r16, r16
    3666:	11 1f       	adc	r17, r17
    3668:	f8 01       	movw	r30, r16
    366a:	e3 5c       	subi	r30, 0xC3	; 195
    366c:	fc 4f       	sbci	r31, 0xFC	; 252
    366e:	20 81       	ld	r18, Z
    3670:	31 81       	ldd	r19, Z+1	; 0x01
    3672:	42 81       	ldd	r20, Z+2	; 0x02
    3674:	53 81       	ldd	r21, Z+3	; 0x03
    3676:	c7 01       	movw	r24, r14
    3678:	b6 01       	movw	r22, r12
    367a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    367e:	2d 81       	ldd	r18, Y+5	; 0x05
    3680:	3e 81       	ldd	r19, Y+6	; 0x06
    3682:	4f 81       	ldd	r20, Y+7	; 0x07
    3684:	58 85       	ldd	r21, Y+8	; 0x08
    3686:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    368a:	9b 01       	movw	r18, r22
    368c:	ac 01       	movw	r20, r24
    368e:	6a a9       	ldd	r22, Y+50	; 0x32
    3690:	7b a9       	ldd	r23, Y+51	; 0x33
    3692:	8c a9       	ldd	r24, Y+52	; 0x34
    3694:	9d a9       	ldd	r25, Y+53	; 0x35
    3696:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    369a:	9b 01       	movw	r18, r22
    369c:	ac 01       	movw	r20, r24
    369e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    36a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36a4:	98 a1       	ldd	r25, Y+32	; 0x20
    36a6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    36aa:	f5 01       	movw	r30, r10
    36ac:	60 83       	st	Z, r22
    36ae:	71 83       	std	Z+1, r23	; 0x01
    36b0:	82 83       	std	Z+2, r24	; 0x02
    36b2:	93 83       	std	Z+3, r25	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    36b4:	93 01       	movw	r18, r6
    36b6:	2b 58       	subi	r18, 0x8B	; 139
    36b8:	3d 4f       	sbci	r19, 0xFD	; 253
    36ba:	39 01       	movw	r6, r18
    36bc:	f4 01       	movw	r30, r8
    36be:	eb 58       	subi	r30, 0x8B	; 139
    36c0:	fd 4f       	sbci	r31, 0xFD	; 253
    36c2:	20 81       	ld	r18, Z
    36c4:	31 81       	ldd	r19, Z+1	; 0x01
    36c6:	42 81       	ldd	r20, Z+2	; 0x02
    36c8:	53 81       	ldd	r21, Z+3	; 0x03
    36ca:	69 8d       	ldd	r22, Y+25	; 0x19
    36cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    36d6:	4b 01       	movw	r8, r22
    36d8:	5c 01       	movw	r10, r24
    36da:	d2 01       	movw	r26, r4
    36dc:	2d 91       	ld	r18, X+
    36de:	3d 91       	ld	r19, X+
    36e0:	4d 91       	ld	r20, X+
    36e2:	5c 91       	ld	r21, X
    36e4:	6d 89       	ldd	r22, Y+21	; 0x15
    36e6:	7e 89       	ldd	r23, Y+22	; 0x16
    36e8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ea:	98 8d       	ldd	r25, Y+24	; 0x18
    36ec:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    36f0:	29 81       	ldd	r18, Y+1	; 0x01
    36f2:	3a 81       	ldd	r19, Y+2	; 0x02
    36f4:	4b 81       	ldd	r20, Y+3	; 0x03
    36f6:	5c 81       	ldd	r21, Y+4	; 0x04
    36f8:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    36fc:	9b 01       	movw	r18, r22
    36fe:	ac 01       	movw	r20, r24
    3700:	c5 01       	movw	r24, r10
    3702:	b4 01       	movw	r22, r8
    3704:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3708:	2d 85       	ldd	r18, Y+13	; 0x0d
    370a:	3e 85       	ldd	r19, Y+14	; 0x0e
    370c:	4f 85       	ldd	r20, Y+15	; 0x0f
    370e:	58 89       	ldd	r21, Y+16	; 0x10
    3710:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3714:	4b 01       	movw	r8, r22
    3716:	5c 01       	movw	r10, r24
    3718:	f8 01       	movw	r30, r16
    371a:	eb 58       	subi	r30, 0x8B	; 139
    371c:	fd 4f       	sbci	r31, 0xFD	; 253
    371e:	20 81       	ld	r18, Z
    3720:	31 81       	ldd	r19, Z+1	; 0x01
    3722:	42 81       	ldd	r20, Z+2	; 0x02
    3724:	53 81       	ldd	r21, Z+3	; 0x03
    3726:	c7 01       	movw	r24, r14
    3728:	b6 01       	movw	r22, r12
    372a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    372e:	9b 01       	movw	r18, r22
    3730:	ac 01       	movw	r20, r24
    3732:	c5 01       	movw	r24, r10
    3734:	b4 01       	movw	r22, r8
    3736:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    373a:	f3 01       	movw	r30, r6
    373c:	60 83       	st	Z, r22
    373e:	71 83       	std	Z+1, r23	; 0x01
    3740:	82 83       	std	Z+2, r24	; 0x02
    3742:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    3744:	f9 89       	ldd	r31, Y+17	; 0x11
    3746:	0f 2f       	mov	r16, r31
    3748:	10 e0       	ldi	r17, 0x00	; 0
    374a:	c8 01       	movw	r24, r16
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	fc 01       	movw	r30, r24
    3756:	e4 54       	subi	r30, 0x44	; 68
    3758:	fb 4f       	sbci	r31, 0xFB	; 251
    375a:	c5 90       	lpm	r12, Z+
    375c:	d5 90       	lpm	r13, Z+
    375e:	e5 90       	lpm	r14, Z+
    3760:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    3762:	fc 01       	movw	r30, r24
    3764:	e4 55       	subi	r30, 0x54	; 84
    3766:	fe 4f       	sbci	r31, 0xFE	; 254
    3768:	25 91       	lpm	r18, Z+
    376a:	35 91       	lpm	r19, Z+
    376c:	45 91       	lpm	r20, Z+
    376e:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3770:	6e a5       	ldd	r22, Y+46	; 0x2e
    3772:	7f a5       	ldd	r23, Y+47	; 0x2f
    3774:	88 a9       	ldd	r24, Y+48	; 0x30
    3776:	99 a9       	ldd	r25, Y+49	; 0x31
    3778:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    377c:	9b 01       	movw	r18, r22
    377e:	ac 01       	movw	r20, r24
    3780:	c7 01       	movw	r24, r14
    3782:	b6 01       	movw	r22, r12
    3784:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3788:	29 a5       	ldd	r18, Y+41	; 0x29
    378a:	3a a5       	ldd	r19, Y+42	; 0x2a
    378c:	4b a5       	ldd	r20, Y+43	; 0x2b
    378e:	5c a5       	ldd	r21, Y+44	; 0x2c
    3790:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3794:	69 83       	std	Y+1, r22	; 0x01
    3796:	7a 83       	std	Y+2, r23	; 0x02
    3798:	8b 83       	std	Y+3, r24	; 0x03
    379a:	9c 83       	std	Y+4, r25	; 0x04
    
    
    if(m == 0)
    379c:	21 10       	cpse	r2, r1
    379e:	38 c0       	rjmp	.+112    	; 0x3810 <igrf+0x9ee>
    {
      x += one * q[k];
    37a0:	03 2d       	mov	r16, r3
    37a2:	10 e0       	ldi	r17, 0x00	; 0
    37a4:	00 0f       	add	r16, r16
    37a6:	11 1f       	adc	r17, r17
    37a8:	00 0f       	add	r16, r16
    37aa:	11 1f       	adc	r17, r17
    37ac:	f8 01       	movw	r30, r16
    37ae:	eb 58       	subi	r30, 0x8B	; 139
    37b0:	fd 4f       	sbci	r31, 0xFD	; 253
    37b2:	20 81       	ld	r18, Z
    37b4:	31 81       	ldd	r19, Z+1	; 0x01
    37b6:	42 81       	ldd	r20, Z+2	; 0x02
    37b8:	53 81       	ldd	r21, Z+3	; 0x03
    37ba:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    37be:	9b 01       	movw	r18, r22
    37c0:	ac 01       	movw	r20, r24
    37c2:	69 a1       	ldd	r22, Y+33	; 0x21
    37c4:	7a a1       	ldd	r23, Y+34	; 0x22
    37c6:	8b a1       	ldd	r24, Y+35	; 0x23
    37c8:	9c a1       	ldd	r25, Y+36	; 0x24
    37ca:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    37ce:	69 a3       	std	Y+33, r22	; 0x21
    37d0:	7a a3       	std	Y+34, r23	; 0x22
    37d2:	8b a3       	std	Y+35, r24	; 0x23
    37d4:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    37d6:	f8 01       	movw	r30, r16
    37d8:	e3 5c       	subi	r30, 0xC3	; 195
    37da:	fc 4f       	sbci	r31, 0xFC	; 252
    37dc:	20 81       	ld	r18, Z
    37de:	31 81       	ldd	r19, Z+1	; 0x01
    37e0:	42 81       	ldd	r20, Z+2	; 0x02
    37e2:	53 81       	ldd	r21, Z+3	; 0x03
    37e4:	69 81       	ldd	r22, Y+1	; 0x01
    37e6:	7a 81       	ldd	r23, Y+2	; 0x02
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	9c 81       	ldd	r25, Y+4	; 0x04
    37ec:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    37f0:	9b 01       	movw	r18, r22
    37f2:	ac 01       	movw	r20, r24
    37f4:	6d a1       	ldd	r22, Y+37	; 0x25
    37f6:	7e a1       	ldd	r23, Y+38	; 0x26
    37f8:	8f a1       	ldd	r24, Y+39	; 0x27
    37fa:	98 a5       	ldd	r25, Y+40	; 0x28
    37fc:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3800:	6d a3       	std	Y+37, r22	; 0x25
    3802:	7e a3       	std	Y+38, r23	; 0x26
    3804:	8f a3       	std	Y+39, r24	; 0x27
    3806:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    3808:	29 89       	ldd	r18, Y+17	; 0x11
    380a:	2f 5f       	subi	r18, 0xFF	; 255
    380c:	29 8b       	std	Y+17, r18	; 0x11
    380e:	32 c1       	rjmp	.+612    	; 0x3a74 <igrf+0xc52>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    3810:	c8 01       	movw	r24, r16
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	fc 01       	movw	r30, r24
    381e:	e4 54       	subi	r30, 0x44	; 68
    3820:	fb 4f       	sbci	r31, 0xFB	; 251
    3822:	85 90       	lpm	r8, Z+
    3824:	95 90       	lpm	r9, Z+
    3826:	a5 90       	lpm	r10, Z+
    3828:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    382a:	84 55       	subi	r24, 0x54	; 84
    382c:	9e 4f       	sbci	r25, 0xFE	; 254
    382e:	fc 01       	movw	r30, r24
    3830:	25 91       	lpm	r18, Z+
    3832:	35 91       	lpm	r19, Z+
    3834:	45 91       	lpm	r20, Z+
    3836:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    3838:	6e a5       	ldd	r22, Y+46	; 0x2e
    383a:	7f a5       	ldd	r23, Y+47	; 0x2f
    383c:	88 a9       	ldd	r24, Y+48	; 0x30
    383e:	99 a9       	ldd	r25, Y+49	; 0x31
    3840:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3844:	9b 01       	movw	r18, r22
    3846:	ac 01       	movw	r20, r24
    3848:	c5 01       	movw	r24, r10
    384a:	b4 01       	movw	r22, r8
    384c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3850:	29 a5       	ldd	r18, Y+41	; 0x29
    3852:	3a a5       	ldd	r19, Y+42	; 0x2a
    3854:	4b a5       	ldd	r20, Y+43	; 0x2b
    3856:	5c a5       	ldd	r21, Y+44	; 0x2c
    3858:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    385c:	6d 87       	std	Y+13, r22	; 0x0d
    385e:	7e 87       	std	Y+14, r23	; 0x0e
    3860:	8f 87       	std	Y+15, r24	; 0x0f
    3862:	98 8b       	std	Y+16, r25	; 0x10
      three = one * cl[m] + two * sl[m];
    3864:	02 2d       	mov	r16, r2
    3866:	10 e0       	ldi	r17, 0x00	; 0
    3868:	c8 01       	movw	r24, r16
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	fc 01       	movw	r30, r24
    3874:	e7 5c       	subi	r30, 0xC7	; 199
    3876:	fd 4f       	sbci	r31, 0xFD	; 253
    3878:	c0 80       	ld	r12, Z
    387a:	d1 80       	ldd	r13, Z+1	; 0x01
    387c:	e2 80       	ldd	r14, Z+2	; 0x02
    387e:	f3 80       	ldd	r15, Z+3	; 0x03
    3880:	fc 01       	movw	r30, r24
    3882:	e3 50       	subi	r30, 0x03	; 3
    3884:	fe 4f       	sbci	r31, 0xFE	; 254
    3886:	40 80       	ld	r4, Z
    3888:	51 80       	ldd	r5, Z+1	; 0x01
    388a:	62 80       	ldd	r6, Z+2	; 0x02
    388c:	73 80       	ldd	r7, Z+3	; 0x03
    388e:	29 81       	ldd	r18, Y+1	; 0x01
    3890:	3a 81       	ldd	r19, Y+2	; 0x02
    3892:	4b 81       	ldd	r20, Y+3	; 0x03
    3894:	5c 81       	ldd	r21, Y+4	; 0x04
    3896:	c7 01       	movw	r24, r14
    3898:	b6 01       	movw	r22, r12
    389a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    389e:	4b 01       	movw	r8, r22
    38a0:	5c 01       	movw	r10, r24
    38a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    38a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    38a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    38a8:	58 89       	ldd	r21, Y+16	; 0x10
    38aa:	c3 01       	movw	r24, r6
    38ac:	b2 01       	movw	r22, r4
    38ae:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    38b2:	9b 01       	movw	r18, r22
    38b4:	ac 01       	movw	r20, r24
    38b6:	c5 01       	movw	r24, r10
    38b8:	b4 01       	movw	r22, r8
    38ba:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    38be:	6d 83       	std	Y+5, r22	; 0x05
    38c0:	7e 83       	std	Y+6, r23	; 0x06
    38c2:	8f 83       	std	Y+7, r24	; 0x07
    38c4:	98 87       	std	Y+8, r25	; 0x08
      x += three * q[k];
    38c6:	a3 2c       	mov	r10, r3
    38c8:	b1 2c       	mov	r11, r1
    38ca:	aa 0c       	add	r10, r10
    38cc:	bb 1c       	adc	r11, r11
    38ce:	aa 0c       	add	r10, r10
    38d0:	bb 1c       	adc	r11, r11
    38d2:	95 01       	movw	r18, r10
    38d4:	2b 58       	subi	r18, 0x8B	; 139
    38d6:	3d 4f       	sbci	r19, 0xFD	; 253
    38d8:	d9 01       	movw	r26, r18
    38da:	8d 91       	ld	r24, X+
    38dc:	9d 91       	ld	r25, X+
    38de:	0d 90       	ld	r0, X+
    38e0:	bc 91       	ld	r27, X
    38e2:	a0 2d       	mov	r26, r0
    38e4:	8d 8f       	std	Y+29, r24	; 0x1d
    38e6:	9e 8f       	std	Y+30, r25	; 0x1e
    38e8:	af 8f       	std	Y+31, r26	; 0x1f
    38ea:	b8 a3       	std	Y+32, r27	; 0x20
    38ec:	2d 81       	ldd	r18, Y+5	; 0x05
    38ee:	3e 81       	ldd	r19, Y+6	; 0x06
    38f0:	4f 81       	ldd	r20, Y+7	; 0x07
    38f2:	58 85       	ldd	r21, Y+8	; 0x08
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    38fc:	9b 01       	movw	r18, r22
    38fe:	ac 01       	movw	r20, r24
    3900:	69 a1       	ldd	r22, Y+33	; 0x21
    3902:	7a a1       	ldd	r23, Y+34	; 0x22
    3904:	8b a1       	ldd	r24, Y+35	; 0x23
    3906:	9c a1       	ldd	r25, Y+36	; 0x24
    3908:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    390c:	69 a3       	std	Y+33, r22	; 0x21
    390e:	7a a3       	std	Y+34, r23	; 0x22
    3910:	8b a3       	std	Y+35, r24	; 0x23
    3912:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    3914:	f5 01       	movw	r30, r10
    3916:	e3 5c       	subi	r30, 0xC3	; 195
    3918:	fc 4f       	sbci	r31, 0xFC	; 252
    391a:	80 80       	ld	r8, Z
    391c:	91 80       	ldd	r9, Z+1	; 0x01
    391e:	a2 80       	ldd	r10, Z+2	; 0x02
    3920:	b3 80       	ldd	r11, Z+3	; 0x03
    3922:	2d 81       	ldd	r18, Y+5	; 0x05
    3924:	3e 81       	ldd	r19, Y+6	; 0x06
    3926:	4f 81       	ldd	r20, Y+7	; 0x07
    3928:	58 85       	ldd	r21, Y+8	; 0x08
    392a:	c5 01       	movw	r24, r10
    392c:	b4 01       	movw	r22, r8
    392e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3932:	9b 01       	movw	r18, r22
    3934:	ac 01       	movw	r20, r24
    3936:	6d a1       	ldd	r22, Y+37	; 0x25
    3938:	7e a1       	ldd	r23, Y+38	; 0x26
    393a:	8f a1       	ldd	r24, Y+39	; 0x27
    393c:	98 a5       	ldd	r25, Y+40	; 0x28
    393e:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3942:	6d a3       	std	Y+37, r22	; 0x25
    3944:	7e a3       	std	Y+38, r23	; 0x26
    3946:	8f a3       	std	Y+39, r24	; 0x27
    3948:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	a9 01       	movw	r20, r18
    3950:	6d 89       	ldd	r22, Y+21	; 0x15
    3952:	7e 89       	ldd	r23, Y+22	; 0x16
    3954:	8f 89       	ldd	r24, Y+23	; 0x17
    3956:	98 8d       	ldd	r25, Y+24	; 0x18
    3958:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    395c:	18 16       	cp	r1, r24
    395e:	0c f0       	brlt	.+2      	; 0x3962 <igrf+0xb40>
    3960:	54 c0       	rjmp	.+168    	; 0x3a0a <igrf+0xbe8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    3962:	a3 01       	movw	r20, r6
    3964:	92 01       	movw	r18, r4
    3966:	69 81       	ldd	r22, Y+1	; 0x01
    3968:	7a 81       	ldd	r23, Y+2	; 0x02
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3972:	2b 01       	movw	r4, r22
    3974:	3c 01       	movw	r6, r24
    3976:	a7 01       	movw	r20, r14
    3978:	96 01       	movw	r18, r12
    397a:	6d 85       	ldd	r22, Y+13	; 0x0d
    397c:	7e 85       	ldd	r23, Y+14	; 0x0e
    397e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3980:	98 89       	ldd	r25, Y+16	; 0x10
    3982:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3986:	9b 01       	movw	r18, r22
    3988:	ac 01       	movw	r20, r24
    398a:	c3 01       	movw	r24, r6
    398c:	b2 01       	movw	r22, r4
    398e:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3992:	6b 01       	movw	r12, r22
    3994:	7c 01       	movw	r14, r24
    3996:	b8 01       	movw	r22, r16
    3998:	11 0f       	add	r17, r17
    399a:	88 0b       	sbc	r24, r24
    399c:	99 0b       	sbc	r25, r25
    399e:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    39a2:	9b 01       	movw	r18, r22
    39a4:	ac 01       	movw	r20, r24
    39a6:	c7 01       	movw	r24, r14
    39a8:	b6 01       	movw	r22, r12
    39aa:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    39ae:	9b 01       	movw	r18, r22
    39b0:	ac 01       	movw	r20, r24
    39b2:	c5 01       	movw	r24, r10
    39b4:	b4 01       	movw	r22, r8
    39b6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    39ba:	6b 01       	movw	r12, r22
    39bc:	7c 01       	movw	r14, r24
    39be:	bd a5       	ldd	r27, Y+45	; 0x2d
    39c0:	6b 2f       	mov	r22, r27
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e8       	ldi	r20, 0x80	; 128
    39d2:	5f e3       	ldi	r21, 0x3F	; 63
    39d4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    39d8:	2d 89       	ldd	r18, Y+21	; 0x15
    39da:	3e 89       	ldd	r19, Y+22	; 0x16
    39dc:	4f 89       	ldd	r20, Y+23	; 0x17
    39de:	58 8d       	ldd	r21, Y+24	; 0x18
    39e0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    39e4:	9b 01       	movw	r18, r22
    39e6:	ac 01       	movw	r20, r24
    39e8:	c7 01       	movw	r24, r14
    39ea:	b6 01       	movw	r22, r12
    39ec:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    39f0:	9b 01       	movw	r18, r22
    39f2:	ac 01       	movw	r20, r24
    39f4:	6f a9       	ldd	r22, Y+55	; 0x37
    39f6:	78 ad       	ldd	r23, Y+56	; 0x38
    39f8:	89 ad       	ldd	r24, Y+57	; 0x39
    39fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    39fc:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3a00:	6f ab       	std	Y+55, r22	; 0x37
    3a02:	78 af       	std	Y+56, r23	; 0x38
    3a04:	89 af       	std	Y+57, r24	; 0x39
    3a06:	9a af       	std	Y+58, r25	; 0x3a
    3a08:	32 c0       	rjmp	.+100    	; 0x3a6e <igrf+0xc4c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    3a0a:	a3 01       	movw	r20, r6
    3a0c:	92 01       	movw	r18, r4
    3a0e:	69 81       	ldd	r22, Y+1	; 0x01
    3a10:	7a 81       	ldd	r23, Y+2	; 0x02
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	9c 81       	ldd	r25, Y+4	; 0x04
    3a16:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3a1a:	4b 01       	movw	r8, r22
    3a1c:	5c 01       	movw	r10, r24
    3a1e:	a7 01       	movw	r20, r14
    3a20:	96 01       	movw	r18, r12
    3a22:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a24:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a28:	98 89       	ldd	r25, Y+16	; 0x10
    3a2a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3a2e:	9b 01       	movw	r18, r22
    3a30:	ac 01       	movw	r20, r24
    3a32:	c5 01       	movw	r24, r10
    3a34:	b4 01       	movw	r22, r8
    3a36:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    3a3a:	9b 01       	movw	r18, r22
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a40:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a44:	98 a1       	ldd	r25, Y+32	; 0x20
    3a46:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3a4a:	29 8d       	ldd	r18, Y+25	; 0x19
    3a4c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3a4e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3a50:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3a52:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3a56:	9b 01       	movw	r18, r22
    3a58:	ac 01       	movw	r20, r24
    3a5a:	6f a9       	ldd	r22, Y+55	; 0x37
    3a5c:	78 ad       	ldd	r23, Y+56	; 0x38
    3a5e:	89 ad       	ldd	r24, Y+57	; 0x39
    3a60:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a62:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    3a66:	6f ab       	std	Y+55, r22	; 0x37
    3a68:	78 af       	std	Y+56, r23	; 0x38
    3a6a:	89 af       	std	Y+57, r24	; 0x39
    3a6c:	9a af       	std	Y+58, r25	; 0x3a
        
      l += 2;
    3a6e:	e9 89       	ldd	r30, Y+17	; 0x11
    3a70:	ee 5f       	subi	r30, 0xFE	; 254
    3a72:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    3a74:	23 94       	inc	r2
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    3a76:	33 94       	inc	r3
    3a78:	fe a9       	ldd	r31, Y+54	; 0x36
    3a7a:	f3 15       	cp	r31, r3
    3a7c:	08 f0       	brcs	.+2      	; 0x3a80 <igrf+0xc5e>
    3a7e:	24 cc       	rjmp	.-1976   	; 0x32c8 <igrf+0x4a6>
    3a80:	0c c0       	rjmp	.+24     	; 0x3a9a <igrf+0xc78>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    3a82:	1d a2       	std	Y+37, r1	; 0x25
    3a84:	1e a2       	std	Y+38, r1	; 0x26
    3a86:	1f a2       	std	Y+39, r1	; 0x27
    3a88:	18 a6       	std	Y+40, r1	; 0x28
    3a8a:	1f aa       	std	Y+55, r1	; 0x37
    3a8c:	18 ae       	std	Y+56, r1	; 0x38
    3a8e:	19 ae       	std	Y+57, r1	; 0x39
    3a90:	1a ae       	std	Y+58, r1	; 0x3a
    3a92:	19 a2       	std	Y+33, r1	; 0x21
    3a94:	1a a2       	std	Y+34, r1	; 0x22
    3a96:	1b a2       	std	Y+35, r1	; 0x23
    3a98:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3a9a:	23 96       	adiw	r28, 0x03	; 3
    3a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
    3aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
    3aa4:	23 97       	sbiw	r28, 0x03	; 3
    3aa6:	6d a1       	ldd	r22, Y+37	; 0x25
    3aa8:	7e a1       	ldd	r23, Y+38	; 0x26
    3aaa:	8f a1       	ldd	r24, Y+39	; 0x27
    3aac:	98 a5       	ldd	r25, Y+40	; 0x28
    3aae:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3ab2:	6b 01       	movw	r12, r22
    3ab4:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    3ab6:	23 96       	adiw	r28, 0x03	; 3
    3ab8:	2c ad       	ldd	r18, Y+60	; 0x3c
    3aba:	3d ad       	ldd	r19, Y+61	; 0x3d
    3abc:	4e ad       	ldd	r20, Y+62	; 0x3e
    3abe:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ac0:	23 97       	sbiw	r28, 0x03	; 3
    3ac2:	69 a1       	ldd	r22, Y+33	; 0x21
    3ac4:	7a a1       	ldd	r23, Y+34	; 0x22
    3ac6:	8b a1       	ldd	r24, Y+35	; 0x23
    3ac8:	9c a1       	ldd	r25, Y+36	; 0x24
    3aca:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3ace:	4b 01       	movw	r8, r22
    3ad0:	5c 01       	movw	r10, r24
    3ad2:	27 96       	adiw	r28, 0x07	; 7
    3ad4:	2c ad       	ldd	r18, Y+60	; 0x3c
    3ad6:	3d ad       	ldd	r19, Y+61	; 0x3d
    3ad8:	4e ad       	ldd	r20, Y+62	; 0x3e
    3ada:	5f ad       	ldd	r21, Y+63	; 0x3f
    3adc:	27 97       	sbiw	r28, 0x07	; 7
    3ade:	6d a1       	ldd	r22, Y+37	; 0x25
    3ae0:	7e a1       	ldd	r23, Y+38	; 0x26
    3ae2:	8f a1       	ldd	r24, Y+39	; 0x27
    3ae4:	98 a5       	ldd	r25, Y+40	; 0x28
    3ae6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3aea:	9b 01       	movw	r18, r22
    3aec:	ac 01       	movw	r20, r24
    3aee:	c5 01       	movw	r24, r10
    3af0:	b4 01       	movw	r22, r8
    3af2:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    3af6:	29 96       	adiw	r28, 0x09	; 9
    3af8:	ae ad       	ldd	r26, Y+62	; 0x3e
    3afa:	bf ad       	ldd	r27, Y+63	; 0x3f
    3afc:	29 97       	sbiw	r28, 0x09	; 9
    3afe:	6d 93       	st	X+, r22
    3b00:	7d 93       	st	X+, r23
    3b02:	8d 93       	st	X+, r24
    3b04:	9c 93       	st	X, r25
    3b06:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    3b08:	8f a9       	ldd	r24, Y+55	; 0x37
    3b0a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b0c:	a9 ad       	ldd	r26, Y+57	; 0x39
    3b0e:	ba ad       	ldd	r27, Y+58	; 0x3a
    3b10:	29 96       	adiw	r28, 0x09	; 9
    3b12:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b14:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b16:	29 97       	sbiw	r28, 0x09	; 9
    3b18:	84 83       	std	Z+4, r24	; 0x04
    3b1a:	95 83       	std	Z+5, r25	; 0x05
    3b1c:	a6 83       	std	Z+6, r26	; 0x06
    3b1e:	b7 83       	std	Z+7, r27	; 0x07
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3b20:	29 a1       	ldd	r18, Y+33	; 0x21
    3b22:	3a a1       	ldd	r19, Y+34	; 0x22
    3b24:	4b a1       	ldd	r20, Y+35	; 0x23
    3b26:	5c a1       	ldd	r21, Y+36	; 0x24
    3b28:	27 96       	adiw	r28, 0x07	; 7
    3b2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b32:	27 97       	sbiw	r28, 0x07	; 7
    3b34:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    3b38:	9b 01       	movw	r18, r22
    3b3a:	ac 01       	movw	r20, r24
    3b3c:	c7 01       	movw	r24, r14
    3b3e:	b6 01       	movw	r22, r12
    3b40:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    3b44:	29 96       	adiw	r28, 0x09	; 9
    3b46:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b48:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b4a:	29 97       	sbiw	r28, 0x09	; 9
    3b4c:	18 96       	adiw	r26, 0x08	; 8
    3b4e:	6d 93       	st	X+, r22
    3b50:	7d 93       	st	X+, r23
    3b52:	8d 93       	st	X+, r24
    3b54:	9c 93       	st	X, r25
    3b56:	1b 97       	sbiw	r26, 0x0b	; 11
     
}
    3b58:	c8 5b       	subi	r28, 0xB8	; 184
    3b5a:	df 4f       	sbci	r29, 0xFF	; 255
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
    3b78:	af 90       	pop	r10
    3b7a:	9f 90       	pop	r9
    3b7c:	8f 90       	pop	r8
    3b7e:	7f 90       	pop	r7
    3b80:	6f 90       	pop	r6
    3b82:	5f 90       	pop	r5
    3b84:	4f 90       	pop	r4
    3b86:	3f 90       	pop	r3
    3b88:	2f 90       	pop	r2
    3b8a:	08 95       	ret

00003b8c <init_UART_MM>:
#include "uart.h"
uint8_t mag_count = 0;
uint8_t mag_data[7];
volatile static int16_t x, y, z;
void init_UART_MM(void )
{
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29

  UCSR1A = 0;
    3b90:	cb e9       	ldi	r28, 0x9B	; 155
    3b92:	d0 e0       	ldi	r29, 0x00	; 0
    3b94:	18 82       	st	Y, r1
  UCSR1B = 0;
    3b96:	aa e9       	ldi	r26, 0x9A	; 154
    3b98:	b0 e0       	ldi	r27, 0x00	; 0
    3b9a:	1c 92       	st	X, r1
  UCSR1C = 0;
    3b9c:	ed e9       	ldi	r30, 0x9D	; 157
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    3ba2:	88 81       	ld	r24, Y
    3ba4:	82 60       	ori	r24, 0x02	; 2
    3ba6:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    3ba8:	8c 91       	ld	r24, X
    3baa:	88 69       	ori	r24, 0x98	; 152
    3bac:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |=_BV(USBS1) | _BV(UCSZ11) | _BV(UCSZ10);
    3bae:	80 81       	ld	r24, Z
    3bb0:	8e 60       	ori	r24, 0x0E	; 14
    3bb2:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    3bb4:	87 e6       	ldi	r24, 0x67	; 103
    3bb6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  UBRR1H = 0;
    3bba:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
}
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	08 95       	ret

00003bc4 <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    3bc4:	8f 92       	push	r8
    3bc6:	9f 92       	push	r9
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	29 97       	sbiw	r28, 0x09	; 9
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
  uint8_t MM_data_match = 0;
  ///Send the poll command
 // send_MM_cmd("*00P\r");
  uint8_t data[9]; 
  uint8_t c= 80;
  init_UART0();
    3bec:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <init_UART0>
  transmit_UART0(c);
    3bf0:	80 e5       	ldi	r24, 0x50	; 80
    3bf2:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
    3bf6:	5e 01       	movw	r10, r28
    3bf8:	8a e0       	ldi	r24, 0x0A	; 10
    3bfa:	a8 0e       	add	r10, r24
    3bfc:	b1 1c       	adc	r11, r1
  //receive_UART0();
  
	  while(!MM_data_match){
		  
	  xp = ((int16_t)receive_UART0()) << 8;
    3bfe:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c02:	c8 2e       	mov	r12, r24
    3c04:	d1 2c       	mov	r13, r1
    3c06:	dc 2c       	mov	r13, r12
    3c08:	cc 24       	eor	r12, r12
	  data[0] = (uint8_t)(xp>>8);
    3c0a:	d9 82       	std	Y+1, r13	; 0x01
	  xp &= 0xFF00;
	  xp |= (int16_t)receive_UART0();
    3c0c:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c10:	c8 2a       	or	r12, r24
	  data[1] = (uint8_t)(xp);
    3c12:	ca 82       	std	Y+2, r12	; 0x02
  
	  yp = ((int16_t)receive_UART0()) << 8;
    3c14:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c18:	e8 2e       	mov	r14, r24
    3c1a:	f1 2c       	mov	r15, r1
    3c1c:	fe 2c       	mov	r15, r14
    3c1e:	ee 24       	eor	r14, r14
	  data[2] =(uint8_t)( yp>>8);
    3c20:	fb 82       	std	Y+3, r15	; 0x03
	  yp &= 0xFF00;
	  yp |= (int16_t)receive_UART0();
    3c22:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c26:	e8 2a       	or	r14, r24
	  data[3] =(uint8_t)(yp);
    3c28:	ec 82       	std	Y+4, r14	; 0x04
  
	  zp = ((int16_t)receive_UART0()) << 8;
    3c2a:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c2e:	08 2f       	mov	r16, r24
    3c30:	10 e0       	ldi	r17, 0x00	; 0
    3c32:	10 2f       	mov	r17, r16
    3c34:	00 27       	eor	r16, r16
	  data[4] =(uint8_t)( zp>>8);
    3c36:	1d 83       	std	Y+5, r17	; 0x05
	  zp &= 0xFF00;
	  zp |= (int16_t)receive_UART0();
    3c38:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c3c:	48 01       	movw	r8, r16
    3c3e:	88 2a       	or	r8, r24
	  data[5] =(uint8_t)(zp);
    3c40:	8e 82       	std	Y+6, r8	; 0x06
	  
	  for(int iter=6; iter<9; iter++){
		data[iter] = receive_UART0();
    3c42:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c46:	8f 83       	std	Y+7, r24	; 0x07
    3c48:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c4c:	88 87       	std	Y+8, r24	; 0x08
    3c4e:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
    3c52:	89 87       	std	Y+9, r24	; 0x09
    3c54:	8e 01       	movw	r16, r28
    3c56:	0f 5f       	subi	r16, 0xFF	; 255
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
	  }
	  
  
	  for(int iter=0; iter<9; iter++){
		  transmit_UART0(data[iter]);
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	81 91       	ld	r24, Z+
    3c5e:	8f 01       	movw	r16, r30
    3c60:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <transmit_UART0>
    3c64:	8f ec       	ldi	r24, 0xCF	; 207
    3c66:	97 e0       	ldi	r25, 0x07	; 7
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <poll_MM1+0xa4>
    3c6c:	00 c0       	rjmp	.+0      	; 0x3c6e <poll_MM1+0xaa>
    3c6e:	00 00       	nop
	  for(int iter=6; iter<9; iter++){
		data[iter] = receive_UART0();
	  }
	  
  
	  for(int iter=0; iter<9; iter++){
    3c70:	0a 15       	cp	r16, r10
    3c72:	1b 05       	cpc	r17, r11
    3c74:	91 f7       	brne	.-28     	; 0x3c5a <poll_MM1+0x96>
		  transmit_UART0(data[iter]);
		  _delay_ms(1);
	  }
	  
	  MM_data_match = receive_UART0();
    3c76:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <receive_UART0>
  uint8_t c= 80;
  init_UART0();
  transmit_UART0(c);
  //receive_UART0();
  
	  while(!MM_data_match){
    3c7a:	88 23       	and	r24, r24
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <poll_MM1+0xbc>
    3c7e:	bf cf       	rjmp	.-130    	; 0x3bfe <poll_MM1+0x3a>
  
  //receive_MM();
  

  ///Convert the readings to Gauss
  if(data[6]==0){
    3c80:	8f 81       	ldd	r24, Y+7	; 0x07
    3c82:	81 11       	cpse	r24, r1
    3c84:	15 c0       	rjmp	.+42     	; 0x3cb0 <poll_MM1+0xec>
      Current_state.mm.B_x = ((float) xp) / 15000;
    3c86:	b6 01       	movw	r22, r12
    3c88:	dd 0c       	add	r13, r13
    3c8a:	88 0b       	sbc	r24, r24
    3c8c:	99 0b       	sbc	r25, r25
    3c8e:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e6       	ldi	r19, 0x60	; 96
    3c96:	4a e6       	ldi	r20, 0x6A	; 106
    3c98:	56 e4       	ldi	r21, 0x46	; 70
    3c9a:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3c9e:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <Current_state+0x56>
    3ca2:	70 93 02 05 	sts	0x0502, r23	; 0x800502 <Current_state+0x57>
    3ca6:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Current_state+0x58>
    3caa:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <Current_state+0x59>
    3cae:	1b c0       	rjmp	.+54     	; 0x3ce6 <poll_MM1+0x122>
  }
  else{
	  Current_state.mm.B_x = ((float) xp) / 15000;
    3cb0:	b6 01       	movw	r22, r12
    3cb2:	dd 0c       	add	r13, r13
    3cb4:	88 0b       	sbc	r24, r24
    3cb6:	99 0b       	sbc	r25, r25
    3cb8:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e6       	ldi	r19, 0x60	; 96
    3cc0:	4a e6       	ldi	r20, 0x6A	; 106
    3cc2:	56 e4       	ldi	r21, 0x46	; 70
    3cc4:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3cc8:	e1 e0       	ldi	r30, 0x01	; 1
    3cca:	f5 e0       	ldi	r31, 0x05	; 5
    3ccc:	60 83       	st	Z, r22
    3cce:	71 83       	std	Z+1, r23	; 0x01
    3cd0:	82 83       	std	Z+2, r24	; 0x02
    3cd2:	93 83       	std	Z+3, r25	; 0x03
	  Current_state.mm.B_x = -1*Current_state.mm.B_x;
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	a2 81       	ldd	r26, Z+2	; 0x02
    3cda:	b3 81       	ldd	r27, Z+3	; 0x03
    3cdc:	b0 58       	subi	r27, 0x80	; 128
    3cde:	80 83       	st	Z, r24
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	a2 83       	std	Z+2, r26	; 0x02
    3ce4:	b3 83       	std	Z+3, r27	; 0x03
  }
  
  if(data[7]==0){
    3ce6:	88 85       	ldd	r24, Y+8	; 0x08
    3ce8:	81 11       	cpse	r24, r1
    3cea:	15 c0       	rjmp	.+42     	; 0x3d16 <poll_MM1+0x152>
	  Current_state.mm.B_y = ((float) yp) / 15000;
    3cec:	b7 01       	movw	r22, r14
    3cee:	ff 0c       	add	r15, r15
    3cf0:	88 0b       	sbc	r24, r24
    3cf2:	99 0b       	sbc	r25, r25
    3cf4:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e6       	ldi	r19, 0x60	; 96
    3cfc:	4a e6       	ldi	r20, 0x6A	; 106
    3cfe:	56 e4       	ldi	r21, 0x46	; 70
    3d00:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3d04:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <Current_state+0x5a>
    3d08:	70 93 06 05 	sts	0x0506, r23	; 0x800506 <Current_state+0x5b>
    3d0c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Current_state+0x5c>
    3d10:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <Current_state+0x5d>
    3d14:	1b c0       	rjmp	.+54     	; 0x3d4c <poll_MM1+0x188>
  }
  else{
	  Current_state.mm.B_y = ((float) yp) / 15000;
    3d16:	b7 01       	movw	r22, r14
    3d18:	ff 0c       	add	r15, r15
    3d1a:	88 0b       	sbc	r24, r24
    3d1c:	99 0b       	sbc	r25, r25
    3d1e:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e6       	ldi	r19, 0x60	; 96
    3d26:	4a e6       	ldi	r20, 0x6A	; 106
    3d28:	56 e4       	ldi	r21, 0x46	; 70
    3d2a:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3d2e:	e5 e0       	ldi	r30, 0x05	; 5
    3d30:	f5 e0       	ldi	r31, 0x05	; 5
    3d32:	60 83       	st	Z, r22
    3d34:	71 83       	std	Z+1, r23	; 0x01
    3d36:	82 83       	std	Z+2, r24	; 0x02
    3d38:	93 83       	std	Z+3, r25	; 0x03
	  Current_state.mm.B_y = -1*Current_state.mm.B_y;
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d40:	b3 81       	ldd	r27, Z+3	; 0x03
    3d42:	b0 58       	subi	r27, 0x80	; 128
    3d44:	80 83       	st	Z, r24
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	a2 83       	std	Z+2, r26	; 0x02
    3d4a:	b3 83       	std	Z+3, r27	; 0x03
  }
  
  if(data[8]==0){
    3d4c:	89 85       	ldd	r24, Y+9	; 0x09
    3d4e:	81 11       	cpse	r24, r1
    3d50:	15 c0       	rjmp	.+42     	; 0x3d7c <poll_MM1+0x1b8>
	  Current_state.mm.B_z = ((float) zp) / 15000;
    3d52:	b4 01       	movw	r22, r8
    3d54:	99 0c       	add	r9, r9
    3d56:	88 0b       	sbc	r24, r24
    3d58:	99 0b       	sbc	r25, r25
    3d5a:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e6       	ldi	r19, 0x60	; 96
    3d62:	4a e6       	ldi	r20, 0x6A	; 106
    3d64:	56 e4       	ldi	r21, 0x46	; 70
    3d66:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3d6a:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <Current_state+0x5e>
    3d6e:	70 93 0a 05 	sts	0x050A, r23	; 0x80050a <Current_state+0x5f>
    3d72:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <Current_state+0x60>
    3d76:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <Current_state+0x61>
    3d7a:	1b c0       	rjmp	.+54     	; 0x3db2 <poll_MM1+0x1ee>
  }
  else{
	  Current_state.mm.B_z = ((float) zp) / 15000;
    3d7c:	b4 01       	movw	r22, r8
    3d7e:	99 0c       	add	r9, r9
    3d80:	88 0b       	sbc	r24, r24
    3d82:	99 0b       	sbc	r25, r25
    3d84:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e6       	ldi	r19, 0x60	; 96
    3d8c:	4a e6       	ldi	r20, 0x6A	; 106
    3d8e:	56 e4       	ldi	r21, 0x46	; 70
    3d90:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3d94:	e9 e0       	ldi	r30, 0x09	; 9
    3d96:	f5 e0       	ldi	r31, 0x05	; 5
    3d98:	60 83       	st	Z, r22
    3d9a:	71 83       	std	Z+1, r23	; 0x01
    3d9c:	82 83       	std	Z+2, r24	; 0x02
    3d9e:	93 83       	std	Z+3, r25	; 0x03
	  Current_state.mm.B_z = -1*Current_state.mm.B_z;
    3da0:	80 81       	ld	r24, Z
    3da2:	91 81       	ldd	r25, Z+1	; 0x01
    3da4:	a2 81       	ldd	r26, Z+2	; 0x02
    3da6:	b3 81       	ldd	r27, Z+3	; 0x03
    3da8:	b0 58       	subi	r27, 0x80	; 128
    3daa:	80 83       	st	Z, r24
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	a2 83       	std	Z+2, r26	; 0x02
    3db0:	b3 83       	std	Z+3, r27	; 0x03
  }
  
}
    3db2:	29 96       	adiw	r28, 0x09	; 9
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	bf 90       	pop	r11
    3dd0:	af 90       	pop	r10
    3dd2:	9f 90       	pop	r9
    3dd4:	8f 90       	pop	r8
    3dd6:	08 95       	ret

00003dd8 <__vector_30>:

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
    3dd8:	1f 92       	push	r1
    3dda:	0f 92       	push	r0
    3ddc:	0f b6       	in	r0, 0x3f	; 63
    3dde:	0f 92       	push	r0
    3de0:	11 24       	eor	r1, r1
    3de2:	0b b6       	in	r0, 0x3b	; 59
    3de4:	0f 92       	push	r0
    3de6:	2f 93       	push	r18
    3de8:	3f 93       	push	r19
    3dea:	4f 93       	push	r20
    3dec:	5f 93       	push	r21
    3dee:	6f 93       	push	r22
    3df0:	7f 93       	push	r23
    3df2:	8f 93       	push	r24
    3df4:	9f 93       	push	r25
    3df6:	af 93       	push	r26
    3df8:	bf 93       	push	r27
    3dfa:	ef 93       	push	r30
    3dfc:	ff 93       	push	r31
	
	mag_data[mag_count] = UDR1;
    3dfe:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <mag_count>
    3e02:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    3e06:	e8 2f       	mov	r30, r24
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	e8 56       	subi	r30, 0x68	; 104
    3e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e0e:	90 83       	st	Z, r25
	mag_count++;
    3e10:	8f 5f       	subi	r24, 0xFF	; 255
	if (mag_count == 7)
    3e12:	87 30       	cpi	r24, 0x07	; 7
    3e14:	19 f0       	breq	.+6      	; 0x3e1c <__vector_30+0x44>

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
	
	mag_data[mag_count] = UDR1;
	mag_count++;
    3e16:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <mag_count>
    3e1a:	9d c0       	rjmp	.+314    	; 0x3f56 <__vector_30+0x17e>
	if (mag_count == 7)
	{
		mag_count = 0;
    3e1c:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <mag_count>
		x = ((int16_t)mag_data[0])<<8;
    3e20:	e8 e9       	ldi	r30, 0x98	; 152
    3e22:	f4 e0       	ldi	r31, 0x04	; 4
    3e24:	80 81       	ld	r24, Z
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	98 2f       	mov	r25, r24
    3e2a:	88 27       	eor	r24, r24
    3e2c:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3e30:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x &= 0xFF00;
    3e34:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3e38:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3e3c:	88 27       	eor	r24, r24
    3e3e:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3e42:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x |= (int16_t)mag_data[1];
    3e46:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3e4a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3e4e:	21 81       	ldd	r18, Z+1	; 0x01
    3e50:	82 2b       	or	r24, r18
    3e52:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3e56:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		
		
		y = ((int16_t)mag_data[2]) << 8;
    3e5a:	82 81       	ldd	r24, Z+2	; 0x02
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	98 2f       	mov	r25, r24
    3e60:	88 27       	eor	r24, r24
    3e62:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3e66:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y &= 0xFF00;
    3e6a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3e6e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3e72:	88 27       	eor	r24, r24
    3e74:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3e78:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y |= (int16_t)mag_data[3];
    3e7c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3e80:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3e84:	23 81       	ldd	r18, Z+3	; 0x03
    3e86:	82 2b       	or	r24, r18
    3e88:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3e8c:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		
		z = ((int16_t)mag_data[4]) << 8;
    3e90:	84 81       	ldd	r24, Z+4	; 0x04
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	98 2f       	mov	r25, r24
    3e96:	88 27       	eor	r24, r24
    3e98:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3e9c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z &= 0xFF00;
    3ea0:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3ea4:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3ea8:	88 27       	eor	r24, r24
    3eaa:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3eae:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z |= (int16_t)mag_data[5];
    3eb2:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3eb6:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3eba:	25 81       	ldd	r18, Z+5	; 0x05
    3ebc:	82 2b       	or	r24, r18
    3ebe:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3ec2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		
		///Convert the readings to Gauss
		Current_state.mm.B_x = ((float) x) / 15000;
    3ec6:	60 91 09 04 	lds	r22, 0x0409	; 0x800409 <x>
    3eca:	70 91 0a 04 	lds	r23, 0x040A	; 0x80040a <x+0x1>
    3ece:	07 2e       	mov	r0, r23
    3ed0:	00 0c       	add	r0, r0
    3ed2:	88 0b       	sbc	r24, r24
    3ed4:	99 0b       	sbc	r25, r25
    3ed6:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e6       	ldi	r19, 0x60	; 96
    3ede:	4a e6       	ldi	r20, 0x6A	; 106
    3ee0:	56 e4       	ldi	r21, 0x46	; 70
    3ee2:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3ee6:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <Current_state+0x56>
    3eea:	70 93 02 05 	sts	0x0502, r23	; 0x800502 <Current_state+0x57>
    3eee:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Current_state+0x58>
    3ef2:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <Current_state+0x59>
		Current_state.mm.B_y = ((float) y) / 15000;
    3ef6:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <y>
    3efa:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <y+0x1>
    3efe:	07 2e       	mov	r0, r23
    3f00:	00 0c       	add	r0, r0
    3f02:	88 0b       	sbc	r24, r24
    3f04:	99 0b       	sbc	r25, r25
    3f06:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e6       	ldi	r19, 0x60	; 96
    3f0e:	4a e6       	ldi	r20, 0x6A	; 106
    3f10:	56 e4       	ldi	r21, 0x46	; 70
    3f12:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3f16:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <Current_state+0x5a>
    3f1a:	70 93 06 05 	sts	0x0506, r23	; 0x800506 <Current_state+0x5b>
    3f1e:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Current_state+0x5c>
    3f22:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <Current_state+0x5d>
		Current_state.mm.B_z = ((float) z) / 15000;
    3f26:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <z>
    3f2a:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <z+0x1>
    3f2e:	07 2e       	mov	r0, r23
    3f30:	00 0c       	add	r0, r0
    3f32:	88 0b       	sbc	r24, r24
    3f34:	99 0b       	sbc	r25, r25
    3f36:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e6       	ldi	r19, 0x60	; 96
    3f3e:	4a e6       	ldi	r20, 0x6A	; 106
    3f40:	56 e4       	ldi	r21, 0x46	; 70
    3f42:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    3f46:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <Current_state+0x5e>
    3f4a:	70 93 0a 05 	sts	0x050A, r23	; 0x80050a <Current_state+0x5f>
    3f4e:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <Current_state+0x60>
    3f52:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <Current_state+0x61>
	}
}
    3f56:	ff 91       	pop	r31
    3f58:	ef 91       	pop	r30
    3f5a:	bf 91       	pop	r27
    3f5c:	af 91       	pop	r26
    3f5e:	9f 91       	pop	r25
    3f60:	8f 91       	pop	r24
    3f62:	7f 91       	pop	r23
    3f64:	6f 91       	pop	r22
    3f66:	5f 91       	pop	r21
    3f68:	4f 91       	pop	r20
    3f6a:	3f 91       	pop	r19
    3f6c:	2f 91       	pop	r18
    3f6e:	0f 90       	pop	r0
    3f70:	0b be       	out	0x3b, r0	; 59
    3f72:	0f 90       	pop	r0
    3f74:	0f be       	out	0x3f, r0	; 63
    3f76:	0f 90       	pop	r0
    3f78:	1f 90       	pop	r1
    3f7a:	18 95       	reti

00003f7c <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	fb 01       	movw	r30, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3f80:	4d 91       	ld	r20, X+
    3f82:	5d 91       	ld	r21, X+
    3f84:	6d 91       	ld	r22, X+
    3f86:	7c 91       	ld	r23, X
    3f88:	13 97       	sbiw	r26, 0x03	; 3
    3f8a:	40 83       	st	Z, r20
    3f8c:	51 83       	std	Z+1, r21	; 0x01
    3f8e:	62 83       	std	Z+2, r22	; 0x02
    3f90:	73 83       	std	Z+3, r23	; 0x03
    3f92:	14 96       	adiw	r26, 0x04	; 4
    3f94:	4d 91       	ld	r20, X+
    3f96:	5d 91       	ld	r21, X+
    3f98:	6d 91       	ld	r22, X+
    3f9a:	7c 91       	ld	r23, X
    3f9c:	17 97       	sbiw	r26, 0x07	; 7
    3f9e:	44 83       	std	Z+4, r20	; 0x04
    3fa0:	55 83       	std	Z+5, r21	; 0x05
    3fa2:	66 83       	std	Z+6, r22	; 0x06
    3fa4:	77 83       	std	Z+7, r23	; 0x07
    3fa6:	18 96       	adiw	r26, 0x08	; 8
    3fa8:	8d 91       	ld	r24, X+
    3faa:	9d 91       	ld	r25, X+
    3fac:	0d 90       	ld	r0, X+
    3fae:	bc 91       	ld	r27, X
    3fb0:	a0 2d       	mov	r26, r0
    3fb2:	80 87       	std	Z+8, r24	; 0x08
    3fb4:	91 87       	std	Z+9, r25	; 0x09
    3fb6:	a2 87       	std	Z+10, r26	; 0x0a
    3fb8:	b3 87       	std	Z+11, r27	; 0x0b
    3fba:	08 95       	ret

00003fbc <copy_quaternion>:
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	a6 2f       	mov	r26, r22
    3fc0:	b7 2f       	mov	r27, r23
    3fc2:	40 96       	adiw	r24, 0x10	; 16
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    3fc4:	41 91       	ld	r20, Z+
    3fc6:	51 91       	ld	r21, Z+
    3fc8:	61 91       	ld	r22, Z+
    3fca:	71 91       	ld	r23, Z+
    3fcc:	4d 93       	st	X+, r20
    3fce:	5d 93       	st	X+, r21
    3fd0:	6d 93       	st	X+, r22
    3fd2:	7d 93       	st	X+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3fd4:	e8 17       	cp	r30, r24
    3fd6:	f9 07       	cpc	r31, r25
    3fd8:	a9 f7       	brne	.-22     	; 0x3fc4 <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3fda:	08 95       	ret

00003fdc <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3fdc:	4f 92       	push	r4
    3fde:	5f 92       	push	r5
    3fe0:	6f 92       	push	r6
    3fe2:	7f 92       	push	r7
    3fe4:	8f 92       	push	r8
    3fe6:	9f 92       	push	r9
    3fe8:	af 92       	push	r10
    3fea:	bf 92       	push	r11
    3fec:	cf 92       	push	r12
    3fee:	df 92       	push	r13
    3ff0:	ef 92       	push	r14
    3ff2:	ff 92       	push	r15
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <vector_norm+0x1e>
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <vector_norm+0x20>
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    4002:	80 80       	ld	r8, Z
    4004:	91 80       	ldd	r9, Z+1	; 0x01
    4006:	a2 80       	ldd	r10, Z+2	; 0x02
    4008:	b3 80       	ldd	r11, Z+3	; 0x03
    400a:	c4 80       	ldd	r12, Z+4	; 0x04
    400c:	d5 80       	ldd	r13, Z+5	; 0x05
    400e:	e6 80       	ldd	r14, Z+6	; 0x06
    4010:	f7 80       	ldd	r15, Z+7	; 0x07
    4012:	40 84       	ldd	r4, Z+8	; 0x08
    4014:	51 84       	ldd	r5, Z+9	; 0x09
    4016:	62 84       	ldd	r6, Z+10	; 0x0a
    4018:	73 84       	ldd	r7, Z+11	; 0x0b
    401a:	a5 01       	movw	r20, r10
    401c:	94 01       	movw	r18, r8
    401e:	c5 01       	movw	r24, r10
    4020:	b4 01       	movw	r22, r8
    4022:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4026:	69 83       	std	Y+1, r22	; 0x01
    4028:	7a 83       	std	Y+2, r23	; 0x02
    402a:	8b 83       	std	Y+3, r24	; 0x03
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	a7 01       	movw	r20, r14
    4030:	96 01       	movw	r18, r12
    4032:	c7 01       	movw	r24, r14
    4034:	b6 01       	movw	r22, r12
    4036:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    403a:	9b 01       	movw	r18, r22
    403c:	ac 01       	movw	r20, r24
    403e:	69 81       	ldd	r22, Y+1	; 0x01
    4040:	7a 81       	ldd	r23, Y+2	; 0x02
    4042:	8b 81       	ldd	r24, Y+3	; 0x03
    4044:	9c 81       	ldd	r25, Y+4	; 0x04
    4046:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    404a:	69 83       	std	Y+1, r22	; 0x01
    404c:	7a 83       	std	Y+2, r23	; 0x02
    404e:	8b 83       	std	Y+3, r24	; 0x03
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	a5 01       	movw	r20, r10
    4054:	94 01       	movw	r18, r8
    4056:	c5 01       	movw	r24, r10
    4058:	b4 01       	movw	r22, r8
    405a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    405e:	4b 01       	movw	r8, r22
    4060:	5c 01       	movw	r10, r24
    4062:	a7 01       	movw	r20, r14
    4064:	96 01       	movw	r18, r12
    4066:	c7 01       	movw	r24, r14
    4068:	b6 01       	movw	r22, r12
    406a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    406e:	9b 01       	movw	r18, r22
    4070:	ac 01       	movw	r20, r24
    4072:	c5 01       	movw	r24, r10
    4074:	b4 01       	movw	r22, r8
    4076:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    407a:	6b 01       	movw	r12, r22
    407c:	7c 01       	movw	r14, r24
    407e:	a3 01       	movw	r20, r6
    4080:	92 01       	movw	r18, r4
    4082:	c3 01       	movw	r24, r6
    4084:	b2 01       	movw	r22, r4
    4086:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    408a:	9b 01       	movw	r18, r22
    408c:	ac 01       	movw	r20, r24
    408e:	c7 01       	movw	r24, r14
    4090:	b6 01       	movw	r22, r12
    4092:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4096:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
}
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	ff 90       	pop	r15
    40a8:	ef 90       	pop	r14
    40aa:	df 90       	pop	r13
    40ac:	cf 90       	pop	r12
    40ae:	bf 90       	pop	r11
    40b0:	af 90       	pop	r10
    40b2:	9f 90       	pop	r9
    40b4:	8f 90       	pop	r8
    40b6:	7f 90       	pop	r7
    40b8:	6f 90       	pop	r6
    40ba:	5f 90       	pop	r5
    40bc:	4f 90       	pop	r4
    40be:	08 95       	ret

000040c0 <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    40c0:	4f 92       	push	r4
    40c2:	5f 92       	push	r5
    40c4:	6f 92       	push	r6
    40c6:	7f 92       	push	r7
    40c8:	8f 92       	push	r8
    40ca:	9f 92       	push	r9
    40cc:	af 92       	push	r10
    40ce:	bf 92       	push	r11
    40d0:	cf 92       	push	r12
    40d2:	df 92       	push	r13
    40d4:	ef 92       	push	r14
    40d6:	ff 92       	push	r15
    40d8:	cf 93       	push	r28
    40da:	df 93       	push	r29
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
    40e0:	28 97       	sbiw	r28, 0x08	; 8
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	9c 01       	movw	r18, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    40ee:	dc 01       	movw	r26, r24
    40f0:	8d 90       	ld	r8, X+
    40f2:	9d 90       	ld	r9, X+
    40f4:	ad 90       	ld	r10, X+
    40f6:	bc 90       	ld	r11, X
    40f8:	13 97       	sbiw	r26, 0x03	; 3
    40fa:	14 96       	adiw	r26, 0x04	; 4
    40fc:	cd 90       	ld	r12, X+
    40fe:	dd 90       	ld	r13, X+
    4100:	ed 90       	ld	r14, X+
    4102:	fc 90       	ld	r15, X
    4104:	17 97       	sbiw	r26, 0x07	; 7
    4106:	18 96       	adiw	r26, 0x08	; 8
    4108:	8d 91       	ld	r24, X+
    410a:	9d 91       	ld	r25, X+
    410c:	0d 90       	ld	r0, X+
    410e:	bc 91       	ld	r27, X
    4110:	a0 2d       	mov	r26, r0
    4112:	8d 83       	std	Y+5, r24	; 0x05
    4114:	9e 83       	std	Y+6, r25	; 0x06
    4116:	af 83       	std	Y+7, r26	; 0x07
    4118:	b8 87       	std	Y+8, r27	; 0x08
    411a:	f9 01       	movw	r30, r18
    411c:	44 84       	ldd	r4, Z+12	; 0x0c
    411e:	55 84       	ldd	r5, Z+13	; 0x0d
    4120:	66 84       	ldd	r6, Z+14	; 0x0e
    4122:	77 84       	ldd	r7, Z+15	; 0x0f
    4124:	a5 01       	movw	r20, r10
    4126:	94 01       	movw	r18, r8
    4128:	c5 01       	movw	r24, r10
    412a:	b4 01       	movw	r22, r8
    412c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4130:	69 83       	std	Y+1, r22	; 0x01
    4132:	7a 83       	std	Y+2, r23	; 0x02
    4134:	8b 83       	std	Y+3, r24	; 0x03
    4136:	9c 83       	std	Y+4, r25	; 0x04
    4138:	a7 01       	movw	r20, r14
    413a:	96 01       	movw	r18, r12
    413c:	c7 01       	movw	r24, r14
    413e:	b6 01       	movw	r22, r12
    4140:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4144:	9b 01       	movw	r18, r22
    4146:	ac 01       	movw	r20, r24
    4148:	69 81       	ldd	r22, Y+1	; 0x01
    414a:	7a 81       	ldd	r23, Y+2	; 0x02
    414c:	8b 81       	ldd	r24, Y+3	; 0x03
    414e:	9c 81       	ldd	r25, Y+4	; 0x04
    4150:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4154:	69 83       	std	Y+1, r22	; 0x01
    4156:	7a 83       	std	Y+2, r23	; 0x02
    4158:	8b 83       	std	Y+3, r24	; 0x03
    415a:	9c 83       	std	Y+4, r25	; 0x04
    415c:	2d 81       	ldd	r18, Y+5	; 0x05
    415e:	3e 81       	ldd	r19, Y+6	; 0x06
    4160:	4f 81       	ldd	r20, Y+7	; 0x07
    4162:	58 85       	ldd	r21, Y+8	; 0x08
    4164:	ca 01       	movw	r24, r20
    4166:	b9 01       	movw	r22, r18
    4168:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    416c:	9b 01       	movw	r18, r22
    416e:	ac 01       	movw	r20, r24
    4170:	69 81       	ldd	r22, Y+1	; 0x01
    4172:	7a 81       	ldd	r23, Y+2	; 0x02
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	9c 81       	ldd	r25, Y+4	; 0x04
    4178:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    417c:	69 83       	std	Y+1, r22	; 0x01
    417e:	7a 83       	std	Y+2, r23	; 0x02
    4180:	8b 83       	std	Y+3, r24	; 0x03
    4182:	9c 83       	std	Y+4, r25	; 0x04
    4184:	a5 01       	movw	r20, r10
    4186:	94 01       	movw	r18, r8
    4188:	c5 01       	movw	r24, r10
    418a:	b4 01       	movw	r22, r8
    418c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4190:	4b 01       	movw	r8, r22
    4192:	5c 01       	movw	r10, r24
    4194:	a7 01       	movw	r20, r14
    4196:	96 01       	movw	r18, r12
    4198:	c7 01       	movw	r24, r14
    419a:	b6 01       	movw	r22, r12
    419c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    41a0:	9b 01       	movw	r18, r22
    41a2:	ac 01       	movw	r20, r24
    41a4:	c5 01       	movw	r24, r10
    41a6:	b4 01       	movw	r22, r8
    41a8:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    41ac:	6b 01       	movw	r12, r22
    41ae:	7c 01       	movw	r14, r24
    41b0:	2d 81       	ldd	r18, Y+5	; 0x05
    41b2:	3e 81       	ldd	r19, Y+6	; 0x06
    41b4:	4f 81       	ldd	r20, Y+7	; 0x07
    41b6:	58 85       	ldd	r21, Y+8	; 0x08
    41b8:	ca 01       	movw	r24, r20
    41ba:	b9 01       	movw	r22, r18
    41bc:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    41c0:	9b 01       	movw	r18, r22
    41c2:	ac 01       	movw	r20, r24
    41c4:	c7 01       	movw	r24, r14
    41c6:	b6 01       	movw	r22, r12
    41c8:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    41cc:	6b 01       	movw	r12, r22
    41ce:	7c 01       	movw	r14, r24
    41d0:	a3 01       	movw	r20, r6
    41d2:	92 01       	movw	r18, r4
    41d4:	c3 01       	movw	r24, r6
    41d6:	b2 01       	movw	r22, r4
    41d8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    41dc:	9b 01       	movw	r18, r22
    41de:	ac 01       	movw	r20, r24
    41e0:	c7 01       	movw	r24, r14
    41e2:	b6 01       	movw	r22, r12
    41e4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    41e8:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
}
    41ec:	28 96       	adiw	r28, 0x08	; 8
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	df 90       	pop	r13
    4202:	cf 90       	pop	r12
    4204:	bf 90       	pop	r11
    4206:	af 90       	pop	r10
    4208:	9f 90       	pop	r9
    420a:	8f 90       	pop	r8
    420c:	7f 90       	pop	r7
    420e:	6f 90       	pop	r6
    4210:	5f 90       	pop	r5
    4212:	4f 90       	pop	r4
    4214:	08 95       	ret

00004216 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    4216:	cf 92       	push	r12
    4218:	df 92       	push	r13
    421a:	ef 92       	push	r14
    421c:	ff 92       	push	r15
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	ec 01       	movw	r28, r24
    4228:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    422a:	fb 01       	movw	r30, r22
    422c:	20 81       	ld	r18, Z
    422e:	31 81       	ldd	r19, Z+1	; 0x01
    4230:	42 81       	ldd	r20, Z+2	; 0x02
    4232:	53 81       	ldd	r21, Z+3	; 0x03
    4234:	68 81       	ld	r22, Y
    4236:	79 81       	ldd	r23, Y+1	; 0x01
    4238:	8a 81       	ldd	r24, Y+2	; 0x02
    423a:	9b 81       	ldd	r25, Y+3	; 0x03
    423c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4240:	6b 01       	movw	r12, r22
    4242:	7c 01       	movw	r14, r24
    4244:	f8 01       	movw	r30, r16
    4246:	24 81       	ldd	r18, Z+4	; 0x04
    4248:	35 81       	ldd	r19, Z+5	; 0x05
    424a:	46 81       	ldd	r20, Z+6	; 0x06
    424c:	57 81       	ldd	r21, Z+7	; 0x07
    424e:	6c 81       	ldd	r22, Y+4	; 0x04
    4250:	7d 81       	ldd	r23, Y+5	; 0x05
    4252:	8e 81       	ldd	r24, Y+6	; 0x06
    4254:	9f 81       	ldd	r25, Y+7	; 0x07
    4256:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    425a:	9b 01       	movw	r18, r22
    425c:	ac 01       	movw	r20, r24
    425e:	c7 01       	movw	r24, r14
    4260:	b6 01       	movw	r22, r12
    4262:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4266:	6b 01       	movw	r12, r22
    4268:	7c 01       	movw	r14, r24
    426a:	f8 01       	movw	r30, r16
    426c:	20 85       	ldd	r18, Z+8	; 0x08
    426e:	31 85       	ldd	r19, Z+9	; 0x09
    4270:	42 85       	ldd	r20, Z+10	; 0x0a
    4272:	53 85       	ldd	r21, Z+11	; 0x0b
    4274:	68 85       	ldd	r22, Y+8	; 0x08
    4276:	79 85       	ldd	r23, Y+9	; 0x09
    4278:	8a 85       	ldd	r24, Y+10	; 0x0a
    427a:	9b 85       	ldd	r25, Y+11	; 0x0b
    427c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4280:	9b 01       	movw	r18, r22
    4282:	ac 01       	movw	r20, r24
    4284:	c7 01       	movw	r24, r14
    4286:	b6 01       	movw	r22, r12
    4288:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
}
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ff 90       	pop	r15
    4296:	ef 90       	pop	r14
    4298:	df 90       	pop	r13
    429a:	cf 90       	pop	r12
    429c:	08 95       	ret

0000429e <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	ec 01       	movw	r28, r24
    42b0:	e6 2e       	mov	r14, r22
    42b2:	f7 2e       	mov	r15, r23
    42b4:	04 2f       	mov	r16, r20
    42b6:	15 2f       	mov	r17, r21
    42b8:	6c 01       	movw	r12, r24
    42ba:	2c e0       	ldi	r18, 0x0C	; 12
    42bc:	c2 0e       	add	r12, r18
    42be:	d1 1c       	adc	r13, r1
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_res[i] = v_a[i] + v_b[i];
    42c0:	69 91       	ld	r22, Y+
    42c2:	79 91       	ld	r23, Y+
    42c4:	89 91       	ld	r24, Y+
    42c6:	99 91       	ld	r25, Y+
    42c8:	f7 01       	movw	r30, r14
    42ca:	21 91       	ld	r18, Z+
    42cc:	31 91       	ld	r19, Z+
    42ce:	41 91       	ld	r20, Z+
    42d0:	51 91       	ld	r21, Z+
    42d2:	7f 01       	movw	r14, r30
    42d4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    42d8:	f8 01       	movw	r30, r16
    42da:	61 93       	st	Z+, r22
    42dc:	71 93       	st	Z+, r23
    42de:	81 93       	st	Z+, r24
    42e0:	91 93       	st	Z+, r25
    42e2:	8f 01       	movw	r16, r30
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    42e4:	cc 15       	cp	r28, r12
    42e6:	dd 05       	cpc	r29, r13
    42e8:	59 f7       	brne	.-42     	; 0x42c0 <add_vectors+0x22>
    v_res[i] = v_a[i] + v_b[i];
}
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	df 90       	pop	r13
    42f8:	cf 90       	pop	r12
    42fa:	08 95       	ret

000042fc <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    42fc:	4f 92       	push	r4
    42fe:	5f 92       	push	r5
    4300:	6f 92       	push	r6
    4302:	7f 92       	push	r7
    4304:	8f 92       	push	r8
    4306:	9f 92       	push	r9
    4308:	af 92       	push	r10
    430a:	bf 92       	push	r11
    430c:	cf 92       	push	r12
    430e:	df 92       	push	r13
    4310:	ef 92       	push	r14
    4312:	ff 92       	push	r15
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	6a 01       	movw	r12, r20
    431e:	86 2e       	mov	r8, r22
    4320:	97 2e       	mov	r9, r23
    4322:	3a 01       	movw	r6, r20
    4324:	2c e0       	ldi	r18, 0x0C	; 12
    4326:	62 0e       	add	r6, r18
    4328:	71 1c       	adc	r7, r1
    432a:	48 2e       	mov	r4, r24
    432c:	59 2e       	mov	r5, r25
    432e:	5c 01       	movw	r10, r24
    4330:	ec e0       	ldi	r30, 0x0C	; 12
    4332:	ae 0e       	add	r10, r30
    4334:	b1 1c       	adc	r11, r1
    4336:	76 01       	movw	r14, r12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    4338:	f6 01       	movw	r30, r12
    433a:	10 82       	st	Z, r1
    433c:	11 82       	std	Z+1, r1	; 0x01
    433e:	12 82       	std	Z+2, r1	; 0x02
    4340:	13 82       	std	Z+3, r1	; 0x03
    4342:	c4 2d       	mov	r28, r4
    4344:	d5 2d       	mov	r29, r5
    4346:	84 01       	movw	r16, r8
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    4348:	69 91       	ld	r22, Y+
    434a:	79 91       	ld	r23, Y+
    434c:	89 91       	ld	r24, Y+
    434e:	99 91       	ld	r25, Y+
    4350:	f8 01       	movw	r30, r16
    4352:	20 81       	ld	r18, Z
    4354:	31 81       	ldd	r19, Z+1	; 0x01
    4356:	42 81       	ldd	r20, Z+2	; 0x02
    4358:	53 81       	ldd	r21, Z+3	; 0x03
    435a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    435e:	9b 01       	movw	r18, r22
    4360:	ac 01       	movw	r20, r24
    4362:	f7 01       	movw	r30, r14
    4364:	60 81       	ld	r22, Z
    4366:	71 81       	ldd	r23, Z+1	; 0x01
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4370:	f7 01       	movw	r30, r14
    4372:	60 83       	st	Z, r22
    4374:	71 83       	std	Z+1, r23	; 0x01
    4376:	82 83       	std	Z+2, r24	; 0x02
    4378:	93 83       	std	Z+3, r25	; 0x03
    437a:	04 5f       	subi	r16, 0xF4	; 244
    437c:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    437e:	ca 15       	cp	r28, r10
    4380:	db 05       	cpc	r29, r11
    4382:	11 f7       	brne	.-60     	; 0x4348 <vector_into_matrix+0x4c>
    4384:	f4 e0       	ldi	r31, 0x04	; 4
    4386:	cf 0e       	add	r12, r31
    4388:	d1 1c       	adc	r13, r1
    438a:	24 e0       	ldi	r18, 0x04	; 4
    438c:	82 0e       	add	r8, r18
    438e:	91 1c       	adc	r9, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    4390:	c6 14       	cp	r12, r6
    4392:	d7 04       	cpc	r13, r7
    4394:	81 f6       	brne	.-96     	; 0x4336 <vector_into_matrix+0x3a>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	ff 90       	pop	r15
    43a0:	ef 90       	pop	r14
    43a2:	df 90       	pop	r13
    43a4:	cf 90       	pop	r12
    43a6:	bf 90       	pop	r11
    43a8:	af 90       	pop	r10
    43aa:	9f 90       	pop	r9
    43ac:	8f 90       	pop	r8
    43ae:	7f 90       	pop	r7
    43b0:	6f 90       	pop	r6
    43b2:	5f 90       	pop	r5
    43b4:	4f 90       	pop	r4
    43b6:	08 95       	ret

000043b8 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    43b8:	8f 92       	push	r8
    43ba:	9f 92       	push	r9
    43bc:	af 92       	push	r10
    43be:	bf 92       	push	r11
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
    43c8:	cf 93       	push	r28
    43ca:	df 93       	push	r29
    43cc:	ec 01       	movw	r28, r24
    43ce:	8b 01       	movw	r16, r22
    43d0:	7a 01       	movw	r14, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    43d2:	fb 01       	movw	r30, r22
    43d4:	20 85       	ldd	r18, Z+8	; 0x08
    43d6:	31 85       	ldd	r19, Z+9	; 0x09
    43d8:	42 85       	ldd	r20, Z+10	; 0x0a
    43da:	53 85       	ldd	r21, Z+11	; 0x0b
    43dc:	6c 81       	ldd	r22, Y+4	; 0x04
    43de:	7d 81       	ldd	r23, Y+5	; 0x05
    43e0:	8e 81       	ldd	r24, Y+6	; 0x06
    43e2:	9f 81       	ldd	r25, Y+7	; 0x07
    43e4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    43e8:	4b 01       	movw	r8, r22
    43ea:	5c 01       	movw	r10, r24
    43ec:	f8 01       	movw	r30, r16
    43ee:	24 81       	ldd	r18, Z+4	; 0x04
    43f0:	35 81       	ldd	r19, Z+5	; 0x05
    43f2:	46 81       	ldd	r20, Z+6	; 0x06
    43f4:	57 81       	ldd	r21, Z+7	; 0x07
    43f6:	68 85       	ldd	r22, Y+8	; 0x08
    43f8:	79 85       	ldd	r23, Y+9	; 0x09
    43fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    43fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    43fe:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4402:	9b 01       	movw	r18, r22
    4404:	ac 01       	movw	r20, r24
    4406:	c5 01       	movw	r24, r10
    4408:	b4 01       	movw	r22, r8
    440a:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    440e:	f7 01       	movw	r30, r14
    4410:	60 83       	st	Z, r22
    4412:	71 83       	std	Z+1, r23	; 0x01
    4414:	82 83       	std	Z+2, r24	; 0x02
    4416:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    4418:	f8 01       	movw	r30, r16
    441a:	20 81       	ld	r18, Z
    441c:	31 81       	ldd	r19, Z+1	; 0x01
    441e:	42 81       	ldd	r20, Z+2	; 0x02
    4420:	53 81       	ldd	r21, Z+3	; 0x03
    4422:	68 85       	ldd	r22, Y+8	; 0x08
    4424:	79 85       	ldd	r23, Y+9	; 0x09
    4426:	8a 85       	ldd	r24, Y+10	; 0x0a
    4428:	9b 85       	ldd	r25, Y+11	; 0x0b
    442a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    442e:	4b 01       	movw	r8, r22
    4430:	5c 01       	movw	r10, r24
    4432:	f8 01       	movw	r30, r16
    4434:	20 85       	ldd	r18, Z+8	; 0x08
    4436:	31 85       	ldd	r19, Z+9	; 0x09
    4438:	42 85       	ldd	r20, Z+10	; 0x0a
    443a:	53 85       	ldd	r21, Z+11	; 0x0b
    443c:	68 81       	ld	r22, Y
    443e:	79 81       	ldd	r23, Y+1	; 0x01
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	9b 81       	ldd	r25, Y+3	; 0x03
    4444:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4448:	9b 01       	movw	r18, r22
    444a:	ac 01       	movw	r20, r24
    444c:	c5 01       	movw	r24, r10
    444e:	b4 01       	movw	r22, r8
    4450:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    4454:	f7 01       	movw	r30, r14
    4456:	64 83       	std	Z+4, r22	; 0x04
    4458:	75 83       	std	Z+5, r23	; 0x05
    445a:	86 83       	std	Z+6, r24	; 0x06
    445c:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    445e:	f8 01       	movw	r30, r16
    4460:	24 81       	ldd	r18, Z+4	; 0x04
    4462:	35 81       	ldd	r19, Z+5	; 0x05
    4464:	46 81       	ldd	r20, Z+6	; 0x06
    4466:	57 81       	ldd	r21, Z+7	; 0x07
    4468:	68 81       	ld	r22, Y
    446a:	79 81       	ldd	r23, Y+1	; 0x01
    446c:	8a 81       	ldd	r24, Y+2	; 0x02
    446e:	9b 81       	ldd	r25, Y+3	; 0x03
    4470:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4474:	4b 01       	movw	r8, r22
    4476:	5c 01       	movw	r10, r24
    4478:	f8 01       	movw	r30, r16
    447a:	20 81       	ld	r18, Z
    447c:	31 81       	ldd	r19, Z+1	; 0x01
    447e:	42 81       	ldd	r20, Z+2	; 0x02
    4480:	53 81       	ldd	r21, Z+3	; 0x03
    4482:	6c 81       	ldd	r22, Y+4	; 0x04
    4484:	7d 81       	ldd	r23, Y+5	; 0x05
    4486:	8e 81       	ldd	r24, Y+6	; 0x06
    4488:	9f 81       	ldd	r25, Y+7	; 0x07
    448a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    448e:	9b 01       	movw	r18, r22
    4490:	ac 01       	movw	r20, r24
    4492:	c5 01       	movw	r24, r10
    4494:	b4 01       	movw	r22, r8
    4496:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    449a:	f7 01       	movw	r30, r14
    449c:	60 87       	std	Z+8, r22	; 0x08
    449e:	71 87       	std	Z+9, r23	; 0x09
    44a0:	82 87       	std	Z+10, r24	; 0x0a
    44a2:	93 87       	std	Z+11, r25	; 0x0b
}
    44a4:	df 91       	pop	r29
    44a6:	cf 91       	pop	r28
    44a8:	1f 91       	pop	r17
    44aa:	0f 91       	pop	r16
    44ac:	ff 90       	pop	r15
    44ae:	ef 90       	pop	r14
    44b0:	bf 90       	pop	r11
    44b2:	af 90       	pop	r10
    44b4:	9f 90       	pop	r9
    44b6:	8f 90       	pop	r8
    44b8:	08 95       	ret

000044ba <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    44ba:	cf 92       	push	r12
    44bc:	df 92       	push	r13
    44be:	ef 92       	push	r14
    44c0:	ff 92       	push	r15
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	ec 01       	movw	r28, r24
    44c8:	6a 01       	movw	r12, r20
    44ca:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    44cc:	9a 01       	movw	r18, r20
    44ce:	ab 01       	movw	r20, r22
    44d0:	68 81       	ld	r22, Y
    44d2:	79 81       	ldd	r23, Y+1	; 0x01
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	9b 81       	ldd	r25, Y+3	; 0x03
    44d8:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    44dc:	68 83       	st	Y, r22
    44de:	79 83       	std	Y+1, r23	; 0x01
    44e0:	8a 83       	std	Y+2, r24	; 0x02
    44e2:	9b 83       	std	Y+3, r25	; 0x03
    44e4:	a7 01       	movw	r20, r14
    44e6:	96 01       	movw	r18, r12
    44e8:	6c 81       	ldd	r22, Y+4	; 0x04
    44ea:	7d 81       	ldd	r23, Y+5	; 0x05
    44ec:	8e 81       	ldd	r24, Y+6	; 0x06
    44ee:	9f 81       	ldd	r25, Y+7	; 0x07
    44f0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    44f4:	6c 83       	std	Y+4, r22	; 0x04
    44f6:	7d 83       	std	Y+5, r23	; 0x05
    44f8:	8e 83       	std	Y+6, r24	; 0x06
    44fa:	9f 83       	std	Y+7, r25	; 0x07
    44fc:	a7 01       	movw	r20, r14
    44fe:	96 01       	movw	r18, r12
    4500:	68 85       	ldd	r22, Y+8	; 0x08
    4502:	79 85       	ldd	r23, Y+9	; 0x09
    4504:	8a 85       	ldd	r24, Y+10	; 0x0a
    4506:	9b 85       	ldd	r25, Y+11	; 0x0b
    4508:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    450c:	68 87       	std	Y+8, r22	; 0x08
    450e:	79 87       	std	Y+9, r23	; 0x09
    4510:	8a 87       	std	Y+10, r24	; 0x0a
    4512:	9b 87       	std	Y+11, r25	; 0x0b
}
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	ff 90       	pop	r15
    451a:	ef 90       	pop	r14
    451c:	df 90       	pop	r13
    451e:	cf 90       	pop	r12
    4520:	08 95       	ret

00004522 <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    4522:	cf 92       	push	r12
    4524:	df 92       	push	r13
    4526:	ef 92       	push	r14
    4528:	ff 92       	push	r15
    452a:	0f 93       	push	r16
    452c:	1f 93       	push	r17
    452e:	cf 93       	push	r28
    4530:	df 93       	push	r29
    4532:	6a 01       	movw	r12, r20
    4534:	7b 01       	movw	r14, r22
    4536:	ec 01       	movw	r28, r24
    4538:	8c 01       	movw	r16, r24
    453a:	00 5f       	subi	r16, 0xF0	; 240
    453c:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i;
  for(i = 0; i < 4; i++)
    q[i] = q[i] * s;
    453e:	a7 01       	movw	r20, r14
    4540:	96 01       	movw	r18, r12
    4542:	68 81       	ld	r22, Y
    4544:	79 81       	ldd	r23, Y+1	; 0x01
    4546:	8a 81       	ldd	r24, Y+2	; 0x02
    4548:	9b 81       	ldd	r25, Y+3	; 0x03
    454a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    454e:	69 93       	st	Y+, r22
    4550:	79 93       	st	Y+, r23
    4552:	89 93       	st	Y+, r24
    4554:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    4556:	c0 17       	cp	r28, r16
    4558:	d1 07       	cpc	r29, r17
    455a:	89 f7       	brne	.-30     	; 0x453e <scalar_into_quaternion+0x1c>
    q[i] = q[i] * s;
}
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	ff 90       	pop	r15
    4566:	ef 90       	pop	r14
    4568:	df 90       	pop	r13
    456a:	cf 90       	pop	r12
    456c:	08 95       	ret

0000456e <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    456e:	cf 92       	push	r12
    4570:	df 92       	push	r13
    4572:	ef 92       	push	r14
    4574:	ff 92       	push	r15
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    457c:	2f dd       	rcall	.-1442   	; 0x3fdc <vector_norm>
    457e:	6b 01       	movw	r12, r22
    4580:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    4582:	9b 01       	movw	r18, r22
    4584:	ac 01       	movw	r20, r24
    4586:	68 81       	ld	r22, Y
    4588:	79 81       	ldd	r23, Y+1	; 0x01
    458a:	8a 81       	ldd	r24, Y+2	; 0x02
    458c:	9b 81       	ldd	r25, Y+3	; 0x03
    458e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4592:	68 83       	st	Y, r22
    4594:	79 83       	std	Y+1, r23	; 0x01
    4596:	8a 83       	std	Y+2, r24	; 0x02
    4598:	9b 83       	std	Y+3, r25	; 0x03
    459a:	a7 01       	movw	r20, r14
    459c:	96 01       	movw	r18, r12
    459e:	6c 81       	ldd	r22, Y+4	; 0x04
    45a0:	7d 81       	ldd	r23, Y+5	; 0x05
    45a2:	8e 81       	ldd	r24, Y+6	; 0x06
    45a4:	9f 81       	ldd	r25, Y+7	; 0x07
    45a6:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    45aa:	6c 83       	std	Y+4, r22	; 0x04
    45ac:	7d 83       	std	Y+5, r23	; 0x05
    45ae:	8e 83       	std	Y+6, r24	; 0x06
    45b0:	9f 83       	std	Y+7, r25	; 0x07
    45b2:	a7 01       	movw	r20, r14
    45b4:	96 01       	movw	r18, r12
    45b6:	68 85       	ldd	r22, Y+8	; 0x08
    45b8:	79 85       	ldd	r23, Y+9	; 0x09
    45ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    45bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    45be:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    45c2:	68 87       	std	Y+8, r22	; 0x08
    45c4:	79 87       	std	Y+9, r23	; 0x09
    45c6:	8a 87       	std	Y+10, r24	; 0x0a
    45c8:	9b 87       	std	Y+11, r25	; 0x0b
}
    45ca:	df 91       	pop	r29
    45cc:	cf 91       	pop	r28
    45ce:	ff 90       	pop	r15
    45d0:	ef 90       	pop	r14
    45d2:	df 90       	pop	r13
    45d4:	cf 90       	pop	r12
    45d6:	08 95       	ret

000045d8 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    45d8:	cf 92       	push	r12
    45da:	df 92       	push	r13
    45dc:	ef 92       	push	r14
    45de:	ff 92       	push	r15
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	8c 01       	movw	r16, r24
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    45ea:	6a dd       	rcall	.-1324   	; 0x40c0 <quaternion_norm>
    45ec:	6b 01       	movw	r12, r22
    45ee:	7c 01       	movw	r14, r24
    45f0:	e8 01       	movw	r28, r16
    45f2:	00 5f       	subi	r16, 0xF0	; 240
    45f4:	1f 4f       	sbci	r17, 0xFF	; 255
  
  for(i = 0; i < 4; i++)
    q[i] = q[i] / norm;
    45f6:	a7 01       	movw	r20, r14
    45f8:	96 01       	movw	r18, r12
    45fa:	68 81       	ld	r22, Y
    45fc:	79 81       	ldd	r23, Y+1	; 0x01
    45fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4600:	9b 81       	ldd	r25, Y+3	; 0x03
    4602:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4606:	69 93       	st	Y+, r22
    4608:	79 93       	st	Y+, r23
    460a:	89 93       	st	Y+, r24
    460c:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    460e:	c0 17       	cp	r28, r16
    4610:	d1 07       	cpc	r29, r17
    4612:	89 f7       	brne	.-30     	; 0x45f6 <convert_unit_quaternion+0x1e>
    q[i] = q[i] / norm;
}
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	ff 90       	pop	r15
    461e:	ef 90       	pop	r14
    4620:	df 90       	pop	r13
    4622:	cf 90       	pop	r12
    4624:	08 95       	ret

00004626 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    4626:	57 9a       	sbi	0x0a, 7	; 10
    4628:	08 95       	ret

0000462a <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS1();// make this poll_ss()
    462a:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <poll_SS1>
    462e:	08 95       	ret

00004630 <read_MM>:
void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
 // poll_MM(); //for uart 1
  poll_MM1();// for uart0
    4630:	c9 ca       	rjmp	.-2670   	; 0x3bc4 <poll_MM1>
    4632:	08 95       	ret

00004634 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    4634:	84 b3       	in	r24, 0x14	; 20
    4636:	88 63       	ori	r24, 0x38	; 56
    4638:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    463a:	82 b1       	in	r24, 0x02	; 2
    463c:	88 63       	ori	r24, 0x38	; 56
    463e:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    4640:	ab e8       	ldi	r26, 0x8B	; 139
    4642:	b0 e0       	ldi	r27, 0x00	; 0
    4644:	1c 92       	st	X, r1
  TCCR3B = 0;
    4646:	ea e8       	ldi	r30, 0x8A	; 138
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	10 82       	st	Z, r1
  TCCR3C = 0;
    464c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    4650:	8c 91       	ld	r24, X
    4652:	8a 6a       	ori	r24, 0xAA	; 170
    4654:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    4656:	80 81       	ld	r24, Z
    4658:	81 61       	ori	r24, 0x11	; 17
    465a:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    465c:	8f ef       	ldi	r24, 0xFF	; 255
    465e:	9f ef       	ldi	r25, 0xFF	; 255
    4660:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    4664:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3A = 0x0000;
    4668:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    466c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = 0x0000;
    4670:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4674:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = 0x0000;
    4678:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    467c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4680:	85 b3       	in	r24, 0x15	; 21
    4682:	87 7c       	andi	r24, 0xC7	; 199
    4684:	85 bb       	out	0x15, r24	; 21
    4686:	08 95       	ret

00004688 <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4688:	85 b3       	in	r24, 0x15	; 21
    468a:	87 7c       	andi	r24, 0xC7	; 199
    468c:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    468e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
    4692:	88 23       	and	r24, r24
    4694:	11 f0       	breq	.+4      	; 0x469a <set_PWM+0x12>
   PORTC |= _BV(PC5);
    4696:	ad 9a       	sbi	0x15, 5	; 21
    4698:	01 c0       	rjmp	.+2      	; 0x469c <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    469a:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    469c:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
    46a0:	88 23       	and	r24, r24
    46a2:	11 f0       	breq	.+4      	; 0x46a8 <set_PWM+0x20>
   PORTC |= _BV(PC4);
    46a4:	ac 9a       	sbi	0x15, 4	; 21
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    46a8:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    46aa:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Current_state+0x71>
    46ae:	88 23       	and	r24, r24
    46b0:	11 f0       	breq	.+4      	; 0x46b6 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    46b2:	ab 9a       	sbi	0x15, 3	; 21
    46b4:	01 c0       	rjmp	.+2      	; 0x46b8 <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    46b6:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    46b8:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <Current_state+0x69>
    46bc:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <Current_state+0x6a>
    46c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    46c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = Current_state.pwm.y;
    46c8:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Current_state+0x6b>
    46cc:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <Current_state+0x6c>
    46d0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    46d4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = Current_state.pwm.z;
    46d8:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <Current_state+0x6d>
    46dc:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <Current_state+0x6e>
    46e0:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    46e4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    46e8:	08 95       	ret

000046ea <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    46ea:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <Current_state+0x6a>
    46ee:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <Current_state+0x69>
  Current_state.pwm.y = 0;
    46f2:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <Current_state+0x6c>
    46f6:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <Current_state+0x6b>
  Current_state.pwm.z = 0;
    46fa:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Current_state+0x6e>
    46fe:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <Current_state+0x6d>
  Current_state.pwm.x_dir = 0;
    4702:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
  Current_state.pwm.y_dir = 0;
    4706:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
  Current_state.pwm.z_dir = 0;
    470a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Current_state+0x71>
  set_PWM();
    470e:	bc cf       	rjmp	.-136    	; 0x4688 <set_PWM>
    4710:	08 95       	ret

00004712 <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    4712:	ef 92       	push	r14
    4714:	ff 92       	push	r15
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    471e:	cb ea       	ldi	r28, 0xAB	; 171
    4720:	d4 e0       	ldi	r29, 0x04	; 4
    4722:	19 aa       	std	Y+49, r1	; 0x31
    4724:	18 aa       	std	Y+48, r1	; 0x30
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    4726:	68 81       	ld	r22, Y
    4728:	79 81       	ldd	r23, Y+1	; 0x01
    472a:	8a 81       	ldd	r24, Y+2	; 0x02
    472c:	9b 81       	ldd	r25, Y+3	; 0x03
    472e:	08 e1       	ldi	r16, 0x18	; 24
    4730:	14 e0       	ldi	r17, 0x04	; 4
    4732:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	48 ec       	ldi	r20, 0xC8	; 200
    473c:	52 e4       	ldi	r21, 0x42	; 66
    473e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4742:	d8 01       	movw	r26, r16
    4744:	6d 93       	st	X+, r22
    4746:	7d 93       	st	X+, r23
    4748:	8d 93       	st	X+, r24
    474a:	9c 93       	st	X, r25
    474c:	13 97       	sbiw	r26, 0x03	; 3
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    474e:	6c 81       	ldd	r22, Y+4	; 0x04
    4750:	7d 81       	ldd	r23, Y+5	; 0x05
    4752:	8e 81       	ldd	r24, Y+6	; 0x06
    4754:	9f 81       	ldd	r25, Y+7	; 0x07
    4756:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	48 ec       	ldi	r20, 0xC8	; 200
    4760:	52 e4       	ldi	r21, 0x42	; 66
    4762:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4766:	f8 01       	movw	r30, r16
    4768:	64 83       	std	Z+4, r22	; 0x04
    476a:	75 83       	std	Z+5, r23	; 0x05
    476c:	86 83       	std	Z+6, r24	; 0x06
    476e:	97 83       	std	Z+7, r25	; 0x07
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    4770:	68 85       	ldd	r22, Y+8	; 0x08
    4772:	79 85       	ldd	r23, Y+9	; 0x09
    4774:	8a 85       	ldd	r24, Y+10	; 0x0a
    4776:	9b 85       	ldd	r25, Y+11	; 0x0b
    4778:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	48 ec       	ldi	r20, 0xC8	; 200
    4782:	52 e4       	ldi	r21, 0x42	; 66
    4784:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4788:	d8 01       	movw	r26, r16
    478a:	18 96       	adiw	r26, 0x08	; 8
    478c:	6d 93       	st	X+, r22
    478e:	7d 93       	st	X+, r23
    4790:	8d 93       	st	X+, r24
    4792:	9c 93       	st	X, r25
    4794:	1b 97       	sbiw	r26, 0x0b	; 11
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    4796:	6c 85       	ldd	r22, Y+12	; 0x0c
    4798:	7d 85       	ldd	r23, Y+13	; 0x0d
    479a:	8e 85       	ldd	r24, Y+14	; 0x0e
    479c:	9f 85       	ldd	r25, Y+15	; 0x0f
    479e:	0f 2e       	mov	r0, r31
    47a0:	fc e0       	ldi	r31, 0x0C	; 12
    47a2:	ef 2e       	mov	r14, r31
    47a4:	f4 e0       	ldi	r31, 0x04	; 4
    47a6:	ff 2e       	mov	r15, r31
    47a8:	f0 2d       	mov	r31, r0
    47aa:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a e7       	ldi	r20, 0x7A	; 122
    47b4:	54 e4       	ldi	r21, 0x44	; 68
    47b6:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    47ba:	f7 01       	movw	r30, r14
    47bc:	60 83       	st	Z, r22
    47be:	71 83       	std	Z+1, r23	; 0x01
    47c0:	82 83       	std	Z+2, r24	; 0x02
    47c2:	93 83       	std	Z+3, r25	; 0x03
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    47c4:	68 89       	ldd	r22, Y+16	; 0x10
    47c6:	79 89       	ldd	r23, Y+17	; 0x11
    47c8:	8a 89       	ldd	r24, Y+18	; 0x12
    47ca:	9b 89       	ldd	r25, Y+19	; 0x13
    47cc:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	4a e7       	ldi	r20, 0x7A	; 122
    47d6:	54 e4       	ldi	r21, 0x44	; 68
    47d8:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    47dc:	d7 01       	movw	r26, r14
    47de:	14 96       	adiw	r26, 0x04	; 4
    47e0:	6d 93       	st	X+, r22
    47e2:	7d 93       	st	X+, r23
    47e4:	8d 93       	st	X+, r24
    47e6:	9c 93       	st	X, r25
    47e8:	17 97       	sbiw	r26, 0x07	; 7
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    47ea:	6c 89       	ldd	r22, Y+20	; 0x14
    47ec:	7d 89       	ldd	r23, Y+21	; 0x15
    47ee:	8e 89       	ldd	r24, Y+22	; 0x16
    47f0:	9f 89       	ldd	r25, Y+23	; 0x17
    47f2:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	4a e7       	ldi	r20, 0x7A	; 122
    47fc:	54 e4       	ldi	r21, 0x44	; 68
    47fe:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4802:	f7 01       	movw	r30, r14
    4804:	60 87       	std	Z+8, r22	; 0x08
    4806:	71 87       	std	Z+9, r23	; 0x09
    4808:	82 87       	std	Z+10, r24	; 0x0a
    480a:	93 87       	std	Z+11, r25	; 0x0b
   
  get_seconds_since_equinox();//check
    480c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    4810:	e4 e3       	ldi	r30, 0x34	; 52
    4812:	f4 e0       	ldi	r31, 0x04	; 4
    4814:	d8 01       	movw	r26, r16
    4816:	4d 91       	ld	r20, X+
    4818:	5d 91       	ld	r21, X+
    481a:	6d 91       	ld	r22, X+
    481c:	7c 91       	ld	r23, X
    481e:	13 97       	sbiw	r26, 0x03	; 3
    4820:	40 83       	st	Z, r20
    4822:	51 83       	std	Z+1, r21	; 0x01
    4824:	62 83       	std	Z+2, r22	; 0x02
    4826:	73 83       	std	Z+3, r23	; 0x03
  r_ecef_ash[1] = v_r_ecef[1];
    4828:	14 96       	adiw	r26, 0x04	; 4
    482a:	4d 91       	ld	r20, X+
    482c:	5d 91       	ld	r21, X+
    482e:	6d 91       	ld	r22, X+
    4830:	7c 91       	ld	r23, X
    4832:	17 97       	sbiw	r26, 0x07	; 7
    4834:	44 83       	std	Z+4, r20	; 0x04
    4836:	55 83       	std	Z+5, r21	; 0x05
    4838:	66 83       	std	Z+6, r22	; 0x06
    483a:	77 83       	std	Z+7, r23	; 0x07
  r_ecef_ash[2] = v_r_ecef[2];
    483c:	18 96       	adiw	r26, 0x08	; 8
    483e:	4d 91       	ld	r20, X+
    4840:	5d 91       	ld	r21, X+
    4842:	6d 91       	ld	r22, X+
    4844:	7c 91       	ld	r23, X
    4846:	1b 97       	sbiw	r26, 0x0b	; 11
    4848:	40 87       	std	Z+8, r20	; 0x08
    484a:	51 87       	std	Z+9, r21	; 0x09
    484c:	62 87       	std	Z+10, r22	; 0x0a
    484e:	73 87       	std	Z+11, r23	; 0x0b
  ecef2eci(v_r_ecef, v_r);
    4850:	60 e4       	ldi	r22, 0x40	; 64
    4852:	74 e0       	ldi	r23, 0x04	; 4
    4854:	c8 01       	movw	r24, r16
    4856:	0e 94 19 10 	call	0x2032	; 0x2032 <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    485a:	68 e2       	ldi	r22, 0x28	; 40
    485c:	74 e0       	ldi	r23, 0x04	; 4
    485e:	c7 01       	movw	r24, r14
    4860:	0e 94 19 10 	call	0x2032	; 0x2032 <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4864:	69 8d       	ldd	r22, Y+25	; 0x19
    4866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    486a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    486c:	0f e9       	ldi	r16, 0x9F	; 159
    486e:	14 e0       	ldi	r17, 0x04	; 4
    4870:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    4874:	20 e8       	ldi	r18, 0x80	; 128
    4876:	36 e9       	ldi	r19, 0x96	; 150
    4878:	48 e1       	ldi	r20, 0x18	; 24
    487a:	5b e4       	ldi	r21, 0x4B	; 75
    487c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4880:	25 e3       	ldi	r18, 0x35	; 53
    4882:	3a ef       	ldi	r19, 0xFA	; 250
    4884:	4e e8       	ldi	r20, 0x8E	; 142
    4886:	5c e3       	ldi	r21, 0x3C	; 60
    4888:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    488c:	f8 01       	movw	r30, r16
    488e:	60 83       	st	Z, r22
    4890:	71 83       	std	Z+1, r23	; 0x01
    4892:	82 83       	std	Z+2, r24	; 0x02
    4894:	93 83       	std	Z+3, r25	; 0x03
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    4896:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4898:	7e 8d       	ldd	r23, Y+30	; 0x1e
    489a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    489c:	98 a1       	ldd	r25, Y+32	; 0x20
    489e:	0e 94 b4 34 	call	0x6968	; 0x6968 <__floatsisf>
    48a2:	20 e8       	ldi	r18, 0x80	; 128
    48a4:	36 e9       	ldi	r19, 0x96	; 150
    48a6:	48 e1       	ldi	r20, 0x18	; 24
    48a8:	5b e4       	ldi	r21, 0x4B	; 75
    48aa:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    48ae:	25 e3       	ldi	r18, 0x35	; 53
    48b0:	3a ef       	ldi	r19, 0xFA	; 250
    48b2:	4e e8       	ldi	r20, 0x8E	; 142
    48b4:	5c e3       	ldi	r21, 0x3C	; 60
    48b6:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    48ba:	d8 01       	movw	r26, r16
    48bc:	14 96       	adiw	r26, 0x04	; 4
    48be:	6d 93       	st	X+, r22
    48c0:	7d 93       	st	X+, r23
    48c2:	8d 93       	st	X+, r24
    48c4:	9c 93       	st	X, r25
    48c6:	17 97       	sbiw	r26, 0x07	; 7
  
  GPS_done = 0;
    48c8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <GPS_done>
}
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	1f 91       	pop	r17
    48d2:	0f 91       	pop	r16
    48d4:	ff 90       	pop	r15
    48d6:	ef 90       	pop	r14
    48d8:	08 95       	ret

000048da <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    48da:	2f 92       	push	r2
    48dc:	3f 92       	push	r3
    48de:	4f 92       	push	r4
    48e0:	5f 92       	push	r5
    48e2:	6f 92       	push	r6
    48e4:	7f 92       	push	r7
    48e6:	8f 92       	push	r8
    48e8:	9f 92       	push	r9
    48ea:	af 92       	push	r10
    48ec:	bf 92       	push	r11
    48ee:	cf 92       	push	r12
    48f0:	df 92       	push	r13
    48f2:	ef 92       	push	r14
    48f4:	ff 92       	push	r15
    48f6:	0f 93       	push	r16
    48f8:	1f 93       	push	r17
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	cd b7       	in	r28, 0x3d	; 61
    4900:	de b7       	in	r29, 0x3e	; 62
    4902:	64 97       	sbiw	r28, 0x14	; 20
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	1c 01       	movw	r2, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    4910:	84 e3       	ldi	r24, 0x34	; 52
    4912:	94 e0       	ldi	r25, 0x04	; 4
    4914:	63 db       	rcall	.-2362   	; 0x3fdc <vector_norm>
    4916:	2b 01       	movw	r4, r22
    4918:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    491a:	9b 01       	movw	r18, r22
    491c:	ac 01       	movw	r20, r24
    491e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4922:	9b 01       	movw	r18, r22
    4924:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    4926:	61 eb       	ldi	r22, 0xB1	; 177
    4928:	7a e1       	ldi	r23, 0x1A	; 26
    492a:	86 e7       	ldi	r24, 0x76	; 118
    492c:	91 e5       	ldi	r25, 0x51	; 81
    492e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4932:	6d 87       	std	Y+13, r22	; 0x0d
    4934:	7e 87       	std	Y+14, r23	; 0x0e
    4936:	8f 87       	std	Y+15, r24	; 0x0f
    4938:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e4       	ldi	r20, 0x40	; 64
    4940:	50 e4       	ldi	r21, 0x40	; 64
    4942:	c3 01       	movw	r24, r6
    4944:	b2 01       	movw	r22, r4
    4946:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <pow>
    494a:	6b 01       	movw	r12, r22
    494c:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e8       	ldi	r20, 0x80	; 128
    4954:	50 e4       	ldi	r21, 0x40	; 64
    4956:	c3 01       	movw	r24, r6
    4958:	b2 01       	movw	r22, r4
    495a:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <pow>
    495e:	2b 01       	movw	r4, r22
    4960:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    4962:	04 e3       	ldi	r16, 0x34	; 52
    4964:	14 e0       	ldi	r17, 0x04	; 4
    4966:	f8 01       	movw	r30, r16
    4968:	80 84       	ldd	r8, Z+8	; 0x08
    496a:	91 84       	ldd	r9, Z+9	; 0x09
    496c:	a2 84       	ldd	r10, Z+10	; 0x0a
    496e:	b3 84       	ldd	r11, Z+11	; 0x0b
    4970:	a5 01       	movw	r20, r10
    4972:	94 01       	movw	r18, r8
    4974:	c5 01       	movw	r24, r10
    4976:	b4 01       	movw	r22, r8
    4978:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    497c:	28 e9       	ldi	r18, 0x98	; 152
    497e:	38 e0       	ldi	r19, 0x08	; 8
    4980:	45 e0       	ldi	r20, 0x05	; 5
    4982:	5c e3       	ldi	r21, 0x3C	; 60
    4984:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4988:	2a ec       	ldi	r18, 0xCA	; 202
    498a:	3e ef       	ldi	r19, 0xFE	; 254
    498c:	43 e1       	ldi	r20, 0x13	; 19
    498e:	56 e5       	ldi	r21, 0x56	; 86
    4990:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4994:	a3 01       	movw	r20, r6
    4996:	92 01       	movw	r18, r4
    4998:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    499c:	69 8b       	std	Y+17, r22	; 0x11
    499e:	7a 8b       	std	Y+18, r23	; 0x12
    49a0:	8b 8b       	std	Y+19, r24	; 0x13
    49a2:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	40 e8       	ldi	r20, 0x80	; 128
    49aa:	5f e3       	ldi	r21, 0x3F	; 63
    49ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    49ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    49b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49b2:	98 89       	ldd	r25, Y+16	; 0x10
    49b4:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    49b8:	29 89       	ldd	r18, Y+17	; 0x11
    49ba:	3a 89       	ldd	r19, Y+18	; 0x12
    49bc:	4b 89       	ldd	r20, Y+19	; 0x13
    49be:	5c 89       	ldd	r21, Y+20	; 0x14
    49c0:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    49c4:	2b 01       	movw	r4, r22
    49c6:	3c 01       	movw	r6, r24
    49c8:	21 ef       	ldi	r18, 0xF1	; 241
    49ca:	39 e4       	ldi	r19, 0x49	; 73
    49cc:	45 eb       	ldi	r20, 0xB5	; 181
    49ce:	57 ed       	ldi	r21, 0xD7	; 215
    49d0:	f8 01       	movw	r30, r16
    49d2:	60 81       	ld	r22, Z
    49d4:	71 81       	ldd	r23, Z+1	; 0x01
    49d6:	82 81       	ldd	r24, Z+2	; 0x02
    49d8:	93 81       	ldd	r25, Z+3	; 0x03
    49da:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    49de:	a3 01       	movw	r20, r6
    49e0:	92 01       	movw	r18, r4
    49e2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    49e6:	a7 01       	movw	r20, r14
    49e8:	96 01       	movw	r18, r12
    49ea:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    49ee:	69 83       	std	Y+1, r22	; 0x01
    49f0:	7a 83       	std	Y+2, r23	; 0x02
    49f2:	8b 83       	std	Y+3, r24	; 0x03
    49f4:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    49f6:	21 ef       	ldi	r18, 0xF1	; 241
    49f8:	39 e4       	ldi	r19, 0x49	; 73
    49fa:	45 eb       	ldi	r20, 0xB5	; 181
    49fc:	57 ed       	ldi	r21, 0xD7	; 215
    49fe:	f8 01       	movw	r30, r16
    4a00:	64 81       	ldd	r22, Z+4	; 0x04
    4a02:	75 81       	ldd	r23, Z+5	; 0x05
    4a04:	86 81       	ldd	r24, Z+6	; 0x06
    4a06:	97 81       	ldd	r25, Z+7	; 0x07
    4a08:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4a0c:	9b 01       	movw	r18, r22
    4a0e:	ac 01       	movw	r20, r24
    4a10:	c3 01       	movw	r24, r6
    4a12:	b2 01       	movw	r22, r4
    4a14:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4a18:	a7 01       	movw	r20, r14
    4a1a:	96 01       	movw	r18, r12
    4a1c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4a20:	6d 83       	std	Y+5, r22	; 0x05
    4a22:	7e 83       	std	Y+6, r23	; 0x06
    4a24:	8f 83       	std	Y+7, r24	; 0x07
    4a26:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    4a28:	21 ef       	ldi	r18, 0xF1	; 241
    4a2a:	39 e4       	ldi	r19, 0x49	; 73
    4a2c:	45 eb       	ldi	r20, 0xB5	; 181
    4a2e:	57 ed       	ldi	r21, 0xD7	; 215
    4a30:	c5 01       	movw	r24, r10
    4a32:	b4 01       	movw	r22, r8
    4a34:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4a38:	2b 01       	movw	r4, r22
    4a3a:	3c 01       	movw	r6, r24
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e4       	ldi	r20, 0x40	; 64
    4a42:	50 e4       	ldi	r21, 0x40	; 64
    4a44:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a46:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a4a:	98 89       	ldd	r25, Y+16	; 0x10
    4a4c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4a5c:	29 89       	ldd	r18, Y+17	; 0x11
    4a5e:	3a 89       	ldd	r19, Y+18	; 0x12
    4a60:	4b 89       	ldd	r20, Y+19	; 0x13
    4a62:	5c 89       	ldd	r21, Y+20	; 0x14
    4a64:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    4a68:	9b 01       	movw	r18, r22
    4a6a:	ac 01       	movw	r20, r24
    4a6c:	c3 01       	movw	r24, r6
    4a6e:	b2 01       	movw	r22, r4
    4a70:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4a74:	a7 01       	movw	r20, r14
    4a76:	96 01       	movw	r18, r12
    4a78:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4a7c:	69 87       	std	Y+9, r22	; 0x09
    4a7e:	7a 87       	std	Y+10, r23	; 0x0a
    4a80:	8b 87       	std	Y+11, r24	; 0x0b
    4a82:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    4a84:	b1 01       	movw	r22, r2
    4a86:	ce 01       	movw	r24, r28
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	0e 94 19 10 	call	0x2032	; 0x2032 <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    4a8e:	64 96       	adiw	r28, 0x14	; 20
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	1f 91       	pop	r17
    4aa0:	0f 91       	pop	r16
    4aa2:	ff 90       	pop	r15
    4aa4:	ef 90       	pop	r14
    4aa6:	df 90       	pop	r13
    4aa8:	cf 90       	pop	r12
    4aaa:	bf 90       	pop	r11
    4aac:	af 90       	pop	r10
    4aae:	9f 90       	pop	r9
    4ab0:	8f 90       	pop	r8
    4ab2:	7f 90       	pop	r7
    4ab4:	6f 90       	pop	r6
    4ab6:	5f 90       	pop	r5
    4ab8:	4f 90       	pop	r4
    4aba:	3f 90       	pop	r3
    4abc:	2f 90       	pop	r2
    4abe:	08 95       	ret

00004ac0 <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    4ac0:	7f 92       	push	r7
    4ac2:	8f 92       	push	r8
    4ac4:	9f 92       	push	r9
    4ac6:	af 92       	push	r10
    4ac8:	bf 92       	push	r11
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	cd b7       	in	r28, 0x3d	; 61
    4adc:	de b7       	in	r29, 0x3e	; 62
    4ade:	68 97       	sbiw	r28, 0x18	; 24
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	f8 94       	cli
    4ae4:	de bf       	out	0x3e, r29	; 62
    4ae6:	0f be       	out	0x3f, r0	; 63
    4ae8:	cd bf       	out	0x3d, r28	; 61
    4aea:	0f 2e       	mov	r0, r31
    4aec:	fa e0       	ldi	r31, 0x0A	; 10
    4aee:	7f 2e       	mov	r7, r31
    4af0:	f0 2d       	mov	r31, r0
    4af2:	0f 2e       	mov	r0, r31
    4af4:	f4 e3       	ldi	r31, 0x34	; 52
    4af6:	cf 2e       	mov	r12, r31
    4af8:	f4 e0       	ldi	r31, 0x04	; 4
    4afa:	df 2e       	mov	r13, r31
    4afc:	f0 2d       	mov	r31, r0
    4afe:	0f 2e       	mov	r0, r31
    4b00:	f0 e4       	ldi	r31, 0x40	; 64
    4b02:	af 2e       	mov	r10, r31
    4b04:	f4 e0       	ldi	r31, 0x04	; 4
    4b06:	bf 2e       	mov	r11, r31
    4b08:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    4b0a:	ce 01       	movw	r24, r28
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	e5 de       	rcall	.-566    	; 0x48da <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    4b10:	be 01       	movw	r22, r28
    4b12:	63 5f       	subi	r22, 0xF3	; 243
    4b14:	7f 4f       	sbci	r23, 0xFF	; 255
    4b16:	88 e2       	ldi	r24, 0x28	; 40
    4b18:	94 e0       	ldi	r25, 0x04	; 4
    4b1a:	30 da       	rcall	.-2976   	; 0x3f7c <copy_vector>
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	01 96       	adiw	r24, 0x01	; 1
    4b20:	4c 01       	movw	r8, r24
    4b22:	0f 2e       	mov	r0, r31
    4b24:	f8 e2       	ldi	r31, 0x28	; 40
    4b26:	ef 2e       	mov	r14, r31
    4b28:	f4 e0       	ldi	r31, 0x04	; 4
    4b2a:	ff 2e       	mov	r15, r31
    4b2c:	f0 2d       	mov	r31, r0
    4b2e:	87 01       	movw	r16, r14
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    4b30:	f4 01       	movw	r30, r8
    4b32:	61 91       	ld	r22, Z+
    4b34:	71 91       	ld	r23, Z+
    4b36:	81 91       	ld	r24, Z+
    4b38:	91 91       	ld	r25, Z+
    4b3a:	4f 01       	movw	r8, r30
    4b3c:	2d ec       	ldi	r18, 0xCD	; 205
    4b3e:	3c ec       	ldi	r19, 0xCC	; 204
    4b40:	4c e4       	ldi	r20, 0x4C	; 76
    4b42:	5e e3       	ldi	r21, 0x3E	; 62
    4b44:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4b48:	9b 01       	movw	r18, r22
    4b4a:	ac 01       	movw	r20, r24
    4b4c:	f8 01       	movw	r30, r16
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4b5a:	f8 01       	movw	r30, r16
    4b5c:	61 93       	st	Z+, r22
    4b5e:	71 93       	st	Z+, r23
    4b60:	81 93       	st	Z+, r24
    4b62:	91 93       	st	Z+, r25
    4b64:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    4b66:	ec 15       	cp	r30, r12
    4b68:	fd 05       	cpc	r31, r13
    4b6a:	11 f7       	brne	.-60     	; 0x4b30 <sgp_orbit_propagator+0x70>
    4b6c:	ce 01       	movw	r24, r28
    4b6e:	0d 96       	adiw	r24, 0x0d	; 13
    4b70:	4c 01       	movw	r8, r24
    4b72:	85 01       	movw	r16, r10
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4b74:	f7 01       	movw	r30, r14
    4b76:	61 91       	ld	r22, Z+
    4b78:	71 91       	ld	r23, Z+
    4b7a:	81 91       	ld	r24, Z+
    4b7c:	91 91       	ld	r25, Z+
    4b7e:	7f 01       	movw	r14, r30
    4b80:	f4 01       	movw	r30, r8
    4b82:	21 91       	ld	r18, Z+
    4b84:	31 91       	ld	r19, Z+
    4b86:	41 91       	ld	r20, Z+
    4b88:	51 91       	ld	r21, Z+
    4b8a:	4f 01       	movw	r8, r30
    4b8c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	40 e0       	ldi	r20, 0x00	; 0
    4b96:	5f e3       	ldi	r21, 0x3F	; 63
    4b98:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4b9c:	2d ec       	ldi	r18, 0xCD	; 205
    4b9e:	3c ec       	ldi	r19, 0xCC	; 204
    4ba0:	4c e4       	ldi	r20, 0x4C	; 76
    4ba2:	5e e3       	ldi	r21, 0x3E	; 62
    4ba4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4ba8:	9b 01       	movw	r18, r22
    4baa:	ac 01       	movw	r20, r24
    4bac:	f8 01       	movw	r30, r16
    4bae:	60 81       	ld	r22, Z
    4bb0:	71 81       	ldd	r23, Z+1	; 0x01
    4bb2:	82 81       	ldd	r24, Z+2	; 0x02
    4bb4:	93 81       	ldd	r25, Z+3	; 0x03
    4bb6:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4bba:	f8 01       	movw	r30, r16
    4bbc:	61 93       	st	Z+, r22
    4bbe:	71 93       	st	Z+, r23
    4bc0:	81 93       	st	Z+, r24
    4bc2:	91 93       	st	Z+, r25
    4bc4:	8f 01       	movw	r16, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    4bc6:	ec 14       	cp	r14, r12
    4bc8:	fd 04       	cpc	r15, r13
    4bca:	a1 f6       	brne	.-88     	; 0x4b74 <sgp_orbit_propagator+0xb4>
    4bcc:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    4bce:	71 10       	cpse	r7, r1
    4bd0:	9c cf       	rjmp	.-200    	; 0x4b0a <sgp_orbit_propagator+0x4a>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    4bd2:	68 96       	adiw	r28, 0x18	; 24
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	f8 94       	cli
    4bd8:	de bf       	out	0x3e, r29	; 62
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	cd bf       	out	0x3d, r28	; 61
    4bde:	df 91       	pop	r29
    4be0:	cf 91       	pop	r28
    4be2:	1f 91       	pop	r17
    4be4:	0f 91       	pop	r16
    4be6:	ff 90       	pop	r15
    4be8:	ef 90       	pop	r14
    4bea:	df 90       	pop	r13
    4bec:	cf 90       	pop	r12
    4bee:	bf 90       	pop	r11
    4bf0:	af 90       	pop	r10
    4bf2:	9f 90       	pop	r9
    4bf4:	8f 90       	pop	r8
    4bf6:	7f 90       	pop	r7
    4bf8:	08 95       	ret

00004bfa <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    4bfa:	4f 92       	push	r4
    4bfc:	5f 92       	push	r5
    4bfe:	6f 92       	push	r6
    4c00:	7f 92       	push	r7
    4c02:	8f 92       	push	r8
    4c04:	9f 92       	push	r9
    4c06:	af 92       	push	r10
    4c08:	bf 92       	push	r11
    4c0a:	cf 92       	push	r12
    4c0c:	df 92       	push	r13
    4c0e:	ef 92       	push	r14
    4c10:	ff 92       	push	r15
    4c12:	0f 93       	push	r16
    4c14:	1f 93       	push	r17
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	cd b7       	in	r28, 0x3d	; 61
    4c1c:	de b7       	in	r29, 0x3e	; 62
    4c1e:	2c 97       	sbiw	r28, 0x0c	; 12
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	de bf       	out	0x3e, r29	; 62
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    4c2c:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    4c30:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    4c34:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    4c38:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    4c3c:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    4c40:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    4c44:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    4c48:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    4c4c:	0e 94 ef 34 	call	0x69de	; 0x69de <__floatundisf>
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 ec       	ldi	r19, 0xC0	; 192
    4c54:	48 ea       	ldi	r20, 0xA8	; 168
    4c56:	57 e4       	ldi	r21, 0x47	; 71
    4c58:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    4c5c:	2b ed       	ldi	r18, 0xDB	; 219
    4c5e:	3f e0       	ldi	r19, 0x0F	; 15
    4c60:	49 ec       	ldi	r20, 0xC9	; 201
    4c62:	50 e4       	ldi	r21, 0x40	; 64
    4c64:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4c68:	21 ed       	ldi	r18, 0xD1	; 209
    4c6a:	30 ea       	ldi	r19, 0xA0	; 160
    4c6c:	46 eb       	ldi	r20, 0xB6	; 182
    4c6e:	53 e4       	ldi	r21, 0x43	; 67
    4c70:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4c74:	4b 01       	movw	r8, r22
    4c76:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    4c78:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    4c7c:	20 e9       	ldi	r18, 0x90	; 144
    4c7e:	3e e2       	ldi	r19, 0x2E	; 46
    4c80:	4c ec       	ldi	r20, 0xCC	; 204
    4c82:	5e e3       	ldi	r21, 0x3E	; 62
    4c84:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4c88:	0e 94 99 33 	call	0x6732	; 0x6732 <asin>
    4c8c:	6b 01       	movw	r12, r22
    4c8e:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    4c90:	c5 01       	movw	r24, r10
    4c92:	b4 01       	movw	r22, r8
    4c94:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    4c98:	2b 01       	movw	r4, r22
    4c9a:	3c 01       	movw	r6, r24
    4c9c:	c7 01       	movw	r24, r14
    4c9e:	b6 01       	movw	r22, r12
    4ca0:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    4ca4:	4b 01       	movw	r8, r22
    4ca6:	5c 01       	movw	r10, r24
    4ca8:	9b 01       	movw	r18, r22
    4caa:	ac 01       	movw	r20, r24
    4cac:	c3 01       	movw	r24, r6
    4cae:	b2 01       	movw	r22, r4
    4cb0:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4cb4:	0e 94 26 33 	call	0x664c	; 0x664c <acos>
    4cb8:	2b 01       	movw	r4, r22
    4cba:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	a9 01       	movw	r20, r18
    4cc2:	c7 01       	movw	r24, r14
    4cc4:	b6 01       	movw	r22, r12
    4cc6:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    4cca:	88 23       	and	r24, r24
    4ccc:	54 f4       	brge	.+20     	; 0x4ce2 <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    4cce:	a3 01       	movw	r20, r6
    4cd0:	92 01       	movw	r18, r4
    4cd2:	6b ed       	ldi	r22, 0xDB	; 219
    4cd4:	7f e0       	ldi	r23, 0x0F	; 15
    4cd6:	89 ec       	ldi	r24, 0xC9	; 201
    4cd8:	90 e4       	ldi	r25, 0x40	; 64
    4cda:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    4cde:	2b 01       	movw	r4, r22
    4ce0:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    4ce2:	c3 01       	movw	r24, r6
    4ce4:	b2 01       	movw	r22, r4
    4ce6:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    4cea:	9b 01       	movw	r18, r22
    4cec:	ac 01       	movw	r20, r24
    4cee:	c5 01       	movw	r24, r10
    4cf0:	b4 01       	movw	r22, r8
    4cf2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4cf6:	69 83       	std	Y+1, r22	; 0x01
    4cf8:	7a 83       	std	Y+2, r23	; 0x02
    4cfa:	8b 83       	std	Y+3, r24	; 0x03
    4cfc:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    4cfe:	c3 01       	movw	r24, r6
    4d00:	b2 01       	movw	r22, r4
    4d02:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    4d06:	9b 01       	movw	r18, r22
    4d08:	ac 01       	movw	r20, r24
    4d0a:	c5 01       	movw	r24, r10
    4d0c:	b4 01       	movw	r22, r8
    4d0e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    4d12:	6d 83       	std	Y+5, r22	; 0x05
    4d14:	7e 83       	std	Y+6, r23	; 0x06
    4d16:	8f 83       	std	Y+7, r24	; 0x07
    4d18:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    4d1a:	c7 01       	movw	r24, r14
    4d1c:	b6 01       	movw	r22, r12
    4d1e:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <sin>
    4d22:	69 87       	std	Y+9, r22	; 0x09
    4d24:	7a 87       	std	Y+10, r23	; 0x0a
    4d26:	8b 87       	std	Y+11, r24	; 0x0b
    4d28:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    4d2a:	2d ec       	ldi	r18, 0xCD	; 205
    4d2c:	3c ec       	ldi	r19, 0xCC	; 204
    4d2e:	4c ec       	ldi	r20, 0xCC	; 204
    4d30:	5d e3       	ldi	r21, 0x3D	; 61
    4d32:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <frtm>
    4d36:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <frtm+0x1>
    4d3a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <frtm+0x2>
    4d3e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <frtm+0x3>
    4d42:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4d46:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <frtm>
    4d4a:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <frtm+0x1>
    4d4e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <frtm+0x2>
    4d52:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <frtm+0x3>
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    4d56:	98 01       	movw	r18, r16
    4d58:	ae 01       	movw	r20, r28
    4d5a:	4f 5f       	subi	r20, 0xFF	; 255
    4d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d5e:	68 e2       	ldi	r22, 0x28	; 40
    4d60:	74 e0       	ldi	r23, 0x04	; 4
    4d62:	80 e4       	ldi	r24, 0x40	; 64
    4d64:	94 e0       	ldi	r25, 0x04	; 4
    4d66:	0e 94 2e 11 	call	0x225c	; 0x225c <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    4d6a:	2c 96       	adiw	r28, 0x0c	; 12
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	f8 94       	cli
    4d70:	de bf       	out	0x3e, r29	; 62
    4d72:	0f be       	out	0x3f, r0	; 63
    4d74:	cd bf       	out	0x3d, r28	; 61
    4d76:	df 91       	pop	r29
    4d78:	cf 91       	pop	r28
    4d7a:	1f 91       	pop	r17
    4d7c:	0f 91       	pop	r16
    4d7e:	ff 90       	pop	r15
    4d80:	ef 90       	pop	r14
    4d82:	df 90       	pop	r13
    4d84:	cf 90       	pop	r12
    4d86:	bf 90       	pop	r11
    4d88:	af 90       	pop	r10
    4d8a:	9f 90       	pop	r9
    4d8c:	8f 90       	pop	r8
    4d8e:	7f 90       	pop	r7
    4d90:	6f 90       	pop	r6
    4d92:	5f 90       	pop	r5
    4d94:	4f 90       	pop	r4
    4d96:	08 95       	ret

00004d98 <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    4d98:	8f 92       	push	r8
    4d9a:	9f 92       	push	r9
    4d9c:	af 92       	push	r10
    4d9e:	bf 92       	push	r11
    4da0:	ef 92       	push	r14
    4da2:	ff 92       	push	r15
    4da4:	0f 93       	push	r16
    4da6:	1f 93       	push	r17
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
    4dac:	cd b7       	in	r28, 0x3d	; 61
    4dae:	de b7       	in	r29, 0x3e	; 62
    4db0:	e0 97       	sbiw	r28, 0x30	; 48
    4db2:	0f b6       	in	r0, 0x3f	; 63
    4db4:	f8 94       	cli
    4db6:	de bf       	out	0x3e, r29	; 62
    4db8:	0f be       	out	0x3f, r0	; 63
    4dba:	cd bf       	out	0x3d, r28	; 61
    4dbc:	7c 01       	movw	r14, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    4dbe:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    4dc2:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    4dc6:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    4dca:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    4dce:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    4dd2:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    4dd6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    4dda:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    4dde:	0e 94 ef 34 	call	0x69de	; 0x69de <__floatundisf>
    4de2:	20 ec       	ldi	r18, 0xC0	; 192
    4de4:	39 e9       	ldi	r19, 0x99	; 153
    4de6:	40 ef       	ldi	r20, 0xF0	; 240
    4de8:	5b e4       	ldi	r21, 0x4B	; 75
    4dea:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	4c ef       	ldi	r20, 0xFC	; 252
    4df4:	54 e4       	ldi	r21, 0x44	; 68
    4df6:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    4dfa:	4b 01       	movw	r8, r22
    4dfc:	5c 01       	movw	r10, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    4dfe:	be 01       	movw	r22, r28
    4e00:	6f 5f       	subi	r22, 0xFF	; 255
    4e02:	7f 4f       	sbci	r23, 0xFF	; 255
    4e04:	80 e4       	ldi	r24, 0x40	; 64
    4e06:	94 e0       	ldi	r25, 0x04	; 4
    4e08:	0e 94 a4 10 	call	0x2148	; 0x2148 <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    4e0c:	be 01       	movw	r22, r28
    4e0e:	63 5f       	subi	r22, 0xF3	; 243
    4e10:	7f 4f       	sbci	r23, 0xFF	; 255
    4e12:	ce 01       	movw	r24, r28
    4e14:	01 96       	adiw	r24, 0x01	; 1
    4e16:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    4e1a:	6f e9       	ldi	r22, 0x9F	; 159
    4e1c:	74 e0       	ldi	r23, 0x04	; 4
    4e1e:	ce 01       	movw	r24, r28
    4e20:	0d 96       	adiw	r24, 0x0d	; 13
    4e22:	ac d8       	rcall	.-3752   	; 0x3f7c <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4e24:	8e 01       	movw	r16, r28
    4e26:	07 5e       	subi	r16, 0xE7	; 231
    4e28:	1f 4f       	sbci	r17, 0xFF	; 255
    4e2a:	28 e0       	ldi	r18, 0x08	; 8
    4e2c:	b5 01       	movw	r22, r10
    4e2e:	a4 01       	movw	r20, r8
    4e30:	ce 01       	movw	r24, r28
    4e32:	0d 96       	adiw	r24, 0x0d	; 13
    4e34:	0e 94 11 17 	call	0x2e22	; 0x2e22 <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    4e38:	ae 01       	movw	r20, r28
    4e3a:	4f 5f       	subi	r20, 0xFF	; 255
    4e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e3e:	be 01       	movw	r22, r28
    4e40:	63 5f       	subi	r22, 0xF3	; 243
    4e42:	7f 4f       	sbci	r23, 0xFF	; 255
    4e44:	c8 01       	movw	r24, r16
    4e46:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    4e4a:	be 01       	movw	r22, r28
    4e4c:	6b 5d       	subi	r22, 0xDB	; 219
    4e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e50:	ce 01       	movw	r24, r28
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	0e 94 19 10 	call	0x2032	; 0x2032 <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    4e58:	97 01       	movw	r18, r14
    4e5a:	ae 01       	movw	r20, r28
    4e5c:	4b 5d       	subi	r20, 0xDB	; 219
    4e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e60:	68 e2       	ldi	r22, 0x28	; 40
    4e62:	74 e0       	ldi	r23, 0x04	; 4
    4e64:	80 e4       	ldi	r24, 0x40	; 64
    4e66:	94 e0       	ldi	r25, 0x04	; 4
    4e68:	0e 94 2e 11 	call	0x225c	; 0x225c <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    4e6c:	e0 96       	adiw	r28, 0x30	; 48
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	df 91       	pop	r29
    4e7a:	cf 91       	pop	r28
    4e7c:	1f 91       	pop	r17
    4e7e:	0f 91       	pop	r16
    4e80:	ff 90       	pop	r15
    4e82:	ef 90       	pop	r14
    4e84:	bf 90       	pop	r11
    4e86:	af 90       	pop	r10
    4e88:	9f 90       	pop	r9
    4e8a:	8f 90       	pop	r8
    4e8c:	08 95       	ret

00004e8e <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4e8e:	ef 92       	push	r14
    4e90:	ff 92       	push	r15
    4e92:	1f 93       	push	r17
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	c9 ee       	ldi	r28, 0xE9	; 233
    4e9a:	d4 e0       	ldi	r29, 0x04	; 4
    4e9c:	0f 2e       	mov	r0, r31
    4e9e:	f1 e0       	ldi	r31, 0x01	; 1
    4ea0:	ef 2e       	mov	r14, r31
    4ea2:	f5 e0       	ldi	r31, 0x05	; 5
    4ea4:	ff 2e       	mov	r15, r31
    4ea6:	f0 2d       	mov	r31, r0
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    4ea8:	10 e0       	ldi	r17, 0x00	; 0
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4eaa:	69 91       	ld	r22, Y+
    4eac:	79 91       	ld	r23, Y+
    4eae:	89 91       	ld	r24, Y+
    4eb0:	99 91       	ld	r25, Y+
    4eb2:	27 e2       	ldi	r18, 0x27	; 39
    4eb4:	31 e3       	ldi	r19, 0x31	; 49
    4eb6:	48 ec       	ldi	r20, 0xC8	; 200
    4eb8:	5e e3       	ldi	r21, 0x3E	; 62
    4eba:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    4ebe:	88 23       	and	r24, r24
    4ec0:	0c f4       	brge	.+2      	; 0x4ec4 <light_cal+0x36>
		  num_dark_sensors++;
    4ec2:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    4ec4:	ce 15       	cp	r28, r14
    4ec6:	df 05       	cpc	r29, r15
    4ec8:	81 f7       	brne	.-32     	; 0x4eaa <light_cal+0x1c>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	16 30       	cpi	r17, 0x06	; 6
    4ece:	09 f4       	brne	.+2      	; 0x4ed2 <light_cal+0x44>
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    4ed2:	df 91       	pop	r29
    4ed4:	cf 91       	pop	r28
    4ed6:	1f 91       	pop	r17
    4ed8:	ff 90       	pop	r15
    4eda:	ef 90       	pop	r14
    4edc:	08 95       	ret

00004ede <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    4ede:	2f 92       	push	r2
    4ee0:	3f 92       	push	r3
    4ee2:	4f 92       	push	r4
    4ee4:	5f 92       	push	r5
    4ee6:	6f 92       	push	r6
    4ee8:	7f 92       	push	r7
    4eea:	8f 92       	push	r8
    4eec:	9f 92       	push	r9
    4eee:	af 92       	push	r10
    4ef0:	bf 92       	push	r11
    4ef2:	cf 92       	push	r12
    4ef4:	df 92       	push	r13
    4ef6:	ef 92       	push	r14
    4ef8:	ff 92       	push	r15
    4efa:	0f 93       	push	r16
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
    4f02:	cd b7       	in	r28, 0x3d	; 61
    4f04:	de b7       	in	r29, 0x3e	; 62
    4f06:	cb 57       	subi	r28, 0x7B	; 123
    4f08:	d1 09       	sbc	r29, r1
    4f0a:	0f b6       	in	r0, 0x3f	; 63
    4f0c:	f8 94       	cli
    4f0e:	de bf       	out	0x3e, r29	; 62
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	cd bf       	out	0x3d, r28	; 61
    4f14:	af 96       	adiw	r28, 0x2f	; 47
    4f16:	9f af       	std	Y+63, r25	; 0x3f
    4f18:	8e af       	std	Y+62, r24	; 0x3e
    4f1a:	af 97       	sbiw	r28, 0x2f	; 47
    4f1c:	e5 96       	adiw	r28, 0x35	; 53
    4f1e:	7f af       	std	Y+63, r23	; 0x3f
    4f20:	6e af       	std	Y+62, r22	; 0x3e
    4f22:	e5 97       	sbiw	r28, 0x35	; 53
    4f24:	e3 96       	adiw	r28, 0x33	; 51
    4f26:	5f af       	std	Y+63, r21	; 0x3f
    4f28:	4e af       	std	Y+62, r20	; 0x3e
    4f2a:	e3 97       	sbiw	r28, 0x33	; 51
    4f2c:	79 01       	movw	r14, r18
    4f2e:	09 ee       	ldi	r16, 0xE9	; 233
    4f30:	14 e0       	ldi	r17, 0x04	; 4
    4f32:	0f 2e       	mov	r0, r31
    4f34:	f1 e0       	ldi	r31, 0x01	; 1
    4f36:	cf 2e       	mov	r12, r31
    4f38:	f5 e0       	ldi	r31, 0x05	; 5
    4f3a:	df 2e       	mov	r13, r31
    4f3c:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4f3e:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4f40:	f8 01       	movw	r30, r16
    4f42:	61 91       	ld	r22, Z+
    4f44:	71 91       	ld	r23, Z+
    4f46:	81 91       	ld	r24, Z+
    4f48:	91 91       	ld	r25, Z+
    4f4a:	8f 01       	movw	r16, r30
    4f4c:	27 e2       	ldi	r18, 0x27	; 39
    4f4e:	31 e3       	ldi	r19, 0x31	; 49
    4f50:	48 ec       	ldi	r20, 0xC8	; 200
    4f52:	5e e3       	ldi	r21, 0x3E	; 62
    4f54:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	0c f4       	brge	.+2      	; 0x4f5e <quest+0x80>
      num_dark_sensors++;
    4f5c:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    4f5e:	0c 15       	cp	r16, r12
    4f60:	1d 05       	cpc	r17, r13
    4f62:	71 f7       	brne	.-36     	; 0x4f40 <quest+0x62>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4f64:	f1 e0       	ldi	r31, 0x01	; 1
    4f66:	e8 96       	adiw	r28, 0x38	; 56
    4f68:	ff af       	std	Y+63, r31	; 0x3f
    4f6a:	e8 97       	sbiw	r28, 0x38	; 56
    4f6c:	26 e0       	ldi	r18, 0x06	; 6
    4f6e:	b2 12       	cpse	r11, r18
    4f70:	03 c0       	rjmp	.+6      	; 0x4f78 <quest+0x9a>
    4f72:	e8 96       	adiw	r28, 0x38	; 56
    4f74:	1f ae       	std	Y+63, r1	; 0x3f
    4f76:	e8 97       	sbiw	r28, 0x38	; 56
    light = 0;
  
  if(light)
    4f78:	e8 96       	adiw	r28, 0x38	; 56
    4f7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f7c:	e8 97       	sbiw	r28, 0x38	; 56
    4f7e:	88 23       	and	r24, r24
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <quest+0xa6>
    4f82:	11 c3       	rjmp	.+1570   	; 0x55a6 <quest+0x6c8>
  {
    if(!*p_w_ctrl)
    4f84:	f7 01       	movw	r30, r14
    4f86:	80 81       	ld	r24, Z
    4f88:	81 11       	cpse	r24, r1
    4f8a:	0f c0       	rjmp	.+30     	; 0x4faa <quest+0xcc>
    {
      time_since_light += FRAME_TIME;
    4f8c:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <time_since_light.2059>
    4f90:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <time_since_light.2059+0x1>
    4f94:	02 96       	adiw	r24, 0x02	; 2
    4f96:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <time_since_light.2059+0x1>
    4f9a:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <time_since_light.2059>
      if(time_since_light == 300)
    4f9e:	8c 32       	cpi	r24, 0x2C	; 44
    4fa0:	91 40       	sbci	r25, 0x01	; 1
    4fa2:	19 f4       	brne	.+6      	; 0x4faa <quest+0xcc>
        *p_w_ctrl = 1;
    4fa4:	81 e0       	ldi	r24, 0x01	; 1
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4faa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <light_prev.2060>
    4fae:	81 11       	cpse	r24, r1
    4fb0:	13 c3       	rjmp	.+1574   	; 0x55d8 <quest+0x6fa>
    {
      *p_w_ctrl = 0;
    4fb2:	f7 01       	movw	r30, r14
    4fb4:	10 82       	st	Z, r1
      time_since_light = 0;
    4fb6:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <time_since_light.2059+0x1>
    4fba:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <time_since_light.2059>
    4fbe:	0c c3       	rjmp	.+1560   	; 0x55d8 <quest+0x6fa>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4fc0:	89 86       	std	Y+9, r8	; 0x09
    4fc2:	9a 86       	std	Y+10, r9	; 0x0a
    4fc4:	ab 86       	std	Y+11, r10	; 0x0b
    4fc6:	bc 86       	std	Y+12, r11	; 0x0c
    4fc8:	08 c0       	rjmp	.+16     	; 0x4fda <quest+0xfc>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4fca:	f7 fa       	bst	r15, 7
    4fcc:	f0 94       	com	r15
    4fce:	f7 f8       	bld	r15, 7
    4fd0:	f0 94       	com	r15
    4fd2:	c9 86       	std	Y+9, r12	; 0x09
    4fd4:	da 86       	std	Y+10, r13	; 0x0a
    4fd6:	eb 86       	std	Y+11, r14	; 0x0b
    4fd8:	fc 86       	std	Y+12, r15	; 0x0c
    4fda:	8e 01       	movw	r16, r28
    4fdc:	0f 5f       	subi	r16, 0xFF	; 255
    4fde:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe0:	1e 01       	movw	r2, r28
    4fe2:	fd e0       	ldi	r31, 0x0D	; 13
    4fe4:	2f 0e       	add	r2, r31
    4fe6:	31 1c       	adc	r3, r1

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4fe8:	f8 01       	movw	r30, r16
    4fea:	c0 80       	ld	r12, Z
    4fec:	d1 80       	ldd	r13, Z+1	; 0x01
    4fee:	e2 80       	ldd	r14, Z+2	; 0x02
    4ff0:	f3 80       	ldd	r15, Z+3	; 0x03
    4ff2:	46 01       	movw	r8, r12
    4ff4:	57 01       	movw	r10, r14
    4ff6:	e8 94       	clt
    4ff8:	b7 f8       	bld	r11, 7
    4ffa:	26 e6       	ldi	r18, 0x66	; 102
    4ffc:	36 e6       	ldi	r19, 0x66	; 102
    4ffe:	46 e8       	ldi	r20, 0x86	; 134
    5000:	5f e3       	ldi	r21, 0x3F	; 63
    5002:	c5 01       	movw	r24, r10
    5004:	b4 01       	movw	r22, r8
    5006:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    500a:	21 ec       	ldi	r18, 0xC1	; 193
    500c:	3a ec       	ldi	r19, 0xCA	; 202
    500e:	41 ec       	ldi	r20, 0xC1	; 193
    5010:	5f e3       	ldi	r21, 0x3F	; 63
    5012:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    5016:	0e 94 26 33 	call	0x664c	; 0x664c <acos>
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	44 e3       	ldi	r20, 0x34	; 52
    5020:	53 e4       	ldi	r21, 0x43	; 67
    5022:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5026:	20 ed       	ldi	r18, 0xD0	; 208
    5028:	3f e0       	ldi	r19, 0x0F	; 15
    502a:	49 e4       	ldi	r20, 0x49	; 73
    502c:	50 e4       	ldi	r21, 0x40	; 64
    502e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    5032:	26 e6       	ldi	r18, 0x66	; 102
    5034:	36 e6       	ldi	r19, 0x66	; 102
    5036:	4e e1       	ldi	r20, 0x1E	; 30
    5038:	51 e4       	ldi	r21, 0x41	; 65
    503a:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    503e:	23 e3       	ldi	r18, 0x33	; 51
    5040:	33 e3       	ldi	r19, 0x33	; 51
    5042:	43 ed       	ldi	r20, 0xD3	; 211
    5044:	5f e3       	ldi	r21, 0x3F	; 63
    5046:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    504a:	20 ed       	ldi	r18, 0xD0	; 208
    504c:	3f e0       	ldi	r19, 0x0F	; 15
    504e:	49 e4       	ldi	r20, 0x49	; 73
    5050:	50 e4       	ldi	r21, 0x40	; 64
    5052:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	44 e3       	ldi	r20, 0x34	; 52
    505c:	53 e4       	ldi	r21, 0x43	; 67
    505e:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    5062:	2b 01       	movw	r4, r22
    5064:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	a9 01       	movw	r20, r18
    506c:	c7 01       	movw	r24, r14
    506e:	b6 01       	movw	r22, r12
    5070:	0e 94 12 34 	call	0x6824	; 0x6824 <__cmpsf2>
    5074:	88 23       	and	r24, r24
    5076:	c1 f0       	breq	.+48     	; 0x50a8 <quest+0x1ca>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    5078:	c3 01       	movw	r24, r6
    507a:	b2 01       	movw	r22, r4
    507c:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    5080:	2b 01       	movw	r4, r22
    5082:	3c 01       	movw	r6, r24
    5084:	a7 01       	movw	r20, r14
    5086:	96 01       	movw	r18, r12
    5088:	c5 01       	movw	r24, r10
    508a:	b4 01       	movw	r22, r8
    508c:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    5090:	9b 01       	movw	r18, r22
    5092:	ac 01       	movw	r20, r24
    5094:	c3 01       	movw	r24, r6
    5096:	b2 01       	movw	r22, r4
    5098:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    509c:	f8 01       	movw	r30, r16
    509e:	60 83       	st	Z, r22
    50a0:	71 83       	std	Z+1, r23	; 0x01
    50a2:	82 83       	std	Z+2, r24	; 0x02
    50a4:	93 83       	std	Z+3, r25	; 0x03
    50a6:	09 c0       	rjmp	.+18     	; 0x50ba <quest+0x1dc>
		else
		v_sun_m[i] = cos(angle);
    50a8:	c3 01       	movw	r24, r6
    50aa:	b2 01       	movw	r22, r4
    50ac:	0e 94 16 34 	call	0x682c	; 0x682c <cos>
    50b0:	f8 01       	movw	r30, r16
    50b2:	60 83       	st	Z, r22
    50b4:	71 83       	std	Z+1, r23	; 0x01
    50b6:	82 83       	std	Z+2, r24	; 0x02
    50b8:	93 83       	std	Z+3, r25	; 0x03
    50ba:	0c 5f       	subi	r16, 0xFC	; 252
    50bc:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    50be:	02 15       	cp	r16, r2
    50c0:	13 05       	cpc	r17, r3
    50c2:	09 f0       	breq	.+2      	; 0x50c6 <quest+0x1e8>
    50c4:	91 cf       	rjmp	.-222    	; 0x4fe8 <quest+0x10a>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    50c6:	ce 01       	movw	r24, r28
    50c8:	01 96       	adiw	r24, 0x01	; 1
    50ca:	51 da       	rcall	.-2910   	; 0x456e <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    50cc:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
    50d0:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
    50d4:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
    50d8:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
    50dc:	8d 8b       	std	Y+21, r24	; 0x15
    50de:	9e 8b       	std	Y+22, r25	; 0x16
    50e0:	af 8b       	std	Y+23, r26	; 0x17
    50e2:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    50e4:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
    50e8:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
    50ec:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
    50f0:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
    50f4:	b0 58       	subi	r27, 0x80	; 128
    50f6:	89 8b       	std	Y+17, r24	; 0x11
    50f8:	9a 8b       	std	Y+18, r25	; 0x12
    50fa:	ab 8b       	std	Y+19, r26	; 0x13
    50fc:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    50fe:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
    5102:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
    5106:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
    510a:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
    510e:	8d 87       	std	Y+13, r24	; 0x0d
    5110:	9e 87       	std	Y+14, r25	; 0x0e
    5112:	af 87       	std	Y+15, r26	; 0x0f
    5114:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    5116:	ae 01       	movw	r20, r28
    5118:	47 5e       	subi	r20, 0xE7	; 231
    511a:	5f 4f       	sbci	r21, 0xFF	; 255
    511c:	be 01       	movw	r22, r28
    511e:	6f 5f       	subi	r22, 0xFF	; 255
    5120:	7f 4f       	sbci	r23, 0xFF	; 255
    5122:	ce 01       	movw	r24, r28
    5124:	0d 96       	adiw	r24, 0x0d	; 13
    5126:	48 d9       	rcall	.-3440   	; 0x43b8 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    5128:	ce 01       	movw	r24, r28
    512a:	49 96       	adiw	r24, 0x19	; 25
    512c:	20 da       	rcall	.-3008   	; 0x456e <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    512e:	ae 01       	movw	r20, r28
    5130:	4b 5d       	subi	r20, 0xDB	; 219
    5132:	5f 4f       	sbci	r21, 0xFF	; 255
    5134:	e5 96       	adiw	r28, 0x35	; 53
    5136:	6e ad       	ldd	r22, Y+62	; 0x3e
    5138:	7f ad       	ldd	r23, Y+63	; 0x3f
    513a:	e5 97       	sbiw	r28, 0x35	; 53
    513c:	af 96       	adiw	r28, 0x2f	; 47
    513e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5140:	9f ad       	ldd	r25, Y+63	; 0x3f
    5142:	af 97       	sbiw	r28, 0x2f	; 47
    5144:	39 d9       	rcall	.-3470   	; 0x43b8 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    5146:	ce 01       	movw	r24, r28
    5148:	85 96       	adiw	r24, 0x25	; 37
    514a:	11 da       	rcall	.-3038   	; 0x456e <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    514c:	be 01       	movw	r22, r28
    514e:	6b 5d       	subi	r22, 0xDB	; 219
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	ce 01       	movw	r24, r28
    5154:	49 96       	adiw	r24, 0x19	; 25
    5156:	5f d8       	rcall	.-3906   	; 0x4216 <vector_dot_product>
    5158:	6b 01       	movw	r12, r22
    515a:	7c 01       	movw	r14, r24
    515c:	af 96       	adiw	r28, 0x2f	; 47
    515e:	6e ad       	ldd	r22, Y+62	; 0x3e
    5160:	7f ad       	ldd	r23, Y+63	; 0x3f
    5162:	af 97       	sbiw	r28, 0x2f	; 47
    5164:	ce 01       	movw	r24, r28
    5166:	0d 96       	adiw	r24, 0x0d	; 13
    5168:	56 d8       	rcall	.-3924   	; 0x4216 <vector_dot_product>
    516a:	4b 01       	movw	r8, r22
    516c:	5c 01       	movw	r10, r24
    516e:	e5 96       	adiw	r28, 0x35	; 53
    5170:	6e ad       	ldd	r22, Y+62	; 0x3e
    5172:	7f ad       	ldd	r23, Y+63	; 0x3f
    5174:	e5 97       	sbiw	r28, 0x35	; 53
    5176:	ce 01       	movw	r24, r28
    5178:	01 96       	adiw	r24, 0x01	; 1
    517a:	4d d8       	rcall	.-3942   	; 0x4216 <vector_dot_product>
    517c:	2b 01       	movw	r4, r22
    517e:	3c 01       	movw	r6, r24
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	5f e3       	ldi	r21, 0x3F	; 63
    5188:	c7 01       	movw	r24, r14
    518a:	b6 01       	movw	r22, r12
    518c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5190:	6b 01       	movw	r12, r22
    5192:	7c 01       	movw	r14, r24
    5194:	26 e6       	ldi	r18, 0x66	; 102
    5196:	36 e6       	ldi	r19, 0x66	; 102
    5198:	46 e6       	ldi	r20, 0x66	; 102
    519a:	5f e3       	ldi	r21, 0x3F	; 63
    519c:	c5 01       	movw	r24, r10
    519e:	b4 01       	movw	r22, r8
    51a0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    51a4:	4b 01       	movw	r8, r22
    51a6:	5c 01       	movw	r10, r24
    51a8:	20 ed       	ldi	r18, 0xD0	; 208
    51aa:	3c ec       	ldi	r19, 0xCC	; 204
    51ac:	4c ec       	ldi	r20, 0xCC	; 204
    51ae:	5d e3       	ldi	r21, 0x3D	; 61
    51b0:	c3 01       	movw	r24, r6
    51b2:	b2 01       	movw	r22, r4
    51b4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    51b8:	9b 01       	movw	r18, r22
    51ba:	ac 01       	movw	r20, r24
    51bc:	c5 01       	movw	r24, r10
    51be:	b4 01       	movw	r22, r8
    51c0:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    51c4:	9b 01       	movw	r18, r22
    51c6:	ac 01       	movw	r20, r24
    51c8:	c7 01       	movw	r24, r14
    51ca:	b6 01       	movw	r22, r12
    51cc:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    51d0:	4b 01       	movw	r8, r22
    51d2:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    51d4:	ae 01       	movw	r20, r28
    51d6:	47 5b       	subi	r20, 0xB7	; 183
    51d8:	5f 4f       	sbci	r21, 0xFF	; 255
    51da:	af 96       	adiw	r28, 0x2f	; 47
    51dc:	6e ad       	ldd	r22, Y+62	; 0x3e
    51de:	7f ad       	ldd	r23, Y+63	; 0x3f
    51e0:	af 97       	sbiw	r28, 0x2f	; 47
    51e2:	ce 01       	movw	r24, r28
    51e4:	0d 96       	adiw	r24, 0x0d	; 13
    51e6:	e8 d8       	rcall	.-3632   	; 0x43b8 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    51e8:	ae 01       	movw	r20, r28
    51ea:	4b 5a       	subi	r20, 0xAB	; 171
    51ec:	5f 4f       	sbci	r21, 0xFF	; 255
    51ee:	e5 96       	adiw	r28, 0x35	; 53
    51f0:	6e ad       	ldd	r22, Y+62	; 0x3e
    51f2:	7f ad       	ldd	r23, Y+63	; 0x3f
    51f4:	e5 97       	sbiw	r28, 0x35	; 53
    51f6:	ce 01       	movw	r24, r28
    51f8:	01 96       	adiw	r24, 0x01	; 1
    51fa:	de d8       	rcall	.-3652   	; 0x43b8 <vector_cross_product>
    51fc:	ce 01       	movw	r24, r28
    51fe:	87 5b       	subi	r24, 0xB7	; 183
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	7c 01       	movw	r14, r24
    5204:	8e 01       	movw	r16, r28
    5206:	0b 5a       	subi	r16, 0xAB	; 171
    5208:	1f 4f       	sbci	r17, 0xFF	; 255
    520a:	68 01       	movw	r12, r16
    520c:	9c e0       	ldi	r25, 0x0C	; 12
    520e:	c9 0e       	add	r12, r25
    5210:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    5212:	f7 01       	movw	r30, r14
    5214:	61 91       	ld	r22, Z+
    5216:	71 91       	ld	r23, Z+
    5218:	81 91       	ld	r24, Z+
    521a:	91 91       	ld	r25, Z+
    521c:	7f 01       	movw	r14, r30
    521e:	26 e6       	ldi	r18, 0x66	; 102
    5220:	36 e6       	ldi	r19, 0x66	; 102
    5222:	46 e6       	ldi	r20, 0x66	; 102
    5224:	5f e3       	ldi	r21, 0x3F	; 63
    5226:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    522a:	2b 01       	movw	r4, r22
    522c:	3c 01       	movw	r6, r24
    522e:	20 ed       	ldi	r18, 0xD0	; 208
    5230:	3c ec       	ldi	r19, 0xCC	; 204
    5232:	4c ec       	ldi	r20, 0xCC	; 204
    5234:	5d e3       	ldi	r21, 0x3D	; 61
    5236:	f8 01       	movw	r30, r16
    5238:	60 81       	ld	r22, Z
    523a:	71 81       	ldd	r23, Z+1	; 0x01
    523c:	82 81       	ldd	r24, Z+2	; 0x02
    523e:	93 81       	ldd	r25, Z+3	; 0x03
    5240:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5244:	9b 01       	movw	r18, r22
    5246:	ac 01       	movw	r20, r24
    5248:	c3 01       	movw	r24, r6
    524a:	b2 01       	movw	r22, r4
    524c:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5250:	f8 01       	movw	r30, r16
    5252:	61 93       	st	Z+, r22
    5254:	71 93       	st	Z+, r23
    5256:	81 93       	st	Z+, r24
    5258:	91 93       	st	Z+, r25
    525a:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    525c:	ec 15       	cp	r30, r12
    525e:	fd 05       	cpc	r31, r13
    5260:	c1 f6       	brne	.-80     	; 0x5212 <quest+0x334>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    5262:	ae 01       	movw	r20, r28
    5264:	4f 5c       	subi	r20, 0xCF	; 207
    5266:	5f 4f       	sbci	r21, 0xFF	; 255
    5268:	be 01       	movw	r22, r28
    526a:	6b 5d       	subi	r22, 0xDB	; 219
    526c:	7f 4f       	sbci	r23, 0xFF	; 255
    526e:	ce 01       	movw	r24, r28
    5270:	49 96       	adiw	r24, 0x19	; 25
    5272:	a2 d8       	rcall	.-3772   	; 0x43b8 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    5274:	be 01       	movw	r22, r28
    5276:	6b 5a       	subi	r22, 0xAB	; 171
    5278:	7f 4f       	sbci	r23, 0xFF	; 255
    527a:	ce 01       	movw	r24, r28
    527c:	c1 96       	adiw	r24, 0x31	; 49
    527e:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    5282:	a5 01       	movw	r20, r10
    5284:	94 01       	movw	r18, r8
    5286:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    528a:	6b 01       	movw	r12, r22
    528c:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    528e:	ae 01       	movw	r20, r28
    5290:	43 5c       	subi	r20, 0xC3	; 195
    5292:	5f 4f       	sbci	r21, 0xFF	; 255
    5294:	be 01       	movw	r22, r28
    5296:	6b 5d       	subi	r22, 0xDB	; 219
    5298:	7f 4f       	sbci	r23, 0xFF	; 255
    529a:	ce 01       	movw	r24, r28
    529c:	49 96       	adiw	r24, 0x19	; 25
    529e:	0e 94 4f 21 	call	0x429e	; 0x429e <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    52a2:	be 01       	movw	r22, r28
    52a4:	6b 5a       	subi	r22, 0xAB	; 171
    52a6:	7f 4f       	sbci	r23, 0xFF	; 255
    52a8:	ce 01       	movw	r24, r28
    52aa:	cd 96       	adiw	r24, 0x3d	; 61
    52ac:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    52b0:	e1 96       	adiw	r28, 0x31	; 49
    52b2:	6c af       	std	Y+60, r22	; 0x3c
    52b4:	7d af       	std	Y+61, r23	; 0x3d
    52b6:	8e af       	std	Y+62, r24	; 0x3e
    52b8:	9f af       	std	Y+63, r25	; 0x3f
    52ba:	e1 97       	sbiw	r28, 0x31	; 49
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    52bc:	a7 01       	movw	r20, r14
    52be:	96 01       	movw	r18, r12
    52c0:	c7 01       	movw	r24, r14
    52c2:	b6 01       	movw	r22, r12
    52c4:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    52c8:	4b 01       	movw	r8, r22
    52ca:	5c 01       	movw	r10, r24
    52cc:	e1 96       	adiw	r28, 0x31	; 49
    52ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    52d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    52d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    52d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    52d6:	e1 97       	sbiw	r28, 0x31	; 49
    52d8:	ca 01       	movw	r24, r20
    52da:	b9 01       	movw	r22, r18
    52dc:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    52e0:	2b 01       	movw	r4, r22
    52e2:	3c 01       	movw	r6, r24
    52e4:	a3 01       	movw	r20, r6
    52e6:	92 01       	movw	r18, r4
    52e8:	c5 01       	movw	r24, r10
    52ea:	b4 01       	movw	r22, r8
    52ec:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    52f0:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    52f4:	4b 01       	movw	r8, r22
    52f6:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	a9 01       	movw	r20, r18
    52fe:	c7 01       	movw	r24, r14
    5300:	b6 01       	movw	r22, r12
    5302:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    5306:	18 16       	cp	r1, r24
    5308:	0c f0       	brlt	.+2      	; 0x530c <quest+0x42e>
    530a:	90 c0       	rjmp	.+288    	; 0x542c <quest+0x54e>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    530c:	a7 01       	movw	r20, r14
    530e:	96 01       	movw	r18, r12
    5310:	c5 01       	movw	r24, r10
    5312:	b4 01       	movw	r22, r8
    5314:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5318:	e7 96       	adiw	r28, 0x37	; 55
    531a:	6c af       	std	Y+60, r22	; 0x3c
    531c:	7d af       	std	Y+61, r23	; 0x3d
    531e:	8e af       	std	Y+62, r24	; 0x3e
    5320:	9f af       	std	Y+63, r25	; 0x3f
    5322:	e7 97       	sbiw	r28, 0x37	; 55
    5324:	a5 01       	movw	r20, r10
    5326:	94 01       	movw	r18, r8
    5328:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    532c:	4b 01       	movw	r8, r22
    532e:	5c 01       	movw	r10, r24
    5330:	be 01       	movw	r22, r28
    5332:	6b 5d       	subi	r22, 0xDB	; 219
    5334:	7f 4f       	sbci	r23, 0xFF	; 255
    5336:	ce 01       	movw	r24, r28
    5338:	49 96       	adiw	r24, 0x19	; 25
    533a:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    533e:	2b 01       	movw	r4, r22
    5340:	3c 01       	movw	r6, r24
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	40 e8       	ldi	r20, 0x80	; 128
    5348:	5f e3       	ldi	r21, 0x3F	; 63
    534a:	c3 01       	movw	r24, r6
    534c:	b2 01       	movw	r22, r4
    534e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5352:	9b 01       	movw	r18, r22
    5354:	ac 01       	movw	r20, r24
    5356:	c5 01       	movw	r24, r10
    5358:	b4 01       	movw	r22, r8
    535a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    535e:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    5362:	9b 01       	movw	r18, r22
    5364:	ac 01       	movw	r20, r24
    5366:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    536a:	9b 01       	movw	r18, r22
    536c:	ac 01       	movw	r20, r24
    536e:	60 e0       	ldi	r22, 0x00	; 0
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	80 e8       	ldi	r24, 0x80	; 128
    5374:	9f e3       	ldi	r25, 0x3F	; 63
    5376:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    537a:	ec 96       	adiw	r28, 0x3c	; 60
    537c:	6c af       	std	Y+60, r22	; 0x3c
    537e:	7d af       	std	Y+61, r23	; 0x3d
    5380:	8e af       	std	Y+62, r24	; 0x3e
    5382:	9f af       	std	Y+63, r25	; 0x3f
    5384:	ec 97       	sbiw	r28, 0x3c	; 60
    5386:	8e 01       	movw	r16, r28
    5388:	0f 5c       	subi	r16, 0xCF	; 207
    538a:	1f 4f       	sbci	r17, 0xFF	; 255
    538c:	1e 01       	movw	r2, r28
    538e:	fd e3       	ldi	r31, 0x3D	; 61
    5390:	2f 0e       	add	r2, r31
    5392:	31 1c       	adc	r3, r1
    5394:	6e 01       	movw	r12, r28
    5396:	21 e6       	ldi	r18, 0x61	; 97
    5398:	c2 0e       	add	r12, r18
    539a:	d1 1c       	adc	r13, r1
    539c:	71 01       	movw	r14, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    539e:	f8 01       	movw	r30, r16
    53a0:	21 91       	ld	r18, Z+
    53a2:	31 91       	ld	r19, Z+
    53a4:	41 91       	ld	r20, Z+
    53a6:	51 91       	ld	r21, Z+
    53a8:	8f 01       	movw	r16, r30
    53aa:	f1 01       	movw	r30, r2
    53ac:	41 90       	ld	r4, Z+
    53ae:	51 90       	ld	r5, Z+
    53b0:	61 90       	ld	r6, Z+
    53b2:	71 90       	ld	r7, Z+
    53b4:	1f 01       	movw	r2, r30
    53b6:	e7 96       	adiw	r28, 0x37	; 55
    53b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    53ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    53bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    53be:	9f ad       	ldd	r25, Y+63	; 0x3f
    53c0:	e7 97       	sbiw	r28, 0x37	; 55
    53c2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    53c6:	4b 01       	movw	r8, r22
    53c8:	5c 01       	movw	r10, r24
    53ca:	e1 96       	adiw	r28, 0x31	; 49
    53cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    53ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    53d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    53d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    53d4:	e1 97       	sbiw	r28, 0x31	; 49
    53d6:	c3 01       	movw	r24, r6
    53d8:	b2 01       	movw	r22, r4
    53da:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    53de:	9b 01       	movw	r18, r22
    53e0:	ac 01       	movw	r20, r24
    53e2:	c5 01       	movw	r24, r10
    53e4:	b4 01       	movw	r22, r8
    53e6:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    53ea:	f6 01       	movw	r30, r12
    53ec:	61 93       	st	Z+, r22
    53ee:	71 93       	st	Z+, r23
    53f0:	81 93       	st	Z+, r24
    53f2:	91 93       	st	Z+, r25
    53f4:	6f 01       	movw	r12, r30
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    53f6:	0e 15       	cp	r16, r14
    53f8:	1f 05       	cpc	r17, r15
    53fa:	89 f6       	brne	.-94     	; 0x539e <quest+0x4c0>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    53fc:	be 01       	movw	r22, r28
    53fe:	6b 5d       	subi	r22, 0xDB	; 219
    5400:	7f 4f       	sbci	r23, 0xFF	; 255
    5402:	ce 01       	movw	r24, r28
    5404:	49 96       	adiw	r24, 0x19	; 25
    5406:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    540a:	20 e0       	ldi	r18, 0x00	; 0
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	40 e8       	ldi	r20, 0x80	; 128
    5410:	5f e3       	ldi	r21, 0x3F	; 63
    5412:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5416:	9b 01       	movw	r18, r22
    5418:	ac 01       	movw	r20, r24
    541a:	e7 96       	adiw	r28, 0x37	; 55
    541c:	6c ad       	ldd	r22, Y+60	; 0x3c
    541e:	7d ad       	ldd	r23, Y+61	; 0x3d
    5420:	8e ad       	ldd	r24, Y+62	; 0x3e
    5422:	9f ad       	ldd	r25, Y+63	; 0x3f
    5424:	e7 97       	sbiw	r28, 0x37	; 55
    5426:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    542a:	8d c0       	rjmp	.+282    	; 0x5546 <quest+0x668>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    542c:	a7 01       	movw	r20, r14
    542e:	96 01       	movw	r18, r12
    5430:	c5 01       	movw	r24, r10
    5432:	b4 01       	movw	r22, r8
    5434:	0e 94 34 33 	call	0x6668	; 0x6668 <__subsf3>
    5438:	e7 96       	adiw	r28, 0x37	; 55
    543a:	6c af       	std	Y+60, r22	; 0x3c
    543c:	7d af       	std	Y+61, r23	; 0x3d
    543e:	8e af       	std	Y+62, r24	; 0x3e
    5440:	9f af       	std	Y+63, r25	; 0x3f
    5442:	e7 97       	sbiw	r28, 0x37	; 55
    5444:	a5 01       	movw	r20, r10
    5446:	94 01       	movw	r18, r8
    5448:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    544c:	6b 01       	movw	r12, r22
    544e:	7c 01       	movw	r14, r24
    5450:	be 01       	movw	r22, r28
    5452:	6b 5d       	subi	r22, 0xDB	; 219
    5454:	7f 4f       	sbci	r23, 0xFF	; 255
    5456:	ce 01       	movw	r24, r28
    5458:	49 96       	adiw	r24, 0x19	; 25
    545a:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    545e:	4b 01       	movw	r8, r22
    5460:	5c 01       	movw	r10, r24
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	40 e8       	ldi	r20, 0x80	; 128
    5468:	5f e3       	ldi	r21, 0x3F	; 63
    546a:	c5 01       	movw	r24, r10
    546c:	b4 01       	movw	r22, r8
    546e:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5472:	9b 01       	movw	r18, r22
    5474:	ac 01       	movw	r20, r24
    5476:	c7 01       	movw	r24, r14
    5478:	b6 01       	movw	r22, r12
    547a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    547e:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <sqrt>
    5482:	9b 01       	movw	r18, r22
    5484:	ac 01       	movw	r20, r24
    5486:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    548a:	9b 01       	movw	r18, r22
    548c:	ac 01       	movw	r20, r24
    548e:	60 e0       	ldi	r22, 0x00	; 0
    5490:	70 e0       	ldi	r23, 0x00	; 0
    5492:	80 e8       	ldi	r24, 0x80	; 128
    5494:	9f e3       	ldi	r25, 0x3F	; 63
    5496:	0e 94 19 34 	call	0x6832	; 0x6832 <__divsf3>
    549a:	ec 96       	adiw	r28, 0x3c	; 60
    549c:	6c af       	std	Y+60, r22	; 0x3c
    549e:	7d af       	std	Y+61, r23	; 0x3d
    54a0:	8e af       	std	Y+62, r24	; 0x3e
    54a2:	9f af       	std	Y+63, r25	; 0x3f
    54a4:	ec 97       	sbiw	r28, 0x3c	; 60
    54a6:	8e 01       	movw	r16, r28
    54a8:	0f 5c       	subi	r16, 0xCF	; 207
    54aa:	1f 4f       	sbci	r17, 0xFF	; 255
    54ac:	1e 01       	movw	r2, r28
    54ae:	fd e3       	ldi	r31, 0x3D	; 61
    54b0:	2f 0e       	add	r2, r31
    54b2:	31 1c       	adc	r3, r1
    54b4:	2e 01       	movw	r4, r28
    54b6:	21 e6       	ldi	r18, 0x61	; 97
    54b8:	42 0e       	add	r4, r18
    54ba:	51 1c       	adc	r5, r1
    54bc:	31 01       	movw	r6, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    54be:	f8 01       	movw	r30, r16
    54c0:	61 91       	ld	r22, Z+
    54c2:	71 91       	ld	r23, Z+
    54c4:	81 91       	ld	r24, Z+
    54c6:	91 91       	ld	r25, Z+
    54c8:	8f 01       	movw	r16, r30
    54ca:	f1 01       	movw	r30, r2
    54cc:	81 90       	ld	r8, Z+
    54ce:	91 90       	ld	r9, Z+
    54d0:	a1 90       	ld	r10, Z+
    54d2:	b1 90       	ld	r11, Z+
    54d4:	1f 01       	movw	r2, r30
    54d6:	e1 96       	adiw	r28, 0x31	; 49
    54d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    54da:	3d ad       	ldd	r19, Y+61	; 0x3d
    54dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    54de:	5f ad       	ldd	r21, Y+63	; 0x3f
    54e0:	e1 97       	sbiw	r28, 0x31	; 49
    54e2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    54e6:	6b 01       	movw	r12, r22
    54e8:	7c 01       	movw	r14, r24
    54ea:	a5 01       	movw	r20, r10
    54ec:	94 01       	movw	r18, r8
    54ee:	e7 96       	adiw	r28, 0x37	; 55
    54f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    54f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    54f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    54f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54f8:	e7 97       	sbiw	r28, 0x37	; 55
    54fa:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    54fe:	9b 01       	movw	r18, r22
    5500:	ac 01       	movw	r20, r24
    5502:	c7 01       	movw	r24, r14
    5504:	b6 01       	movw	r22, r12
    5506:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    550a:	f2 01       	movw	r30, r4
    550c:	61 93       	st	Z+, r22
    550e:	71 93       	st	Z+, r23
    5510:	81 93       	st	Z+, r24
    5512:	91 93       	st	Z+, r25
    5514:	2f 01       	movw	r4, r30
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    5516:	06 15       	cp	r16, r6
    5518:	17 05       	cpc	r17, r7
    551a:	89 f6       	brne	.-94     	; 0x54be <quest+0x5e0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    551c:	be 01       	movw	r22, r28
    551e:	6b 5d       	subi	r22, 0xDB	; 219
    5520:	7f 4f       	sbci	r23, 0xFF	; 255
    5522:	ce 01       	movw	r24, r28
    5524:	49 96       	adiw	r24, 0x19	; 25
    5526:	0e 94 0b 21 	call	0x4216	; 0x4216 <vector_dot_product>
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	40 e8       	ldi	r20, 0x80	; 128
    5530:	5f e3       	ldi	r21, 0x3F	; 63
    5532:	0e 94 35 33 	call	0x666a	; 0x666a <__addsf3>
    5536:	e1 96       	adiw	r28, 0x31	; 49
    5538:	2c ad       	ldd	r18, Y+60	; 0x3c
    553a:	3d ad       	ldd	r19, Y+61	; 0x3d
    553c:	4e ad       	ldd	r20, Y+62	; 0x3e
    553e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5540:	e1 97       	sbiw	r28, 0x31	; 49
    5542:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    5546:	a5 96       	adiw	r28, 0x25	; 37
    5548:	0c ad       	ldd	r16, Y+60	; 0x3c
    554a:	1d ad       	ldd	r17, Y+61	; 0x3d
    554c:	2e ad       	ldd	r18, Y+62	; 0x3e
    554e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5550:	a5 97       	sbiw	r28, 0x25	; 37
    5552:	e3 96       	adiw	r28, 0x33	; 51
    5554:	ee ad       	ldd	r30, Y+62	; 0x3e
    5556:	ff ad       	ldd	r31, Y+63	; 0x3f
    5558:	e3 97       	sbiw	r28, 0x33	; 51
    555a:	00 83       	st	Z, r16
    555c:	11 83       	std	Z+1, r17	; 0x01
    555e:	22 83       	std	Z+2, r18	; 0x02
    5560:	33 83       	std	Z+3, r19	; 0x03
    5562:	a9 96       	adiw	r28, 0x29	; 41
    5564:	0c ad       	ldd	r16, Y+60	; 0x3c
    5566:	1d ad       	ldd	r17, Y+61	; 0x3d
    5568:	2e ad       	ldd	r18, Y+62	; 0x3e
    556a:	3f ad       	ldd	r19, Y+63	; 0x3f
    556c:	a9 97       	sbiw	r28, 0x29	; 41
    556e:	04 83       	std	Z+4, r16	; 0x04
    5570:	15 83       	std	Z+5, r17	; 0x05
    5572:	26 83       	std	Z+6, r18	; 0x06
    5574:	37 83       	std	Z+7, r19	; 0x07
    5576:	ad 96       	adiw	r28, 0x2d	; 45
    5578:	0c ad       	ldd	r16, Y+60	; 0x3c
    557a:	1d ad       	ldd	r17, Y+61	; 0x3d
    557c:	2e ad       	ldd	r18, Y+62	; 0x3e
    557e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5580:	ad 97       	sbiw	r28, 0x2d	; 45
    5582:	00 87       	std	Z+8, r16	; 0x08
    5584:	11 87       	std	Z+9, r17	; 0x09
    5586:	22 87       	std	Z+10, r18	; 0x0a
    5588:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    558a:	64 87       	std	Z+12, r22	; 0x0c
    558c:	75 87       	std	Z+13, r23	; 0x0d
    558e:	86 87       	std	Z+14, r24	; 0x0e
    5590:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    5592:	ec 96       	adiw	r28, 0x3c	; 60
    5594:	4c ad       	ldd	r20, Y+60	; 0x3c
    5596:	5d ad       	ldd	r21, Y+61	; 0x3d
    5598:	6e ad       	ldd	r22, Y+62	; 0x3e
    559a:	7f ad       	ldd	r23, Y+63	; 0x3f
    559c:	ec 97       	sbiw	r28, 0x3c	; 60
    559e:	cf 01       	movw	r24, r30
    55a0:	0e 94 91 22 	call	0x4522	; 0x4522 <scalar_into_quaternion>
    55a4:	7d c0       	rjmp	.+250    	; 0x56a0 <quest+0x7c2>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    55a6:	e3 96       	adiw	r28, 0x33	; 51
    55a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    55aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    55ac:	e3 97       	sbiw	r28, 0x33	; 51
    55ae:	10 82       	st	Z, r1
    55b0:	11 82       	std	Z+1, r1	; 0x01
    55b2:	12 82       	std	Z+2, r1	; 0x02
    55b4:	13 82       	std	Z+3, r1	; 0x03
    55b6:	14 82       	std	Z+4, r1	; 0x04
    55b8:	15 82       	std	Z+5, r1	; 0x05
    55ba:	16 82       	std	Z+6, r1	; 0x06
    55bc:	17 82       	std	Z+7, r1	; 0x07
    55be:	10 86       	std	Z+8, r1	; 0x08
    55c0:	11 86       	std	Z+9, r1	; 0x09
    55c2:	12 86       	std	Z+10, r1	; 0x0a
    55c4:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	a0 e8       	ldi	r26, 0x80	; 128
    55cc:	bf e3       	ldi	r27, 0x3F	; 63
    55ce:	84 87       	std	Z+12, r24	; 0x0c
    55d0:	95 87       	std	Z+13, r25	; 0x0d
    55d2:	a6 87       	std	Z+14, r26	; 0x0e
    55d4:	b7 87       	std	Z+15, r27	; 0x0f
    55d6:	64 c0       	rjmp	.+200    	; 0x56a0 <quest+0x7c2>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    55d8:	80 90 e9 04 	lds	r8, 0x04E9	; 0x8004e9 <Current_state+0x3e>
    55dc:	90 90 ea 04 	lds	r9, 0x04EA	; 0x8004ea <Current_state+0x3f>
    55e0:	a0 90 eb 04 	lds	r10, 0x04EB	; 0x8004eb <Current_state+0x40>
    55e4:	b0 90 ec 04 	lds	r11, 0x04EC	; 0x8004ec <Current_state+0x41>
    55e8:	c0 90 ed 04 	lds	r12, 0x04ED	; 0x8004ed <Current_state+0x42>
    55ec:	d0 90 ee 04 	lds	r13, 0x04EE	; 0x8004ee <Current_state+0x43>
    55f0:	e0 90 ef 04 	lds	r14, 0x04EF	; 0x8004ef <Current_state+0x44>
    55f4:	f0 90 f0 04 	lds	r15, 0x04F0	; 0x8004f0 <Current_state+0x45>
    55f8:	a7 01       	movw	r20, r14
    55fa:	96 01       	movw	r18, r12
    55fc:	c5 01       	movw	r24, r10
    55fe:	b4 01       	movw	r22, r8
    5600:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    5604:	18 16       	cp	r1, r24
    5606:	4c f0       	brlt	.+18     	; 0x561a <quest+0x73c>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5608:	f7 fa       	bst	r15, 7
    560a:	f0 94       	com	r15
    560c:	f7 f8       	bld	r15, 7
    560e:	f0 94       	com	r15
    5610:	c9 82       	std	Y+1, r12	; 0x01
    5612:	da 82       	std	Y+2, r13	; 0x02
    5614:	eb 82       	std	Y+3, r14	; 0x03
    5616:	fc 82       	std	Y+4, r15	; 0x04
    5618:	04 c0       	rjmp	.+8      	; 0x5622 <quest+0x744>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    561a:	89 82       	std	Y+1, r8	; 0x01
    561c:	9a 82       	std	Y+2, r9	; 0x02
    561e:	ab 82       	std	Y+3, r10	; 0x03
    5620:	bc 82       	std	Y+4, r11	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5622:	80 90 f1 04 	lds	r8, 0x04F1	; 0x8004f1 <Current_state+0x46>
    5626:	90 90 f2 04 	lds	r9, 0x04F2	; 0x8004f2 <Current_state+0x47>
    562a:	a0 90 f3 04 	lds	r10, 0x04F3	; 0x8004f3 <Current_state+0x48>
    562e:	b0 90 f4 04 	lds	r11, 0x04F4	; 0x8004f4 <Current_state+0x49>
    5632:	c0 90 f5 04 	lds	r12, 0x04F5	; 0x8004f5 <Current_state+0x4a>
    5636:	d0 90 f6 04 	lds	r13, 0x04F6	; 0x8004f6 <Current_state+0x4b>
    563a:	e0 90 f7 04 	lds	r14, 0x04F7	; 0x8004f7 <Current_state+0x4c>
    563e:	f0 90 f8 04 	lds	r15, 0x04F8	; 0x8004f8 <Current_state+0x4d>
    5642:	a7 01       	movw	r20, r14
    5644:	96 01       	movw	r18, r12
    5646:	c5 01       	movw	r24, r10
    5648:	b4 01       	movw	r22, r8
    564a:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    564e:	18 16       	cp	r1, r24
    5650:	4c f0       	brlt	.+18     	; 0x5664 <quest+0x786>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5652:	f7 fa       	bst	r15, 7
    5654:	f0 94       	com	r15
    5656:	f7 f8       	bld	r15, 7
    5658:	f0 94       	com	r15
    565a:	cd 82       	std	Y+5, r12	; 0x05
    565c:	de 82       	std	Y+6, r13	; 0x06
    565e:	ef 82       	std	Y+7, r14	; 0x07
    5660:	f8 86       	std	Y+8, r15	; 0x08
    5662:	04 c0       	rjmp	.+8      	; 0x566c <quest+0x78e>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    5664:	8d 82       	std	Y+5, r8	; 0x05
    5666:	9e 82       	std	Y+6, r9	; 0x06
    5668:	af 82       	std	Y+7, r10	; 0x07
    566a:	b8 86       	std	Y+8, r11	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    566c:	80 90 f9 04 	lds	r8, 0x04F9	; 0x8004f9 <Current_state+0x4e>
    5670:	90 90 fa 04 	lds	r9, 0x04FA	; 0x8004fa <Current_state+0x4f>
    5674:	a0 90 fb 04 	lds	r10, 0x04FB	; 0x8004fb <Current_state+0x50>
    5678:	b0 90 fc 04 	lds	r11, 0x04FC	; 0x8004fc <Current_state+0x51>
    567c:	c0 90 fd 04 	lds	r12, 0x04FD	; 0x8004fd <Current_state+0x52>
    5680:	d0 90 fe 04 	lds	r13, 0x04FE	; 0x8004fe <Current_state+0x53>
    5684:	e0 90 ff 04 	lds	r14, 0x04FF	; 0x8004ff <Current_state+0x54>
    5688:	f0 90 00 05 	lds	r15, 0x0500	; 0x800500 <Current_state+0x55>
    568c:	a7 01       	movw	r20, r14
    568e:	96 01       	movw	r18, r12
    5690:	c5 01       	movw	r24, r10
    5692:	b4 01       	movw	r22, r8
    5694:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <__gesf2>
    5698:	18 16       	cp	r1, r24
    569a:	0c f4       	brge	.+2      	; 0x569e <quest+0x7c0>
    569c:	91 cc       	rjmp	.-1758   	; 0x4fc0 <quest+0xe2>
    569e:	95 cc       	rjmp	.-1750   	; 0x4fca <quest+0xec>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    56a0:	e8 96       	adiw	r28, 0x38	; 56
    56a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    56a4:	e8 97       	sbiw	r28, 0x38	; 56
    56a6:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <light_prev.2060>
 
  return light;
   
}
    56aa:	8f 2f       	mov	r24, r31
    56ac:	c5 58       	subi	r28, 0x85	; 133
    56ae:	df 4f       	sbci	r29, 0xFF	; 255
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	1f 91       	pop	r17
    56c0:	0f 91       	pop	r16
    56c2:	ff 90       	pop	r15
    56c4:	ef 90       	pop	r14
    56c6:	df 90       	pop	r13
    56c8:	cf 90       	pop	r12
    56ca:	bf 90       	pop	r11
    56cc:	af 90       	pop	r10
    56ce:	9f 90       	pop	r9
    56d0:	8f 90       	pop	r8
    56d2:	7f 90       	pop	r7
    56d4:	6f 90       	pop	r6
    56d6:	5f 90       	pop	r5
    56d8:	4f 90       	pop	r4
    56da:	3f 90       	pop	r3
    56dc:	2f 90       	pop	r2
    56de:	08 95       	ret

000056e0 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    56e0:	2f 92       	push	r2
    56e2:	3f 92       	push	r3
    56e4:	4f 92       	push	r4
    56e6:	5f 92       	push	r5
    56e8:	6f 92       	push	r6
    56ea:	7f 92       	push	r7
    56ec:	8f 92       	push	r8
    56ee:	9f 92       	push	r9
    56f0:	af 92       	push	r10
    56f2:	bf 92       	push	r11
    56f4:	cf 92       	push	r12
    56f6:	df 92       	push	r13
    56f8:	ef 92       	push	r14
    56fa:	ff 92       	push	r15
    56fc:	0f 93       	push	r16
    56fe:	1f 93       	push	r17
    5700:	cf 93       	push	r28
    5702:	df 93       	push	r29
    5704:	cd b7       	in	r28, 0x3d	; 61
    5706:	de b7       	in	r29, 0x3e	; 62
    5708:	c6 5c       	subi	r28, 0xC6	; 198
    570a:	d1 09       	sbc	r29, r1
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	f8 94       	cli
    5710:	de bf       	out	0x3e, r29	; 62
    5712:	0f be       	out	0x3f, r0	; 63
    5714:	cd bf       	out	0x3d, r28	; 61
    5716:	cd 53       	subi	r28, 0x3D	; 61
    5718:	df 4f       	sbci	r29, 0xFF	; 255
    571a:	88 83       	st	Y, r24
    571c:	c3 5c       	subi	r28, 0xC3	; 195
    571e:	d0 40       	sbci	r29, 0x00	; 0
    5720:	cc 53       	subi	r28, 0x3C	; 60
    5722:	df 4f       	sbci	r29, 0xFF	; 255
    5724:	98 83       	st	Y, r25
    5726:	c4 5c       	subi	r28, 0xC4	; 196
    5728:	d0 40       	sbci	r29, 0x00	; 0
    572a:	cb 53       	subi	r28, 0x3B	; 59
    572c:	df 4f       	sbci	r29, 0xFF	; 255
    572e:	68 83       	st	Y, r22
    5730:	c5 5c       	subi	r28, 0xC5	; 197
    5732:	d0 40       	sbci	r29, 0x00	; 0
    5734:	ca 53       	subi	r28, 0x3A	; 58
    5736:	df 4f       	sbci	r29, 0xFF	; 255
    5738:	78 83       	st	Y, r23
    573a:	c6 5c       	subi	r28, 0xC6	; 198
    573c:	d0 40       	sbci	r29, 0x00	; 0
    573e:	28 2e       	mov	r2, r24
    5740:	39 2e       	mov	r3, r25
    5742:	0a e5       	ldi	r16, 0x5A	; 90
    5744:	14 e0       	ldi	r17, 0x04	; 4
    5746:	ce 01       	movw	r24, r28
    5748:	01 96       	adiw	r24, 0x01	; 1
    574a:	7c 01       	movw	r14, r24
    574c:	de 01       	movw	r26, r28
    574e:	51 96       	adiw	r26, 0x11	; 17
    5750:	cb 54       	subi	r28, 0x4B	; 75
    5752:	df 4f       	sbci	r29, 0xFF	; 255
    5754:	b9 83       	std	Y+1, r27	; 0x01
    5756:	a8 83       	st	Y, r26
    5758:	c5 5b       	subi	r28, 0xB5	; 181
    575a:	d0 40       	sbci	r29, 0x00	; 0
    575c:	0f 2e       	mov	r0, r31
    575e:	fa e6       	ldi	r31, 0x6A	; 106
    5760:	cf 2e       	mov	r12, r31
    5762:	f4 e0       	ldi	r31, 0x04	; 4
    5764:	df 2e       	mov	r13, r31
    5766:	f0 2d       	mov	r31, r0
    5768:	cf 54       	subi	r28, 0x4F	; 79
    576a:	df 4f       	sbci	r29, 0xFF	; 255
    576c:	b9 83       	std	Y+1, r27	; 0x01
    576e:	a8 83       	st	Y, r26
    5770:	c1 5b       	subi	r28, 0xB1	; 177
    5772:	d0 40       	sbci	r29, 0x00	; 0
    5774:	c7 54       	subi	r28, 0x47	; 71
    5776:	df 4f       	sbci	r29, 0xFF	; 255
    5778:	99 83       	std	Y+1, r25	; 0x01
    577a:	88 83       	st	Y, r24
    577c:	c9 5b       	subi	r28, 0xB9	; 185
    577e:	d0 40       	sbci	r29, 0x00	; 0
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    5780:	f1 01       	movw	r30, r2
    5782:	81 90       	ld	r8, Z+
    5784:	91 90       	ld	r9, Z+
    5786:	a1 90       	ld	r10, Z+
    5788:	b1 90       	ld	r11, Z+
    578a:	1f 01       	movw	r2, r30
    578c:	d8 01       	movw	r26, r16
    578e:	4d 90       	ld	r4, X+
    5790:	5d 90       	ld	r5, X+
    5792:	6d 90       	ld	r6, X+
    5794:	7d 90       	ld	r7, X+
    5796:	8d 01       	movw	r16, r26
    5798:	a3 01       	movw	r20, r6
    579a:	92 01       	movw	r18, r4
    579c:	c5 01       	movw	r24, r10
    579e:	b4 01       	movw	r22, r8
    57a0:	63 d7       	rcall	.+3782   	; 0x6668 <__subsf3>
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e0       	ldi	r20, 0x00	; 0
    57a8:	5f e3       	ldi	r21, 0x3F	; 63
    57aa:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    57ae:	f7 01       	movw	r30, r14
    57b0:	61 93       	st	Z+, r22
    57b2:	71 93       	st	Z+, r23
    57b4:	81 93       	st	Z+, r24
    57b6:	91 93       	st	Z+, r25
    57b8:	7f 01       	movw	r14, r30
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    57ba:	a3 01       	movw	r20, r6
    57bc:	92 01       	movw	r18, r4
    57be:	c5 01       	movw	r24, r10
    57c0:	b4 01       	movw	r22, r8
    57c2:	53 d7       	rcall	.+3750   	; 0x666a <__addsf3>
    57c4:	20 e0       	ldi	r18, 0x00	; 0
    57c6:	30 e0       	ldi	r19, 0x00	; 0
    57c8:	40 e0       	ldi	r20, 0x00	; 0
    57ca:	5f e3       	ldi	r21, 0x3F	; 63
    57cc:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    57d0:	cf 54       	subi	r28, 0x4F	; 79
    57d2:	df 4f       	sbci	r29, 0xFF	; 255
    57d4:	a8 81       	ld	r26, Y
    57d6:	b9 81       	ldd	r27, Y+1	; 0x01
    57d8:	c1 5b       	subi	r28, 0xB1	; 177
    57da:	d0 40       	sbci	r29, 0x00	; 0
    57dc:	6d 93       	st	X+, r22
    57de:	7d 93       	st	X+, r23
    57e0:	8d 93       	st	X+, r24
    57e2:	9d 93       	st	X+, r25
    57e4:	cf 54       	subi	r28, 0x4F	; 79
    57e6:	df 4f       	sbci	r29, 0xFF	; 255
    57e8:	b9 83       	std	Y+1, r27	; 0x01
    57ea:	a8 83       	st	Y, r26
    57ec:	c1 5b       	subi	r28, 0xB1	; 177
    57ee:	d0 40       	sbci	r29, 0x00	; 0
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    57f0:	0c 15       	cp	r16, r12
    57f2:	1d 05       	cpc	r17, r13
    57f4:	29 f6       	brne	.-118    	; 0x5780 <omega_estimation+0xa0>
    57f6:	c7 54       	subi	r28, 0x47	; 71
    57f8:	df 4f       	sbci	r29, 0xFF	; 255
    57fa:	e8 80       	ld	r14, Y
    57fc:	f9 80       	ldd	r15, Y+1	; 0x01
    57fe:	c9 5b       	subi	r28, 0xB9	; 185
    5800:	d0 40       	sbci	r29, 0x00	; 0
    5802:	de 01       	movw	r26, r28
    5804:	9d 96       	adiw	r26, 0x2d	; 45
    5806:	8e 01       	movw	r16, r28
    5808:	0f 5d       	subi	r16, 0xDF	; 223
    580a:	1f 4f       	sbci	r17, 0xFF	; 255
    580c:	ce 01       	movw	r24, r28
    580e:	0d 96       	adiw	r24, 0x0d	; 13
    5810:	bd 01       	movw	r22, r26
    5812:	98 01       	movw	r18, r16
    5814:	f7 01       	movw	r30, r14
    5816:	cb 54       	subi	r28, 0x4B	; 75
    5818:	df 4f       	sbci	r29, 0xFF	; 255
    581a:	48 81       	ld	r20, Y
    581c:	59 81       	ldd	r21, Y+1	; 0x01
    581e:	c5 5b       	subi	r28, 0xB5	; 181
    5820:	d0 40       	sbci	r29, 0x00	; 0
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    5822:	c1 90       	ld	r12, Z+
    5824:	d1 90       	ld	r13, Z+
    5826:	e1 90       	ld	r14, Z+
    5828:	f1 90       	ld	r15, Z+
    582a:	db 01       	movw	r26, r22
    582c:	cd 92       	st	X+, r12
    582e:	dd 92       	st	X+, r13
    5830:	ed 92       	st	X+, r14
    5832:	fd 92       	st	X+, r15
    5834:	bd 01       	movw	r22, r26
    e[i] = q[i];
    5836:	da 01       	movw	r26, r20
    5838:	cd 90       	ld	r12, X+
    583a:	dd 90       	ld	r13, X+
    583c:	ed 90       	ld	r14, X+
    583e:	fd 90       	ld	r15, X+
    5840:	ad 01       	movw	r20, r26
    5842:	d9 01       	movw	r26, r18
    5844:	cd 92       	st	X+, r12
    5846:	dd 92       	st	X+, r13
    5848:	ed 92       	st	X+, r14
    584a:	fd 92       	st	X+, r15
    584c:	9d 01       	movw	r18, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    584e:	e8 17       	cp	r30, r24
    5850:	f9 07       	cpc	r31, r25
    5852:	39 f7       	brne	.-50     	; 0x5822 <omega_estimation+0x142>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    5854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5858:	af 8d       	ldd	r26, Y+31	; 0x1f
    585a:	b8 a1       	ldd	r27, Y+32	; 0x20
    585c:	c7 54       	subi	r28, 0x47	; 71
    585e:	df 4f       	sbci	r29, 0xFF	; 255
    5860:	88 83       	st	Y, r24
    5862:	99 83       	std	Y+1, r25	; 0x01
    5864:	aa 83       	std	Y+2, r26	; 0x02
    5866:	bb 83       	std	Y+3, r27	; 0x03
    5868:	c9 5b       	subi	r28, 0xB9	; 185
    586a:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    586c:	ad 96       	adiw	r28, 0x2d	; 45
    586e:	1c ae       	std	Y+60, r1	; 0x3c
    5870:	1d ae       	std	Y+61, r1	; 0x3d
    5872:	1e ae       	std	Y+62, r1	; 0x3e
    5874:	1f ae       	std	Y+63, r1	; 0x3f
    5876:	ad 97       	sbiw	r28, 0x2d	; 45
    5878:	c9 a4       	ldd	r12, Y+41	; 0x29
    587a:	da a4       	ldd	r13, Y+42	; 0x2a
    587c:	eb a4       	ldd	r14, Y+43	; 0x2b
    587e:	fc a4       	ldd	r15, Y+44	; 0x2c
    5880:	20 e0       	ldi	r18, 0x00	; 0
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	40 e0       	ldi	r20, 0x00	; 0
    5886:	50 ec       	ldi	r21, 0xC0	; 192
    5888:	c7 01       	movw	r24, r14
    588a:	b6 01       	movw	r22, r12
    588c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5890:	e1 96       	adiw	r28, 0x31	; 49
    5892:	6c af       	std	Y+60, r22	; 0x3c
    5894:	7d af       	std	Y+61, r23	; 0x3d
    5896:	8e af       	std	Y+62, r24	; 0x3e
    5898:	9f af       	std	Y+63, r25	; 0x3f
    589a:	e1 97       	sbiw	r28, 0x31	; 49
    589c:	8d a0       	ldd	r8, Y+37	; 0x25
    589e:	9e a0       	ldd	r9, Y+38	; 0x26
    58a0:	af a0       	ldd	r10, Y+39	; 0x27
    58a2:	b8 a4       	ldd	r11, Y+40	; 0x28
    58a4:	a5 01       	movw	r20, r10
    58a6:	94 01       	movw	r18, r8
    58a8:	c5 01       	movw	r24, r10
    58aa:	b4 01       	movw	r22, r8
    58ac:	de d6       	rcall	.+3516   	; 0x666a <__addsf3>
    58ae:	e5 96       	adiw	r28, 0x35	; 53
    58b0:	6c af       	std	Y+60, r22	; 0x3c
    58b2:	7d af       	std	Y+61, r23	; 0x3d
    58b4:	8e af       	std	Y+62, r24	; 0x3e
    58b6:	9f af       	std	Y+63, r25	; 0x3f
    58b8:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    58ba:	a7 01       	movw	r20, r14
    58bc:	96 01       	movw	r18, r12
    58be:	c7 01       	movw	r24, r14
    58c0:	b6 01       	movw	r22, r12
    58c2:	d3 d6       	rcall	.+3494   	; 0x666a <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    58c4:	e9 96       	adiw	r28, 0x39	; 57
    58c6:	6c af       	std	Y+60, r22	; 0x3c
    58c8:	7d af       	std	Y+61, r23	; 0x3d
    58ca:	8e af       	std	Y+62, r24	; 0x3e
    58cc:	9f af       	std	Y+63, r25	; 0x3f
    58ce:	e9 97       	sbiw	r28, 0x39	; 57
    58d0:	ed 96       	adiw	r28, 0x3d	; 61
    58d2:	1c ae       	std	Y+60, r1	; 0x3c
    58d4:	1d ae       	std	Y+61, r1	; 0x3d
    58d6:	1e ae       	std	Y+62, r1	; 0x3e
    58d8:	1f ae       	std	Y+63, r1	; 0x3f
    58da:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    58dc:	c9 a0       	ldd	r12, Y+33	; 0x21
    58de:	da a0       	ldd	r13, Y+34	; 0x22
    58e0:	eb a0       	ldd	r14, Y+35	; 0x23
    58e2:	fc a0       	ldd	r15, Y+36	; 0x24
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	40 e0       	ldi	r20, 0x00	; 0
    58ea:	50 ec       	ldi	r21, 0xC0	; 192
    58ec:	c7 01       	movw	r24, r14
    58ee:	b6 01       	movw	r22, r12
    58f0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    58f4:	c3 58       	subi	r28, 0x83	; 131
    58f6:	df 4f       	sbci	r29, 0xFF	; 255
    58f8:	68 83       	st	Y, r22
    58fa:	79 83       	std	Y+1, r23	; 0x01
    58fc:	8a 83       	std	Y+2, r24	; 0x02
    58fe:	9b 83       	std	Y+3, r25	; 0x03
    5900:	cd 57       	subi	r28, 0x7D	; 125
    5902:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	50 ec       	ldi	r21, 0xC0	; 192
    590c:	c5 01       	movw	r24, r10
    590e:	b4 01       	movw	r22, r8
    5910:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5914:	cf 57       	subi	r28, 0x7F	; 127
    5916:	df 4f       	sbci	r29, 0xFF	; 255
    5918:	68 83       	st	Y, r22
    591a:	79 83       	std	Y+1, r23	; 0x01
    591c:	8a 83       	std	Y+2, r24	; 0x02
    591e:	9b 83       	std	Y+3, r25	; 0x03
    5920:	c1 58       	subi	r28, 0x81	; 129
    5922:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5924:	a7 01       	movw	r20, r14
    5926:	96 01       	movw	r18, r12
    5928:	c7 01       	movw	r24, r14
    592a:	b6 01       	movw	r22, r12
    592c:	9e d6       	rcall	.+3388   	; 0x666a <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    592e:	cb 57       	subi	r28, 0x7B	; 123
    5930:	df 4f       	sbci	r29, 0xFF	; 255
    5932:	68 83       	st	Y, r22
    5934:	79 83       	std	Y+1, r23	; 0x01
    5936:	8a 83       	std	Y+2, r24	; 0x02
    5938:	9b 83       	std	Y+3, r25	; 0x03
    593a:	c5 58       	subi	r28, 0x85	; 133
    593c:	d0 40       	sbci	r29, 0x00	; 0
    593e:	c7 57       	subi	r28, 0x77	; 119
    5940:	df 4f       	sbci	r29, 0xFF	; 255
    5942:	18 82       	st	Y, r1
    5944:	19 82       	std	Y+1, r1	; 0x01
    5946:	1a 82       	std	Y+2, r1	; 0x02
    5948:	1b 82       	std	Y+3, r1	; 0x03
    594a:	c9 58       	subi	r28, 0x89	; 137
    594c:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    594e:	c7 54       	subi	r28, 0x47	; 71
    5950:	df 4f       	sbci	r29, 0xFF	; 255
    5952:	28 81       	ld	r18, Y
    5954:	39 81       	ldd	r19, Y+1	; 0x01
    5956:	4a 81       	ldd	r20, Y+2	; 0x02
    5958:	5b 81       	ldd	r21, Y+3	; 0x03
    595a:	c9 5b       	subi	r28, 0xB9	; 185
    595c:	d0 40       	sbci	r29, 0x00	; 0
    595e:	ca 01       	movw	r24, r20
    5960:	b9 01       	movw	r22, r18
    5962:	83 d6       	rcall	.+3334   	; 0x666a <__addsf3>
    5964:	c3 57       	subi	r28, 0x73	; 115
    5966:	df 4f       	sbci	r29, 0xFF	; 255
    5968:	68 83       	st	Y, r22
    596a:	79 83       	std	Y+1, r23	; 0x01
    596c:	8a 83       	std	Y+2, r24	; 0x02
    596e:	9b 83       	std	Y+3, r25	; 0x03
    5970:	cd 58       	subi	r28, 0x8D	; 141
    5972:	d0 40       	sbci	r29, 0x00	; 0
    5974:	cf 56       	subi	r28, 0x6F	; 111
    5976:	df 4f       	sbci	r29, 0xFF	; 255
    5978:	18 82       	st	Y, r1
    597a:	19 82       	std	Y+1, r1	; 0x01
    597c:	1a 82       	std	Y+2, r1	; 0x02
    597e:	1b 82       	std	Y+3, r1	; 0x03
    5980:	c1 59       	subi	r28, 0x91	; 145
    5982:	d0 40       	sbci	r29, 0x00	; 0
    5984:	cb 56       	subi	r28, 0x6B	; 107
    5986:	df 4f       	sbci	r29, 0xFF	; 255
    5988:	18 82       	st	Y, r1
    598a:	19 82       	std	Y+1, r1	; 0x01
    598c:	1a 82       	std	Y+2, r1	; 0x02
    598e:	1b 82       	std	Y+3, r1	; 0x03
    5990:	c5 59       	subi	r28, 0x95	; 149
    5992:	d0 40       	sbci	r29, 0x00	; 0
    5994:	c7 56       	subi	r28, 0x67	; 103
    5996:	df 4f       	sbci	r29, 0xFF	; 255
    5998:	18 82       	st	Y, r1
    599a:	19 82       	std	Y+1, r1	; 0x01
    599c:	1a 82       	std	Y+2, r1	; 0x02
    599e:	1b 82       	std	Y+3, r1	; 0x03
    59a0:	c9 59       	subi	r28, 0x99	; 153
    59a2:	d0 40       	sbci	r29, 0x00	; 0
    59a4:	c3 56       	subi	r28, 0x63	; 99
    59a6:	df 4f       	sbci	r29, 0xFF	; 255
    59a8:	68 83       	st	Y, r22
    59aa:	79 83       	std	Y+1, r23	; 0x01
    59ac:	8a 83       	std	Y+2, r24	; 0x02
    59ae:	9b 83       	std	Y+3, r25	; 0x03
    59b0:	cd 59       	subi	r28, 0x9D	; 157
    59b2:	d0 40       	sbci	r29, 0x00	; 0
    59b4:	cf 55       	subi	r28, 0x5F	; 95
    59b6:	df 4f       	sbci	r29, 0xFF	; 255
    59b8:	18 82       	st	Y, r1
    59ba:	19 82       	std	Y+1, r1	; 0x01
    59bc:	1a 82       	std	Y+2, r1	; 0x02
    59be:	1b 82       	std	Y+3, r1	; 0x03
    59c0:	c1 5a       	subi	r28, 0xA1	; 161
    59c2:	d0 40       	sbci	r29, 0x00	; 0
    59c4:	cb 55       	subi	r28, 0x5B	; 91
    59c6:	df 4f       	sbci	r29, 0xFF	; 255
    59c8:	18 82       	st	Y, r1
    59ca:	19 82       	std	Y+1, r1	; 0x01
    59cc:	1a 82       	std	Y+2, r1	; 0x02
    59ce:	1b 82       	std	Y+3, r1	; 0x03
    59d0:	c5 5a       	subi	r28, 0xA5	; 165
    59d2:	d0 40       	sbci	r29, 0x00	; 0
    59d4:	c7 55       	subi	r28, 0x57	; 87
    59d6:	df 4f       	sbci	r29, 0xFF	; 255
    59d8:	18 82       	st	Y, r1
    59da:	19 82       	std	Y+1, r1	; 0x01
    59dc:	1a 82       	std	Y+2, r1	; 0x02
    59de:	1b 82       	std	Y+3, r1	; 0x03
    59e0:	c9 5a       	subi	r28, 0xA9	; 169
    59e2:	d0 40       	sbci	r29, 0x00	; 0
    59e4:	c3 55       	subi	r28, 0x53	; 83
    59e6:	df 4f       	sbci	r29, 0xFF	; 255
    59e8:	68 83       	st	Y, r22
    59ea:	79 83       	std	Y+1, r23	; 0x01
    59ec:	8a 83       	std	Y+2, r24	; 0x02
    59ee:	9b 83       	std	Y+3, r25	; 0x03
    59f0:	cd 5a       	subi	r28, 0xAD	; 173
    59f2:	d0 40       	sbci	r29, 0x00	; 0
    59f4:	3e 01       	movw	r6, r28
    59f6:	95 e4       	ldi	r25, 0x45	; 69
    59f8:	69 0e       	add	r6, r25
    59fa:	71 1c       	adc	r7, r1
    59fc:	c3 54       	subi	r28, 0x43	; 67
    59fe:	df 4f       	sbci	r29, 0xFF	; 255
    5a00:	19 83       	std	Y+1, r17	; 0x01
    5a02:	08 83       	st	Y, r16
    5a04:	cd 5b       	subi	r28, 0xBD	; 189
    5a06:	d0 40       	sbci	r29, 0x00	; 0
    5a08:	81 2c       	mov	r8, r1
    5a0a:	91 2c       	mov	r9, r1
    5a0c:	5e 01       	movw	r10, r28
    5a0e:	ad e2       	ldi	r26, 0x2D	; 45
    5a10:	aa 0e       	add	r10, r26
    5a12:	b1 1c       	adc	r11, r1
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    5a14:	cf 53       	subi	r28, 0x3F	; 63
    5a16:	df 4f       	sbci	r29, 0xFF	; 255
    5a18:	08 83       	st	Y, r16
    5a1a:	c1 5c       	subi	r28, 0xC1	; 193
    5a1c:	d0 40       	sbci	r29, 0x00	; 0
    5a1e:	ce 53       	subi	r28, 0x3E	; 62
    5a20:	df 4f       	sbci	r29, 0xFF	; 255
    5a22:	18 83       	st	Y, r17
    5a24:	c2 5c       	subi	r28, 0xC2	; 194
    5a26:	d0 40       	sbci	r29, 0x00	; 0
    5a28:	59 c0       	rjmp	.+178    	; 0x5adc <omega_estimation+0x3fc>
    5a2a:	f1 01       	movw	r30, r2
    5a2c:	61 91       	ld	r22, Z+
    5a2e:	71 91       	ld	r23, Z+
    5a30:	81 91       	ld	r24, Z+
    5a32:	91 91       	ld	r25, Z+
    5a34:	1f 01       	movw	r2, r30
    5a36:	d6 01       	movw	r26, r12
    5a38:	2d 91       	ld	r18, X+
    5a3a:	3d 91       	ld	r19, X+
    5a3c:	4d 91       	ld	r20, X+
    5a3e:	5d 91       	ld	r21, X+
    5a40:	6d 01       	movw	r12, r26
    5a42:	f2 01       	movw	r30, r4
    5a44:	61 90       	ld	r6, Z+
    5a46:	71 90       	ld	r7, Z+
    5a48:	81 90       	ld	r8, Z+
    5a4a:	91 90       	ld	r9, Z+
    5a4c:	2f 01       	movw	r4, r30
    5a4e:	0c d6       	rcall	.+3096   	; 0x6668 <__subsf3>
    5a50:	cf 54       	subi	r28, 0x4F	; 79
    5a52:	df 4f       	sbci	r29, 0xFF	; 255
    5a54:	68 83       	st	Y, r22
    5a56:	79 83       	std	Y+1, r23	; 0x01
    5a58:	8a 83       	std	Y+2, r24	; 0x02
    5a5a:	9b 83       	std	Y+3, r25	; 0x03
    5a5c:	c1 5b       	subi	r28, 0xB1	; 177
    5a5e:	d0 40       	sbci	r29, 0x00	; 0
    5a60:	a4 01       	movw	r20, r8
    5a62:	93 01       	movw	r18, r6
    5a64:	cb 54       	subi	r28, 0x4B	; 75
    5a66:	df 4f       	sbci	r29, 0xFF	; 255
    5a68:	68 81       	ld	r22, Y
    5a6a:	79 81       	ldd	r23, Y+1	; 0x01
    5a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a70:	c5 5b       	subi	r28, 0xB5	; 181
    5a72:	d0 40       	sbci	r29, 0x00	; 0
    5a74:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5a78:	c7 54       	subi	r28, 0x47	; 71
    5a7a:	df 4f       	sbci	r29, 0xFF	; 255
    5a7c:	28 81       	ld	r18, Y
    5a7e:	39 81       	ldd	r19, Y+1	; 0x01
    5a80:	4a 81       	ldd	r20, Y+2	; 0x02
    5a82:	5b 81       	ldd	r21, Y+3	; 0x03
    5a84:	c9 5b       	subi	r28, 0xB9	; 185
    5a86:	d0 40       	sbci	r29, 0x00	; 0
    5a88:	d4 d6       	rcall	.+3496   	; 0x6832 <__divsf3>
    5a8a:	9b 01       	movw	r18, r22
    5a8c:	ac 01       	movw	r20, r24
    5a8e:	cf 54       	subi	r28, 0x4F	; 79
    5a90:	df 4f       	sbci	r29, 0xFF	; 255
    5a92:	68 81       	ld	r22, Y
    5a94:	79 81       	ldd	r23, Y+1	; 0x01
    5a96:	8a 81       	ldd	r24, Y+2	; 0x02
    5a98:	9b 81       	ldd	r25, Y+3	; 0x03
    5a9a:	c1 5b       	subi	r28, 0xB1	; 177
    5a9c:	d0 40       	sbci	r29, 0x00	; 0
    5a9e:	e5 d5       	rcall	.+3018   	; 0x666a <__addsf3>
    5aa0:	d8 01       	movw	r26, r16
    5aa2:	6d 93       	st	X+, r22
    5aa4:	7d 93       	st	X+, r23
    5aa6:	8d 93       	st	X+, r24
    5aa8:	9c 93       	st	X, r25
    5aaa:	13 97       	sbiw	r26, 0x03	; 3
    5aac:	04 5f       	subi	r16, 0xF4	; 244
    5aae:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    5ab0:	4a 14       	cp	r4, r10
    5ab2:	5b 04       	cpc	r5, r11
    5ab4:	09 f0       	breq	.+2      	; 0x5ab8 <omega_estimation+0x3d8>
    5ab6:	b9 cf       	rjmp	.-142    	; 0x5a2a <omega_estimation+0x34a>
    5ab8:	47 01       	movw	r8, r14
    5aba:	c1 54       	subi	r28, 0x41	; 65
    5abc:	df 4f       	sbci	r29, 0xFF	; 255
    5abe:	68 80       	ld	r6, Y
    5ac0:	79 80       	ldd	r7, Y+1	; 0x01
    5ac2:	cf 5b       	subi	r28, 0xBF	; 191
    5ac4:	d0 40       	sbci	r29, 0x00	; 0
    5ac6:	bc e0       	ldi	r27, 0x0C	; 12
    5ac8:	8b 0e       	add	r8, r27
    5aca:	91 1c       	adc	r9, r1
    5acc:	e4 e0       	ldi	r30, 0x04	; 4
    5ace:	6e 0e       	add	r6, r30
    5ad0:	71 1c       	adc	r7, r1
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    5ad2:	f4 e2       	ldi	r31, 0x24	; 36
    5ad4:	8f 16       	cp	r8, r31
    5ad6:	91 04       	cpc	r9, r1
    5ad8:	09 f4       	brne	.+2      	; 0x5adc <omega_estimation+0x3fc>
    5ada:	40 c0       	rjmp	.+128    	; 0x5b5c <omega_estimation+0x47c>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    5adc:	c3 54       	subi	r28, 0x43	; 67
    5ade:	df 4f       	sbci	r29, 0xFF	; 255
    5ae0:	a8 81       	ld	r26, Y
    5ae2:	b9 81       	ldd	r27, Y+1	; 0x01
    5ae4:	cd 5b       	subi	r28, 0xBD	; 189
    5ae6:	d0 40       	sbci	r29, 0x00	; 0
    5ae8:	6d 91       	ld	r22, X+
    5aea:	7d 91       	ld	r23, X+
    5aec:	8d 91       	ld	r24, X+
    5aee:	9d 91       	ld	r25, X+
    5af0:	c3 54       	subi	r28, 0x43	; 67
    5af2:	df 4f       	sbci	r29, 0xFF	; 255
    5af4:	b9 83       	std	Y+1, r27	; 0x01
    5af6:	a8 83       	st	Y, r26
    5af8:	cd 5b       	subi	r28, 0xBD	; 189
    5afa:	d0 40       	sbci	r29, 0x00	; 0
    5afc:	9b 01       	movw	r18, r22
    5afe:	ac 01       	movw	r20, r24
    5b00:	b4 d5       	rcall	.+2920   	; 0x666a <__addsf3>
    5b02:	cb 54       	subi	r28, 0x4B	; 75
    5b04:	df 4f       	sbci	r29, 0xFF	; 255
    5b06:	68 83       	st	Y, r22
    5b08:	79 83       	std	Y+1, r23	; 0x01
    5b0a:	8a 83       	std	Y+2, r24	; 0x02
    5b0c:	9b 83       	std	Y+3, r25	; 0x03
    5b0e:	c5 5b       	subi	r28, 0xB5	; 181
    5b10:	d0 40       	sbci	r29, 0x00	; 0
    5b12:	0f 2e       	mov	r0, r31
    5b14:	fd e8       	ldi	r31, 0x8D	; 141
    5b16:	2f 2e       	mov	r2, r31
    5b18:	31 2c       	mov	r3, r1
    5b1a:	f0 2d       	mov	r31, r0
    5b1c:	2c 0e       	add	r2, r28
    5b1e:	3d 1e       	adc	r3, r29
    5b20:	28 0c       	add	r2, r8
    5b22:	39 1c       	adc	r3, r9
    5b24:	0f 2e       	mov	r0, r31
    5b26:	f9 e6       	ldi	r31, 0x69	; 105
    5b28:	cf 2e       	mov	r12, r31
    5b2a:	d1 2c       	mov	r13, r1
    5b2c:	f0 2d       	mov	r31, r0
    5b2e:	cc 0e       	add	r12, r28
    5b30:	dd 1e       	adc	r13, r29
    5b32:	c8 0c       	add	r12, r8
    5b34:	d9 1c       	adc	r13, r9
    5b36:	83 01       	movw	r16, r6
    5b38:	cf 53       	subi	r28, 0x3F	; 63
    5b3a:	df 4f       	sbci	r29, 0xFF	; 255
    5b3c:	48 80       	ld	r4, Y
    5b3e:	c1 5c       	subi	r28, 0xC1	; 193
    5b40:	d0 40       	sbci	r29, 0x00	; 0
    5b42:	ce 53       	subi	r28, 0x3E	; 62
    5b44:	df 4f       	sbci	r29, 0xFF	; 255
    5b46:	58 80       	ld	r5, Y
    5b48:	c2 5c       	subi	r28, 0xC2	; 194
    5b4a:	d0 40       	sbci	r29, 0x00	; 0
    5b4c:	74 01       	movw	r14, r8
    5b4e:	c1 54       	subi	r28, 0x41	; 65
    5b50:	df 4f       	sbci	r29, 0xFF	; 255
    5b52:	79 82       	std	Y+1, r7	; 0x01
    5b54:	68 82       	st	Y, r6
    5b56:	cf 5b       	subi	r28, 0xBF	; 191
    5b58:	d0 40       	sbci	r29, 0x00	; 0
    5b5a:	67 cf       	rjmp	.-306    	; 0x5a2a <omega_estimation+0x34a>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    5b5c:	ae 01       	movw	r20, r28
    5b5e:	47 5c       	subi	r20, 0xC7	; 199
    5b60:	5f 4f       	sbci	r21, 0xFF	; 255
    5b62:	be 01       	movw	r22, r28
    5b64:	6b 5b       	subi	r22, 0xBB	; 187
    5b66:	7f 4f       	sbci	r23, 0xFF	; 255
    5b68:	ce 01       	movw	r24, r28
    5b6a:	8d 96       	adiw	r24, 0x2d	; 45
    5b6c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <vector_into_matrix>
    5b70:	8e 01       	movw	r16, r28
    5b72:	07 5c       	subi	r16, 0xC7	; 199
    5b74:	1f 4f       	sbci	r17, 0xFF	; 255
    5b76:	0f 2e       	mov	r0, r31
    5b78:	fe e4       	ldi	r31, 0x4E	; 78
    5b7a:	cf 2e       	mov	r12, r31
    5b7c:	f4 e0       	ldi	r31, 0x04	; 4
    5b7e:	df 2e       	mov	r13, r31
    5b80:	f0 2d       	mov	r31, r0
    5b82:	cb 53       	subi	r28, 0x3B	; 59
    5b84:	df 4f       	sbci	r29, 0xFF	; 255
    5b86:	28 80       	ld	r2, Y
    5b88:	c5 5c       	subi	r28, 0xC5	; 197
    5b8a:	d0 40       	sbci	r29, 0x00	; 0
    5b8c:	ca 53       	subi	r28, 0x3A	; 58
    5b8e:	df 4f       	sbci	r29, 0xFF	; 255
    5b90:	38 80       	ld	r3, Y
    5b92:	c6 5c       	subi	r28, 0xC6	; 198
    5b94:	d0 40       	sbci	r29, 0x00	; 0
    5b96:	78 01       	movw	r14, r16
    5b98:	bc e0       	ldi	r27, 0x0C	; 12
    5b9a:	eb 0e       	add	r14, r27
    5b9c:	f1 1c       	adc	r15, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    5b9e:	f8 01       	movw	r30, r16
    5ba0:	61 91       	ld	r22, Z+
    5ba2:	71 91       	ld	r23, Z+
    5ba4:	81 91       	ld	r24, Z+
    5ba6:	91 91       	ld	r25, Z+
    5ba8:	8f 01       	movw	r16, r30
    5baa:	d6 01       	movw	r26, r12
    5bac:	4d 90       	ld	r4, X+
    5bae:	5d 90       	ld	r5, X+
    5bb0:	6d 90       	ld	r6, X+
    5bb2:	7d 90       	ld	r7, X+
    5bb4:	6d 01       	movw	r12, r26
    5bb6:	28 e0       	ldi	r18, 0x08	; 8
    5bb8:	31 e2       	ldi	r19, 0x21	; 33
    5bba:	44 e0       	ldi	r20, 0x04	; 4
    5bbc:	5d e3       	ldi	r21, 0x3D	; 61
    5bbe:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5bc2:	4b 01       	movw	r8, r22
    5bc4:	5c 01       	movw	r10, r24
    5bc6:	20 ef       	ldi	r18, 0xF0	; 240
    5bc8:	3d eb       	ldi	r19, 0xBD	; 189
    5bca:	47 e7       	ldi	r20, 0x77	; 119
    5bcc:	5f e3       	ldi	r21, 0x3F	; 63
    5bce:	c3 01       	movw	r24, r6
    5bd0:	b2 01       	movw	r22, r4
    5bd2:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <__mulsf3>
    5bd6:	9b 01       	movw	r18, r22
    5bd8:	ac 01       	movw	r20, r24
    5bda:	c5 01       	movw	r24, r10
    5bdc:	b4 01       	movw	r22, r8
    5bde:	45 d5       	rcall	.+2698   	; 0x666a <__addsf3>
    5be0:	f1 01       	movw	r30, r2
    5be2:	61 93       	st	Z+, r22
    5be4:	71 93       	st	Z+, r23
    5be6:	81 93       	st	Z+, r24
    5be8:	91 93       	st	Z+, r25
    5bea:	1f 01       	movw	r2, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    5bec:	0e 15       	cp	r16, r14
    5bee:	1f 05       	cpc	r17, r15
    5bf0:	b1 f6       	brne	.-84     	; 0x5b9e <omega_estimation+0x4be>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    5bf2:	6a e5       	ldi	r22, 0x5A	; 90
    5bf4:	74 e0       	ldi	r23, 0x04	; 4
    5bf6:	cd 53       	subi	r28, 0x3D	; 61
    5bf8:	df 4f       	sbci	r29, 0xFF	; 255
    5bfa:	88 81       	ld	r24, Y
    5bfc:	c3 5c       	subi	r28, 0xC3	; 195
    5bfe:	d0 40       	sbci	r29, 0x00	; 0
    5c00:	cc 53       	subi	r28, 0x3C	; 60
    5c02:	df 4f       	sbci	r29, 0xFF	; 255
    5c04:	98 81       	ld	r25, Y
    5c06:	c4 5c       	subi	r28, 0xC4	; 196
    5c08:	d0 40       	sbci	r29, 0x00	; 0
    5c0a:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    5c0e:	6e e4       	ldi	r22, 0x4E	; 78
    5c10:	74 e0       	ldi	r23, 0x04	; 4
    5c12:	cb 53       	subi	r28, 0x3B	; 59
    5c14:	df 4f       	sbci	r29, 0xFF	; 255
    5c16:	88 81       	ld	r24, Y
    5c18:	c5 5c       	subi	r28, 0xC5	; 197
    5c1a:	d0 40       	sbci	r29, 0x00	; 0
    5c1c:	ca 53       	subi	r28, 0x3A	; 58
    5c1e:	df 4f       	sbci	r29, 0xFF	; 255
    5c20:	98 81       	ld	r25, Y
    5c22:	c6 5c       	subi	r28, 0xC6	; 198
    5c24:	d0 40       	sbci	r29, 0x00	; 0
    5c26:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    5c2a:	ca 53       	subi	r28, 0x3A	; 58
    5c2c:	df 4f       	sbci	r29, 0xFF	; 255
    5c2e:	0f b6       	in	r0, 0x3f	; 63
    5c30:	f8 94       	cli
    5c32:	de bf       	out	0x3e, r29	; 62
    5c34:	0f be       	out	0x3f, r0	; 63
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	df 91       	pop	r29
    5c3a:	cf 91       	pop	r28
    5c3c:	1f 91       	pop	r17
    5c3e:	0f 91       	pop	r16
    5c40:	ff 90       	pop	r15
    5c42:	ef 90       	pop	r14
    5c44:	df 90       	pop	r13
    5c46:	cf 90       	pop	r12
    5c48:	bf 90       	pop	r11
    5c4a:	af 90       	pop	r10
    5c4c:	9f 90       	pop	r9
    5c4e:	8f 90       	pop	r8
    5c50:	7f 90       	pop	r7
    5c52:	6f 90       	pop	r6
    5c54:	5f 90       	pop	r5
    5c56:	4f 90       	pop	r4
    5c58:	3f 90       	pop	r3
    5c5a:	2f 90       	pop	r2
    5c5c:	08 95       	ret

00005c5e <init_SPI>:
}

void init_SPI(void)
{
	///Set MOSI and SCK output, all others input
	DDRB = 0;
    5c5e:	17 ba       	out	0x17, r1	; 23
	DDRB = _BV(SPICLK) | _BV(SPIDO);
    5c60:	86 e0       	ldi	r24, 0x06	; 6
    5c62:	87 bb       	out	0x17, r24	; 23
	
	
	DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5c64:	87 b3       	in	r24, 0x17	; 23
    5c66:	81 63       	ori	r24, 0x31	; 49
    5c68:	87 bb       	out	0x17, r24	; 23
	///Switch off all devices
	PORT_CS |= _BV(CC1020) | _BV(ADC_S);
    5c6a:	88 b3       	in	r24, 0x18	; 24
    5c6c:	80 63       	ori	r24, 0x30	; 48
    5c6e:	88 bb       	out	0x18, r24	; 24
	
	PORTB&= ~(1<<PB0);
    5c70:	c0 98       	cbi	0x18, 0	; 24
	///Enable SPI, Master, set clock rate
	///@todo Check frequency
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);
    5c72:	8f e5       	ldi	r24, 0x5F	; 95
    5c74:	8d b9       	out	0x0d, r24	; 13
    5c76:	08 95       	ret

00005c78 <poll_SS1>:
}

// for oils purpose
	
void poll_SS1(void)
{
    5c78:	cf 92       	push	r12
    5c7a:	df 92       	push	r13
    5c7c:	ef 92       	push	r14
    5c7e:	ff 92       	push	r15
    5c80:	0f 93       	push	r16
    5c82:	1f 93       	push	r17
    5c84:	cf 93       	push	r28
    5c86:	df 93       	push	r29
    5c88:	cd b7       	in	r28, 0x3d	; 61
    5c8a:	de b7       	in	r29, 0x3e	; 62
    5c8c:	2c 97       	sbiw	r28, 0x0c	; 12
    5c8e:	0f b6       	in	r0, 0x3f	; 63
    5c90:	f8 94       	cli
    5c92:	de bf       	out	0x3e, r29	; 62
    5c94:	0f be       	out	0x3f, r0	; 63
    5c96:	cd bf       	out	0x3d, r28	; 61
    5c98:	6e 01       	movw	r12, r28
    5c9a:	82 e0       	ldi	r24, 0x02	; 2
    5c9c:	c8 0e       	add	r12, r24
    5c9e:	d1 1c       	adc	r13, r1
    5ca0:	e1 2c       	mov	r14, r1
    5ca2:	f1 2c       	mov	r15, r1
  //transmit_UART0(c);
  uint8_t sun_sen_anant[12];
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    5ca4:	9c d0       	rcall	.+312    	; 0x5dde <receive_UART0>
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	87 01       	movw	r16, r14
    5caa:	00 0f       	add	r16, r16
    5cac:	11 1f       	adc	r17, r17
    5cae:	03 52       	subi	r16, 0x23	; 35
    5cb0:	1b 4f       	sbci	r17, 0xFB	; 251
    5cb2:	f8 01       	movw	r30, r16
    5cb4:	91 83       	std	Z+1, r25	; 0x01
    5cb6:	80 83       	st	Z, r24
	sun_sen_anant[2*channel] = (uint8_t)(Current_state.ss.reading[channel]);
    5cb8:	80 81       	ld	r24, Z
    5cba:	91 81       	ldd	r25, Z+1	; 0x01
    5cbc:	f6 01       	movw	r30, r12
    5cbe:	31 97       	sbiw	r30, 0x01	; 1
    5cc0:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	80 81       	ld	r24, Z
    5cc6:	91 81       	ldd	r25, Z+1	; 0x01
    5cc8:	98 2f       	mov	r25, r24
    5cca:	88 27       	eor	r24, r24
    5ccc:	91 83       	std	Z+1, r25	; 0x01
    5cce:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] &= 0xFF00;
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	88 27       	eor	r24, r24
    5cd6:	91 83       	std	Z+1, r25	; 0x01
    5cd8:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    5cda:	81 d0       	rcall	.+258    	; 0x5dde <receive_UART0>
    5cdc:	f8 01       	movw	r30, r16
    5cde:	20 81       	ld	r18, Z
    5ce0:	31 81       	ldd	r19, Z+1	; 0x01
    5ce2:	28 2b       	or	r18, r24
    5ce4:	31 83       	std	Z+1, r19	; 0x01
    5ce6:	20 83       	st	Z, r18
	sun_sen_anant[2*channel + 1] = (uint8_t)(Current_state.ss.reading[channel]);
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	f6 01       	movw	r30, r12
    5cee:	80 83       	st	Z, r24
    5cf0:	ff ef       	ldi	r31, 0xFF	; 255
    5cf2:	ef 1a       	sub	r14, r31
    5cf4:	ff 0a       	sbc	r15, r31
    5cf6:	82 e0       	ldi	r24, 0x02	; 2
    5cf8:	c8 0e       	add	r12, r24
    5cfa:	d1 1c       	adc	r13, r1
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
  uint8_t sun_sen_anant[12];
  while(channel <= 5)
    5cfc:	e6 e0       	ldi	r30, 0x06	; 6
    5cfe:	ee 16       	cp	r14, r30
    5d00:	f1 04       	cpc	r15, r1
    5d02:	81 f6       	brne	.-96     	; 0x5ca4 <poll_SS1+0x2c>
    5d04:	00 e0       	ldi	r16, 0x00	; 0
    5d06:	10 e0       	ldi	r17, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
    5d08:	f8 01       	movw	r30, r16
    5d0a:	ee 0f       	add	r30, r30
    5d0c:	ff 1f       	adc	r31, r31
    5d0e:	e3 52       	subi	r30, 0x23	; 35
    5d10:	fb 4f       	sbci	r31, 0xFB	; 251
    5d12:	60 81       	ld	r22, Z
    5d14:	71 81       	ldd	r23, Z+1	; 0x01
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	24 d6       	rcall	.+3144   	; 0x6964 <__floatunsisf>
    5d1c:	23 e3       	ldi	r18, 0x33	; 51
    5d1e:	33 e3       	ldi	r19, 0x33	; 51
    5d20:	43 e5       	ldi	r20, 0x53	; 83
    5d22:	50 e4       	ldi	r21, 0x40	; 64
    5d24:	a4 d7       	rcall	.+3912   	; 0x6c6e <__mulsf3>
    5d26:	20 e0       	ldi	r18, 0x00	; 0
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	40 e8       	ldi	r20, 0x80	; 128
    5d2c:	5a e3       	ldi	r21, 0x3A	; 58
    5d2e:	9f d7       	rcall	.+3902   	; 0x6c6e <__mulsf3>
    5d30:	f8 01       	movw	r30, r16
    5d32:	ee 0f       	add	r30, r30
    5d34:	ff 1f       	adc	r31, r31
    5d36:	ee 0f       	add	r30, r30
    5d38:	ff 1f       	adc	r31, r31
    5d3a:	e9 54       	subi	r30, 0x49	; 73
    5d3c:	fb 4f       	sbci	r31, 0xFB	; 251
    5d3e:	62 ab       	std	Z+50, r22	; 0x32
    5d40:	73 ab       	std	Z+51, r23	; 0x33
    5d42:	84 ab       	std	Z+52, r24	; 0x34
    5d44:	95 ab       	std	Z+53, r25	; 0x35
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
	sun_sen_anant[2*channel + 1] = (uint8_t)(Current_state.ss.reading[channel]);
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    5d46:	0f 5f       	subi	r16, 0xFF	; 255
    5d48:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4a:	06 30       	cpi	r16, 0x06	; 6
    5d4c:	11 05       	cpc	r17, r1
    5d4e:	e1 f6       	brne	.-72     	; 0x5d08 <poll_SS1+0x90>
    5d50:	8e 01       	movw	r16, r28
    5d52:	0f 5f       	subi	r16, 0xFF	; 255
    5d54:	1f 4f       	sbci	r17, 0xFF	; 255
    5d56:	7e 01       	movw	r14, r28
    5d58:	fd e0       	ldi	r31, 0x0D	; 13
    5d5a:	ef 0e       	add	r14, r31
    5d5c:	f1 1c       	adc	r15, r1
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
  }
  
  for (int iter = 0; iter<12; iter++){
	  transmit_UART0(sun_sen_anant[iter]);
    5d5e:	f8 01       	movw	r30, r16
    5d60:	81 91       	ld	r24, Z+
    5d62:	8f 01       	movw	r16, r30
    5d64:	38 d0       	rcall	.+112    	; 0x5dd6 <transmit_UART0>
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
  }
  
  for (int iter = 0; iter<12; iter++){
    5d66:	0e 15       	cp	r16, r14
    5d68:	1f 05       	cpc	r17, r15
    5d6a:	c9 f7       	brne	.-14     	; 0x5d5e <poll_SS1+0xe6>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
    5d6c:	2c 96       	adiw	r28, 0x0c	; 12
    5d6e:	0f b6       	in	r0, 0x3f	; 63
    5d70:	f8 94       	cli
    5d72:	de bf       	out	0x3e, r29	; 62
    5d74:	0f be       	out	0x3f, r0	; 63
    5d76:	cd bf       	out	0x3d, r28	; 61
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ff 90       	pop	r15
    5d82:	ef 90       	pop	r14
    5d84:	df 90       	pop	r13
    5d86:	cf 90       	pop	r12
    5d88:	08 95       	ret

00005d8a <timer_reset_two_sec>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    5d8a:	86 b7       	in	r24, 0x36	; 54
    5d8c:	80 61       	ori	r24, 0x10	; 16
    5d8e:	86 bf       	out	0x36, r24	; 54
    5d90:	1e bc       	out	0x2e, r1	; 46
    5d92:	1d bc       	out	0x2d, r1	; 45
    5d94:	1c bc       	out	0x2c, r1	; 44
    5d96:	88 e0       	ldi	r24, 0x08	; 8
    5d98:	9d e3       	ldi	r25, 0x3D	; 61
    5d9a:	9b bd       	out	0x2b, r25	; 43
    5d9c:	8a bd       	out	0x2a, r24	; 42
    5d9e:	1f bc       	out	0x2f, r1	; 47
    5da0:	85 e0       	ldi	r24, 0x05	; 5
    5da2:	8e bd       	out	0x2e, r24	; 46
    5da4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5da8:	08 95       	ret

00005daa <timer_wait_reset>:
  wdt_enable(time);
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5daa:	06 b6       	in	r0, 0x36	; 54
    5dac:	04 fe       	sbrs	r0, 4
    5dae:	fd cf       	rjmp	.-6      	; 0x5daa <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    5db0:	ec cf       	rjmp	.-40     	; 0x5d8a <timer_reset_two_sec>
    5db2:	08 95       	ret

00005db4 <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    5db4:	1b b8       	out	0x0b, r1	; 11
    5db6:	1a b8       	out	0x0a, r1	; 10
    5db8:	e5 e9       	ldi	r30, 0x95	; 149
    5dba:	f0 e0       	ldi	r31, 0x00	; 0
    5dbc:	10 82       	st	Z, r1
    5dbe:	59 9a       	sbi	0x0b, 1	; 11
    5dc0:	8a b1       	in	r24, 0x0a	; 10
    5dc2:	88 61       	ori	r24, 0x18	; 24
    5dc4:	8a b9       	out	0x0a, r24	; 10
    5dc6:	80 81       	ld	r24, Z
    5dc8:	8e 60       	ori	r24, 0x0E	; 14
    5dca:	80 83       	st	Z, r24
    5dcc:	87 e6       	ldi	r24, 0x67	; 103
    5dce:	89 b9       	out	0x09, r24	; 9
    5dd0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5dd4:	08 95       	ret

00005dd6 <transmit_UART0>:
    5dd6:	5d 9b       	sbis	0x0b, 5	; 11
    5dd8:	fe cf       	rjmp	.-4      	; 0x5dd6 <transmit_UART0>
    5dda:	8c b9       	out	0x0c, r24	; 12
    5ddc:	08 95       	ret

00005dde <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    5dde:	5f 9b       	sbis	0x0b, 7	; 11
    5de0:	fe cf       	rjmp	.-4      	; 0x5dde <receive_UART0>
  return UDR0;
    5de2:	8c b1       	in	r24, 0x0c	; 12
}
    5de4:	08 95       	ret

00005de6 <timer1_init>:
void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
    5de6:	8e b5       	in	r24, 0x2e	; 46
    5de8:	81 60       	ori	r24, 0x01	; 1
    5dea:	8e bd       	out	0x2e, r24	; 46
    5dec:	1d bc       	out	0x2d, r1	; 45
    5dee:	1c bc       	out	0x2c, r1	; 44
    5df0:	87 b7       	in	r24, 0x37	; 55
    5df2:	84 60       	ori	r24, 0x04	; 4
    5df4:	87 bf       	out	0x37, r24	; 55
    5df6:	78 94       	sei
    5df8:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <tot_overflow>
    5dfc:	08 95       	ret

00005dfe <__vector_14>:
    5dfe:	1f 92       	push	r1
    5e00:	0f 92       	push	r0
    5e02:	0f b6       	in	r0, 0x3f	; 63
    5e04:	0f 92       	push	r0
    5e06:	11 24       	eor	r1, r1
    5e08:	8f 93       	push	r24
    5e0a:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
    5e0e:	8f 5f       	subi	r24, 0xFF	; 255
    5e10:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <tot_overflow>
    5e14:	8f 91       	pop	r24
    5e16:	0f 90       	pop	r0
    5e18:	0f be       	out	0x3f, r0	; 63
    5e1a:	0f 90       	pop	r0
    5e1c:	1f 90       	pop	r1
    5e1e:	18 95       	reti

00005e20 <TWI_init_master>:
    5e20:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    5e24:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    5e28:	8c e0       	ldi	r24, 0x0C	; 12
    5e2a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    5e2e:	08 95       	ret

00005e30 <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    5e30:	e7 e2       	ldi	r30, 0x27	; 39
    5e32:	f5 e0       	ldi	r31, 0x05	; 5
    5e34:	2e e2       	ldi	r18, 0x2E	; 46
    5e36:	35 e0       	ldi	r19, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    5e38:	9f ef       	ldi	r25, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    5e3a:	81 91       	ld	r24, Z+
    5e3c:	8f b9       	out	0x0f, r24	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5e3e:	77 9b       	sbis	0x0e, 7	; 14
    5e40:	fe cf       	rjmp	.-4      	; 0x5e3e <SendHM+0xe>
		 PORTA = 0xFF;
    5e42:	9b bb       	out	0x1b, r25	; 27
    5e44:	af ec       	ldi	r26, 0xCF	; 207
    5e46:	b7 e0       	ldi	r27, 0x07	; 7
    5e48:	11 97       	sbiw	r26, 0x01	; 1
    5e4a:	f1 f7       	brne	.-4      	; 0x5e48 <SendHM+0x18>
    5e4c:	00 c0       	rjmp	.+0      	; 0x5e4e <SendHM+0x1e>
    5e4e:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    5e50:	e2 17       	cp	r30, r18
    5e52:	f3 07       	cpc	r31, r19
    5e54:	91 f7       	brne	.-28     	; 0x5e3a <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    5e56:	08 95       	ret

00005e58 <main>:


int main(void){
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
    5e5c:	cd b7       	in	r28, 0x3d	; 61
    5e5e:	de b7       	in	r29, 0x3e	; 62
    5e60:	68 97       	sbiw	r28, 0x18	; 24
    5e62:	0f b6       	in	r0, 0x3f	; 63
    5e64:	f8 94       	cli
    5e66:	de bf       	out	0x3e, r29	; 62
    5e68:	0f be       	out	0x3f, r0	; 63
    5e6a:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    5e6c:	f8 de       	rcall	.-528    	; 0x5c5e <init_SPI>
  init_UART0();
    5e6e:	a2 df       	rcall	.-188    	; 0x5db4 <init_UART0>
  init_UART_MM();
    5e70:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <init_UART_MM>
  configure_torquer();
    5e74:	0e 94 1a 23 	call	0x4634	; 0x4634 <configure_torquer>
  DDRA=0xF0;
    5e78:	80 ef       	ldi	r24, 0xF0	; 240
    5e7a:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5e7c:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <Current_state+0x2e>
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    5e80:	87 b3       	in	r24, 0x17	; 23
    5e82:	81 62       	ori	r24, 0x21	; 33
    5e84:	87 bb       	out	0x17, r24	; 23
    5e86:	2f ef       	ldi	r18, 0xFF	; 255
    5e88:	83 ed       	ldi	r24, 0xD3	; 211
    5e8a:	90 e3       	ldi	r25, 0x30	; 48
    5e8c:	21 50       	subi	r18, 0x01	; 1
    5e8e:	80 40       	sbci	r24, 0x00	; 0
    5e90:	90 40       	sbci	r25, 0x00	; 0
    5e92:	e1 f7       	brne	.-8      	; 0x5e8c <main+0x34>
    5e94:	00 c0       	rjmp	.+0      	; 0x5e96 <main+0x3e>
    5e96:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5e98:	80 ed       	ldi	r24, 0xD0	; 208
    5e9a:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5e9c:	c1 df       	rcall	.-126    	; 0x5e20 <TWI_init_master>
    5e9e:	af ef       	ldi	r26, 0xFF	; 255
    5ea0:	b1 e1       	ldi	r27, 0x11	; 17
    5ea2:	ea e7       	ldi	r30, 0x7A	; 122
    5ea4:	a1 50       	subi	r26, 0x01	; 1
    5ea6:	b0 40       	sbci	r27, 0x00	; 0
    5ea8:	e0 40       	sbci	r30, 0x00	; 0
    5eaa:	e1 f7       	brne	.-8      	; 0x5ea4 <main+0x4c>
    5eac:	00 c0       	rjmp	.+0      	; 0x5eae <main+0x56>
    5eae:	00 00       	nop
  //transmit_string_UART0("Code");
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    5eb0:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    5eb2:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <Time>
    5eb6:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <Time+0x1>
    5eba:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Time+0x2>
    5ebe:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <Time+0x3>
    5ec2:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <Time+0x4>
    5ec6:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <Time+0x5>
    5eca:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <Time+0x6>
    5ece:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <Time+0x7>
  //transmit_UART0(42);
      /**
      * * * * Task 1: Control codes
       * @ref control
       */
	receive_UART0();	 
    5ed2:	85 df       	rcall	.-246    	; 0x5dde <receive_UART0>
  PORTB |= (1<<PB5); //Set slave select of ADC =1
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5ed4:	0f 2e       	mov	r0, r31
    5ed6:	fb ea       	ldi	r31, 0xAB	; 171
    5ed8:	2f 2e       	mov	r2, r31
    5eda:	f4 e0       	ldi	r31, 0x04	; 4
    5edc:	3f 2e       	mov	r3, r31
    5ede:	f0 2d       	mov	r31, r0
G4 = (uint8_t)((Current_state.gps.lon)>>8);
G5 = Current_state.gps.seconds;
G6 = Current_state.gps.minutes;
G7 = Current_state.gps.hours;
G8 = Current_state.gps.date;
G9 = (uint8_t)(q_o[0]*127);
    5ee0:	04 e7       	ldi	r16, 0x74	; 116
    5ee2:	14 e0       	ldi	r17, 0x04	; 4
	receive_UART0();	 
	  
  while (1)
  {
	  /////////////////////
	  timer1_init();
    5ee4:	80 df       	rcall	.-256    	; 0x5de6 <timer1_init>
	  uint16_t counter_value=TCNT1;
    5ee6:	8c b5       	in	r24, 0x2c	; 44
    5ee8:	9d b5       	in	r25, 0x2d	; 45
	  uint8_t overflow=tot_overflow;
    5eea:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
	  ///////////////////
	  timer_reset_two_sec();
    5eee:	4d df       	rcall	.-358    	; 0x5d8a <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5ef0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5ef4:	84 30       	cpi	r24, 0x04	; 4
    5ef6:	31 f4       	brne	.+12     	; 0x5f04 <main+0xac>
    5ef8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5efc:	8c 64       	ori	r24, 0x4C	; 76
    5efe:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5f02:	07 c0       	rjmp	.+14     	; 0x5f12 <main+0xba>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5f04:	81 30       	cpi	r24, 0x01	; 1
    5f06:	29 f4       	brne	.+10     	; 0x5f12 <main+0xba>
    5f08:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5f0c:	8c 6c       	ori	r24, 0xCC	; 204
    5f0e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5f12:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5f14:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5f16:	d1 01       	movw	r26, r2
    5f18:	9f 96       	adiw	r26, 0x2f	; 47
    5f1a:	8c 91       	ld	r24, X
    5f1c:	9f 97       	sbiw	r26, 0x2f	; 47
    5f1e:	82 30       	cpi	r24, 0x02	; 2
    5f20:	51 f4       	brne	.+20     	; 0x5f36 <main+0xde>
    5f22:	9e 96       	adiw	r26, 0x2e	; 46
    5f24:	8c 91       	ld	r24, X
    5f26:	81 11       	cpse	r24, r1
    5f28:	06 c0       	rjmp	.+12     	; 0x5f36 <main+0xde>
	{write_data |= (1<<5);}
    5f2a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5f2e:	80 62       	ori	r24, 0x20	; 32
    5f30:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5f34:	05 c0       	rjmp	.+10     	; 0x5f40 <main+0xe8>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5f36:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5f3a:	8f 7d       	andi	r24, 0xDF	; 223
    5f3c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5f40:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5f44:	81 30       	cpi	r24, 0x01	; 1
    5f46:	49 f4       	brne	.+18     	; 0x5f5a <main+0x102>
    5f48:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <light_main>
    5f4c:	81 11       	cpse	r24, r1
    5f4e:	05 c0       	rjmp	.+10     	; 0x5f5a <main+0x102>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5f50:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5f54:	8b 79       	andi	r24, 0x9B	; 155
    5f56:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5f5a:	ef e1       	ldi	r30, 0x1F	; 31
    5f5c:	fe e4       	ldi	r31, 0x4E	; 78
    5f5e:	31 97       	sbiw	r30, 0x01	; 1
    5f60:	f1 f7       	brne	.-4      	; 0x5f5e <main+0x106>
    5f62:	00 c0       	rjmp	.+0      	; 0x5f64 <main+0x10c>
    5f64:	00 00       	nop
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5f66:	d1 01       	movw	r26, r2
    5f68:	59 96       	adiw	r26, 0x19	; 25
    5f6a:	8d 91       	ld	r24, X+
    5f6c:	9d 91       	ld	r25, X+
    5f6e:	0d 90       	ld	r0, X+
    5f70:	bc 91       	ld	r27, X
    5f72:	a0 2d       	mov	r26, r0
    5f74:	89 83       	std	Y+1, r24	; 0x01
    5f76:	9a 83       	std	Y+2, r25	; 0x02
    5f78:	ab 83       	std	Y+3, r26	; 0x03
    5f7a:	bc 83       	std	Y+4, r27	; 0x04
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5f7c:	f1 01       	movw	r30, r2
    5f7e:	41 8c       	ldd	r4, Z+25	; 0x19
    5f80:	52 8c       	ldd	r5, Z+26	; 0x1a
    5f82:	63 8c       	ldd	r6, Z+27	; 0x1b
    5f84:	74 8c       	ldd	r7, Z+28	; 0x1c
G3 = (uint8_t)Current_state.gps.lon;
    5f86:	85 8d       	ldd	r24, Z+29	; 0x1d
    5f88:	96 8d       	ldd	r25, Z+30	; 0x1e
    5f8a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5f8c:	b0 a1       	ldd	r27, Z+32	; 0x20
    5f8e:	8d 83       	std	Y+5, r24	; 0x05
    5f90:	9e 83       	std	Y+6, r25	; 0x06
    5f92:	af 83       	std	Y+7, r26	; 0x07
    5f94:	b8 87       	std	Y+8, r27	; 0x08
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5f96:	85 8d       	ldd	r24, Z+29	; 0x1d
    5f98:	96 8d       	ldd	r25, Z+30	; 0x1e
    5f9a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5f9c:	b0 a1       	ldd	r27, Z+32	; 0x20
    5f9e:	89 87       	std	Y+9, r24	; 0x09
    5fa0:	9a 87       	std	Y+10, r25	; 0x0a
    5fa2:	ab 87       	std	Y+11, r26	; 0x0b
    5fa4:	bc 87       	std	Y+12, r27	; 0x0c
G5 = Current_state.gps.seconds;
    5fa6:	97 a0       	ldd	r9, Z+39	; 0x27
G6 = Current_state.gps.minutes;
    5fa8:	a6 a0       	ldd	r10, Z+38	; 0x26
G7 = Current_state.gps.hours;
    5faa:	b5 a0       	ldd	r11, Z+37	; 0x25
G8 = Current_state.gps.date;
    5fac:	c0 a4       	ldd	r12, Z+40	; 0x28
G9 = (uint8_t)(q_o[0]*127);
    5fae:	20 e0       	ldi	r18, 0x00	; 0
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	4e ef       	ldi	r20, 0xFE	; 254
    5fb4:	52 e4       	ldi	r21, 0x42	; 66
    5fb6:	d8 01       	movw	r26, r16
    5fb8:	6d 91       	ld	r22, X+
    5fba:	7d 91       	ld	r23, X+
    5fbc:	8d 91       	ld	r24, X+
    5fbe:	9c 91       	ld	r25, X
    5fc0:	56 d6       	rcall	.+3244   	; 0x6c6e <__mulsf3>
    5fc2:	a4 d4       	rcall	.+2376   	; 0x690c <__fixunssfsi>
    5fc4:	d6 2e       	mov	r13, r22
G10 = (uint8_t)(q_o[1]*127);
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	4e ef       	ldi	r20, 0xFE	; 254
    5fcc:	52 e4       	ldi	r21, 0x42	; 66
    5fce:	f8 01       	movw	r30, r16
    5fd0:	64 81       	ldd	r22, Z+4	; 0x04
    5fd2:	75 81       	ldd	r23, Z+5	; 0x05
    5fd4:	86 81       	ldd	r24, Z+6	; 0x06
    5fd6:	97 81       	ldd	r25, Z+7	; 0x07
    5fd8:	4a d6       	rcall	.+3220   	; 0x6c6e <__mulsf3>
    5fda:	98 d4       	rcall	.+2352   	; 0x690c <__fixunssfsi>
    5fdc:	e6 2e       	mov	r14, r22
G11 = (uint8_t)(q_o[2]*127);
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	4e ef       	ldi	r20, 0xFE	; 254
    5fe4:	52 e4       	ldi	r21, 0x42	; 66
    5fe6:	d8 01       	movw	r26, r16
    5fe8:	18 96       	adiw	r26, 0x08	; 8
    5fea:	6d 91       	ld	r22, X+
    5fec:	7d 91       	ld	r23, X+
    5fee:	8d 91       	ld	r24, X+
    5ff0:	9c 91       	ld	r25, X
    5ff2:	1b 97       	sbiw	r26, 0x0b	; 11
    5ff4:	3c d6       	rcall	.+3192   	; 0x6c6e <__mulsf3>
    5ff6:	8a d4       	rcall	.+2324   	; 0x690c <__fixunssfsi>
    5ff8:	f6 2e       	mov	r15, r22
G12 = (uint8_t)(q_o[3]*127);
    5ffa:	20 e0       	ldi	r18, 0x00	; 0
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	4e ef       	ldi	r20, 0xFE	; 254
    6000:	52 e4       	ldi	r21, 0x42	; 66
    6002:	f8 01       	movw	r30, r16
    6004:	64 85       	ldd	r22, Z+12	; 0x0c
    6006:	75 85       	ldd	r23, Z+13	; 0x0d
    6008:	86 85       	ldd	r24, Z+14	; 0x0e
    600a:	97 85       	ldd	r25, Z+15	; 0x0f
    600c:	30 d6       	rcall	.+3168   	; 0x6c6e <__mulsf3>
    600e:	7e d4       	rcall	.+2300   	; 0x690c <__fixunssfsi>
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    6010:	e9 81       	ldd	r30, Y+1	; 0x01
    6012:	a4 e1       	ldi	r26, 0x14	; 20
    6014:	b1 e0       	ldi	r27, 0x01	; 1
    6016:	ec 93       	st	X, r30
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    6018:	50 92 15 01 	sts	0x0115, r5	; 0x800115 <GPS_Data+0x1>
G3 = (uint8_t)Current_state.gps.lon;
    601c:	fd 81       	ldd	r31, Y+5	; 0x05
    601e:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <GPS_Data+0x2>
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    6022:	2a 85       	ldd	r18, Y+10	; 0x0a
    6024:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <GPS_Data+0x3>

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    6028:	90 92 18 01 	sts	0x0118, r9	; 0x800118 <GPS_Data+0x4>
GPS_Data[5] = G6;
    602c:	a0 92 19 01 	sts	0x0119, r10	; 0x800119 <GPS_Data+0x5>
GPS_Data[6] = G7;
    6030:	b0 92 1a 01 	sts	0x011A, r11	; 0x80011a <GPS_Data+0x6>
GPS_Data[7] = G8;
    6034:	c0 92 1b 01 	sts	0x011B, r12	; 0x80011b <GPS_Data+0x7>
GPS_Data[8] = G9;
    6038:	d0 92 1c 01 	sts	0x011C, r13	; 0x80011c <GPS_Data+0x8>
GPS_Data[9] = G10;
    603c:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <GPS_Data+0x9>
GPS_Data[10] = G11;
    6040:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <GPS_Data+0xa>
GPS_Data[11] = G12;
    6044:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <GPS_Data+0xb>
//////////////////////////////////////////

///////////////////////////////////////
if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    6048:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <flag_india>
    604c:	81 30       	cpi	r24, 0x01	; 1
    604e:	29 f0       	breq	.+10     	; 0x605a <main+0x202>
    6050:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <flag_france>
    6054:	81 30       	cpi	r24, 0x01	; 1
    6056:	09 f0       	breq	.+2      	; 0x605a <main+0x202>
    6058:	4d c0       	rjmp	.+154    	; 0x60f4 <main+0x29c>
{
	
	if(FirstTimeOuter ==0)
    605a:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <FirstTimeOuter>
    605e:	81 11       	cpse	r24, r1
    6060:	0e c0       	rjmp	.+28     	; 0x607e <main+0x226>
	{
		
	FirstTimeInner = 0;
    6062:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeNormal = 0;
    6066:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    606a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    606e:	8d 7f       	andi	r24, 0xFD	; 253
    6070:	80 61       	ori	r24, 0x10	; 16
    6072:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 1;
    6076:	81 e0       	ldi	r24, 0x01	; 1
    6078:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    607c:	35 c0       	rjmp	.+106    	; 0x60e8 <main+0x290>
	}
	else if(FirstTimeOuter == 1)
    607e:	81 30       	cpi	r24, 0x01	; 1
    6080:	e1 f4       	brne	.+56     	; 0x60ba <main+0x262>
	{
		
		if(countu ==0)
    6082:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    6086:	81 11       	cpse	r24, r1
    6088:	14 c0       	rjmp	.+40     	; 0x60b2 <main+0x25a>
    608a:	83 e0       	ldi	r24, 0x03	; 3
    608c:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    608e:	a1 eb       	ldi	r26, 0xB1	; 177
    6090:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    6092:	77 9b       	sbis	0x0e, 7	; 14
    6094:	fe cf       	rjmp	.-4      	; 0x6092 <main+0x23a>
			PORTA = 0xFF;
    6096:	bf ef       	ldi	r27, 0xFF	; 255
    6098:	bb bb       	out	0x1b, r27	; 27
    609a:	ef ec       	ldi	r30, 0xCF	; 207
    609c:	f7 e0       	ldi	r31, 0x07	; 7
    609e:	31 97       	sbiw	r30, 0x01	; 1
    60a0:	f1 f7       	brne	.-4      	; 0x609e <main+0x246>
    60a2:	00 c0       	rjmp	.+0      	; 0x60a4 <main+0x24c>
    60a4:	00 00       	nop
    60a6:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    60a8:	91 f7       	brne	.-28     	; 0x608e <main+0x236>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    60aa:	82 e0       	ldi	r24, 0x02	; 2
    60ac:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    60b0:	1b c0       	rjmp	.+54     	; 0x60e8 <main+0x290>
		}
		else if(countu == 1)
    60b2:	81 30       	cpi	r24, 0x01	; 1
    60b4:	c9 f4       	brne	.+50     	; 0x60e8 <main+0x290>
		{
			
			SendHM();
    60b6:	bc de       	rcall	.-648    	; 0x5e30 <SendHM>
    60b8:	17 c0       	rjmp	.+46     	; 0x60e8 <main+0x290>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    60ba:	ba de       	rcall	.-652    	; 0x5e30 <SendHM>
		if(countu ==0)
    60bc:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    60c0:	81 11       	cpse	r24, r1
    60c2:	12 c0       	rjmp	.+36     	; 0x60e8 <main+0x290>
    60c4:	e4 e1       	ldi	r30, 0x14	; 20
    60c6:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    60c8:	81 91       	ld	r24, Z+
    60ca:	8f b9       	out	0x0f, r24	; 15
				while(!(SPSR & (1<<SPIF) ));
    60cc:	77 9b       	sbis	0x0e, 7	; 14
    60ce:	fe cf       	rjmp	.-4      	; 0x60cc <main+0x274>
				PORTA = 0xFF;
    60d0:	2f ef       	ldi	r18, 0xFF	; 255
    60d2:	2b bb       	out	0x1b, r18	; 27
    60d4:	8f ec       	ldi	r24, 0xCF	; 207
    60d6:	97 e0       	ldi	r25, 0x07	; 7
    60d8:	01 97       	sbiw	r24, 0x01	; 1
    60da:	f1 f7       	brne	.-4      	; 0x60d8 <main+0x280>
    60dc:	00 c0       	rjmp	.+0      	; 0x60de <main+0x286>
    60de:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    60e0:	91 e0       	ldi	r25, 0x01	; 1
    60e2:	e0 32       	cpi	r30, 0x20	; 32
    60e4:	f9 07       	cpc	r31, r25
    60e6:	81 f7       	brne	.-32     	; 0x60c8 <main+0x270>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    60e8:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    60ec:	8e 5f       	subi	r24, 0xFE	; 254
    60ee:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    60f2:	94 c0       	rjmp	.+296    	; 0x621c <main+0x3c4>
}
else if(flag_mumbai ==1) //Check for Circles
    60f4:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <flag_mumbai>
    60f8:	81 30       	cpi	r24, 0x01	; 1
    60fa:	09 f0       	breq	.+2      	; 0x60fe <main+0x2a6>
    60fc:	4d c0       	rjmp	.+154    	; 0x6198 <main+0x340>
{
	
	if(FirstTimeInner ==0)
    60fe:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <FirstTimeInner>
    6102:	81 11       	cpse	r24, r1
    6104:	0e c0       	rjmp	.+28     	; 0x6122 <main+0x2ca>
	{
		
		FirstTimeOuter = 0;
    6106:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
		FirstTimeNormal = 0;
    610a:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    610e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    6112:	8d 7f       	andi	r24, 0xFD	; 253
    6114:	80 61       	ori	r24, 0x10	; 16
    6116:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		FirstTimeInner = 1;
    611a:	81 e0       	ldi	r24, 0x01	; 1
    611c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    6120:	35 c0       	rjmp	.+106    	; 0x618c <main+0x334>
		
	}
	else if(FirstTimeInner == 1)
    6122:	81 30       	cpi	r24, 0x01	; 1
    6124:	e1 f4       	brne	.+56     	; 0x615e <main+0x306>
	{
		
		if(countu ==0)
    6126:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    612a:	81 11       	cpse	r24, r1
    612c:	14 c0       	rjmp	.+40     	; 0x6156 <main+0x2fe>
    612e:	83 e0       	ldi	r24, 0x03	; 3
    6130:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    6132:	a1 ef       	ldi	r26, 0xF1	; 241
    6134:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    6136:	77 9b       	sbis	0x0e, 7	; 14
    6138:	fe cf       	rjmp	.-4      	; 0x6136 <main+0x2de>
			PORTA = 0xFF;
    613a:	bf ef       	ldi	r27, 0xFF	; 255
    613c:	bb bb       	out	0x1b, r27	; 27
    613e:	ef ec       	ldi	r30, 0xCF	; 207
    6140:	f7 e0       	ldi	r31, 0x07	; 7
    6142:	31 97       	sbiw	r30, 0x01	; 1
    6144:	f1 f7       	brne	.-4      	; 0x6142 <main+0x2ea>
    6146:	00 c0       	rjmp	.+0      	; 0x6148 <main+0x2f0>
    6148:	00 00       	nop
    614a:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    614c:	91 f7       	brne	.-28     	; 0x6132 <main+0x2da>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    614e:	82 e0       	ldi	r24, 0x02	; 2
    6150:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    6154:	1b c0       	rjmp	.+54     	; 0x618c <main+0x334>
		}
		
		else if(countu == 1)
    6156:	81 30       	cpi	r24, 0x01	; 1
    6158:	c9 f4       	brne	.+50     	; 0x618c <main+0x334>
		{
			
			SendHM();
    615a:	6a de       	rcall	.-812    	; 0x5e30 <SendHM>
    615c:	17 c0       	rjmp	.+46     	; 0x618c <main+0x334>
		
	}
	else
	{
		
		SendHM();
    615e:	68 de       	rcall	.-816    	; 0x5e30 <SendHM>
		if(countu ==0)
    6160:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    6164:	81 11       	cpse	r24, r1
    6166:	12 c0       	rjmp	.+36     	; 0x618c <main+0x334>
    6168:	e4 e1       	ldi	r30, 0x14	; 20
    616a:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    616c:	81 91       	ld	r24, Z+
    616e:	8f b9       	out	0x0f, r24	; 15
			while(!(SPSR & (1<<SPIF) ));
    6170:	77 9b       	sbis	0x0e, 7	; 14
    6172:	fe cf       	rjmp	.-4      	; 0x6170 <main+0x318>
			PORTA = 0xFF;
    6174:	2f ef       	ldi	r18, 0xFF	; 255
    6176:	2b bb       	out	0x1b, r18	; 27
    6178:	8f ec       	ldi	r24, 0xCF	; 207
    617a:	97 e0       	ldi	r25, 0x07	; 7
    617c:	01 97       	sbiw	r24, 0x01	; 1
    617e:	f1 f7       	brne	.-4      	; 0x617c <main+0x324>
    6180:	00 c0       	rjmp	.+0      	; 0x6182 <main+0x32a>
    6182:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    6184:	91 e0       	ldi	r25, 0x01	; 1
    6186:	e0 32       	cpi	r30, 0x20	; 32
    6188:	f9 07       	cpc	r31, r25
    618a:	81 f7       	brne	.-32     	; 0x616c <main+0x314>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    618c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    6190:	8e 5f       	subi	r24, 0xFE	; 254
    6192:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    6196:	42 c0       	rjmp	.+132    	; 0x621c <main+0x3c4>
}
else
{

	countd = 0;
    6198:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu = 0;
    619c:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	if(FirstTimeNormal == 0)
    61a0:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <FirstTimeNormal>
    61a4:	81 11       	cpse	r24, r1
    61a6:	13 c0       	rjmp	.+38     	; 0x61ce <main+0x376>
    61a8:	83 e0       	ldi	r24, 0x03	; 3
    61aa:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    61ac:	a1 ed       	ldi	r26, 0xD1	; 209
    61ae:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    61b0:	77 9b       	sbis	0x0e, 7	; 14
    61b2:	fe cf       	rjmp	.-4      	; 0x61b0 <main+0x358>
			PORTA = 0xFF;
    61b4:	bf ef       	ldi	r27, 0xFF	; 255
    61b6:	bb bb       	out	0x1b, r27	; 27
    61b8:	ef ec       	ldi	r30, 0xCF	; 207
    61ba:	f7 e0       	ldi	r31, 0x07	; 7
    61bc:	31 97       	sbiw	r30, 0x01	; 1
    61be:	f1 f7       	brne	.-4      	; 0x61bc <main+0x364>
    61c0:	00 c0       	rjmp	.+0      	; 0x61c2 <main+0x36a>
    61c2:	00 00       	nop
    61c4:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    61c6:	91 f7       	brne	.-28     	; 0x61ac <main+0x354>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    61c8:	81 e0       	ldi	r24, 0x01	; 1
    61ca:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <FirstTimeNormal>
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    61ce:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <UniversalCycles>
    61d2:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <UniversalCycles+0x1>
    61d6:	9a 01       	movw	r18, r20
    61d8:	ad ec       	ldi	r26, 0xCD	; 205
    61da:	bc ec       	ldi	r27, 0xCC	; 204
    61dc:	52 d7       	rcall	.+3748   	; 0x7082 <__umulhisi3>
    61de:	96 95       	lsr	r25
    61e0:	87 95       	ror	r24
    61e2:	96 95       	lsr	r25
    61e4:	87 95       	ror	r24
    61e6:	96 95       	lsr	r25
    61e8:	87 95       	ror	r24
    61ea:	9c 01       	movw	r18, r24
    61ec:	22 0f       	add	r18, r18
    61ee:	33 1f       	adc	r19, r19
    61f0:	88 0f       	add	r24, r24
    61f2:	99 1f       	adc	r25, r25
    61f4:	88 0f       	add	r24, r24
    61f6:	99 1f       	adc	r25, r25
    61f8:	88 0f       	add	r24, r24
    61fa:	99 1f       	adc	r25, r25
    61fc:	82 0f       	add	r24, r18
    61fe:	93 1f       	adc	r25, r19
    6200:	48 17       	cp	r20, r24
    6202:	59 07       	cpc	r21, r25
    6204:	09 f4       	brne	.+2      	; 0x6208 <main+0x3b0>
    6206:	14 de       	rcall	.-984    	; 0x5e30 <SendHM>
	write_data &= ~(1<<4);
    6208:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    620c:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    620e:	82 60       	ori	r24, 0x02	; 2
    6210:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeInner = 0;
    6214:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeOuter = 0;
    6218:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
}

if ((countd >120)&&(countd <=150))
    621c:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <countd>
    6220:	87 e8       	ldi	r24, 0x87	; 135
    6222:	89 0f       	add	r24, r25
    6224:	8e 31       	cpi	r24, 0x1E	; 30
    6226:	d8 f4       	brcc	.+54     	; 0x625e <main+0x406>
{
	
	write_data &= ~(1<<4); //switch off downlink
    6228:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    622c:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    622e:	82 60       	ori	r24, 0x02	; 2
    6230:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	if (countd == 122)
    6234:	9a 37       	cpi	r25, 0x7A	; 122
    6236:	81 f4       	brne	.+32     	; 0x6258 <main+0x400>
    6238:	83 e0       	ldi	r24, 0x03	; 3
    623a:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    623c:	f1 ed       	ldi	r31, 0xD1	; 209
    623e:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1<<SPIF) ));
    6240:	77 9b       	sbis	0x0e, 7	; 14
    6242:	fe cf       	rjmp	.-4      	; 0x6240 <main+0x3e8>
		PORTA = 0xFF;
    6244:	2f ef       	ldi	r18, 0xFF	; 255
    6246:	2b bb       	out	0x1b, r18	; 27
    6248:	af ec       	ldi	r26, 0xCF	; 207
    624a:	b7 e0       	ldi	r27, 0x07	; 7
    624c:	11 97       	sbiw	r26, 0x01	; 1
    624e:	f1 f7       	brne	.-4      	; 0x624c <main+0x3f4>
    6250:	00 c0       	rjmp	.+0      	; 0x6252 <main+0x3fa>
    6252:	00 00       	nop
    6254:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    6256:	91 f7       	brne	.-28     	; 0x623c <main+0x3e4>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    6258:	81 e0       	ldi	r24, 0x01	; 1
    625a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <countu>
}
if (countd >150)
    625e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    6262:	87 39       	cpi	r24, 0x97	; 151
    6264:	70 f0       	brcs	.+28     	; 0x6282 <main+0x42a>
{

	countd=0;
    6266:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu=0;
    626a:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	write_data &= ~(1<<1); 
    626e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    6272:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    6274:	80 61       	ori	r24, 0x10	; 16
    6276:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 0;
    627a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
	FirstTimeInner = 0;
    627e:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
		
}

	
		PORTB |= (1<<PB0);
    6282:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    6284:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    6286:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    628a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    628e:	89 2b       	or	r24, r25
    6290:	79 f4       	brne	.+30     	; 0x62b0 <main+0x458>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    6292:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    6296:	88 23       	and	r24, r24
    6298:	4c f1       	brlt	.+82     	; 0x62ec <main+0x494>
	     	{
		     	counter1 = 1;
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    62a2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
		     	write_data &= ~(1<<7);
    62a6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    62aa:	8f 77       	andi	r24, 0x7F	; 127
    62ac:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    62b0:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    62b4:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    62b8:	9c 01       	movw	r18, r24
    62ba:	21 50       	subi	r18, 0x01	; 1
    62bc:	31 09       	sbc	r19, r1
    62be:	26 30       	cpi	r18, 0x06	; 6
    62c0:	31 05       	cpc	r19, r1
    62c2:	28 f4       	brcc	.+10     	; 0x62ce <main+0x476>
     	{
	     	counter1 = counter1+1;
    62c4:	01 96       	adiw	r24, 0x01	; 1
    62c6:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    62ca:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
     	}
     	
     	if(counter1 == 7)
    62ce:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    62d2:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    62d6:	07 97       	sbiw	r24, 0x07	; 7
    62d8:	49 f4       	brne	.+18     	; 0x62ec <main+0x494>
     	{
	     	counter1 = 0;
    62da:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <counter1+0x1>
    62de:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <counter1>
	     	write_data |= (1<<7);
    62e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    62e6:	80 68       	ori	r24, 0x80	; 128
    62e8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    62ec:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    62f0:	85 fd       	sbrc	r24, 5
    62f2:	04 c0       	rjmp	.+8      	; 0x62fc <main+0x4a4>
			 {
				Current_state.gps.gps_OC = 1;
    62f4:	81 e0       	ldi	r24, 0x01	; 1
    62f6:	f1 01       	movw	r30, r2
    62f8:	86 a7       	std	Z+46, r24	; 0x2e
    62fa:	03 c0       	rjmp	.+6      	; 0x6302 <main+0x4aa>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    62fc:	d1 01       	movw	r26, r2
    62fe:	9e 96       	adiw	r26, 0x2e	; 46
    6300:	1c 92       	st	X, r1
			}


	//wdt_enable(WDTO_2S);
	//wdt_reset();
	control();
    6302:	0e 94 d7 09 	call	0x13ae	; 0x13ae <control>
	//for (int i = 0; i<7;i++)
	//{
	//	transmit_UART0(HM_Data[i]);
	//}
	
	light_main = light_cal();	
    6306:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <light_cal>
    630a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <light_main>
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    630e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    6312:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    6314:	0e 94 75 23 	call	0x46ea	; 0x46ea <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    6318:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <Time>
    631c:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <Time+0x1>
    6320:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <Time+0x2>
    6324:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <Time+0x3>
    6328:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <Time+0x4>
    632c:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <Time+0x5>
    6330:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <Time+0x6>
    6334:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <Time+0x7>
    6338:	a2 e0       	ldi	r26, 0x02	; 2
    633a:	d4 d6       	rcall	.+3496   	; 0x70e4 <__adddi3_s8>
    633c:	20 93 1f 05 	sts	0x051F, r18	; 0x80051f <Time>
    6340:	30 93 20 05 	sts	0x0520, r19	; 0x800520 <Time+0x1>
    6344:	40 93 21 05 	sts	0x0521, r20	; 0x800521 <Time+0x2>
    6348:	50 93 22 05 	sts	0x0522, r21	; 0x800522 <Time+0x3>
    634c:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <Time+0x4>
    6350:	70 93 24 05 	sts	0x0524, r23	; 0x800524 <Time+0x5>
    6354:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Time+0x6>
    6358:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <Time+0x7>
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    635c:	f1 01       	movw	r30, r2
    635e:	61 8d       	ldd	r22, Z+25	; 0x19
    6360:	72 8d       	ldd	r23, Z+26	; 0x1a
    6362:	83 8d       	ldd	r24, Z+27	; 0x1b
    6364:	94 8d       	ldd	r25, Z+28	; 0x1c
    6366:	00 d3       	rcall	.+1536   	; 0x6968 <__floatsisf>
    6368:	20 e0       	ldi	r18, 0x00	; 0
    636a:	30 e0       	ldi	r19, 0x00	; 0
    636c:	48 ec       	ldi	r20, 0xC8	; 200
    636e:	52 e4       	ldi	r21, 0x42	; 66
    6370:	60 d2       	rcall	.+1216   	; 0x6832 <__divsf3>
    6372:	29 e9       	ldi	r18, 0x99	; 153
    6374:	3a ea       	ldi	r19, 0xAA	; 170
    6376:	44 eb       	ldi	r20, 0xB4	; 180
    6378:	51 e4       	ldi	r21, 0x41	; 65
    637a:	76 d1       	rcall	.+748    	; 0x6668 <__subsf3>
    637c:	69 87       	std	Y+9, r22	; 0x09
    637e:	7a 87       	std	Y+10, r23	; 0x0a
    6380:	8b 87       	std	Y+11, r24	; 0x0b
    6382:	9c 87       	std	Y+12, r25	; 0x0c
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    6384:	d1 01       	movw	r26, r2
    6386:	5d 96       	adiw	r26, 0x1d	; 29
    6388:	6d 91       	ld	r22, X+
    638a:	7d 91       	ld	r23, X+
    638c:	8d 91       	ld	r24, X+
    638e:	9c 91       	ld	r25, X
    6390:	90 97       	sbiw	r26, 0x20	; 32
    6392:	ea d2       	rcall	.+1492   	; 0x6968 <__floatsisf>
    6394:	20 e0       	ldi	r18, 0x00	; 0
    6396:	30 e0       	ldi	r19, 0x00	; 0
    6398:	48 ec       	ldi	r20, 0xC8	; 200
    639a:	52 e4       	ldi	r21, 0x42	; 66
    639c:	4a d2       	rcall	.+1172   	; 0x6832 <__divsf3>
    639e:	20 e8       	ldi	r18, 0x80	; 128
    63a0:	38 e8       	ldi	r19, 0x88	; 136
    63a2:	45 ea       	ldi	r20, 0xA5	; 165
    63a4:	52 e4       	ldi	r21, 0x42	; 66
    63a6:	60 d1       	rcall	.+704    	; 0x6668 <__subsf3>
    63a8:	6d 87       	std	Y+13, r22	; 0x0d
    63aa:	7e 87       	std	Y+14, r23	; 0x0e
    63ac:	8f 87       	std	Y+15, r24	; 0x0f
    63ae:	98 8b       	std	Y+16, r25	; 0x10
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    63b0:	f1 01       	movw	r30, r2
    63b2:	61 8d       	ldd	r22, Z+25	; 0x19
    63b4:	72 8d       	ldd	r23, Z+26	; 0x1a
    63b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    63b8:	94 8d       	ldd	r25, Z+28	; 0x1c
    63ba:	d6 d2       	rcall	.+1452   	; 0x6968 <__floatsisf>
    63bc:	20 e0       	ldi	r18, 0x00	; 0
    63be:	30 e0       	ldi	r19, 0x00	; 0
    63c0:	48 ec       	ldi	r20, 0xC8	; 200
    63c2:	52 e4       	ldi	r21, 0x42	; 66
    63c4:	36 d2       	rcall	.+1132   	; 0x6832 <__divsf3>
    63c6:	28 ed       	ldi	r18, 0xD8	; 216
    63c8:	3f e0       	ldi	r19, 0x0F	; 15
    63ca:	49 e4       	ldi	r20, 0x49	; 73
    63cc:	50 e4       	ldi	r21, 0x40	; 64
    63ce:	4f d4       	rcall	.+2206   	; 0x6c6e <__mulsf3>
    63d0:	20 e0       	ldi	r18, 0x00	; 0
    63d2:	30 e0       	ldi	r19, 0x00	; 0
    63d4:	44 e3       	ldi	r20, 0x34	; 52
    63d6:	53 e4       	ldi	r21, 0x43	; 67
    63d8:	2c d2       	rcall	.+1112   	; 0x6832 <__divsf3>
    63da:	6d 8b       	std	Y+21, r22	; 0x15
    63dc:	7e 8b       	std	Y+22, r23	; 0x16
    63de:	8f 8b       	std	Y+23, r24	; 0x17
    63e0:	98 8f       	std	Y+24, r25	; 0x18
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    63e2:	d1 01       	movw	r26, r2
    63e4:	59 96       	adiw	r26, 0x19	; 25
    63e6:	8d 90       	ld	r8, X+
    63e8:	9d 90       	ld	r9, X+
    63ea:	ad 90       	ld	r10, X+
    63ec:	bc 90       	ld	r11, X
    63ee:	5c 97       	sbiw	r26, 0x1c	; 28
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    63f0:	5d 96       	adiw	r26, 0x1d	; 29
    63f2:	cd 90       	ld	r12, X+
    63f4:	dd 90       	ld	r13, X+
    63f6:	ed 90       	ld	r14, X+
    63f8:	fc 90       	ld	r15, X
    63fa:	90 97       	sbiw	r26, 0x20	; 32
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    63fc:	59 96       	adiw	r26, 0x19	; 25
    63fe:	4d 90       	ld	r4, X+
    6400:	5d 90       	ld	r5, X+
    6402:	6d 90       	ld	r6, X+
    6404:	7c 90       	ld	r7, X
    6406:	5c 97       	sbiw	r26, 0x1c	; 28
// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    6408:	59 96       	adiw	r26, 0x19	; 25
    640a:	6d 91       	ld	r22, X+
    640c:	7d 91       	ld	r23, X+
    640e:	8d 91       	ld	r24, X+
    6410:	9c 91       	ld	r25, X
    6412:	5c 97       	sbiw	r26, 0x1c	; 28
    6414:	a9 d2       	rcall	.+1362   	; 0x6968 <__floatsisf>
    6416:	20 e0       	ldi	r18, 0x00	; 0
    6418:	30 e0       	ldi	r19, 0x00	; 0
    641a:	48 ec       	ldi	r20, 0xC8	; 200
    641c:	52 e4       	ldi	r21, 0x42	; 66
    641e:	09 d2       	rcall	.+1042   	; 0x6832 <__divsf3>
    6420:	26 ea       	ldi	r18, 0xA6	; 166
    6422:	3b e9       	ldi	r19, 0x9B	; 155
    6424:	48 e9       	ldi	r20, 0x98	; 152
    6426:	51 e4       	ldi	r21, 0x41	; 65
    6428:	1f d1       	rcall	.+574    	; 0x6668 <__subsf3>
    642a:	69 83       	std	Y+1, r22	; 0x01
    642c:	7a 83       	std	Y+2, r23	; 0x02
    642e:	8b 83       	std	Y+3, r24	; 0x03
    6430:	9c 83       	std	Y+4, r25	; 0x04
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    6432:	f1 01       	movw	r30, r2
    6434:	65 8d       	ldd	r22, Z+29	; 0x1d
    6436:	76 8d       	ldd	r23, Z+30	; 0x1e
    6438:	87 8d       	ldd	r24, Z+31	; 0x1f
    643a:	90 a1       	ldd	r25, Z+32	; 0x20
    643c:	95 d2       	rcall	.+1322   	; 0x6968 <__floatsisf>
    643e:	20 e0       	ldi	r18, 0x00	; 0
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	48 ec       	ldi	r20, 0xC8	; 200
    6444:	52 e4       	ldi	r21, 0x42	; 66
    6446:	f5 d1       	rcall	.+1002   	; 0x6832 <__divsf3>
    6448:	26 e0       	ldi	r18, 0x06	; 6
    644a:	31 ec       	ldi	r19, 0xC1	; 193
    644c:	41 e9       	ldi	r20, 0x91	; 145
    644e:	52 e4       	ldi	r21, 0x42	; 66
    6450:	0b d1       	rcall	.+534    	; 0x6668 <__subsf3>
    6452:	6d 83       	std	Y+5, r22	; 0x05
    6454:	7e 83       	std	Y+6, r23	; 0x06
    6456:	8f 83       	std	Y+7, r24	; 0x07
    6458:	98 87       	std	Y+8, r25	; 0x08
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    645a:	d1 01       	movw	r26, r2
    645c:	59 96       	adiw	r26, 0x19	; 25
    645e:	6d 91       	ld	r22, X+
    6460:	7d 91       	ld	r23, X+
    6462:	8d 91       	ld	r24, X+
    6464:	9c 91       	ld	r25, X
    6466:	5c 97       	sbiw	r26, 0x1c	; 28
    6468:	7f d2       	rcall	.+1278   	; 0x6968 <__floatsisf>
    646a:	20 e0       	ldi	r18, 0x00	; 0
    646c:	30 e0       	ldi	r19, 0x00	; 0
    646e:	48 ec       	ldi	r20, 0xC8	; 200
    6470:	52 e4       	ldi	r21, 0x42	; 66
    6472:	df d1       	rcall	.+958    	; 0x6832 <__divsf3>
    6474:	28 ed       	ldi	r18, 0xD8	; 216
    6476:	3f e0       	ldi	r19, 0x0F	; 15
    6478:	49 e4       	ldi	r20, 0x49	; 73
    647a:	50 e4       	ldi	r21, 0x40	; 64
    647c:	f8 d3       	rcall	.+2032   	; 0x6c6e <__mulsf3>
    647e:	20 e0       	ldi	r18, 0x00	; 0
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	44 e3       	ldi	r20, 0x34	; 52
    6484:	53 e4       	ldi	r21, 0x43	; 67
    6486:	d5 d1       	rcall	.+938    	; 0x6832 <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    6488:	d1 d1       	rcall	.+930    	; 0x682c <cos>
    648a:	69 8b       	std	Y+17, r22	; 0x11
    648c:	7a 8b       	std	Y+18, r23	; 0x12
    648e:	8b 8b       	std	Y+19, r24	; 0x13
    6490:	9c 8b       	std	Y+20, r25	; 0x14
    6492:	29 81       	ldd	r18, Y+1	; 0x01
    6494:	3a 81       	ldd	r19, Y+2	; 0x02
    6496:	4b 81       	ldd	r20, Y+3	; 0x03
    6498:	5c 81       	ldd	r21, Y+4	; 0x04
    649a:	ca 01       	movw	r24, r20
    649c:	b9 01       	movw	r22, r18
    649e:	e7 d3       	rcall	.+1998   	; 0x6c6e <__mulsf3>
    64a0:	69 83       	std	Y+1, r22	; 0x01
    64a2:	7a 83       	std	Y+2, r23	; 0x02
    64a4:	8b 83       	std	Y+3, r24	; 0x03
    64a6:	9c 83       	std	Y+4, r25	; 0x04
    64a8:	2d 81       	ldd	r18, Y+5	; 0x05
    64aa:	3e 81       	ldd	r19, Y+6	; 0x06
    64ac:	4f 81       	ldd	r20, Y+7	; 0x07
    64ae:	58 85       	ldd	r21, Y+8	; 0x08
    64b0:	69 89       	ldd	r22, Y+17	; 0x11
    64b2:	7a 89       	ldd	r23, Y+18	; 0x12
    64b4:	8b 89       	ldd	r24, Y+19	; 0x13
    64b6:	9c 89       	ldd	r25, Y+20	; 0x14
    64b8:	da d3       	rcall	.+1972   	; 0x6c6e <__mulsf3>
    64ba:	2d 81       	ldd	r18, Y+5	; 0x05
    64bc:	3e 81       	ldd	r19, Y+6	; 0x06
    64be:	4f 81       	ldd	r20, Y+7	; 0x07
    64c0:	58 85       	ldd	r21, Y+8	; 0x08
    64c2:	d5 d3       	rcall	.+1962   	; 0x6c6e <__mulsf3>
    64c4:	9b 01       	movw	r18, r22
    64c6:	ac 01       	movw	r20, r24
    64c8:	69 81       	ldd	r22, Y+1	; 0x01
    64ca:	7a 81       	ldd	r23, Y+2	; 0x02
    64cc:	8b 81       	ldd	r24, Y+3	; 0x03
    64ce:	9c 81       	ldd	r25, Y+4	; 0x04
    64d0:	cc d0       	rcall	.+408    	; 0x666a <__addsf3>
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	48 ec       	ldi	r20, 0xC8	; 200
    64d8:	52 e4       	ldi	r21, 0x42	; 66
    64da:	a4 d1       	rcall	.+840    	; 0x6824 <__cmpsf2>
    64dc:	88 23       	and	r24, r24
    64de:	64 f4       	brge	.+24     	; 0x64f8 <main+0x6a0>
    64e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    64e4:	81 30       	cpi	r24, 0x01	; 1
    64e6:	09 f0       	breq	.+2      	; 0x64ea <main+0x692>
    64e8:	43 c0       	rjmp	.+134    	; 0x6570 <main+0x718>
		{
			flag_mumbai = 1;
    64ea:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <flag_mumbai>
			flag_india = 0;
    64ee:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
			flag_france = 0;
    64f2:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    64f6:	9b c0       	rjmp	.+310    	; 0x662e <main+0x7d6>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    64f8:	6d 89       	ldd	r22, Y+21	; 0x15
    64fa:	7e 89       	ldd	r23, Y+22	; 0x16
    64fc:	8f 89       	ldd	r24, Y+23	; 0x17
    64fe:	98 8d       	ldd	r25, Y+24	; 0x18
    6500:	95 d1       	rcall	.+810    	; 0x682c <cos>
    6502:	69 83       	std	Y+1, r22	; 0x01
    6504:	7a 83       	std	Y+2, r23	; 0x02
    6506:	8b 83       	std	Y+3, r24	; 0x03
    6508:	9c 83       	std	Y+4, r25	; 0x04
    650a:	29 85       	ldd	r18, Y+9	; 0x09
    650c:	3a 85       	ldd	r19, Y+10	; 0x0a
    650e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6510:	5c 85       	ldd	r21, Y+12	; 0x0c
    6512:	ca 01       	movw	r24, r20
    6514:	b9 01       	movw	r22, r18
    6516:	ab d3       	rcall	.+1878   	; 0x6c6e <__mulsf3>
    6518:	6d 83       	std	Y+5, r22	; 0x05
    651a:	7e 83       	std	Y+6, r23	; 0x06
    651c:	8f 83       	std	Y+7, r24	; 0x07
    651e:	98 87       	std	Y+8, r25	; 0x08
    6520:	2d 85       	ldd	r18, Y+13	; 0x0d
    6522:	3e 85       	ldd	r19, Y+14	; 0x0e
    6524:	4f 85       	ldd	r20, Y+15	; 0x0f
    6526:	58 89       	ldd	r21, Y+16	; 0x10
    6528:	69 81       	ldd	r22, Y+1	; 0x01
    652a:	7a 81       	ldd	r23, Y+2	; 0x02
    652c:	8b 81       	ldd	r24, Y+3	; 0x03
    652e:	9c 81       	ldd	r25, Y+4	; 0x04
    6530:	9e d3       	rcall	.+1852   	; 0x6c6e <__mulsf3>
    6532:	2d 85       	ldd	r18, Y+13	; 0x0d
    6534:	3e 85       	ldd	r19, Y+14	; 0x0e
    6536:	4f 85       	ldd	r20, Y+15	; 0x0f
    6538:	58 89       	ldd	r21, Y+16	; 0x10
    653a:	99 d3       	rcall	.+1842   	; 0x6c6e <__mulsf3>
    653c:	9b 01       	movw	r18, r22
    653e:	ac 01       	movw	r20, r24
    6540:	6d 81       	ldd	r22, Y+5	; 0x05
    6542:	7e 81       	ldd	r23, Y+6	; 0x06
    6544:	8f 81       	ldd	r24, Y+7	; 0x07
    6546:	98 85       	ldd	r25, Y+8	; 0x08
    6548:	90 d0       	rcall	.+288    	; 0x666a <__addsf3>
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	30 e4       	ldi	r19, 0x40	; 64
    654e:	4c e1       	ldi	r20, 0x1C	; 28
    6550:	54 e4       	ldi	r21, 0x44	; 68
    6552:	68 d1       	rcall	.+720    	; 0x6824 <__cmpsf2>
    6554:	88 23       	and	r24, r24
    6556:	64 f4       	brge	.+24     	; 0x6570 <main+0x718>
    6558:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    655c:	81 30       	cpi	r24, 0x01	; 1
    655e:	09 f0       	breq	.+2      	; 0x6562 <main+0x70a>
    6560:	60 c0       	rjmp	.+192    	; 0x6622 <main+0x7ca>
	  {
      flag_mumbai = 0;
    6562:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_india = 1;
    6566:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <flag_india>
	  flag_france = 0;
    656a:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    656e:	5f c0       	rjmp	.+190    	; 0x662e <main+0x7d6>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6570:	c7 01       	movw	r24, r14
    6572:	b6 01       	movw	r22, r12
    6574:	f9 d1       	rcall	.+1010   	; 0x6968 <__floatsisf>
    6576:	20 e0       	ldi	r18, 0x00	; 0
    6578:	30 e0       	ldi	r19, 0x00	; 0
    657a:	48 ec       	ldi	r20, 0xC8	; 200
    657c:	52 e4       	ldi	r21, 0x42	; 66
    657e:	59 d1       	rcall	.+690    	; 0x6832 <__divsf3>
    6580:	28 eb       	ldi	r18, 0xB8	; 184
    6582:	3e e1       	ldi	r19, 0x1E	; 30
    6584:	45 e1       	ldi	r20, 0x15	; 21
    6586:	50 e4       	ldi	r21, 0x40	; 64
    6588:	6f d0       	rcall	.+222    	; 0x6668 <__subsf3>
    658a:	6b 01       	movw	r12, r22
    658c:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    658e:	c5 01       	movw	r24, r10
    6590:	b4 01       	movw	r22, r8
    6592:	ea d1       	rcall	.+980    	; 0x6968 <__floatsisf>
    6594:	20 e0       	ldi	r18, 0x00	; 0
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	48 ec       	ldi	r20, 0xC8	; 200
    659a:	52 e4       	ldi	r21, 0x42	; 66
    659c:	4a d1       	rcall	.+660    	; 0x6832 <__divsf3>
    659e:	23 e3       	ldi	r18, 0x33	; 51
    65a0:	33 e3       	ldi	r19, 0x33	; 51
    65a2:	43 e4       	ldi	r20, 0x43	; 67
    65a4:	52 e4       	ldi	r21, 0x42	; 66
    65a6:	60 d0       	rcall	.+192    	; 0x6668 <__subsf3>
    65a8:	4b 01       	movw	r8, r22
    65aa:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    65ac:	c3 01       	movw	r24, r6
    65ae:	b2 01       	movw	r22, r4
    65b0:	db d1       	rcall	.+950    	; 0x6968 <__floatsisf>
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	48 ec       	ldi	r20, 0xC8	; 200
    65b8:	52 e4       	ldi	r21, 0x42	; 66
    65ba:	3b d1       	rcall	.+630    	; 0x6832 <__divsf3>
    65bc:	28 ed       	ldi	r18, 0xD8	; 216
    65be:	3f e0       	ldi	r19, 0x0F	; 15
    65c0:	49 e4       	ldi	r20, 0x49	; 73
    65c2:	50 e4       	ldi	r21, 0x40	; 64
    65c4:	54 d3       	rcall	.+1704   	; 0x6c6e <__mulsf3>
    65c6:	20 e0       	ldi	r18, 0x00	; 0
    65c8:	30 e0       	ldi	r19, 0x00	; 0
    65ca:	44 e3       	ldi	r20, 0x34	; 52
    65cc:	53 e4       	ldi	r21, 0x43	; 67
    65ce:	31 d1       	rcall	.+610    	; 0x6832 <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    65d0:	2d d1       	rcall	.+602    	; 0x682c <cos>
    65d2:	2b 01       	movw	r4, r22
    65d4:	3c 01       	movw	r6, r24
    65d6:	a5 01       	movw	r20, r10
    65d8:	94 01       	movw	r18, r8
    65da:	c5 01       	movw	r24, r10
    65dc:	b4 01       	movw	r22, r8
    65de:	47 d3       	rcall	.+1678   	; 0x6c6e <__mulsf3>
    65e0:	4b 01       	movw	r8, r22
    65e2:	5c 01       	movw	r10, r24
    65e4:	a7 01       	movw	r20, r14
    65e6:	96 01       	movw	r18, r12
    65e8:	c3 01       	movw	r24, r6
    65ea:	b2 01       	movw	r22, r4
    65ec:	40 d3       	rcall	.+1664   	; 0x6c6e <__mulsf3>
    65ee:	a7 01       	movw	r20, r14
    65f0:	96 01       	movw	r18, r12
    65f2:	3d d3       	rcall	.+1658   	; 0x6c6e <__mulsf3>
    65f4:	9b 01       	movw	r18, r22
    65f6:	ac 01       	movw	r20, r24
    65f8:	c5 01       	movw	r24, r10
    65fa:	b4 01       	movw	r22, r8
    65fc:	36 d0       	rcall	.+108    	; 0x666a <__addsf3>
    65fe:	20 e0       	ldi	r18, 0x00	; 0
    6600:	30 e0       	ldi	r19, 0x00	; 0
    6602:	48 ec       	ldi	r20, 0xC8	; 200
    6604:	52 e4       	ldi	r21, 0x42	; 66
    6606:	0e d1       	rcall	.+540    	; 0x6824 <__cmpsf2>
    6608:	88 23       	and	r24, r24
    660a:	5c f4       	brge	.+22     	; 0x6622 <main+0x7ca>
    660c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    6610:	81 30       	cpi	r24, 0x01	; 1
    6612:	39 f4       	brne	.+14     	; 0x6622 <main+0x7ca>
      {
	  flag_mumbai = 0;
    6614:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_france = 1;
    6618:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <flag_france>
	  flag_india = 0;
    661c:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
    6620:	06 c0       	rjmp	.+12     	; 0x662e <main+0x7d6>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    6622:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
	  flag_india = 0;
    6626:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
	  flag_mumbai = 0;
    662a:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    662e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UniversalCycles>
    6632:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UniversalCycles+0x1>
    6636:	01 96       	adiw	r24, 0x01	; 1
    6638:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <UniversalCycles+0x1>
    663c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <UniversalCycles>
    //}
	//////////////////////////////////
	overflow=tot_overflow-overflow;
    6640:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
	counter_value = TCNT1 + (65535-counter_value);
    6644:	8c b5       	in	r24, 0x2c	; 44
    6646:	9d b5       	in	r25, 0x2d	; 45
	//transmit_UART0((uint8_t)(net_time>>8));
	//transmit_UART0((uint8_t)(net_time>>16));
	//transmit_UART0((uint8_t)(net_time>>24));
	//transmit_UART0('\r');
	//////////////////////////////////
	timer_wait_reset();
    6648:	b0 db       	rcall	.-2208   	; 0x5daa <timer_wait_reset>
	//wdt_disable();
  }
    664a:	4c cc       	rjmp	.-1896   	; 0x5ee4 <main+0x8c>

0000664c <acos>:
    664c:	9f 93       	push	r25
    664e:	9f 77       	andi	r25, 0x7F	; 127
    6650:	04 d2       	rcall	.+1032   	; 0x6a5a <__fp_arccos>
    6652:	0f 90       	pop	r0
    6654:	00 20       	and	r0, r0
    6656:	3a f4       	brpl	.+14     	; 0x6666 <acos+0x1a>
    6658:	90 58       	subi	r25, 0x80	; 128
    665a:	a2 ea       	ldi	r26, 0xA2	; 162
    665c:	2a ed       	ldi	r18, 0xDA	; 218
    665e:	3f e0       	ldi	r19, 0x0F	; 15
    6660:	49 e4       	ldi	r20, 0x49	; 73
    6662:	50 e4       	ldi	r21, 0x40	; 64
    6664:	13 d0       	rcall	.+38     	; 0x668c <__addsf3x>
    6666:	ad c2       	rjmp	.+1370   	; 0x6bc2 <__fp_round>

00006668 <__subsf3>:
    6668:	50 58       	subi	r21, 0x80	; 128

0000666a <__addsf3>:
    666a:	bb 27       	eor	r27, r27
    666c:	aa 27       	eor	r26, r26
    666e:	0e d0       	rcall	.+28     	; 0x668c <__addsf3x>
    6670:	a8 c2       	rjmp	.+1360   	; 0x6bc2 <__fp_round>
    6672:	71 d2       	rcall	.+1250   	; 0x6b56 <__fp_pscA>
    6674:	30 f0       	brcs	.+12     	; 0x6682 <__addsf3+0x18>
    6676:	76 d2       	rcall	.+1260   	; 0x6b64 <__fp_pscB>
    6678:	20 f0       	brcs	.+8      	; 0x6682 <__addsf3+0x18>
    667a:	31 f4       	brne	.+12     	; 0x6688 <__addsf3+0x1e>
    667c:	9f 3f       	cpi	r25, 0xFF	; 255
    667e:	11 f4       	brne	.+4      	; 0x6684 <__addsf3+0x1a>
    6680:	1e f4       	brtc	.+6      	; 0x6688 <__addsf3+0x1e>
    6682:	30 c2       	rjmp	.+1120   	; 0x6ae4 <__fp_nan>
    6684:	0e f4       	brtc	.+2      	; 0x6688 <__addsf3+0x1e>
    6686:	e0 95       	com	r30
    6688:	e7 fb       	bst	r30, 7
    668a:	26 c2       	rjmp	.+1100   	; 0x6ad8 <__fp_inf>

0000668c <__addsf3x>:
    668c:	e9 2f       	mov	r30, r25
    668e:	bb d2       	rcall	.+1398   	; 0x6c06 <__fp_split3>
    6690:	80 f3       	brcs	.-32     	; 0x6672 <__addsf3+0x8>
    6692:	ba 17       	cp	r27, r26
    6694:	62 07       	cpc	r22, r18
    6696:	73 07       	cpc	r23, r19
    6698:	84 07       	cpc	r24, r20
    669a:	95 07       	cpc	r25, r21
    669c:	18 f0       	brcs	.+6      	; 0x66a4 <__addsf3x+0x18>
    669e:	71 f4       	brne	.+28     	; 0x66bc <__addsf3x+0x30>
    66a0:	9e f5       	brtc	.+102    	; 0x6708 <__addsf3x+0x7c>
    66a2:	d3 c2       	rjmp	.+1446   	; 0x6c4a <__fp_zero>
    66a4:	0e f4       	brtc	.+2      	; 0x66a8 <__addsf3x+0x1c>
    66a6:	e0 95       	com	r30
    66a8:	0b 2e       	mov	r0, r27
    66aa:	ba 2f       	mov	r27, r26
    66ac:	a0 2d       	mov	r26, r0
    66ae:	0b 01       	movw	r0, r22
    66b0:	b9 01       	movw	r22, r18
    66b2:	90 01       	movw	r18, r0
    66b4:	0c 01       	movw	r0, r24
    66b6:	ca 01       	movw	r24, r20
    66b8:	a0 01       	movw	r20, r0
    66ba:	11 24       	eor	r1, r1
    66bc:	ff 27       	eor	r31, r31
    66be:	59 1b       	sub	r21, r25
    66c0:	99 f0       	breq	.+38     	; 0x66e8 <__addsf3x+0x5c>
    66c2:	59 3f       	cpi	r21, 0xF9	; 249
    66c4:	50 f4       	brcc	.+20     	; 0x66da <__addsf3x+0x4e>
    66c6:	50 3e       	cpi	r21, 0xE0	; 224
    66c8:	68 f1       	brcs	.+90     	; 0x6724 <__addsf3x+0x98>
    66ca:	1a 16       	cp	r1, r26
    66cc:	f0 40       	sbci	r31, 0x00	; 0
    66ce:	a2 2f       	mov	r26, r18
    66d0:	23 2f       	mov	r18, r19
    66d2:	34 2f       	mov	r19, r20
    66d4:	44 27       	eor	r20, r20
    66d6:	58 5f       	subi	r21, 0xF8	; 248
    66d8:	f3 cf       	rjmp	.-26     	; 0x66c0 <__addsf3x+0x34>
    66da:	46 95       	lsr	r20
    66dc:	37 95       	ror	r19
    66de:	27 95       	ror	r18
    66e0:	a7 95       	ror	r26
    66e2:	f0 40       	sbci	r31, 0x00	; 0
    66e4:	53 95       	inc	r21
    66e6:	c9 f7       	brne	.-14     	; 0x66da <__addsf3x+0x4e>
    66e8:	7e f4       	brtc	.+30     	; 0x6708 <__addsf3x+0x7c>
    66ea:	1f 16       	cp	r1, r31
    66ec:	ba 0b       	sbc	r27, r26
    66ee:	62 0b       	sbc	r22, r18
    66f0:	73 0b       	sbc	r23, r19
    66f2:	84 0b       	sbc	r24, r20
    66f4:	ba f0       	brmi	.+46     	; 0x6724 <__addsf3x+0x98>
    66f6:	91 50       	subi	r25, 0x01	; 1
    66f8:	a1 f0       	breq	.+40     	; 0x6722 <__addsf3x+0x96>
    66fa:	ff 0f       	add	r31, r31
    66fc:	bb 1f       	adc	r27, r27
    66fe:	66 1f       	adc	r22, r22
    6700:	77 1f       	adc	r23, r23
    6702:	88 1f       	adc	r24, r24
    6704:	c2 f7       	brpl	.-16     	; 0x66f6 <__addsf3x+0x6a>
    6706:	0e c0       	rjmp	.+28     	; 0x6724 <__addsf3x+0x98>
    6708:	ba 0f       	add	r27, r26
    670a:	62 1f       	adc	r22, r18
    670c:	73 1f       	adc	r23, r19
    670e:	84 1f       	adc	r24, r20
    6710:	48 f4       	brcc	.+18     	; 0x6724 <__addsf3x+0x98>
    6712:	87 95       	ror	r24
    6714:	77 95       	ror	r23
    6716:	67 95       	ror	r22
    6718:	b7 95       	ror	r27
    671a:	f7 95       	ror	r31
    671c:	9e 3f       	cpi	r25, 0xFE	; 254
    671e:	08 f0       	brcs	.+2      	; 0x6722 <__addsf3x+0x96>
    6720:	b3 cf       	rjmp	.-154    	; 0x6688 <__addsf3+0x1e>
    6722:	93 95       	inc	r25
    6724:	88 0f       	add	r24, r24
    6726:	08 f0       	brcs	.+2      	; 0x672a <__addsf3x+0x9e>
    6728:	99 27       	eor	r25, r25
    672a:	ee 0f       	add	r30, r30
    672c:	97 95       	ror	r25
    672e:	87 95       	ror	r24
    6730:	08 95       	ret

00006732 <asin>:
    6732:	9f 93       	push	r25
    6734:	9f 77       	andi	r25, 0x7F	; 127
    6736:	ee e3       	ldi	r30, 0x3E	; 62
    6738:	89 37       	cpi	r24, 0x79	; 121
    673a:	9e 07       	cpc	r25, r30
    673c:	20 f4       	brcc	.+8      	; 0x6746 <asin+0x14>
    673e:	e2 ea       	ldi	r30, 0xA2	; 162
    6740:	f0 e0       	ldi	r31, 0x00	; 0
    6742:	f8 d1       	rcall	.+1008   	; 0x6b34 <__fp_powsodd>
    6744:	09 c0       	rjmp	.+18     	; 0x6758 <asin+0x26>
    6746:	89 d1       	rcall	.+786    	; 0x6a5a <__fp_arccos>
    6748:	90 58       	subi	r25, 0x80	; 128
    674a:	a2 ea       	ldi	r26, 0xA2	; 162
    674c:	2a ed       	ldi	r18, 0xDA	; 218
    674e:	3f e0       	ldi	r19, 0x0F	; 15
    6750:	49 ec       	ldi	r20, 0xC9	; 201
    6752:	5f e3       	ldi	r21, 0x3F	; 63
    6754:	9b df       	rcall	.-202    	; 0x668c <__addsf3x>
    6756:	35 d2       	rcall	.+1130   	; 0x6bc2 <__fp_round>
    6758:	0f 90       	pop	r0
    675a:	07 fc       	sbrc	r0, 7
    675c:	90 58       	subi	r25, 0x80	; 128
    675e:	08 95       	ret
    6760:	fa d1       	rcall	.+1012   	; 0x6b56 <__fp_pscA>
    6762:	58 f0       	brcs	.+22     	; 0x677a <asin+0x48>
    6764:	80 e8       	ldi	r24, 0x80	; 128
    6766:	91 e0       	ldi	r25, 0x01	; 1
    6768:	09 f4       	brne	.+2      	; 0x676c <asin+0x3a>
    676a:	9e ef       	ldi	r25, 0xFE	; 254
    676c:	fb d1       	rcall	.+1014   	; 0x6b64 <__fp_pscB>
    676e:	28 f0       	brcs	.+10     	; 0x677a <asin+0x48>
    6770:	40 e8       	ldi	r20, 0x80	; 128
    6772:	51 e0       	ldi	r21, 0x01	; 1
    6774:	59 f4       	brne	.+22     	; 0x678c <atan2+0xe>
    6776:	5e ef       	ldi	r21, 0xFE	; 254
    6778:	09 c0       	rjmp	.+18     	; 0x678c <atan2+0xe>
    677a:	b4 c1       	rjmp	.+872    	; 0x6ae4 <__fp_nan>
    677c:	66 c2       	rjmp	.+1228   	; 0x6c4a <__fp_zero>

0000677e <atan2>:
    677e:	e9 2f       	mov	r30, r25
    6780:	e0 78       	andi	r30, 0x80	; 128
    6782:	41 d2       	rcall	.+1154   	; 0x6c06 <__fp_split3>
    6784:	68 f3       	brcs	.-38     	; 0x6760 <asin+0x2e>
    6786:	09 2e       	mov	r0, r25
    6788:	05 2a       	or	r0, r21
    678a:	c1 f3       	breq	.-16     	; 0x677c <asin+0x4a>
    678c:	26 17       	cp	r18, r22
    678e:	37 07       	cpc	r19, r23
    6790:	48 07       	cpc	r20, r24
    6792:	59 07       	cpc	r21, r25
    6794:	38 f0       	brcs	.+14     	; 0x67a4 <atan2+0x26>
    6796:	0e 2e       	mov	r0, r30
    6798:	07 f8       	bld	r0, 7
    679a:	e0 25       	eor	r30, r0
    679c:	69 f0       	breq	.+26     	; 0x67b8 <atan2+0x3a>
    679e:	e0 25       	eor	r30, r0
    67a0:	e0 64       	ori	r30, 0x40	; 64
    67a2:	0a c0       	rjmp	.+20     	; 0x67b8 <atan2+0x3a>
    67a4:	ef 63       	ori	r30, 0x3F	; 63
    67a6:	07 f8       	bld	r0, 7
    67a8:	00 94       	com	r0
    67aa:	07 fa       	bst	r0, 7
    67ac:	db 01       	movw	r26, r22
    67ae:	b9 01       	movw	r22, r18
    67b0:	9d 01       	movw	r18, r26
    67b2:	dc 01       	movw	r26, r24
    67b4:	ca 01       	movw	r24, r20
    67b6:	ad 01       	movw	r20, r26
    67b8:	ef 93       	push	r30
    67ba:	4a d0       	rcall	.+148    	; 0x6850 <__divsf3_pse>
    67bc:	02 d2       	rcall	.+1028   	; 0x6bc2 <__fp_round>
    67be:	0a d0       	rcall	.+20     	; 0x67d4 <atan>
    67c0:	5f 91       	pop	r21
    67c2:	55 23       	and	r21, r21
    67c4:	31 f0       	breq	.+12     	; 0x67d2 <atan2+0x54>
    67c6:	2b ed       	ldi	r18, 0xDB	; 219
    67c8:	3f e0       	ldi	r19, 0x0F	; 15
    67ca:	49 e4       	ldi	r20, 0x49	; 73
    67cc:	50 fd       	sbrc	r21, 0
    67ce:	49 ec       	ldi	r20, 0xC9	; 201
    67d0:	4c cf       	rjmp	.-360    	; 0x666a <__addsf3>
    67d2:	08 95       	ret

000067d4 <atan>:
    67d4:	df 93       	push	r29
    67d6:	dd 27       	eor	r29, r29
    67d8:	b9 2f       	mov	r27, r25
    67da:	bf 77       	andi	r27, 0x7F	; 127
    67dc:	40 e8       	ldi	r20, 0x80	; 128
    67de:	5f e3       	ldi	r21, 0x3F	; 63
    67e0:	16 16       	cp	r1, r22
    67e2:	17 06       	cpc	r1, r23
    67e4:	48 07       	cpc	r20, r24
    67e6:	5b 07       	cpc	r21, r27
    67e8:	10 f4       	brcc	.+4      	; 0x67ee <atan+0x1a>
    67ea:	d9 2f       	mov	r29, r25
    67ec:	39 d2       	rcall	.+1138   	; 0x6c60 <inverse>
    67ee:	9f 93       	push	r25
    67f0:	8f 93       	push	r24
    67f2:	7f 93       	push	r23
    67f4:	6f 93       	push	r22
    67f6:	32 d3       	rcall	.+1636   	; 0x6e5c <square>
    67f8:	e6 eb       	ldi	r30, 0xB6	; 182
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	76 d1       	rcall	.+748    	; 0x6aea <__fp_powser>
    67fe:	e1 d1       	rcall	.+962    	; 0x6bc2 <__fp_round>
    6800:	2f 91       	pop	r18
    6802:	3f 91       	pop	r19
    6804:	4f 91       	pop	r20
    6806:	5f 91       	pop	r21
    6808:	3e d2       	rcall	.+1148   	; 0x6c86 <__mulsf3x>
    680a:	dd 23       	and	r29, r29
    680c:	49 f0       	breq	.+18     	; 0x6820 <atan+0x4c>
    680e:	90 58       	subi	r25, 0x80	; 128
    6810:	a2 ea       	ldi	r26, 0xA2	; 162
    6812:	2a ed       	ldi	r18, 0xDA	; 218
    6814:	3f e0       	ldi	r19, 0x0F	; 15
    6816:	49 ec       	ldi	r20, 0xC9	; 201
    6818:	5f e3       	ldi	r21, 0x3F	; 63
    681a:	d0 78       	andi	r29, 0x80	; 128
    681c:	5d 27       	eor	r21, r29
    681e:	36 df       	rcall	.-404    	; 0x668c <__addsf3x>
    6820:	df 91       	pop	r29
    6822:	cf c1       	rjmp	.+926    	; 0x6bc2 <__fp_round>

00006824 <__cmpsf2>:
    6824:	35 d1       	rcall	.+618    	; 0x6a90 <__fp_cmp>
    6826:	08 f4       	brcc	.+2      	; 0x682a <__cmpsf2+0x6>
    6828:	81 e0       	ldi	r24, 0x01	; 1
    682a:	08 95       	ret

0000682c <cos>:
    682c:	a3 d1       	rcall	.+838    	; 0x6b74 <__fp_rempio2>
    682e:	e3 95       	inc	r30
    6830:	d9 c1       	rjmp	.+946    	; 0x6be4 <__fp_sinus>

00006832 <__divsf3>:
    6832:	0c d0       	rcall	.+24     	; 0x684c <__divsf3x>
    6834:	c6 c1       	rjmp	.+908    	; 0x6bc2 <__fp_round>
    6836:	96 d1       	rcall	.+812    	; 0x6b64 <__fp_pscB>
    6838:	40 f0       	brcs	.+16     	; 0x684a <__divsf3+0x18>
    683a:	8d d1       	rcall	.+794    	; 0x6b56 <__fp_pscA>
    683c:	30 f0       	brcs	.+12     	; 0x684a <__divsf3+0x18>
    683e:	21 f4       	brne	.+8      	; 0x6848 <__divsf3+0x16>
    6840:	5f 3f       	cpi	r21, 0xFF	; 255
    6842:	19 f0       	breq	.+6      	; 0x684a <__divsf3+0x18>
    6844:	49 c1       	rjmp	.+658    	; 0x6ad8 <__fp_inf>
    6846:	51 11       	cpse	r21, r1
    6848:	01 c2       	rjmp	.+1026   	; 0x6c4c <__fp_szero>
    684a:	4c c1       	rjmp	.+664    	; 0x6ae4 <__fp_nan>

0000684c <__divsf3x>:
    684c:	dc d1       	rcall	.+952    	; 0x6c06 <__fp_split3>
    684e:	98 f3       	brcs	.-26     	; 0x6836 <__divsf3+0x4>

00006850 <__divsf3_pse>:
    6850:	99 23       	and	r25, r25
    6852:	c9 f3       	breq	.-14     	; 0x6846 <__divsf3+0x14>
    6854:	55 23       	and	r21, r21
    6856:	b1 f3       	breq	.-20     	; 0x6844 <__divsf3+0x12>
    6858:	95 1b       	sub	r25, r21
    685a:	55 0b       	sbc	r21, r21
    685c:	bb 27       	eor	r27, r27
    685e:	aa 27       	eor	r26, r26
    6860:	62 17       	cp	r22, r18
    6862:	73 07       	cpc	r23, r19
    6864:	84 07       	cpc	r24, r20
    6866:	38 f0       	brcs	.+14     	; 0x6876 <__divsf3_pse+0x26>
    6868:	9f 5f       	subi	r25, 0xFF	; 255
    686a:	5f 4f       	sbci	r21, 0xFF	; 255
    686c:	22 0f       	add	r18, r18
    686e:	33 1f       	adc	r19, r19
    6870:	44 1f       	adc	r20, r20
    6872:	aa 1f       	adc	r26, r26
    6874:	a9 f3       	breq	.-22     	; 0x6860 <__divsf3_pse+0x10>
    6876:	33 d0       	rcall	.+102    	; 0x68de <__divsf3_pse+0x8e>
    6878:	0e 2e       	mov	r0, r30
    687a:	3a f0       	brmi	.+14     	; 0x688a <__divsf3_pse+0x3a>
    687c:	e0 e8       	ldi	r30, 0x80	; 128
    687e:	30 d0       	rcall	.+96     	; 0x68e0 <__divsf3_pse+0x90>
    6880:	91 50       	subi	r25, 0x01	; 1
    6882:	50 40       	sbci	r21, 0x00	; 0
    6884:	e6 95       	lsr	r30
    6886:	00 1c       	adc	r0, r0
    6888:	ca f7       	brpl	.-14     	; 0x687c <__divsf3_pse+0x2c>
    688a:	29 d0       	rcall	.+82     	; 0x68de <__divsf3_pse+0x8e>
    688c:	fe 2f       	mov	r31, r30
    688e:	27 d0       	rcall	.+78     	; 0x68de <__divsf3_pse+0x8e>
    6890:	66 0f       	add	r22, r22
    6892:	77 1f       	adc	r23, r23
    6894:	88 1f       	adc	r24, r24
    6896:	bb 1f       	adc	r27, r27
    6898:	26 17       	cp	r18, r22
    689a:	37 07       	cpc	r19, r23
    689c:	48 07       	cpc	r20, r24
    689e:	ab 07       	cpc	r26, r27
    68a0:	b0 e8       	ldi	r27, 0x80	; 128
    68a2:	09 f0       	breq	.+2      	; 0x68a6 <__divsf3_pse+0x56>
    68a4:	bb 0b       	sbc	r27, r27
    68a6:	80 2d       	mov	r24, r0
    68a8:	bf 01       	movw	r22, r30
    68aa:	ff 27       	eor	r31, r31
    68ac:	93 58       	subi	r25, 0x83	; 131
    68ae:	5f 4f       	sbci	r21, 0xFF	; 255
    68b0:	2a f0       	brmi	.+10     	; 0x68bc <__divsf3_pse+0x6c>
    68b2:	9e 3f       	cpi	r25, 0xFE	; 254
    68b4:	51 05       	cpc	r21, r1
    68b6:	68 f0       	brcs	.+26     	; 0x68d2 <__divsf3_pse+0x82>
    68b8:	0f c1       	rjmp	.+542    	; 0x6ad8 <__fp_inf>
    68ba:	c8 c1       	rjmp	.+912    	; 0x6c4c <__fp_szero>
    68bc:	5f 3f       	cpi	r21, 0xFF	; 255
    68be:	ec f3       	brlt	.-6      	; 0x68ba <__divsf3_pse+0x6a>
    68c0:	98 3e       	cpi	r25, 0xE8	; 232
    68c2:	dc f3       	brlt	.-10     	; 0x68ba <__divsf3_pse+0x6a>
    68c4:	86 95       	lsr	r24
    68c6:	77 95       	ror	r23
    68c8:	67 95       	ror	r22
    68ca:	b7 95       	ror	r27
    68cc:	f7 95       	ror	r31
    68ce:	9f 5f       	subi	r25, 0xFF	; 255
    68d0:	c9 f7       	brne	.-14     	; 0x68c4 <__divsf3_pse+0x74>
    68d2:	88 0f       	add	r24, r24
    68d4:	91 1d       	adc	r25, r1
    68d6:	96 95       	lsr	r25
    68d8:	87 95       	ror	r24
    68da:	97 f9       	bld	r25, 7
    68dc:	08 95       	ret
    68de:	e1 e0       	ldi	r30, 0x01	; 1
    68e0:	66 0f       	add	r22, r22
    68e2:	77 1f       	adc	r23, r23
    68e4:	88 1f       	adc	r24, r24
    68e6:	bb 1f       	adc	r27, r27
    68e8:	62 17       	cp	r22, r18
    68ea:	73 07       	cpc	r23, r19
    68ec:	84 07       	cpc	r24, r20
    68ee:	ba 07       	cpc	r27, r26
    68f0:	20 f0       	brcs	.+8      	; 0x68fa <__divsf3_pse+0xaa>
    68f2:	62 1b       	sub	r22, r18
    68f4:	73 0b       	sbc	r23, r19
    68f6:	84 0b       	sbc	r24, r20
    68f8:	ba 0b       	sbc	r27, r26
    68fa:	ee 1f       	adc	r30, r30
    68fc:	88 f7       	brcc	.-30     	; 0x68e0 <__divsf3_pse+0x90>
    68fe:	e0 95       	com	r30
    6900:	08 95       	ret

00006902 <__fixsfsi>:
    6902:	04 d0       	rcall	.+8      	; 0x690c <__fixunssfsi>
    6904:	68 94       	set
    6906:	b1 11       	cpse	r27, r1
    6908:	a1 c1       	rjmp	.+834    	; 0x6c4c <__fp_szero>
    690a:	08 95       	ret

0000690c <__fixunssfsi>:
    690c:	84 d1       	rcall	.+776    	; 0x6c16 <__fp_splitA>
    690e:	88 f0       	brcs	.+34     	; 0x6932 <__fixunssfsi+0x26>
    6910:	9f 57       	subi	r25, 0x7F	; 127
    6912:	90 f0       	brcs	.+36     	; 0x6938 <__fixunssfsi+0x2c>
    6914:	b9 2f       	mov	r27, r25
    6916:	99 27       	eor	r25, r25
    6918:	b7 51       	subi	r27, 0x17	; 23
    691a:	a0 f0       	brcs	.+40     	; 0x6944 <__fixunssfsi+0x38>
    691c:	d1 f0       	breq	.+52     	; 0x6952 <__fixunssfsi+0x46>
    691e:	66 0f       	add	r22, r22
    6920:	77 1f       	adc	r23, r23
    6922:	88 1f       	adc	r24, r24
    6924:	99 1f       	adc	r25, r25
    6926:	1a f0       	brmi	.+6      	; 0x692e <__fixunssfsi+0x22>
    6928:	ba 95       	dec	r27
    692a:	c9 f7       	brne	.-14     	; 0x691e <__fixunssfsi+0x12>
    692c:	12 c0       	rjmp	.+36     	; 0x6952 <__fixunssfsi+0x46>
    692e:	b1 30       	cpi	r27, 0x01	; 1
    6930:	81 f0       	breq	.+32     	; 0x6952 <__fixunssfsi+0x46>
    6932:	8b d1       	rcall	.+790    	; 0x6c4a <__fp_zero>
    6934:	b1 e0       	ldi	r27, 0x01	; 1
    6936:	08 95       	ret
    6938:	88 c1       	rjmp	.+784    	; 0x6c4a <__fp_zero>
    693a:	67 2f       	mov	r22, r23
    693c:	78 2f       	mov	r23, r24
    693e:	88 27       	eor	r24, r24
    6940:	b8 5f       	subi	r27, 0xF8	; 248
    6942:	39 f0       	breq	.+14     	; 0x6952 <__fixunssfsi+0x46>
    6944:	b9 3f       	cpi	r27, 0xF9	; 249
    6946:	cc f3       	brlt	.-14     	; 0x693a <__fixunssfsi+0x2e>
    6948:	86 95       	lsr	r24
    694a:	77 95       	ror	r23
    694c:	67 95       	ror	r22
    694e:	b3 95       	inc	r27
    6950:	d9 f7       	brne	.-10     	; 0x6948 <__fixunssfsi+0x3c>
    6952:	3e f4       	brtc	.+14     	; 0x6962 <__fixunssfsi+0x56>
    6954:	90 95       	com	r25
    6956:	80 95       	com	r24
    6958:	70 95       	com	r23
    695a:	61 95       	neg	r22
    695c:	7f 4f       	sbci	r23, 0xFF	; 255
    695e:	8f 4f       	sbci	r24, 0xFF	; 255
    6960:	9f 4f       	sbci	r25, 0xFF	; 255
    6962:	08 95       	ret

00006964 <__floatunsisf>:
    6964:	e8 94       	clt
    6966:	09 c0       	rjmp	.+18     	; 0x697a <__floatsisf+0x12>

00006968 <__floatsisf>:
    6968:	97 fb       	bst	r25, 7
    696a:	3e f4       	brtc	.+14     	; 0x697a <__floatsisf+0x12>
    696c:	90 95       	com	r25
    696e:	80 95       	com	r24
    6970:	70 95       	com	r23
    6972:	61 95       	neg	r22
    6974:	7f 4f       	sbci	r23, 0xFF	; 255
    6976:	8f 4f       	sbci	r24, 0xFF	; 255
    6978:	9f 4f       	sbci	r25, 0xFF	; 255
    697a:	99 23       	and	r25, r25
    697c:	a9 f0       	breq	.+42     	; 0x69a8 <__floatsisf+0x40>
    697e:	f9 2f       	mov	r31, r25
    6980:	96 e9       	ldi	r25, 0x96	; 150
    6982:	bb 27       	eor	r27, r27
    6984:	93 95       	inc	r25
    6986:	f6 95       	lsr	r31
    6988:	87 95       	ror	r24
    698a:	77 95       	ror	r23
    698c:	67 95       	ror	r22
    698e:	b7 95       	ror	r27
    6990:	f1 11       	cpse	r31, r1
    6992:	f8 cf       	rjmp	.-16     	; 0x6984 <__floatsisf+0x1c>
    6994:	fa f4       	brpl	.+62     	; 0x69d4 <__floatsisf+0x6c>
    6996:	bb 0f       	add	r27, r27
    6998:	11 f4       	brne	.+4      	; 0x699e <__floatsisf+0x36>
    699a:	60 ff       	sbrs	r22, 0
    699c:	1b c0       	rjmp	.+54     	; 0x69d4 <__floatsisf+0x6c>
    699e:	6f 5f       	subi	r22, 0xFF	; 255
    69a0:	7f 4f       	sbci	r23, 0xFF	; 255
    69a2:	8f 4f       	sbci	r24, 0xFF	; 255
    69a4:	9f 4f       	sbci	r25, 0xFF	; 255
    69a6:	16 c0       	rjmp	.+44     	; 0x69d4 <__floatsisf+0x6c>
    69a8:	88 23       	and	r24, r24
    69aa:	11 f0       	breq	.+4      	; 0x69b0 <__floatsisf+0x48>
    69ac:	96 e9       	ldi	r25, 0x96	; 150
    69ae:	11 c0       	rjmp	.+34     	; 0x69d2 <__floatsisf+0x6a>
    69b0:	77 23       	and	r23, r23
    69b2:	21 f0       	breq	.+8      	; 0x69bc <__floatsisf+0x54>
    69b4:	9e e8       	ldi	r25, 0x8E	; 142
    69b6:	87 2f       	mov	r24, r23
    69b8:	76 2f       	mov	r23, r22
    69ba:	05 c0       	rjmp	.+10     	; 0x69c6 <__floatsisf+0x5e>
    69bc:	66 23       	and	r22, r22
    69be:	71 f0       	breq	.+28     	; 0x69dc <__floatsisf+0x74>
    69c0:	96 e8       	ldi	r25, 0x86	; 134
    69c2:	86 2f       	mov	r24, r22
    69c4:	70 e0       	ldi	r23, 0x00	; 0
    69c6:	60 e0       	ldi	r22, 0x00	; 0
    69c8:	2a f0       	brmi	.+10     	; 0x69d4 <__floatsisf+0x6c>
    69ca:	9a 95       	dec	r25
    69cc:	66 0f       	add	r22, r22
    69ce:	77 1f       	adc	r23, r23
    69d0:	88 1f       	adc	r24, r24
    69d2:	da f7       	brpl	.-10     	; 0x69ca <__floatsisf+0x62>
    69d4:	88 0f       	add	r24, r24
    69d6:	96 95       	lsr	r25
    69d8:	87 95       	ror	r24
    69da:	97 f9       	bld	r25, 7
    69dc:	08 95       	ret

000069de <__floatundisf>:
    69de:	e8 94       	clt

000069e0 <__fp_di2sf>:
    69e0:	f9 2f       	mov	r31, r25
    69e2:	96 eb       	ldi	r25, 0xB6	; 182
    69e4:	ff 23       	and	r31, r31
    69e6:	81 f0       	breq	.+32     	; 0x6a08 <__fp_di2sf+0x28>
    69e8:	12 16       	cp	r1, r18
    69ea:	13 06       	cpc	r1, r19
    69ec:	14 06       	cpc	r1, r20
    69ee:	44 0b       	sbc	r20, r20
    69f0:	93 95       	inc	r25
    69f2:	f6 95       	lsr	r31
    69f4:	87 95       	ror	r24
    69f6:	77 95       	ror	r23
    69f8:	67 95       	ror	r22
    69fa:	57 95       	ror	r21
    69fc:	40 40       	sbci	r20, 0x00	; 0
    69fe:	ff 23       	and	r31, r31
    6a00:	b9 f7       	brne	.-18     	; 0x69f0 <__fp_di2sf+0x10>
    6a02:	1b c0       	rjmp	.+54     	; 0x6a3a <__fp_di2sf+0x5a>
    6a04:	99 27       	eor	r25, r25
    6a06:	08 95       	ret
    6a08:	88 23       	and	r24, r24
    6a0a:	51 f4       	brne	.+20     	; 0x6a20 <__fp_di2sf+0x40>
    6a0c:	98 50       	subi	r25, 0x08	; 8
    6a0e:	d2 f7       	brpl	.-12     	; 0x6a04 <__fp_di2sf+0x24>
    6a10:	87 2b       	or	r24, r23
    6a12:	76 2f       	mov	r23, r22
    6a14:	65 2f       	mov	r22, r21
    6a16:	54 2f       	mov	r21, r20
    6a18:	43 2f       	mov	r20, r19
    6a1a:	32 2f       	mov	r19, r18
    6a1c:	20 e0       	ldi	r18, 0x00	; 0
    6a1e:	b1 f3       	breq	.-20     	; 0x6a0c <__fp_di2sf+0x2c>
    6a20:	12 16       	cp	r1, r18
    6a22:	13 06       	cpc	r1, r19
    6a24:	14 06       	cpc	r1, r20
    6a26:	44 0b       	sbc	r20, r20
    6a28:	88 23       	and	r24, r24
    6a2a:	3a f0       	brmi	.+14     	; 0x6a3a <__fp_di2sf+0x5a>
    6a2c:	9a 95       	dec	r25
    6a2e:	44 0f       	add	r20, r20
    6a30:	55 1f       	adc	r21, r21
    6a32:	66 1f       	adc	r22, r22
    6a34:	77 1f       	adc	r23, r23
    6a36:	88 1f       	adc	r24, r24
    6a38:	ca f7       	brpl	.-14     	; 0x6a2c <__fp_di2sf+0x4c>
    6a3a:	55 23       	and	r21, r21
    6a3c:	4a f4       	brpl	.+18     	; 0x6a50 <__fp_di2sf+0x70>
    6a3e:	44 0f       	add	r20, r20
    6a40:	55 1f       	adc	r21, r21
    6a42:	11 f4       	brne	.+4      	; 0x6a48 <__fp_di2sf+0x68>
    6a44:	60 ff       	sbrs	r22, 0
    6a46:	04 c0       	rjmp	.+8      	; 0x6a50 <__fp_di2sf+0x70>
    6a48:	6f 5f       	subi	r22, 0xFF	; 255
    6a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a50:	88 0f       	add	r24, r24
    6a52:	96 95       	lsr	r25
    6a54:	87 95       	ror	r24
    6a56:	97 f9       	bld	r25, 7
    6a58:	08 95       	ret

00006a5a <__fp_arccos>:
    6a5a:	df 93       	push	r29
    6a5c:	cf 93       	push	r28
    6a5e:	1f 93       	push	r17
    6a60:	0f 93       	push	r16
    6a62:	8b 01       	movw	r16, r22
    6a64:	ec 01       	movw	r28, r24
    6a66:	e3 ee       	ldi	r30, 0xE3	; 227
    6a68:	f0 e0       	ldi	r31, 0x00	; 0
    6a6a:	3f d0       	rcall	.+126    	; 0x6aea <__fp_powser>
    6a6c:	aa d0       	rcall	.+340    	; 0x6bc2 <__fp_round>
    6a6e:	98 01       	movw	r18, r16
    6a70:	ae 01       	movw	r20, r28
    6a72:	8b 01       	movw	r16, r22
    6a74:	ec 01       	movw	r28, r24
    6a76:	60 e0       	ldi	r22, 0x00	; 0
    6a78:	70 e0       	ldi	r23, 0x00	; 0
    6a7a:	80 e8       	ldi	r24, 0x80	; 128
    6a7c:	9f e3       	ldi	r25, 0x3F	; 63
    6a7e:	f4 dd       	rcall	.-1048   	; 0x6668 <__subsf3>
    6a80:	af d1       	rcall	.+862    	; 0x6de0 <sqrt>
    6a82:	98 01       	movw	r18, r16
    6a84:	ae 01       	movw	r20, r28
    6a86:	0f 91       	pop	r16
    6a88:	1f 91       	pop	r17
    6a8a:	cf 91       	pop	r28
    6a8c:	df 91       	pop	r29
    6a8e:	fb c0       	rjmp	.+502    	; 0x6c86 <__mulsf3x>

00006a90 <__fp_cmp>:
    6a90:	99 0f       	add	r25, r25
    6a92:	00 08       	sbc	r0, r0
    6a94:	55 0f       	add	r21, r21
    6a96:	aa 0b       	sbc	r26, r26
    6a98:	e0 e8       	ldi	r30, 0x80	; 128
    6a9a:	fe ef       	ldi	r31, 0xFE	; 254
    6a9c:	16 16       	cp	r1, r22
    6a9e:	17 06       	cpc	r1, r23
    6aa0:	e8 07       	cpc	r30, r24
    6aa2:	f9 07       	cpc	r31, r25
    6aa4:	c0 f0       	brcs	.+48     	; 0x6ad6 <__fp_cmp+0x46>
    6aa6:	12 16       	cp	r1, r18
    6aa8:	13 06       	cpc	r1, r19
    6aaa:	e4 07       	cpc	r30, r20
    6aac:	f5 07       	cpc	r31, r21
    6aae:	98 f0       	brcs	.+38     	; 0x6ad6 <__fp_cmp+0x46>
    6ab0:	62 1b       	sub	r22, r18
    6ab2:	73 0b       	sbc	r23, r19
    6ab4:	84 0b       	sbc	r24, r20
    6ab6:	95 0b       	sbc	r25, r21
    6ab8:	39 f4       	brne	.+14     	; 0x6ac8 <__fp_cmp+0x38>
    6aba:	0a 26       	eor	r0, r26
    6abc:	61 f0       	breq	.+24     	; 0x6ad6 <__fp_cmp+0x46>
    6abe:	23 2b       	or	r18, r19
    6ac0:	24 2b       	or	r18, r20
    6ac2:	25 2b       	or	r18, r21
    6ac4:	21 f4       	brne	.+8      	; 0x6ace <__fp_cmp+0x3e>
    6ac6:	08 95       	ret
    6ac8:	0a 26       	eor	r0, r26
    6aca:	09 f4       	brne	.+2      	; 0x6ace <__fp_cmp+0x3e>
    6acc:	a1 40       	sbci	r26, 0x01	; 1
    6ace:	a6 95       	lsr	r26
    6ad0:	8f ef       	ldi	r24, 0xFF	; 255
    6ad2:	81 1d       	adc	r24, r1
    6ad4:	81 1d       	adc	r24, r1
    6ad6:	08 95       	ret

00006ad8 <__fp_inf>:
    6ad8:	97 f9       	bld	r25, 7
    6ada:	9f 67       	ori	r25, 0x7F	; 127
    6adc:	80 e8       	ldi	r24, 0x80	; 128
    6ade:	70 e0       	ldi	r23, 0x00	; 0
    6ae0:	60 e0       	ldi	r22, 0x00	; 0
    6ae2:	08 95       	ret

00006ae4 <__fp_nan>:
    6ae4:	9f ef       	ldi	r25, 0xFF	; 255
    6ae6:	80 ec       	ldi	r24, 0xC0	; 192
    6ae8:	08 95       	ret

00006aea <__fp_powser>:
    6aea:	df 93       	push	r29
    6aec:	cf 93       	push	r28
    6aee:	1f 93       	push	r17
    6af0:	0f 93       	push	r16
    6af2:	ff 92       	push	r15
    6af4:	ef 92       	push	r14
    6af6:	df 92       	push	r13
    6af8:	7b 01       	movw	r14, r22
    6afa:	8c 01       	movw	r16, r24
    6afc:	68 94       	set
    6afe:	05 c0       	rjmp	.+10     	; 0x6b0a <__fp_powser+0x20>
    6b00:	da 2e       	mov	r13, r26
    6b02:	ef 01       	movw	r28, r30
    6b04:	c0 d0       	rcall	.+384    	; 0x6c86 <__mulsf3x>
    6b06:	fe 01       	movw	r30, r28
    6b08:	e8 94       	clt
    6b0a:	a5 91       	lpm	r26, Z+
    6b0c:	25 91       	lpm	r18, Z+
    6b0e:	35 91       	lpm	r19, Z+
    6b10:	45 91       	lpm	r20, Z+
    6b12:	55 91       	lpm	r21, Z+
    6b14:	ae f3       	brts	.-22     	; 0x6b00 <__fp_powser+0x16>
    6b16:	ef 01       	movw	r28, r30
    6b18:	b9 dd       	rcall	.-1166   	; 0x668c <__addsf3x>
    6b1a:	fe 01       	movw	r30, r28
    6b1c:	97 01       	movw	r18, r14
    6b1e:	a8 01       	movw	r20, r16
    6b20:	da 94       	dec	r13
    6b22:	79 f7       	brne	.-34     	; 0x6b02 <__fp_powser+0x18>
    6b24:	df 90       	pop	r13
    6b26:	ef 90       	pop	r14
    6b28:	ff 90       	pop	r15
    6b2a:	0f 91       	pop	r16
    6b2c:	1f 91       	pop	r17
    6b2e:	cf 91       	pop	r28
    6b30:	df 91       	pop	r29
    6b32:	08 95       	ret

00006b34 <__fp_powsodd>:
    6b34:	9f 93       	push	r25
    6b36:	8f 93       	push	r24
    6b38:	7f 93       	push	r23
    6b3a:	6f 93       	push	r22
    6b3c:	ff 93       	push	r31
    6b3e:	ef 93       	push	r30
    6b40:	9b 01       	movw	r18, r22
    6b42:	ac 01       	movw	r20, r24
    6b44:	94 d0       	rcall	.+296    	; 0x6c6e <__mulsf3>
    6b46:	ef 91       	pop	r30
    6b48:	ff 91       	pop	r31
    6b4a:	cf df       	rcall	.-98     	; 0x6aea <__fp_powser>
    6b4c:	2f 91       	pop	r18
    6b4e:	3f 91       	pop	r19
    6b50:	4f 91       	pop	r20
    6b52:	5f 91       	pop	r21
    6b54:	8c c0       	rjmp	.+280    	; 0x6c6e <__mulsf3>

00006b56 <__fp_pscA>:
    6b56:	00 24       	eor	r0, r0
    6b58:	0a 94       	dec	r0
    6b5a:	16 16       	cp	r1, r22
    6b5c:	17 06       	cpc	r1, r23
    6b5e:	18 06       	cpc	r1, r24
    6b60:	09 06       	cpc	r0, r25
    6b62:	08 95       	ret

00006b64 <__fp_pscB>:
    6b64:	00 24       	eor	r0, r0
    6b66:	0a 94       	dec	r0
    6b68:	12 16       	cp	r1, r18
    6b6a:	13 06       	cpc	r1, r19
    6b6c:	14 06       	cpc	r1, r20
    6b6e:	05 06       	cpc	r0, r21
    6b70:	08 95       	ret
    6b72:	b8 cf       	rjmp	.-144    	; 0x6ae4 <__fp_nan>

00006b74 <__fp_rempio2>:
    6b74:	50 d0       	rcall	.+160    	; 0x6c16 <__fp_splitA>
    6b76:	e8 f3       	brcs	.-6      	; 0x6b72 <__fp_pscB+0xe>
    6b78:	e8 94       	clt
    6b7a:	e0 e0       	ldi	r30, 0x00	; 0
    6b7c:	bb 27       	eor	r27, r27
    6b7e:	9f 57       	subi	r25, 0x7F	; 127
    6b80:	f0 f0       	brcs	.+60     	; 0x6bbe <__fp_rempio2+0x4a>
    6b82:	2a ed       	ldi	r18, 0xDA	; 218
    6b84:	3f e0       	ldi	r19, 0x0F	; 15
    6b86:	49 ec       	ldi	r20, 0xC9	; 201
    6b88:	06 c0       	rjmp	.+12     	; 0x6b96 <__fp_rempio2+0x22>
    6b8a:	ee 0f       	add	r30, r30
    6b8c:	bb 0f       	add	r27, r27
    6b8e:	66 1f       	adc	r22, r22
    6b90:	77 1f       	adc	r23, r23
    6b92:	88 1f       	adc	r24, r24
    6b94:	28 f0       	brcs	.+10     	; 0x6ba0 <__fp_rempio2+0x2c>
    6b96:	b2 3a       	cpi	r27, 0xA2	; 162
    6b98:	62 07       	cpc	r22, r18
    6b9a:	73 07       	cpc	r23, r19
    6b9c:	84 07       	cpc	r24, r20
    6b9e:	28 f0       	brcs	.+10     	; 0x6baa <__fp_rempio2+0x36>
    6ba0:	b2 5a       	subi	r27, 0xA2	; 162
    6ba2:	62 0b       	sbc	r22, r18
    6ba4:	73 0b       	sbc	r23, r19
    6ba6:	84 0b       	sbc	r24, r20
    6ba8:	e3 95       	inc	r30
    6baa:	9a 95       	dec	r25
    6bac:	72 f7       	brpl	.-36     	; 0x6b8a <__fp_rempio2+0x16>
    6bae:	80 38       	cpi	r24, 0x80	; 128
    6bb0:	30 f4       	brcc	.+12     	; 0x6bbe <__fp_rempio2+0x4a>
    6bb2:	9a 95       	dec	r25
    6bb4:	bb 0f       	add	r27, r27
    6bb6:	66 1f       	adc	r22, r22
    6bb8:	77 1f       	adc	r23, r23
    6bba:	88 1f       	adc	r24, r24
    6bbc:	d2 f7       	brpl	.-12     	; 0x6bb2 <__fp_rempio2+0x3e>
    6bbe:	90 48       	sbci	r25, 0x80	; 128
    6bc0:	83 c1       	rjmp	.+774    	; 0x6ec8 <__fp_mpack_finite>

00006bc2 <__fp_round>:
    6bc2:	09 2e       	mov	r0, r25
    6bc4:	03 94       	inc	r0
    6bc6:	00 0c       	add	r0, r0
    6bc8:	11 f4       	brne	.+4      	; 0x6bce <__fp_round+0xc>
    6bca:	88 23       	and	r24, r24
    6bcc:	52 f0       	brmi	.+20     	; 0x6be2 <__fp_round+0x20>
    6bce:	bb 0f       	add	r27, r27
    6bd0:	40 f4       	brcc	.+16     	; 0x6be2 <__fp_round+0x20>
    6bd2:	bf 2b       	or	r27, r31
    6bd4:	11 f4       	brne	.+4      	; 0x6bda <__fp_round+0x18>
    6bd6:	60 ff       	sbrs	r22, 0
    6bd8:	04 c0       	rjmp	.+8      	; 0x6be2 <__fp_round+0x20>
    6bda:	6f 5f       	subi	r22, 0xFF	; 255
    6bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bde:	8f 4f       	sbci	r24, 0xFF	; 255
    6be0:	9f 4f       	sbci	r25, 0xFF	; 255
    6be2:	08 95       	ret

00006be4 <__fp_sinus>:
    6be4:	ef 93       	push	r30
    6be6:	e0 ff       	sbrs	r30, 0
    6be8:	06 c0       	rjmp	.+12     	; 0x6bf6 <__fp_sinus+0x12>
    6bea:	a2 ea       	ldi	r26, 0xA2	; 162
    6bec:	2a ed       	ldi	r18, 0xDA	; 218
    6bee:	3f e0       	ldi	r19, 0x0F	; 15
    6bf0:	49 ec       	ldi	r20, 0xC9	; 201
    6bf2:	5f eb       	ldi	r21, 0xBF	; 191
    6bf4:	4b dd       	rcall	.-1386   	; 0x668c <__addsf3x>
    6bf6:	e5 df       	rcall	.-54     	; 0x6bc2 <__fp_round>
    6bf8:	0f 90       	pop	r0
    6bfa:	03 94       	inc	r0
    6bfc:	01 fc       	sbrc	r0, 1
    6bfe:	90 58       	subi	r25, 0x80	; 128
    6c00:	eb e0       	ldi	r30, 0x0B	; 11
    6c02:	f1 e0       	ldi	r31, 0x01	; 1
    6c04:	97 cf       	rjmp	.-210    	; 0x6b34 <__fp_powsodd>

00006c06 <__fp_split3>:
    6c06:	57 fd       	sbrc	r21, 7
    6c08:	90 58       	subi	r25, 0x80	; 128
    6c0a:	44 0f       	add	r20, r20
    6c0c:	55 1f       	adc	r21, r21
    6c0e:	59 f0       	breq	.+22     	; 0x6c26 <__fp_splitA+0x10>
    6c10:	5f 3f       	cpi	r21, 0xFF	; 255
    6c12:	71 f0       	breq	.+28     	; 0x6c30 <__fp_splitA+0x1a>
    6c14:	47 95       	ror	r20

00006c16 <__fp_splitA>:
    6c16:	88 0f       	add	r24, r24
    6c18:	97 fb       	bst	r25, 7
    6c1a:	99 1f       	adc	r25, r25
    6c1c:	61 f0       	breq	.+24     	; 0x6c36 <__fp_splitA+0x20>
    6c1e:	9f 3f       	cpi	r25, 0xFF	; 255
    6c20:	79 f0       	breq	.+30     	; 0x6c40 <__fp_splitA+0x2a>
    6c22:	87 95       	ror	r24
    6c24:	08 95       	ret
    6c26:	12 16       	cp	r1, r18
    6c28:	13 06       	cpc	r1, r19
    6c2a:	14 06       	cpc	r1, r20
    6c2c:	55 1f       	adc	r21, r21
    6c2e:	f2 cf       	rjmp	.-28     	; 0x6c14 <__fp_split3+0xe>
    6c30:	46 95       	lsr	r20
    6c32:	f1 df       	rcall	.-30     	; 0x6c16 <__fp_splitA>
    6c34:	08 c0       	rjmp	.+16     	; 0x6c46 <__fp_splitA+0x30>
    6c36:	16 16       	cp	r1, r22
    6c38:	17 06       	cpc	r1, r23
    6c3a:	18 06       	cpc	r1, r24
    6c3c:	99 1f       	adc	r25, r25
    6c3e:	f1 cf       	rjmp	.-30     	; 0x6c22 <__fp_splitA+0xc>
    6c40:	86 95       	lsr	r24
    6c42:	71 05       	cpc	r23, r1
    6c44:	61 05       	cpc	r22, r1
    6c46:	08 94       	sec
    6c48:	08 95       	ret

00006c4a <__fp_zero>:
    6c4a:	e8 94       	clt

00006c4c <__fp_szero>:
    6c4c:	bb 27       	eor	r27, r27
    6c4e:	66 27       	eor	r22, r22
    6c50:	77 27       	eor	r23, r23
    6c52:	cb 01       	movw	r24, r22
    6c54:	97 f9       	bld	r25, 7
    6c56:	08 95       	ret

00006c58 <__gesf2>:
    6c58:	1b df       	rcall	.-458    	; 0x6a90 <__fp_cmp>
    6c5a:	08 f4       	brcc	.+2      	; 0x6c5e <__gesf2+0x6>
    6c5c:	8f ef       	ldi	r24, 0xFF	; 255
    6c5e:	08 95       	ret

00006c60 <inverse>:
    6c60:	9b 01       	movw	r18, r22
    6c62:	ac 01       	movw	r20, r24
    6c64:	60 e0       	ldi	r22, 0x00	; 0
    6c66:	70 e0       	ldi	r23, 0x00	; 0
    6c68:	80 e8       	ldi	r24, 0x80	; 128
    6c6a:	9f e3       	ldi	r25, 0x3F	; 63
    6c6c:	e2 cd       	rjmp	.-1084   	; 0x6832 <__divsf3>

00006c6e <__mulsf3>:
    6c6e:	0b d0       	rcall	.+22     	; 0x6c86 <__mulsf3x>
    6c70:	a8 cf       	rjmp	.-176    	; 0x6bc2 <__fp_round>
    6c72:	71 df       	rcall	.-286    	; 0x6b56 <__fp_pscA>
    6c74:	28 f0       	brcs	.+10     	; 0x6c80 <__mulsf3+0x12>
    6c76:	76 df       	rcall	.-276    	; 0x6b64 <__fp_pscB>
    6c78:	18 f0       	brcs	.+6      	; 0x6c80 <__mulsf3+0x12>
    6c7a:	95 23       	and	r25, r21
    6c7c:	09 f0       	breq	.+2      	; 0x6c80 <__mulsf3+0x12>
    6c7e:	2c cf       	rjmp	.-424    	; 0x6ad8 <__fp_inf>
    6c80:	31 cf       	rjmp	.-414    	; 0x6ae4 <__fp_nan>
    6c82:	11 24       	eor	r1, r1
    6c84:	e3 cf       	rjmp	.-58     	; 0x6c4c <__fp_szero>

00006c86 <__mulsf3x>:
    6c86:	bf df       	rcall	.-130    	; 0x6c06 <__fp_split3>
    6c88:	a0 f3       	brcs	.-24     	; 0x6c72 <__mulsf3+0x4>

00006c8a <__mulsf3_pse>:
    6c8a:	95 9f       	mul	r25, r21
    6c8c:	d1 f3       	breq	.-12     	; 0x6c82 <__mulsf3+0x14>
    6c8e:	95 0f       	add	r25, r21
    6c90:	50 e0       	ldi	r21, 0x00	; 0
    6c92:	55 1f       	adc	r21, r21
    6c94:	62 9f       	mul	r22, r18
    6c96:	f0 01       	movw	r30, r0
    6c98:	72 9f       	mul	r23, r18
    6c9a:	bb 27       	eor	r27, r27
    6c9c:	f0 0d       	add	r31, r0
    6c9e:	b1 1d       	adc	r27, r1
    6ca0:	63 9f       	mul	r22, r19
    6ca2:	aa 27       	eor	r26, r26
    6ca4:	f0 0d       	add	r31, r0
    6ca6:	b1 1d       	adc	r27, r1
    6ca8:	aa 1f       	adc	r26, r26
    6caa:	64 9f       	mul	r22, r20
    6cac:	66 27       	eor	r22, r22
    6cae:	b0 0d       	add	r27, r0
    6cb0:	a1 1d       	adc	r26, r1
    6cb2:	66 1f       	adc	r22, r22
    6cb4:	82 9f       	mul	r24, r18
    6cb6:	22 27       	eor	r18, r18
    6cb8:	b0 0d       	add	r27, r0
    6cba:	a1 1d       	adc	r26, r1
    6cbc:	62 1f       	adc	r22, r18
    6cbe:	73 9f       	mul	r23, r19
    6cc0:	b0 0d       	add	r27, r0
    6cc2:	a1 1d       	adc	r26, r1
    6cc4:	62 1f       	adc	r22, r18
    6cc6:	83 9f       	mul	r24, r19
    6cc8:	a0 0d       	add	r26, r0
    6cca:	61 1d       	adc	r22, r1
    6ccc:	22 1f       	adc	r18, r18
    6cce:	74 9f       	mul	r23, r20
    6cd0:	33 27       	eor	r19, r19
    6cd2:	a0 0d       	add	r26, r0
    6cd4:	61 1d       	adc	r22, r1
    6cd6:	23 1f       	adc	r18, r19
    6cd8:	84 9f       	mul	r24, r20
    6cda:	60 0d       	add	r22, r0
    6cdc:	21 1d       	adc	r18, r1
    6cde:	82 2f       	mov	r24, r18
    6ce0:	76 2f       	mov	r23, r22
    6ce2:	6a 2f       	mov	r22, r26
    6ce4:	11 24       	eor	r1, r1
    6ce6:	9f 57       	subi	r25, 0x7F	; 127
    6ce8:	50 40       	sbci	r21, 0x00	; 0
    6cea:	8a f0       	brmi	.+34     	; 0x6d0e <__mulsf3_pse+0x84>
    6cec:	e1 f0       	breq	.+56     	; 0x6d26 <__mulsf3_pse+0x9c>
    6cee:	88 23       	and	r24, r24
    6cf0:	4a f0       	brmi	.+18     	; 0x6d04 <__mulsf3_pse+0x7a>
    6cf2:	ee 0f       	add	r30, r30
    6cf4:	ff 1f       	adc	r31, r31
    6cf6:	bb 1f       	adc	r27, r27
    6cf8:	66 1f       	adc	r22, r22
    6cfa:	77 1f       	adc	r23, r23
    6cfc:	88 1f       	adc	r24, r24
    6cfe:	91 50       	subi	r25, 0x01	; 1
    6d00:	50 40       	sbci	r21, 0x00	; 0
    6d02:	a9 f7       	brne	.-22     	; 0x6cee <__mulsf3_pse+0x64>
    6d04:	9e 3f       	cpi	r25, 0xFE	; 254
    6d06:	51 05       	cpc	r21, r1
    6d08:	70 f0       	brcs	.+28     	; 0x6d26 <__mulsf3_pse+0x9c>
    6d0a:	e6 ce       	rjmp	.-564    	; 0x6ad8 <__fp_inf>
    6d0c:	9f cf       	rjmp	.-194    	; 0x6c4c <__fp_szero>
    6d0e:	5f 3f       	cpi	r21, 0xFF	; 255
    6d10:	ec f3       	brlt	.-6      	; 0x6d0c <__mulsf3_pse+0x82>
    6d12:	98 3e       	cpi	r25, 0xE8	; 232
    6d14:	dc f3       	brlt	.-10     	; 0x6d0c <__mulsf3_pse+0x82>
    6d16:	86 95       	lsr	r24
    6d18:	77 95       	ror	r23
    6d1a:	67 95       	ror	r22
    6d1c:	b7 95       	ror	r27
    6d1e:	f7 95       	ror	r31
    6d20:	e7 95       	ror	r30
    6d22:	9f 5f       	subi	r25, 0xFF	; 255
    6d24:	c1 f7       	brne	.-16     	; 0x6d16 <__mulsf3_pse+0x8c>
    6d26:	fe 2b       	or	r31, r30
    6d28:	88 0f       	add	r24, r24
    6d2a:	91 1d       	adc	r25, r1
    6d2c:	96 95       	lsr	r25
    6d2e:	87 95       	ror	r24
    6d30:	97 f9       	bld	r25, 7
    6d32:	08 95       	ret

00006d34 <pow>:
    6d34:	fa 01       	movw	r30, r20
    6d36:	ee 0f       	add	r30, r30
    6d38:	ff 1f       	adc	r31, r31
    6d3a:	30 96       	adiw	r30, 0x00	; 0
    6d3c:	21 05       	cpc	r18, r1
    6d3e:	31 05       	cpc	r19, r1
    6d40:	99 f1       	breq	.+102    	; 0x6da8 <pow+0x74>
    6d42:	61 15       	cp	r22, r1
    6d44:	71 05       	cpc	r23, r1
    6d46:	61 f4       	brne	.+24     	; 0x6d60 <pow+0x2c>
    6d48:	80 38       	cpi	r24, 0x80	; 128
    6d4a:	bf e3       	ldi	r27, 0x3F	; 63
    6d4c:	9b 07       	cpc	r25, r27
    6d4e:	49 f1       	breq	.+82     	; 0x6da2 <pow+0x6e>
    6d50:	68 94       	set
    6d52:	90 38       	cpi	r25, 0x80	; 128
    6d54:	81 05       	cpc	r24, r1
    6d56:	61 f0       	breq	.+24     	; 0x6d70 <pow+0x3c>
    6d58:	80 38       	cpi	r24, 0x80	; 128
    6d5a:	bf ef       	ldi	r27, 0xFF	; 255
    6d5c:	9b 07       	cpc	r25, r27
    6d5e:	41 f0       	breq	.+16     	; 0x6d70 <pow+0x3c>
    6d60:	99 23       	and	r25, r25
    6d62:	42 f5       	brpl	.+80     	; 0x6db4 <pow+0x80>
    6d64:	ff 3f       	cpi	r31, 0xFF	; 255
    6d66:	e1 05       	cpc	r30, r1
    6d68:	31 05       	cpc	r19, r1
    6d6a:	21 05       	cpc	r18, r1
    6d6c:	11 f1       	breq	.+68     	; 0x6db2 <pow+0x7e>
    6d6e:	e8 94       	clt
    6d70:	08 94       	sec
    6d72:	e7 95       	ror	r30
    6d74:	d9 01       	movw	r26, r18
    6d76:	aa 23       	and	r26, r26
    6d78:	29 f4       	brne	.+10     	; 0x6d84 <pow+0x50>
    6d7a:	ab 2f       	mov	r26, r27
    6d7c:	be 2f       	mov	r27, r30
    6d7e:	f8 5f       	subi	r31, 0xF8	; 248
    6d80:	d0 f3       	brcs	.-12     	; 0x6d76 <pow+0x42>
    6d82:	10 c0       	rjmp	.+32     	; 0x6da4 <pow+0x70>
    6d84:	ff 5f       	subi	r31, 0xFF	; 255
    6d86:	70 f4       	brcc	.+28     	; 0x6da4 <pow+0x70>
    6d88:	a6 95       	lsr	r26
    6d8a:	e0 f7       	brcc	.-8      	; 0x6d84 <pow+0x50>
    6d8c:	f7 39       	cpi	r31, 0x97	; 151
    6d8e:	50 f0       	brcs	.+20     	; 0x6da4 <pow+0x70>
    6d90:	19 f0       	breq	.+6      	; 0x6d98 <pow+0x64>
    6d92:	ff 3a       	cpi	r31, 0xAF	; 175
    6d94:	38 f4       	brcc	.+14     	; 0x6da4 <pow+0x70>
    6d96:	9f 77       	andi	r25, 0x7F	; 127
    6d98:	9f 93       	push	r25
    6d9a:	0c d0       	rcall	.+24     	; 0x6db4 <pow+0x80>
    6d9c:	0f 90       	pop	r0
    6d9e:	07 fc       	sbrc	r0, 7
    6da0:	90 58       	subi	r25, 0x80	; 128
    6da2:	08 95       	ret
    6da4:	3e f0       	brts	.+14     	; 0x6db4 <pow+0x80>
    6da6:	9e ce       	rjmp	.-708    	; 0x6ae4 <__fp_nan>
    6da8:	60 e0       	ldi	r22, 0x00	; 0
    6daa:	70 e0       	ldi	r23, 0x00	; 0
    6dac:	80 e8       	ldi	r24, 0x80	; 128
    6dae:	9f e3       	ldi	r25, 0x3F	; 63
    6db0:	08 95       	ret
    6db2:	4f e7       	ldi	r20, 0x7F	; 127
    6db4:	9f 77       	andi	r25, 0x7F	; 127
    6db6:	5f 93       	push	r21
    6db8:	4f 93       	push	r20
    6dba:	3f 93       	push	r19
    6dbc:	2f 93       	push	r18
    6dbe:	d2 d0       	rcall	.+420    	; 0x6f64 <log>
    6dc0:	2f 91       	pop	r18
    6dc2:	3f 91       	pop	r19
    6dc4:	4f 91       	pop	r20
    6dc6:	5f 91       	pop	r21
    6dc8:	52 df       	rcall	.-348    	; 0x6c6e <__mulsf3>
    6dca:	50 c0       	rjmp	.+160    	; 0x6e6c <exp>

00006dcc <sin>:
    6dcc:	9f 93       	push	r25
    6dce:	d2 de       	rcall	.-604    	; 0x6b74 <__fp_rempio2>
    6dd0:	0f 90       	pop	r0
    6dd2:	07 fc       	sbrc	r0, 7
    6dd4:	ee 5f       	subi	r30, 0xFE	; 254
    6dd6:	06 cf       	rjmp	.-500    	; 0x6be4 <__fp_sinus>
    6dd8:	11 f4       	brne	.+4      	; 0x6dde <sin+0x12>
    6dda:	0e f4       	brtc	.+2      	; 0x6dde <sin+0x12>
    6ddc:	83 ce       	rjmp	.-762    	; 0x6ae4 <__fp_nan>
    6dde:	72 c0       	rjmp	.+228    	; 0x6ec4 <__fp_mpack>

00006de0 <sqrt>:
    6de0:	1a df       	rcall	.-460    	; 0x6c16 <__fp_splitA>
    6de2:	d0 f3       	brcs	.-12     	; 0x6dd8 <sin+0xc>
    6de4:	99 23       	and	r25, r25
    6de6:	d9 f3       	breq	.-10     	; 0x6dde <sin+0x12>
    6de8:	ce f3       	brts	.-14     	; 0x6ddc <sin+0x10>
    6dea:	9f 57       	subi	r25, 0x7F	; 127
    6dec:	55 0b       	sbc	r21, r21
    6dee:	87 ff       	sbrs	r24, 7
    6df0:	77 d0       	rcall	.+238    	; 0x6ee0 <__fp_norm2>
    6df2:	00 24       	eor	r0, r0
    6df4:	a0 e6       	ldi	r26, 0x60	; 96
    6df6:	40 ea       	ldi	r20, 0xA0	; 160
    6df8:	90 01       	movw	r18, r0
    6dfa:	80 58       	subi	r24, 0x80	; 128
    6dfc:	56 95       	lsr	r21
    6dfe:	97 95       	ror	r25
    6e00:	28 f4       	brcc	.+10     	; 0x6e0c <sqrt+0x2c>
    6e02:	80 5c       	subi	r24, 0xC0	; 192
    6e04:	66 0f       	add	r22, r22
    6e06:	77 1f       	adc	r23, r23
    6e08:	88 1f       	adc	r24, r24
    6e0a:	20 f0       	brcs	.+8      	; 0x6e14 <sqrt+0x34>
    6e0c:	26 17       	cp	r18, r22
    6e0e:	37 07       	cpc	r19, r23
    6e10:	48 07       	cpc	r20, r24
    6e12:	30 f4       	brcc	.+12     	; 0x6e20 <sqrt+0x40>
    6e14:	62 1b       	sub	r22, r18
    6e16:	73 0b       	sbc	r23, r19
    6e18:	84 0b       	sbc	r24, r20
    6e1a:	20 29       	or	r18, r0
    6e1c:	31 29       	or	r19, r1
    6e1e:	4a 2b       	or	r20, r26
    6e20:	a6 95       	lsr	r26
    6e22:	17 94       	ror	r1
    6e24:	07 94       	ror	r0
    6e26:	20 25       	eor	r18, r0
    6e28:	31 25       	eor	r19, r1
    6e2a:	4a 27       	eor	r20, r26
    6e2c:	58 f7       	brcc	.-42     	; 0x6e04 <sqrt+0x24>
    6e2e:	66 0f       	add	r22, r22
    6e30:	77 1f       	adc	r23, r23
    6e32:	88 1f       	adc	r24, r24
    6e34:	20 f0       	brcs	.+8      	; 0x6e3e <sqrt+0x5e>
    6e36:	26 17       	cp	r18, r22
    6e38:	37 07       	cpc	r19, r23
    6e3a:	48 07       	cpc	r20, r24
    6e3c:	30 f4       	brcc	.+12     	; 0x6e4a <sqrt+0x6a>
    6e3e:	62 0b       	sbc	r22, r18
    6e40:	73 0b       	sbc	r23, r19
    6e42:	84 0b       	sbc	r24, r20
    6e44:	20 0d       	add	r18, r0
    6e46:	31 1d       	adc	r19, r1
    6e48:	41 1d       	adc	r20, r1
    6e4a:	a0 95       	com	r26
    6e4c:	81 f7       	brne	.-32     	; 0x6e2e <sqrt+0x4e>
    6e4e:	b9 01       	movw	r22, r18
    6e50:	84 2f       	mov	r24, r20
    6e52:	91 58       	subi	r25, 0x81	; 129
    6e54:	88 0f       	add	r24, r24
    6e56:	96 95       	lsr	r25
    6e58:	87 95       	ror	r24
    6e5a:	08 95       	ret

00006e5c <square>:
    6e5c:	9b 01       	movw	r18, r22
    6e5e:	ac 01       	movw	r20, r24
    6e60:	06 cf       	rjmp	.-500    	; 0x6c6e <__mulsf3>
    6e62:	19 f4       	brne	.+6      	; 0x6e6a <square+0xe>
    6e64:	0e f0       	brts	.+2      	; 0x6e68 <square+0xc>
    6e66:	38 ce       	rjmp	.-912    	; 0x6ad8 <__fp_inf>
    6e68:	f0 ce       	rjmp	.-544    	; 0x6c4a <__fp_zero>
    6e6a:	3c ce       	rjmp	.-904    	; 0x6ae4 <__fp_nan>

00006e6c <exp>:
    6e6c:	d4 de       	rcall	.-600    	; 0x6c16 <__fp_splitA>
    6e6e:	c8 f3       	brcs	.-14     	; 0x6e62 <square+0x6>
    6e70:	96 38       	cpi	r25, 0x86	; 134
    6e72:	c0 f7       	brcc	.-16     	; 0x6e64 <square+0x8>
    6e74:	07 f8       	bld	r0, 7
    6e76:	0f 92       	push	r0
    6e78:	e8 94       	clt
    6e7a:	2b e3       	ldi	r18, 0x3B	; 59
    6e7c:	3a ea       	ldi	r19, 0xAA	; 170
    6e7e:	48 eb       	ldi	r20, 0xB8	; 184
    6e80:	5f e7       	ldi	r21, 0x7F	; 127
    6e82:	03 df       	rcall	.-506    	; 0x6c8a <__mulsf3_pse>
    6e84:	0f 92       	push	r0
    6e86:	0f 92       	push	r0
    6e88:	0f 92       	push	r0
    6e8a:	4d b7       	in	r20, 0x3d	; 61
    6e8c:	5e b7       	in	r21, 0x3e	; 62
    6e8e:	0f 92       	push	r0
    6e90:	a9 d0       	rcall	.+338    	; 0x6fe4 <modf>
    6e92:	e9 e2       	ldi	r30, 0x29	; 41
    6e94:	f1 e0       	ldi	r31, 0x01	; 1
    6e96:	29 de       	rcall	.-942    	; 0x6aea <__fp_powser>
    6e98:	4f 91       	pop	r20
    6e9a:	5f 91       	pop	r21
    6e9c:	ef 91       	pop	r30
    6e9e:	ff 91       	pop	r31
    6ea0:	e5 95       	asr	r30
    6ea2:	ee 1f       	adc	r30, r30
    6ea4:	ff 1f       	adc	r31, r31
    6ea6:	49 f0       	breq	.+18     	; 0x6eba <exp+0x4e>
    6ea8:	fe 57       	subi	r31, 0x7E	; 126
    6eaa:	e0 68       	ori	r30, 0x80	; 128
    6eac:	44 27       	eor	r20, r20
    6eae:	ee 0f       	add	r30, r30
    6eb0:	44 1f       	adc	r20, r20
    6eb2:	fa 95       	dec	r31
    6eb4:	e1 f7       	brne	.-8      	; 0x6eae <exp+0x42>
    6eb6:	41 95       	neg	r20
    6eb8:	55 0b       	sbc	r21, r21
    6eba:	1b d0       	rcall	.+54     	; 0x6ef2 <ldexp>
    6ebc:	0f 90       	pop	r0
    6ebe:	07 fe       	sbrs	r0, 7
    6ec0:	cf ce       	rjmp	.-610    	; 0x6c60 <inverse>
    6ec2:	08 95       	ret

00006ec4 <__fp_mpack>:
    6ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    6ec6:	31 f0       	breq	.+12     	; 0x6ed4 <__fp_mpack_finite+0xc>

00006ec8 <__fp_mpack_finite>:
    6ec8:	91 50       	subi	r25, 0x01	; 1
    6eca:	20 f4       	brcc	.+8      	; 0x6ed4 <__fp_mpack_finite+0xc>
    6ecc:	87 95       	ror	r24
    6ece:	77 95       	ror	r23
    6ed0:	67 95       	ror	r22
    6ed2:	b7 95       	ror	r27
    6ed4:	88 0f       	add	r24, r24
    6ed6:	91 1d       	adc	r25, r1
    6ed8:	96 95       	lsr	r25
    6eda:	87 95       	ror	r24
    6edc:	97 f9       	bld	r25, 7
    6ede:	08 95       	ret

00006ee0 <__fp_norm2>:
    6ee0:	91 50       	subi	r25, 0x01	; 1
    6ee2:	50 40       	sbci	r21, 0x00	; 0
    6ee4:	66 0f       	add	r22, r22
    6ee6:	77 1f       	adc	r23, r23
    6ee8:	88 1f       	adc	r24, r24
    6eea:	d2 f7       	brpl	.-12     	; 0x6ee0 <__fp_norm2>
    6eec:	08 95       	ret
    6eee:	f4 cd       	rjmp	.-1048   	; 0x6ad8 <__fp_inf>
    6ef0:	e9 cf       	rjmp	.-46     	; 0x6ec4 <__fp_mpack>

00006ef2 <ldexp>:
    6ef2:	91 de       	rcall	.-734    	; 0x6c16 <__fp_splitA>
    6ef4:	e8 f3       	brcs	.-6      	; 0x6ef0 <__fp_norm2+0x10>
    6ef6:	99 23       	and	r25, r25
    6ef8:	d9 f3       	breq	.-10     	; 0x6ef0 <__fp_norm2+0x10>
    6efa:	94 0f       	add	r25, r20
    6efc:	51 1d       	adc	r21, r1
    6efe:	bb f3       	brvs	.-18     	; 0x6eee <__fp_norm2+0xe>
    6f00:	91 50       	subi	r25, 0x01	; 1
    6f02:	50 40       	sbci	r21, 0x00	; 0
    6f04:	94 f0       	brlt	.+36     	; 0x6f2a <ldexp+0x38>
    6f06:	59 f0       	breq	.+22     	; 0x6f1e <ldexp+0x2c>
    6f08:	88 23       	and	r24, r24
    6f0a:	32 f0       	brmi	.+12     	; 0x6f18 <ldexp+0x26>
    6f0c:	66 0f       	add	r22, r22
    6f0e:	77 1f       	adc	r23, r23
    6f10:	88 1f       	adc	r24, r24
    6f12:	91 50       	subi	r25, 0x01	; 1
    6f14:	50 40       	sbci	r21, 0x00	; 0
    6f16:	c1 f7       	brne	.-16     	; 0x6f08 <ldexp+0x16>
    6f18:	9e 3f       	cpi	r25, 0xFE	; 254
    6f1a:	51 05       	cpc	r21, r1
    6f1c:	44 f7       	brge	.-48     	; 0x6eee <__fp_norm2+0xe>
    6f1e:	88 0f       	add	r24, r24
    6f20:	91 1d       	adc	r25, r1
    6f22:	96 95       	lsr	r25
    6f24:	87 95       	ror	r24
    6f26:	97 f9       	bld	r25, 7
    6f28:	08 95       	ret
    6f2a:	5f 3f       	cpi	r21, 0xFF	; 255
    6f2c:	ac f0       	brlt	.+42     	; 0x6f58 <ldexp+0x66>
    6f2e:	98 3e       	cpi	r25, 0xE8	; 232
    6f30:	9c f0       	brlt	.+38     	; 0x6f58 <ldexp+0x66>
    6f32:	bb 27       	eor	r27, r27
    6f34:	86 95       	lsr	r24
    6f36:	77 95       	ror	r23
    6f38:	67 95       	ror	r22
    6f3a:	b7 95       	ror	r27
    6f3c:	08 f4       	brcc	.+2      	; 0x6f40 <ldexp+0x4e>
    6f3e:	b1 60       	ori	r27, 0x01	; 1
    6f40:	93 95       	inc	r25
    6f42:	c1 f7       	brne	.-16     	; 0x6f34 <ldexp+0x42>
    6f44:	bb 0f       	add	r27, r27
    6f46:	58 f7       	brcc	.-42     	; 0x6f1e <ldexp+0x2c>
    6f48:	11 f4       	brne	.+4      	; 0x6f4e <ldexp+0x5c>
    6f4a:	60 ff       	sbrs	r22, 0
    6f4c:	e8 cf       	rjmp	.-48     	; 0x6f1e <ldexp+0x2c>
    6f4e:	6f 5f       	subi	r22, 0xFF	; 255
    6f50:	7f 4f       	sbci	r23, 0xFF	; 255
    6f52:	8f 4f       	sbci	r24, 0xFF	; 255
    6f54:	9f 4f       	sbci	r25, 0xFF	; 255
    6f56:	e3 cf       	rjmp	.-58     	; 0x6f1e <ldexp+0x2c>
    6f58:	79 ce       	rjmp	.-782    	; 0x6c4c <__fp_szero>
    6f5a:	0e f0       	brts	.+2      	; 0x6f5e <ldexp+0x6c>
    6f5c:	b3 cf       	rjmp	.-154    	; 0x6ec4 <__fp_mpack>
    6f5e:	c2 cd       	rjmp	.-1148   	; 0x6ae4 <__fp_nan>
    6f60:	68 94       	set
    6f62:	ba cd       	rjmp	.-1164   	; 0x6ad8 <__fp_inf>

00006f64 <log>:
    6f64:	58 de       	rcall	.-848    	; 0x6c16 <__fp_splitA>
    6f66:	c8 f3       	brcs	.-14     	; 0x6f5a <ldexp+0x68>
    6f68:	99 23       	and	r25, r25
    6f6a:	d1 f3       	breq	.-12     	; 0x6f60 <ldexp+0x6e>
    6f6c:	c6 f3       	brts	.-16     	; 0x6f5e <ldexp+0x6c>
    6f6e:	df 93       	push	r29
    6f70:	cf 93       	push	r28
    6f72:	1f 93       	push	r17
    6f74:	0f 93       	push	r16
    6f76:	ff 92       	push	r15
    6f78:	c9 2f       	mov	r28, r25
    6f7a:	dd 27       	eor	r29, r29
    6f7c:	88 23       	and	r24, r24
    6f7e:	2a f0       	brmi	.+10     	; 0x6f8a <log+0x26>
    6f80:	21 97       	sbiw	r28, 0x01	; 1
    6f82:	66 0f       	add	r22, r22
    6f84:	77 1f       	adc	r23, r23
    6f86:	88 1f       	adc	r24, r24
    6f88:	da f7       	brpl	.-10     	; 0x6f80 <log+0x1c>
    6f8a:	20 e0       	ldi	r18, 0x00	; 0
    6f8c:	30 e0       	ldi	r19, 0x00	; 0
    6f8e:	40 e8       	ldi	r20, 0x80	; 128
    6f90:	5f eb       	ldi	r21, 0xBF	; 191
    6f92:	9f e3       	ldi	r25, 0x3F	; 63
    6f94:	88 39       	cpi	r24, 0x98	; 152
    6f96:	20 f0       	brcs	.+8      	; 0x6fa0 <log+0x3c>
    6f98:	80 3e       	cpi	r24, 0xE0	; 224
    6f9a:	30 f0       	brcs	.+12     	; 0x6fa8 <log+0x44>
    6f9c:	21 96       	adiw	r28, 0x01	; 1
    6f9e:	8f 77       	andi	r24, 0x7F	; 127
    6fa0:	64 db       	rcall	.-2360   	; 0x666a <__addsf3>
    6fa2:	e1 e5       	ldi	r30, 0x51	; 81
    6fa4:	f1 e0       	ldi	r31, 0x01	; 1
    6fa6:	03 c0       	rjmp	.+6      	; 0x6fae <log+0x4a>
    6fa8:	60 db       	rcall	.-2368   	; 0x666a <__addsf3>
    6faa:	ee e7       	ldi	r30, 0x7E	; 126
    6fac:	f1 e0       	ldi	r31, 0x01	; 1
    6fae:	9d dd       	rcall	.-1222   	; 0x6aea <__fp_powser>
    6fb0:	8b 01       	movw	r16, r22
    6fb2:	be 01       	movw	r22, r28
    6fb4:	ec 01       	movw	r28, r24
    6fb6:	fb 2e       	mov	r15, r27
    6fb8:	6f 57       	subi	r22, 0x7F	; 127
    6fba:	71 09       	sbc	r23, r1
    6fbc:	75 95       	asr	r23
    6fbe:	77 1f       	adc	r23, r23
    6fc0:	88 0b       	sbc	r24, r24
    6fc2:	99 0b       	sbc	r25, r25
    6fc4:	d1 dc       	rcall	.-1630   	; 0x6968 <__floatsisf>
    6fc6:	28 e1       	ldi	r18, 0x18	; 24
    6fc8:	32 e7       	ldi	r19, 0x72	; 114
    6fca:	41 e3       	ldi	r20, 0x31	; 49
    6fcc:	5f e3       	ldi	r21, 0x3F	; 63
    6fce:	5b de       	rcall	.-842    	; 0x6c86 <__mulsf3x>
    6fd0:	af 2d       	mov	r26, r15
    6fd2:	98 01       	movw	r18, r16
    6fd4:	ae 01       	movw	r20, r28
    6fd6:	ff 90       	pop	r15
    6fd8:	0f 91       	pop	r16
    6fda:	1f 91       	pop	r17
    6fdc:	cf 91       	pop	r28
    6fde:	df 91       	pop	r29
    6fe0:	55 db       	rcall	.-2390   	; 0x668c <__addsf3x>
    6fe2:	ef cd       	rjmp	.-1058   	; 0x6bc2 <__fp_round>

00006fe4 <modf>:
    6fe4:	fa 01       	movw	r30, r20
    6fe6:	dc 01       	movw	r26, r24
    6fe8:	aa 0f       	add	r26, r26
    6fea:	bb 1f       	adc	r27, r27
    6fec:	9b 01       	movw	r18, r22
    6fee:	ac 01       	movw	r20, r24
    6ff0:	bf 57       	subi	r27, 0x7F	; 127
    6ff2:	28 f4       	brcc	.+10     	; 0x6ffe <modf+0x1a>
    6ff4:	22 27       	eor	r18, r18
    6ff6:	33 27       	eor	r19, r19
    6ff8:	44 27       	eor	r20, r20
    6ffa:	50 78       	andi	r21, 0x80	; 128
    6ffc:	1f c0       	rjmp	.+62     	; 0x703c <modf+0x58>
    6ffe:	b7 51       	subi	r27, 0x17	; 23
    7000:	88 f4       	brcc	.+34     	; 0x7024 <modf+0x40>
    7002:	ab 2f       	mov	r26, r27
    7004:	00 24       	eor	r0, r0
    7006:	46 95       	lsr	r20
    7008:	37 95       	ror	r19
    700a:	27 95       	ror	r18
    700c:	01 1c       	adc	r0, r1
    700e:	a3 95       	inc	r26
    7010:	d2 f3       	brmi	.-12     	; 0x7006 <modf+0x22>
    7012:	00 20       	and	r0, r0
    7014:	69 f0       	breq	.+26     	; 0x7030 <modf+0x4c>
    7016:	22 0f       	add	r18, r18
    7018:	33 1f       	adc	r19, r19
    701a:	44 1f       	adc	r20, r20
    701c:	b3 95       	inc	r27
    701e:	da f3       	brmi	.-10     	; 0x7016 <modf+0x32>
    7020:	0d d0       	rcall	.+26     	; 0x703c <modf+0x58>
    7022:	22 cb       	rjmp	.-2492   	; 0x6668 <__subsf3>
    7024:	61 30       	cpi	r22, 0x01	; 1
    7026:	71 05       	cpc	r23, r1
    7028:	a0 e8       	ldi	r26, 0x80	; 128
    702a:	8a 07       	cpc	r24, r26
    702c:	b9 46       	sbci	r27, 0x69	; 105
    702e:	30 f4       	brcc	.+12     	; 0x703c <modf+0x58>
    7030:	9b 01       	movw	r18, r22
    7032:	ac 01       	movw	r20, r24
    7034:	66 27       	eor	r22, r22
    7036:	77 27       	eor	r23, r23
    7038:	88 27       	eor	r24, r24
    703a:	90 78       	andi	r25, 0x80	; 128
    703c:	30 96       	adiw	r30, 0x00	; 0
    703e:	21 f0       	breq	.+8      	; 0x7048 <modf+0x64>
    7040:	20 83       	st	Z, r18
    7042:	31 83       	std	Z+1, r19	; 0x01
    7044:	42 83       	std	Z+2, r20	; 0x02
    7046:	53 83       	std	Z+3, r21	; 0x03
    7048:	08 95       	ret

0000704a <__divmodhi4>:
    704a:	97 fb       	bst	r25, 7
    704c:	07 2e       	mov	r0, r23
    704e:	16 f4       	brtc	.+4      	; 0x7054 <__divmodhi4+0xa>
    7050:	00 94       	com	r0
    7052:	06 d0       	rcall	.+12     	; 0x7060 <__divmodhi4_neg1>
    7054:	77 fd       	sbrc	r23, 7
    7056:	08 d0       	rcall	.+16     	; 0x7068 <__divmodhi4_neg2>
    7058:	63 d0       	rcall	.+198    	; 0x7120 <__udivmodhi4>
    705a:	07 fc       	sbrc	r0, 7
    705c:	05 d0       	rcall	.+10     	; 0x7068 <__divmodhi4_neg2>
    705e:	3e f4       	brtc	.+14     	; 0x706e <__divmodhi4_exit>

00007060 <__divmodhi4_neg1>:
    7060:	90 95       	com	r25
    7062:	81 95       	neg	r24
    7064:	9f 4f       	sbci	r25, 0xFF	; 255
    7066:	08 95       	ret

00007068 <__divmodhi4_neg2>:
    7068:	70 95       	com	r23
    706a:	61 95       	neg	r22
    706c:	7f 4f       	sbci	r23, 0xFF	; 255

0000706e <__divmodhi4_exit>:
    706e:	08 95       	ret

00007070 <__tablejump2__>:
    7070:	ee 0f       	add	r30, r30
    7072:	ff 1f       	adc	r31, r31
    7074:	00 24       	eor	r0, r0
    7076:	00 1c       	adc	r0, r0
    7078:	0b be       	out	0x3b, r0	; 59
    707a:	07 90       	elpm	r0, Z+
    707c:	f6 91       	elpm	r31, Z
    707e:	e0 2d       	mov	r30, r0
    7080:	09 94       	ijmp

00007082 <__umulhisi3>:
    7082:	a2 9f       	mul	r26, r18
    7084:	b0 01       	movw	r22, r0
    7086:	b3 9f       	mul	r27, r19
    7088:	c0 01       	movw	r24, r0
    708a:	a3 9f       	mul	r26, r19
    708c:	70 0d       	add	r23, r0
    708e:	81 1d       	adc	r24, r1
    7090:	11 24       	eor	r1, r1
    7092:	91 1d       	adc	r25, r1
    7094:	b2 9f       	mul	r27, r18
    7096:	70 0d       	add	r23, r0
    7098:	81 1d       	adc	r24, r1
    709a:	11 24       	eor	r1, r1
    709c:	91 1d       	adc	r25, r1
    709e:	08 95       	ret

000070a0 <__ashldi3>:
    70a0:	0f 93       	push	r16
    70a2:	08 30       	cpi	r16, 0x08	; 8
    70a4:	90 f0       	brcs	.+36     	; 0x70ca <__ashldi3+0x2a>
    70a6:	98 2f       	mov	r25, r24
    70a8:	87 2f       	mov	r24, r23
    70aa:	76 2f       	mov	r23, r22
    70ac:	65 2f       	mov	r22, r21
    70ae:	54 2f       	mov	r21, r20
    70b0:	43 2f       	mov	r20, r19
    70b2:	32 2f       	mov	r19, r18
    70b4:	22 27       	eor	r18, r18
    70b6:	08 50       	subi	r16, 0x08	; 8
    70b8:	f4 cf       	rjmp	.-24     	; 0x70a2 <__ashldi3+0x2>
    70ba:	22 0f       	add	r18, r18
    70bc:	33 1f       	adc	r19, r19
    70be:	44 1f       	adc	r20, r20
    70c0:	55 1f       	adc	r21, r21
    70c2:	66 1f       	adc	r22, r22
    70c4:	77 1f       	adc	r23, r23
    70c6:	88 1f       	adc	r24, r24
    70c8:	99 1f       	adc	r25, r25
    70ca:	0a 95       	dec	r16
    70cc:	b2 f7       	brpl	.-20     	; 0x70ba <__ashldi3+0x1a>
    70ce:	0f 91       	pop	r16
    70d0:	08 95       	ret

000070d2 <__adddi3>:
    70d2:	2a 0d       	add	r18, r10
    70d4:	3b 1d       	adc	r19, r11
    70d6:	4c 1d       	adc	r20, r12
    70d8:	5d 1d       	adc	r21, r13
    70da:	6e 1d       	adc	r22, r14
    70dc:	7f 1d       	adc	r23, r15
    70de:	80 1f       	adc	r24, r16
    70e0:	91 1f       	adc	r25, r17
    70e2:	08 95       	ret

000070e4 <__adddi3_s8>:
    70e4:	00 24       	eor	r0, r0
    70e6:	a7 fd       	sbrc	r26, 7
    70e8:	00 94       	com	r0
    70ea:	2a 0f       	add	r18, r26
    70ec:	30 1d       	adc	r19, r0
    70ee:	40 1d       	adc	r20, r0
    70f0:	50 1d       	adc	r21, r0
    70f2:	60 1d       	adc	r22, r0
    70f4:	70 1d       	adc	r23, r0
    70f6:	80 1d       	adc	r24, r0
    70f8:	90 1d       	adc	r25, r0
    70fa:	08 95       	ret

000070fc <__subdi3>:
    70fc:	2a 19       	sub	r18, r10
    70fe:	3b 09       	sbc	r19, r11
    7100:	4c 09       	sbc	r20, r12
    7102:	5d 09       	sbc	r21, r13
    7104:	6e 09       	sbc	r22, r14
    7106:	7f 09       	sbc	r23, r15
    7108:	80 0b       	sbc	r24, r16
    710a:	91 0b       	sbc	r25, r17
    710c:	08 95       	ret

0000710e <__cmpdi2>:
    710e:	2a 15       	cp	r18, r10
    7110:	3b 05       	cpc	r19, r11
    7112:	4c 05       	cpc	r20, r12
    7114:	5d 05       	cpc	r21, r13
    7116:	6e 05       	cpc	r22, r14
    7118:	7f 05       	cpc	r23, r15
    711a:	80 07       	cpc	r24, r16
    711c:	91 07       	cpc	r25, r17
    711e:	08 95       	ret

00007120 <__udivmodhi4>:
    7120:	aa 1b       	sub	r26, r26
    7122:	bb 1b       	sub	r27, r27
    7124:	51 e1       	ldi	r21, 0x11	; 17
    7126:	07 c0       	rjmp	.+14     	; 0x7136 <__udivmodhi4_ep>

00007128 <__udivmodhi4_loop>:
    7128:	aa 1f       	adc	r26, r26
    712a:	bb 1f       	adc	r27, r27
    712c:	a6 17       	cp	r26, r22
    712e:	b7 07       	cpc	r27, r23
    7130:	10 f0       	brcs	.+4      	; 0x7136 <__udivmodhi4_ep>
    7132:	a6 1b       	sub	r26, r22
    7134:	b7 0b       	sbc	r27, r23

00007136 <__udivmodhi4_ep>:
    7136:	88 1f       	adc	r24, r24
    7138:	99 1f       	adc	r25, r25
    713a:	5a 95       	dec	r21
    713c:	a9 f7       	brne	.-22     	; 0x7128 <__udivmodhi4_loop>
    713e:	80 95       	com	r24
    7140:	90 95       	com	r25
    7142:	bc 01       	movw	r22, r24
    7144:	cd 01       	movw	r24, r26
    7146:	08 95       	ret

00007148 <_exit>:
    7148:	f8 94       	cli

0000714a <__stop_program>:
    714a:	ff cf       	rjmp	.-2      	; 0x714a <__stop_program>
