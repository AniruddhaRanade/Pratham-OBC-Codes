
xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00006d60  00006df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039c  00800192  00800192  00006e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00006ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006be2  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017bc  00000000  00000000  0000dea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ee9  00000000  00000000  0000f662  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fc8  00000000  00000000  0001254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d8d  00000000  00000000  00013514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004eb7  00000000  00000000  000142a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00019158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 09 2d 	jmp	0x5a12	; 0x5a12 <__vector_14>
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2e 0c       	add	r2, r14
      8e:	37 0c       	add	r3, r7
      90:	40 0c       	add	r4, r0
      92:	49 0c       	add	r4, r9
      94:	52 0c       	add	r5, r2
      96:	5b 0c       	add	r5, r11
      98:	64 0c       	add	r6, r4
      9a:	6d 0c       	add	r6, r13
      9c:	76 0c       	add	r7, r6
      9e:	7f 0c       	add	r7, r15
      a0:	88 0c       	add	r8, r8
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1e4>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	e0 e6       	ldi	r30, 0x60	; 96
     7e0:	fd e6       	ldi	r31, 0x6D	; 109
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a2 39       	cpi	r26, 0x92	; 146
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a2 e9       	ldi	r26, 0x92	; 146
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	ae 32       	cpi	r26, 0x2E	; 46
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <main>
     806:	0c 94 ae 36 	jmp	0x6d5c	; 0x6d5c <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6a 97       	sbiw	r28, 0x1a	; 26
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9a 8f       	std	Y+26, r25	; 0x1a
     842:	89 8f       	std	Y+25, r24	; 0x19
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
     848:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
     84c:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
     850:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
     854:	eb ee       	ldi	r30, 0xEB	; 235
     856:	f1 e0       	ldi	r31, 0x01	; 1
     858:	80 87       	std	Z+8, r24	; 0x08
     85a:	91 87       	std	Z+9, r25	; 0x09
     85c:	a2 87       	std	Z+10, r26	; 0x0a
     85e:	b3 87       	std	Z+11, r27	; 0x0b
	  v_B[1] = -1*Current_state.mm.B_y;
     860:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
     864:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
     868:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
     86c:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
     870:	b0 58       	subi	r27, 0x80	; 128
     872:	84 83       	std	Z+4, r24	; 0x04
     874:	95 83       	std	Z+5, r25	; 0x05
     876:	a6 83       	std	Z+6, r26	; 0x06
     878:	b7 83       	std	Z+7, r27	; 0x07
	  v_B[0] = Current_state.mm.B_z;
     87a:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
     87e:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
     882:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
     886:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
     88a:	80 83       	st	Z, r24
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	a2 83       	std	Z+2, r26	; 0x02
     890:	b3 83       	std	Z+3, r27	; 0x03
	  
	if(first_B)
     892:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <first_B>
     896:	88 23       	and	r24, r24
     898:	41 f0       	breq	.+16     	; 0x8aa <detumbling+0x9e>
	{
		
		copy_vector(v_B, v_B_old);
     89a:	62 e9       	ldi	r22, 0x92	; 146
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	cf 01       	movw	r24, r30
     8a0:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <copy_vector>
		first_B = 0;
     8a4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <first_B>
     8a8:	81 c0       	rjmp	.+258    	; 0x9ac <detumbling+0x1a0>
     8aa:	0b ee       	ldi	r16, 0xEB	; 235
     8ac:	11 e0       	ldi	r17, 0x01	; 1
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f2 e9       	ldi	r31, 0x92	; 146
     8b2:	8f 2e       	mov	r8, r31
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	9f 2e       	mov	r9, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	5e 01       	movw	r10, r28
     8bc:	8d e0       	ldi	r24, 0x0D	; 13
     8be:	a8 0e       	add	r10, r24
     8c0:	b1 1c       	adc	r11, r1
     8c2:	fe 01       	movw	r30, r28
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	1f 01       	movw	r2, r30
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8c8:	f8 01       	movw	r30, r16
     8ca:	c1 90       	ld	r12, Z+
     8cc:	d1 90       	ld	r13, Z+
     8ce:	e1 90       	ld	r14, Z+
     8d0:	f1 90       	ld	r15, Z+
     8d2:	8f 01       	movw	r16, r30
     8d4:	f4 01       	movw	r30, r8
     8d6:	41 90       	ld	r4, Z+
     8d8:	51 90       	ld	r5, Z+
     8da:	61 90       	ld	r6, Z+
     8dc:	71 90       	ld	r7, Z+
     8de:	4f 01       	movw	r8, r30
     8e0:	a3 01       	movw	r20, r6
     8e2:	92 01       	movw	r18, r4
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     8f8:	f5 01       	movw	r30, r10
     8fa:	61 93       	st	Z+, r22
     8fc:	71 93       	st	Z+, r23
     8fe:	81 93       	st	Z+, r24
     900:	91 93       	st	Z+, r25
     902:	5f 01       	movw	r10, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	07 3f       	cpi	r16, 0xF7	; 247
     92c:	1f 07       	cpc	r17, r31
     92e:	61 f6       	brne	.-104    	; 0x8c8 <detumbling+0xbc>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <vector_norm>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	9f eb       	ldi	r25, 0xBF	; 191
     944:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	6d 85       	ldd	r22, Y+13	; 0x0d
     952:	7e 85       	ldd	r23, Y+14	; 0x0e
     954:	8f 85       	ldd	r24, Y+15	; 0x0f
     956:	98 89       	ldd	r25, Y+16	; 0x10
     958:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     95c:	e9 8d       	ldd	r30, Y+25	; 0x19
     95e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     960:	60 83       	st	Z, r22
     962:	71 83       	std	Z+1, r23	; 0x01
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	69 89       	ldd	r22, Y+17	; 0x11
     96e:	7a 89       	ldd	r23, Y+18	; 0x12
     970:	8b 89       	ldd	r24, Y+19	; 0x13
     972:	9c 89       	ldd	r25, Y+20	; 0x14
     974:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     978:	e9 8d       	ldd	r30, Y+25	; 0x19
     97a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     97c:	64 83       	std	Z+4, r22	; 0x04
     97e:	75 83       	std	Z+5, r23	; 0x05
     980:	86 83       	std	Z+6, r24	; 0x06
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	a7 01       	movw	r20, r14
     986:	96 01       	movw	r18, r12
     988:	6d 89       	ldd	r22, Y+21	; 0x15
     98a:	7e 89       	ldd	r23, Y+22	; 0x16
     98c:	8f 89       	ldd	r24, Y+23	; 0x17
     98e:	98 8d       	ldd	r25, Y+24	; 0x18
     990:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     994:	e9 8d       	ldd	r30, Y+25	; 0x19
     996:	fa 8d       	ldd	r31, Y+26	; 0x1a
     998:	60 87       	std	Z+8, r22	; 0x08
     99a:	71 87       	std	Z+9, r23	; 0x09
     99c:	82 87       	std	Z+10, r24	; 0x0a
     99e:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9a0:	62 e9       	ldi	r22, 0x92	; 146
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	8b ee       	ldi	r24, 0xEB	; 235
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <copy_vector>
	
}
     9ac:	6a 96       	adiw	r28, 0x1a	; 26
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	3f 90       	pop	r3
     9da:	2f 90       	pop	r2
     9dc:	08 95       	ret

000009de <nominal>:
 

void nominal(vector v_m_N)
{
     9de:	2f 92       	push	r2
     9e0:	3f 92       	push	r3
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	e9 97       	sbiw	r28, 0x39	; 57
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	9d ab       	std	Y+53, r25	; 0x35
     a14:	8c ab       	std	Y+52, r24	; 0x34
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a16:	60 91 01 05 	lds	r22, 0x0501	; 0x800501 <Current_state+0x56>
     a1a:	70 91 02 05 	lds	r23, 0x0502	; 0x800502 <Current_state+0x57>
     a1e:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Current_state+0x58>
     a22:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <Current_state+0x59>
     a26:	0b ee       	ldi	r16, 0xEB	; 235
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e4       	ldi	r19, 0x40	; 64
     a2e:	4c e1       	ldi	r20, 0x1C	; 28
     a30:	56 e4       	ldi	r21, 0x46	; 70
     a32:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     a36:	f8 01       	movw	r30, r16
     a38:	60 87       	std	Z+8, r22	; 0x08
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	82 87       	std	Z+10, r24	; 0x0a
     a3e:	93 87       	std	Z+11, r25	; 0x0b
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a40:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <Current_state+0x5a>
     a44:	70 91 06 05 	lds	r23, 0x0506	; 0x800506 <Current_state+0x5b>
     a48:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <Current_state+0x5c>
     a4c:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <Current_state+0x5d>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e4       	ldi	r19, 0x40	; 64
     a54:	4c e1       	ldi	r20, 0x1C	; 28
     a56:	56 e4       	ldi	r21, 0x46	; 70
     a58:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	b0 58       	subi	r27, 0x80	; 128
     a62:	f8 01       	movw	r30, r16
     a64:	84 83       	std	Z+4, r24	; 0x04
     a66:	95 83       	std	Z+5, r25	; 0x05
     a68:	a6 83       	std	Z+6, r26	; 0x06
     a6a:	b7 83       	std	Z+7, r27	; 0x07
	     v_B[0] = Current_state.mm.B_z/10000;
     a6c:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <Current_state+0x5e>
     a70:	70 91 0a 05 	lds	r23, 0x050A	; 0x80050a <Current_state+0x5f>
     a74:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <Current_state+0x60>
     a78:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <Current_state+0x61>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e4       	ldi	r19, 0x40	; 64
     a80:	4c e1       	ldi	r20, 0x1C	; 28
     a82:	56 e4       	ldi	r21, 0x46	; 70
     a84:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     a88:	f8 01       	movw	r30, r16
     a8a:	60 83       	st	Z, r22
     a8c:	71 83       	std	Z+1, r23	; 0x01
     a8e:	82 83       	std	Z+2, r24	; 0x02
     a90:	93 83       	std	Z+3, r25	; 0x03
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <vector_norm>
     a98:	6f 87       	std	Y+15, r22	; 0x0f
     a9a:	78 8b       	std	Y+16, r23	; 0x10
     a9c:	89 8b       	std	Y+17, r24	; 0x11
     a9e:	9a 8b       	std	Y+18, r25	; 0x12
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     aa0:	40 90 80 04 	lds	r4, 0x0480	; 0x800480 <q_o+0xc>
     aa4:	50 90 81 04 	lds	r5, 0x0481	; 0x800481 <q_o+0xd>
     aa8:	60 90 82 04 	lds	r6, 0x0482	; 0x800482 <q_o+0xe>
     aac:	70 90 83 04 	lds	r7, 0x0483	; 0x800483 <q_o+0xf>
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f4 e7       	ldi	r31, 0x74	; 116
     ab4:	ef 2e       	mov	r14, r31
     ab6:	f4 e0       	ldi	r31, 0x04	; 4
     ab8:	ff 2e       	mov	r15, r31
     aba:	f0 2d       	mov	r31, r0
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	4c 01       	movw	r8, r24
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f3 ed       	ldi	r31, 0xD3	; 211
     ac6:	2f 2e       	mov	r2, r31
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	3f 2e       	mov	r3, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	0f 2e       	mov	r0, r31
     ad0:	f0 e8       	ldi	r31, 0x80	; 128
     ad2:	af 2e       	mov	r10, r31
     ad4:	f4 e0       	ldi	r31, 0x04	; 4
     ad6:	bf 2e       	mov	r11, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	81 01       	movw	r16, r2
     adc:	6c 01       	movw	r12, r24
     ade:	f7 01       	movw	r30, r14
     ae0:	61 91       	ld	r22, Z+
     ae2:	71 91       	ld	r23, Z+
     ae4:	81 91       	ld	r24, Z+
     ae6:	91 91       	ld	r25, Z+
     ae8:	7f 01       	movw	r14, r30
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     afa:	f6 01       	movw	r30, r12
     afc:	61 93       	st	Z+, r22
     afe:	71 93       	st	Z+, r23
     b00:	81 93       	st	Z+, r24
     b02:	91 93       	st	Z+, r25
     b04:	6f 01       	movw	r12, r30
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	f8 01       	movw	r30, r16
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     b20:	f8 01       	movw	r30, r16
     b22:	61 93       	st	Z+, r22
     b24:	71 93       	st	Z+, r23
     b26:	81 93       	st	Z+, r24
     b28:	91 93       	st	Z+, r25
     b2a:	8f 01       	movw	r16, r30
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b2c:	ea 14       	cp	r14, r10
     b2e:	fb 04       	cpc	r15, r11
     b30:	b1 f6       	brne	.-84     	; 0xade <nominal+0x100>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b32:	2f 85       	ldd	r18, Y+15	; 0x0f
     b34:	38 89       	ldd	r19, Y+16	; 0x10
     b36:	49 89       	ldd	r20, Y+17	; 0x11
     b38:	5a 89       	ldd	r21, Y+18	; 0x12
     b3a:	ca 01       	movw	r24, r20
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     b42:	6c a7       	std	Y+44, r22	; 0x2c
     b44:	7d a7       	std	Y+45, r23	; 0x2d
     b46:	8e a7       	std	Y+46, r24	; 0x2e
     b48:	9f a7       	std	Y+47, r25	; 0x2f
     b4a:	8e e9       	ldi	r24, 0x9E	; 158
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9f a3       	std	Y+39, r25	; 0x27
     b50:	8e a3       	std	Y+38, r24	; 0x26
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	fe 01       	movw	r30, r28
     b58:	3d 96       	adiw	r30, 0x0d	; 13
     b5a:	fe 87       	std	Y+14, r31	; 0x0e
     b5c:	ed 87       	std	Y+13, r30	; 0x0d
     b5e:	28 aa       	std	Y+48, r2	; 0x30
     b60:	39 aa       	std	Y+49, r3	; 0x31
     b62:	8a aa       	std	Y+50, r8	; 0x32
     b64:	9b aa       	std	Y+51, r9	; 0x33
     b66:	86 01       	movw	r16, r12
     b68:	ce a0       	ldd	r12, Y+38	; 0x26
     b6a:	df a0       	ldd	r13, Y+39	; 0x27
     b6c:	d9 a6       	std	Y+41, r13	; 0x29
     b6e:	c8 a6       	std	Y+40, r12	; 0x28
     b70:	c8 01       	movw	r24, r16
     b72:	82 59       	subi	r24, 0x92	; 146
     b74:	9e 4f       	sbci	r25, 0xFE	; 254
     b76:	9d 8b       	std	Y+21, r25	; 0x15
     b78:	8c 8b       	std	Y+20, r24	; 0x14
     b7a:	f8 01       	movw	r30, r16
     b7c:	e6 5b       	subi	r30, 0xB6	; 182
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	ff 8b       	std	Y+23, r31	; 0x17
     b82:	ee 8b       	std	Y+22, r30	; 0x16
     b84:	8f ed       	ldi	r24, 0xDF	; 223
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	99 8f       	std	Y+25, r25	; 0x19
     b8a:	88 8f       	std	Y+24, r24	; 0x18
     b8c:	f8 01       	movw	r30, r16
     b8e:	ea 5d       	subi	r30, 0xDA	; 218
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	fb 8f       	std	Y+27, r31	; 0x1b
     b94:	ea 8f       	std	Y+26, r30	; 0x1a
     b96:	c8 a8       	ldd	r12, Y+48	; 0x30
     b98:	d9 a8       	ldd	r13, Y+49	; 0x31
     b9a:	ea a8       	ldd	r14, Y+50	; 0x32
     b9c:	fb a8       	ldd	r15, Y+51	; 0x33
     b9e:	1f 86       	std	Y+15, r1	; 0x0f
     ba0:	1b 8a       	std	Y+19, r1	; 0x13
     ba2:	31 2c       	mov	r3, r1
     ba4:	21 2c       	mov	r2, r1
     ba6:	1b a7       	std	Y+43, r17	; 0x2b
     ba8:	0a a7       	std	Y+42, r16	; 0x2a
     baa:	87 01       	movw	r16, r14
     bac:	dd 8e       	std	Y+29, r13	; 0x1d
     bae:	cc 8e       	std	Y+28, r12	; 0x1c
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     bb0:	f8 01       	movw	r30, r16
     bb2:	61 91       	ld	r22, Z+
     bb4:	71 91       	ld	r23, Z+
     bb6:	81 91       	ld	r24, Z+
     bb8:	91 91       	ld	r25, Z+
     bba:	8f 01       	movw	r16, r30
     bbc:	ec 89       	ldd	r30, Y+20	; 0x14
     bbe:	fd 89       	ldd	r31, Y+21	; 0x15
     bc0:	21 91       	ld	r18, Z+
     bc2:	31 91       	ld	r19, Z+
     bc4:	41 91       	ld	r20, Z+
     bc6:	51 91       	ld	r21, Z+
     bc8:	fd 8b       	std	Y+21, r31	; 0x15
     bca:	ec 8b       	std	Y+20, r30	; 0x14
     bcc:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bce:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bd0:	81 90       	ld	r8, Z+
     bd2:	91 90       	ld	r9, Z+
     bd4:	a1 90       	ld	r10, Z+
     bd6:	b1 90       	ld	r11, Z+
     bd8:	fd 8f       	std	Y+29, r31	; 0x1d
     bda:	ec 8f       	std	Y+28, r30	; 0x1c
     bdc:	ee 89       	ldd	r30, Y+22	; 0x16
     bde:	ff 89       	ldd	r31, Y+23	; 0x17
     be0:	41 90       	ld	r4, Z+
     be2:	51 90       	ld	r5, Z+
     be4:	61 90       	ld	r6, Z+
     be6:	71 90       	ld	r7, Z+
     be8:	ff 8b       	std	Y+23, r31	; 0x17
     bea:	ee 8b       	std	Y+22, r30	; 0x16
     bec:	e8 8d       	ldd	r30, Y+24	; 0x18
     bee:	f9 8d       	ldd	r31, Y+25	; 0x19
     bf0:	c1 90       	ld	r12, Z+
     bf2:	d1 90       	ld	r13, Z+
     bf4:	e1 90       	ld	r14, Z+
     bf6:	f1 90       	ld	r15, Z+
     bf8:	f9 8f       	std	Y+25, r31	; 0x19
     bfa:	e8 8f       	std	Y+24, r30	; 0x18
     bfc:	ce aa       	std	Y+54, r12	; 0x36
     bfe:	df aa       	std	Y+55, r13	; 0x37
     c00:	e8 ae       	std	Y+56, r14	; 0x38
     c02:	f9 ae       	std	Y+57, r15	; 0x39
     c04:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c06:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c08:	c1 90       	ld	r12, Z+
     c0a:	d1 90       	ld	r13, Z+
     c0c:	e1 90       	ld	r14, Z+
     c0e:	f1 90       	ld	r15, Z+
     c10:	fb 8f       	std	Y+27, r31	; 0x1b
     c12:	ea 8f       	std	Y+26, r30	; 0x1a
     c14:	ce 8e       	std	Y+30, r12	; 0x1e
     c16:	df 8e       	std	Y+31, r13	; 0x1f
     c18:	e8 a2       	std	Y+32, r14	; 0x20
     c1a:	f9 a2       	std	Y+33, r15	; 0x21
     c1c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     c20:	6b 01       	movw	r12, r22
     c22:	7c 01       	movw	r14, r24
     c24:	a3 01       	movw	r20, r6
     c26:	92 01       	movw	r18, r4
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     c3c:	4b 01       	movw	r8, r22
     c3e:	5c 01       	movw	r10, r24
     c40:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c42:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c44:	48 a1       	ldd	r20, Y+32	; 0x20
     c46:	59 a1       	ldd	r21, Y+33	; 0x21
     c48:	6e a9       	ldd	r22, Y+54	; 0x36
     c4a:	7f a9       	ldd	r23, Y+55	; 0x37
     c4c:	88 ad       	ldd	r24, Y+56	; 0x38
     c4e:	99 ad       	ldd	r25, Y+57	; 0x39
     c50:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	c5 01       	movw	r24, r10
     c5a:	b4 01       	movw	r22, r8
     c5c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	6f 85       	ldd	r22, Y+15	; 0x0f
     c66:	7b 89       	ldd	r23, Y+19	; 0x13
     c68:	83 2d       	mov	r24, r3
     c6a:	92 2d       	mov	r25, r2
     c6c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     c70:	6f 87       	std	Y+15, r22	; 0x0f
     c72:	7b 8b       	std	Y+19, r23	; 0x13
     c74:	38 2e       	mov	r3, r24
     c76:	29 2e       	mov	r2, r25
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     c78:	cd 84       	ldd	r12, Y+13	; 0x0d
     c7a:	de 84       	ldd	r13, Y+14	; 0x0e
     c7c:	0c 15       	cp	r16, r12
     c7e:	1d 05       	cpc	r17, r13
     c80:	09 f0       	breq	.+2      	; 0xc84 <nominal+0x2a6>
     c82:	96 cf       	rjmp	.-212    	; 0xbb0 <nominal+0x1d2>
     c84:	0a a5       	ldd	r16, Y+42	; 0x2a
     c86:	1b a5       	ldd	r17, Y+43	; 0x2b
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     c88:	2c a5       	ldd	r18, Y+44	; 0x2c
     c8a:	3d a5       	ldd	r19, Y+45	; 0x2d
     c8c:	4e a5       	ldd	r20, Y+46	; 0x2e
     c8e:	5f a5       	ldd	r21, Y+47	; 0x2f
     c90:	92 2d       	mov	r25, r2
     c92:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     c96:	e8 a5       	ldd	r30, Y+40	; 0x28
     c98:	f9 a5       	ldd	r31, Y+41	; 0x29
     c9a:	60 83       	st	Z, r22
     c9c:	71 83       	std	Z+1, r23	; 0x01
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	93 83       	std	Z+3, r25	; 0x03
     ca2:	8e a1       	ldd	r24, Y+38	; 0x26
     ca4:	9f a1       	ldd	r25, Y+39	; 0x27
     ca6:	04 96       	adiw	r24, 0x04	; 4
     ca8:	9f a3       	std	Y+39, r25	; 0x27
     caa:	8e a3       	std	Y+38, r24	; 0x26
     cac:	04 5f       	subi	r16, 0xF4	; 244
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     cb0:	04 32       	cpi	r16, 0x24	; 36
     cb2:	11 05       	cpc	r17, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <nominal+0x2da>
     cb6:	58 cf       	rjmp	.-336    	; 0xb68 <nominal+0x18a>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     cb8:	4c a9       	ldd	r20, Y+52	; 0x34
     cba:	5d a9       	ldd	r21, Y+53	; 0x35
     cbc:	6b ee       	ldi	r22, 0xEB	; 235
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	8e e9       	ldi	r24, 0x9E	; 158
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cc8:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <light>
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 bc 32 	call	0x6578	; 0x6578 <__floatunsisf>
     cd6:	ab 01       	movw	r20, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	8c a9       	ldd	r24, Y+52	; 0x34
     cdc:	9d a9       	ldd	r25, Y+53	; 0x35
     cde:	0e 94 66 20 	call	0x40cc	; 0x40cc <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     ce2:	e9 96       	adiw	r28, 0x39	; 57
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	3f 90       	pop	r3
     d10:	2f 90       	pop	r2
     d12:	08 95       	ret

00000d14 <apply_torque>:

void apply_torque(vector v_m)
{
     d14:	2f 92       	push	r2
     d16:	3f 92       	push	r3
     d18:	4f 92       	push	r4
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	4c 01       	movw	r8, r24
     d3a:	ec 01       	movw	r28, r24
     d3c:	5c 01       	movw	r10, r24
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	a8 0e       	add	r10, r24
     d42:	b1 1c       	adc	r11, r1
     d44:	84 01       	movw	r16, r8
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d46:	d8 01       	movw	r26, r16
     d48:	4d 90       	ld	r4, X+
     d4a:	5d 90       	ld	r5, X+
     d4c:	6d 90       	ld	r6, X+
     d4e:	7c 90       	ld	r7, X
     d50:	73 01       	movw	r14, r6
     d52:	62 01       	movw	r12, r4
     d54:	e8 94       	clt
     d56:	f7 f8       	bld	r15, 7
     d58:	23 e3       	ldi	r18, 0x33	; 51
     d5a:	33 e3       	ldi	r19, 0x33	; 51
     d5c:	43 e7       	ldi	r20, 0x73	; 115
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
     d68:	18 16       	cp	r1, r24
     d6a:	0c f5       	brge	.+66     	; 0xdae <apply_torque+0x9a>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d6c:	a3 01       	movw	r20, r6
     d6e:	92 01       	movw	r18, r4
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f eb       	ldi	r21, 0xBF	; 191
     d80:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
     d84:	81 11       	cpse	r24, r1
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <apply_torque+0x88>
			v_m[i] = -1*M_MAX;
     d88:	83 e3       	ldi	r24, 0x33	; 51
     d8a:	93 e3       	ldi	r25, 0x33	; 51
     d8c:	a3 e7       	ldi	r26, 0x73	; 115
     d8e:	bf eb       	ldi	r27, 0xBF	; 191
     d90:	f8 01       	movw	r30, r16
     d92:	80 83       	st	Z, r24
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	a2 83       	std	Z+2, r26	; 0x02
     d98:	b3 83       	std	Z+3, r27	; 0x03
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <apply_torque+0x9a>
			else
			v_m[i] = M_MAX;
     d9c:	83 e3       	ldi	r24, 0x33	; 51
     d9e:	93 e3       	ldi	r25, 0x33	; 51
     da0:	a3 e7       	ldi	r26, 0x73	; 115
     da2:	bf e3       	ldi	r27, 0x3F	; 63
     da4:	f8 01       	movw	r30, r16
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
     dae:	0c 5f       	subi	r16, 0xFC	; 252
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     db2:	0a 15       	cp	r16, r10
     db4:	1b 05       	cpc	r17, r11
     db6:	39 f6       	brne	.-114    	; 0xd46 <apply_torque+0x32>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     db8:	45 ed       	ldi	r20, 0xD5	; 213
     dba:	5f e0       	ldi	r21, 0x0F	; 15
     dbc:	61 ec       	ldi	r22, 0xC1	; 193
     dbe:	7e e3       	ldi	r23, 0x3E	; 62
     dc0:	c4 01       	movw	r24, r8
     dc2:	0e 94 66 20 	call	0x40cc	; 0x40cc <scalar_into_vector>
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     dc6:	48 80       	ld	r4, Y
     dc8:	59 80       	ldd	r5, Y+1	; 0x01
     dca:	6a 80       	ldd	r6, Y+2	; 0x02
     dcc:	7b 80       	ldd	r7, Y+3	; 0x03
     dce:	73 01       	movw	r14, r6
     dd0:	62 01       	movw	r12, r4
     dd2:	e8 94       	clt
     dd4:	f7 f8       	bld	r15, 7
     dd6:	28 ea       	ldi	r18, 0xA8	; 168
     dd8:	36 ec       	ldi	r19, 0xC6	; 198
     dda:	4b e8       	ldi	r20, 0x8B	; 139
     ddc:	5e e3       	ldi	r21, 0x3E	; 62
     dde:	c7 01       	movw	r24, r14
     de0:	b6 01       	movw	r22, r12
     de2:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
     de6:	18 16       	cp	r1, r24
     de8:	fc f4       	brge	.+62     	; 0xe28 <apply_torque+0x114>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     dea:	a3 01       	movw	r20, r6
     dec:	92 01       	movw	r18, r4
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f eb       	ldi	r21, 0xBF	; 191
     dfe:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
     e02:	81 11       	cpse	r24, r1
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <apply_torque+0x104>
			v_m[i] = -1*I_MAX;
     e06:	88 ea       	ldi	r24, 0xA8	; 168
     e08:	96 ec       	ldi	r25, 0xC6	; 198
     e0a:	ab e8       	ldi	r26, 0x8B	; 139
     e0c:	be eb       	ldi	r27, 0xBE	; 190
     e0e:	88 83       	st	Y, r24
     e10:	99 83       	std	Y+1, r25	; 0x01
     e12:	aa 83       	std	Y+2, r26	; 0x02
     e14:	bb 83       	std	Y+3, r27	; 0x03
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <apply_torque+0x114>
			else
			v_m[i] = I_MAX;
     e18:	88 ea       	ldi	r24, 0xA8	; 168
     e1a:	96 ec       	ldi	r25, 0xC6	; 198
     e1c:	ab e8       	ldi	r26, 0x8B	; 139
     e1e:	be e3       	ldi	r27, 0x3E	; 62
     e20:	88 83       	st	Y, r24
     e22:	99 83       	std	Y+1, r25	; 0x01
     e24:	aa 83       	std	Y+2, r26	; 0x02
     e26:	bb 83       	std	Y+3, r27	; 0x03
     e28:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
     e2a:	ac 16       	cp	r10, r28
     e2c:	bd 06       	cpc	r11, r29
     e2e:	59 f6       	brne	.-106    	; 0xdc6 <apply_torque+0xb2>
	//sen = Mode;
	//transmit_UART0(sen);
	//sen = gps_power;
	//transmit_UART0(sen);
	//Anant Changes-
	if (v_m[0] > 0) //v_m is calculated current
     e30:	d4 01       	movw	r26, r8
     e32:	cd 90       	ld	r12, X+
     e34:	dd 90       	ld	r13, X+
     e36:	ed 90       	ld	r14, X+
     e38:	fc 90       	ld	r15, X
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	a9 01       	movw	r20, r18
     e40:	c7 01       	movw	r24, r14
     e42:	b6 01       	movw	r22, r12
     e44:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
     e48:	18 16       	cp	r1, r24
     e4a:	c4 f4       	brge	.+48     	; 0xe7c <apply_torque+0x168>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	c7 01       	movw	r24, r14
     e56:	b6 01       	movw	r22, r12
     e58:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     e5c:	28 ea       	ldi	r18, 0xA8	; 168
     e5e:	36 ec       	ldi	r19, 0xC6	; 198
     e60:	4b e8       	ldi	r20, 0x8B	; 139
     e62:	5e e3       	ldi	r21, 0x3E	; 62
     e64:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     e68:	9f 77       	andi	r25, 0x7F	; 127
     e6a:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     e6e:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <Current_state+0x6a>
     e72:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <Current_state+0x69>
		Current_state.pwm.x_dir = 0;
     e76:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <apply_torque+0x1a4>
	}
	else
	{
	Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
     e7c:	28 ea       	ldi	r18, 0xA8	; 168
     e7e:	36 ec       	ldi	r19, 0xC6	; 198
     e80:	4b e8       	ldi	r20, 0x8B	; 139
     e82:	5e e3       	ldi	r21, 0x3E	; 62
     e84:	c7 01       	movw	r24, r14
     e86:	b6 01       	movw	r22, r12
     e88:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     ea4:	9f 77       	andi	r25, 0x7F	; 127
     ea6:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     eaa:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <Current_state+0x6a>
     eae:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <Current_state+0x69>
	Current_state.pwm.x_dir = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <Current_state+0x6f>
	}
	if (v_m[1] > 0)
     eb8:	f4 01       	movw	r30, r8
     eba:	c4 80       	ldd	r12, Z+4	; 0x04
     ebc:	d5 80       	ldd	r13, Z+5	; 0x05
     ebe:	e6 80       	ldd	r14, Z+6	; 0x06
     ec0:	f7 80       	ldd	r15, Z+7	; 0x07
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	c4 f4       	brge	.+48     	; 0xf04 <apply_torque+0x1f0>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	4f e7       	ldi	r20, 0x7F	; 127
     eda:	57 e4       	ldi	r21, 0x47	; 71
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     ee4:	28 ea       	ldi	r18, 0xA8	; 168
     ee6:	36 ec       	ldi	r19, 0xC6	; 198
     ee8:	4b e8       	ldi	r20, 0x8B	; 139
     eea:	5e e3       	ldi	r21, 0x3E	; 62
     eec:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     ef0:	9f 77       	andi	r25, 0x7F	; 127
     ef2:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     ef6:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <Current_state+0x6c>
     efa:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <Current_state+0x6b>
		Current_state.pwm.y_dir = 0;
     efe:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
     f02:	1e c0       	rjmp	.+60     	; 0xf40 <apply_torque+0x22c>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
     f04:	28 ea       	ldi	r18, 0xA8	; 168
     f06:	36 ec       	ldi	r19, 0xC6	; 198
     f08:	4b e8       	ldi	r20, 0x8B	; 139
     f0a:	5e e3       	ldi	r21, 0x3E	; 62
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f e7       	ldi	r20, 0x7F	; 127
     f26:	57 e4       	ldi	r21, 0x47	; 71
     f28:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     f2c:	9f 77       	andi	r25, 0x7F	; 127
     f2e:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     f32:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <Current_state+0x6c>
     f36:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <Current_state+0x6b>
		Current_state.pwm.y_dir = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Current_state+0x70>
	}
	if (v_m[2] > 0)
     f40:	d4 01       	movw	r26, r8
     f42:	18 96       	adiw	r26, 0x08	; 8
     f44:	cd 90       	ld	r12, X+
     f46:	dd 90       	ld	r13, X+
     f48:	ed 90       	ld	r14, X+
     f4a:	fc 90       	ld	r15, X
     f4c:	1b 97       	sbiw	r26, 0x0b	; 11
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	a9 01       	movw	r20, r18
     f54:	c7 01       	movw	r24, r14
     f56:	b6 01       	movw	r22, r12
     f58:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	c4 f4       	brge	.+48     	; 0xf90 <apply_torque+0x27c>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	c7 01       	movw	r24, r14
     f6a:	b6 01       	movw	r22, r12
     f6c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     f70:	28 ea       	ldi	r18, 0xA8	; 168
     f72:	36 ec       	ldi	r19, 0xC6	; 198
     f74:	4b e8       	ldi	r20, 0x8B	; 139
     f76:	5e e3       	ldi	r21, 0x3E	; 62
     f78:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     f7c:	9f 77       	andi	r25, 0x7F	; 127
     f7e:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     f82:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <Current_state+0x6e>
     f86:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <Current_state+0x6d>
		Current_state.pwm.z_dir = 0;
     f8a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Current_state+0x71>
     f8e:	1e c0       	rjmp	.+60     	; 0xfcc <apply_torque+0x2b8>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
     f90:	28 ea       	ldi	r18, 0xA8	; 168
     f92:	36 ec       	ldi	r19, 0xC6	; 198
     f94:	4b e8       	ldi	r20, 0x8B	; 139
     f96:	5e e3       	ldi	r21, 0x3E	; 62
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	57 e4       	ldi	r21, 0x47	; 71
     fb4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
     fb8:	9f 77       	andi	r25, 0x7F	; 127
     fba:	0e 94 90 32 	call	0x6520	; 0x6520 <__fixunssfsi>
     fbe:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <Current_state+0x6e>
     fc2:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <Current_state+0x6d>
		Current_state.pwm.z_dir = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Current_state+0x71>
	}
 
	//Anant Changes
	init_UART0();
     fcc:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <init_UART0>
	
	transmit_UART0(Current_state.pwm.x_dir);
     fd0:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.x;
     fda:	c4 e1       	ldi	r28, 0x14	; 20
     fdc:	d5 e0       	ldi	r29, 0x05	; 5
     fde:	88 81       	ld	r24, Y
     fe0:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
     fe2:	08 2e       	mov	r0, r24
     fe4:	00 0c       	add	r0, r0
     fe6:	99 0b       	sbc	r25, r25
     fe8:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.x>>8);
     fec:	88 81       	ld	r24, Y
     fee:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
     ff0:	89 2f       	mov	r24, r25
     ff2:	99 0f       	add	r25, r25
     ff4:	99 0b       	sbc	r25, r25
     ff6:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	
	transmit_UART0(Current_state.pwm.y_dir);
     ffa:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.y;
    1004:	c6 e1       	ldi	r28, 0x16	; 22
    1006:	d5 e0       	ldi	r29, 0x05	; 5
    1008:	88 81       	ld	r24, Y
    100a:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
    100c:	08 2e       	mov	r0, r24
    100e:	00 0c       	add	r0, r0
    1010:	99 0b       	sbc	r25, r25
    1012:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.y>>8);
    1016:	88 81       	ld	r24, Y
    1018:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
    101a:	89 2f       	mov	r24, r25
    101c:	99 0f       	add	r25, r25
    101e:	99 0b       	sbc	r25, r25
    1020:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	
	transmit_UART0(Current_state.pwm.z_dir);
    1024:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Current_state+0x71>
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.z;
    102e:	c8 e1       	ldi	r28, 0x18	; 24
    1030:	d5 e0       	ldi	r29, 0x05	; 5
    1032:	88 81       	ld	r24, Y
    1034:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
    1036:	08 2e       	mov	r0, r24
    1038:	00 0c       	add	r0, r0
    103a:	99 0b       	sbc	r25, r25
    103c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.z>>8);
    1040:	88 81       	ld	r24, Y
    1042:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
    1044:	89 2f       	mov	r24, r25
    1046:	99 0f       	add	r25, r25
    1048:	99 0b       	sbc	r25, r25
    104a:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
	
	//Anant Changes-
	
	
 
PORTA=0xA0;
    104e:	80 ea       	ldi	r24, 0xA0	; 160
    1050:	8b bb       	out	0x1b, r24	; 27
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	8f 90       	pop	r8
    106a:	7f 90       	pop	r7
    106c:	6f 90       	pop	r6
    106e:	5f 90       	pop	r5
    1070:	4f 90       	pop	r4
    1072:	3f 90       	pop	r3
    1074:	2f 90       	pop	r2
    1076:	08 95       	ret

00001078 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	e0 97       	sbiw	r28, 0x30	; 48
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    10a4:	0e 94 7e 21 	call	0x42fc	; 0x42fc <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a8:	8f ec       	ldi	r24, 0xCF	; 207
    10aa:	97 e0       	ldi	r25, 0x07	; 7
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <control+0x34>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <control+0x3a>
    10b2:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    10b4:	0e 94 21 21 	call	0x4242	; 0x4242 <read_MM>
  init_UART0();
    10b8:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <init_UART0>
  // write apply torquer function here
   if(Mode == DETUMBLING){
    10bc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	41 f4       	brne	.+16     	; 0x10d4 <control+0x5c>
   apply_torque(v_m_D);
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	25 de       	rcall	.-950    	; 0xd14 <apply_torque>
   uint8_t d_flag = 4;
   transmit_UART0(d_flag);
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <control+0x6e>
   }
   else if(Mode == NOMINAL){
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <control+0x6e>
   apply_torque(v_m_N);
    10d8:	ce 01       	movw	r24, r28
    10da:	0d 96       	adiw	r24, 0x0d	; 13
    10dc:	1b de       	rcall	.-970    	; 0xd14 <apply_torque>
   uint8_t n_flag = 14;
   transmit_UART0(n_flag);
    10de:	8e e0       	ldi	r24, 0x0E	; 14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
   }
   
  set_PWM();
    10e6:	0e 94 4d 21 	call	0x429a	; 0x429a <set_PWM>
    10ea:	8f e1       	ldi	r24, 0x1F	; 31
    10ec:	9e e4       	ldi	r25, 0x4E	; 78
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <control+0x76>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <control+0x7c>
    10f4:	00 00       	nop
  
  _delay_ms(10);
  detumbling(v_m_D);
    10f6:	ce 01       	movw	r24, r28
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	88 db       	rcall	.-2288   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    10fc:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
    1100:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
    1104:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
    1108:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
    110c:	eb ee       	ldi	r30, 0xEB	; 235
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	80 87       	std	Z+8, r24	; 0x08
    1112:	91 87       	std	Z+9, r25	; 0x09
    1114:	a2 87       	std	Z+10, r26	; 0x0a
    1116:	b3 87       	std	Z+11, r27	; 0x0b
  v_B[1] = -1*Current_state.mm.B_y;
    1118:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
    111c:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
    1120:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
    1124:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
    1128:	b0 58       	subi	r27, 0x80	; 128
    112a:	84 83       	std	Z+4, r24	; 0x04
    112c:	95 83       	std	Z+5, r25	; 0x05
    112e:	a6 83       	std	Z+6, r26	; 0x06
    1130:	b7 83       	std	Z+7, r27	; 0x07
  v_B[0] = Current_state.mm.B_z;
    1132:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
    1136:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
    113a:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
    113e:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
    1142:	80 83       	st	Z, r24
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	a2 83       	std	Z+2, r26	; 0x02
    1148:	b3 83       	std	Z+3, r27	; 0x03
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2)){
    114a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    114e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gps_power+0x1>
    1152:	02 97       	sbiw	r24, 0x02	; 2
    1154:	c9 f4       	brne	.+50     	; 0x1188 <__stack+0x89>
    1156:	9f e7       	ldi	r25, 0x7F	; 127
    1158:	e8 e3       	ldi	r30, 0x38	; 56
    115a:	11 e0       	ldi	r17, 0x01	; 1
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	e0 40       	sbci	r30, 0x00	; 0
    1160:	10 40       	sbci	r17, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <__stack+0x5d>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <__stack+0x67>
    1166:	00 00       	nop
			_delay_ms(50);
			uint8_t q= 90;
			//Anant Changes
			init_UART0(); //may not work
    1168:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <init_UART0>
			//Anant Changes-
			transmit_UART0(q);
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
			read_GPS();
    1174:	0e 94 1c 21 	call	0x4238	; 0x4238 <read_GPS>
			//while(UCSR0B & _BV(RXCIE0));
			//Anant Changes
			while(Current_state.gps.anant_flag==0){
    1178:	eb ea       	ldi	r30, 0xAB	; 171
    117a:	f4 e0       	ldi	r31, 0x04	; 4
    117c:	80 8d       	ldd	r24, Z+24	; 0x18
    117e:	88 23       	and	r24, r24
    1180:	e9 f3       	breq	.-6      	; 0x117c <__stack+0x7d>
				continue;
			}
			Current_state.gps.anant_flag==1;	
    1182:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Current_state+0x18>
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <__stack+0xa7>
    1188:	2f e7       	ldi	r18, 0x7F	; 127
    118a:	88 e3       	ldi	r24, 0x38	; 56
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	80 40       	sbci	r24, 0x00	; 0
    1192:	90 40       	sbci	r25, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <__stack+0x8f>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <__stack+0x99>
    1198:	00 00       	nop
		}
		//Anant Changes
		else{
			_delay_ms(50);
			uint8_t q= 91;
			init_UART0();
    119a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <init_UART0>
			transmit_UART0(q);
    119e:	8b e5       	ldi	r24, 0x5B	; 91
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    11a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <__stack+0xb5>
      copy_gps_reading();  //check if gps is on but pdop data
    11ae:	0e 94 92 21 	call	0x4324	; 0x4324 <copy_gps_reading>
    11b2:	61 c0       	rjmp	.+194    	; 0x1276 <__stack+0x177>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    11b4:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    11b8:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    11bc:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    11c0:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    11c4:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    11c8:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    11cc:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    11d0:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    11d4:	a2 e0       	ldi	r26, 0x02	; 2
    11d6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__adddi3_s8>
    11da:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    11de:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    11e2:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    11e6:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    11ea:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    11ee:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    11f2:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    11f6:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
	  seconds_since_pivot += FRAME_TIME;
    11fa:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    11fe:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    1202:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    1206:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    120a:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    120e:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    1212:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    1216:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    121a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__adddi3_s8>
    121e:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    1222:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1226:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    122a:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    122e:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    1232:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1236:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    123a:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	 /////////////////////////////////////////
	 Current_state.gps.seconds += FRAME_TIME;
    123e:	eb ea       	ldi	r30, 0xAB	; 171
    1240:	f4 e0       	ldi	r31, 0x04	; 4
    1242:	87 a1       	ldd	r24, Z+39	; 0x27
    1244:	8e 5f       	subi	r24, 0xFE	; 254
    1246:	87 a3       	std	Z+39, r24	; 0x27
	 if(Current_state.gps.seconds > 58)
    1248:	87 a1       	ldd	r24, Z+39	; 0x27
    124a:	8b 33       	cpi	r24, 0x3B	; 59
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__stack+0x157>
	 {
		 Current_state.gps.seconds = 0;
    124e:	17 a2       	std	Z+39, r1	; 0x27
		 Current_state.gps.minutes += 1;
    1250:	86 a1       	ldd	r24, Z+38	; 0x26
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	86 a3       	std	Z+38, r24	; 0x26
		 
	 }
	 if (Current_state.gps.minutes > 59)
    1256:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <Current_state+0x26>
    125a:	8c 33       	cpi	r24, 0x3C	; 60
    125c:	30 f0       	brcs	.+12     	; 0x126a <__stack+0x16b>
	 {
		 Current_state.gps.minutes = 0;
    125e:	eb ea       	ldi	r30, 0xAB	; 171
    1260:	f4 e0       	ldi	r31, 0x04	; 4
    1262:	16 a2       	std	Z+38, r1	; 0x26
		 Current_state.gps.hours += 1;
    1264:	85 a1       	ldd	r24, Z+37	; 0x25
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	85 a3       	std	Z+37, r24	; 0x25
	 }
	 if (Current_state.gps.hours > 23)
    126a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <Current_state+0x25>
    126e:	88 31       	cpi	r24, 0x18	; 24
    1270:	10 f0       	brcs	.+4      	; 0x1276 <__stack+0x177>
	 {
		 Current_state.gps.hours = 0;
    1272:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <Current_state+0x25>
    1276:	ef e7       	ldi	r30, 0x7F	; 127
    1278:	18 e3       	ldi	r17, 0x38	; 56
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	e1 50       	subi	r30, 0x01	; 1
    127e:	10 40       	sbci	r17, 0x00	; 0
    1280:	20 40       	sbci	r18, 0x00	; 0
    1282:	e1 f7       	brne	.-8      	; 0x127c <__stack+0x17d>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <__stack+0x187>
    1286:	00 00       	nop
	 /////////////////////////////////////////
	  }

	_delay_ms(50);  
    uint8_t e=100;
    transmit_UART0(e);
    1288:	84 e6       	ldi	r24, 0x64	; 100
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    read_SS();
    1290:	0e 94 1e 21 	call	0x423c	; 0x423c <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1294:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <light_cal>
    1298:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
	if(GPS_done != 255)
    129c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <__stack+0x1a7>
    12a4:	43 c0       	rjmp	.+134    	; 0x132c <__stack+0x22d>
	{
		
    sgp_orbit_propagator();
    12a6:	0e 94 69 23 	call	0x46d2	; 0x46d2 <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    12aa:	ce 01       	movw	r24, r28
    12ac:	49 96       	adiw	r24, 0x19	; 25
    12ae:	0e 94 06 24 	call	0x480c	; 0x480c <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    12b2:	ce 01       	movw	r24, r28
    12b4:	85 96       	adiw	r24, 0x25	; 37
    12b6:	0e 94 d5 24 	call	0x49aa	; 0x49aa <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    12ba:	21 ed       	ldi	r18, 0xD1	; 209
    12bc:	31 e0       	ldi	r19, 0x01	; 1
    12be:	44 e7       	ldi	r20, 0x74	; 116
    12c0:	54 e0       	ldi	r21, 0x04	; 4
    12c2:	be 01       	movw	r22, r28
    12c4:	67 5e       	subi	r22, 0xE7	; 231
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	85 96       	adiw	r24, 0x25	; 37
    12cc:	0e 94 78 25 	call	0x4af0	; 0x4af0 <quest>
    12d0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
    
    omega_estimation(q_o, v_w);
    12d4:	6f ed       	ldi	r22, 0xDF	; 223
    12d6:	71 e0       	ldi	r23, 0x01	; 1
    12d8:	84 e7       	ldi	r24, 0x74	; 116
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 79 29 	call	0x52f2	; 0x52f2 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    12e0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    12e4:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <w_ctrl>
    12e8:	86 9f       	mul	r24, r22
    12ea:	b0 01       	movw	r22, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	07 2e       	mov	r0, r23
    12f0:	00 0c       	add	r0, r0
    12f2:	88 0b       	sbc	r24, r24
    12f4:	99 0b       	sbc	r25, r25
    12f6:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    12fa:	ab 01       	movw	r20, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	8f ed       	ldi	r24, 0xDF	; 223
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 66 20 	call	0x40cc	; 0x40cc <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    1306:	8f ed       	ldi	r24, 0xDF	; 223
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <vector_norm>
    130e:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <mod_w>
    1312:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <mod_w+0x1>
    1316:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <mod_w+0x2>
    131a:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <mod_w+0x3>
    convert_unit_quaternion(q_o);
    131e:	84 e7       	ldi	r24, 0x74	; 116
    1320:	94 e0       	ldi	r25, 0x04	; 4
    1322:	0e 94 f5 20 	call	0x41ea	; 0x41ea <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    1326:	ce 01       	movw	r24, r28
    1328:	0d 96       	adiw	r24, 0x0d	; 13
    132a:	59 db       	rcall	.-2382   	; 0x9de <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    132c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    1330:	88 37       	cpi	r24, 0x78	; 120
    1332:	dc f4       	brge	.+54     	; 0x136a <__stack+0x26b>
    1334:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <Time>
    1338:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <Time+0x1>
    133c:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <Time+0x2>
    1340:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <Time+0x3>
    1344:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <Time+0x4>
    1348:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <Time+0x5>
    134c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <Time+0x6>
    1350:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <Time+0x7>
    1354:	20 32       	cpi	r18, 0x20	; 32
    1356:	31 4a       	sbci	r19, 0xA1	; 161
    1358:	47 40       	sbci	r20, 0x07	; 7
    135a:	51 05       	cpc	r21, r1
    135c:	61 05       	cpc	r22, r1
    135e:	71 05       	cpc	r23, r1
    1360:	81 05       	cpc	r24, r1
    1362:	91 05       	cpc	r25, r1
    1364:	09 f0       	breq	.+2      	; 0x1368 <__stack+0x269>
    1366:	08 f4       	brcc	.+2      	; 0x136a <__stack+0x26b>
    1368:	6b c0       	rjmp	.+214    	; 0x1440 <__stack+0x341>
		{    avg_md_new = 0;
    136a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    136e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    1372:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    1376:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
			star_flag = 121;                 // 91
    137a:	89 e7       	ldi	r24, 0x79	; 121
    137c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
			if (light ==1)
    1380:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	21 f5       	brne	.+72     	; 0x13d0 <__stack+0x2d1>
			{
				time_l = time_l +2;
    1388:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <time_l>
    138c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <time_l+0x1>
    1390:	02 96       	adiw	r24, 0x02	; 2
    1392:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <time_l+0x1>
    1396:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <time_l>
				time_e =0;
    139a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <time_e+0x1>
    139e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <time_e>
				start_time = time_l % 720;   //690
    13a2:	60 ed       	ldi	r22, 0xD0	; 208
    13a4:	72 e0       	ldi	r23, 0x02	; 2
    13a6:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    13aa:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <start_time+0x1>
    13ae:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <start_time>
				if (start_time <600)       //600
    13b2:	88 35       	cpi	r24, 0x58	; 88
    13b4:	92 40       	sbci	r25, 0x02	; 2
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <__stack+0x2c3>
				{
					gps_power =0;          // 0 
    13b8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    13bc:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    13c0:	2c c1       	rjmp	.+600    	; 0x161a <__stack+0x51b>
				}
				else
				{
					gps_power =2;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    13ca:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    13ce:	25 c1       	rjmp	.+586    	; 0x161a <__stack+0x51b>
				}
			}
			else
			{
				start_time =0;
    13d0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <start_time+0x1>
    13d4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <start_time>
				time_e = time_e +2;
    13d8:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <time_e>
    13dc:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <time_e+0x1>
    13e0:	6e 5f       	subi	r22, 0xFE	; 254
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <time_e+0x1>
    13e8:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <time_e>
				if (time_e > (eclipse_time-150))
    13ec:	07 2e       	mov	r0, r23
    13ee:	00 0c       	add	r0, r0
    13f0:	88 0b       	sbc	r24, r24
    13f2:	99 0b       	sbc	r25, r25
    13f4:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    13f8:	6b 01       	movw	r12, r22
    13fa:	7c 01       	movw	r14, r24
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	46 e1       	ldi	r20, 0x16	; 22
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <eclipse_time>
    1408:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <eclipse_time+0x1>
    140c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <eclipse_time+0x2>
    1410:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <eclipse_time+0x3>
    1414:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	c7 01       	movw	r24, r14
    141e:	b6 01       	movw	r22, r12
    1420:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    1424:	18 16       	cp	r1, r24
    1426:	3c f4       	brge	.+14     	; 0x1436 <__stack+0x337>
				{
					gps_power =2;
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    1430:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    1434:	f2 c0       	rjmp	.+484    	; 0x161a <__stack+0x51b>
				}
				else
				{
					gps_power =0;
    1436:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    143a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    143e:	ed c0       	rjmp	.+474    	; 0x161a <__stack+0x51b>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <vector_norm>
    1448:	6b 01       	movw	r12, r22
    144a:	7c 01       	movw	r14, r24
    144c:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <norm_m_d>
    1450:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <norm_m_d+0x1>
    1454:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <norm_m_d+0x2>
    1458:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <norm_m_d+0x3>
			md_start = norm_m_d * light;
    145c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1460:	68 2f       	mov	r22, r24
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	c7 01       	movw	r24, r14
    1472:	b6 01       	movw	r22, r12
    1474:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <md_start>
    1480:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <md_start+0x1>
    1484:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <md_start+0x2>
    1488:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <md_start+0x3>
			if (md_start != 0)
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <__stack+0x39d>
    149a:	62 c0       	rjmp	.+196    	; 0x1560 <__stack+0x461>
			{
				if (num==2)
    149c:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <num>
    14a0:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <num+0x1>
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	82 16       	cp	r8, r18
    14a8:	91 04       	cpc	r9, r1
    14aa:	a9 f4       	brne	.+42     	; 0x14d6 <__stack+0x3d7>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    14c4:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    14c8:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    14cc:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    14d0:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
    14d4:	2c c0       	rjmp	.+88     	; 0x152e <__stack+0x42f>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    14d6:	b4 01       	movw	r22, r8
    14d8:	61 50       	subi	r22, 0x01	; 1
    14da:	71 09       	sbc	r23, r1
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 bc 32 	call	0x6578	; 0x6578 <__floatunsisf>
    14e4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <avg_md>
    14e8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <avg_md+0x1>
    14ec:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <avg_md+0x2>
    14f0:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <avg_md+0x3>
    14f4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	c7 01       	movw	r24, r14
    14fe:	b6 01       	movw	r22, r12
    1500:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
    1508:	b4 01       	movw	r22, r8
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 bc 32 	call	0x6578	; 0x6578 <__floatunsisf>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    151e:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    1522:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    1526:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    152a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
				}
				num = num +1;
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	88 1a       	sub	r8, r24
    1532:	98 0a       	sbc	r9, r24
    1534:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <num+0x1>
    1538:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <num>
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    153c:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <avg_md_new>
    1540:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    1544:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1548:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	c7 01       	movw	r24, r14
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    155a:	81 11       	cpse	r24, r1
    155c:	10 c0       	rjmp	.+32     	; 0x157e <__stack+0x47f>
    155e:	1a c0       	rjmp	.+52     	; 0x1594 <__stack+0x495>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <num+0x1>
    1568:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <num>
				avg_md_new = 0;
    156c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    1570:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    1574:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    1578:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
    157c:	0b c0       	rjmp	.+22     	; 0x1594 <__stack+0x495>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	37 ed       	ldi	r19, 0xD7	; 215
    1582:	43 e2       	ldi	r20, 0x23	; 35
    1584:	5d e3       	ldi	r21, 0x3D	; 61
    1586:	c7 01       	movw	r24, r14
    1588:	b6 01       	movw	r22, r12
    158a:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    158e:	88 23       	and	r24, r24
    1590:	84 f0       	brlt	.+32     	; 0x15b2 <__stack+0x4b3>
    1592:	19 c0       	rjmp	.+50     	; 0x15c6 <__stack+0x4c7>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <avg_md>
    159e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <avg_md+0x1>
    15a2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <avg_md+0x2>
    15a6:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <avg_md+0x3>
    15aa:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	51 f0       	breq	.+20     	; 0x15c6 <__stack+0x4c7>
			{
				flag_on = flag_on +2;
    15b2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <flag_on>
    15b6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <flag_on+0x1>
    15ba:	02 96       	adiw	r24, 0x02	; 2
    15bc:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <flag_on+0x1>
    15c0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <flag_on>
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <__stack+0x4cf>
			}
			else
			{
				flag_on = 0;
    15c6:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <flag_on+0x1>
    15ca:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <flag_on>
			}
			if (flag_on > gps_start)
    15ce:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <flag_on>
    15d2:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <flag_on+0x1>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 bc 32 	call	0x6578	; 0x6578 <__floatunsisf>
    15de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    15e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    15e6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
    15ea:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
    15ee:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	64 f4       	brge	.+24     	; 0x160e <__stack+0x50f>
			{
				gps_power = 2;
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    15fe:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
				star_flag = star_flag +2;
    1602:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    1606:	8e 5f       	subi	r24, 0xFE	; 254
    1608:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
    160c:	06 c0       	rjmp	.+12     	; 0x161a <__stack+0x51b>
			}
			else
			{
				gps_power=0;
    160e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    1612:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
				star_flag = 0;                        
    1616:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <star_flag>
			}
			
		}
  avg_md = avg_md_new;
    161a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <avg_md_new>
    161e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    1622:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1626:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    162a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <avg_md>
    162e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <avg_md+0x1>
    1632:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <avg_md+0x2>
    1636:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <avg_md+0x3>
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    163a:	c0 90 84 04 	lds	r12, 0x0484	; 0x800484 <mod_w>
    163e:	d0 90 85 04 	lds	r13, 0x0485	; 0x800485 <mod_w+0x1>
    1642:	e0 90 86 04 	lds	r14, 0x0486	; 0x800486 <mod_w+0x2>
    1646:	f0 90 87 04 	lds	r15, 0x0487	; 0x800487 <mod_w+0x3>
    164a:	2f e6       	ldi	r18, 0x6F	; 111
    164c:	32 e1       	ldi	r19, 0x12	; 18
    164e:	43 e8       	ldi	r20, 0x83	; 131
    1650:	5b e3       	ldi	r21, 0x3B	; 59
    1652:	c7 01       	movw	r24, r14
    1654:	b6 01       	movw	r22, r12
    1656:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    165a:	88 23       	and	r24, r24
    165c:	bc f4       	brge	.+46     	; 0x168c <__stack+0x58d>
    165e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1662:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <w_ctrl>
    1666:	89 9f       	mul	r24, r25
    1668:	c0 01       	movw	r24, r0
    166a:	11 24       	eor	r1, r1
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	71 f4       	brne	.+28     	; 0x168c <__stack+0x58d>
   {
	   flag_N = flag_N+1;
    1670:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <flag_N>
    1674:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <flag_N+0x1>
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <flag_N+0x1>
    167e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <flag_N>
	   flag_D = 0;
    1682:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1686:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    168a:	17 c0       	rjmp	.+46     	; 0x16ba <__stack+0x5bb>
   }
   else if (mod_w > TOLW_N2D)
    168c:	2f e6       	ldi	r18, 0x6F	; 111
    168e:	32 e1       	ldi	r19, 0x12	; 18
    1690:	43 e0       	ldi	r20, 0x03	; 3
    1692:	5c e3       	ldi	r21, 0x3C	; 60
    1694:	c7 01       	movw	r24, r14
    1696:	b6 01       	movw	r22, r12
    1698:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    169c:	18 16       	cp	r1, r24
    169e:	6c f4       	brge	.+26     	; 0x16ba <__stack+0x5bb>
   {
	   flag_D = flag_D +1;
    16a0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag_D>
    16a4:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <flag_D+0x1>
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <flag_D+0x1>
    16ae:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <flag_D>
	   flag_N = 0;
    16b2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    16b6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    16ba:	60 90 1f 05 	lds	r6, 0x051F	; 0x80051f <Time>
    16be:	70 90 20 05 	lds	r7, 0x0520	; 0x800520 <Time+0x1>
    16c2:	80 90 21 05 	lds	r8, 0x0521	; 0x800521 <Time+0x2>
    16c6:	90 90 22 05 	lds	r9, 0x0522	; 0x800522 <Time+0x3>
    16ca:	b0 91 23 05 	lds	r27, 0x0523	; 0x800523 <Time+0x4>
    16ce:	a0 91 24 05 	lds	r26, 0x0524	; 0x800524 <Time+0x5>
    16d2:	f0 91 25 05 	lds	r31, 0x0525	; 0x800525 <Time+0x6>
    16d6:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <Time+0x7>
    16da:	26 2d       	mov	r18, r6
    16dc:	37 2d       	mov	r19, r7
    16de:	48 2d       	mov	r20, r8
    16e0:	59 2d       	mov	r21, r9
    16e2:	6b 2f       	mov	r22, r27
    16e4:	7a 2f       	mov	r23, r26
    16e6:	8f 2f       	mov	r24, r31
    16e8:	9e 2f       	mov	r25, r30
    16ea:	23 3f       	cpi	r18, 0xF3	; 243
    16ec:	31 40       	sbci	r19, 0x01	; 1
    16ee:	41 05       	cpc	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	61 05       	cpc	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	81 05       	cpc	r24, r1
    16f8:	91 05       	cpc	r25, r1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__stack+0x5ff>
    16fc:	a0 f4       	brcc	.+40     	; 0x1726 <__stack+0x627>
	{
		Mode = DETUMBLING;
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
		t_now = 0;
    1704:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <t_now>
    1708:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <t_now+0x1>
    170c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <t_now+0x2>
    1710:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <t_now+0x3>
    1714:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <t_now+0x4>
    1718:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <t_now+0x5>
    171c:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <t_now+0x6>
    1720:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <t_now+0x7>
    1724:	77 c0       	rjmp	.+238    	; 0x1814 <__stack+0x715>
	}
	else
	{
		if (star_flag >0)
    1726:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    172a:	18 16       	cp	r1, r24
    172c:	5c f5       	brge	.+86     	; 0x1784 <__stack+0x685>
		{
			if (Mode == DETUMBLING)
    172e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	39 f5       	brne	.+78     	; 0x1784 <__stack+0x685>
			{
				if (flag_N > tol_time)
    1736:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <flag_N>
    173a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <flag_N+0x1>
    173e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    1742:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    1746:	82 17       	cp	r24, r18
    1748:	93 07       	cpc	r25, r19
    174a:	c4 f4       	brge	.+48     	; 0x177c <__stack+0x67d>
				{
					Mode = NOMINAL;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
					t_now = Time;
    1752:	60 92 c5 01 	sts	0x01C5, r6	; 0x8001c5 <t_now>
    1756:	70 92 c6 01 	sts	0x01C6, r7	; 0x8001c6 <t_now+0x1>
    175a:	80 92 c7 01 	sts	0x01C7, r8	; 0x8001c7 <t_now+0x2>
    175e:	90 92 c8 01 	sts	0x01C8, r9	; 0x8001c8 <t_now+0x3>
    1762:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <t_now+0x4>
    1766:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <t_now+0x5>
    176a:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <t_now+0x6>
    176e:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <t_now+0x7>
					flag_N = 0;
    1772:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1776:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <__stack+0x685>
				}
				else
				{flag_D = 0;}	
    177c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1780:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1784:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	09 f0       	breq	.+2      	; 0x178e <__stack+0x68f>
    178c:	43 c0       	rjmp	.+134    	; 0x1814 <__stack+0x715>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    178e:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <flag_D>
    1792:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <flag_D+0x1>
    1796:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    179a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    179e:	82 17       	cp	r24, r18
    17a0:	93 07       	cpc	r25, r19
    17a2:	a4 f5       	brge	.+104    	; 0x180c <__stack+0x70d>
    17a4:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <t_now>
    17a8:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <t_now+0x1>
    17ac:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <t_now+0x2>
    17b0:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <t_now+0x3>
    17b4:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <t_now+0x4>
    17b8:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <t_now+0x5>
    17bc:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <t_now+0x6>
    17c0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <t_now+0x7>
    17c4:	20 5f       	subi	r18, 0xF0	; 240
    17c6:	38 4d       	sbci	r19, 0xD8	; 216
    17c8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	6f 4f       	sbci	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	a2 2e       	mov	r10, r18
    17d6:	b3 2e       	mov	r11, r19
    17d8:	c4 2e       	mov	r12, r20
    17da:	d5 2e       	mov	r13, r21
    17dc:	e6 2e       	mov	r14, r22
    17de:	f7 2e       	mov	r15, r23
    17e0:	08 2f       	mov	r16, r24
    17e2:	19 2f       	mov	r17, r25
    17e4:	26 2d       	mov	r18, r6
    17e6:	37 2d       	mov	r19, r7
    17e8:	48 2d       	mov	r20, r8
    17ea:	59 2d       	mov	r21, r9
    17ec:	6b 2f       	mov	r22, r27
    17ee:	7a 2f       	mov	r23, r26
    17f0:	8f 2f       	mov	r24, r31
    17f2:	9e 2f       	mov	r25, r30
    17f4:	0e 94 91 36 	call	0x6d22	; 0x6d22 <__cmpdi2>
    17f8:	49 f0       	breq	.+18     	; 0x180c <__stack+0x70d>
    17fa:	40 f0       	brcs	.+16     	; 0x180c <__stack+0x70d>
		 {
			 Mode = DETUMBLING;
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
			 flag_D = 0;
    1802:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1806:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <__stack+0x715>
		 }
		 else
		 {
			 flag_N = 0;
    180c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1810:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    1814:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    1818:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <Current_state+0x2f>
}
    181c:	e0 96       	adiw	r28, 0x30	; 48
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	7f 90       	pop	r7
    1842:	6f 90       	pop	r6
    1844:	08 95       	ret

00001846 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	32 97       	sbiw	r30, 0x02	; 2
    184c:	eb 30       	cpi	r30, 0x0B	; 11
    184e:	f1 05       	cpc	r31, r1
    1850:	08 f0       	brcs	.+2      	; 0x1854 <days_in_months+0xe>
    1852:	67 c0       	rjmp	.+206    	; 0x1922 <days_in_months+0xdc>
    1854:	ea 5b       	subi	r30, 0xBA	; 186
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__tablejump2__>
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    185c:	2f e1       	ldi	r18, 0x1F	; 31
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	08 95       	ret
      break;
    case 3:
      return 59;
    186e:	2b e3       	ldi	r18, 0x3B	; 59
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	08 95       	ret
      break;
    case 4:
      return 90;
    1880:	2a e5       	ldi	r18, 0x5A	; 90
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	08 95       	ret
      break;
    case 5:
      return 120;
    1892:	28 e7       	ldi	r18, 0x78	; 120
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	08 95       	ret
      break;
    case 6:
      return 151;
    18a4:	27 e9       	ldi	r18, 0x97	; 151
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	08 95       	ret
      break;
    case 7:
      return 181;
    18b6:	25 eb       	ldi	r18, 0xB5	; 181
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	08 95       	ret
      break;
    case 8:
      return 212;
    18c8:	24 ed       	ldi	r18, 0xD4	; 212
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	08 95       	ret
      break;
    case 9:
      return 243;
    18da:	23 ef       	ldi	r18, 0xF3	; 243
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	08 95       	ret
      break;
    case 10:
      return 273;
    18ec:	21 e1       	ldi	r18, 0x11	; 17
    18ee:	31 e0       	ldi	r19, 0x01	; 1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	08 95       	ret
      break;
    case 11:
      return 304;
    18fe:	20 e3       	ldi	r18, 0x30	; 48
    1900:	31 e0       	ldi	r19, 0x01	; 1
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	08 95       	ret
      break;
    case 12:
      return 334;
    1910:	2e e4       	ldi	r18, 0x4E	; 78
    1912:	31 e0       	ldi	r19, 0x01	; 1
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	08 95       	ret
uint64_t days_in_months(uint8_t month)
{
  switch (month)
  {
    case 1:
      return 0;
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    1932:	08 95       	ret

00001934 <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    1934:	2f 92       	push	r2
    1936:	3f 92       	push	r3
    1938:	4f 92       	push	r4
    193a:	5f 92       	push	r5
    193c:	6f 92       	push	r6
    193e:	7f 92       	push	r7
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	65 97       	sbiw	r28, 0x15	; 21
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	2c 01       	movw	r4, r24
    196a:	86 2f       	mov	r24, r22
    196c:	49 87       	std	Y+9, r20	; 0x09
    196e:	62 2e       	mov	r6, r18
    1970:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1972:	69 df       	rcall	.-302    	; 0x1846 <days_in_months>
    1974:	2a 87       	std	Y+10, r18	; 0x0a
    1976:	3b 87       	std	Y+11, r19	; 0x0b
    1978:	4c 87       	std	Y+12, r20	; 0x0c
    197a:	5d 87       	std	Y+13, r21	; 0x0d
    197c:	6e 87       	std	Y+14, r22	; 0x0e
    197e:	7f 87       	std	Y+15, r23	; 0x0f
    1980:	88 8b       	std	Y+16, r24	; 0x10
    1982:	99 8b       	std	Y+17, r25	; 0x11
    1984:	2e 2d       	mov	r18, r14
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	20 58       	subi	r18, 0x80	; 128
    1996:	3c 45       	sbci	r19, 0x5C	; 92
    1998:	44 49       	sbci	r20, 0x94	; 148
    199a:	5b 4c       	sbci	r21, 0xCB	; 203
    199c:	6e 40       	sbci	r22, 0x0E	; 14
    199e:	71 09       	sbc	r23, r1
    19a0:	81 09       	sbc	r24, r1
    19a2:	91 09       	sbc	r25, r1
    19a4:	82 2e       	mov	r8, r18
    19a6:	93 2e       	mov	r9, r19
    19a8:	34 2e       	mov	r3, r20
    19aa:	75 2e       	mov	r7, r21
    19ac:	b6 2f       	mov	r27, r22
    19ae:	a7 2f       	mov	r26, r23
    19b0:	f8 2f       	mov	r31, r24
    19b2:	e9 2f       	mov	r30, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    19b4:	20 2f       	mov	r18, r16
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	04 e0       	ldi	r16, 0x04	; 4
    19c6:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    19ca:	b1 2c       	mov	r11, r1
    19cc:	c1 2c       	mov	r12, r1
    19ce:	d1 2c       	mov	r13, r1
    19d0:	e1 2c       	mov	r14, r1
    19d2:	f1 2c       	mov	r15, r1
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    19dc:	02 e0       	ldi	r16, 0x02	; 2
    19de:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    19e2:	a2 2e       	mov	r10, r18
    19e4:	b3 2e       	mov	r11, r19
    19e6:	c4 2e       	mov	r12, r20
    19e8:	d5 2e       	mov	r13, r21
    19ea:	e6 2e       	mov	r14, r22
    19ec:	f7 2e       	mov	r15, r23
    19ee:	08 2f       	mov	r16, r24
    19f0:	19 2f       	mov	r17, r25
    19f2:	28 2d       	mov	r18, r8
    19f4:	39 2d       	mov	r19, r9
    19f6:	43 2d       	mov	r20, r3
    19f8:	57 2d       	mov	r21, r7
    19fa:	6b 2f       	mov	r22, r27
    19fc:	7a 2f       	mov	r23, r26
    19fe:	8f 2f       	mov	r24, r31
    1a00:	9e 2f       	mov	r25, r30
    1a02:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1a06:	72 2e       	mov	r7, r18
    1a08:	83 2e       	mov	r8, r19
    1a0a:	94 2e       	mov	r9, r20
    1a0c:	25 2e       	mov	r2, r21
    1a0e:	36 2e       	mov	r3, r22
    1a10:	b7 2f       	mov	r27, r23
    1a12:	a8 2f       	mov	r26, r24
    1a14:	f9 2f       	mov	r31, r25
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
    1a16:	26 2d       	mov	r18, r6
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	04 e0       	ldi	r16, 0x04	; 4
    1a28:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1a2c:	a6 2c       	mov	r10, r6
    1a2e:	b1 2c       	mov	r11, r1
    1a30:	c1 2c       	mov	r12, r1
    1a32:	d1 2c       	mov	r13, r1
    1a34:	e1 2c       	mov	r14, r1
    1a36:	f1 2c       	mov	r15, r1
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1a40:	a2 2e       	mov	r10, r18
    1a42:	b3 2e       	mov	r11, r19
    1a44:	c4 2e       	mov	r12, r20
    1a46:	d5 2e       	mov	r13, r21
    1a48:	e6 2e       	mov	r14, r22
    1a4a:	f7 2e       	mov	r15, r23
    1a4c:	e8 2f       	mov	r30, r24
    1a4e:	19 2f       	mov	r17, r25
    1a50:	04 e0       	ldi	r16, 0x04	; 4
    1a52:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1a56:	0e 2f       	mov	r16, r30
    1a58:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1a5c:	04 e0       	ldi	r16, 0x04	; 4
    1a5e:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1a62:	a2 2e       	mov	r10, r18
    1a64:	b3 2e       	mov	r11, r19
    1a66:	c4 2e       	mov	r12, r20
    1a68:	d5 2e       	mov	r13, r21
    1a6a:	e6 2e       	mov	r14, r22
    1a6c:	f7 2e       	mov	r15, r23
    1a6e:	08 2f       	mov	r16, r24
    1a70:	19 2f       	mov	r17, r25
    1a72:	27 2d       	mov	r18, r7
    1a74:	38 2d       	mov	r19, r8
    1a76:	49 2d       	mov	r20, r9
    1a78:	52 2d       	mov	r21, r2
    1a7a:	63 2d       	mov	r22, r3
    1a7c:	7b 2f       	mov	r23, r27
    1a7e:	8a 2f       	mov	r24, r26
    1a80:	9f 2f       	mov	r25, r31
    1a82:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1a86:	22 2e       	mov	r2, r18
    1a88:	33 2e       	mov	r3, r19
    1a8a:	4a 8b       	std	Y+18, r20	; 0x12
    1a8c:	5b 8b       	std	Y+19, r21	; 0x13
    1a8e:	66 2e       	mov	r6, r22
    1a90:	77 2e       	mov	r7, r23
    1a92:	8c 8b       	std	Y+20, r24	; 0x14
    1a94:	9d 8b       	std	Y+21, r25	; 0x15
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1a96:	92 01       	movw	r18, r4
    1a98:	49 82       	std	Y+1, r4	; 0x01
    1a9a:	3a 83       	std	Y+2, r19	; 0x02
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	03 e0       	ldi	r16, 0x03	; 3
    1aaa:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1aae:	82 2e       	mov	r8, r18
    1ab0:	93 2e       	mov	r9, r19
    1ab2:	44 2e       	mov	r4, r20
    1ab4:	55 2e       	mov	r5, r21
    1ab6:	b6 2f       	mov	r27, r22
    1ab8:	a7 2f       	mov	r26, r23
    1aba:	f8 2f       	mov	r31, r24
    1abc:	e9 2f       	mov	r30, r25
    1abe:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1ac2:	a2 2e       	mov	r10, r18
    1ac4:	b3 2e       	mov	r11, r19
    1ac6:	c4 2e       	mov	r12, r20
    1ac8:	d5 2e       	mov	r13, r21
    1aca:	e6 2e       	mov	r14, r22
    1acc:	f7 2e       	mov	r15, r23
    1ace:	08 2f       	mov	r16, r24
    1ad0:	19 2f       	mov	r17, r25
    1ad2:	28 2d       	mov	r18, r8
    1ad4:	39 2d       	mov	r19, r9
    1ad6:	44 2d       	mov	r20, r4
    1ad8:	55 2d       	mov	r21, r5
    1ada:	6b 2f       	mov	r22, r27
    1adc:	7a 2f       	mov	r23, r26
    1ade:	8f 2f       	mov	r24, r31
    1ae0:	9e 2f       	mov	r25, r30
    1ae2:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1ae6:	a9 80       	ldd	r10, Y+1	; 0x01
    1ae8:	ba 80       	ldd	r11, Y+2	; 0x02
    1aea:	c1 2c       	mov	r12, r1
    1aec:	d1 2c       	mov	r13, r1
    1aee:	e1 2c       	mov	r14, r1
    1af0:	f1 2c       	mov	r15, r1
    1af2:	00 e0       	ldi	r16, 0x00	; 0
    1af4:	10 e0       	ldi	r17, 0x00	; 0
    1af6:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1afa:	a2 2e       	mov	r10, r18
    1afc:	b3 2e       	mov	r11, r19
    1afe:	c4 2e       	mov	r12, r20
    1b00:	d5 2e       	mov	r13, r21
    1b02:	e6 2e       	mov	r14, r22
    1b04:	f7 2e       	mov	r15, r23
    1b06:	e8 2f       	mov	r30, r24
    1b08:	19 2f       	mov	r17, r25
    1b0a:	04 e0       	ldi	r16, 0x04	; 4
    1b0c:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1b10:	0e 2f       	mov	r16, r30
    1b12:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1b16:	a2 2e       	mov	r10, r18
    1b18:	b3 2e       	mov	r11, r19
    1b1a:	c4 2e       	mov	r12, r20
    1b1c:	d5 2e       	mov	r13, r21
    1b1e:	e6 2e       	mov	r14, r22
    1b20:	f7 2e       	mov	r15, r23
    1b22:	e8 2f       	mov	r30, r24
    1b24:	19 2f       	mov	r17, r25
    1b26:	04 e0       	ldi	r16, 0x04	; 4
    1b28:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1b2c:	0e 2f       	mov	r16, r30
    1b2e:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1b32:	a2 2e       	mov	r10, r18
    1b34:	b3 2e       	mov	r11, r19
    1b36:	c4 2e       	mov	r12, r20
    1b38:	d5 2e       	mov	r13, r21
    1b3a:	e6 2e       	mov	r14, r22
    1b3c:	f7 2e       	mov	r15, r23
    1b3e:	e8 2f       	mov	r30, r24
    1b40:	19 2f       	mov	r17, r25
    1b42:	04 e0       	ldi	r16, 0x04	; 4
    1b44:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1b48:	0e 2f       	mov	r16, r30
    1b4a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1b4e:	07 e0       	ldi	r16, 0x07	; 7
    1b50:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1b54:	a2 2e       	mov	r10, r18
    1b56:	b3 2e       	mov	r11, r19
    1b58:	c4 2e       	mov	r12, r20
    1b5a:	d5 2e       	mov	r13, r21
    1b5c:	e6 2e       	mov	r14, r22
    1b5e:	f7 2e       	mov	r15, r23
    1b60:	08 2f       	mov	r16, r24
    1b62:	19 2f       	mov	r17, r25
    1b64:	22 2d       	mov	r18, r2
    1b66:	33 2d       	mov	r19, r3
    1b68:	4a 89       	ldd	r20, Y+18	; 0x12
    1b6a:	5b 89       	ldd	r21, Y+19	; 0x13
    1b6c:	66 2d       	mov	r22, r6
    1b6e:	77 2d       	mov	r23, r7
    1b70:	8c 89       	ldd	r24, Y+20	; 0x14
    1b72:	9d 89       	ldd	r25, Y+21	; 0x15
    1b74:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1b78:	72 2e       	mov	r7, r18
    1b7a:	83 2e       	mov	r8, r19
    1b7c:	94 2e       	mov	r9, r20
    1b7e:	b5 2f       	mov	r27, r21
    1b80:	66 2e       	mov	r6, r22
    1b82:	57 2e       	mov	r5, r23
    1b84:	f8 2f       	mov	r31, r24
    1b86:	e9 2f       	mov	r30, r25
    1b88:	29 85       	ldd	r18, Y+9	; 0x09
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	af ef       	ldi	r26, 0xFF	; 255
    1b9a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__adddi3_s8>
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ba0:	bb 84       	ldd	r11, Y+11	; 0x0b
    1ba2:	cc 84       	ldd	r12, Y+12	; 0x0c
    1ba4:	dd 84       	ldd	r13, Y+13	; 0x0d
    1ba6:	ee 84       	ldd	r14, Y+14	; 0x0e
    1ba8:	ff 84       	ldd	r15, Y+15	; 0x0f
    1baa:	08 89       	ldd	r16, Y+16	; 0x10
    1bac:	19 89       	ldd	r17, Y+17	; 0x11
    1bae:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
    1bb2:	a2 2e       	mov	r10, r18
    1bb4:	b3 2e       	mov	r11, r19
    1bb6:	c4 2e       	mov	r12, r20
    1bb8:	d5 2e       	mov	r13, r21
    1bba:	e6 2e       	mov	r14, r22
    1bbc:	f7 2e       	mov	r15, r23
    1bbe:	a8 2f       	mov	r26, r24
    1bc0:	19 2f       	mov	r17, r25
    1bc2:	02 e0       	ldi	r16, 0x02	; 2
    1bc4:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1bc8:	0a 2f       	mov	r16, r26
    1bca:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1bce:	a2 2e       	mov	r10, r18
    1bd0:	b3 2e       	mov	r11, r19
    1bd2:	c4 2e       	mov	r12, r20
    1bd4:	d5 2e       	mov	r13, r21
    1bd6:	e6 2e       	mov	r14, r22
    1bd8:	f7 2e       	mov	r15, r23
    1bda:	a8 2f       	mov	r26, r24
    1bdc:	19 2f       	mov	r17, r25
    1bde:	04 e0       	ldi	r16, 0x04	; 4
    1be0:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1be4:	0a 2f       	mov	r16, r26
    1be6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1bea:	a2 2e       	mov	r10, r18
    1bec:	b3 2e       	mov	r11, r19
    1bee:	c4 2e       	mov	r12, r20
    1bf0:	d5 2e       	mov	r13, r21
    1bf2:	e6 2e       	mov	r14, r22
    1bf4:	f7 2e       	mov	r15, r23
    1bf6:	a8 2f       	mov	r26, r24
    1bf8:	19 2f       	mov	r17, r25
    1bfa:	04 e0       	ldi	r16, 0x04	; 4
    1bfc:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1c00:	0a 2f       	mov	r16, r26
    1c02:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1c06:	07 e0       	ldi	r16, 0x07	; 7
    1c08:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__ashldi3>
    1c0c:	a2 2e       	mov	r10, r18
    1c0e:	b3 2e       	mov	r11, r19
    1c10:	c4 2e       	mov	r12, r20
    1c12:	d5 2e       	mov	r13, r21
    1c14:	e6 2e       	mov	r14, r22
    1c16:	f7 2e       	mov	r15, r23
    1c18:	08 2f       	mov	r16, r24
    1c1a:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1c1c:	27 2d       	mov	r18, r7
    1c1e:	38 2d       	mov	r19, r8
    1c20:	49 2d       	mov	r20, r9
    1c22:	5b 2f       	mov	r21, r27
    1c24:	66 2d       	mov	r22, r6
    1c26:	75 2d       	mov	r23, r5
    1c28:	8f 2f       	mov	r24, r31
    1c2a:	9e 2f       	mov	r25, r30
    1c2c:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__adddi3>
  return now;
}
    1c30:	65 96       	adiw	r28, 0x15	; 21
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	7f 90       	pop	r7
    1c56:	6f 90       	pop	r6
    1c58:	5f 90       	pop	r5
    1c5a:	4f 90       	pop	r4
    1c5c:	3f 90       	pop	r3
    1c5e:	2f 90       	pop	r2
    1c60:	08 95       	ret

00001c62 <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1c76:	e1 2c       	mov	r14, r1
    1c78:	0e e1       	ldi	r16, 0x1E	; 30
    1c7a:	24 e0       	ldi	r18, 0x04	; 4
    1c7c:	44 e1       	ldi	r20, 0x14	; 20
    1c7e:	63 e0       	ldi	r22, 0x03	; 3
    1c80:	80 ee       	ldi	r24, 0xE0	; 224
    1c82:	97 e0       	ldi	r25, 0x07	; 7
    1c84:	57 de       	rcall	.-850    	; 0x1934 <get_seconds_since_pivot>
    1c86:	a2 2e       	mov	r10, r18
    1c88:	b3 2e       	mov	r11, r19
    1c8a:	c4 2e       	mov	r12, r20
    1c8c:	d5 2e       	mov	r13, r21
    1c8e:	d6 2f       	mov	r29, r22
    1c90:	f7 2e       	mov	r15, r23
    1c92:	c8 2f       	mov	r28, r24
    1c94:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1c96:	eb ea       	ldi	r30, 0xAB	; 171
    1c98:	f4 e0       	ldi	r31, 0x04	; 4
    1c9a:	82 a5       	ldd	r24, Z+42	; 0x2a
    1c9c:	93 a5       	ldd	r25, Z+43	; 0x2b
    1c9e:	e7 a0       	ldd	r14, Z+39	; 0x27
    1ca0:	06 a1       	ldd	r16, Z+38	; 0x26
    1ca2:	25 a1       	ldd	r18, Z+37	; 0x25
    1ca4:	40 a5       	ldd	r20, Z+40	; 0x28
    1ca6:	61 a5       	ldd	r22, Z+41	; 0x29
    1ca8:	45 de       	rcall	.-886    	; 0x1934 <get_seconds_since_pivot>
    1caa:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    1cae:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1cb2:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    1cb6:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    1cba:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    1cbe:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1cc2:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    1cc6:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1cca:	ed 2e       	mov	r14, r29
    1ccc:	0c 2f       	mov	r16, r28
    1cce:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__subdi3>
    1cd2:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    1cd6:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    1cda:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    1cde:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    1ce2:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    1ce6:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    1cea:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    1cee:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	08 95       	ret

00001d08 <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1d08:	4f 92       	push	r4
    1d0a:	5f 92       	push	r5
    1d0c:	6f 92       	push	r6
    1d0e:	7f 92       	push	r7
    1d10:	8f 92       	push	r8
    1d12:	9f 92       	push	r9
    1d14:	af 92       	push	r10
    1d16:	bf 92       	push	r11
    1d18:	cf 92       	push	r12
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	a4 97       	sbiw	r28, 0x24	; 36
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	7c 01       	movw	r14, r24
    1d3a:	6b 01       	movw	r12, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1d3c:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    1d40:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    1d44:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    1d48:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    1d4c:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    1d50:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    1d54:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    1d58:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    1d5c:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatundisf>
    1d60:	27 eb       	ldi	r18, 0xB7	; 183
    1d62:	39 e5       	ldi	r19, 0x59	; 89
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1d6c:	2e eb       	ldi	r18, 0xBE	; 190
    1d6e:	37 ef       	ldi	r19, 0xF7	; 247
    1d70:	48 e9       	ldi	r20, 0x98	; 152
    1d72:	58 e3       	ldi	r21, 0x38	; 56
    1d74:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    1d78:	2b 01       	movw	r4, r22
    1d7a:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d7c:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    1d80:	4b 01       	movw	r8, r22
    1d82:	5c 01       	movw	r10, r24
    1d84:	69 83       	std	Y+1, r22	; 0x01
    1d86:	7a 83       	std	Y+2, r23	; 0x02
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	c3 01       	movw	r24, r6
    1d8e:	b2 01       	movw	r22, r4
    1d90:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	7e 83       	std	Y+6, r23	; 0x06
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	19 86       	std	Y+9, r1	; 0x09
    1d9e:	1a 86       	std	Y+10, r1	; 0x0a
    1da0:	1b 86       	std	Y+11, r1	; 0x0b
    1da2:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1da4:	8b 01       	movw	r16, r22
    1da6:	9c 01       	movw	r18, r24
    1da8:	30 58       	subi	r19, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1daa:	0d 87       	std	Y+13, r16	; 0x0d
    1dac:	1e 87       	std	Y+14, r17	; 0x0e
    1dae:	2f 87       	std	Y+15, r18	; 0x0f
    1db0:	38 8b       	std	Y+16, r19	; 0x10
    1db2:	89 8a       	std	Y+17, r8	; 0x11
    1db4:	9a 8a       	std	Y+18, r9	; 0x12
    1db6:	ab 8a       	std	Y+19, r10	; 0x13
    1db8:	bc 8a       	std	Y+20, r11	; 0x14
    1dba:	1d 8a       	std	Y+21, r1	; 0x15
    1dbc:	1e 8a       	std	Y+22, r1	; 0x16
    1dbe:	1f 8a       	std	Y+23, r1	; 0x17
    1dc0:	18 8e       	std	Y+24, r1	; 0x18
    1dc2:	19 8e       	std	Y+25, r1	; 0x19
    1dc4:	1a 8e       	std	Y+26, r1	; 0x1a
    1dc6:	1b 8e       	std	Y+27, r1	; 0x1b
    1dc8:	1c 8e       	std	Y+28, r1	; 0x1c
    1dca:	1d 8e       	std	Y+29, r1	; 0x1d
    1dcc:	1e 8e       	std	Y+30, r1	; 0x1e
    1dce:	1f 8e       	std	Y+31, r1	; 0x1f
    1dd0:	18 a2       	std	Y+32, r1	; 0x20
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	ab a3       	std	Y+35, r26	; 0x23
    1de0:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1de2:	a6 01       	movw	r20, r12
    1de4:	be 01       	movw	r22, r28
    1de6:	6f 5f       	subi	r22, 0xFF	; 255
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	c7 01       	movw	r24, r14
    1dec:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1df0:	a4 96       	adiw	r28, 0x24	; 36
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	9f 90       	pop	r9
    1e12:	8f 90       	pop	r8
    1e14:	7f 90       	pop	r7
    1e16:	6f 90       	pop	r6
    1e18:	5f 90       	pop	r5
    1e1a:	4f 90       	pop	r4
    1e1c:	08 95       	ret

00001e1e <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1e1e:	4f 92       	push	r4
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	a4 97       	sbiw	r28, 0x24	; 36
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	8c 01       	movw	r16, r24
    1e4c:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1e4e:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    1e52:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    1e56:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    1e5a:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    1e5e:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    1e62:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    1e66:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    1e6a:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    1e6e:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatundisf>
    1e72:	27 eb       	ldi	r18, 0xB7	; 183
    1e74:	39 e5       	ldi	r19, 0x59	; 89
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1e7e:	2e eb       	ldi	r18, 0xBE	; 190
    1e80:	37 ef       	ldi	r19, 0xF7	; 247
    1e82:	48 e9       	ldi	r20, 0x98	; 152
    1e84:	58 e3       	ldi	r21, 0x38	; 56
    1e86:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    1e8a:	2b 01       	movw	r4, r22
    1e8c:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1e8e:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    1e92:	6b 01       	movw	r12, r22
    1e94:	7c 01       	movw	r14, r24
    1e96:	69 83       	std	Y+1, r22	; 0x01
    1e98:	7a 83       	std	Y+2, r23	; 0x02
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	c3 01       	movw	r24, r6
    1ea0:	b2 01       	movw	r22, r4
    1ea2:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    1ea6:	2b 01       	movw	r4, r22
    1ea8:	3c 01       	movw	r6, r24
    1eaa:	77 fa       	bst	r7, 7
    1eac:	70 94       	com	r7
    1eae:	77 f8       	bld	r7, 7
    1eb0:	70 94       	com	r7
    1eb2:	4d 82       	std	Y+5, r4	; 0x05
    1eb4:	5e 82       	std	Y+6, r5	; 0x06
    1eb6:	6f 82       	std	Y+7, r6	; 0x07
    1eb8:	78 86       	std	Y+8, r7	; 0x08
    1eba:	19 86       	std	Y+9, r1	; 0x09
    1ebc:	1a 86       	std	Y+10, r1	; 0x0a
    1ebe:	1b 86       	std	Y+11, r1	; 0x0b
    1ec0:	1c 86       	std	Y+12, r1	; 0x0c
    1ec2:	6d 87       	std	Y+13, r22	; 0x0d
    1ec4:	7e 87       	std	Y+14, r23	; 0x0e
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	c9 8a       	std	Y+17, r12	; 0x11
    1ecc:	da 8a       	std	Y+18, r13	; 0x12
    1ece:	eb 8a       	std	Y+19, r14	; 0x13
    1ed0:	fc 8a       	std	Y+20, r15	; 0x14
    1ed2:	1d 8a       	std	Y+21, r1	; 0x15
    1ed4:	1e 8a       	std	Y+22, r1	; 0x16
    1ed6:	1f 8a       	std	Y+23, r1	; 0x17
    1ed8:	18 8e       	std	Y+24, r1	; 0x18
    1eda:	19 8e       	std	Y+25, r1	; 0x19
    1edc:	1a 8e       	std	Y+26, r1	; 0x1a
    1ede:	1b 8e       	std	Y+27, r1	; 0x1b
    1ee0:	1c 8e       	std	Y+28, r1	; 0x1c
    1ee2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ee4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ee6:	1f 8e       	std	Y+31, r1	; 0x1f
    1ee8:	18 a2       	std	Y+32, r1	; 0x20
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	89 a3       	std	Y+33, r24	; 0x21
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	ab a3       	std	Y+35, r26	; 0x23
    1ef8:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1efa:	a5 01       	movw	r20, r10
    1efc:	be 01       	movw	r22, r28
    1efe:	6f 5f       	subi	r22, 0xFF	; 255
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <vector_into_matrix>
}
    1f08:	a4 96       	adiw	r28, 0x24	; 36
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	7f 90       	pop	r7
    1f2a:	6f 90       	pop	r6
    1f2c:	5f 90       	pop	r5
    1f2e:	4f 90       	pop	r4
    1f30:	08 95       	ret

00001f32 <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1f32:	cf 92       	push	r12
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	c8 54       	subi	r28, 0x48	; 72
    1f48:	d1 09       	sbc	r29, r1
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	8c 01       	movw	r16, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	6a 01       	movw	r12, r20
    1f5a:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	43 5f       	subi	r20, 0xF3	; 243
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	b8 01       	movw	r22, r16
    1f64:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <vector_cross_product>
  convert_unit_vector(v_o_y);
    1f68:	ce 01       	movw	r24, r28
    1f6a:	0d 96       	adiw	r24, 0x0d	; 13
    1f6c:	0e 94 c0 20 	call	0x4180	; 0x4180 <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	a2 81       	ldd	r26, Z+2	; 0x02
    1f78:	b3 81       	ldd	r27, Z+3	; 0x03
    1f7a:	b0 58       	subi	r27, 0x80	; 128
    1f7c:	89 8f       	std	Y+25, r24	; 0x19
    1f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f80:	ab 8f       	std	Y+27, r26	; 0x1b
    1f82:	bc 8f       	std	Y+28, r27	; 0x1c
    1f84:	84 81       	ldd	r24, Z+4	; 0x04
    1f86:	95 81       	ldd	r25, Z+5	; 0x05
    1f88:	a6 81       	ldd	r26, Z+6	; 0x06
    1f8a:	b7 81       	ldd	r27, Z+7	; 0x07
    1f8c:	b0 58       	subi	r27, 0x80	; 128
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f90:	9e 8f       	std	Y+30, r25	; 0x1e
    1f92:	af 8f       	std	Y+31, r26	; 0x1f
    1f94:	b8 a3       	std	Y+32, r27	; 0x20
    1f96:	00 85       	ldd	r16, Z+8	; 0x08
    1f98:	11 85       	ldd	r17, Z+9	; 0x09
    1f9a:	22 85       	ldd	r18, Z+10	; 0x0a
    1f9c:	33 85       	ldd	r19, Z+11	; 0x0b
    1f9e:	30 58       	subi	r19, 0x80	; 128
    1fa0:	09 a3       	std	Y+33, r16	; 0x21
    1fa2:	1a a3       	std	Y+34, r17	; 0x22
    1fa4:	2b a3       	std	Y+35, r18	; 0x23
    1fa6:	3c a3       	std	Y+36, r19	; 0x24
  convert_unit_vector(v_o_z);
    1fa8:	ce 01       	movw	r24, r28
    1faa:	49 96       	adiw	r24, 0x19	; 25
    1fac:	0e 94 c0 20 	call	0x4180	; 0x4180 <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1fb0:	ae 01       	movw	r20, r28
    1fb2:	4f 5f       	subi	r20, 0xFF	; 255
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb6:	be 01       	movw	r22, r28
    1fb8:	67 5e       	subi	r22, 0xE7	; 231
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	0d 96       	adiw	r24, 0x0d	; 13
    1fc0:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <vector_cross_product>
  convert_unit_vector(v_o_x);
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	0e 94 c0 20 	call	0x4180	; 0x4180 <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	ab 81       	ldd	r26, Y+3	; 0x03
    1fd2:	bc 81       	ldd	r27, Y+4	; 0x04
    1fd4:	8d a3       	std	Y+37, r24	; 0x25
    1fd6:	9e a3       	std	Y+38, r25	; 0x26
    1fd8:	af a3       	std	Y+39, r26	; 0x27
    1fda:	b8 a7       	std	Y+40, r27	; 0x28
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	af 85       	ldd	r26, Y+15	; 0x0f
    1fe2:	b8 89       	ldd	r27, Y+16	; 0x10
    1fe4:	89 a7       	std	Y+41, r24	; 0x29
    1fe6:	9a a7       	std	Y+42, r25	; 0x2a
    1fe8:	ab a7       	std	Y+43, r26	; 0x2b
    1fea:	bc a7       	std	Y+44, r27	; 0x2c
    1fec:	89 8d       	ldd	r24, Y+25	; 0x19
    1fee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ff0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ff2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1ff4:	8d a7       	std	Y+45, r24	; 0x2d
    1ff6:	9e a7       	std	Y+46, r25	; 0x2e
    1ff8:	af a7       	std	Y+47, r26	; 0x2f
    1ffa:	b8 ab       	std	Y+48, r27	; 0x30
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	af 81       	ldd	r26, Y+7	; 0x07
    2002:	b8 85       	ldd	r27, Y+8	; 0x08
    2004:	89 ab       	std	Y+49, r24	; 0x31
    2006:	9a ab       	std	Y+50, r25	; 0x32
    2008:	ab ab       	std	Y+51, r26	; 0x33
    200a:	bc ab       	std	Y+52, r27	; 0x34
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	ab 89       	ldd	r26, Y+19	; 0x13
    2012:	bc 89       	ldd	r27, Y+20	; 0x14
    2014:	8d ab       	std	Y+53, r24	; 0x35
    2016:	9e ab       	std	Y+54, r25	; 0x36
    2018:	af ab       	std	Y+55, r26	; 0x37
    201a:	b8 af       	std	Y+56, r27	; 0x38
    201c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2020:	af 8d       	ldd	r26, Y+31	; 0x1f
    2022:	b8 a1       	ldd	r27, Y+32	; 0x20
    2024:	89 af       	std	Y+57, r24	; 0x39
    2026:	9a af       	std	Y+58, r25	; 0x3a
    2028:	ab af       	std	Y+59, r26	; 0x3b
    202a:	bc af       	std	Y+60, r27	; 0x3c
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2030:	ab 85       	ldd	r26, Y+11	; 0x0b
    2032:	bc 85       	ldd	r27, Y+12	; 0x0c
    2034:	21 96       	adiw	r28, 0x01	; 1
    2036:	8c af       	std	Y+60, r24	; 0x3c
    2038:	9d af       	std	Y+61, r25	; 0x3d
    203a:	ae af       	std	Y+62, r26	; 0x3e
    203c:	bf af       	std	Y+63, r27	; 0x3f
    203e:	21 97       	sbiw	r28, 0x01	; 1
    2040:	8d 89       	ldd	r24, Y+21	; 0x15
    2042:	9e 89       	ldd	r25, Y+22	; 0x16
    2044:	af 89       	ldd	r26, Y+23	; 0x17
    2046:	b8 8d       	ldd	r27, Y+24	; 0x18
    2048:	25 96       	adiw	r28, 0x05	; 5
    204a:	8c af       	std	Y+60, r24	; 0x3c
    204c:	9d af       	std	Y+61, r25	; 0x3d
    204e:	ae af       	std	Y+62, r26	; 0x3e
    2050:	bf af       	std	Y+63, r27	; 0x3f
    2052:	25 97       	sbiw	r28, 0x05	; 5
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	ab a1       	ldd	r26, Y+35	; 0x23
    205a:	bc a1       	ldd	r27, Y+36	; 0x24
    205c:	29 96       	adiw	r28, 0x09	; 9
    205e:	8c af       	std	Y+60, r24	; 0x3c
    2060:	9d af       	std	Y+61, r25	; 0x3d
    2062:	ae af       	std	Y+62, r26	; 0x3e
    2064:	bf af       	std	Y+63, r27	; 0x3f
    2066:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    2068:	a7 01       	movw	r20, r14
    206a:	be 01       	movw	r22, r28
    206c:	6b 5d       	subi	r22, 0xDB	; 219
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	c6 01       	movw	r24, r12
    2072:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <vector_into_matrix>
}
    2076:	c8 5b       	subi	r28, 0xB8	; 184
    2078:	df 4f       	sbci	r29, 0xFF	; 255
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	08 95       	ret

00002096 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    2096:	2f 92       	push	r2
    2098:	3f 92       	push	r3
    209a:	4f 92       	push	r4
    209c:	5f 92       	push	r5
    209e:	6f 92       	push	r6
    20a0:	7f 92       	push	r7
    20a2:	8f 92       	push	r8
    20a4:	9f 92       	push	r9
    20a6:	af 92       	push	r10
    20a8:	bf 92       	push	r11
    20aa:	cf 92       	push	r12
    20ac:	df 92       	push	r13
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	2c 97       	sbiw	r28, 0x0c	; 12
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	fc 01       	movw	r30, r24
    20cc:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    20ce:	80 80       	ld	r8, Z
    20d0:	91 80       	ldd	r9, Z+1	; 0x01
    20d2:	a2 80       	ldd	r10, Z+2	; 0x02
    20d4:	b3 80       	ldd	r11, Z+3	; 0x03
    20d6:	c4 80       	ldd	r12, Z+4	; 0x04
    20d8:	d5 80       	ldd	r13, Z+5	; 0x05
    20da:	e6 80       	ldd	r14, Z+6	; 0x06
    20dc:	f7 80       	ldd	r15, Z+7	; 0x07
    20de:	40 84       	ldd	r4, Z+8	; 0x08
    20e0:	51 84       	ldd	r5, Z+9	; 0x09
    20e2:	62 84       	ldd	r6, Z+10	; 0x0a
    20e4:	73 84       	ldd	r7, Z+11	; 0x0b
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    20e6:	a5 01       	movw	r20, r10
    20e8:	94 01       	movw	r18, r8
    20ea:	c7 01       	movw	r24, r14
    20ec:	b6 01       	movw	r22, r12
    20ee:	0e 94 c9 31 	call	0x6392	; 0x6392 <atan2>
    20f2:	69 87       	std	Y+9, r22	; 0x09
    20f4:	7a 87       	std	Y+10, r23	; 0x0a
    20f6:	8b 87       	std	Y+11, r24	; 0x0b
    20f8:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    20fa:	a5 01       	movw	r20, r10
    20fc:	94 01       	movw	r18, r8
    20fe:	c5 01       	movw	r24, r10
    2100:	b4 01       	movw	r22, r8
    2102:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	a5 01       	movw	r20, r10
    2110:	94 01       	movw	r18, r8
    2112:	c5 01       	movw	r24, r10
    2114:	b4 01       	movw	r22, r8
    2116:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    211a:	4b 01       	movw	r8, r22
    211c:	5c 01       	movw	r10, r24
    211e:	a7 01       	movw	r20, r14
    2120:	96 01       	movw	r18, r12
    2122:	c7 01       	movw	r24, r14
    2124:	b6 01       	movw	r22, r12
    2126:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    212a:	9b 01       	movw	r18, r22
    212c:	ac 01       	movw	r20, r24
    212e:	c5 01       	movw	r24, r10
    2130:	b4 01       	movw	r22, r8
    2132:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2136:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    213a:	69 83       	std	Y+1, r22	; 0x01
    213c:	7a 83       	std	Y+2, r23	; 0x02
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	9c 83       	std	Y+4, r25	; 0x04
  
  beta = atan2(z, (1 - F) * rho);
    2142:	25 e4       	ldi	r18, 0x45	; 69
    2144:	34 e2       	ldi	r19, 0x24	; 36
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	c3 01       	movw	r24, r6
    2154:	b2 01       	movw	r22, r4
    2156:	0e 94 c9 31 	call	0x6392	; 0x6392 <atan2>
    215a:	4b 01       	movw	r8, r22
    215c:	5c 01       	movw	r10, r24
    215e:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    2160:	c5 01       	movw	r24, r10
    2162:	b4 01       	movw	r22, r8
    2164:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e4       	ldi	r20, 0x40	; 64
    216e:	50 e4       	ldi	r21, 0x40	; 64
    2170:	0e 94 a4 34 	call	0x6948	; 0x6948 <pow>
    2174:	6b 01       	movw	r12, r22
    2176:	7c 01       	movw	r14, r24
    2178:	c5 01       	movw	r24, r10
    217a:	b4 01       	movw	r22, r8
    217c:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e4       	ldi	r20, 0x40	; 64
    2186:	50 e4       	ldi	r21, 0x40	; 64
    2188:	0e 94 a4 34 	call	0x6948	; 0x6948 <pow>
    218c:	4b 01       	movw	r8, r22
    218e:	5c 01       	movw	r10, r24
    2190:	2e ea       	ldi	r18, 0xAE	; 174
    2192:	39 ec       	ldi	r19, 0xC9	; 201
    2194:	46 e2       	ldi	r20, 0x26	; 38
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	c7 01       	movw	r24, r14
    219a:	b6 01       	movw	r22, r12
    219c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	69 81       	ldd	r22, Y+1	; 0x01
    21a6:	7a 81       	ldd	r23, Y+2	; 0x02
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    21b0:	6b 01       	movw	r12, r22
    21b2:	7c 01       	movw	r14, r24
    21b4:	21 e5       	ldi	r18, 0x51	; 81
    21b6:	39 e5       	ldi	r19, 0x59	; 89
    21b8:	47 e2       	ldi	r20, 0x27	; 39
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	c5 01       	movw	r24, r10
    21be:	b4 01       	movw	r22, r8
    21c0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    21c4:	a3 01       	movw	r20, r6
    21c6:	92 01       	movw	r18, r4
    21c8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    21cc:	a7 01       	movw	r20, r14
    21ce:	96 01       	movw	r18, r12
    21d0:	0e 94 c9 31 	call	0x6392	; 0x6392 <atan2>
    21d4:	6b 01       	movw	r12, r22
    21d6:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    21d8:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    21dc:	4b 01       	movw	r8, r22
    21de:	5c 01       	movw	r10, r24
    21e0:	c7 01       	movw	r24, r14
    21e2:	b6 01       	movw	r22, r12
    21e4:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    21e8:	25 e4       	ldi	r18, 0x45	; 69
    21ea:	34 e2       	ldi	r19, 0x24	; 36
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    21f4:	a5 01       	movw	r20, r10
    21f6:	94 01       	movw	r18, r8
    21f8:	0e 94 c9 31 	call	0x6392	; 0x6392 <atan2>
    21fc:	4b 01       	movw	r8, r22
    21fe:	5c 01       	movw	r10, r24
    2200:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    2202:	09 f0       	breq	.+2      	; 0x2206 <ecef2lla+0x170>
    2204:	ad cf       	rjmp	.-166    	; 0x2160 <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    2206:	c7 01       	movw	r24, r14
    2208:	b6 01       	movw	r22, r12
    220a:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    220e:	4b 01       	movw	r8, r22
    2210:	5c 01       	movw	r10, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    2212:	2a e8       	ldi	r18, 0x8A	; 138
    2214:	3c e5       	ldi	r19, 0x5C	; 92
    2216:	4b ed       	ldi	r20, 0xDB	; 219
    2218:	5b e3       	ldi	r21, 0x3B	; 59
    221a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    221e:	6d 83       	std	Y+5, r22	; 0x05
    2220:	7e 83       	std	Y+6, r23	; 0x06
    2222:	8f 83       	std	Y+7, r24	; 0x07
    2224:	98 87       	std	Y+8, r25	; 0x08
    2226:	a5 01       	movw	r20, r10
    2228:	94 01       	movw	r18, r8
    222a:	6d 81       	ldd	r22, Y+5	; 0x05
    222c:	7e 81       	ldd	r23, Y+6	; 0x06
    222e:	8f 81       	ldd	r24, Y+7	; 0x07
    2230:	98 85       	ldd	r25, Y+8	; 0x08
    2232:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2236:	9b 01       	movw	r18, r22
    2238:	ac 01       	movw	r20, r24
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	80 e8       	ldi	r24, 0x80	; 128
    2240:	9f e3       	ldi	r25, 0x3F	; 63
    2242:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    2246:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	62 e3       	ldi	r22, 0x32	; 50
    2250:	75 ea       	ldi	r23, 0xA5	; 165
    2252:	82 ec       	ldi	r24, 0xC2	; 194
    2254:	9a e4       	ldi	r25, 0x4A	; 74
    2256:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    225a:	6d 83       	std	Y+5, r22	; 0x05
    225c:	7e 83       	std	Y+6, r23	; 0x06
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2262:	c7 01       	movw	r24, r14
    2264:	b6 01       	movw	r22, r12
    2266:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
  
  v_lla[0] = phi;
    226a:	f1 01       	movw	r30, r2
    226c:	c0 82       	st	Z, r12
    226e:	d1 82       	std	Z+1, r13	; 0x01
    2270:	e2 82       	std	Z+2, r14	; 0x02
    2272:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    2274:	29 85       	ldd	r18, Y+9	; 0x09
    2276:	3a 85       	ldd	r19, Y+10	; 0x0a
    2278:	4b 85       	ldd	r20, Y+11	; 0x0b
    227a:	5c 85       	ldd	r21, Y+12	; 0x0c
    227c:	24 83       	std	Z+4, r18	; 0x04
    227e:	35 83       	std	Z+5, r19	; 0x05
    2280:	46 83       	std	Z+6, r20	; 0x06
    2282:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2284:	29 81       	ldd	r18, Y+1	; 0x01
    2286:	3a 81       	ldd	r19, Y+2	; 0x02
    2288:	4b 81       	ldd	r20, Y+3	; 0x03
    228a:	5c 81       	ldd	r21, Y+4	; 0x04
    228c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2290:	69 83       	std	Y+1, r22	; 0x01
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	2a e8       	ldi	r18, 0x8A	; 138
    229a:	3c e5       	ldi	r19, 0x5C	; 92
    229c:	4b ed       	ldi	r20, 0xDB	; 219
    229e:	5b e3       	ldi	r21, 0x3B	; 59
    22a0:	6d 81       	ldd	r22, Y+5	; 0x05
    22a2:	7e 81       	ldd	r23, Y+6	; 0x06
    22a4:	8f 81       	ldd	r24, Y+7	; 0x07
    22a6:	98 85       	ldd	r25, Y+8	; 0x08
    22a8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    22ac:	a5 01       	movw	r20, r10
    22ae:	94 01       	movw	r18, r8
    22b0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    22b4:	a3 01       	movw	r20, r6
    22b6:	92 01       	movw	r18, r4
    22b8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    22bc:	a5 01       	movw	r20, r10
    22be:	94 01       	movw	r18, r8
    22c0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    22c4:	9b 01       	movw	r18, r22
    22c6:	ac 01       	movw	r20, r24
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    22d4:	2d 81       	ldd	r18, Y+5	; 0x05
    22d6:	3e 81       	ldd	r19, Y+6	; 0x06
    22d8:	4f 81       	ldd	r20, Y+7	; 0x07
    22da:	58 85       	ldd	r21, Y+8	; 0x08
    22dc:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    22e0:	f1 01       	movw	r30, r2
    22e2:	60 87       	std	Z+8, r22	; 0x08
    22e4:	71 87       	std	Z+9, r23	; 0x09
    22e6:	82 87       	std	Z+10, r24	; 0x0a
    22e8:	93 87       	std	Z+11, r25	; 0x0b
   Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	44 e3       	ldi	r20, 0x34	; 52
    22f0:	53 e4       	ldi	r21, 0x43	; 67
    22f2:	c7 01       	movw	r24, r14
    22f4:	b6 01       	movw	r22, r12
    22f6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    22fa:	28 ed       	ldi	r18, 0xD8	; 216
    22fc:	3f e0       	ldi	r19, 0x0F	; 15
    22fe:	49 e4       	ldi	r20, 0x49	; 73
    2300:	50 e4       	ldi	r21, 0x40	; 64
    2302:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	48 ec       	ldi	r20, 0xC8	; 200
    230c:	52 e4       	ldi	r21, 0x42	; 66
    230e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2312:	0e 94 8b 32 	call	0x6516	; 0x6516 <__fixsfsi>
    2316:	0b ea       	ldi	r16, 0xAB	; 171
    2318:	14 e0       	ldi	r17, 0x04	; 4
    231a:	f8 01       	movw	r30, r16
    231c:	61 8f       	std	Z+25, r22	; 0x19
    231e:	72 8f       	std	Z+26, r23	; 0x1a
    2320:	83 8f       	std	Z+27, r24	; 0x1b
    2322:	94 8f       	std	Z+28, r25	; 0x1c
   Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	44 e3       	ldi	r20, 0x34	; 52
    232a:	53 e4       	ldi	r21, 0x43	; 67
    232c:	f1 01       	movw	r30, r2
    232e:	64 81       	ldd	r22, Z+4	; 0x04
    2330:	75 81       	ldd	r23, Z+5	; 0x05
    2332:	86 81       	ldd	r24, Z+6	; 0x06
    2334:	97 81       	ldd	r25, Z+7	; 0x07
    2336:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    233a:	28 ed       	ldi	r18, 0xD8	; 216
    233c:	3f e0       	ldi	r19, 0x0F	; 15
    233e:	49 e4       	ldi	r20, 0x49	; 73
    2340:	50 e4       	ldi	r21, 0x40	; 64
    2342:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	48 ec       	ldi	r20, 0xC8	; 200
    234c:	52 e4       	ldi	r21, 0x42	; 66
    234e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2352:	0e 94 8b 32 	call	0x6516	; 0x6516 <__fixsfsi>
    2356:	f8 01       	movw	r30, r16
    2358:	65 8f       	std	Z+29, r22	; 0x1d
    235a:	76 8f       	std	Z+30, r23	; 0x1e
    235c:	87 8f       	std	Z+31, r24	; 0x1f
    235e:	90 a3       	std	Z+32, r25	; 0x20
   Current_state.gps.alt=v_lla[2]; 
    2360:	f1 01       	movw	r30, r2
    2362:	60 85       	ldd	r22, Z+8	; 0x08
    2364:	71 85       	ldd	r23, Z+9	; 0x09
    2366:	82 85       	ldd	r24, Z+10	; 0x0a
    2368:	93 85       	ldd	r25, Z+11	; 0x0b
    236a:	0e 94 8b 32 	call	0x6516	; 0x6516 <__fixsfsi>
    236e:	f8 01       	movw	r30, r16
    2370:	61 a3       	std	Z+33, r22	; 0x21
    2372:	72 a3       	std	Z+34, r23	; 0x22
    2374:	83 a3       	std	Z+35, r24	; 0x23
    2376:	94 a3       	std	Z+36, r25	; 0x24
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    2378:	2c 96       	adiw	r28, 0x0c	; 12
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	df 90       	pop	r13
    2392:	cf 90       	pop	r12
    2394:	bf 90       	pop	r11
    2396:	af 90       	pop	r10
    2398:	9f 90       	pop	r9
    239a:	8f 90       	pop	r8
    239c:	7f 90       	pop	r7
    239e:	6f 90       	pop	r6
    23a0:	5f 90       	pop	r5
    23a2:	4f 90       	pop	r4
    23a4:	3f 90       	pop	r3
    23a6:	2f 90       	pop	r2
    23a8:	08 95       	ret

000023aa <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    23aa:	2f 92       	push	r2
    23ac:	3f 92       	push	r3
    23ae:	4f 92       	push	r4
    23b0:	5f 92       	push	r5
    23b2:	6f 92       	push	r6
    23b4:	7f 92       	push	r7
    23b6:	8f 92       	push	r8
    23b8:	9f 92       	push	r9
    23ba:	af 92       	push	r10
    23bc:	bf 92       	push	r11
    23be:	cf 92       	push	r12
    23c0:	df 92       	push	r13
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	ac 97       	sbiw	r28, 0x2c	; 44
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	1c 01       	movw	r2, r24
    23e0:	7b 01       	movw	r14, r22
    23e2:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    23e4:	db 01       	movw	r26, r22
    23e6:	4d 90       	ld	r4, X+
    23e8:	5d 90       	ld	r5, X+
    23ea:	6d 90       	ld	r6, X+
    23ec:	7c 90       	ld	r7, X
    23ee:	c3 01       	movw	r24, r6
    23f0:	b2 01       	movw	r22, r4
    23f2:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    23f6:	4b 01       	movw	r8, r22
    23f8:	5c 01       	movw	r10, r24
    23fa:	f7 01       	movw	r30, r14
    23fc:	c4 80       	ldd	r12, Z+4	; 0x04
    23fe:	d5 80       	ldd	r13, Z+5	; 0x05
    2400:	e6 80       	ldd	r14, Z+6	; 0x06
    2402:	f7 80       	ldd	r15, Z+7	; 0x07
    2404:	c7 01       	movw	r24, r14
    2406:	b6 01       	movw	r22, r12
    2408:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    240c:	6d a3       	std	Y+37, r22	; 0x25
    240e:	7e a3       	std	Y+38, r23	; 0x26
    2410:	8f a3       	std	Y+39, r24	; 0x27
    2412:	98 a7       	std	Y+40, r25	; 0x28
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    2414:	c3 01       	movw	r24, r6
    2416:	b2 01       	movw	r22, r4
    2418:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    241c:	2b 01       	movw	r4, r22
    241e:	3c 01       	movw	r6, r24
    2420:	c7 01       	movw	r24, r14
    2422:	b6 01       	movw	r22, r12
    2424:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    2428:	6b 01       	movw	r12, r22
    242a:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    242c:	77 fa       	bst	r7, 7
    242e:	70 94       	com	r7
    2430:	77 f8       	bld	r7, 7
    2432:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    2434:	d5 01       	movw	r26, r10
    2436:	c4 01       	movw	r24, r8
    2438:	b0 58       	subi	r27, 0x80	; 128
    243a:	89 a7       	std	Y+41, r24	; 0x29
    243c:	9a a7       	std	Y+42, r25	; 0x2a
    243e:	ab a7       	std	Y+43, r26	; 0x2b
    2440:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2442:	2d a1       	ldd	r18, Y+37	; 0x25
    2444:	3e a1       	ldd	r19, Y+38	; 0x26
    2446:	4f a1       	ldd	r20, Y+39	; 0x27
    2448:	58 a5       	ldd	r21, Y+40	; 0x28
    244a:	c3 01       	movw	r24, r6
    244c:	b2 01       	movw	r22, r4
    244e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2452:	69 83       	std	Y+1, r22	; 0x01
    2454:	7a 83       	std	Y+2, r23	; 0x02
    2456:	8b 83       	std	Y+3, r24	; 0x03
    2458:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    245a:	a3 01       	movw	r20, r6
    245c:	92 01       	movw	r18, r4
    245e:	c7 01       	movw	r24, r14
    2460:	b6 01       	movw	r22, r12
    2462:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2466:	6d 83       	std	Y+5, r22	; 0x05
    2468:	7e 83       	std	Y+6, r23	; 0x06
    246a:	8f 83       	std	Y+7, r24	; 0x07
    246c:	98 87       	std	Y+8, r25	; 0x08
    246e:	89 86       	std	Y+9, r8	; 0x09
    2470:	9a 86       	std	Y+10, r9	; 0x0a
    2472:	ab 86       	std	Y+11, r10	; 0x0b
    2474:	bc 86       	std	Y+12, r11	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    2476:	d7 01       	movw	r26, r14
    2478:	c6 01       	movw	r24, r12
    247a:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    247c:	8d 87       	std	Y+13, r24	; 0x0d
    247e:	9e 87       	std	Y+14, r25	; 0x0e
    2480:	af 87       	std	Y+15, r26	; 0x0f
    2482:	b8 8b       	std	Y+16, r27	; 0x10
    2484:	8d a1       	ldd	r24, Y+37	; 0x25
    2486:	9e a1       	ldd	r25, Y+38	; 0x26
    2488:	af a1       	ldd	r26, Y+39	; 0x27
    248a:	b8 a5       	ldd	r27, Y+40	; 0x28
    248c:	89 8b       	std	Y+17, r24	; 0x11
    248e:	9a 8b       	std	Y+18, r25	; 0x12
    2490:	ab 8b       	std	Y+19, r26	; 0x13
    2492:	bc 8b       	std	Y+20, r27	; 0x14
    2494:	1d 8a       	std	Y+21, r1	; 0x15
    2496:	1e 8a       	std	Y+22, r1	; 0x16
    2498:	1f 8a       	std	Y+23, r1	; 0x17
    249a:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    249c:	9c 01       	movw	r18, r24
    249e:	ad 01       	movw	r20, r26
    24a0:	69 a5       	ldd	r22, Y+41	; 0x29
    24a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    24a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    24ac:	69 8f       	std	Y+25, r22	; 0x19
    24ae:	7a 8f       	std	Y+26, r23	; 0x1a
    24b0:	8b 8f       	std	Y+27, r24	; 0x1b
    24b2:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    24b4:	29 a5       	ldd	r18, Y+41	; 0x29
    24b6:	3a a5       	ldd	r19, Y+42	; 0x2a
    24b8:	4b a5       	ldd	r20, Y+43	; 0x2b
    24ba:	5c a5       	ldd	r21, Y+44	; 0x2c
    24bc:	c7 01       	movw	r24, r14
    24be:	b6 01       	movw	r22, r12
    24c0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    24c4:	6d 8f       	std	Y+29, r22	; 0x1d
    24c6:	7e 8f       	std	Y+30, r23	; 0x1e
    24c8:	8f 8f       	std	Y+31, r24	; 0x1f
    24ca:	98 a3       	std	Y+32, r25	; 0x20
    24cc:	49 a2       	std	Y+33, r4	; 0x21
    24ce:	5a a2       	std	Y+34, r5	; 0x22
    24d0:	6b a2       	std	Y+35, r6	; 0x23
    24d2:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    24d4:	a8 01       	movw	r20, r16
    24d6:	be 01       	movw	r22, r28
    24d8:	6f 5f       	subi	r22, 0xFF	; 255
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	c1 01       	movw	r24, r2
    24de:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <vector_into_matrix>
}
    24e2:	ac 96       	adiw	r28, 0x2c	; 44
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	bf 90       	pop	r11
    2500:	af 90       	pop	r10
    2502:	9f 90       	pop	r9
    2504:	8f 90       	pop	r8
    2506:	7f 90       	pop	r7
    2508:	6f 90       	pop	r6
    250a:	5f 90       	pop	r5
    250c:	4f 90       	pop	r4
    250e:	3f 90       	pop	r3
    2510:	2f 90       	pop	r2
    2512:	08 95       	ret

00002514 <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    2514:	1f 92       	push	r1
    2516:	0f 92       	push	r0
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	0b b6       	in	r0, 0x3b	; 59
    2520:	0f 92       	push	r0
    2522:	2f 93       	push	r18
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
	Current_state.gps.anant_flag = 0;
    2530:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <Current_state+0x18>
  PORTA ^= 0xf0;
    2534:	9b b3       	in	r25, 0x1b	; 27
    2536:	80 ef       	ldi	r24, 0xF0	; 240
    2538:	89 27       	eor	r24, r25
    253a:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    253c:	8c b1       	in	r24, 0x0c	; 12
    253e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <last_byte>
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    2542:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2546:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    254a:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    254e:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2552:	ba 2f       	mov	r27, r26
    2554:	a9 2f       	mov	r26, r25
    2556:	98 2f       	mov	r25, r24
    2558:	88 27       	eor	r24, r24
    255a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    255e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    2562:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    2566:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer &= 0xFFFFFF00;
    256a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    256e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2572:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2576:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    257a:	88 27       	eor	r24, r24
    257c:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    2580:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    2584:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    2588:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer |= (uint32_t) last_byte;
    258c:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2590:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2594:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2598:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    259c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    25a0:	82 2b       	or	r24, r18
    25a2:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    25a6:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    25aa:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    25ae:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
    25b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    25b6:	8c 30       	cpi	r24, 0x0C	; 12
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <__vector_18+0xa8>
    25ba:	86 c0       	rjmp	.+268    	; 0x26c8 <__vector_18+0x1b4>
  {
    
    if(pos<4)
    25bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	28 f5       	brcc	.+74     	; 0x260e <__vector_18+0xfa>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    25c4:	eb ea       	ldi	r30, 0xAB	; 171
    25c6:	f4 e0       	ldi	r31, 0x04	; 4
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	a2 81       	ldd	r26, Z+2	; 0x02
    25ce:	b3 81       	ldd	r27, Z+3	; 0x03
    25d0:	89 2f       	mov	r24, r25
    25d2:	9a 2f       	mov	r25, r26
    25d4:	ab 2f       	mov	r26, r27
    25d6:	bb 27       	eor	r27, r27
    25d8:	a7 fd       	sbrc	r26, 7
    25da:	ba 95       	dec	r27
    25dc:	80 83       	st	Z, r24
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	a2 83       	std	Z+2, r26	; 0x02
    25e2:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	a2 81       	ldd	r26, Z+2	; 0x02
    25ea:	b3 81       	ldd	r27, Z+3	; 0x03
    25ec:	bb 27       	eor	r27, r27
    25ee:	80 83       	st	Z, r24
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	a2 83       	std	Z+2, r26	; 0x02
    25f4:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    25f6:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2600:	b3 81       	ldd	r27, Z+3	; 0x03
    2602:	b2 2b       	or	r27, r18
    2604:	80 83       	st	Z, r24
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	a2 83       	std	Z+2, r26	; 0x02
    260a:	b3 83       	std	Z+3, r27	; 0x03
    260c:	51 c0       	rjmp	.+162    	; 0x26b0 <__vector_18+0x19c>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    260e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    2612:	88 30       	cpi	r24, 0x08	; 8
    2614:	28 f5       	brcc	.+74     	; 0x2660 <__vector_18+0x14c>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    2616:	eb ea       	ldi	r30, 0xAB	; 171
    2618:	f4 e0       	ldi	r31, 0x04	; 4
    261a:	84 81       	ldd	r24, Z+4	; 0x04
    261c:	95 81       	ldd	r25, Z+5	; 0x05
    261e:	a6 81       	ldd	r26, Z+6	; 0x06
    2620:	b7 81       	ldd	r27, Z+7	; 0x07
    2622:	89 2f       	mov	r24, r25
    2624:	9a 2f       	mov	r25, r26
    2626:	ab 2f       	mov	r26, r27
    2628:	bb 27       	eor	r27, r27
    262a:	a7 fd       	sbrc	r26, 7
    262c:	ba 95       	dec	r27
    262e:	84 83       	std	Z+4, r24	; 0x04
    2630:	95 83       	std	Z+5, r25	; 0x05
    2632:	a6 83       	std	Z+6, r26	; 0x06
    2634:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y &= 0x00FFFFFF;
    2636:	84 81       	ldd	r24, Z+4	; 0x04
    2638:	95 81       	ldd	r25, Z+5	; 0x05
    263a:	a6 81       	ldd	r26, Z+6	; 0x06
    263c:	b7 81       	ldd	r27, Z+7	; 0x07
    263e:	bb 27       	eor	r27, r27
    2640:	84 83       	std	Z+4, r24	; 0x04
    2642:	95 83       	std	Z+5, r25	; 0x05
    2644:	a6 83       	std	Z+6, r26	; 0x06
    2646:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    2648:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    264c:	84 81       	ldd	r24, Z+4	; 0x04
    264e:	95 81       	ldd	r25, Z+5	; 0x05
    2650:	a6 81       	ldd	r26, Z+6	; 0x06
    2652:	b7 81       	ldd	r27, Z+7	; 0x07
    2654:	b2 2b       	or	r27, r18
    2656:	84 83       	std	Z+4, r24	; 0x04
    2658:	95 83       	std	Z+5, r25	; 0x05
    265a:	a6 83       	std	Z+6, r26	; 0x06
    265c:	b7 83       	std	Z+7, r27	; 0x07
    265e:	28 c0       	rjmp	.+80     	; 0x26b0 <__vector_18+0x19c>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    2660:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    2664:	8c 30       	cpi	r24, 0x0C	; 12
    2666:	20 f5       	brcc	.+72     	; 0x26b0 <__vector_18+0x19c>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    2668:	eb ea       	ldi	r30, 0xAB	; 171
    266a:	f4 e0       	ldi	r31, 0x04	; 4
    266c:	80 85       	ldd	r24, Z+8	; 0x08
    266e:	91 85       	ldd	r25, Z+9	; 0x09
    2670:	a2 85       	ldd	r26, Z+10	; 0x0a
    2672:	b3 85       	ldd	r27, Z+11	; 0x0b
    2674:	89 2f       	mov	r24, r25
    2676:	9a 2f       	mov	r25, r26
    2678:	ab 2f       	mov	r26, r27
    267a:	bb 27       	eor	r27, r27
    267c:	a7 fd       	sbrc	r26, 7
    267e:	ba 95       	dec	r27
    2680:	80 87       	std	Z+8, r24	; 0x08
    2682:	91 87       	std	Z+9, r25	; 0x09
    2684:	a2 87       	std	Z+10, r26	; 0x0a
    2686:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z &= 0x00FFFFFF;
    2688:	80 85       	ldd	r24, Z+8	; 0x08
    268a:	91 85       	ldd	r25, Z+9	; 0x09
    268c:	a2 85       	ldd	r26, Z+10	; 0x0a
    268e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2690:	bb 27       	eor	r27, r27
    2692:	80 87       	std	Z+8, r24	; 0x08
    2694:	91 87       	std	Z+9, r25	; 0x09
    2696:	a2 87       	std	Z+10, r26	; 0x0a
    2698:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    269a:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    269e:	80 85       	ldd	r24, Z+8	; 0x08
    26a0:	91 85       	ldd	r25, Z+9	; 0x09
    26a2:	a2 85       	ldd	r26, Z+10	; 0x0a
    26a4:	b3 85       	ldd	r27, Z+11	; 0x0b
    26a6:	b2 2b       	or	r27, r18
    26a8:	80 87       	std	Z+8, r24	; 0x08
    26aa:	91 87       	std	Z+9, r25	; 0x09
    26ac:	a2 87       	std	Z+10, r26	; 0x0a
    26ae:	b3 87       	std	Z+11, r27	; 0x0b
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    26b0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    26b4:	8f 5f       	subi	r24, 0xFF	; 255
    26b6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
    if(pos == 12)
    26ba:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    26be:	8c 30       	cpi	r24, 0x0C	; 12
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <__vector_18+0x1b4>
	{
      pos = 0xFF;
    26c2:	8f ef       	ldi	r24, 0xFF	; 255
    26c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    26c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    26cc:	8c 30       	cpi	r24, 0x0C	; 12
    26ce:	08 f0       	brcs	.+2      	; 0x26d2 <__vector_18+0x1be>
    26d0:	86 c0       	rjmp	.+268    	; 0x27de <__vector_18+0x2ca>
  {
	  
    if(vel < 4)
    26d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    26d6:	84 30       	cpi	r24, 0x04	; 4
    26d8:	28 f5       	brcc	.+74     	; 0x2724 <__vector_18+0x210>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    26da:	eb ea       	ldi	r30, 0xAB	; 171
    26dc:	f4 e0       	ldi	r31, 0x04	; 4
    26de:	84 85       	ldd	r24, Z+12	; 0x0c
    26e0:	95 85       	ldd	r25, Z+13	; 0x0d
    26e2:	a6 85       	ldd	r26, Z+14	; 0x0e
    26e4:	b7 85       	ldd	r27, Z+15	; 0x0f
    26e6:	89 2f       	mov	r24, r25
    26e8:	9a 2f       	mov	r25, r26
    26ea:	ab 2f       	mov	r26, r27
    26ec:	bb 27       	eor	r27, r27
    26ee:	a7 fd       	sbrc	r26, 7
    26f0:	ba 95       	dec	r27
    26f2:	84 87       	std	Z+12, r24	; 0x0c
    26f4:	95 87       	std	Z+13, r25	; 0x0d
    26f6:	a6 87       	std	Z+14, r26	; 0x0e
    26f8:	b7 87       	std	Z+15, r27	; 0x0f
		Current_state.gps.v_x &= 0x00FFFFFF;
    26fa:	84 85       	ldd	r24, Z+12	; 0x0c
    26fc:	95 85       	ldd	r25, Z+13	; 0x0d
    26fe:	a6 85       	ldd	r26, Z+14	; 0x0e
    2700:	b7 85       	ldd	r27, Z+15	; 0x0f
    2702:	bb 27       	eor	r27, r27
    2704:	84 87       	std	Z+12, r24	; 0x0c
    2706:	95 87       	std	Z+13, r25	; 0x0d
    2708:	a6 87       	std	Z+14, r26	; 0x0e
    270a:	b7 87       	std	Z+15, r27	; 0x0f
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    270c:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2710:	84 85       	ldd	r24, Z+12	; 0x0c
    2712:	95 85       	ldd	r25, Z+13	; 0x0d
    2714:	a6 85       	ldd	r26, Z+14	; 0x0e
    2716:	b7 85       	ldd	r27, Z+15	; 0x0f
    2718:	b2 2b       	or	r27, r18
    271a:	84 87       	std	Z+12, r24	; 0x0c
    271c:	95 87       	std	Z+13, r25	; 0x0d
    271e:	a6 87       	std	Z+14, r26	; 0x0e
    2720:	b7 87       	std	Z+15, r27	; 0x0f
    2722:	51 c0       	rjmp	.+162    	; 0x27c6 <__vector_18+0x2b2>
		
	}
	else if(vel < 8)
    2724:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2728:	88 30       	cpi	r24, 0x08	; 8
    272a:	28 f5       	brcc	.+74     	; 0x2776 <__vector_18+0x262>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    272c:	eb ea       	ldi	r30, 0xAB	; 171
    272e:	f4 e0       	ldi	r31, 0x04	; 4
    2730:	80 89       	ldd	r24, Z+16	; 0x10
    2732:	91 89       	ldd	r25, Z+17	; 0x11
    2734:	a2 89       	ldd	r26, Z+18	; 0x12
    2736:	b3 89       	ldd	r27, Z+19	; 0x13
    2738:	89 2f       	mov	r24, r25
    273a:	9a 2f       	mov	r25, r26
    273c:	ab 2f       	mov	r26, r27
    273e:	bb 27       	eor	r27, r27
    2740:	a7 fd       	sbrc	r26, 7
    2742:	ba 95       	dec	r27
    2744:	80 8b       	std	Z+16, r24	; 0x10
    2746:	91 8b       	std	Z+17, r25	; 0x11
    2748:	a2 8b       	std	Z+18, r26	; 0x12
    274a:	b3 8b       	std	Z+19, r27	; 0x13
		Current_state.gps.v_y &= 0x00FFFFFF;
    274c:	80 89       	ldd	r24, Z+16	; 0x10
    274e:	91 89       	ldd	r25, Z+17	; 0x11
    2750:	a2 89       	ldd	r26, Z+18	; 0x12
    2752:	b3 89       	ldd	r27, Z+19	; 0x13
    2754:	bb 27       	eor	r27, r27
    2756:	80 8b       	std	Z+16, r24	; 0x10
    2758:	91 8b       	std	Z+17, r25	; 0x11
    275a:	a2 8b       	std	Z+18, r26	; 0x12
    275c:	b3 8b       	std	Z+19, r27	; 0x13
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    275e:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2762:	80 89       	ldd	r24, Z+16	; 0x10
    2764:	91 89       	ldd	r25, Z+17	; 0x11
    2766:	a2 89       	ldd	r26, Z+18	; 0x12
    2768:	b3 89       	ldd	r27, Z+19	; 0x13
    276a:	b2 2b       	or	r27, r18
    276c:	80 8b       	std	Z+16, r24	; 0x10
    276e:	91 8b       	std	Z+17, r25	; 0x11
    2770:	a2 8b       	std	Z+18, r26	; 0x12
    2772:	b3 8b       	std	Z+19, r27	; 0x13
    2774:	28 c0       	rjmp	.+80     	; 0x27c6 <__vector_18+0x2b2>
	}
	else if(vel < 12)
    2776:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    277a:	8c 30       	cpi	r24, 0x0C	; 12
    277c:	20 f5       	brcc	.+72     	; 0x27c6 <__vector_18+0x2b2>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    277e:	eb ea       	ldi	r30, 0xAB	; 171
    2780:	f4 e0       	ldi	r31, 0x04	; 4
    2782:	84 89       	ldd	r24, Z+20	; 0x14
    2784:	95 89       	ldd	r25, Z+21	; 0x15
    2786:	a6 89       	ldd	r26, Z+22	; 0x16
    2788:	b7 89       	ldd	r27, Z+23	; 0x17
    278a:	89 2f       	mov	r24, r25
    278c:	9a 2f       	mov	r25, r26
    278e:	ab 2f       	mov	r26, r27
    2790:	bb 27       	eor	r27, r27
    2792:	a7 fd       	sbrc	r26, 7
    2794:	ba 95       	dec	r27
    2796:	84 8b       	std	Z+20, r24	; 0x14
    2798:	95 8b       	std	Z+21, r25	; 0x15
    279a:	a6 8b       	std	Z+22, r26	; 0x16
    279c:	b7 8b       	std	Z+23, r27	; 0x17
		Current_state.gps.v_z &= 0x00FFFFFF;
    279e:	84 89       	ldd	r24, Z+20	; 0x14
    27a0:	95 89       	ldd	r25, Z+21	; 0x15
    27a2:	a6 89       	ldd	r26, Z+22	; 0x16
    27a4:	b7 89       	ldd	r27, Z+23	; 0x17
    27a6:	bb 27       	eor	r27, r27
    27a8:	84 8b       	std	Z+20, r24	; 0x14
    27aa:	95 8b       	std	Z+21, r25	; 0x15
    27ac:	a6 8b       	std	Z+22, r26	; 0x16
    27ae:	b7 8b       	std	Z+23, r27	; 0x17
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    27b0:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    27b4:	84 89       	ldd	r24, Z+20	; 0x14
    27b6:	95 89       	ldd	r25, Z+21	; 0x15
    27b8:	a6 89       	ldd	r26, Z+22	; 0x16
    27ba:	b7 89       	ldd	r27, Z+23	; 0x17
    27bc:	b2 2b       	or	r27, r18
    27be:	84 8b       	std	Z+20, r24	; 0x14
    27c0:	95 8b       	std	Z+21, r25	; 0x15
    27c2:	a6 8b       	std	Z+22, r26	; 0x16
    27c4:	b7 8b       	std	Z+23, r27	; 0x17
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    27c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>
    if(vel == 12)
    27d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    27d4:	8c 30       	cpi	r24, 0x0C	; 12
    27d6:	19 f4       	brne	.+6      	; 0x27de <__vector_18+0x2ca>
     {
		  vel = 0xFF;
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    27de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	20 f5       	brcc	.+72     	; 0x282e <__vector_18+0x31a>
  {
    if(dop >= 2)
    27e6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	a0 f0       	brcs	.+40     	; 0x2816 <__vector_18+0x302>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    27ee:	eb ea       	ldi	r30, 0xAB	; 171
    27f0:	f4 e0       	ldi	r31, 0x04	; 4
    27f2:	84 a5       	ldd	r24, Z+44	; 0x2c
    27f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    27f6:	89 2f       	mov	r24, r25
    27f8:	99 27       	eor	r25, r25
    27fa:	95 a7       	std	Z+45, r25	; 0x2d
    27fc:	84 a7       	std	Z+44, r24	; 0x2c
		 Current_state.gps.pdop &= 0x00FF;
    27fe:	84 a5       	ldd	r24, Z+44	; 0x2c
    2800:	95 a5       	ldd	r25, Z+45	; 0x2d
    2802:	99 27       	eor	r25, r25
    2804:	95 a7       	std	Z+45, r25	; 0x2d
    2806:	84 a7       	std	Z+44, r24	; 0x2c
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    2808:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    280c:	84 a5       	ldd	r24, Z+44	; 0x2c
    280e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2810:	92 2b       	or	r25, r18
    2812:	95 a7       	std	Z+45, r25	; 0x2d
    2814:	84 a7       	std	Z+44, r24	; 0x2c
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    2816:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
    if(dop == 4)
    2820:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2824:	84 30       	cpi	r24, 0x04	; 4
    2826:	19 f4       	brne	.+6      	; 0x282e <__vector_18+0x31a>
      dop = 0xFF;
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    282e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2832:	80 31       	cpi	r24, 0x10	; 16
    2834:	08 f0       	brcs	.+2      	; 0x2838 <__vector_18+0x324>
    2836:	8b c0       	rjmp	.+278    	; 0x294e <__vector_18+0x43a>
  {
	if(geo < 4);  
    2838:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    283c:	84 30       	cpi	r24, 0x04	; 4
    283e:	08 f4       	brcc	.+2      	; 0x2842 <__vector_18+0x32e>
    2840:	7a c0       	rjmp	.+244    	; 0x2936 <__vector_18+0x422>
    else if(geo < 8)
    2842:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2846:	88 30       	cpi	r24, 0x08	; 8
    2848:	28 f5       	brcc	.+74     	; 0x2894 <__vector_18+0x380>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    284a:	eb ea       	ldi	r30, 0xAB	; 171
    284c:	f4 e0       	ldi	r31, 0x04	; 4
    284e:	81 8d       	ldd	r24, Z+25	; 0x19
    2850:	92 8d       	ldd	r25, Z+26	; 0x1a
    2852:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2854:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2856:	89 2f       	mov	r24, r25
    2858:	9a 2f       	mov	r25, r26
    285a:	ab 2f       	mov	r26, r27
    285c:	bb 27       	eor	r27, r27
    285e:	a7 fd       	sbrc	r26, 7
    2860:	ba 95       	dec	r27
    2862:	81 8f       	std	Z+25, r24	; 0x19
    2864:	92 8f       	std	Z+26, r25	; 0x1a
    2866:	a3 8f       	std	Z+27, r26	; 0x1b
    2868:	b4 8f       	std	Z+28, r27	; 0x1c
		Current_state.gps.lat &= 0x00FFFFFF;
    286a:	81 8d       	ldd	r24, Z+25	; 0x19
    286c:	92 8d       	ldd	r25, Z+26	; 0x1a
    286e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2870:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2872:	bb 27       	eor	r27, r27
    2874:	81 8f       	std	Z+25, r24	; 0x19
    2876:	92 8f       	std	Z+26, r25	; 0x1a
    2878:	a3 8f       	std	Z+27, r26	; 0x1b
    287a:	b4 8f       	std	Z+28, r27	; 0x1c
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    287c:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2880:	81 8d       	ldd	r24, Z+25	; 0x19
    2882:	92 8d       	ldd	r25, Z+26	; 0x1a
    2884:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2886:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2888:	b2 2b       	or	r27, r18
    288a:	81 8f       	std	Z+25, r24	; 0x19
    288c:	92 8f       	std	Z+26, r25	; 0x1a
    288e:	a3 8f       	std	Z+27, r26	; 0x1b
    2890:	b4 8f       	std	Z+28, r27	; 0x1c
    2892:	51 c0       	rjmp	.+162    	; 0x2936 <__vector_18+0x422>
	}
	else if(geo < 12)
    2894:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2898:	8c 30       	cpi	r24, 0x0C	; 12
    289a:	28 f5       	brcc	.+74     	; 0x28e6 <__vector_18+0x3d2>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    289c:	eb ea       	ldi	r30, 0xAB	; 171
    289e:	f4 e0       	ldi	r31, 0x04	; 4
    28a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    28a2:	96 8d       	ldd	r25, Z+30	; 0x1e
    28a4:	a7 8d       	ldd	r26, Z+31	; 0x1f
    28a6:	b0 a1       	ldd	r27, Z+32	; 0x20
    28a8:	89 2f       	mov	r24, r25
    28aa:	9a 2f       	mov	r25, r26
    28ac:	ab 2f       	mov	r26, r27
    28ae:	bb 27       	eor	r27, r27
    28b0:	a7 fd       	sbrc	r26, 7
    28b2:	ba 95       	dec	r27
    28b4:	85 8f       	std	Z+29, r24	; 0x1d
    28b6:	96 8f       	std	Z+30, r25	; 0x1e
    28b8:	a7 8f       	std	Z+31, r26	; 0x1f
    28ba:	b0 a3       	std	Z+32, r27	; 0x20
		Current_state.gps.lon &= 0x00FFFFFF;
    28bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    28be:	96 8d       	ldd	r25, Z+30	; 0x1e
    28c0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    28c2:	b0 a1       	ldd	r27, Z+32	; 0x20
    28c4:	bb 27       	eor	r27, r27
    28c6:	85 8f       	std	Z+29, r24	; 0x1d
    28c8:	96 8f       	std	Z+30, r25	; 0x1e
    28ca:	a7 8f       	std	Z+31, r26	; 0x1f
    28cc:	b0 a3       	std	Z+32, r27	; 0x20
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    28ce:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    28d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    28d4:	96 8d       	ldd	r25, Z+30	; 0x1e
    28d6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    28d8:	b0 a1       	ldd	r27, Z+32	; 0x20
    28da:	b2 2b       	or	r27, r18
    28dc:	85 8f       	std	Z+29, r24	; 0x1d
    28de:	96 8f       	std	Z+30, r25	; 0x1e
    28e0:	a7 8f       	std	Z+31, r26	; 0x1f
    28e2:	b0 a3       	std	Z+32, r27	; 0x20
    28e4:	28 c0       	rjmp	.+80     	; 0x2936 <__vector_18+0x422>
	}
	else if(geo < 16 )
    28e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    28ea:	80 31       	cpi	r24, 0x10	; 16
    28ec:	20 f5       	brcc	.+72     	; 0x2936 <__vector_18+0x422>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    28ee:	eb ea       	ldi	r30, 0xAB	; 171
    28f0:	f4 e0       	ldi	r31, 0x04	; 4
    28f2:	81 a1       	ldd	r24, Z+33	; 0x21
    28f4:	92 a1       	ldd	r25, Z+34	; 0x22
    28f6:	a3 a1       	ldd	r26, Z+35	; 0x23
    28f8:	b4 a1       	ldd	r27, Z+36	; 0x24
    28fa:	89 2f       	mov	r24, r25
    28fc:	9a 2f       	mov	r25, r26
    28fe:	ab 2f       	mov	r26, r27
    2900:	bb 27       	eor	r27, r27
    2902:	a7 fd       	sbrc	r26, 7
    2904:	ba 95       	dec	r27
    2906:	81 a3       	std	Z+33, r24	; 0x21
    2908:	92 a3       	std	Z+34, r25	; 0x22
    290a:	a3 a3       	std	Z+35, r26	; 0x23
    290c:	b4 a3       	std	Z+36, r27	; 0x24
		Current_state.gps.alt &= 0x00FFFFFF;
    290e:	81 a1       	ldd	r24, Z+33	; 0x21
    2910:	92 a1       	ldd	r25, Z+34	; 0x22
    2912:	a3 a1       	ldd	r26, Z+35	; 0x23
    2914:	b4 a1       	ldd	r27, Z+36	; 0x24
    2916:	bb 27       	eor	r27, r27
    2918:	81 a3       	std	Z+33, r24	; 0x21
    291a:	92 a3       	std	Z+34, r25	; 0x22
    291c:	a3 a3       	std	Z+35, r26	; 0x23
    291e:	b4 a3       	std	Z+36, r27	; 0x24
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    2920:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2924:	81 a1       	ldd	r24, Z+33	; 0x21
    2926:	92 a1       	ldd	r25, Z+34	; 0x22
    2928:	a3 a1       	ldd	r26, Z+35	; 0x23
    292a:	b4 a1       	ldd	r27, Z+36	; 0x24
    292c:	b2 2b       	or	r27, r18
    292e:	81 a3       	std	Z+33, r24	; 0x21
    2930:	92 a3       	std	Z+34, r25	; 0x22
    2932:	a3 a3       	std	Z+35, r26	; 0x23
    2934:	b4 a3       	std	Z+36, r27	; 0x24
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    2936:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>
    if(geo == 16)
    2940:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2944:	80 31       	cpi	r24, 0x10	; 16
    2946:	19 f4       	brne	.+6      	; 0x294e <__vector_18+0x43a>
	{
      geo = 0xFF;
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    294e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2952:	87 30       	cpi	r24, 0x07	; 7
    2954:	08 f0       	brcs	.+2      	; 0x2958 <__vector_18+0x444>
    2956:	54 c0       	rjmp	.+168    	; 0x2a00 <__vector_18+0x4ec>
  {
	  
	  if(time == 0)
    2958:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    295c:	81 11       	cpse	r24, r1
    295e:	05 c0       	rjmp	.+10     	; 0x296a <__vector_18+0x456>
	  {
		  Current_state.gps.hours = last_byte;
    2960:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2964:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <Current_state+0x25>
    2968:	3c c0       	rjmp	.+120    	; 0x29e2 <__vector_18+0x4ce>
	  }
	  else if(time == 1)
    296a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	29 f4       	brne	.+10     	; 0x297c <__vector_18+0x468>
	  {
		  Current_state.gps.minutes = last_byte;
    2972:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2976:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <Current_state+0x26>
    297a:	33 c0       	rjmp	.+102    	; 0x29e2 <__vector_18+0x4ce>
	  }
	  else if(time == 2)
    297c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	29 f4       	brne	.+10     	; 0x298e <__vector_18+0x47a>
	  {
		  Current_state.gps.seconds = last_byte;
    2984:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2988:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <Current_state+0x27>
    298c:	2a c0       	rjmp	.+84     	; 0x29e2 <__vector_18+0x4ce>
	  }
	  else if(time == 3)
    298e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2992:	83 30       	cpi	r24, 0x03	; 3
    2994:	29 f4       	brne	.+10     	; 0x29a0 <__vector_18+0x48c>
	  {
		  Current_state.gps.date = last_byte;
    2996:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    299a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <Current_state+0x28>
    299e:	21 c0       	rjmp	.+66     	; 0x29e2 <__vector_18+0x4ce>
	  }else if(time == 4)
    29a0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29a4:	84 30       	cpi	r24, 0x04	; 4
    29a6:	29 f4       	brne	.+10     	; 0x29b2 <__vector_18+0x49e>
	  {
		  Current_state.gps.month = last_byte;
    29a8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    29ac:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Current_state+0x29>
    29b0:	18 c0       	rjmp	.+48     	; 0x29e2 <__vector_18+0x4ce>
	  }else if(time > 4)
    29b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29b6:	85 30       	cpi	r24, 0x05	; 5
    29b8:	a0 f0       	brcs	.+40     	; 0x29e2 <__vector_18+0x4ce>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    29ba:	eb ea       	ldi	r30, 0xAB	; 171
    29bc:	f4 e0       	ldi	r31, 0x04	; 4
    29be:	82 a5       	ldd	r24, Z+42	; 0x2a
    29c0:	93 a5       	ldd	r25, Z+43	; 0x2b
    29c2:	89 2f       	mov	r24, r25
    29c4:	99 27       	eor	r25, r25
    29c6:	93 a7       	std	Z+43, r25	; 0x2b
    29c8:	82 a7       	std	Z+42, r24	; 0x2a
		  Current_state.gps.year &= 0x00FF;
    29ca:	82 a5       	ldd	r24, Z+42	; 0x2a
    29cc:	93 a5       	ldd	r25, Z+43	; 0x2b
    29ce:	99 27       	eor	r25, r25
    29d0:	93 a7       	std	Z+43, r25	; 0x2b
    29d2:	82 a7       	std	Z+42, r24	; 0x2a
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    29d4:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    29d8:	82 a5       	ldd	r24, Z+42	; 0x2a
    29da:	93 a5       	ldd	r25, Z+43	; 0x2b
    29dc:	92 2b       	or	r25, r18
    29de:	93 a7       	std	Z+43, r25	; 0x2b
    29e0:	82 a7       	std	Z+42, r24	; 0x2a

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    29e2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
    29e8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
    if(time == 7)
    29ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29f0:	87 30       	cpi	r24, 0x07	; 7
    29f2:	31 f4       	brne	.+12     	; 0x2a00 <__vector_18+0x4ec>
    {
      time = 0xFF;
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
      ///* * The Entire message has been read
      message_end = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <message_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    2a00:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a04:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a08:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a0c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a10:	8c 3a       	cpi	r24, 0xAC	; 172
    2a12:	94 40       	sbci	r25, 0x04	; 4
    2a14:	af 43       	sbci	r26, 0x3F	; 63
    2a16:	bf 43       	sbci	r27, 0x3F	; 63
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <__vector_18+0x510>
  {
    message_end = 0;
    2a1a:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    pos = 0;
    2a1e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pos>
    2a22:	3f c0       	rjmp	.+126    	; 0x2aa2 <__vector_18+0x58e>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    2a24:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a28:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a2c:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a30:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a34:	8c 3a       	cpi	r24, 0xAC	; 172
    2a36:	95 40       	sbci	r25, 0x05	; 5
    2a38:	af 43       	sbci	r26, 0x3F	; 63
    2a3a:	bf 43       	sbci	r27, 0x3F	; 63
    2a3c:	19 f4       	brne	.+6      	; 0x2a44 <__vector_18+0x530>
    vel = 0;
    2a3e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vel>
    2a42:	2f c0       	rjmp	.+94     	; 0x2aa2 <__vector_18+0x58e>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2a44:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a48:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a4c:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a50:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a54:	8c 3a       	cpi	r24, 0xAC	; 172
    2a56:	9b 40       	sbci	r25, 0x0B	; 11
    2a58:	af 43       	sbci	r26, 0x3F	; 63
    2a5a:	bf 43       	sbci	r27, 0x3F	; 63
    2a5c:	19 f4       	brne	.+6      	; 0x2a64 <__vector_18+0x550>
    dop = 0;
    2a5e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dop>
    2a62:	1f c0       	rjmp	.+62     	; 0x2aa2 <__vector_18+0x58e>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    2a64:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a68:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a6c:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a70:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a74:	8c 3a       	cpi	r24, 0xAC	; 172
    2a76:	9e 40       	sbci	r25, 0x0E	; 14
    2a78:	af 43       	sbci	r26, 0x3F	; 63
    2a7a:	bf 43       	sbci	r27, 0x3F	; 63
    2a7c:	19 f4       	brne	.+6      	; 0x2a84 <__vector_18+0x570>
    geo = 0;
    2a7e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <geo>
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <__vector_18+0x58e>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2a84:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a88:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a8c:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a90:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a94:	8c 3a       	cpi	r24, 0xAC	; 172
    2a96:	9f 40       	sbci	r25, 0x0F	; 15
    2a98:	af 43       	sbci	r26, 0x3F	; 63
    2a9a:	bf 43       	sbci	r27, 0x3F	; 63
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <__vector_18+0x58e>
    time = 0;
    2a9e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end) //&& (Current_state.gps.pdop!=0))
    2aa2:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <Current_state+0x2c>
    2aa6:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <Current_state+0x2d>
    2aaa:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <message_end>
    2aae:	88 23       	and	r24, r24
    2ab0:	a9 f0       	breq	.+42     	; 0x2adc <__vector_18+0x5c8>
  {
    GPS_done = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <GPS_done>
    Current_state.gps.anant_flag = 1;
    2ab8:	eb ea       	ldi	r30, 0xAB	; 171
    2aba:	f4 e0       	ldi	r31, 0x04	; 4
    2abc:	80 8f       	std	Z+24, r24	; 0x18
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2abe:	57 98       	cbi	0x0a, 7	; 10
   
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f ef       	ldi	r25, 0xFF	; 255
    2ac4:	95 a7       	std	Z+45, r25	; 0x2d
    2ac6:	84 a7       	std	Z+44, r24	; 0x2c
    message_end = 0;
    2ac8:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    buffer = 0;
    2acc:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <buffer>
    2ad0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <buffer+0x1>
    2ad4:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <buffer+0x2>
    2ad8:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <buffer+0x3>
  }
}
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0b be       	out	0x3b, r0	; 59
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0
    2af4:	1f 90       	pop	r1
    2af6:	18 95       	reti

00002af8 <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2af8:	2f 92       	push	r2
    2afa:	3f 92       	push	r3
    2afc:	4f 92       	push	r4
    2afe:	5f 92       	push	r5
    2b00:	6f 92       	push	r6
    2b02:	7f 92       	push	r7
    2b04:	8f 92       	push	r8
    2b06:	9f 92       	push	r9
    2b08:	af 92       	push	r10
    2b0a:	bf 92       	push	r11
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	c8 54       	subi	r28, 0x48	; 72
    2b22:	d1 09       	sbc	r29, r1
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	fc 01       	movw	r30, r24
    2b30:	2a 01       	movw	r4, r20
    2b32:	3b 01       	movw	r6, r22
    2b34:	32 2e       	mov	r3, r18
    2b36:	29 96       	adiw	r28, 0x09	; 9
    2b38:	1f af       	std	Y+63, r17	; 0x3f
    2b3a:	0e af       	std	Y+62, r16	; 0x3e
    2b3c:	29 97       	sbiw	r28, 0x09	; 9
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2b3e:	80 80       	ld	r8, Z
    2b40:	91 80       	ldd	r9, Z+1	; 0x01
    2b42:	a2 80       	ldd	r10, Z+2	; 0x02
    2b44:	b3 80       	ldd	r11, Z+3	; 0x03
    2b46:	c4 80       	ldd	r12, Z+4	; 0x04
    2b48:	d5 80       	ldd	r13, Z+5	; 0x05
    2b4a:	e6 80       	ldd	r14, Z+6	; 0x06
    2b4c:	f7 80       	ldd	r15, Z+7	; 0x07
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a e7       	ldi	r20, 0x7A	; 122
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	60 85       	ldd	r22, Z+8	; 0x08
    2b58:	71 85       	ldd	r23, Z+9	; 0x09
    2b5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2b5c:	93 85       	ldd	r25, Z+11	; 0x0b
    2b5e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2b62:	6d 83       	std	Y+5, r22	; 0x05
    2b64:	7e 83       	std	Y+6, r23	; 0x06
    2b66:	8f 83       	std	Y+7, r24	; 0x07
    2b68:	98 87       	std	Y+8, r25	; 0x08
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2b6a:	c5 01       	movw	r24, r10
    2b6c:	b4 01       	movw	r22, r8
    2b6e:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    2b72:	69 83       	std	Y+1, r22	; 0x01
    2b74:	7a 83       	std	Y+2, r23	; 0x02
    2b76:	8b 83       	std	Y+3, r24	; 0x03
    2b78:	9c 83       	std	Y+4, r25	; 0x04
    2b7a:	c5 01       	movw	r24, r10
    2b7c:	b4 01       	movw	r22, r8
    2b7e:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    2b82:	69 87       	std	Y+9, r22	; 0x09
    2b84:	7a 87       	std	Y+10, r23	; 0x0a
    2b86:	8b 87       	std	Y+11, r24	; 0x0b
    2b88:	9c 87       	std	Y+12, r25	; 0x0c
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 ee       	ldi	r19, 0xE0	; 224
    2b8e:	4b ef       	ldi	r20, 0xFB	; 251
    2b90:	54 e4       	ldi	r21, 0x44	; 68
    2b92:	c3 01       	movw	r24, r6
    2b94:	b2 01       	movw	r22, r4
    2b96:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    2b9a:	6e a7       	std	Y+46, r22	; 0x2e
    2b9c:	7f a7       	std	Y+47, r23	; 0x2f
    2b9e:	88 ab       	std	Y+48, r24	; 0x30
    2ba0:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2ba2:	c7 01       	movw	r24, r14
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    2baa:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <cl+0x4>
    2bae:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <cl+0x5>
    2bb2:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <cl+0x6>
    2bb6:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <cl+0x7>
  sl[1] = sin(lon);
    2bba:	c7 01       	movw	r24, r14
    2bbc:	b6 01       	movw	r22, r12
    2bbe:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    2bc2:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <sl+0x4>
    2bc6:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <sl+0x5>
    2bca:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sl+0x6>
    2bce:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <sl+0x7>
  one = A2 * clat * clat;
    2bd2:	2e e2       	ldi	r18, 0x2E	; 46
    2bd4:	3f e2       	ldi	r19, 0x2F	; 47
    2bd6:	4b e1       	ldi	r20, 0x1B	; 27
    2bd8:	5c e4       	ldi	r21, 0x4C	; 76
    2bda:	69 85       	ldd	r22, Y+9	; 0x09
    2bdc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bde:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2be2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2be6:	29 85       	ldd	r18, Y+9	; 0x09
    2be8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bea:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bec:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bee:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2bf2:	4b 01       	movw	r8, r22
    2bf4:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2bf6:	2b e3       	ldi	r18, 0x3B	; 59
    2bf8:	35 e2       	ldi	r19, 0x25	; 37
    2bfa:	4a e1       	ldi	r20, 0x1A	; 26
    2bfc:	5c e4       	ldi	r21, 0x4C	; 76
    2bfe:	69 81       	ldd	r22, Y+1	; 0x01
    2c00:	7a 81       	ldd	r23, Y+2	; 0x02
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2c0a:	29 81       	ldd	r18, Y+1	; 0x01
    2c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c0e:	4b 81       	ldd	r20, Y+3	; 0x03
    2c10:	5c 81       	ldd	r21, Y+4	; 0x04
    2c12:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2c16:	69 8b       	std	Y+17, r22	; 0x11
    2c18:	7a 8b       	std	Y+18, r23	; 0x12
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
  three = one + two;
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	c5 01       	movw	r24, r10
    2c24:	b4 01       	movw	r22, r8
    2c26:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2c2a:	6d 8b       	std	Y+21, r22	; 0x15
    2c2c:	7e 8b       	std	Y+22, r23	; 0x16
    2c2e:	8f 8b       	std	Y+23, r24	; 0x17
    2c30:	98 8f       	std	Y+24, r25	; 0x18
  four = sqrt(three);
    2c32:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    2c36:	2b 01       	movw	r4, r22
    2c38:	3c 01       	movw	r6, r24
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2c3a:	9b 01       	movw	r18, r22
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2c42:	6b 01       	movw	r12, r22
    2c44:	7c 01       	movw	r14, r24
    2c46:	2d 81       	ldd	r18, Y+5	; 0x05
    2c48:	3e 81       	ldd	r19, Y+6	; 0x06
    2c4a:	4f 81       	ldd	r20, Y+7	; 0x07
    2c4c:	58 85       	ldd	r21, Y+8	; 0x08
    2c4e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2c52:	2d 81       	ldd	r18, Y+5	; 0x05
    2c54:	3e 81       	ldd	r19, Y+6	; 0x06
    2c56:	4f 81       	ldd	r20, Y+7	; 0x07
    2c58:	58 85       	ldd	r21, Y+8	; 0x08
    2c5a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2c5e:	69 8f       	std	Y+25, r22	; 0x19
    2c60:	7a 8f       	std	Y+26, r23	; 0x1a
    2c62:	8b 8f       	std	Y+27, r24	; 0x1b
    2c64:	9c 8f       	std	Y+28, r25	; 0x1c
    2c66:	2e e2       	ldi	r18, 0x2E	; 46
    2c68:	3f e2       	ldi	r19, 0x2F	; 47
    2c6a:	4b e1       	ldi	r20, 0x1B	; 27
    2c6c:	5c e4       	ldi	r21, 0x4C	; 76
    2c6e:	c5 01       	movw	r24, r10
    2c70:	b4 01       	movw	r22, r8
    2c72:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2c76:	69 a3       	std	Y+33, r22	; 0x21
    2c78:	7a a3       	std	Y+34, r23	; 0x22
    2c7a:	8b a3       	std	Y+35, r24	; 0x23
    2c7c:	9c a3       	std	Y+36, r25	; 0x24
    2c7e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c80:	3e 81       	ldd	r19, Y+6	; 0x06
    2c82:	4f 81       	ldd	r20, Y+7	; 0x07
    2c84:	58 85       	ldd	r21, Y+8	; 0x08
    2c86:	c7 01       	movw	r24, r14
    2c88:	b6 01       	movw	r22, r12
    2c8a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2c8e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c90:	3e 81       	ldd	r19, Y+6	; 0x06
    2c92:	4f 81       	ldd	r20, Y+7	; 0x07
    2c94:	58 85       	ldd	r21, Y+8	; 0x08
    2c96:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2c9a:	6b 01       	movw	r12, r22
    2c9c:	7c 01       	movw	r14, r24
    2c9e:	2e e2       	ldi	r18, 0x2E	; 46
    2ca0:	3f e2       	ldi	r19, 0x2F	; 47
    2ca2:	4b e1       	ldi	r20, 0x1B	; 27
    2ca4:	5c e4       	ldi	r21, 0x4C	; 76
    2ca6:	c5 01       	movw	r24, r10
    2ca8:	b4 01       	movw	r22, r8
    2caa:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2cae:	4b 01       	movw	r8, r22
    2cb0:	5c 01       	movw	r10, r24
    2cb2:	2b e3       	ldi	r18, 0x3B	; 59
    2cb4:	35 e2       	ldi	r19, 0x25	; 37
    2cb6:	4a e1       	ldi	r20, 0x1A	; 26
    2cb8:	5c e4       	ldi	r21, 0x4C	; 76
    2cba:	69 89       	ldd	r22, Y+17	; 0x11
    2cbc:	7a 89       	ldd	r23, Y+18	; 0x12
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	c5 01       	movw	r24, r10
    2ccc:	b4 01       	movw	r22, r8
    2cce:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2cd2:	2d 89       	ldd	r18, Y+21	; 0x15
    2cd4:	3e 89       	ldd	r19, Y+22	; 0x16
    2cd6:	4f 89       	ldd	r20, Y+23	; 0x17
    2cd8:	58 8d       	ldd	r21, Y+24	; 0x18
    2cda:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	c7 01       	movw	r24, r14
    2ce4:	b6 01       	movw	r22, r12
    2ce6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2cea:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    2cee:	4b 01       	movw	r8, r22
    2cf0:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2cf2:	a3 01       	movw	r20, r6
    2cf4:	92 01       	movw	r18, r4
    2cf6:	6d 81       	ldd	r22, Y+5	; 0x05
    2cf8:	7e 81       	ldd	r23, Y+6	; 0x06
    2cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfc:	98 85       	ldd	r25, Y+8	; 0x08
    2cfe:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2d02:	a5 01       	movw	r20, r10
    2d04:	94 01       	movw	r18, r8
    2d06:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2d0a:	23 96       	adiw	r28, 0x03	; 3
    2d0c:	6c af       	std	Y+60, r22	; 0x3c
    2d0e:	7d af       	std	Y+61, r23	; 0x3d
    2d10:	8e af       	std	Y+62, r24	; 0x3e
    2d12:	9f af       	std	Y+63, r25	; 0x3f
    2d14:	23 97       	sbiw	r28, 0x03	; 3
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2d16:	20 e8       	ldi	r18, 0x80	; 128
    2d18:	39 ef       	ldi	r19, 0xF9	; 249
    2d1a:	44 e8       	ldi	r20, 0x84	; 132
    2d1c:	58 e4       	ldi	r21, 0x48	; 72
    2d1e:	69 81       	ldd	r22, Y+1	; 0x01
    2d20:	7a 81       	ldd	r23, Y+2	; 0x02
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	9c 81       	ldd	r25, Y+4	; 0x04
    2d26:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2d2a:	29 85       	ldd	r18, Y+9	; 0x09
    2d2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d30:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d32:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2d36:	6b 01       	movw	r12, r22
    2d38:	7c 01       	movw	r14, r24
    2d3a:	a5 01       	movw	r20, r10
    2d3c:	94 01       	movw	r18, r8
    2d3e:	c3 01       	movw	r24, r6
    2d40:	b2 01       	movw	r22, r4
    2d42:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2d46:	9b 01       	movw	r18, r22
    2d48:	ac 01       	movw	r20, r24
    2d4a:	c7 01       	movw	r24, r14
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2d52:	27 96       	adiw	r28, 0x07	; 7
    2d54:	6c af       	std	Y+60, r22	; 0x3c
    2d56:	7d af       	std	Y+61, r23	; 0x3d
    2d58:	8e af       	std	Y+62, r24	; 0x3e
    2d5a:	9f af       	std	Y+63, r25	; 0x3f
    2d5c:	27 97       	sbiw	r28, 0x07	; 7
  slat = slat * cd - clat * sd;
    2d5e:	23 96       	adiw	r28, 0x03	; 3
    2d60:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d62:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d64:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d66:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d68:	23 97       	sbiw	r28, 0x03	; 3
    2d6a:	69 81       	ldd	r22, Y+1	; 0x01
    2d6c:	7a 81       	ldd	r23, Y+2	; 0x02
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2d76:	6b 01       	movw	r12, r22
    2d78:	7c 01       	movw	r14, r24
    2d7a:	27 96       	adiw	r28, 0x07	; 7
    2d7c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d7e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d80:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d82:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d84:	27 97       	sbiw	r28, 0x07	; 7
    2d86:	69 85       	ldd	r22, Y+9	; 0x09
    2d88:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d8e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2d92:	9b 01       	movw	r18, r22
    2d94:	ac 01       	movw	r20, r24
    2d96:	c7 01       	movw	r24, r14
    2d98:	b6 01       	movw	r22, r12
    2d9a:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    2d9e:	69 8f       	std	Y+25, r22	; 0x19
    2da0:	7a 8f       	std	Y+26, r23	; 0x1a
    2da2:	8b 8f       	std	Y+27, r24	; 0x1b
    2da4:	9c 8f       	std	Y+28, r25	; 0x1c
  clat = clat * cd + one * sd;
    2da6:	23 96       	adiw	r28, 0x03	; 3
    2da8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2daa:	3d ad       	ldd	r19, Y+61	; 0x3d
    2dac:	4e ad       	ldd	r20, Y+62	; 0x3e
    2dae:	5f ad       	ldd	r21, Y+63	; 0x3f
    2db0:	23 97       	sbiw	r28, 0x03	; 3
    2db2:	69 85       	ldd	r22, Y+9	; 0x09
    2db4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2db6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dba:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2dbe:	6b 01       	movw	r12, r22
    2dc0:	7c 01       	movw	r14, r24
    2dc2:	27 96       	adiw	r28, 0x07	; 7
    2dc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2dc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2dc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2dca:	5f ad       	ldd	r21, Y+63	; 0x3f
    2dcc:	27 97       	sbiw	r28, 0x07	; 7
    2dce:	69 81       	ldd	r22, Y+1	; 0x01
    2dd0:	7a 81       	ldd	r23, Y+2	; 0x02
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	c7 01       	movw	r24, r14
    2de0:	b6 01       	movw	r22, r12
    2de2:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2de6:	6d 8b       	std	Y+21, r22	; 0x15
    2de8:	7e 8b       	std	Y+22, r23	; 0x16
    2dea:	8f 8b       	std	Y+23, r24	; 0x17
    2dec:	98 8f       	std	Y+24, r25	; 0x18
  
  p[1] = 2.0 * slat;
    2dee:	0d e3       	ldi	r16, 0x3D	; 61
    2df0:	13 e0       	ldi	r17, 0x03	; 3
    2df2:	29 8d       	ldd	r18, Y+25	; 0x19
    2df4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2df6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2df8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2dfa:	ca 01       	movw	r24, r20
    2dfc:	b9 01       	movw	r22, r18
    2dfe:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2e02:	d8 01       	movw	r26, r16
    2e04:	14 96       	adiw	r26, 0x04	; 4
    2e06:	6d 93       	st	X+, r22
    2e08:	7d 93       	st	X+, r23
    2e0a:	8d 93       	st	X+, r24
    2e0c:	9c 93       	st	X, r25
    2e0e:	17 97       	sbiw	r26, 0x07	; 7
  p[2] = 2.0 * clat;
    2e10:	2d 89       	ldd	r18, Y+21	; 0x15
    2e12:	3e 89       	ldd	r19, Y+22	; 0x16
    2e14:	4f 89       	ldd	r20, Y+23	; 0x17
    2e16:	58 8d       	ldd	r21, Y+24	; 0x18
    2e18:	ca 01       	movw	r24, r20
    2e1a:	b9 01       	movw	r22, r18
    2e1c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2e20:	f8 01       	movw	r30, r16
    2e22:	60 87       	std	Z+8, r22	; 0x08
    2e24:	71 87       	std	Z+9, r23	; 0x09
    2e26:	82 87       	std	Z+10, r24	; 0x0a
    2e28:	93 87       	std	Z+11, r25	; 0x0b
  p[3] = 4.5 * slat * slat - 1.5;
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e9       	ldi	r20, 0x90	; 144
    2e30:	50 e4       	ldi	r21, 0x40	; 64
    2e32:	69 8d       	ldd	r22, Y+25	; 0x19
    2e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2e3e:	29 8d       	ldd	r18, Y+25	; 0x19
    2e40:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e42:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e44:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e46:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 ec       	ldi	r20, 0xC0	; 192
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    2e56:	d8 01       	movw	r26, r16
    2e58:	1c 96       	adiw	r26, 0x0c	; 12
    2e5a:	6d 93       	st	X+, r22
    2e5c:	7d 93       	st	X+, r23
    2e5e:	8d 93       	st	X+, r24
    2e60:	9c 93       	st	X, r25
    2e62:	1f 97       	sbiw	r26, 0x0f	; 15
  p[4] = sqrt(27) * clat * slat;
    2e64:	21 ee       	ldi	r18, 0xE1	; 225
    2e66:	36 e4       	ldi	r19, 0x46	; 70
    2e68:	46 ea       	ldi	r20, 0xA6	; 166
    2e6a:	50 e4       	ldi	r21, 0x40	; 64
    2e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e70:	8f 89       	ldd	r24, Y+23	; 0x17
    2e72:	98 8d       	ldd	r25, Y+24	; 0x18
    2e74:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2e78:	29 8d       	ldd	r18, Y+25	; 0x19
    2e7a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e7c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e7e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e80:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2e84:	f8 01       	movw	r30, r16
    2e86:	60 8b       	std	Z+16, r22	; 0x10
    2e88:	71 8b       	std	Z+17, r23	; 0x11
    2e8a:	82 8b       	std	Z+18, r24	; 0x12
    2e8c:	93 8b       	std	Z+19, r25	; 0x13
  q[1] = -1 * clat;
    2e8e:	05 e7       	ldi	r16, 0x75	; 117
    2e90:	12 e0       	ldi	r17, 0x02	; 2
    2e92:	8d 89       	ldd	r24, Y+21	; 0x15
    2e94:	9e 89       	ldd	r25, Y+22	; 0x16
    2e96:	af 89       	ldd	r26, Y+23	; 0x17
    2e98:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e9a:	b0 58       	subi	r27, 0x80	; 128
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	84 83       	std	Z+4, r24	; 0x04
    2ea0:	95 83       	std	Z+5, r25	; 0x05
    2ea2:	a6 83       	std	Z+6, r26	; 0x06
    2ea4:	b7 83       	std	Z+7, r27	; 0x07
  q[2] = slat;
    2ea6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eaa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2eac:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2eae:	80 87       	std	Z+8, r24	; 0x08
    2eb0:	91 87       	std	Z+9, r25	; 0x09
    2eb2:	a2 87       	std	Z+10, r26	; 0x0a
    2eb4:	b3 87       	std	Z+11, r27	; 0x0b
  q[3] = -3.0 * clat * slat;
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e4       	ldi	r20, 0x40	; 64
    2ebc:	50 ec       	ldi	r21, 0xC0	; 192
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2eca:	29 8d       	ldd	r18, Y+25	; 0x19
    2ecc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ece:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ed0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ed2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2ed6:	d8 01       	movw	r26, r16
    2ed8:	1c 96       	adiw	r26, 0x0c	; 12
    2eda:	6d 93       	st	X+, r22
    2edc:	7d 93       	st	X+, r23
    2ede:	8d 93       	st	X+, r24
    2ee0:	9c 93       	st	X, r25
    2ee2:	1f 97       	sbiw	r26, 0x0f	; 15
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2ee4:	29 8d       	ldd	r18, Y+25	; 0x19
    2ee6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ee8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2eea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2eec:	ca 01       	movw	r24, r20
    2eee:	b9 01       	movw	r22, r18
    2ef0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2ef4:	6b 01       	movw	r12, r22
    2ef6:	7c 01       	movw	r14, r24
    2ef8:	2d 89       	ldd	r18, Y+21	; 0x15
    2efa:	3e 89       	ldd	r19, Y+22	; 0x16
    2efc:	4f 89       	ldd	r20, Y+23	; 0x17
    2efe:	58 8d       	ldd	r21, Y+24	; 0x18
    2f00:	ca 01       	movw	r24, r20
    2f02:	b9 01       	movw	r22, r18
    2f04:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2f08:	9b 01       	movw	r18, r22
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	c7 01       	movw	r24, r14
    2f0e:	b6 01       	movw	r22, r12
    2f10:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    2f14:	27 ed       	ldi	r18, 0xD7	; 215
    2f16:	33 eb       	ldi	r19, 0xB3	; 179
    2f18:	4d ed       	ldi	r20, 0xDD	; 221
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    2f20:	f8 01       	movw	r30, r16
    2f22:	60 8b       	std	Z+16, r22	; 0x10
    2f24:	71 8b       	std	Z+17, r23	; 0x11
    2f26:	82 8b       	std	Z+18, r24	; 0x12
    2f28:	93 8b       	std	Z+19, r25	; 0x13
  
  ratio = RE / r;
    2f2a:	a5 01       	movw	r20, r10
    2f2c:	94 01       	movw	r18, r8
    2f2e:	6a e9       	ldi	r22, 0x9A	; 154
    2f30:	79 e1       	ldi	r23, 0x19	; 25
    2f32:	87 ec       	ldi	r24, 0xC7	; 199
    2f34:	95 e4       	ldi	r25, 0x45	; 69
    2f36:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    2f3a:	6b af       	std	Y+59, r22	; 0x3b
    2f3c:	7c af       	std	Y+60, r23	; 0x3c
    2f3e:	8d af       	std	Y+61, r24	; 0x3d
    2f40:	9e af       	std	Y+62, r25	; 0x3e
  
  max = (order * (order + 3)) / 2;
    2f42:	23 2d       	mov	r18, r3
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	a9 01       	movw	r20, r18
    2f48:	4d 5f       	subi	r20, 0xFD	; 253
    2f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4c:	24 9f       	mul	r18, r20
    2f4e:	c0 01       	movw	r24, r0
    2f50:	25 9f       	mul	r18, r21
    2f52:	90 0d       	add	r25, r0
    2f54:	34 9f       	mul	r19, r20
    2f56:	90 0d       	add	r25, r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	99 23       	and	r25, r25
    2f5c:	0c f4       	brge	.+2      	; 0x2f60 <igrf+0x468>
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	95 95       	asr	r25
    2f62:	87 95       	ror	r24
    2f64:	8e ab       	std	Y+54, r24	; 0x36
  for(k = 1; k <= max; k++)
    2f66:	88 23       	and	r24, r24
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <igrf+0x474>
    2f6a:	f6 c3       	rjmp	.+2028   	; 0x3758 <igrf+0xc60>
    2f6c:	41 2c       	mov	r4, r1
    2f6e:	21 2c       	mov	r2, r1
    2f70:	33 24       	eor	r3, r3
    2f72:	33 94       	inc	r3
    2f74:	f1 e0       	ldi	r31, 0x01	; 1
    2f76:	f9 8b       	std	Y+17, r31	; 0x11
    2f78:	19 a6       	std	Y+41, r1	; 0x29
    2f7a:	1a a6       	std	Y+42, r1	; 0x2a
    2f7c:	1b a6       	std	Y+43, r1	; 0x2b
    2f7e:	1c a6       	std	Y+44, r1	; 0x2c
    2f80:	1d a2       	std	Y+37, r1	; 0x25
    2f82:	1e a2       	std	Y+38, r1	; 0x26
    2f84:	1f a2       	std	Y+39, r1	; 0x27
    2f86:	18 a6       	std	Y+40, r1	; 0x28
    2f88:	1f aa       	std	Y+55, r1	; 0x37
    2f8a:	18 ae       	std	Y+56, r1	; 0x38
    2f8c:	19 ae       	std	Y+57, r1	; 0x39
    2f8e:	1a ae       	std	Y+58, r1	; 0x3a
    2f90:	19 a2       	std	Y+33, r1	; 0x21
    2f92:	1a a2       	std	Y+34, r1	; 0x22
    2f94:	1b a2       	std	Y+35, r1	; 0x23
    2f96:	1c a2       	std	Y+36, r1	; 0x24
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    2f98:	29 86       	std	Y+9, r2	; 0x09
    2f9a:	4d a6       	std	Y+45, r4	; 0x2d
    2f9c:	23 2c       	mov	r2, r3
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2f9e:	29 85       	ldd	r18, Y+9	; 0x09
    2fa0:	22 15       	cp	r18, r2
    2fa2:	d8 f4       	brcc	.+54     	; 0x2fda <igrf+0x4e2>
    {
      m = 0;
      n++;
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	29 87       	std	Y+9, r18	; 0x09
      rr = pow(ratio, n + 2);
    2fa8:	62 2f       	mov	r22, r18
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	6e 5f       	subi	r22, 0xFE	; 254
    2fae:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb0:	07 2e       	mov	r0, r23
    2fb2:	00 0c       	add	r0, r0
    2fb4:	88 0b       	sbc	r24, r24
    2fb6:	99 0b       	sbc	r25, r25
    2fb8:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2fc2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fc8:	0e 94 a4 34 	call	0x6948	; 0x6948 <pow>
    2fcc:	69 a7       	std	Y+41, r22	; 0x29
    2fce:	7a a7       	std	Y+42, r23	; 0x2a
    2fd0:	8b a7       	std	Y+43, r24	; 0x2b
    2fd2:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2fd4:	39 85       	ldd	r19, Y+9	; 0x09
    2fd6:	3d a7       	std	Y+45, r19	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2fd8:	21 2c       	mov	r2, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2fda:	44 e0       	ldi	r20, 0x04	; 4
    2fdc:	43 15       	cp	r20, r3
    2fde:	08 f0       	brcs	.+2      	; 0x2fe2 <igrf+0x4ea>
    2fe0:	1c c2       	rjmp	.+1080   	; 0x341a <igrf+0x922>
    {
      if(m == n)
    2fe2:	89 85       	ldd	r24, Y+9	; 0x09
    2fe4:	28 12       	cpse	r2, r24
    2fe6:	01 c1       	rjmp	.+514    	; 0x31ea <igrf+0x6f2>
      {
        one = sqrt(1 - (0.5 / fm));
    2fe8:	42 2c       	mov	r4, r2
    2fea:	51 2c       	mov	r5, r1
    2fec:	b2 01       	movw	r22, r4
    2fee:	05 2c       	mov	r0, r5
    2ff0:	00 0c       	add	r0, r0
    2ff2:	88 0b       	sbc	r24, r24
    2ff4:	99 0b       	sbc	r25, r25
    2ff6:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    2ffa:	6b 01       	movw	r12, r22
    2ffc:	7c 01       	movw	r14, r24
    2ffe:	9b 01       	movw	r18, r22
    3000:	ac 01       	movw	r20, r24
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	9f e3       	ldi	r25, 0x3F	; 63
    300a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    300e:	4b 01       	movw	r8, r22
    3010:	5c 01       	movw	r10, r24
    3012:	a5 01       	movw	r20, r10
    3014:	94 01       	movw	r18, r8
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	80 e8       	ldi	r24, 0x80	; 128
    301c:	9f e3       	ldi	r25, 0x3F	; 63
    301e:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3022:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    3026:	69 83       	std	Y+1, r22	; 0x01
    3028:	7a 83       	std	Y+2, r23	; 0x02
    302a:	8b 83       	std	Y+3, r24	; 0x03
    302c:	9c 83       	std	Y+4, r25	; 0x04
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    302e:	63 2c       	mov	r6, r3
    3030:	71 2c       	mov	r7, r1
    3032:	43 01       	movw	r8, r6
    3034:	84 18       	sub	r8, r4
    3036:	95 08       	sbc	r9, r5
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	89 1a       	sub	r8, r25
    303c:	91 08       	sbc	r9, r1
    303e:	66 0c       	add	r6, r6
    3040:	77 1c       	adc	r7, r7
    3042:	66 0c       	add	r6, r6
    3044:	77 1c       	adc	r7, r7
    3046:	d3 01       	movw	r26, r6
    3048:	a3 5c       	subi	r26, 0xC3	; 195
    304a:	bc 4f       	sbci	r27, 0xFC	; 252
    304c:	5d 01       	movw	r10, r26
    304e:	a7 01       	movw	r20, r14
    3050:	96 01       	movw	r18, r12
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	80 e8       	ldi	r24, 0x80	; 128
    3058:	9f e3       	ldi	r25, 0x3F	; 63
    305a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    306a:	29 81       	ldd	r18, Y+1	; 0x01
    306c:	3a 81       	ldd	r19, Y+2	; 0x02
    306e:	4b 81       	ldd	r20, Y+3	; 0x03
    3070:	5c 81       	ldd	r21, Y+4	; 0x04
    3072:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3076:	2d 89       	ldd	r18, Y+21	; 0x15
    3078:	3e 89       	ldd	r19, Y+22	; 0x16
    307a:	4f 89       	ldd	r20, Y+23	; 0x17
    307c:	58 8d       	ldd	r21, Y+24	; 0x18
    307e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3082:	88 0c       	add	r8, r8
    3084:	99 1c       	adc	r9, r9
    3086:	88 0c       	add	r8, r8
    3088:	99 1c       	adc	r9, r9
    308a:	84 01       	movw	r16, r8
    308c:	03 5c       	subi	r16, 0xC3	; 195
    308e:	1c 4f       	sbci	r17, 0xFC	; 252
    3090:	f8 01       	movw	r30, r16
    3092:	20 81       	ld	r18, Z
    3094:	31 81       	ldd	r19, Z+1	; 0x01
    3096:	42 81       	ldd	r20, Z+2	; 0x02
    3098:	53 81       	ldd	r21, Z+3	; 0x03
    309a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    309e:	d5 01       	movw	r26, r10
    30a0:	6d 93       	st	X+, r22
    30a2:	7d 93       	st	X+, r23
    30a4:	8d 93       	st	X+, r24
    30a6:	9c 93       	st	X, r25
    30a8:	13 97       	sbiw	r26, 0x03	; 3
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    30aa:	f3 01       	movw	r30, r6
    30ac:	eb 58       	subi	r30, 0x8B	; 139
    30ae:	fd 4f       	sbci	r31, 0xFD	; 253
    30b0:	5f 01       	movw	r10, r30
    30b2:	f4 01       	movw	r30, r8
    30b4:	eb 58       	subi	r30, 0x8B	; 139
    30b6:	fd 4f       	sbci	r31, 0xFD	; 253
    30b8:	20 81       	ld	r18, Z
    30ba:	31 81       	ldd	r19, Z+1	; 0x01
    30bc:	42 81       	ldd	r20, Z+2	; 0x02
    30be:	53 81       	ldd	r21, Z+3	; 0x03
    30c0:	6d 89       	ldd	r22, Y+21	; 0x15
    30c2:	7e 89       	ldd	r23, Y+22	; 0x16
    30c4:	8f 89       	ldd	r24, Y+23	; 0x17
    30c6:	98 8d       	ldd	r25, Y+24	; 0x18
    30c8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    30cc:	3b 01       	movw	r6, r22
    30ce:	4c 01       	movw	r8, r24
    30d0:	d8 01       	movw	r26, r16
    30d2:	2d 91       	ld	r18, X+
    30d4:	3d 91       	ld	r19, X+
    30d6:	4d 91       	ld	r20, X+
    30d8:	5c 91       	ld	r21, X
    30da:	69 8d       	ldd	r22, Y+25	; 0x19
    30dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    30e6:	a7 01       	movw	r20, r14
    30e8:	96 01       	movw	r18, r12
    30ea:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    30ee:	9b 01       	movw	r18, r22
    30f0:	ac 01       	movw	r20, r24
    30f2:	c4 01       	movw	r24, r8
    30f4:	b3 01       	movw	r22, r6
    30f6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    30fa:	29 81       	ldd	r18, Y+1	; 0x01
    30fc:	3a 81       	ldd	r19, Y+2	; 0x02
    30fe:	4b 81       	ldd	r20, Y+3	; 0x03
    3100:	5c 81       	ldd	r21, Y+4	; 0x04
    3102:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3106:	f5 01       	movw	r30, r10
    3108:	60 83       	st	Z, r22
    310a:	71 83       	std	Z+1, r23	; 0x01
    310c:	82 83       	std	Z+2, r24	; 0x02
    310e:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    3110:	82 01       	movw	r16, r4
    3112:	01 50       	subi	r16, 0x01	; 1
    3114:	11 09       	sbc	r17, r1
    3116:	c0 90 3d 02 	lds	r12, 0x023D	; 0x80023d <cl+0x4>
    311a:	d0 90 3e 02 	lds	r13, 0x023E	; 0x80023e <cl+0x5>
    311e:	e0 90 3f 02 	lds	r14, 0x023F	; 0x80023f <cl+0x6>
    3122:	f0 90 40 02 	lds	r15, 0x0240	; 0x800240 <cl+0x7>
    3126:	00 0f       	add	r16, r16
    3128:	11 1f       	adc	r17, r17
    312a:	00 0f       	add	r16, r16
    312c:	11 1f       	adc	r17, r17
    312e:	f8 01       	movw	r30, r16
    3130:	e7 5c       	subi	r30, 0xC7	; 199
    3132:	fd 4f       	sbci	r31, 0xFD	; 253
    3134:	80 80       	ld	r8, Z
    3136:	91 80       	ldd	r9, Z+1	; 0x01
    3138:	a2 80       	ldd	r10, Z+2	; 0x02
    313a:	b3 80       	ldd	r11, Z+3	; 0x03
    313c:	44 0c       	add	r4, r4
    313e:	55 1c       	adc	r5, r5
    3140:	44 0c       	add	r4, r4
    3142:	55 1c       	adc	r5, r5
    3144:	92 01       	movw	r18, r4
    3146:	23 50       	subi	r18, 0x03	; 3
    3148:	3e 4f       	sbci	r19, 0xFE	; 254
    314a:	39 01       	movw	r6, r18
    314c:	03 50       	subi	r16, 0x03	; 3
    314e:	1e 4f       	sbci	r17, 0xFE	; 254
    3150:	d8 01       	movw	r26, r16
    3152:	2d 91       	ld	r18, X+
    3154:	3d 91       	ld	r19, X+
    3156:	4d 91       	ld	r20, X+
    3158:	5c 91       	ld	r21, X
    315a:	c7 01       	movw	r24, r14
    315c:	b6 01       	movw	r22, r12
    315e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3162:	69 83       	std	Y+1, r22	; 0x01
    3164:	7a 83       	std	Y+2, r23	; 0x02
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    316e:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    3172:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    3176:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    317a:	c5 01       	movw	r24, r10
    317c:	b4 01       	movw	r22, r8
    317e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
    3186:	69 81       	ldd	r22, Y+1	; 0x01
    3188:	7a 81       	ldd	r23, Y+2	; 0x02
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	9c 81       	ldd	r25, Y+4	; 0x04
    318e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3192:	f3 01       	movw	r30, r6
    3194:	60 83       	st	Z, r22
    3196:	71 83       	std	Z+1, r23	; 0x01
    3198:	82 83       	std	Z+2, r24	; 0x02
    319a:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    319c:	92 01       	movw	r18, r4
    319e:	27 5c       	subi	r18, 0xC7	; 199
    31a0:	3d 4f       	sbci	r19, 0xFD	; 253
    31a2:	29 01       	movw	r4, r18
    31a4:	a5 01       	movw	r20, r10
    31a6:	94 01       	movw	r18, r8
    31a8:	c7 01       	movw	r24, r14
    31aa:	b6 01       	movw	r22, r12
    31ac:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    31b0:	6b 01       	movw	r12, r22
    31b2:	7c 01       	movw	r14, r24
    31b4:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    31b8:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    31bc:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    31c0:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    31c4:	d8 01       	movw	r26, r16
    31c6:	6d 91       	ld	r22, X+
    31c8:	7d 91       	ld	r23, X+
    31ca:	8d 91       	ld	r24, X+
    31cc:	9c 91       	ld	r25, X
    31ce:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    31d2:	9b 01       	movw	r18, r22
    31d4:	ac 01       	movw	r20, r24
    31d6:	c7 01       	movw	r24, r14
    31d8:	b6 01       	movw	r22, r12
    31da:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    31de:	f2 01       	movw	r30, r4
    31e0:	60 83       	st	Z, r22
    31e2:	71 83       	std	Z+1, r23	; 0x01
    31e4:	82 83       	std	Z+2, r24	; 0x02
    31e6:	93 83       	std	Z+3, r25	; 0x03
    31e8:	18 c1       	rjmp	.+560    	; 0x341a <igrf+0x922>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    31ea:	fd a5       	ldd	r31, Y+45	; 0x2d
    31ec:	0f 2f       	mov	r16, r31
    31ee:	10 e0       	ldi	r17, 0x00	; 0
    31f0:	22 9c       	mul	r2, r2
    31f2:	60 01       	movw	r12, r0
    31f4:	11 24       	eor	r1, r1
    31f6:	00 9f       	mul	r16, r16
    31f8:	40 01       	movw	r8, r0
    31fa:	01 9f       	mul	r16, r17
    31fc:	90 0c       	add	r9, r0
    31fe:	90 0c       	add	r9, r0
    3200:	11 24       	eor	r1, r1
    3202:	8c 18       	sub	r8, r12
    3204:	9d 08       	sbc	r9, r13
    3206:	09 2c       	mov	r0, r9
    3208:	00 0c       	add	r0, r0
    320a:	aa 08       	sbc	r10, r10
    320c:	bb 08       	sbc	r11, r11
    320e:	c5 01       	movw	r24, r10
    3210:	b4 01       	movw	r22, r8
    3212:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3216:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    321a:	4b 01       	movw	r8, r22
    321c:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    321e:	b8 01       	movw	r22, r16
    3220:	11 0f       	add	r17, r17
    3222:	88 0b       	sbc	r24, r24
    3224:	99 0b       	sbc	r25, r25
    3226:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    322a:	69 83       	std	Y+1, r22	; 0x01
    322c:	7a 83       	std	Y+2, r23	; 0x02
    322e:	8b 83       	std	Y+3, r24	; 0x03
    3230:	9c 83       	std	Y+4, r25	; 0x04
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e8       	ldi	r20, 0x80	; 128
    3238:	5f e3       	ldi	r21, 0x3F	; 63
    323a:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    323e:	6d 83       	std	Y+5, r22	; 0x05
    3240:	7e 83       	std	Y+6, r23	; 0x06
    3242:	8f 83       	std	Y+7, r24	; 0x07
    3244:	98 87       	std	Y+8, r25	; 0x08
    3246:	9b 01       	movw	r18, r22
    3248:	ac 01       	movw	r20, r24
    324a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    324e:	2b 01       	movw	r4, r22
    3250:	3c 01       	movw	r6, r24
    3252:	0d 2c       	mov	r0, r13
    3254:	00 0c       	add	r0, r0
    3256:	ee 08       	sbc	r14, r14
    3258:	ff 08       	sbc	r15, r15
    325a:	c7 01       	movw	r24, r14
    325c:	b6 01       	movw	r22, r12
    325e:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3262:	9b 01       	movw	r18, r22
    3264:	ac 01       	movw	r20, r24
    3266:	c3 01       	movw	r24, r6
    3268:	b2 01       	movw	r22, r4
    326a:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    326e:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    3272:	a5 01       	movw	r20, r10
    3274:	94 01       	movw	r18, r8
    3276:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    327a:	6b 01       	movw	r12, r22
    327c:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    327e:	29 81       	ldd	r18, Y+1	; 0x01
    3280:	3a 81       	ldd	r19, Y+2	; 0x02
    3282:	4b 81       	ldd	r20, Y+3	; 0x03
    3284:	5c 81       	ldd	r21, Y+4	; 0x04
    3286:	ca 01       	movw	r24, r20
    3288:	b9 01       	movw	r22, r18
    328a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    329a:	a5 01       	movw	r20, r10
    329c:	94 01       	movw	r18, r8
    329e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    32a2:	6d 87       	std	Y+13, r22	; 0x0d
    32a4:	7e 87       	std	Y+14, r23	; 0x0e
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
    32a8:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    32aa:	83 2d       	mov	r24, r3
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	49 85       	ldd	r20, Y+9	; 0x09
    32b0:	24 2f       	mov	r18, r20
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4c 01       	movw	r8, r24
    32b6:	82 1a       	sub	r8, r18
    32b8:	93 0a       	sbc	r9, r19
    32ba:	84 01       	movw	r16, r8
    32bc:	02 1b       	sub	r16, r18
    32be:	13 0b       	sbc	r17, r19
    32c0:	0f 5f       	subi	r16, 0xFF	; 255
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	3c 01       	movw	r6, r24
    32c6:	66 0c       	add	r6, r6
    32c8:	77 1c       	adc	r7, r7
    32ca:	66 0c       	add	r6, r6
    32cc:	77 1c       	adc	r7, r7
    32ce:	c3 01       	movw	r24, r6
    32d0:	83 5c       	subi	r24, 0xC3	; 195
    32d2:	9c 4f       	sbci	r25, 0xFC	; 252
    32d4:	5c 01       	movw	r10, r24
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	69 81       	ldd	r22, Y+1	; 0x01
    32e0:	7a 81       	ldd	r23, Y+2	; 0x02
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    32ea:	6d 8f       	std	Y+29, r22	; 0x1d
    32ec:	7e 8f       	std	Y+30, r23	; 0x1e
    32ee:	8f 8f       	std	Y+31, r24	; 0x1f
    32f0:	98 a3       	std	Y+32, r25	; 0x20
    32f2:	29 8d       	ldd	r18, Y+25	; 0x19
    32f4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    32f6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    32f8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    32fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    32fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	98 89       	ldd	r25, Y+16	; 0x10
    3302:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3306:	88 0c       	add	r8, r8
    3308:	99 1c       	adc	r9, r9
    330a:	88 0c       	add	r8, r8
    330c:	99 1c       	adc	r9, r9
    330e:	d4 01       	movw	r26, r8
    3310:	a3 5c       	subi	r26, 0xC3	; 195
    3312:	bc 4f       	sbci	r27, 0xFC	; 252
    3314:	2d 01       	movw	r4, r26
    3316:	2d 91       	ld	r18, X+
    3318:	3d 91       	ld	r19, X+
    331a:	4d 91       	ld	r20, X+
    331c:	5c 91       	ld	r21, X
    331e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3322:	29 81       	ldd	r18, Y+1	; 0x01
    3324:	3a 81       	ldd	r19, Y+2	; 0x02
    3326:	4b 81       	ldd	r20, Y+3	; 0x03
    3328:	5c 81       	ldd	r21, Y+4	; 0x04
    332a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    332e:	6a ab       	std	Y+50, r22	; 0x32
    3330:	7b ab       	std	Y+51, r23	; 0x33
    3332:	8c ab       	std	Y+52, r24	; 0x34
    3334:	9d ab       	std	Y+53, r25	; 0x35
    3336:	00 0f       	add	r16, r16
    3338:	11 1f       	adc	r17, r17
    333a:	00 0f       	add	r16, r16
    333c:	11 1f       	adc	r17, r17
    333e:	f8 01       	movw	r30, r16
    3340:	e3 5c       	subi	r30, 0xC3	; 195
    3342:	fc 4f       	sbci	r31, 0xFC	; 252
    3344:	20 81       	ld	r18, Z
    3346:	31 81       	ldd	r19, Z+1	; 0x01
    3348:	42 81       	ldd	r20, Z+2	; 0x02
    334a:	53 81       	ldd	r21, Z+3	; 0x03
    334c:	c7 01       	movw	r24, r14
    334e:	b6 01       	movw	r22, r12
    3350:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3354:	2d 81       	ldd	r18, Y+5	; 0x05
    3356:	3e 81       	ldd	r19, Y+6	; 0x06
    3358:	4f 81       	ldd	r20, Y+7	; 0x07
    335a:	58 85       	ldd	r21, Y+8	; 0x08
    335c:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3360:	9b 01       	movw	r18, r22
    3362:	ac 01       	movw	r20, r24
    3364:	6a a9       	ldd	r22, Y+50	; 0x32
    3366:	7b a9       	ldd	r23, Y+51	; 0x33
    3368:	8c a9       	ldd	r24, Y+52	; 0x34
    336a:	9d a9       	ldd	r25, Y+53	; 0x35
    336c:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3376:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    337a:	98 a1       	ldd	r25, Y+32	; 0x20
    337c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3380:	f5 01       	movw	r30, r10
    3382:	60 83       	st	Z, r22
    3384:	71 83       	std	Z+1, r23	; 0x01
    3386:	82 83       	std	Z+2, r24	; 0x02
    3388:	93 83       	std	Z+3, r25	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    338a:	93 01       	movw	r18, r6
    338c:	2b 58       	subi	r18, 0x8B	; 139
    338e:	3d 4f       	sbci	r19, 0xFD	; 253
    3390:	39 01       	movw	r6, r18
    3392:	f4 01       	movw	r30, r8
    3394:	eb 58       	subi	r30, 0x8B	; 139
    3396:	fd 4f       	sbci	r31, 0xFD	; 253
    3398:	20 81       	ld	r18, Z
    339a:	31 81       	ldd	r19, Z+1	; 0x01
    339c:	42 81       	ldd	r20, Z+2	; 0x02
    339e:	53 81       	ldd	r21, Z+3	; 0x03
    33a0:	69 8d       	ldd	r22, Y+25	; 0x19
    33a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    33ac:	4b 01       	movw	r8, r22
    33ae:	5c 01       	movw	r10, r24
    33b0:	d2 01       	movw	r26, r4
    33b2:	2d 91       	ld	r18, X+
    33b4:	3d 91       	ld	r19, X+
    33b6:	4d 91       	ld	r20, X+
    33b8:	5c 91       	ld	r21, X
    33ba:	6d 89       	ldd	r22, Y+21	; 0x15
    33bc:	7e 89       	ldd	r23, Y+22	; 0x16
    33be:	8f 89       	ldd	r24, Y+23	; 0x17
    33c0:	98 8d       	ldd	r25, Y+24	; 0x18
    33c2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    33c6:	29 81       	ldd	r18, Y+1	; 0x01
    33c8:	3a 81       	ldd	r19, Y+2	; 0x02
    33ca:	4b 81       	ldd	r20, Y+3	; 0x03
    33cc:	5c 81       	ldd	r21, Y+4	; 0x04
    33ce:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    33d2:	9b 01       	movw	r18, r22
    33d4:	ac 01       	movw	r20, r24
    33d6:	c5 01       	movw	r24, r10
    33d8:	b4 01       	movw	r22, r8
    33da:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    33de:	2d 85       	ldd	r18, Y+13	; 0x0d
    33e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    33e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    33e4:	58 89       	ldd	r21, Y+16	; 0x10
    33e6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    33ea:	4b 01       	movw	r8, r22
    33ec:	5c 01       	movw	r10, r24
    33ee:	f8 01       	movw	r30, r16
    33f0:	eb 58       	subi	r30, 0x8B	; 139
    33f2:	fd 4f       	sbci	r31, 0xFD	; 253
    33f4:	20 81       	ld	r18, Z
    33f6:	31 81       	ldd	r19, Z+1	; 0x01
    33f8:	42 81       	ldd	r20, Z+2	; 0x02
    33fa:	53 81       	ldd	r21, Z+3	; 0x03
    33fc:	c7 01       	movw	r24, r14
    33fe:	b6 01       	movw	r22, r12
    3400:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3404:	9b 01       	movw	r18, r22
    3406:	ac 01       	movw	r20, r24
    3408:	c5 01       	movw	r24, r10
    340a:	b4 01       	movw	r22, r8
    340c:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3410:	f3 01       	movw	r30, r6
    3412:	60 83       	st	Z, r22
    3414:	71 83       	std	Z+1, r23	; 0x01
    3416:	82 83       	std	Z+2, r24	; 0x02
    3418:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    341a:	f9 89       	ldd	r31, Y+17	; 0x11
    341c:	0f 2f       	mov	r16, r31
    341e:	10 e0       	ldi	r17, 0x00	; 0
    3420:	c8 01       	movw	r24, r16
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	fc 01       	movw	r30, r24
    342c:	e4 54       	subi	r30, 0x44	; 68
    342e:	fb 4f       	sbci	r31, 0xFB	; 251
    3430:	c5 90       	lpm	r12, Z+
    3432:	d5 90       	lpm	r13, Z+
    3434:	e5 90       	lpm	r14, Z+
    3436:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    3438:	fc 01       	movw	r30, r24
    343a:	e4 55       	subi	r30, 0x54	; 84
    343c:	fe 4f       	sbci	r31, 0xFE	; 254
    343e:	25 91       	lpm	r18, Z+
    3440:	35 91       	lpm	r19, Z+
    3442:	45 91       	lpm	r20, Z+
    3444:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3446:	6e a5       	ldd	r22, Y+46	; 0x2e
    3448:	7f a5       	ldd	r23, Y+47	; 0x2f
    344a:	88 a9       	ldd	r24, Y+48	; 0x30
    344c:	99 a9       	ldd	r25, Y+49	; 0x31
    344e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3452:	9b 01       	movw	r18, r22
    3454:	ac 01       	movw	r20, r24
    3456:	c7 01       	movw	r24, r14
    3458:	b6 01       	movw	r22, r12
    345a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    345e:	29 a5       	ldd	r18, Y+41	; 0x29
    3460:	3a a5       	ldd	r19, Y+42	; 0x2a
    3462:	4b a5       	ldd	r20, Y+43	; 0x2b
    3464:	5c a5       	ldd	r21, Y+44	; 0x2c
    3466:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    346a:	69 83       	std	Y+1, r22	; 0x01
    346c:	7a 83       	std	Y+2, r23	; 0x02
    346e:	8b 83       	std	Y+3, r24	; 0x03
    3470:	9c 83       	std	Y+4, r25	; 0x04
    
    
    if(m == 0)
    3472:	21 10       	cpse	r2, r1
    3474:	38 c0       	rjmp	.+112    	; 0x34e6 <igrf+0x9ee>
    {
      x += one * q[k];
    3476:	03 2d       	mov	r16, r3
    3478:	10 e0       	ldi	r17, 0x00	; 0
    347a:	00 0f       	add	r16, r16
    347c:	11 1f       	adc	r17, r17
    347e:	00 0f       	add	r16, r16
    3480:	11 1f       	adc	r17, r17
    3482:	f8 01       	movw	r30, r16
    3484:	eb 58       	subi	r30, 0x8B	; 139
    3486:	fd 4f       	sbci	r31, 0xFD	; 253
    3488:	20 81       	ld	r18, Z
    348a:	31 81       	ldd	r19, Z+1	; 0x01
    348c:	42 81       	ldd	r20, Z+2	; 0x02
    348e:	53 81       	ldd	r21, Z+3	; 0x03
    3490:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3494:	9b 01       	movw	r18, r22
    3496:	ac 01       	movw	r20, r24
    3498:	69 a1       	ldd	r22, Y+33	; 0x21
    349a:	7a a1       	ldd	r23, Y+34	; 0x22
    349c:	8b a1       	ldd	r24, Y+35	; 0x23
    349e:	9c a1       	ldd	r25, Y+36	; 0x24
    34a0:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    34a4:	69 a3       	std	Y+33, r22	; 0x21
    34a6:	7a a3       	std	Y+34, r23	; 0x22
    34a8:	8b a3       	std	Y+35, r24	; 0x23
    34aa:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    34ac:	f8 01       	movw	r30, r16
    34ae:	e3 5c       	subi	r30, 0xC3	; 195
    34b0:	fc 4f       	sbci	r31, 0xFC	; 252
    34b2:	20 81       	ld	r18, Z
    34b4:	31 81       	ldd	r19, Z+1	; 0x01
    34b6:	42 81       	ldd	r20, Z+2	; 0x02
    34b8:	53 81       	ldd	r21, Z+3	; 0x03
    34ba:	69 81       	ldd	r22, Y+1	; 0x01
    34bc:	7a 81       	ldd	r23, Y+2	; 0x02
    34be:	8b 81       	ldd	r24, Y+3	; 0x03
    34c0:	9c 81       	ldd	r25, Y+4	; 0x04
    34c2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    34c6:	9b 01       	movw	r18, r22
    34c8:	ac 01       	movw	r20, r24
    34ca:	6d a1       	ldd	r22, Y+37	; 0x25
    34cc:	7e a1       	ldd	r23, Y+38	; 0x26
    34ce:	8f a1       	ldd	r24, Y+39	; 0x27
    34d0:	98 a5       	ldd	r25, Y+40	; 0x28
    34d2:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    34d6:	6d a3       	std	Y+37, r22	; 0x25
    34d8:	7e a3       	std	Y+38, r23	; 0x26
    34da:	8f a3       	std	Y+39, r24	; 0x27
    34dc:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    34de:	29 89       	ldd	r18, Y+17	; 0x11
    34e0:	2f 5f       	subi	r18, 0xFF	; 255
    34e2:	29 8b       	std	Y+17, r18	; 0x11
    34e4:	32 c1       	rjmp	.+612    	; 0x374a <igrf+0xc52>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    34e6:	c8 01       	movw	r24, r16
    34e8:	01 96       	adiw	r24, 0x01	; 1
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	fc 01       	movw	r30, r24
    34f4:	e4 54       	subi	r30, 0x44	; 68
    34f6:	fb 4f       	sbci	r31, 0xFB	; 251
    34f8:	85 90       	lpm	r8, Z+
    34fa:	95 90       	lpm	r9, Z+
    34fc:	a5 90       	lpm	r10, Z+
    34fe:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    3500:	84 55       	subi	r24, 0x54	; 84
    3502:	9e 4f       	sbci	r25, 0xFE	; 254
    3504:	fc 01       	movw	r30, r24
    3506:	25 91       	lpm	r18, Z+
    3508:	35 91       	lpm	r19, Z+
    350a:	45 91       	lpm	r20, Z+
    350c:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    350e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3510:	7f a5       	ldd	r23, Y+47	; 0x2f
    3512:	88 a9       	ldd	r24, Y+48	; 0x30
    3514:	99 a9       	ldd	r25, Y+49	; 0x31
    3516:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    351a:	9b 01       	movw	r18, r22
    351c:	ac 01       	movw	r20, r24
    351e:	c5 01       	movw	r24, r10
    3520:	b4 01       	movw	r22, r8
    3522:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3526:	29 a5       	ldd	r18, Y+41	; 0x29
    3528:	3a a5       	ldd	r19, Y+42	; 0x2a
    352a:	4b a5       	ldd	r20, Y+43	; 0x2b
    352c:	5c a5       	ldd	r21, Y+44	; 0x2c
    352e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3532:	6d 87       	std	Y+13, r22	; 0x0d
    3534:	7e 87       	std	Y+14, r23	; 0x0e
    3536:	8f 87       	std	Y+15, r24	; 0x0f
    3538:	98 8b       	std	Y+16, r25	; 0x10
      three = one * cl[m] + two * sl[m];
    353a:	02 2d       	mov	r16, r2
    353c:	10 e0       	ldi	r17, 0x00	; 0
    353e:	c8 01       	movw	r24, r16
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	88 0f       	add	r24, r24
    3546:	99 1f       	adc	r25, r25
    3548:	fc 01       	movw	r30, r24
    354a:	e7 5c       	subi	r30, 0xC7	; 199
    354c:	fd 4f       	sbci	r31, 0xFD	; 253
    354e:	c0 80       	ld	r12, Z
    3550:	d1 80       	ldd	r13, Z+1	; 0x01
    3552:	e2 80       	ldd	r14, Z+2	; 0x02
    3554:	f3 80       	ldd	r15, Z+3	; 0x03
    3556:	fc 01       	movw	r30, r24
    3558:	e3 50       	subi	r30, 0x03	; 3
    355a:	fe 4f       	sbci	r31, 0xFE	; 254
    355c:	40 80       	ld	r4, Z
    355e:	51 80       	ldd	r5, Z+1	; 0x01
    3560:	62 80       	ldd	r6, Z+2	; 0x02
    3562:	73 80       	ldd	r7, Z+3	; 0x03
    3564:	29 81       	ldd	r18, Y+1	; 0x01
    3566:	3a 81       	ldd	r19, Y+2	; 0x02
    3568:	4b 81       	ldd	r20, Y+3	; 0x03
    356a:	5c 81       	ldd	r21, Y+4	; 0x04
    356c:	c7 01       	movw	r24, r14
    356e:	b6 01       	movw	r22, r12
    3570:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3574:	4b 01       	movw	r8, r22
    3576:	5c 01       	movw	r10, r24
    3578:	2d 85       	ldd	r18, Y+13	; 0x0d
    357a:	3e 85       	ldd	r19, Y+14	; 0x0e
    357c:	4f 85       	ldd	r20, Y+15	; 0x0f
    357e:	58 89       	ldd	r21, Y+16	; 0x10
    3580:	c3 01       	movw	r24, r6
    3582:	b2 01       	movw	r22, r4
    3584:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3588:	9b 01       	movw	r18, r22
    358a:	ac 01       	movw	r20, r24
    358c:	c5 01       	movw	r24, r10
    358e:	b4 01       	movw	r22, r8
    3590:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3594:	6d 83       	std	Y+5, r22	; 0x05
    3596:	7e 83       	std	Y+6, r23	; 0x06
    3598:	8f 83       	std	Y+7, r24	; 0x07
    359a:	98 87       	std	Y+8, r25	; 0x08
      x += three * q[k];
    359c:	a3 2c       	mov	r10, r3
    359e:	b1 2c       	mov	r11, r1
    35a0:	aa 0c       	add	r10, r10
    35a2:	bb 1c       	adc	r11, r11
    35a4:	aa 0c       	add	r10, r10
    35a6:	bb 1c       	adc	r11, r11
    35a8:	95 01       	movw	r18, r10
    35aa:	2b 58       	subi	r18, 0x8B	; 139
    35ac:	3d 4f       	sbci	r19, 0xFD	; 253
    35ae:	d9 01       	movw	r26, r18
    35b0:	8d 91       	ld	r24, X+
    35b2:	9d 91       	ld	r25, X+
    35b4:	0d 90       	ld	r0, X+
    35b6:	bc 91       	ld	r27, X
    35b8:	a0 2d       	mov	r26, r0
    35ba:	8d 8f       	std	Y+29, r24	; 0x1d
    35bc:	9e 8f       	std	Y+30, r25	; 0x1e
    35be:	af 8f       	std	Y+31, r26	; 0x1f
    35c0:	b8 a3       	std	Y+32, r27	; 0x20
    35c2:	2d 81       	ldd	r18, Y+5	; 0x05
    35c4:	3e 81       	ldd	r19, Y+6	; 0x06
    35c6:	4f 81       	ldd	r20, Y+7	; 0x07
    35c8:	58 85       	ldd	r21, Y+8	; 0x08
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    35d2:	9b 01       	movw	r18, r22
    35d4:	ac 01       	movw	r20, r24
    35d6:	69 a1       	ldd	r22, Y+33	; 0x21
    35d8:	7a a1       	ldd	r23, Y+34	; 0x22
    35da:	8b a1       	ldd	r24, Y+35	; 0x23
    35dc:	9c a1       	ldd	r25, Y+36	; 0x24
    35de:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    35e2:	69 a3       	std	Y+33, r22	; 0x21
    35e4:	7a a3       	std	Y+34, r23	; 0x22
    35e6:	8b a3       	std	Y+35, r24	; 0x23
    35e8:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    35ea:	f5 01       	movw	r30, r10
    35ec:	e3 5c       	subi	r30, 0xC3	; 195
    35ee:	fc 4f       	sbci	r31, 0xFC	; 252
    35f0:	80 80       	ld	r8, Z
    35f2:	91 80       	ldd	r9, Z+1	; 0x01
    35f4:	a2 80       	ldd	r10, Z+2	; 0x02
    35f6:	b3 80       	ldd	r11, Z+3	; 0x03
    35f8:	2d 81       	ldd	r18, Y+5	; 0x05
    35fa:	3e 81       	ldd	r19, Y+6	; 0x06
    35fc:	4f 81       	ldd	r20, Y+7	; 0x07
    35fe:	58 85       	ldd	r21, Y+8	; 0x08
    3600:	c5 01       	movw	r24, r10
    3602:	b4 01       	movw	r22, r8
    3604:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3608:	9b 01       	movw	r18, r22
    360a:	ac 01       	movw	r20, r24
    360c:	6d a1       	ldd	r22, Y+37	; 0x25
    360e:	7e a1       	ldd	r23, Y+38	; 0x26
    3610:	8f a1       	ldd	r24, Y+39	; 0x27
    3612:	98 a5       	ldd	r25, Y+40	; 0x28
    3614:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3618:	6d a3       	std	Y+37, r22	; 0x25
    361a:	7e a3       	std	Y+38, r23	; 0x26
    361c:	8f a3       	std	Y+39, r24	; 0x27
    361e:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	a9 01       	movw	r20, r18
    3626:	6d 89       	ldd	r22, Y+21	; 0x15
    3628:	7e 89       	ldd	r23, Y+22	; 0x16
    362a:	8f 89       	ldd	r24, Y+23	; 0x17
    362c:	98 8d       	ldd	r25, Y+24	; 0x18
    362e:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    3632:	18 16       	cp	r1, r24
    3634:	0c f0       	brlt	.+2      	; 0x3638 <igrf+0xb40>
    3636:	54 c0       	rjmp	.+168    	; 0x36e0 <igrf+0xbe8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    3638:	a3 01       	movw	r20, r6
    363a:	92 01       	movw	r18, r4
    363c:	69 81       	ldd	r22, Y+1	; 0x01
    363e:	7a 81       	ldd	r23, Y+2	; 0x02
    3640:	8b 81       	ldd	r24, Y+3	; 0x03
    3642:	9c 81       	ldd	r25, Y+4	; 0x04
    3644:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3648:	2b 01       	movw	r4, r22
    364a:	3c 01       	movw	r6, r24
    364c:	a7 01       	movw	r20, r14
    364e:	96 01       	movw	r18, r12
    3650:	6d 85       	ldd	r22, Y+13	; 0x0d
    3652:	7e 85       	ldd	r23, Y+14	; 0x0e
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	98 89       	ldd	r25, Y+16	; 0x10
    3658:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    365c:	9b 01       	movw	r18, r22
    365e:	ac 01       	movw	r20, r24
    3660:	c3 01       	movw	r24, r6
    3662:	b2 01       	movw	r22, r4
    3664:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3668:	6b 01       	movw	r12, r22
    366a:	7c 01       	movw	r14, r24
    366c:	b8 01       	movw	r22, r16
    366e:	11 0f       	add	r17, r17
    3670:	88 0b       	sbc	r24, r24
    3672:	99 0b       	sbc	r25, r25
    3674:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3678:	9b 01       	movw	r18, r22
    367a:	ac 01       	movw	r20, r24
    367c:	c7 01       	movw	r24, r14
    367e:	b6 01       	movw	r22, r12
    3680:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3684:	9b 01       	movw	r18, r22
    3686:	ac 01       	movw	r20, r24
    3688:	c5 01       	movw	r24, r10
    368a:	b4 01       	movw	r22, r8
    368c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3690:	6b 01       	movw	r12, r22
    3692:	7c 01       	movw	r14, r24
    3694:	bd a5       	ldd	r27, Y+45	; 0x2d
    3696:	6b 2f       	mov	r22, r27
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    36ae:	2d 89       	ldd	r18, Y+21	; 0x15
    36b0:	3e 89       	ldd	r19, Y+22	; 0x16
    36b2:	4f 89       	ldd	r20, Y+23	; 0x17
    36b4:	58 8d       	ldd	r21, Y+24	; 0x18
    36b6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    36ba:	9b 01       	movw	r18, r22
    36bc:	ac 01       	movw	r20, r24
    36be:	c7 01       	movw	r24, r14
    36c0:	b6 01       	movw	r22, r12
    36c2:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    36c6:	9b 01       	movw	r18, r22
    36c8:	ac 01       	movw	r20, r24
    36ca:	6f a9       	ldd	r22, Y+55	; 0x37
    36cc:	78 ad       	ldd	r23, Y+56	; 0x38
    36ce:	89 ad       	ldd	r24, Y+57	; 0x39
    36d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    36d2:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    36d6:	6f ab       	std	Y+55, r22	; 0x37
    36d8:	78 af       	std	Y+56, r23	; 0x38
    36da:	89 af       	std	Y+57, r24	; 0x39
    36dc:	9a af       	std	Y+58, r25	; 0x3a
    36de:	32 c0       	rjmp	.+100    	; 0x3744 <igrf+0xc4c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    36e0:	a3 01       	movw	r20, r6
    36e2:	92 01       	movw	r18, r4
    36e4:	69 81       	ldd	r22, Y+1	; 0x01
    36e6:	7a 81       	ldd	r23, Y+2	; 0x02
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    36f0:	4b 01       	movw	r8, r22
    36f2:	5c 01       	movw	r10, r24
    36f4:	a7 01       	movw	r20, r14
    36f6:	96 01       	movw	r18, r12
    36f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    36fa:	7e 85       	ldd	r23, Y+14	; 0x0e
    36fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fe:	98 89       	ldd	r25, Y+16	; 0x10
    3700:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3704:	9b 01       	movw	r18, r22
    3706:	ac 01       	movw	r20, r24
    3708:	c5 01       	movw	r24, r10
    370a:	b4 01       	movw	r22, r8
    370c:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    3710:	9b 01       	movw	r18, r22
    3712:	ac 01       	movw	r20, r24
    3714:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3716:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3718:	8f 8d       	ldd	r24, Y+31	; 0x1f
    371a:	98 a1       	ldd	r25, Y+32	; 0x20
    371c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3720:	29 8d       	ldd	r18, Y+25	; 0x19
    3722:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3724:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3726:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3728:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    372c:	9b 01       	movw	r18, r22
    372e:	ac 01       	movw	r20, r24
    3730:	6f a9       	ldd	r22, Y+55	; 0x37
    3732:	78 ad       	ldd	r23, Y+56	; 0x38
    3734:	89 ad       	ldd	r24, Y+57	; 0x39
    3736:	9a ad       	ldd	r25, Y+58	; 0x3a
    3738:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    373c:	6f ab       	std	Y+55, r22	; 0x37
    373e:	78 af       	std	Y+56, r23	; 0x38
    3740:	89 af       	std	Y+57, r24	; 0x39
    3742:	9a af       	std	Y+58, r25	; 0x3a
        
      l += 2;
    3744:	e9 89       	ldd	r30, Y+17	; 0x11
    3746:	ee 5f       	subi	r30, 0xFE	; 254
    3748:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    374a:	23 94       	inc	r2
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    374c:	33 94       	inc	r3
    374e:	fe a9       	ldd	r31, Y+54	; 0x36
    3750:	f3 15       	cp	r31, r3
    3752:	08 f0       	brcs	.+2      	; 0x3756 <igrf+0xc5e>
    3754:	24 cc       	rjmp	.-1976   	; 0x2f9e <igrf+0x4a6>
    3756:	0c c0       	rjmp	.+24     	; 0x3770 <igrf+0xc78>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    3758:	1d a2       	std	Y+37, r1	; 0x25
    375a:	1e a2       	std	Y+38, r1	; 0x26
    375c:	1f a2       	std	Y+39, r1	; 0x27
    375e:	18 a6       	std	Y+40, r1	; 0x28
    3760:	1f aa       	std	Y+55, r1	; 0x37
    3762:	18 ae       	std	Y+56, r1	; 0x38
    3764:	19 ae       	std	Y+57, r1	; 0x39
    3766:	1a ae       	std	Y+58, r1	; 0x3a
    3768:	19 a2       	std	Y+33, r1	; 0x21
    376a:	1a a2       	std	Y+34, r1	; 0x22
    376c:	1b a2       	std	Y+35, r1	; 0x23
    376e:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3770:	23 96       	adiw	r28, 0x03	; 3
    3772:	2c ad       	ldd	r18, Y+60	; 0x3c
    3774:	3d ad       	ldd	r19, Y+61	; 0x3d
    3776:	4e ad       	ldd	r20, Y+62	; 0x3e
    3778:	5f ad       	ldd	r21, Y+63	; 0x3f
    377a:	23 97       	sbiw	r28, 0x03	; 3
    377c:	6d a1       	ldd	r22, Y+37	; 0x25
    377e:	7e a1       	ldd	r23, Y+38	; 0x26
    3780:	8f a1       	ldd	r24, Y+39	; 0x27
    3782:	98 a5       	ldd	r25, Y+40	; 0x28
    3784:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3788:	6b 01       	movw	r12, r22
    378a:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    378c:	23 96       	adiw	r28, 0x03	; 3
    378e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3790:	3d ad       	ldd	r19, Y+61	; 0x3d
    3792:	4e ad       	ldd	r20, Y+62	; 0x3e
    3794:	5f ad       	ldd	r21, Y+63	; 0x3f
    3796:	23 97       	sbiw	r28, 0x03	; 3
    3798:	69 a1       	ldd	r22, Y+33	; 0x21
    379a:	7a a1       	ldd	r23, Y+34	; 0x22
    379c:	8b a1       	ldd	r24, Y+35	; 0x23
    379e:	9c a1       	ldd	r25, Y+36	; 0x24
    37a0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    37a4:	4b 01       	movw	r8, r22
    37a6:	5c 01       	movw	r10, r24
    37a8:	27 96       	adiw	r28, 0x07	; 7
    37aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    37ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    37ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    37b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    37b2:	27 97       	sbiw	r28, 0x07	; 7
    37b4:	6d a1       	ldd	r22, Y+37	; 0x25
    37b6:	7e a1       	ldd	r23, Y+38	; 0x26
    37b8:	8f a1       	ldd	r24, Y+39	; 0x27
    37ba:	98 a5       	ldd	r25, Y+40	; 0x28
    37bc:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    37c0:	9b 01       	movw	r18, r22
    37c2:	ac 01       	movw	r20, r24
    37c4:	c5 01       	movw	r24, r10
    37c6:	b4 01       	movw	r22, r8
    37c8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    37cc:	29 96       	adiw	r28, 0x09	; 9
    37ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    37d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    37d2:	29 97       	sbiw	r28, 0x09	; 9
    37d4:	6d 93       	st	X+, r22
    37d6:	7d 93       	st	X+, r23
    37d8:	8d 93       	st	X+, r24
    37da:	9c 93       	st	X, r25
    37dc:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    37de:	8f a9       	ldd	r24, Y+55	; 0x37
    37e0:	98 ad       	ldd	r25, Y+56	; 0x38
    37e2:	a9 ad       	ldd	r26, Y+57	; 0x39
    37e4:	ba ad       	ldd	r27, Y+58	; 0x3a
    37e6:	29 96       	adiw	r28, 0x09	; 9
    37e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    37ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    37ec:	29 97       	sbiw	r28, 0x09	; 9
    37ee:	84 83       	std	Z+4, r24	; 0x04
    37f0:	95 83       	std	Z+5, r25	; 0x05
    37f2:	a6 83       	std	Z+6, r26	; 0x06
    37f4:	b7 83       	std	Z+7, r27	; 0x07
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    37f6:	29 a1       	ldd	r18, Y+33	; 0x21
    37f8:	3a a1       	ldd	r19, Y+34	; 0x22
    37fa:	4b a1       	ldd	r20, Y+35	; 0x23
    37fc:	5c a1       	ldd	r21, Y+36	; 0x24
    37fe:	27 96       	adiw	r28, 0x07	; 7
    3800:	6c ad       	ldd	r22, Y+60	; 0x3c
    3802:	7d ad       	ldd	r23, Y+61	; 0x3d
    3804:	8e ad       	ldd	r24, Y+62	; 0x3e
    3806:	9f ad       	ldd	r25, Y+63	; 0x3f
    3808:	27 97       	sbiw	r28, 0x07	; 7
    380a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    380e:	9b 01       	movw	r18, r22
    3810:	ac 01       	movw	r20, r24
    3812:	c7 01       	movw	r24, r14
    3814:	b6 01       	movw	r22, r12
    3816:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    381a:	29 96       	adiw	r28, 0x09	; 9
    381c:	ae ad       	ldd	r26, Y+62	; 0x3e
    381e:	bf ad       	ldd	r27, Y+63	; 0x3f
    3820:	29 97       	sbiw	r28, 0x09	; 9
    3822:	18 96       	adiw	r26, 0x08	; 8
    3824:	6d 93       	st	X+, r22
    3826:	7d 93       	st	X+, r23
    3828:	8d 93       	st	X+, r24
    382a:	9c 93       	st	X, r25
    382c:	1b 97       	sbiw	r26, 0x0b	; 11
     
}
    382e:	c8 5b       	subi	r28, 0xB8	; 184
    3830:	df 4f       	sbci	r29, 0xFF	; 255
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	df 90       	pop	r13
    384a:	cf 90       	pop	r12
    384c:	bf 90       	pop	r11
    384e:	af 90       	pop	r10
    3850:	9f 90       	pop	r9
    3852:	8f 90       	pop	r8
    3854:	7f 90       	pop	r7
    3856:	6f 90       	pop	r6
    3858:	5f 90       	pop	r5
    385a:	4f 90       	pop	r4
    385c:	3f 90       	pop	r3
    385e:	2f 90       	pop	r2
    3860:	08 95       	ret

00003862 <init_UART_MM>:
#include "uart.h"
uint8_t mag_count = 0;
uint8_t mag_data[7];
volatile static int16_t x, y, z;
void init_UART_MM(void )
{
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29

  UCSR1A = 0;
    3866:	cb e9       	ldi	r28, 0x9B	; 155
    3868:	d0 e0       	ldi	r29, 0x00	; 0
    386a:	18 82       	st	Y, r1
  UCSR1B = 0;
    386c:	aa e9       	ldi	r26, 0x9A	; 154
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	1c 92       	st	X, r1
  UCSR1C = 0;
    3872:	ed e9       	ldi	r30, 0x9D	; 157
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    3878:	88 81       	ld	r24, Y
    387a:	82 60       	ori	r24, 0x02	; 2
    387c:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    387e:	8c 91       	ld	r24, X
    3880:	88 69       	ori	r24, 0x98	; 152
    3882:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |=_BV(USBS1) | _BV(UCSZ11) | _BV(UCSZ10);
    3884:	80 81       	ld	r24, Z
    3886:	8e 60       	ori	r24, 0x0E	; 14
    3888:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    388a:	87 e6       	ldi	r24, 0x67	; 103
    388c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  UBRR1H = 0;
    3890:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
}
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	08 95       	ret

0000389a <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    389a:	8f 92       	push	r8
    389c:	9f 92       	push	r9
    389e:	af 92       	push	r10
    38a0:	bf 92       	push	r11
    38a2:	cf 92       	push	r12
    38a4:	df 92       	push	r13
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
  uint8_t tmp;
  
  ///Send the poll command
 // send_MM_cmd("*00P\r");
  uint8_t c= 80;
  init_UART0();
    38b2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <init_UART0>
  transmit_UART0(c);
    38b6:	80 e5       	ldi	r24, 0x50	; 80
    38b8:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
  //receive_UART0();
  xp = ((int16_t)receive_UART0()) << 8;
    38bc:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38c0:	c8 2e       	mov	r12, r24
    38c2:	d1 2c       	mov	r13, r1
    38c4:	dc 2c       	mov	r13, r12
    38c6:	cc 24       	eor	r12, r12
  uint8_t xp1_sen = (uint8_t)(xp>>8);
  xp &= 0xFF00;
  xp |= (int16_t)receive_UART0();
    38c8:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38cc:	76 01       	movw	r14, r12
    38ce:	e8 2a       	or	r14, r24
  uint8_t xp2_sen = (uint8_t)(xp);
  
  yp = ((int16_t)receive_UART0()) << 8;
    38d0:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38d4:	08 2f       	mov	r16, r24
    38d6:	10 e0       	ldi	r17, 0x00	; 0
    38d8:	10 2f       	mov	r17, r16
    38da:	00 27       	eor	r16, r16
  uint8_t yp1_sen =(uint8_t)( yp>>8);
  yp &= 0xFF00;
  yp |= (int16_t)receive_UART0();
    38dc:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38e0:	58 01       	movw	r10, r16
    38e2:	a8 2a       	or	r10, r24
  uint8_t yp2_sen =(uint8_t)(yp);
  
  zp = ((int16_t)receive_UART0()) << 8;
    38e4:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38e8:	c8 2f       	mov	r28, r24
    38ea:	d0 e0       	ldi	r29, 0x00	; 0
    38ec:	dc 2f       	mov	r29, r28
    38ee:	cc 27       	eor	r28, r28
  uint8_t zp1_sen =(uint8_t)( zp>>8);
  zp &= 0xFF00;
  zp |= (int16_t)receive_UART0();
    38f0:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <receive_UART0>
    38f4:	4e 01       	movw	r8, r28
    38f6:	88 2a       	or	r8, r24
  //xp2_sen = 146;
  //yp1_sen = 157;
  //yp2_sen = 168;
  //zp1_sen = 179;
  //zp2_sen = 110;
  transmit_UART0(xp1_sen);
    38f8:	8d 2d       	mov	r24, r13
    38fa:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    38fe:	8f ec       	ldi	r24, 0xCF	; 207
    3900:	97 e0       	ldi	r25, 0x07	; 7
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	f1 f7       	brne	.-4      	; 0x3902 <poll_MM1+0x68>
    3906:	00 c0       	rjmp	.+0      	; 0x3908 <poll_MM1+0x6e>
    3908:	00 00       	nop
  _delay_ms(1);
  transmit_UART0(xp2_sen);
    390a:	8e 2d       	mov	r24, r14
    390c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    3910:	8f ec       	ldi	r24, 0xCF	; 207
    3912:	97 e0       	ldi	r25, 0x07	; 7
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <poll_MM1+0x7a>
    3918:	00 c0       	rjmp	.+0      	; 0x391a <poll_MM1+0x80>
    391a:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(yp1_sen);
    391c:	81 2f       	mov	r24, r17
    391e:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    3922:	8f ec       	ldi	r24, 0xCF	; 207
    3924:	97 e0       	ldi	r25, 0x07	; 7
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <poll_MM1+0x8c>
    392a:	00 c0       	rjmp	.+0      	; 0x392c <poll_MM1+0x92>
    392c:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(yp2_sen);
    392e:	8a 2d       	mov	r24, r10
    3930:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    3934:	8f ec       	ldi	r24, 0xCF	; 207
    3936:	97 e0       	ldi	r25, 0x07	; 7
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <poll_MM1+0x9e>
    393c:	00 c0       	rjmp	.+0      	; 0x393e <poll_MM1+0xa4>
    393e:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(zp1_sen);
    3940:	8d 2f       	mov	r24, r29
    3942:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
    3946:	8f ec       	ldi	r24, 0xCF	; 207
    3948:	97 e0       	ldi	r25, 0x07	; 7
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <poll_MM1+0xb0>
    394e:	00 c0       	rjmp	.+0      	; 0x3950 <poll_MM1+0xb6>
    3950:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(zp2_sen);
    3952:	88 2d       	mov	r24, r8
    3954:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <transmit_UART0>
  
  //receive_MM();
  

  ///Convert the readings to Gauss
  Current_state.mm.B_x = ((float) xp) / 15000;
    3958:	b7 01       	movw	r22, r14
    395a:	ff 0c       	add	r15, r15
    395c:	88 0b       	sbc	r24, r24
    395e:	99 0b       	sbc	r25, r25
    3960:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e6       	ldi	r19, 0x60	; 96
    3968:	4a e6       	ldi	r20, 0x6A	; 106
    396a:	56 e4       	ldi	r21, 0x46	; 70
    396c:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3970:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <Current_state+0x56>
    3974:	70 93 02 05 	sts	0x0502, r23	; 0x800502 <Current_state+0x57>
    3978:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Current_state+0x58>
    397c:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <Current_state+0x59>
  Current_state.mm.B_y = ((float) yp) / 15000;
    3980:	b5 01       	movw	r22, r10
    3982:	bb 0c       	add	r11, r11
    3984:	88 0b       	sbc	r24, r24
    3986:	99 0b       	sbc	r25, r25
    3988:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e6       	ldi	r19, 0x60	; 96
    3990:	4a e6       	ldi	r20, 0x6A	; 106
    3992:	56 e4       	ldi	r21, 0x46	; 70
    3994:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3998:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <Current_state+0x5a>
    399c:	70 93 06 05 	sts	0x0506, r23	; 0x800506 <Current_state+0x5b>
    39a0:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Current_state+0x5c>
    39a4:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <Current_state+0x5d>
  Current_state.mm.B_z = ((float) zp) / 15000;
    39a8:	b4 01       	movw	r22, r8
    39aa:	99 0c       	add	r9, r9
    39ac:	88 0b       	sbc	r24, r24
    39ae:	99 0b       	sbc	r25, r25
    39b0:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e6       	ldi	r19, 0x60	; 96
    39b8:	4a e6       	ldi	r20, 0x6A	; 106
    39ba:	56 e4       	ldi	r21, 0x46	; 70
    39bc:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    39c0:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <Current_state+0x5e>
    39c4:	70 93 0a 05 	sts	0x050A, r23	; 0x80050a <Current_state+0x5f>
    39c8:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <Current_state+0x60>
    39cc:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <Current_state+0x61>
}
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	ff 90       	pop	r15
    39da:	ef 90       	pop	r14
    39dc:	df 90       	pop	r13
    39de:	cf 90       	pop	r12
    39e0:	bf 90       	pop	r11
    39e2:	af 90       	pop	r10
    39e4:	9f 90       	pop	r9
    39e6:	8f 90       	pop	r8
    39e8:	08 95       	ret

000039ea <__vector_30>:

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
    39ea:	1f 92       	push	r1
    39ec:	0f 92       	push	r0
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	0f 92       	push	r0
    39f2:	11 24       	eor	r1, r1
    39f4:	0b b6       	in	r0, 0x3b	; 59
    39f6:	0f 92       	push	r0
    39f8:	2f 93       	push	r18
    39fa:	3f 93       	push	r19
    39fc:	4f 93       	push	r20
    39fe:	5f 93       	push	r21
    3a00:	6f 93       	push	r22
    3a02:	7f 93       	push	r23
    3a04:	8f 93       	push	r24
    3a06:	9f 93       	push	r25
    3a08:	af 93       	push	r26
    3a0a:	bf 93       	push	r27
    3a0c:	ef 93       	push	r30
    3a0e:	ff 93       	push	r31
	
	mag_data[mag_count] = UDR1;
    3a10:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <mag_count>
    3a14:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    3a18:	e8 2f       	mov	r30, r24
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	e8 56       	subi	r30, 0x68	; 104
    3a1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3a20:	90 83       	st	Z, r25
	mag_count++;
    3a22:	8f 5f       	subi	r24, 0xFF	; 255
	if (mag_count == 7)
    3a24:	87 30       	cpi	r24, 0x07	; 7
    3a26:	19 f0       	breq	.+6      	; 0x3a2e <__vector_30+0x44>

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
	
	mag_data[mag_count] = UDR1;
	mag_count++;
    3a28:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <mag_count>
    3a2c:	9d c0       	rjmp	.+314    	; 0x3b68 <__vector_30+0x17e>
	if (mag_count == 7)
	{
		mag_count = 0;
    3a2e:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <mag_count>
		x = ((int16_t)mag_data[0])<<8;
    3a32:	e8 e9       	ldi	r30, 0x98	; 152
    3a34:	f4 e0       	ldi	r31, 0x04	; 4
    3a36:	80 81       	ld	r24, Z
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	98 2f       	mov	r25, r24
    3a3c:	88 27       	eor	r24, r24
    3a3e:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a42:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x &= 0xFF00;
    3a46:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3a4a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3a4e:	88 27       	eor	r24, r24
    3a50:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a54:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x |= (int16_t)mag_data[1];
    3a58:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3a5c:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3a60:	21 81       	ldd	r18, Z+1	; 0x01
    3a62:	82 2b       	or	r24, r18
    3a64:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a68:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		
		
		y = ((int16_t)mag_data[2]) << 8;
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	98 2f       	mov	r25, r24
    3a72:	88 27       	eor	r24, r24
    3a74:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a78:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y &= 0xFF00;
    3a7c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3a80:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3a84:	88 27       	eor	r24, r24
    3a86:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a8a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y |= (int16_t)mag_data[3];
    3a8e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3a92:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3a96:	23 81       	ldd	r18, Z+3	; 0x03
    3a98:	82 2b       	or	r24, r18
    3a9a:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a9e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		
		z = ((int16_t)mag_data[4]) << 8;
    3aa2:	84 81       	ldd	r24, Z+4	; 0x04
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	98 2f       	mov	r25, r24
    3aa8:	88 27       	eor	r24, r24
    3aaa:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3aae:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z &= 0xFF00;
    3ab2:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3ab6:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3aba:	88 27       	eor	r24, r24
    3abc:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3ac0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z |= (int16_t)mag_data[5];
    3ac4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3ac8:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3acc:	25 81       	ldd	r18, Z+5	; 0x05
    3ace:	82 2b       	or	r24, r18
    3ad0:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3ad4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		
		///Convert the readings to Gauss
		Current_state.mm.B_x = ((float) x) / 15000;
    3ad8:	60 91 09 04 	lds	r22, 0x0409	; 0x800409 <x>
    3adc:	70 91 0a 04 	lds	r23, 0x040A	; 0x80040a <x+0x1>
    3ae0:	07 2e       	mov	r0, r23
    3ae2:	00 0c       	add	r0, r0
    3ae4:	88 0b       	sbc	r24, r24
    3ae6:	99 0b       	sbc	r25, r25
    3ae8:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e6       	ldi	r19, 0x60	; 96
    3af0:	4a e6       	ldi	r20, 0x6A	; 106
    3af2:	56 e4       	ldi	r21, 0x46	; 70
    3af4:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3af8:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <Current_state+0x56>
    3afc:	70 93 02 05 	sts	0x0502, r23	; 0x800502 <Current_state+0x57>
    3b00:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Current_state+0x58>
    3b04:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <Current_state+0x59>
		Current_state.mm.B_y = ((float) y) / 15000;
    3b08:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <y>
    3b0c:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <y+0x1>
    3b10:	07 2e       	mov	r0, r23
    3b12:	00 0c       	add	r0, r0
    3b14:	88 0b       	sbc	r24, r24
    3b16:	99 0b       	sbc	r25, r25
    3b18:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e6       	ldi	r19, 0x60	; 96
    3b20:	4a e6       	ldi	r20, 0x6A	; 106
    3b22:	56 e4       	ldi	r21, 0x46	; 70
    3b24:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3b28:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <Current_state+0x5a>
    3b2c:	70 93 06 05 	sts	0x0506, r23	; 0x800506 <Current_state+0x5b>
    3b30:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Current_state+0x5c>
    3b34:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <Current_state+0x5d>
		Current_state.mm.B_z = ((float) z) / 15000;
    3b38:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <z>
    3b3c:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <z+0x1>
    3b40:	07 2e       	mov	r0, r23
    3b42:	00 0c       	add	r0, r0
    3b44:	88 0b       	sbc	r24, r24
    3b46:	99 0b       	sbc	r25, r25
    3b48:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e6       	ldi	r19, 0x60	; 96
    3b50:	4a e6       	ldi	r20, 0x6A	; 106
    3b52:	56 e4       	ldi	r21, 0x46	; 70
    3b54:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    3b58:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <Current_state+0x5e>
    3b5c:	70 93 0a 05 	sts	0x050A, r23	; 0x80050a <Current_state+0x5f>
    3b60:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <Current_state+0x60>
    3b64:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <Current_state+0x61>
	}
}
    3b68:	ff 91       	pop	r31
    3b6a:	ef 91       	pop	r30
    3b6c:	bf 91       	pop	r27
    3b6e:	af 91       	pop	r26
    3b70:	9f 91       	pop	r25
    3b72:	8f 91       	pop	r24
    3b74:	7f 91       	pop	r23
    3b76:	6f 91       	pop	r22
    3b78:	5f 91       	pop	r21
    3b7a:	4f 91       	pop	r20
    3b7c:	3f 91       	pop	r19
    3b7e:	2f 91       	pop	r18
    3b80:	0f 90       	pop	r0
    3b82:	0b be       	out	0x3b, r0	; 59
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	0f 90       	pop	r0
    3b8a:	1f 90       	pop	r1
    3b8c:	18 95       	reti

00003b8e <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3b8e:	dc 01       	movw	r26, r24
    3b90:	fb 01       	movw	r30, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3b92:	4d 91       	ld	r20, X+
    3b94:	5d 91       	ld	r21, X+
    3b96:	6d 91       	ld	r22, X+
    3b98:	7c 91       	ld	r23, X
    3b9a:	13 97       	sbiw	r26, 0x03	; 3
    3b9c:	40 83       	st	Z, r20
    3b9e:	51 83       	std	Z+1, r21	; 0x01
    3ba0:	62 83       	std	Z+2, r22	; 0x02
    3ba2:	73 83       	std	Z+3, r23	; 0x03
    3ba4:	14 96       	adiw	r26, 0x04	; 4
    3ba6:	4d 91       	ld	r20, X+
    3ba8:	5d 91       	ld	r21, X+
    3baa:	6d 91       	ld	r22, X+
    3bac:	7c 91       	ld	r23, X
    3bae:	17 97       	sbiw	r26, 0x07	; 7
    3bb0:	44 83       	std	Z+4, r20	; 0x04
    3bb2:	55 83       	std	Z+5, r21	; 0x05
    3bb4:	66 83       	std	Z+6, r22	; 0x06
    3bb6:	77 83       	std	Z+7, r23	; 0x07
    3bb8:	18 96       	adiw	r26, 0x08	; 8
    3bba:	8d 91       	ld	r24, X+
    3bbc:	9d 91       	ld	r25, X+
    3bbe:	0d 90       	ld	r0, X+
    3bc0:	bc 91       	ld	r27, X
    3bc2:	a0 2d       	mov	r26, r0
    3bc4:	80 87       	std	Z+8, r24	; 0x08
    3bc6:	91 87       	std	Z+9, r25	; 0x09
    3bc8:	a2 87       	std	Z+10, r26	; 0x0a
    3bca:	b3 87       	std	Z+11, r27	; 0x0b
    3bcc:	08 95       	ret

00003bce <copy_quaternion>:
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3bce:	fc 01       	movw	r30, r24
    3bd0:	a6 2f       	mov	r26, r22
    3bd2:	b7 2f       	mov	r27, r23
    3bd4:	40 96       	adiw	r24, 0x10	; 16
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    3bd6:	41 91       	ld	r20, Z+
    3bd8:	51 91       	ld	r21, Z+
    3bda:	61 91       	ld	r22, Z+
    3bdc:	71 91       	ld	r23, Z+
    3bde:	4d 93       	st	X+, r20
    3be0:	5d 93       	st	X+, r21
    3be2:	6d 93       	st	X+, r22
    3be4:	7d 93       	st	X+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3be6:	e8 17       	cp	r30, r24
    3be8:	f9 07       	cpc	r31, r25
    3bea:	a9 f7       	brne	.-22     	; 0x3bd6 <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3bec:	08 95       	ret

00003bee <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3bee:	4f 92       	push	r4
    3bf0:	5f 92       	push	r5
    3bf2:	6f 92       	push	r6
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <vector_norm+0x1e>
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <vector_norm+0x20>
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3c14:	80 80       	ld	r8, Z
    3c16:	91 80       	ldd	r9, Z+1	; 0x01
    3c18:	a2 80       	ldd	r10, Z+2	; 0x02
    3c1a:	b3 80       	ldd	r11, Z+3	; 0x03
    3c1c:	c4 80       	ldd	r12, Z+4	; 0x04
    3c1e:	d5 80       	ldd	r13, Z+5	; 0x05
    3c20:	e6 80       	ldd	r14, Z+6	; 0x06
    3c22:	f7 80       	ldd	r15, Z+7	; 0x07
    3c24:	40 84       	ldd	r4, Z+8	; 0x08
    3c26:	51 84       	ldd	r5, Z+9	; 0x09
    3c28:	62 84       	ldd	r6, Z+10	; 0x0a
    3c2a:	73 84       	ldd	r7, Z+11	; 0x0b
    3c2c:	a5 01       	movw	r20, r10
    3c2e:	94 01       	movw	r18, r8
    3c30:	c5 01       	movw	r24, r10
    3c32:	b4 01       	movw	r22, r8
    3c34:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3c38:	69 83       	std	Y+1, r22	; 0x01
    3c3a:	7a 83       	std	Y+2, r23	; 0x02
    3c3c:	8b 83       	std	Y+3, r24	; 0x03
    3c3e:	9c 83       	std	Y+4, r25	; 0x04
    3c40:	a7 01       	movw	r20, r14
    3c42:	96 01       	movw	r18, r12
    3c44:	c7 01       	movw	r24, r14
    3c46:	b6 01       	movw	r22, r12
    3c48:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3c4c:	9b 01       	movw	r18, r22
    3c4e:	ac 01       	movw	r20, r24
    3c50:	69 81       	ldd	r22, Y+1	; 0x01
    3c52:	7a 81       	ldd	r23, Y+2	; 0x02
    3c54:	8b 81       	ldd	r24, Y+3	; 0x03
    3c56:	9c 81       	ldd	r25, Y+4	; 0x04
    3c58:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3c5c:	69 83       	std	Y+1, r22	; 0x01
    3c5e:	7a 83       	std	Y+2, r23	; 0x02
    3c60:	8b 83       	std	Y+3, r24	; 0x03
    3c62:	9c 83       	std	Y+4, r25	; 0x04
    3c64:	a5 01       	movw	r20, r10
    3c66:	94 01       	movw	r18, r8
    3c68:	c5 01       	movw	r24, r10
    3c6a:	b4 01       	movw	r22, r8
    3c6c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3c70:	4b 01       	movw	r8, r22
    3c72:	5c 01       	movw	r10, r24
    3c74:	a7 01       	movw	r20, r14
    3c76:	96 01       	movw	r18, r12
    3c78:	c7 01       	movw	r24, r14
    3c7a:	b6 01       	movw	r22, r12
    3c7c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3c80:	9b 01       	movw	r18, r22
    3c82:	ac 01       	movw	r20, r24
    3c84:	c5 01       	movw	r24, r10
    3c86:	b4 01       	movw	r22, r8
    3c88:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3c8c:	6b 01       	movw	r12, r22
    3c8e:	7c 01       	movw	r14, r24
    3c90:	a3 01       	movw	r20, r6
    3c92:	92 01       	movw	r18, r4
    3c94:	c3 01       	movw	r24, r6
    3c96:	b2 01       	movw	r22, r4
    3c98:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3c9c:	9b 01       	movw	r18, r22
    3c9e:	ac 01       	movw	r20, r24
    3ca0:	c7 01       	movw	r24, r14
    3ca2:	b6 01       	movw	r22, r12
    3ca4:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3ca8:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
}
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	cf 90       	pop	r12
    3cc0:	bf 90       	pop	r11
    3cc2:	af 90       	pop	r10
    3cc4:	9f 90       	pop	r9
    3cc6:	8f 90       	pop	r8
    3cc8:	7f 90       	pop	r7
    3cca:	6f 90       	pop	r6
    3ccc:	5f 90       	pop	r5
    3cce:	4f 90       	pop	r4
    3cd0:	08 95       	ret

00003cd2 <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3cd2:	4f 92       	push	r4
    3cd4:	5f 92       	push	r5
    3cd6:	6f 92       	push	r6
    3cd8:	7f 92       	push	r7
    3cda:	8f 92       	push	r8
    3cdc:	9f 92       	push	r9
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	28 97       	sbiw	r28, 0x08	; 8
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	9c 01       	movw	r18, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3d00:	dc 01       	movw	r26, r24
    3d02:	8d 90       	ld	r8, X+
    3d04:	9d 90       	ld	r9, X+
    3d06:	ad 90       	ld	r10, X+
    3d08:	bc 90       	ld	r11, X
    3d0a:	13 97       	sbiw	r26, 0x03	; 3
    3d0c:	14 96       	adiw	r26, 0x04	; 4
    3d0e:	cd 90       	ld	r12, X+
    3d10:	dd 90       	ld	r13, X+
    3d12:	ed 90       	ld	r14, X+
    3d14:	fc 90       	ld	r15, X
    3d16:	17 97       	sbiw	r26, 0x07	; 7
    3d18:	18 96       	adiw	r26, 0x08	; 8
    3d1a:	8d 91       	ld	r24, X+
    3d1c:	9d 91       	ld	r25, X+
    3d1e:	0d 90       	ld	r0, X+
    3d20:	bc 91       	ld	r27, X
    3d22:	a0 2d       	mov	r26, r0
    3d24:	8d 83       	std	Y+5, r24	; 0x05
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	af 83       	std	Y+7, r26	; 0x07
    3d2a:	b8 87       	std	Y+8, r27	; 0x08
    3d2c:	f9 01       	movw	r30, r18
    3d2e:	44 84       	ldd	r4, Z+12	; 0x0c
    3d30:	55 84       	ldd	r5, Z+13	; 0x0d
    3d32:	66 84       	ldd	r6, Z+14	; 0x0e
    3d34:	77 84       	ldd	r7, Z+15	; 0x0f
    3d36:	a5 01       	movw	r20, r10
    3d38:	94 01       	movw	r18, r8
    3d3a:	c5 01       	movw	r24, r10
    3d3c:	b4 01       	movw	r22, r8
    3d3e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3d42:	69 83       	std	Y+1, r22	; 0x01
    3d44:	7a 83       	std	Y+2, r23	; 0x02
    3d46:	8b 83       	std	Y+3, r24	; 0x03
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	a7 01       	movw	r20, r14
    3d4c:	96 01       	movw	r18, r12
    3d4e:	c7 01       	movw	r24, r14
    3d50:	b6 01       	movw	r22, r12
    3d52:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3d56:	9b 01       	movw	r18, r22
    3d58:	ac 01       	movw	r20, r24
    3d5a:	69 81       	ldd	r22, Y+1	; 0x01
    3d5c:	7a 81       	ldd	r23, Y+2	; 0x02
    3d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d60:	9c 81       	ldd	r25, Y+4	; 0x04
    3d62:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3d66:	69 83       	std	Y+1, r22	; 0x01
    3d68:	7a 83       	std	Y+2, r23	; 0x02
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
    3d6c:	9c 83       	std	Y+4, r25	; 0x04
    3d6e:	2d 81       	ldd	r18, Y+5	; 0x05
    3d70:	3e 81       	ldd	r19, Y+6	; 0x06
    3d72:	4f 81       	ldd	r20, Y+7	; 0x07
    3d74:	58 85       	ldd	r21, Y+8	; 0x08
    3d76:	ca 01       	movw	r24, r20
    3d78:	b9 01       	movw	r22, r18
    3d7a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3d7e:	9b 01       	movw	r18, r22
    3d80:	ac 01       	movw	r20, r24
    3d82:	69 81       	ldd	r22, Y+1	; 0x01
    3d84:	7a 81       	ldd	r23, Y+2	; 0x02
    3d86:	8b 81       	ldd	r24, Y+3	; 0x03
    3d88:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3d8e:	69 83       	std	Y+1, r22	; 0x01
    3d90:	7a 83       	std	Y+2, r23	; 0x02
    3d92:	8b 83       	std	Y+3, r24	; 0x03
    3d94:	9c 83       	std	Y+4, r25	; 0x04
    3d96:	a5 01       	movw	r20, r10
    3d98:	94 01       	movw	r18, r8
    3d9a:	c5 01       	movw	r24, r10
    3d9c:	b4 01       	movw	r22, r8
    3d9e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3da2:	4b 01       	movw	r8, r22
    3da4:	5c 01       	movw	r10, r24
    3da6:	a7 01       	movw	r20, r14
    3da8:	96 01       	movw	r18, r12
    3daa:	c7 01       	movw	r24, r14
    3dac:	b6 01       	movw	r22, r12
    3dae:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3db2:	9b 01       	movw	r18, r22
    3db4:	ac 01       	movw	r20, r24
    3db6:	c5 01       	movw	r24, r10
    3db8:	b4 01       	movw	r22, r8
    3dba:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3dbe:	6b 01       	movw	r12, r22
    3dc0:	7c 01       	movw	r14, r24
    3dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    3dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    3dc6:	4f 81       	ldd	r20, Y+7	; 0x07
    3dc8:	58 85       	ldd	r21, Y+8	; 0x08
    3dca:	ca 01       	movw	r24, r20
    3dcc:	b9 01       	movw	r22, r18
    3dce:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3dd2:	9b 01       	movw	r18, r22
    3dd4:	ac 01       	movw	r20, r24
    3dd6:	c7 01       	movw	r24, r14
    3dd8:	b6 01       	movw	r22, r12
    3dda:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3dde:	6b 01       	movw	r12, r22
    3de0:	7c 01       	movw	r14, r24
    3de2:	a3 01       	movw	r20, r6
    3de4:	92 01       	movw	r18, r4
    3de6:	c3 01       	movw	r24, r6
    3de8:	b2 01       	movw	r22, r4
    3dea:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3dee:	9b 01       	movw	r18, r22
    3df0:	ac 01       	movw	r20, r24
    3df2:	c7 01       	movw	r24, r14
    3df4:	b6 01       	movw	r22, r12
    3df6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3dfa:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
}
    3dfe:	28 96       	adiw	r28, 0x08	; 8
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	ff 90       	pop	r15
    3e10:	ef 90       	pop	r14
    3e12:	df 90       	pop	r13
    3e14:	cf 90       	pop	r12
    3e16:	bf 90       	pop	r11
    3e18:	af 90       	pop	r10
    3e1a:	9f 90       	pop	r9
    3e1c:	8f 90       	pop	r8
    3e1e:	7f 90       	pop	r7
    3e20:	6f 90       	pop	r6
    3e22:	5f 90       	pop	r5
    3e24:	4f 90       	pop	r4
    3e26:	08 95       	ret

00003e28 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3e28:	cf 92       	push	r12
    3e2a:	df 92       	push	r13
    3e2c:	ef 92       	push	r14
    3e2e:	ff 92       	push	r15
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	ec 01       	movw	r28, r24
    3e3a:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3e3c:	fb 01       	movw	r30, r22
    3e3e:	20 81       	ld	r18, Z
    3e40:	31 81       	ldd	r19, Z+1	; 0x01
    3e42:	42 81       	ldd	r20, Z+2	; 0x02
    3e44:	53 81       	ldd	r21, Z+3	; 0x03
    3e46:	68 81       	ld	r22, Y
    3e48:	79 81       	ldd	r23, Y+1	; 0x01
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3e52:	6b 01       	movw	r12, r22
    3e54:	7c 01       	movw	r14, r24
    3e56:	f8 01       	movw	r30, r16
    3e58:	24 81       	ldd	r18, Z+4	; 0x04
    3e5a:	35 81       	ldd	r19, Z+5	; 0x05
    3e5c:	46 81       	ldd	r20, Z+6	; 0x06
    3e5e:	57 81       	ldd	r21, Z+7	; 0x07
    3e60:	6c 81       	ldd	r22, Y+4	; 0x04
    3e62:	7d 81       	ldd	r23, Y+5	; 0x05
    3e64:	8e 81       	ldd	r24, Y+6	; 0x06
    3e66:	9f 81       	ldd	r25, Y+7	; 0x07
    3e68:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3e6c:	9b 01       	movw	r18, r22
    3e6e:	ac 01       	movw	r20, r24
    3e70:	c7 01       	movw	r24, r14
    3e72:	b6 01       	movw	r22, r12
    3e74:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3e78:	6b 01       	movw	r12, r22
    3e7a:	7c 01       	movw	r14, r24
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	20 85       	ldd	r18, Z+8	; 0x08
    3e80:	31 85       	ldd	r19, Z+9	; 0x09
    3e82:	42 85       	ldd	r20, Z+10	; 0x0a
    3e84:	53 85       	ldd	r21, Z+11	; 0x0b
    3e86:	68 85       	ldd	r22, Y+8	; 0x08
    3e88:	79 85       	ldd	r23, Y+9	; 0x09
    3e8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e8e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3e92:	9b 01       	movw	r18, r22
    3e94:	ac 01       	movw	r20, r24
    3e96:	c7 01       	movw	r24, r14
    3e98:	b6 01       	movw	r22, r12
    3e9a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
}
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	08 95       	ret

00003eb0 <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3eb0:	cf 92       	push	r12
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	ec 01       	movw	r28, r24
    3ec2:	e6 2e       	mov	r14, r22
    3ec4:	f7 2e       	mov	r15, r23
    3ec6:	04 2f       	mov	r16, r20
    3ec8:	15 2f       	mov	r17, r21
    3eca:	6c 01       	movw	r12, r24
    3ecc:	2c e0       	ldi	r18, 0x0C	; 12
    3ece:	c2 0e       	add	r12, r18
    3ed0:	d1 1c       	adc	r13, r1
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_res[i] = v_a[i] + v_b[i];
    3ed2:	69 91       	ld	r22, Y+
    3ed4:	79 91       	ld	r23, Y+
    3ed6:	89 91       	ld	r24, Y+
    3ed8:	99 91       	ld	r25, Y+
    3eda:	f7 01       	movw	r30, r14
    3edc:	21 91       	ld	r18, Z+
    3ede:	31 91       	ld	r19, Z+
    3ee0:	41 91       	ld	r20, Z+
    3ee2:	51 91       	ld	r21, Z+
    3ee4:	7f 01       	movw	r14, r30
    3ee6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3eea:	f8 01       	movw	r30, r16
    3eec:	61 93       	st	Z+, r22
    3eee:	71 93       	st	Z+, r23
    3ef0:	81 93       	st	Z+, r24
    3ef2:	91 93       	st	Z+, r25
    3ef4:	8f 01       	movw	r16, r30
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3ef6:	cc 15       	cp	r28, r12
    3ef8:	dd 05       	cpc	r29, r13
    3efa:	59 f7       	brne	.-42     	; 0x3ed2 <add_vectors+0x22>
    v_res[i] = v_a[i] + v_b[i];
}
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	08 95       	ret

00003f0e <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3f0e:	4f 92       	push	r4
    3f10:	5f 92       	push	r5
    3f12:	6f 92       	push	r6
    3f14:	7f 92       	push	r7
    3f16:	8f 92       	push	r8
    3f18:	9f 92       	push	r9
    3f1a:	af 92       	push	r10
    3f1c:	bf 92       	push	r11
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	6a 01       	movw	r12, r20
    3f30:	86 2e       	mov	r8, r22
    3f32:	97 2e       	mov	r9, r23
    3f34:	3a 01       	movw	r6, r20
    3f36:	2c e0       	ldi	r18, 0x0C	; 12
    3f38:	62 0e       	add	r6, r18
    3f3a:	71 1c       	adc	r7, r1
    3f3c:	48 2e       	mov	r4, r24
    3f3e:	59 2e       	mov	r5, r25
    3f40:	5c 01       	movw	r10, r24
    3f42:	ec e0       	ldi	r30, 0x0C	; 12
    3f44:	ae 0e       	add	r10, r30
    3f46:	b1 1c       	adc	r11, r1
    3f48:	76 01       	movw	r14, r12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3f4a:	f6 01       	movw	r30, r12
    3f4c:	10 82       	st	Z, r1
    3f4e:	11 82       	std	Z+1, r1	; 0x01
    3f50:	12 82       	std	Z+2, r1	; 0x02
    3f52:	13 82       	std	Z+3, r1	; 0x03
    3f54:	c4 2d       	mov	r28, r4
    3f56:	d5 2d       	mov	r29, r5
    3f58:	84 01       	movw	r16, r8
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    3f5a:	69 91       	ld	r22, Y+
    3f5c:	79 91       	ld	r23, Y+
    3f5e:	89 91       	ld	r24, Y+
    3f60:	99 91       	ld	r25, Y+
    3f62:	f8 01       	movw	r30, r16
    3f64:	20 81       	ld	r18, Z
    3f66:	31 81       	ldd	r19, Z+1	; 0x01
    3f68:	42 81       	ldd	r20, Z+2	; 0x02
    3f6a:	53 81       	ldd	r21, Z+3	; 0x03
    3f6c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3f70:	9b 01       	movw	r18, r22
    3f72:	ac 01       	movw	r20, r24
    3f74:	f7 01       	movw	r30, r14
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    3f82:	f7 01       	movw	r30, r14
    3f84:	60 83       	st	Z, r22
    3f86:	71 83       	std	Z+1, r23	; 0x01
    3f88:	82 83       	std	Z+2, r24	; 0x02
    3f8a:	93 83       	std	Z+3, r25	; 0x03
    3f8c:	04 5f       	subi	r16, 0xF4	; 244
    3f8e:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3f90:	ca 15       	cp	r28, r10
    3f92:	db 05       	cpc	r29, r11
    3f94:	11 f7       	brne	.-60     	; 0x3f5a <vector_into_matrix+0x4c>
    3f96:	f4 e0       	ldi	r31, 0x04	; 4
    3f98:	cf 0e       	add	r12, r31
    3f9a:	d1 1c       	adc	r13, r1
    3f9c:	24 e0       	ldi	r18, 0x04	; 4
    3f9e:	82 0e       	add	r8, r18
    3fa0:	91 1c       	adc	r9, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3fa2:	c6 14       	cp	r12, r6
    3fa4:	d7 04       	cpc	r13, r7
    3fa6:	81 f6       	brne	.-96     	; 0x3f48 <vector_into_matrix+0x3a>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	df 90       	pop	r13
    3fb6:	cf 90       	pop	r12
    3fb8:	bf 90       	pop	r11
    3fba:	af 90       	pop	r10
    3fbc:	9f 90       	pop	r9
    3fbe:	8f 90       	pop	r8
    3fc0:	7f 90       	pop	r7
    3fc2:	6f 90       	pop	r6
    3fc4:	5f 90       	pop	r5
    3fc6:	4f 90       	pop	r4
    3fc8:	08 95       	ret

00003fca <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3fca:	8f 92       	push	r8
    3fcc:	9f 92       	push	r9
    3fce:	af 92       	push	r10
    3fd0:	bf 92       	push	r11
    3fd2:	ef 92       	push	r14
    3fd4:	ff 92       	push	r15
    3fd6:	0f 93       	push	r16
    3fd8:	1f 93       	push	r17
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	ec 01       	movw	r28, r24
    3fe0:	8b 01       	movw	r16, r22
    3fe2:	7a 01       	movw	r14, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3fe4:	fb 01       	movw	r30, r22
    3fe6:	20 85       	ldd	r18, Z+8	; 0x08
    3fe8:	31 85       	ldd	r19, Z+9	; 0x09
    3fea:	42 85       	ldd	r20, Z+10	; 0x0a
    3fec:	53 85       	ldd	r21, Z+11	; 0x0b
    3fee:	6c 81       	ldd	r22, Y+4	; 0x04
    3ff0:	7d 81       	ldd	r23, Y+5	; 0x05
    3ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    3ffa:	4b 01       	movw	r8, r22
    3ffc:	5c 01       	movw	r10, r24
    3ffe:	f8 01       	movw	r30, r16
    4000:	24 81       	ldd	r18, Z+4	; 0x04
    4002:	35 81       	ldd	r19, Z+5	; 0x05
    4004:	46 81       	ldd	r20, Z+6	; 0x06
    4006:	57 81       	ldd	r21, Z+7	; 0x07
    4008:	68 85       	ldd	r22, Y+8	; 0x08
    400a:	79 85       	ldd	r23, Y+9	; 0x09
    400c:	8a 85       	ldd	r24, Y+10	; 0x0a
    400e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4010:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4014:	9b 01       	movw	r18, r22
    4016:	ac 01       	movw	r20, r24
    4018:	c5 01       	movw	r24, r10
    401a:	b4 01       	movw	r22, r8
    401c:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    4020:	f7 01       	movw	r30, r14
    4022:	60 83       	st	Z, r22
    4024:	71 83       	std	Z+1, r23	; 0x01
    4026:	82 83       	std	Z+2, r24	; 0x02
    4028:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    402a:	f8 01       	movw	r30, r16
    402c:	20 81       	ld	r18, Z
    402e:	31 81       	ldd	r19, Z+1	; 0x01
    4030:	42 81       	ldd	r20, Z+2	; 0x02
    4032:	53 81       	ldd	r21, Z+3	; 0x03
    4034:	68 85       	ldd	r22, Y+8	; 0x08
    4036:	79 85       	ldd	r23, Y+9	; 0x09
    4038:	8a 85       	ldd	r24, Y+10	; 0x0a
    403a:	9b 85       	ldd	r25, Y+11	; 0x0b
    403c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4040:	4b 01       	movw	r8, r22
    4042:	5c 01       	movw	r10, r24
    4044:	f8 01       	movw	r30, r16
    4046:	20 85       	ldd	r18, Z+8	; 0x08
    4048:	31 85       	ldd	r19, Z+9	; 0x09
    404a:	42 85       	ldd	r20, Z+10	; 0x0a
    404c:	53 85       	ldd	r21, Z+11	; 0x0b
    404e:	68 81       	ld	r22, Y
    4050:	79 81       	ldd	r23, Y+1	; 0x01
    4052:	8a 81       	ldd	r24, Y+2	; 0x02
    4054:	9b 81       	ldd	r25, Y+3	; 0x03
    4056:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	c5 01       	movw	r24, r10
    4060:	b4 01       	movw	r22, r8
    4062:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    4066:	f7 01       	movw	r30, r14
    4068:	64 83       	std	Z+4, r22	; 0x04
    406a:	75 83       	std	Z+5, r23	; 0x05
    406c:	86 83       	std	Z+6, r24	; 0x06
    406e:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    4070:	f8 01       	movw	r30, r16
    4072:	24 81       	ldd	r18, Z+4	; 0x04
    4074:	35 81       	ldd	r19, Z+5	; 0x05
    4076:	46 81       	ldd	r20, Z+6	; 0x06
    4078:	57 81       	ldd	r21, Z+7	; 0x07
    407a:	68 81       	ld	r22, Y
    407c:	79 81       	ldd	r23, Y+1	; 0x01
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	9b 81       	ldd	r25, Y+3	; 0x03
    4082:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4086:	4b 01       	movw	r8, r22
    4088:	5c 01       	movw	r10, r24
    408a:	f8 01       	movw	r30, r16
    408c:	20 81       	ld	r18, Z
    408e:	31 81       	ldd	r19, Z+1	; 0x01
    4090:	42 81       	ldd	r20, Z+2	; 0x02
    4092:	53 81       	ldd	r21, Z+3	; 0x03
    4094:	6c 81       	ldd	r22, Y+4	; 0x04
    4096:	7d 81       	ldd	r23, Y+5	; 0x05
    4098:	8e 81       	ldd	r24, Y+6	; 0x06
    409a:	9f 81       	ldd	r25, Y+7	; 0x07
    409c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    40a0:	9b 01       	movw	r18, r22
    40a2:	ac 01       	movw	r20, r24
    40a4:	c5 01       	movw	r24, r10
    40a6:	b4 01       	movw	r22, r8
    40a8:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    40ac:	f7 01       	movw	r30, r14
    40ae:	60 87       	std	Z+8, r22	; 0x08
    40b0:	71 87       	std	Z+9, r23	; 0x09
    40b2:	82 87       	std	Z+10, r24	; 0x0a
    40b4:	93 87       	std	Z+11, r25	; 0x0b
}
    40b6:	df 91       	pop	r29
    40b8:	cf 91       	pop	r28
    40ba:	1f 91       	pop	r17
    40bc:	0f 91       	pop	r16
    40be:	ff 90       	pop	r15
    40c0:	ef 90       	pop	r14
    40c2:	bf 90       	pop	r11
    40c4:	af 90       	pop	r10
    40c6:	9f 90       	pop	r9
    40c8:	8f 90       	pop	r8
    40ca:	08 95       	ret

000040cc <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    40cc:	cf 92       	push	r12
    40ce:	df 92       	push	r13
    40d0:	ef 92       	push	r14
    40d2:	ff 92       	push	r15
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	ec 01       	movw	r28, r24
    40da:	6a 01       	movw	r12, r20
    40dc:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    40de:	9a 01       	movw	r18, r20
    40e0:	ab 01       	movw	r20, r22
    40e2:	68 81       	ld	r22, Y
    40e4:	79 81       	ldd	r23, Y+1	; 0x01
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	9b 81       	ldd	r25, Y+3	; 0x03
    40ea:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    40ee:	68 83       	st	Y, r22
    40f0:	79 83       	std	Y+1, r23	; 0x01
    40f2:	8a 83       	std	Y+2, r24	; 0x02
    40f4:	9b 83       	std	Y+3, r25	; 0x03
    40f6:	a7 01       	movw	r20, r14
    40f8:	96 01       	movw	r18, r12
    40fa:	6c 81       	ldd	r22, Y+4	; 0x04
    40fc:	7d 81       	ldd	r23, Y+5	; 0x05
    40fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4100:	9f 81       	ldd	r25, Y+7	; 0x07
    4102:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4106:	6c 83       	std	Y+4, r22	; 0x04
    4108:	7d 83       	std	Y+5, r23	; 0x05
    410a:	8e 83       	std	Y+6, r24	; 0x06
    410c:	9f 83       	std	Y+7, r25	; 0x07
    410e:	a7 01       	movw	r20, r14
    4110:	96 01       	movw	r18, r12
    4112:	68 85       	ldd	r22, Y+8	; 0x08
    4114:	79 85       	ldd	r23, Y+9	; 0x09
    4116:	8a 85       	ldd	r24, Y+10	; 0x0a
    4118:	9b 85       	ldd	r25, Y+11	; 0x0b
    411a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    411e:	68 87       	std	Y+8, r22	; 0x08
    4120:	79 87       	std	Y+9, r23	; 0x09
    4122:	8a 87       	std	Y+10, r24	; 0x0a
    4124:	9b 87       	std	Y+11, r25	; 0x0b
}
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	ff 90       	pop	r15
    412c:	ef 90       	pop	r14
    412e:	df 90       	pop	r13
    4130:	cf 90       	pop	r12
    4132:	08 95       	ret

00004134 <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    4134:	cf 92       	push	r12
    4136:	df 92       	push	r13
    4138:	ef 92       	push	r14
    413a:	ff 92       	push	r15
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	6a 01       	movw	r12, r20
    4146:	7b 01       	movw	r14, r22
    4148:	ec 01       	movw	r28, r24
    414a:	8c 01       	movw	r16, r24
    414c:	00 5f       	subi	r16, 0xF0	; 240
    414e:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i;
  for(i = 0; i < 4; i++)
    q[i] = q[i] * s;
    4150:	a7 01       	movw	r20, r14
    4152:	96 01       	movw	r18, r12
    4154:	68 81       	ld	r22, Y
    4156:	79 81       	ldd	r23, Y+1	; 0x01
    4158:	8a 81       	ldd	r24, Y+2	; 0x02
    415a:	9b 81       	ldd	r25, Y+3	; 0x03
    415c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4160:	69 93       	st	Y+, r22
    4162:	79 93       	st	Y+, r23
    4164:	89 93       	st	Y+, r24
    4166:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    4168:	c0 17       	cp	r28, r16
    416a:	d1 07       	cpc	r29, r17
    416c:	89 f7       	brne	.-30     	; 0x4150 <scalar_into_quaternion+0x1c>
    q[i] = q[i] * s;
}
    416e:	df 91       	pop	r29
    4170:	cf 91       	pop	r28
    4172:	1f 91       	pop	r17
    4174:	0f 91       	pop	r16
    4176:	ff 90       	pop	r15
    4178:	ef 90       	pop	r14
    417a:	df 90       	pop	r13
    417c:	cf 90       	pop	r12
    417e:	08 95       	ret

00004180 <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    4180:	cf 92       	push	r12
    4182:	df 92       	push	r13
    4184:	ef 92       	push	r14
    4186:	ff 92       	push	r15
    4188:	cf 93       	push	r28
    418a:	df 93       	push	r29
    418c:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    418e:	2f dd       	rcall	.-1442   	; 0x3bee <vector_norm>
    4190:	6b 01       	movw	r12, r22
    4192:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    4194:	9b 01       	movw	r18, r22
    4196:	ac 01       	movw	r20, r24
    4198:	68 81       	ld	r22, Y
    419a:	79 81       	ldd	r23, Y+1	; 0x01
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	9b 81       	ldd	r25, Y+3	; 0x03
    41a0:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    41a4:	68 83       	st	Y, r22
    41a6:	79 83       	std	Y+1, r23	; 0x01
    41a8:	8a 83       	std	Y+2, r24	; 0x02
    41aa:	9b 83       	std	Y+3, r25	; 0x03
    41ac:	a7 01       	movw	r20, r14
    41ae:	96 01       	movw	r18, r12
    41b0:	6c 81       	ldd	r22, Y+4	; 0x04
    41b2:	7d 81       	ldd	r23, Y+5	; 0x05
    41b4:	8e 81       	ldd	r24, Y+6	; 0x06
    41b6:	9f 81       	ldd	r25, Y+7	; 0x07
    41b8:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    41bc:	6c 83       	std	Y+4, r22	; 0x04
    41be:	7d 83       	std	Y+5, r23	; 0x05
    41c0:	8e 83       	std	Y+6, r24	; 0x06
    41c2:	9f 83       	std	Y+7, r25	; 0x07
    41c4:	a7 01       	movw	r20, r14
    41c6:	96 01       	movw	r18, r12
    41c8:	68 85       	ldd	r22, Y+8	; 0x08
    41ca:	79 85       	ldd	r23, Y+9	; 0x09
    41cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    41ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    41d0:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    41d4:	68 87       	std	Y+8, r22	; 0x08
    41d6:	79 87       	std	Y+9, r23	; 0x09
    41d8:	8a 87       	std	Y+10, r24	; 0x0a
    41da:	9b 87       	std	Y+11, r25	; 0x0b
}
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	df 90       	pop	r13
    41e6:	cf 90       	pop	r12
    41e8:	08 95       	ret

000041ea <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    41ea:	cf 92       	push	r12
    41ec:	df 92       	push	r13
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	1f 93       	push	r17
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	8c 01       	movw	r16, r24
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    41fc:	6a dd       	rcall	.-1324   	; 0x3cd2 <quaternion_norm>
    41fe:	6b 01       	movw	r12, r22
    4200:	7c 01       	movw	r14, r24
    4202:	e8 01       	movw	r28, r16
    4204:	00 5f       	subi	r16, 0xF0	; 240
    4206:	1f 4f       	sbci	r17, 0xFF	; 255
  
  for(i = 0; i < 4; i++)
    q[i] = q[i] / norm;
    4208:	a7 01       	movw	r20, r14
    420a:	96 01       	movw	r18, r12
    420c:	68 81       	ld	r22, Y
    420e:	79 81       	ldd	r23, Y+1	; 0x01
    4210:	8a 81       	ldd	r24, Y+2	; 0x02
    4212:	9b 81       	ldd	r25, Y+3	; 0x03
    4214:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4218:	69 93       	st	Y+, r22
    421a:	79 93       	st	Y+, r23
    421c:	89 93       	st	Y+, r24
    421e:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    4220:	c0 17       	cp	r28, r16
    4222:	d1 07       	cpc	r29, r17
    4224:	89 f7       	brne	.-30     	; 0x4208 <convert_unit_quaternion+0x1e>
    q[i] = q[i] / norm;
}
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	08 95       	ret

00004238 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    4238:	57 9a       	sbi	0x0a, 7	; 10
    423a:	08 95       	ret

0000423c <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS1();// make this poll_ss()
    423c:	0c 94 45 2c 	jmp	0x588a	; 0x588a <poll_SS1>
    4240:	08 95       	ret

00004242 <read_MM>:
void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
 // poll_MM(); //for uart 1
  poll_MM1();// for uart0
    4242:	2b cb       	rjmp	.-2474   	; 0x389a <poll_MM1>
    4244:	08 95       	ret

00004246 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    4246:	84 b3       	in	r24, 0x14	; 20
    4248:	88 63       	ori	r24, 0x38	; 56
    424a:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    424c:	82 b1       	in	r24, 0x02	; 2
    424e:	88 63       	ori	r24, 0x38	; 56
    4250:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    4252:	ab e8       	ldi	r26, 0x8B	; 139
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	1c 92       	st	X, r1
  TCCR3B = 0;
    4258:	ea e8       	ldi	r30, 0x8A	; 138
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	10 82       	st	Z, r1
  TCCR3C = 0;
    425e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    4262:	8c 91       	ld	r24, X
    4264:	8a 6a       	ori	r24, 0xAA	; 170
    4266:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    4268:	80 81       	ld	r24, Z
    426a:	81 61       	ori	r24, 0x11	; 17
    426c:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    426e:	8f ef       	ldi	r24, 0xFF	; 255
    4270:	9f ef       	ldi	r25, 0xFF	; 255
    4272:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    4276:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3A = 0x0000;
    427a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    427e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = 0x0000;
    4282:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4286:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = 0x0000;
    428a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    428e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4292:	85 b3       	in	r24, 0x15	; 21
    4294:	87 7c       	andi	r24, 0xC7	; 199
    4296:	85 bb       	out	0x15, r24	; 21
    4298:	08 95       	ret

0000429a <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    429a:	85 b3       	in	r24, 0x15	; 21
    429c:	87 7c       	andi	r24, 0xC7	; 199
    429e:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    42a0:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
    42a4:	88 23       	and	r24, r24
    42a6:	11 f0       	breq	.+4      	; 0x42ac <set_PWM+0x12>
   PORTC |= _BV(PC5);
    42a8:	ad 9a       	sbi	0x15, 5	; 21
    42aa:	01 c0       	rjmp	.+2      	; 0x42ae <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    42ac:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    42ae:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
    42b2:	88 23       	and	r24, r24
    42b4:	11 f0       	breq	.+4      	; 0x42ba <set_PWM+0x20>
   PORTC |= _BV(PC4);
    42b6:	ac 9a       	sbi	0x15, 4	; 21
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    42ba:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    42bc:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Current_state+0x71>
    42c0:	88 23       	and	r24, r24
    42c2:	11 f0       	breq	.+4      	; 0x42c8 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    42c4:	ab 9a       	sbi	0x15, 3	; 21
    42c6:	01 c0       	rjmp	.+2      	; 0x42ca <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    42c8:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    42ca:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <Current_state+0x69>
    42ce:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <Current_state+0x6a>
    42d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    42d6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = Current_state.pwm.y;
    42da:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Current_state+0x6b>
    42de:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <Current_state+0x6c>
    42e2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    42e6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = Current_state.pwm.z;
    42ea:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <Current_state+0x6d>
    42ee:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <Current_state+0x6e>
    42f2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    42f6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    42fa:	08 95       	ret

000042fc <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    42fc:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <Current_state+0x6a>
    4300:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <Current_state+0x69>
  Current_state.pwm.y = 0;
    4304:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <Current_state+0x6c>
    4308:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <Current_state+0x6b>
  Current_state.pwm.z = 0;
    430c:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Current_state+0x6e>
    4310:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <Current_state+0x6d>
  Current_state.pwm.x_dir = 0;
    4314:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
  Current_state.pwm.y_dir = 0;
    4318:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
  Current_state.pwm.z_dir = 0;
    431c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Current_state+0x71>
  set_PWM();
    4320:	bc cf       	rjmp	.-136    	; 0x429a <set_PWM>
    4322:	08 95       	ret

00004324 <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    4324:	ef 92       	push	r14
    4326:	ff 92       	push	r15
    4328:	0f 93       	push	r16
    432a:	1f 93       	push	r17
    432c:	cf 93       	push	r28
    432e:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    4330:	cb ea       	ldi	r28, 0xAB	; 171
    4332:	d4 e0       	ldi	r29, 0x04	; 4
    4334:	19 aa       	std	Y+49, r1	; 0x31
    4336:	18 aa       	std	Y+48, r1	; 0x30
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    4338:	68 81       	ld	r22, Y
    433a:	79 81       	ldd	r23, Y+1	; 0x01
    433c:	8a 81       	ldd	r24, Y+2	; 0x02
    433e:	9b 81       	ldd	r25, Y+3	; 0x03
    4340:	08 e1       	ldi	r16, 0x18	; 24
    4342:	14 e0       	ldi	r17, 0x04	; 4
    4344:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	48 ec       	ldi	r20, 0xC8	; 200
    434e:	52 e4       	ldi	r21, 0x42	; 66
    4350:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4354:	d8 01       	movw	r26, r16
    4356:	6d 93       	st	X+, r22
    4358:	7d 93       	st	X+, r23
    435a:	8d 93       	st	X+, r24
    435c:	9c 93       	st	X, r25
    435e:	13 97       	sbiw	r26, 0x03	; 3
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    4360:	6c 81       	ldd	r22, Y+4	; 0x04
    4362:	7d 81       	ldd	r23, Y+5	; 0x05
    4364:	8e 81       	ldd	r24, Y+6	; 0x06
    4366:	9f 81       	ldd	r25, Y+7	; 0x07
    4368:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	48 ec       	ldi	r20, 0xC8	; 200
    4372:	52 e4       	ldi	r21, 0x42	; 66
    4374:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4378:	f8 01       	movw	r30, r16
    437a:	64 83       	std	Z+4, r22	; 0x04
    437c:	75 83       	std	Z+5, r23	; 0x05
    437e:	86 83       	std	Z+6, r24	; 0x06
    4380:	97 83       	std	Z+7, r25	; 0x07
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    4382:	68 85       	ldd	r22, Y+8	; 0x08
    4384:	79 85       	ldd	r23, Y+9	; 0x09
    4386:	8a 85       	ldd	r24, Y+10	; 0x0a
    4388:	9b 85       	ldd	r25, Y+11	; 0x0b
    438a:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	48 ec       	ldi	r20, 0xC8	; 200
    4394:	52 e4       	ldi	r21, 0x42	; 66
    4396:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    439a:	d8 01       	movw	r26, r16
    439c:	18 96       	adiw	r26, 0x08	; 8
    439e:	6d 93       	st	X+, r22
    43a0:	7d 93       	st	X+, r23
    43a2:	8d 93       	st	X+, r24
    43a4:	9c 93       	st	X, r25
    43a6:	1b 97       	sbiw	r26, 0x0b	; 11
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    43a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    43aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    43ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    43ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    43b0:	0f 2e       	mov	r0, r31
    43b2:	fc e0       	ldi	r31, 0x0C	; 12
    43b4:	ef 2e       	mov	r14, r31
    43b6:	f4 e0       	ldi	r31, 0x04	; 4
    43b8:	ff 2e       	mov	r15, r31
    43ba:	f0 2d       	mov	r31, r0
    43bc:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	4a e7       	ldi	r20, 0x7A	; 122
    43c6:	54 e4       	ldi	r21, 0x44	; 68
    43c8:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    43cc:	f7 01       	movw	r30, r14
    43ce:	60 83       	st	Z, r22
    43d0:	71 83       	std	Z+1, r23	; 0x01
    43d2:	82 83       	std	Z+2, r24	; 0x02
    43d4:	93 83       	std	Z+3, r25	; 0x03
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    43d6:	68 89       	ldd	r22, Y+16	; 0x10
    43d8:	79 89       	ldd	r23, Y+17	; 0x11
    43da:	8a 89       	ldd	r24, Y+18	; 0x12
    43dc:	9b 89       	ldd	r25, Y+19	; 0x13
    43de:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	4a e7       	ldi	r20, 0x7A	; 122
    43e8:	54 e4       	ldi	r21, 0x44	; 68
    43ea:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    43ee:	d7 01       	movw	r26, r14
    43f0:	14 96       	adiw	r26, 0x04	; 4
    43f2:	6d 93       	st	X+, r22
    43f4:	7d 93       	st	X+, r23
    43f6:	8d 93       	st	X+, r24
    43f8:	9c 93       	st	X, r25
    43fa:	17 97       	sbiw	r26, 0x07	; 7
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    43fc:	6c 89       	ldd	r22, Y+20	; 0x14
    43fe:	7d 89       	ldd	r23, Y+21	; 0x15
    4400:	8e 89       	ldd	r24, Y+22	; 0x16
    4402:	9f 89       	ldd	r25, Y+23	; 0x17
    4404:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	4a e7       	ldi	r20, 0x7A	; 122
    440e:	54 e4       	ldi	r21, 0x44	; 68
    4410:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4414:	f7 01       	movw	r30, r14
    4416:	60 87       	std	Z+8, r22	; 0x08
    4418:	71 87       	std	Z+9, r23	; 0x09
    441a:	82 87       	std	Z+10, r24	; 0x0a
    441c:	93 87       	std	Z+11, r25	; 0x0b
   
  get_seconds_since_equinox();//check
    441e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    4422:	e4 e3       	ldi	r30, 0x34	; 52
    4424:	f4 e0       	ldi	r31, 0x04	; 4
    4426:	d8 01       	movw	r26, r16
    4428:	4d 91       	ld	r20, X+
    442a:	5d 91       	ld	r21, X+
    442c:	6d 91       	ld	r22, X+
    442e:	7c 91       	ld	r23, X
    4430:	13 97       	sbiw	r26, 0x03	; 3
    4432:	40 83       	st	Z, r20
    4434:	51 83       	std	Z+1, r21	; 0x01
    4436:	62 83       	std	Z+2, r22	; 0x02
    4438:	73 83       	std	Z+3, r23	; 0x03
  r_ecef_ash[1] = v_r_ecef[1];
    443a:	14 96       	adiw	r26, 0x04	; 4
    443c:	4d 91       	ld	r20, X+
    443e:	5d 91       	ld	r21, X+
    4440:	6d 91       	ld	r22, X+
    4442:	7c 91       	ld	r23, X
    4444:	17 97       	sbiw	r26, 0x07	; 7
    4446:	44 83       	std	Z+4, r20	; 0x04
    4448:	55 83       	std	Z+5, r21	; 0x05
    444a:	66 83       	std	Z+6, r22	; 0x06
    444c:	77 83       	std	Z+7, r23	; 0x07
  r_ecef_ash[2] = v_r_ecef[2];
    444e:	18 96       	adiw	r26, 0x08	; 8
    4450:	4d 91       	ld	r20, X+
    4452:	5d 91       	ld	r21, X+
    4454:	6d 91       	ld	r22, X+
    4456:	7c 91       	ld	r23, X
    4458:	1b 97       	sbiw	r26, 0x0b	; 11
    445a:	40 87       	std	Z+8, r20	; 0x08
    445c:	51 87       	std	Z+9, r21	; 0x09
    445e:	62 87       	std	Z+10, r22	; 0x0a
    4460:	73 87       	std	Z+11, r23	; 0x0b
  ecef2eci(v_r_ecef, v_r);
    4462:	60 e4       	ldi	r22, 0x40	; 64
    4464:	74 e0       	ldi	r23, 0x04	; 4
    4466:	c8 01       	movw	r24, r16
    4468:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    446c:	68 e2       	ldi	r22, 0x28	; 40
    446e:	74 e0       	ldi	r23, 0x04	; 4
    4470:	c7 01       	movw	r24, r14
    4472:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4476:	69 8d       	ldd	r22, Y+25	; 0x19
    4478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    447a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    447c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    447e:	0f e9       	ldi	r16, 0x9F	; 159
    4480:	14 e0       	ldi	r17, 0x04	; 4
    4482:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    4486:	20 e8       	ldi	r18, 0x80	; 128
    4488:	36 e9       	ldi	r19, 0x96	; 150
    448a:	48 e1       	ldi	r20, 0x18	; 24
    448c:	5b e4       	ldi	r21, 0x4B	; 75
    448e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4492:	25 e3       	ldi	r18, 0x35	; 53
    4494:	3a ef       	ldi	r19, 0xFA	; 250
    4496:	4e e8       	ldi	r20, 0x8E	; 142
    4498:	5c e3       	ldi	r21, 0x3C	; 60
    449a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    449e:	f8 01       	movw	r30, r16
    44a0:	60 83       	st	Z, r22
    44a2:	71 83       	std	Z+1, r23	; 0x01
    44a4:	82 83       	std	Z+2, r24	; 0x02
    44a6:	93 83       	std	Z+3, r25	; 0x03
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    44a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    44aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    44ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44ae:	98 a1       	ldd	r25, Y+32	; 0x20
    44b0:	0e 94 be 32 	call	0x657c	; 0x657c <__floatsisf>
    44b4:	20 e8       	ldi	r18, 0x80	; 128
    44b6:	36 e9       	ldi	r19, 0x96	; 150
    44b8:	48 e1       	ldi	r20, 0x18	; 24
    44ba:	5b e4       	ldi	r21, 0x4B	; 75
    44bc:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    44c0:	25 e3       	ldi	r18, 0x35	; 53
    44c2:	3a ef       	ldi	r19, 0xFA	; 250
    44c4:	4e e8       	ldi	r20, 0x8E	; 142
    44c6:	5c e3       	ldi	r21, 0x3C	; 60
    44c8:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    44cc:	d8 01       	movw	r26, r16
    44ce:	14 96       	adiw	r26, 0x04	; 4
    44d0:	6d 93       	st	X+, r22
    44d2:	7d 93       	st	X+, r23
    44d4:	8d 93       	st	X+, r24
    44d6:	9c 93       	st	X, r25
    44d8:	17 97       	sbiw	r26, 0x07	; 7
  
  GPS_done = 0;
    44da:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <GPS_done>
}
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	1f 91       	pop	r17
    44e4:	0f 91       	pop	r16
    44e6:	ff 90       	pop	r15
    44e8:	ef 90       	pop	r14
    44ea:	08 95       	ret

000044ec <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    44ec:	2f 92       	push	r2
    44ee:	3f 92       	push	r3
    44f0:	4f 92       	push	r4
    44f2:	5f 92       	push	r5
    44f4:	6f 92       	push	r6
    44f6:	7f 92       	push	r7
    44f8:	8f 92       	push	r8
    44fa:	9f 92       	push	r9
    44fc:	af 92       	push	r10
    44fe:	bf 92       	push	r11
    4500:	cf 92       	push	r12
    4502:	df 92       	push	r13
    4504:	ef 92       	push	r14
    4506:	ff 92       	push	r15
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	64 97       	sbiw	r28, 0x14	; 20
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	1c 01       	movw	r2, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    4522:	84 e3       	ldi	r24, 0x34	; 52
    4524:	94 e0       	ldi	r25, 0x04	; 4
    4526:	63 db       	rcall	.-2362   	; 0x3bee <vector_norm>
    4528:	2b 01       	movw	r4, r22
    452a:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    452c:	9b 01       	movw	r18, r22
    452e:	ac 01       	movw	r20, r24
    4530:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4534:	9b 01       	movw	r18, r22
    4536:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    4538:	61 eb       	ldi	r22, 0xB1	; 177
    453a:	7a e1       	ldi	r23, 0x1A	; 26
    453c:	86 e7       	ldi	r24, 0x76	; 118
    453e:	91 e5       	ldi	r25, 0x51	; 81
    4540:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4544:	6d 87       	std	Y+13, r22	; 0x0d
    4546:	7e 87       	std	Y+14, r23	; 0x0e
    4548:	8f 87       	std	Y+15, r24	; 0x0f
    454a:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e4       	ldi	r20, 0x40	; 64
    4552:	50 e4       	ldi	r21, 0x40	; 64
    4554:	c3 01       	movw	r24, r6
    4556:	b2 01       	movw	r22, r4
    4558:	0e 94 a4 34 	call	0x6948	; 0x6948 <pow>
    455c:	6b 01       	movw	r12, r22
    455e:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	40 e8       	ldi	r20, 0x80	; 128
    4566:	50 e4       	ldi	r21, 0x40	; 64
    4568:	c3 01       	movw	r24, r6
    456a:	b2 01       	movw	r22, r4
    456c:	0e 94 a4 34 	call	0x6948	; 0x6948 <pow>
    4570:	2b 01       	movw	r4, r22
    4572:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    4574:	04 e3       	ldi	r16, 0x34	; 52
    4576:	14 e0       	ldi	r17, 0x04	; 4
    4578:	f8 01       	movw	r30, r16
    457a:	80 84       	ldd	r8, Z+8	; 0x08
    457c:	91 84       	ldd	r9, Z+9	; 0x09
    457e:	a2 84       	ldd	r10, Z+10	; 0x0a
    4580:	b3 84       	ldd	r11, Z+11	; 0x0b
    4582:	a5 01       	movw	r20, r10
    4584:	94 01       	movw	r18, r8
    4586:	c5 01       	movw	r24, r10
    4588:	b4 01       	movw	r22, r8
    458a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    458e:	28 e9       	ldi	r18, 0x98	; 152
    4590:	38 e0       	ldi	r19, 0x08	; 8
    4592:	45 e0       	ldi	r20, 0x05	; 5
    4594:	5c e3       	ldi	r21, 0x3C	; 60
    4596:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    459a:	2a ec       	ldi	r18, 0xCA	; 202
    459c:	3e ef       	ldi	r19, 0xFE	; 254
    459e:	43 e1       	ldi	r20, 0x13	; 19
    45a0:	56 e5       	ldi	r21, 0x56	; 86
    45a2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    45a6:	a3 01       	movw	r20, r6
    45a8:	92 01       	movw	r18, r4
    45aa:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    45ae:	69 8b       	std	Y+17, r22	; 0x11
    45b0:	7a 8b       	std	Y+18, r23	; 0x12
    45b2:	8b 8b       	std	Y+19, r24	; 0x13
    45b4:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e8       	ldi	r20, 0x80	; 128
    45bc:	5f e3       	ldi	r21, 0x3F	; 63
    45be:	6d 85       	ldd	r22, Y+13	; 0x0d
    45c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    45c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c4:	98 89       	ldd	r25, Y+16	; 0x10
    45c6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    45ca:	29 89       	ldd	r18, Y+17	; 0x11
    45cc:	3a 89       	ldd	r19, Y+18	; 0x12
    45ce:	4b 89       	ldd	r20, Y+19	; 0x13
    45d0:	5c 89       	ldd	r21, Y+20	; 0x14
    45d2:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    45d6:	2b 01       	movw	r4, r22
    45d8:	3c 01       	movw	r6, r24
    45da:	21 ef       	ldi	r18, 0xF1	; 241
    45dc:	39 e4       	ldi	r19, 0x49	; 73
    45de:	45 eb       	ldi	r20, 0xB5	; 181
    45e0:	57 ed       	ldi	r21, 0xD7	; 215
    45e2:	f8 01       	movw	r30, r16
    45e4:	60 81       	ld	r22, Z
    45e6:	71 81       	ldd	r23, Z+1	; 0x01
    45e8:	82 81       	ldd	r24, Z+2	; 0x02
    45ea:	93 81       	ldd	r25, Z+3	; 0x03
    45ec:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    45f0:	a3 01       	movw	r20, r6
    45f2:	92 01       	movw	r18, r4
    45f4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    45f8:	a7 01       	movw	r20, r14
    45fa:	96 01       	movw	r18, r12
    45fc:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4600:	69 83       	std	Y+1, r22	; 0x01
    4602:	7a 83       	std	Y+2, r23	; 0x02
    4604:	8b 83       	std	Y+3, r24	; 0x03
    4606:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    4608:	21 ef       	ldi	r18, 0xF1	; 241
    460a:	39 e4       	ldi	r19, 0x49	; 73
    460c:	45 eb       	ldi	r20, 0xB5	; 181
    460e:	57 ed       	ldi	r21, 0xD7	; 215
    4610:	f8 01       	movw	r30, r16
    4612:	64 81       	ldd	r22, Z+4	; 0x04
    4614:	75 81       	ldd	r23, Z+5	; 0x05
    4616:	86 81       	ldd	r24, Z+6	; 0x06
    4618:	97 81       	ldd	r25, Z+7	; 0x07
    461a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    461e:	9b 01       	movw	r18, r22
    4620:	ac 01       	movw	r20, r24
    4622:	c3 01       	movw	r24, r6
    4624:	b2 01       	movw	r22, r4
    4626:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    462a:	a7 01       	movw	r20, r14
    462c:	96 01       	movw	r18, r12
    462e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4632:	6d 83       	std	Y+5, r22	; 0x05
    4634:	7e 83       	std	Y+6, r23	; 0x06
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    463a:	21 ef       	ldi	r18, 0xF1	; 241
    463c:	39 e4       	ldi	r19, 0x49	; 73
    463e:	45 eb       	ldi	r20, 0xB5	; 181
    4640:	57 ed       	ldi	r21, 0xD7	; 215
    4642:	c5 01       	movw	r24, r10
    4644:	b4 01       	movw	r22, r8
    4646:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    464a:	2b 01       	movw	r4, r22
    464c:	3c 01       	movw	r6, r24
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	40 e4       	ldi	r20, 0x40	; 64
    4654:	50 e4       	ldi	r21, 0x40	; 64
    4656:	6d 85       	ldd	r22, Y+13	; 0x0d
    4658:	7e 85       	ldd	r23, Y+14	; 0x0e
    465a:	8f 85       	ldd	r24, Y+15	; 0x0f
    465c:	98 89       	ldd	r25, Y+16	; 0x10
    465e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	40 e8       	ldi	r20, 0x80	; 128
    4668:	5f e3       	ldi	r21, 0x3F	; 63
    466a:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    466e:	29 89       	ldd	r18, Y+17	; 0x11
    4670:	3a 89       	ldd	r19, Y+18	; 0x12
    4672:	4b 89       	ldd	r20, Y+19	; 0x13
    4674:	5c 89       	ldd	r21, Y+20	; 0x14
    4676:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    467a:	9b 01       	movw	r18, r22
    467c:	ac 01       	movw	r20, r24
    467e:	c3 01       	movw	r24, r6
    4680:	b2 01       	movw	r22, r4
    4682:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4686:	a7 01       	movw	r20, r14
    4688:	96 01       	movw	r18, r12
    468a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    468e:	69 87       	std	Y+9, r22	; 0x09
    4690:	7a 87       	std	Y+10, r23	; 0x0a
    4692:	8b 87       	std	Y+11, r24	; 0x0b
    4694:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    4696:	b1 01       	movw	r22, r2
    4698:	ce 01       	movw	r24, r28
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    46a0:	64 96       	adiw	r28, 0x14	; 20
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	ff 90       	pop	r15
    46b6:	ef 90       	pop	r14
    46b8:	df 90       	pop	r13
    46ba:	cf 90       	pop	r12
    46bc:	bf 90       	pop	r11
    46be:	af 90       	pop	r10
    46c0:	9f 90       	pop	r9
    46c2:	8f 90       	pop	r8
    46c4:	7f 90       	pop	r7
    46c6:	6f 90       	pop	r6
    46c8:	5f 90       	pop	r5
    46ca:	4f 90       	pop	r4
    46cc:	3f 90       	pop	r3
    46ce:	2f 90       	pop	r2
    46d0:	08 95       	ret

000046d2 <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    46d2:	7f 92       	push	r7
    46d4:	8f 92       	push	r8
    46d6:	9f 92       	push	r9
    46d8:	af 92       	push	r10
    46da:	bf 92       	push	r11
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	68 97       	sbiw	r28, 0x18	; 24
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	0f 2e       	mov	r0, r31
    46fe:	fa e0       	ldi	r31, 0x0A	; 10
    4700:	7f 2e       	mov	r7, r31
    4702:	f0 2d       	mov	r31, r0
    4704:	0f 2e       	mov	r0, r31
    4706:	f4 e3       	ldi	r31, 0x34	; 52
    4708:	cf 2e       	mov	r12, r31
    470a:	f4 e0       	ldi	r31, 0x04	; 4
    470c:	df 2e       	mov	r13, r31
    470e:	f0 2d       	mov	r31, r0
    4710:	0f 2e       	mov	r0, r31
    4712:	f0 e4       	ldi	r31, 0x40	; 64
    4714:	af 2e       	mov	r10, r31
    4716:	f4 e0       	ldi	r31, 0x04	; 4
    4718:	bf 2e       	mov	r11, r31
    471a:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    471c:	ce 01       	movw	r24, r28
    471e:	01 96       	adiw	r24, 0x01	; 1
    4720:	e5 de       	rcall	.-566    	; 0x44ec <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    4722:	be 01       	movw	r22, r28
    4724:	63 5f       	subi	r22, 0xF3	; 243
    4726:	7f 4f       	sbci	r23, 0xFF	; 255
    4728:	88 e2       	ldi	r24, 0x28	; 40
    472a:	94 e0       	ldi	r25, 0x04	; 4
    472c:	30 da       	rcall	.-2976   	; 0x3b8e <copy_vector>
    472e:	ce 01       	movw	r24, r28
    4730:	01 96       	adiw	r24, 0x01	; 1
    4732:	4c 01       	movw	r8, r24
    4734:	0f 2e       	mov	r0, r31
    4736:	f8 e2       	ldi	r31, 0x28	; 40
    4738:	ef 2e       	mov	r14, r31
    473a:	f4 e0       	ldi	r31, 0x04	; 4
    473c:	ff 2e       	mov	r15, r31
    473e:	f0 2d       	mov	r31, r0
    4740:	87 01       	movw	r16, r14
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    4742:	f4 01       	movw	r30, r8
    4744:	61 91       	ld	r22, Z+
    4746:	71 91       	ld	r23, Z+
    4748:	81 91       	ld	r24, Z+
    474a:	91 91       	ld	r25, Z+
    474c:	4f 01       	movw	r8, r30
    474e:	2d ec       	ldi	r18, 0xCD	; 205
    4750:	3c ec       	ldi	r19, 0xCC	; 204
    4752:	4c e4       	ldi	r20, 0x4C	; 76
    4754:	5e e3       	ldi	r21, 0x3E	; 62
    4756:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    475a:	9b 01       	movw	r18, r22
    475c:	ac 01       	movw	r20, r24
    475e:	f8 01       	movw	r30, r16
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    476c:	f8 01       	movw	r30, r16
    476e:	61 93       	st	Z+, r22
    4770:	71 93       	st	Z+, r23
    4772:	81 93       	st	Z+, r24
    4774:	91 93       	st	Z+, r25
    4776:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    4778:	ec 15       	cp	r30, r12
    477a:	fd 05       	cpc	r31, r13
    477c:	11 f7       	brne	.-60     	; 0x4742 <sgp_orbit_propagator+0x70>
    477e:	ce 01       	movw	r24, r28
    4780:	0d 96       	adiw	r24, 0x0d	; 13
    4782:	4c 01       	movw	r8, r24
    4784:	85 01       	movw	r16, r10
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4786:	f7 01       	movw	r30, r14
    4788:	61 91       	ld	r22, Z+
    478a:	71 91       	ld	r23, Z+
    478c:	81 91       	ld	r24, Z+
    478e:	91 91       	ld	r25, Z+
    4790:	7f 01       	movw	r14, r30
    4792:	f4 01       	movw	r30, r8
    4794:	21 91       	ld	r18, Z+
    4796:	31 91       	ld	r19, Z+
    4798:	41 91       	ld	r20, Z+
    479a:	51 91       	ld	r21, Z+
    479c:	4f 01       	movw	r8, r30
    479e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	5f e3       	ldi	r21, 0x3F	; 63
    47aa:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    47ae:	2d ec       	ldi	r18, 0xCD	; 205
    47b0:	3c ec       	ldi	r19, 0xCC	; 204
    47b2:	4c e4       	ldi	r20, 0x4C	; 76
    47b4:	5e e3       	ldi	r21, 0x3E	; 62
    47b6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    47ba:	9b 01       	movw	r18, r22
    47bc:	ac 01       	movw	r20, r24
    47be:	f8 01       	movw	r30, r16
    47c0:	60 81       	ld	r22, Z
    47c2:	71 81       	ldd	r23, Z+1	; 0x01
    47c4:	82 81       	ldd	r24, Z+2	; 0x02
    47c6:	93 81       	ldd	r25, Z+3	; 0x03
    47c8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    47cc:	f8 01       	movw	r30, r16
    47ce:	61 93       	st	Z+, r22
    47d0:	71 93       	st	Z+, r23
    47d2:	81 93       	st	Z+, r24
    47d4:	91 93       	st	Z+, r25
    47d6:	8f 01       	movw	r16, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    47d8:	ec 14       	cp	r14, r12
    47da:	fd 04       	cpc	r15, r13
    47dc:	a1 f6       	brne	.-88     	; 0x4786 <sgp_orbit_propagator+0xb4>
    47de:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    47e0:	71 10       	cpse	r7, r1
    47e2:	9c cf       	rjmp	.-200    	; 0x471c <sgp_orbit_propagator+0x4a>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    47e4:	68 96       	adiw	r28, 0x18	; 24
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	0f be       	out	0x3f, r0	; 63
    47ee:	cd bf       	out	0x3d, r28	; 61
    47f0:	df 91       	pop	r29
    47f2:	cf 91       	pop	r28
    47f4:	1f 91       	pop	r17
    47f6:	0f 91       	pop	r16
    47f8:	ff 90       	pop	r15
    47fa:	ef 90       	pop	r14
    47fc:	df 90       	pop	r13
    47fe:	cf 90       	pop	r12
    4800:	bf 90       	pop	r11
    4802:	af 90       	pop	r10
    4804:	9f 90       	pop	r9
    4806:	8f 90       	pop	r8
    4808:	7f 90       	pop	r7
    480a:	08 95       	ret

0000480c <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    480c:	4f 92       	push	r4
    480e:	5f 92       	push	r5
    4810:	6f 92       	push	r6
    4812:	7f 92       	push	r7
    4814:	8f 92       	push	r8
    4816:	9f 92       	push	r9
    4818:	af 92       	push	r10
    481a:	bf 92       	push	r11
    481c:	cf 92       	push	r12
    481e:	df 92       	push	r13
    4820:	ef 92       	push	r14
    4822:	ff 92       	push	r15
    4824:	0f 93       	push	r16
    4826:	1f 93       	push	r17
    4828:	cf 93       	push	r28
    482a:	df 93       	push	r29
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	2c 97       	sbiw	r28, 0x0c	; 12
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
    483c:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    483e:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    4842:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    4846:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    484a:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    484e:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    4852:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    4856:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    485a:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    485e:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatundisf>
    4862:	20 e0       	ldi	r18, 0x00	; 0
    4864:	30 ec       	ldi	r19, 0xC0	; 192
    4866:	48 ea       	ldi	r20, 0xA8	; 168
    4868:	57 e4       	ldi	r21, 0x47	; 71
    486a:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    486e:	2b ed       	ldi	r18, 0xDB	; 219
    4870:	3f e0       	ldi	r19, 0x0F	; 15
    4872:	49 ec       	ldi	r20, 0xC9	; 201
    4874:	50 e4       	ldi	r21, 0x40	; 64
    4876:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    487a:	21 ed       	ldi	r18, 0xD1	; 209
    487c:	30 ea       	ldi	r19, 0xA0	; 160
    487e:	46 eb       	ldi	r20, 0xB6	; 182
    4880:	53 e4       	ldi	r21, 0x43	; 67
    4882:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4886:	4b 01       	movw	r8, r22
    4888:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    488a:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    488e:	20 e9       	ldi	r18, 0x90	; 144
    4890:	3e e2       	ldi	r19, 0x2E	; 46
    4892:	4c ec       	ldi	r20, 0xCC	; 204
    4894:	5e e3       	ldi	r21, 0x3E	; 62
    4896:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    489a:	0e 94 a3 31 	call	0x6346	; 0x6346 <asin>
    489e:	6b 01       	movw	r12, r22
    48a0:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    48a2:	c5 01       	movw	r24, r10
    48a4:	b4 01       	movw	r22, r8
    48a6:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    48aa:	2b 01       	movw	r4, r22
    48ac:	3c 01       	movw	r6, r24
    48ae:	c7 01       	movw	r24, r14
    48b0:	b6 01       	movw	r22, r12
    48b2:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    48b6:	4b 01       	movw	r8, r22
    48b8:	5c 01       	movw	r10, r24
    48ba:	9b 01       	movw	r18, r22
    48bc:	ac 01       	movw	r20, r24
    48be:	c3 01       	movw	r24, r6
    48c0:	b2 01       	movw	r22, r4
    48c2:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    48c6:	0e 94 30 31 	call	0x6260	; 0x6260 <acos>
    48ca:	2b 01       	movw	r4, r22
    48cc:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	a9 01       	movw	r20, r18
    48d4:	c7 01       	movw	r24, r14
    48d6:	b6 01       	movw	r22, r12
    48d8:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    48dc:	88 23       	and	r24, r24
    48de:	54 f4       	brge	.+20     	; 0x48f4 <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    48e0:	a3 01       	movw	r20, r6
    48e2:	92 01       	movw	r18, r4
    48e4:	6b ed       	ldi	r22, 0xDB	; 219
    48e6:	7f e0       	ldi	r23, 0x0F	; 15
    48e8:	89 ec       	ldi	r24, 0xC9	; 201
    48ea:	90 e4       	ldi	r25, 0x40	; 64
    48ec:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    48f0:	2b 01       	movw	r4, r22
    48f2:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    48f4:	c3 01       	movw	r24, r6
    48f6:	b2 01       	movw	r22, r4
    48f8:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    48fc:	9b 01       	movw	r18, r22
    48fe:	ac 01       	movw	r20, r24
    4900:	c5 01       	movw	r24, r10
    4902:	b4 01       	movw	r22, r8
    4904:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4908:	69 83       	std	Y+1, r22	; 0x01
    490a:	7a 83       	std	Y+2, r23	; 0x02
    490c:	8b 83       	std	Y+3, r24	; 0x03
    490e:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    4910:	c3 01       	movw	r24, r6
    4912:	b2 01       	movw	r22, r4
    4914:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    4918:	9b 01       	movw	r18, r22
    491a:	ac 01       	movw	r20, r24
    491c:	c5 01       	movw	r24, r10
    491e:	b4 01       	movw	r22, r8
    4920:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4924:	6d 83       	std	Y+5, r22	; 0x05
    4926:	7e 83       	std	Y+6, r23	; 0x06
    4928:	8f 83       	std	Y+7, r24	; 0x07
    492a:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    492c:	c7 01       	movw	r24, r14
    492e:	b6 01       	movw	r22, r12
    4930:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <sin>
    4934:	69 87       	std	Y+9, r22	; 0x09
    4936:	7a 87       	std	Y+10, r23	; 0x0a
    4938:	8b 87       	std	Y+11, r24	; 0x0b
    493a:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    493c:	2d ec       	ldi	r18, 0xCD	; 205
    493e:	3c ec       	ldi	r19, 0xCC	; 204
    4940:	4c ec       	ldi	r20, 0xCC	; 204
    4942:	5d e3       	ldi	r21, 0x3D	; 61
    4944:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <frtm>
    4948:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <frtm+0x1>
    494c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <frtm+0x2>
    4950:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <frtm+0x3>
    4954:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4958:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <frtm>
    495c:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <frtm+0x1>
    4960:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <frtm+0x2>
    4964:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <frtm+0x3>
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    4968:	98 01       	movw	r18, r16
    496a:	ae 01       	movw	r20, r28
    496c:	4f 5f       	subi	r20, 0xFF	; 255
    496e:	5f 4f       	sbci	r21, 0xFF	; 255
    4970:	68 e2       	ldi	r22, 0x28	; 40
    4972:	74 e0       	ldi	r23, 0x04	; 4
    4974:	80 e4       	ldi	r24, 0x40	; 64
    4976:	94 e0       	ldi	r25, 0x04	; 4
    4978:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    497c:	2c 96       	adiw	r28, 0x0c	; 12
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	1f 91       	pop	r17
    498e:	0f 91       	pop	r16
    4990:	ff 90       	pop	r15
    4992:	ef 90       	pop	r14
    4994:	df 90       	pop	r13
    4996:	cf 90       	pop	r12
    4998:	bf 90       	pop	r11
    499a:	af 90       	pop	r10
    499c:	9f 90       	pop	r9
    499e:	8f 90       	pop	r8
    49a0:	7f 90       	pop	r7
    49a2:	6f 90       	pop	r6
    49a4:	5f 90       	pop	r5
    49a6:	4f 90       	pop	r4
    49a8:	08 95       	ret

000049aa <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    49aa:	8f 92       	push	r8
    49ac:	9f 92       	push	r9
    49ae:	af 92       	push	r10
    49b0:	bf 92       	push	r11
    49b2:	ef 92       	push	r14
    49b4:	ff 92       	push	r15
    49b6:	0f 93       	push	r16
    49b8:	1f 93       	push	r17
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
    49c2:	e0 97       	sbiw	r28, 0x30	; 48
    49c4:	0f b6       	in	r0, 0x3f	; 63
    49c6:	f8 94       	cli
    49c8:	de bf       	out	0x3e, r29	; 62
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	cd bf       	out	0x3d, r28	; 61
    49ce:	7c 01       	movw	r14, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    49d0:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    49d4:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    49d8:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    49dc:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    49e0:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    49e4:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    49e8:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    49ec:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    49f0:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatundisf>
    49f4:	20 ec       	ldi	r18, 0xC0	; 192
    49f6:	39 e9       	ldi	r19, 0x99	; 153
    49f8:	40 ef       	ldi	r20, 0xF0	; 240
    49fa:	5b e4       	ldi	r21, 0x4B	; 75
    49fc:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	4c ef       	ldi	r20, 0xFC	; 252
    4a06:	54 e4       	ldi	r21, 0x44	; 68
    4a08:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4a0c:	4b 01       	movw	r8, r22
    4a0e:	5c 01       	movw	r10, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    4a10:	be 01       	movw	r22, r28
    4a12:	6f 5f       	subi	r22, 0xFF	; 255
    4a14:	7f 4f       	sbci	r23, 0xFF	; 255
    4a16:	80 e4       	ldi	r24, 0x40	; 64
    4a18:	94 e0       	ldi	r25, 0x04	; 4
    4a1a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    4a1e:	be 01       	movw	r22, r28
    4a20:	63 5f       	subi	r22, 0xF3	; 243
    4a22:	7f 4f       	sbci	r23, 0xFF	; 255
    4a24:	ce 01       	movw	r24, r28
    4a26:	01 96       	adiw	r24, 0x01	; 1
    4a28:	0e 94 4b 10 	call	0x2096	; 0x2096 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    4a2c:	6f e9       	ldi	r22, 0x9F	; 159
    4a2e:	74 e0       	ldi	r23, 0x04	; 4
    4a30:	ce 01       	movw	r24, r28
    4a32:	0d 96       	adiw	r24, 0x0d	; 13
    4a34:	ac d8       	rcall	.-3752   	; 0x3b8e <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4a36:	8e 01       	movw	r16, r28
    4a38:	07 5e       	subi	r16, 0xE7	; 231
    4a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3c:	28 e0       	ldi	r18, 0x08	; 8
    4a3e:	b5 01       	movw	r22, r10
    4a40:	a4 01       	movw	r20, r8
    4a42:	ce 01       	movw	r24, r28
    4a44:	0d 96       	adiw	r24, 0x0d	; 13
    4a46:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    4a4a:	ae 01       	movw	r20, r28
    4a4c:	4f 5f       	subi	r20, 0xFF	; 255
    4a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a50:	be 01       	movw	r22, r28
    4a52:	63 5f       	subi	r22, 0xF3	; 243
    4a54:	7f 4f       	sbci	r23, 0xFF	; 255
    4a56:	c8 01       	movw	r24, r16
    4a58:	0e 94 d5 11 	call	0x23aa	; 0x23aa <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    4a5c:	be 01       	movw	r22, r28
    4a5e:	6b 5d       	subi	r22, 0xDB	; 219
    4a60:	7f 4f       	sbci	r23, 0xFF	; 255
    4a62:	ce 01       	movw	r24, r28
    4a64:	01 96       	adiw	r24, 0x01	; 1
    4a66:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    4a6a:	97 01       	movw	r18, r14
    4a6c:	ae 01       	movw	r20, r28
    4a6e:	4b 5d       	subi	r20, 0xDB	; 219
    4a70:	5f 4f       	sbci	r21, 0xFF	; 255
    4a72:	68 e2       	ldi	r22, 0x28	; 40
    4a74:	74 e0       	ldi	r23, 0x04	; 4
    4a76:	80 e4       	ldi	r24, 0x40	; 64
    4a78:	94 e0       	ldi	r25, 0x04	; 4
    4a7a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    4a7e:	e0 96       	adiw	r28, 0x30	; 48
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	ff 90       	pop	r15
    4a94:	ef 90       	pop	r14
    4a96:	bf 90       	pop	r11
    4a98:	af 90       	pop	r10
    4a9a:	9f 90       	pop	r9
    4a9c:	8f 90       	pop	r8
    4a9e:	08 95       	ret

00004aa0 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4aa0:	ef 92       	push	r14
    4aa2:	ff 92       	push	r15
    4aa4:	1f 93       	push	r17
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	c9 ee       	ldi	r28, 0xE9	; 233
    4aac:	d4 e0       	ldi	r29, 0x04	; 4
    4aae:	0f 2e       	mov	r0, r31
    4ab0:	f1 e0       	ldi	r31, 0x01	; 1
    4ab2:	ef 2e       	mov	r14, r31
    4ab4:	f5 e0       	ldi	r31, 0x05	; 5
    4ab6:	ff 2e       	mov	r15, r31
    4ab8:	f0 2d       	mov	r31, r0
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    4aba:	10 e0       	ldi	r17, 0x00	; 0
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4abc:	69 91       	ld	r22, Y+
    4abe:	79 91       	ld	r23, Y+
    4ac0:	89 91       	ld	r24, Y+
    4ac2:	99 91       	ld	r25, Y+
    4ac4:	27 e2       	ldi	r18, 0x27	; 39
    4ac6:	31 e3       	ldi	r19, 0x31	; 49
    4ac8:	48 ec       	ldi	r20, 0xC8	; 200
    4aca:	5e e3       	ldi	r21, 0x3E	; 62
    4acc:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    4ad0:	88 23       	and	r24, r24
    4ad2:	0c f4       	brge	.+2      	; 0x4ad6 <light_cal+0x36>
		  num_dark_sensors++;
    4ad4:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    4ad6:	ce 15       	cp	r28, r14
    4ad8:	df 05       	cpc	r29, r15
    4ada:	81 f7       	brne	.-32     	; 0x4abc <light_cal+0x1c>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	16 30       	cpi	r17, 0x06	; 6
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <light_cal+0x44>
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	1f 91       	pop	r17
    4aea:	ff 90       	pop	r15
    4aec:	ef 90       	pop	r14
    4aee:	08 95       	ret

00004af0 <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    4af0:	2f 92       	push	r2
    4af2:	3f 92       	push	r3
    4af4:	4f 92       	push	r4
    4af6:	5f 92       	push	r5
    4af8:	6f 92       	push	r6
    4afa:	7f 92       	push	r7
    4afc:	8f 92       	push	r8
    4afe:	9f 92       	push	r9
    4b00:	af 92       	push	r10
    4b02:	bf 92       	push	r11
    4b04:	cf 92       	push	r12
    4b06:	df 92       	push	r13
    4b08:	ef 92       	push	r14
    4b0a:	ff 92       	push	r15
    4b0c:	0f 93       	push	r16
    4b0e:	1f 93       	push	r17
    4b10:	cf 93       	push	r28
    4b12:	df 93       	push	r29
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
    4b18:	cb 57       	subi	r28, 0x7B	; 123
    4b1a:	d1 09       	sbc	r29, r1
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	af 96       	adiw	r28, 0x2f	; 47
    4b28:	9f af       	std	Y+63, r25	; 0x3f
    4b2a:	8e af       	std	Y+62, r24	; 0x3e
    4b2c:	af 97       	sbiw	r28, 0x2f	; 47
    4b2e:	e5 96       	adiw	r28, 0x35	; 53
    4b30:	7f af       	std	Y+63, r23	; 0x3f
    4b32:	6e af       	std	Y+62, r22	; 0x3e
    4b34:	e5 97       	sbiw	r28, 0x35	; 53
    4b36:	e3 96       	adiw	r28, 0x33	; 51
    4b38:	5f af       	std	Y+63, r21	; 0x3f
    4b3a:	4e af       	std	Y+62, r20	; 0x3e
    4b3c:	e3 97       	sbiw	r28, 0x33	; 51
    4b3e:	79 01       	movw	r14, r18
    4b40:	09 ee       	ldi	r16, 0xE9	; 233
    4b42:	14 e0       	ldi	r17, 0x04	; 4
    4b44:	0f 2e       	mov	r0, r31
    4b46:	f1 e0       	ldi	r31, 0x01	; 1
    4b48:	cf 2e       	mov	r12, r31
    4b4a:	f5 e0       	ldi	r31, 0x05	; 5
    4b4c:	df 2e       	mov	r13, r31
    4b4e:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4b50:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4b52:	f8 01       	movw	r30, r16
    4b54:	61 91       	ld	r22, Z+
    4b56:	71 91       	ld	r23, Z+
    4b58:	81 91       	ld	r24, Z+
    4b5a:	91 91       	ld	r25, Z+
    4b5c:	8f 01       	movw	r16, r30
    4b5e:	27 e2       	ldi	r18, 0x27	; 39
    4b60:	31 e3       	ldi	r19, 0x31	; 49
    4b62:	48 ec       	ldi	r20, 0xC8	; 200
    4b64:	5e e3       	ldi	r21, 0x3E	; 62
    4b66:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    4b6a:	88 23       	and	r24, r24
    4b6c:	0c f4       	brge	.+2      	; 0x4b70 <quest+0x80>
      num_dark_sensors++;
    4b6e:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    4b70:	0c 15       	cp	r16, r12
    4b72:	1d 05       	cpc	r17, r13
    4b74:	71 f7       	brne	.-36     	; 0x4b52 <quest+0x62>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4b76:	f1 e0       	ldi	r31, 0x01	; 1
    4b78:	e8 96       	adiw	r28, 0x38	; 56
    4b7a:	ff af       	std	Y+63, r31	; 0x3f
    4b7c:	e8 97       	sbiw	r28, 0x38	; 56
    4b7e:	26 e0       	ldi	r18, 0x06	; 6
    4b80:	b2 12       	cpse	r11, r18
    4b82:	03 c0       	rjmp	.+6      	; 0x4b8a <quest+0x9a>
    4b84:	e8 96       	adiw	r28, 0x38	; 56
    4b86:	1f ae       	std	Y+63, r1	; 0x3f
    4b88:	e8 97       	sbiw	r28, 0x38	; 56
    light = 0;
  
  if(light)
    4b8a:	e8 96       	adiw	r28, 0x38	; 56
    4b8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b8e:	e8 97       	sbiw	r28, 0x38	; 56
    4b90:	88 23       	and	r24, r24
    4b92:	09 f4       	brne	.+2      	; 0x4b96 <quest+0xa6>
    4b94:	11 c3       	rjmp	.+1570   	; 0x51b8 <quest+0x6c8>
  {
    if(!*p_w_ctrl)
    4b96:	f7 01       	movw	r30, r14
    4b98:	80 81       	ld	r24, Z
    4b9a:	81 11       	cpse	r24, r1
    4b9c:	0f c0       	rjmp	.+30     	; 0x4bbc <quest+0xcc>
    {
      time_since_light += FRAME_TIME;
    4b9e:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <time_since_light.2043>
    4ba2:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <time_since_light.2043+0x1>
    4ba6:	02 96       	adiw	r24, 0x02	; 2
    4ba8:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <time_since_light.2043+0x1>
    4bac:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <time_since_light.2043>
      if(time_since_light == 300)
    4bb0:	8c 32       	cpi	r24, 0x2C	; 44
    4bb2:	91 40       	sbci	r25, 0x01	; 1
    4bb4:	19 f4       	brne	.+6      	; 0x4bbc <quest+0xcc>
        *p_w_ctrl = 1;
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	f7 01       	movw	r30, r14
    4bba:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4bbc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <light_prev.2044>
    4bc0:	81 11       	cpse	r24, r1
    4bc2:	13 c3       	rjmp	.+1574   	; 0x51ea <quest+0x6fa>
    {
      *p_w_ctrl = 0;
    4bc4:	f7 01       	movw	r30, r14
    4bc6:	10 82       	st	Z, r1
      time_since_light = 0;
    4bc8:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <time_since_light.2043+0x1>
    4bcc:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <time_since_light.2043>
    4bd0:	0c c3       	rjmp	.+1560   	; 0x51ea <quest+0x6fa>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4bd2:	89 86       	std	Y+9, r8	; 0x09
    4bd4:	9a 86       	std	Y+10, r9	; 0x0a
    4bd6:	ab 86       	std	Y+11, r10	; 0x0b
    4bd8:	bc 86       	std	Y+12, r11	; 0x0c
    4bda:	08 c0       	rjmp	.+16     	; 0x4bec <quest+0xfc>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4bdc:	f7 fa       	bst	r15, 7
    4bde:	f0 94       	com	r15
    4be0:	f7 f8       	bld	r15, 7
    4be2:	f0 94       	com	r15
    4be4:	c9 86       	std	Y+9, r12	; 0x09
    4be6:	da 86       	std	Y+10, r13	; 0x0a
    4be8:	eb 86       	std	Y+11, r14	; 0x0b
    4bea:	fc 86       	std	Y+12, r15	; 0x0c
    4bec:	8e 01       	movw	r16, r28
    4bee:	0f 5f       	subi	r16, 0xFF	; 255
    4bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf2:	1e 01       	movw	r2, r28
    4bf4:	fd e0       	ldi	r31, 0x0D	; 13
    4bf6:	2f 0e       	add	r2, r31
    4bf8:	31 1c       	adc	r3, r1

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4bfa:	f8 01       	movw	r30, r16
    4bfc:	c0 80       	ld	r12, Z
    4bfe:	d1 80       	ldd	r13, Z+1	; 0x01
    4c00:	e2 80       	ldd	r14, Z+2	; 0x02
    4c02:	f3 80       	ldd	r15, Z+3	; 0x03
    4c04:	46 01       	movw	r8, r12
    4c06:	57 01       	movw	r10, r14
    4c08:	e8 94       	clt
    4c0a:	b7 f8       	bld	r11, 7
    4c0c:	26 e6       	ldi	r18, 0x66	; 102
    4c0e:	36 e6       	ldi	r19, 0x66	; 102
    4c10:	46 e8       	ldi	r20, 0x86	; 134
    4c12:	5f e3       	ldi	r21, 0x3F	; 63
    4c14:	c5 01       	movw	r24, r10
    4c16:	b4 01       	movw	r22, r8
    4c18:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    4c1c:	21 ec       	ldi	r18, 0xC1	; 193
    4c1e:	3a ec       	ldi	r19, 0xCA	; 202
    4c20:	41 ec       	ldi	r20, 0xC1	; 193
    4c22:	5f e3       	ldi	r21, 0x3F	; 63
    4c24:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    4c28:	0e 94 30 31 	call	0x6260	; 0x6260 <acos>
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	44 e3       	ldi	r20, 0x34	; 52
    4c32:	53 e4       	ldi	r21, 0x43	; 67
    4c34:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4c38:	20 ed       	ldi	r18, 0xD0	; 208
    4c3a:	3f e0       	ldi	r19, 0x0F	; 15
    4c3c:	49 e4       	ldi	r20, 0x49	; 73
    4c3e:	50 e4       	ldi	r21, 0x40	; 64
    4c40:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    4c44:	26 e6       	ldi	r18, 0x66	; 102
    4c46:	36 e6       	ldi	r19, 0x66	; 102
    4c48:	4e e1       	ldi	r20, 0x1E	; 30
    4c4a:	51 e4       	ldi	r21, 0x41	; 65
    4c4c:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4c50:	23 e3       	ldi	r18, 0x33	; 51
    4c52:	33 e3       	ldi	r19, 0x33	; 51
    4c54:	43 ed       	ldi	r20, 0xD3	; 211
    4c56:	5f e3       	ldi	r21, 0x3F	; 63
    4c58:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4c5c:	20 ed       	ldi	r18, 0xD0	; 208
    4c5e:	3f e0       	ldi	r19, 0x0F	; 15
    4c60:	49 e4       	ldi	r20, 0x49	; 73
    4c62:	50 e4       	ldi	r21, 0x40	; 64
    4c64:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	44 e3       	ldi	r20, 0x34	; 52
    4c6e:	53 e4       	ldi	r21, 0x43	; 67
    4c70:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4c74:	2b 01       	movw	r4, r22
    4c76:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	a9 01       	movw	r20, r18
    4c7e:	c7 01       	movw	r24, r14
    4c80:	b6 01       	movw	r22, r12
    4c82:	0e 94 1c 32 	call	0x6438	; 0x6438 <__cmpsf2>
    4c86:	88 23       	and	r24, r24
    4c88:	c1 f0       	breq	.+48     	; 0x4cba <quest+0x1ca>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4c8a:	c3 01       	movw	r24, r6
    4c8c:	b2 01       	movw	r22, r4
    4c8e:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    4c92:	2b 01       	movw	r4, r22
    4c94:	3c 01       	movw	r6, r24
    4c96:	a7 01       	movw	r20, r14
    4c98:	96 01       	movw	r18, r12
    4c9a:	c5 01       	movw	r24, r10
    4c9c:	b4 01       	movw	r22, r8
    4c9e:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4ca2:	9b 01       	movw	r18, r22
    4ca4:	ac 01       	movw	r20, r24
    4ca6:	c3 01       	movw	r24, r6
    4ca8:	b2 01       	movw	r22, r4
    4caa:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4cae:	f8 01       	movw	r30, r16
    4cb0:	60 83       	st	Z, r22
    4cb2:	71 83       	std	Z+1, r23	; 0x01
    4cb4:	82 83       	std	Z+2, r24	; 0x02
    4cb6:	93 83       	std	Z+3, r25	; 0x03
    4cb8:	09 c0       	rjmp	.+18     	; 0x4ccc <quest+0x1dc>
		else
		v_sun_m[i] = cos(angle);
    4cba:	c3 01       	movw	r24, r6
    4cbc:	b2 01       	movw	r22, r4
    4cbe:	0e 94 20 32 	call	0x6440	; 0x6440 <cos>
    4cc2:	f8 01       	movw	r30, r16
    4cc4:	60 83       	st	Z, r22
    4cc6:	71 83       	std	Z+1, r23	; 0x01
    4cc8:	82 83       	std	Z+2, r24	; 0x02
    4cca:	93 83       	std	Z+3, r25	; 0x03
    4ccc:	0c 5f       	subi	r16, 0xFC	; 252
    4cce:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4cd0:	02 15       	cp	r16, r2
    4cd2:	13 05       	cpc	r17, r3
    4cd4:	09 f0       	breq	.+2      	; 0x4cd8 <quest+0x1e8>
    4cd6:	91 cf       	rjmp	.-222    	; 0x4bfa <quest+0x10a>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4cd8:	ce 01       	movw	r24, r28
    4cda:	01 96       	adiw	r24, 0x01	; 1
    4cdc:	51 da       	rcall	.-2910   	; 0x4180 <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4cde:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Current_state+0x56>
    4ce2:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Current_state+0x57>
    4ce6:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <Current_state+0x58>
    4cea:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <Current_state+0x59>
    4cee:	8d 8b       	std	Y+21, r24	; 0x15
    4cf0:	9e 8b       	std	Y+22, r25	; 0x16
    4cf2:	af 8b       	std	Y+23, r26	; 0x17
    4cf4:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4cf6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <Current_state+0x5a>
    4cfa:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <Current_state+0x5b>
    4cfe:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <Current_state+0x5c>
    4d02:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <Current_state+0x5d>
    4d06:	b0 58       	subi	r27, 0x80	; 128
    4d08:	89 8b       	std	Y+17, r24	; 0x11
    4d0a:	9a 8b       	std	Y+18, r25	; 0x12
    4d0c:	ab 8b       	std	Y+19, r26	; 0x13
    4d0e:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4d10:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <Current_state+0x5e>
    4d14:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <Current_state+0x5f>
    4d18:	a0 91 0b 05 	lds	r26, 0x050B	; 0x80050b <Current_state+0x60>
    4d1c:	b0 91 0c 05 	lds	r27, 0x050C	; 0x80050c <Current_state+0x61>
    4d20:	8d 87       	std	Y+13, r24	; 0x0d
    4d22:	9e 87       	std	Y+14, r25	; 0x0e
    4d24:	af 87       	std	Y+15, r26	; 0x0f
    4d26:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4d28:	ae 01       	movw	r20, r28
    4d2a:	47 5e       	subi	r20, 0xE7	; 231
    4d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d2e:	be 01       	movw	r22, r28
    4d30:	6f 5f       	subi	r22, 0xFF	; 255
    4d32:	7f 4f       	sbci	r23, 0xFF	; 255
    4d34:	ce 01       	movw	r24, r28
    4d36:	0d 96       	adiw	r24, 0x0d	; 13
    4d38:	48 d9       	rcall	.-3440   	; 0x3fca <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4d3a:	ce 01       	movw	r24, r28
    4d3c:	49 96       	adiw	r24, 0x19	; 25
    4d3e:	20 da       	rcall	.-3008   	; 0x4180 <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4d40:	ae 01       	movw	r20, r28
    4d42:	4b 5d       	subi	r20, 0xDB	; 219
    4d44:	5f 4f       	sbci	r21, 0xFF	; 255
    4d46:	e5 96       	adiw	r28, 0x35	; 53
    4d48:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d4c:	e5 97       	sbiw	r28, 0x35	; 53
    4d4e:	af 96       	adiw	r28, 0x2f	; 47
    4d50:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d54:	af 97       	sbiw	r28, 0x2f	; 47
    4d56:	39 d9       	rcall	.-3470   	; 0x3fca <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4d58:	ce 01       	movw	r24, r28
    4d5a:	85 96       	adiw	r24, 0x25	; 37
    4d5c:	11 da       	rcall	.-3038   	; 0x4180 <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4d5e:	be 01       	movw	r22, r28
    4d60:	6b 5d       	subi	r22, 0xDB	; 219
    4d62:	7f 4f       	sbci	r23, 0xFF	; 255
    4d64:	ce 01       	movw	r24, r28
    4d66:	49 96       	adiw	r24, 0x19	; 25
    4d68:	5f d8       	rcall	.-3906   	; 0x3e28 <vector_dot_product>
    4d6a:	6b 01       	movw	r12, r22
    4d6c:	7c 01       	movw	r14, r24
    4d6e:	af 96       	adiw	r28, 0x2f	; 47
    4d70:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d72:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d74:	af 97       	sbiw	r28, 0x2f	; 47
    4d76:	ce 01       	movw	r24, r28
    4d78:	0d 96       	adiw	r24, 0x0d	; 13
    4d7a:	56 d8       	rcall	.-3924   	; 0x3e28 <vector_dot_product>
    4d7c:	4b 01       	movw	r8, r22
    4d7e:	5c 01       	movw	r10, r24
    4d80:	e5 96       	adiw	r28, 0x35	; 53
    4d82:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d84:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d86:	e5 97       	sbiw	r28, 0x35	; 53
    4d88:	ce 01       	movw	r24, r28
    4d8a:	01 96       	adiw	r24, 0x01	; 1
    4d8c:	4d d8       	rcall	.-3942   	; 0x3e28 <vector_dot_product>
    4d8e:	2b 01       	movw	r4, r22
    4d90:	3c 01       	movw	r6, r24
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e8       	ldi	r20, 0x80	; 128
    4d98:	5f e3       	ldi	r21, 0x3F	; 63
    4d9a:	c7 01       	movw	r24, r14
    4d9c:	b6 01       	movw	r22, r12
    4d9e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4da2:	6b 01       	movw	r12, r22
    4da4:	7c 01       	movw	r14, r24
    4da6:	26 e6       	ldi	r18, 0x66	; 102
    4da8:	36 e6       	ldi	r19, 0x66	; 102
    4daa:	46 e6       	ldi	r20, 0x66	; 102
    4dac:	5f e3       	ldi	r21, 0x3F	; 63
    4dae:	c5 01       	movw	r24, r10
    4db0:	b4 01       	movw	r22, r8
    4db2:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4db6:	4b 01       	movw	r8, r22
    4db8:	5c 01       	movw	r10, r24
    4dba:	20 ed       	ldi	r18, 0xD0	; 208
    4dbc:	3c ec       	ldi	r19, 0xCC	; 204
    4dbe:	4c ec       	ldi	r20, 0xCC	; 204
    4dc0:	5d e3       	ldi	r21, 0x3D	; 61
    4dc2:	c3 01       	movw	r24, r6
    4dc4:	b2 01       	movw	r22, r4
    4dc6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4dca:	9b 01       	movw	r18, r22
    4dcc:	ac 01       	movw	r20, r24
    4dce:	c5 01       	movw	r24, r10
    4dd0:	b4 01       	movw	r22, r8
    4dd2:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4dd6:	9b 01       	movw	r18, r22
    4dd8:	ac 01       	movw	r20, r24
    4dda:	c7 01       	movw	r24, r14
    4ddc:	b6 01       	movw	r22, r12
    4dde:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4de2:	4b 01       	movw	r8, r22
    4de4:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4de6:	ae 01       	movw	r20, r28
    4de8:	47 5b       	subi	r20, 0xB7	; 183
    4dea:	5f 4f       	sbci	r21, 0xFF	; 255
    4dec:	af 96       	adiw	r28, 0x2f	; 47
    4dee:	6e ad       	ldd	r22, Y+62	; 0x3e
    4df0:	7f ad       	ldd	r23, Y+63	; 0x3f
    4df2:	af 97       	sbiw	r28, 0x2f	; 47
    4df4:	ce 01       	movw	r24, r28
    4df6:	0d 96       	adiw	r24, 0x0d	; 13
    4df8:	e8 d8       	rcall	.-3632   	; 0x3fca <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4dfa:	ae 01       	movw	r20, r28
    4dfc:	4b 5a       	subi	r20, 0xAB	; 171
    4dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4e00:	e5 96       	adiw	r28, 0x35	; 53
    4e02:	6e ad       	ldd	r22, Y+62	; 0x3e
    4e04:	7f ad       	ldd	r23, Y+63	; 0x3f
    4e06:	e5 97       	sbiw	r28, 0x35	; 53
    4e08:	ce 01       	movw	r24, r28
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	de d8       	rcall	.-3652   	; 0x3fca <vector_cross_product>
    4e0e:	ce 01       	movw	r24, r28
    4e10:	87 5b       	subi	r24, 0xB7	; 183
    4e12:	9f 4f       	sbci	r25, 0xFF	; 255
    4e14:	7c 01       	movw	r14, r24
    4e16:	8e 01       	movw	r16, r28
    4e18:	0b 5a       	subi	r16, 0xAB	; 171
    4e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e1c:	68 01       	movw	r12, r16
    4e1e:	9c e0       	ldi	r25, 0x0C	; 12
    4e20:	c9 0e       	add	r12, r25
    4e22:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4e24:	f7 01       	movw	r30, r14
    4e26:	61 91       	ld	r22, Z+
    4e28:	71 91       	ld	r23, Z+
    4e2a:	81 91       	ld	r24, Z+
    4e2c:	91 91       	ld	r25, Z+
    4e2e:	7f 01       	movw	r14, r30
    4e30:	26 e6       	ldi	r18, 0x66	; 102
    4e32:	36 e6       	ldi	r19, 0x66	; 102
    4e34:	46 e6       	ldi	r20, 0x66	; 102
    4e36:	5f e3       	ldi	r21, 0x3F	; 63
    4e38:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4e3c:	2b 01       	movw	r4, r22
    4e3e:	3c 01       	movw	r6, r24
    4e40:	20 ed       	ldi	r18, 0xD0	; 208
    4e42:	3c ec       	ldi	r19, 0xCC	; 204
    4e44:	4c ec       	ldi	r20, 0xCC	; 204
    4e46:	5d e3       	ldi	r21, 0x3D	; 61
    4e48:	f8 01       	movw	r30, r16
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4e56:	9b 01       	movw	r18, r22
    4e58:	ac 01       	movw	r20, r24
    4e5a:	c3 01       	movw	r24, r6
    4e5c:	b2 01       	movw	r22, r4
    4e5e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4e62:	f8 01       	movw	r30, r16
    4e64:	61 93       	st	Z+, r22
    4e66:	71 93       	st	Z+, r23
    4e68:	81 93       	st	Z+, r24
    4e6a:	91 93       	st	Z+, r25
    4e6c:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4e6e:	ec 15       	cp	r30, r12
    4e70:	fd 05       	cpc	r31, r13
    4e72:	c1 f6       	brne	.-80     	; 0x4e24 <quest+0x334>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4e74:	ae 01       	movw	r20, r28
    4e76:	4f 5c       	subi	r20, 0xCF	; 207
    4e78:	5f 4f       	sbci	r21, 0xFF	; 255
    4e7a:	be 01       	movw	r22, r28
    4e7c:	6b 5d       	subi	r22, 0xDB	; 219
    4e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e80:	ce 01       	movw	r24, r28
    4e82:	49 96       	adiw	r24, 0x19	; 25
    4e84:	a2 d8       	rcall	.-3772   	; 0x3fca <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4e86:	be 01       	movw	r22, r28
    4e88:	6b 5a       	subi	r22, 0xAB	; 171
    4e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	c1 96       	adiw	r24, 0x31	; 49
    4e90:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    4e94:	a5 01       	movw	r20, r10
    4e96:	94 01       	movw	r18, r8
    4e98:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4e9c:	6b 01       	movw	r12, r22
    4e9e:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4ea0:	ae 01       	movw	r20, r28
    4ea2:	43 5c       	subi	r20, 0xC3	; 195
    4ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea6:	be 01       	movw	r22, r28
    4ea8:	6b 5d       	subi	r22, 0xDB	; 219
    4eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    4eac:	ce 01       	movw	r24, r28
    4eae:	49 96       	adiw	r24, 0x19	; 25
    4eb0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4eb4:	be 01       	movw	r22, r28
    4eb6:	6b 5a       	subi	r22, 0xAB	; 171
    4eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eba:	ce 01       	movw	r24, r28
    4ebc:	cd 96       	adiw	r24, 0x3d	; 61
    4ebe:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    4ec2:	e1 96       	adiw	r28, 0x31	; 49
    4ec4:	6c af       	std	Y+60, r22	; 0x3c
    4ec6:	7d af       	std	Y+61, r23	; 0x3d
    4ec8:	8e af       	std	Y+62, r24	; 0x3e
    4eca:	9f af       	std	Y+63, r25	; 0x3f
    4ecc:	e1 97       	sbiw	r28, 0x31	; 49
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4ece:	a7 01       	movw	r20, r14
    4ed0:	96 01       	movw	r18, r12
    4ed2:	c7 01       	movw	r24, r14
    4ed4:	b6 01       	movw	r22, r12
    4ed6:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4eda:	4b 01       	movw	r8, r22
    4edc:	5c 01       	movw	r10, r24
    4ede:	e1 96       	adiw	r28, 0x31	; 49
    4ee0:	2c ad       	ldd	r18, Y+60	; 0x3c
    4ee2:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ee4:	4e ad       	ldd	r20, Y+62	; 0x3e
    4ee6:	5f ad       	ldd	r21, Y+63	; 0x3f
    4ee8:	e1 97       	sbiw	r28, 0x31	; 49
    4eea:	ca 01       	movw	r24, r20
    4eec:	b9 01       	movw	r22, r18
    4eee:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4ef2:	2b 01       	movw	r4, r22
    4ef4:	3c 01       	movw	r6, r24
    4ef6:	a3 01       	movw	r20, r6
    4ef8:	92 01       	movw	r18, r4
    4efa:	c5 01       	movw	r24, r10
    4efc:	b4 01       	movw	r22, r8
    4efe:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4f02:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    4f06:	4b 01       	movw	r8, r22
    4f08:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	a9 01       	movw	r20, r18
    4f10:	c7 01       	movw	r24, r14
    4f12:	b6 01       	movw	r22, r12
    4f14:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    4f18:	18 16       	cp	r1, r24
    4f1a:	0c f0       	brlt	.+2      	; 0x4f1e <quest+0x42e>
    4f1c:	90 c0       	rjmp	.+288    	; 0x503e <quest+0x54e>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4f1e:	a7 01       	movw	r20, r14
    4f20:	96 01       	movw	r18, r12
    4f22:	c5 01       	movw	r24, r10
    4f24:	b4 01       	movw	r22, r8
    4f26:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4f2a:	e7 96       	adiw	r28, 0x37	; 55
    4f2c:	6c af       	std	Y+60, r22	; 0x3c
    4f2e:	7d af       	std	Y+61, r23	; 0x3d
    4f30:	8e af       	std	Y+62, r24	; 0x3e
    4f32:	9f af       	std	Y+63, r25	; 0x3f
    4f34:	e7 97       	sbiw	r28, 0x37	; 55
    4f36:	a5 01       	movw	r20, r10
    4f38:	94 01       	movw	r18, r8
    4f3a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4f3e:	4b 01       	movw	r8, r22
    4f40:	5c 01       	movw	r10, r24
    4f42:	be 01       	movw	r22, r28
    4f44:	6b 5d       	subi	r22, 0xDB	; 219
    4f46:	7f 4f       	sbci	r23, 0xFF	; 255
    4f48:	ce 01       	movw	r24, r28
    4f4a:	49 96       	adiw	r24, 0x19	; 25
    4f4c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    4f50:	2b 01       	movw	r4, r22
    4f52:	3c 01       	movw	r6, r24
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	40 e8       	ldi	r20, 0x80	; 128
    4f5a:	5f e3       	ldi	r21, 0x3F	; 63
    4f5c:	c3 01       	movw	r24, r6
    4f5e:	b2 01       	movw	r22, r4
    4f60:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4f64:	9b 01       	movw	r18, r22
    4f66:	ac 01       	movw	r20, r24
    4f68:	c5 01       	movw	r24, r10
    4f6a:	b4 01       	movw	r22, r8
    4f6c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4f70:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    4f74:	9b 01       	movw	r18, r22
    4f76:	ac 01       	movw	r20, r24
    4f78:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4f7c:	9b 01       	movw	r18, r22
    4f7e:	ac 01       	movw	r20, r24
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	70 e0       	ldi	r23, 0x00	; 0
    4f84:	80 e8       	ldi	r24, 0x80	; 128
    4f86:	9f e3       	ldi	r25, 0x3F	; 63
    4f88:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    4f8c:	ec 96       	adiw	r28, 0x3c	; 60
    4f8e:	6c af       	std	Y+60, r22	; 0x3c
    4f90:	7d af       	std	Y+61, r23	; 0x3d
    4f92:	8e af       	std	Y+62, r24	; 0x3e
    4f94:	9f af       	std	Y+63, r25	; 0x3f
    4f96:	ec 97       	sbiw	r28, 0x3c	; 60
    4f98:	8e 01       	movw	r16, r28
    4f9a:	0f 5c       	subi	r16, 0xCF	; 207
    4f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9e:	1e 01       	movw	r2, r28
    4fa0:	fd e3       	ldi	r31, 0x3D	; 61
    4fa2:	2f 0e       	add	r2, r31
    4fa4:	31 1c       	adc	r3, r1
    4fa6:	6e 01       	movw	r12, r28
    4fa8:	21 e6       	ldi	r18, 0x61	; 97
    4faa:	c2 0e       	add	r12, r18
    4fac:	d1 1c       	adc	r13, r1
    4fae:	71 01       	movw	r14, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4fb0:	f8 01       	movw	r30, r16
    4fb2:	21 91       	ld	r18, Z+
    4fb4:	31 91       	ld	r19, Z+
    4fb6:	41 91       	ld	r20, Z+
    4fb8:	51 91       	ld	r21, Z+
    4fba:	8f 01       	movw	r16, r30
    4fbc:	f1 01       	movw	r30, r2
    4fbe:	41 90       	ld	r4, Z+
    4fc0:	51 90       	ld	r5, Z+
    4fc2:	61 90       	ld	r6, Z+
    4fc4:	71 90       	ld	r7, Z+
    4fc6:	1f 01       	movw	r2, r30
    4fc8:	e7 96       	adiw	r28, 0x37	; 55
    4fca:	6c ad       	ldd	r22, Y+60	; 0x3c
    4fcc:	7d ad       	ldd	r23, Y+61	; 0x3d
    4fce:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fd2:	e7 97       	sbiw	r28, 0x37	; 55
    4fd4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4fd8:	4b 01       	movw	r8, r22
    4fda:	5c 01       	movw	r10, r24
    4fdc:	e1 96       	adiw	r28, 0x31	; 49
    4fde:	2c ad       	ldd	r18, Y+60	; 0x3c
    4fe0:	3d ad       	ldd	r19, Y+61	; 0x3d
    4fe2:	4e ad       	ldd	r20, Y+62	; 0x3e
    4fe4:	5f ad       	ldd	r21, Y+63	; 0x3f
    4fe6:	e1 97       	sbiw	r28, 0x31	; 49
    4fe8:	c3 01       	movw	r24, r6
    4fea:	b2 01       	movw	r22, r4
    4fec:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    4ff0:	9b 01       	movw	r18, r22
    4ff2:	ac 01       	movw	r20, r24
    4ff4:	c5 01       	movw	r24, r10
    4ff6:	b4 01       	movw	r22, r8
    4ff8:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    4ffc:	f6 01       	movw	r30, r12
    4ffe:	61 93       	st	Z+, r22
    5000:	71 93       	st	Z+, r23
    5002:	81 93       	st	Z+, r24
    5004:	91 93       	st	Z+, r25
    5006:	6f 01       	movw	r12, r30
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    5008:	0e 15       	cp	r16, r14
    500a:	1f 05       	cpc	r17, r15
    500c:	89 f6       	brne	.-94     	; 0x4fb0 <quest+0x4c0>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    500e:	be 01       	movw	r22, r28
    5010:	6b 5d       	subi	r22, 0xDB	; 219
    5012:	7f 4f       	sbci	r23, 0xFF	; 255
    5014:	ce 01       	movw	r24, r28
    5016:	49 96       	adiw	r24, 0x19	; 25
    5018:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	40 e8       	ldi	r20, 0x80	; 128
    5022:	5f e3       	ldi	r21, 0x3F	; 63
    5024:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    5028:	9b 01       	movw	r18, r22
    502a:	ac 01       	movw	r20, r24
    502c:	e7 96       	adiw	r28, 0x37	; 55
    502e:	6c ad       	ldd	r22, Y+60	; 0x3c
    5030:	7d ad       	ldd	r23, Y+61	; 0x3d
    5032:	8e ad       	ldd	r24, Y+62	; 0x3e
    5034:	9f ad       	ldd	r25, Y+63	; 0x3f
    5036:	e7 97       	sbiw	r28, 0x37	; 55
    5038:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    503c:	8d c0       	rjmp	.+282    	; 0x5158 <quest+0x668>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    503e:	a7 01       	movw	r20, r14
    5040:	96 01       	movw	r18, r12
    5042:	c5 01       	movw	r24, r10
    5044:	b4 01       	movw	r22, r8
    5046:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    504a:	e7 96       	adiw	r28, 0x37	; 55
    504c:	6c af       	std	Y+60, r22	; 0x3c
    504e:	7d af       	std	Y+61, r23	; 0x3d
    5050:	8e af       	std	Y+62, r24	; 0x3e
    5052:	9f af       	std	Y+63, r25	; 0x3f
    5054:	e7 97       	sbiw	r28, 0x37	; 55
    5056:	a5 01       	movw	r20, r10
    5058:	94 01       	movw	r18, r8
    505a:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    505e:	6b 01       	movw	r12, r22
    5060:	7c 01       	movw	r14, r24
    5062:	be 01       	movw	r22, r28
    5064:	6b 5d       	subi	r22, 0xDB	; 219
    5066:	7f 4f       	sbci	r23, 0xFF	; 255
    5068:	ce 01       	movw	r24, r28
    506a:	49 96       	adiw	r24, 0x19	; 25
    506c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    5070:	4b 01       	movw	r8, r22
    5072:	5c 01       	movw	r10, r24
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	40 e8       	ldi	r20, 0x80	; 128
    507a:	5f e3       	ldi	r21, 0x3F	; 63
    507c:	c5 01       	movw	r24, r10
    507e:	b4 01       	movw	r22, r8
    5080:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    5084:	9b 01       	movw	r18, r22
    5086:	ac 01       	movw	r20, r24
    5088:	c7 01       	movw	r24, r14
    508a:	b6 01       	movw	r22, r12
    508c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5090:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sqrt>
    5094:	9b 01       	movw	r18, r22
    5096:	ac 01       	movw	r20, r24
    5098:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    509c:	9b 01       	movw	r18, r22
    509e:	ac 01       	movw	r20, r24
    50a0:	60 e0       	ldi	r22, 0x00	; 0
    50a2:	70 e0       	ldi	r23, 0x00	; 0
    50a4:	80 e8       	ldi	r24, 0x80	; 128
    50a6:	9f e3       	ldi	r25, 0x3F	; 63
    50a8:	0e 94 23 32 	call	0x6446	; 0x6446 <__divsf3>
    50ac:	ec 96       	adiw	r28, 0x3c	; 60
    50ae:	6c af       	std	Y+60, r22	; 0x3c
    50b0:	7d af       	std	Y+61, r23	; 0x3d
    50b2:	8e af       	std	Y+62, r24	; 0x3e
    50b4:	9f af       	std	Y+63, r25	; 0x3f
    50b6:	ec 97       	sbiw	r28, 0x3c	; 60
    50b8:	8e 01       	movw	r16, r28
    50ba:	0f 5c       	subi	r16, 0xCF	; 207
    50bc:	1f 4f       	sbci	r17, 0xFF	; 255
    50be:	1e 01       	movw	r2, r28
    50c0:	fd e3       	ldi	r31, 0x3D	; 61
    50c2:	2f 0e       	add	r2, r31
    50c4:	31 1c       	adc	r3, r1
    50c6:	2e 01       	movw	r4, r28
    50c8:	21 e6       	ldi	r18, 0x61	; 97
    50ca:	42 0e       	add	r4, r18
    50cc:	51 1c       	adc	r5, r1
    50ce:	31 01       	movw	r6, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    50d0:	f8 01       	movw	r30, r16
    50d2:	61 91       	ld	r22, Z+
    50d4:	71 91       	ld	r23, Z+
    50d6:	81 91       	ld	r24, Z+
    50d8:	91 91       	ld	r25, Z+
    50da:	8f 01       	movw	r16, r30
    50dc:	f1 01       	movw	r30, r2
    50de:	81 90       	ld	r8, Z+
    50e0:	91 90       	ld	r9, Z+
    50e2:	a1 90       	ld	r10, Z+
    50e4:	b1 90       	ld	r11, Z+
    50e6:	1f 01       	movw	r2, r30
    50e8:	e1 96       	adiw	r28, 0x31	; 49
    50ea:	2c ad       	ldd	r18, Y+60	; 0x3c
    50ec:	3d ad       	ldd	r19, Y+61	; 0x3d
    50ee:	4e ad       	ldd	r20, Y+62	; 0x3e
    50f0:	5f ad       	ldd	r21, Y+63	; 0x3f
    50f2:	e1 97       	sbiw	r28, 0x31	; 49
    50f4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    50f8:	6b 01       	movw	r12, r22
    50fa:	7c 01       	movw	r14, r24
    50fc:	a5 01       	movw	r20, r10
    50fe:	94 01       	movw	r18, r8
    5100:	e7 96       	adiw	r28, 0x37	; 55
    5102:	6c ad       	ldd	r22, Y+60	; 0x3c
    5104:	7d ad       	ldd	r23, Y+61	; 0x3d
    5106:	8e ad       	ldd	r24, Y+62	; 0x3e
    5108:	9f ad       	ldd	r25, Y+63	; 0x3f
    510a:	e7 97       	sbiw	r28, 0x37	; 55
    510c:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    5110:	9b 01       	movw	r18, r22
    5112:	ac 01       	movw	r20, r24
    5114:	c7 01       	movw	r24, r14
    5116:	b6 01       	movw	r22, r12
    5118:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    511c:	f2 01       	movw	r30, r4
    511e:	61 93       	st	Z+, r22
    5120:	71 93       	st	Z+, r23
    5122:	81 93       	st	Z+, r24
    5124:	91 93       	st	Z+, r25
    5126:	2f 01       	movw	r4, r30
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    5128:	06 15       	cp	r16, r6
    512a:	17 05       	cpc	r17, r7
    512c:	89 f6       	brne	.-94     	; 0x50d0 <quest+0x5e0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    512e:	be 01       	movw	r22, r28
    5130:	6b 5d       	subi	r22, 0xDB	; 219
    5132:	7f 4f       	sbci	r23, 0xFF	; 255
    5134:	ce 01       	movw	r24, r28
    5136:	49 96       	adiw	r24, 0x19	; 25
    5138:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <vector_dot_product>
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	40 e8       	ldi	r20, 0x80	; 128
    5142:	5f e3       	ldi	r21, 0x3F	; 63
    5144:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    5148:	e1 96       	adiw	r28, 0x31	; 49
    514a:	2c ad       	ldd	r18, Y+60	; 0x3c
    514c:	3d ad       	ldd	r19, Y+61	; 0x3d
    514e:	4e ad       	ldd	r20, Y+62	; 0x3e
    5150:	5f ad       	ldd	r21, Y+63	; 0x3f
    5152:	e1 97       	sbiw	r28, 0x31	; 49
    5154:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    5158:	a5 96       	adiw	r28, 0x25	; 37
    515a:	0c ad       	ldd	r16, Y+60	; 0x3c
    515c:	1d ad       	ldd	r17, Y+61	; 0x3d
    515e:	2e ad       	ldd	r18, Y+62	; 0x3e
    5160:	3f ad       	ldd	r19, Y+63	; 0x3f
    5162:	a5 97       	sbiw	r28, 0x25	; 37
    5164:	e3 96       	adiw	r28, 0x33	; 51
    5166:	ee ad       	ldd	r30, Y+62	; 0x3e
    5168:	ff ad       	ldd	r31, Y+63	; 0x3f
    516a:	e3 97       	sbiw	r28, 0x33	; 51
    516c:	00 83       	st	Z, r16
    516e:	11 83       	std	Z+1, r17	; 0x01
    5170:	22 83       	std	Z+2, r18	; 0x02
    5172:	33 83       	std	Z+3, r19	; 0x03
    5174:	a9 96       	adiw	r28, 0x29	; 41
    5176:	0c ad       	ldd	r16, Y+60	; 0x3c
    5178:	1d ad       	ldd	r17, Y+61	; 0x3d
    517a:	2e ad       	ldd	r18, Y+62	; 0x3e
    517c:	3f ad       	ldd	r19, Y+63	; 0x3f
    517e:	a9 97       	sbiw	r28, 0x29	; 41
    5180:	04 83       	std	Z+4, r16	; 0x04
    5182:	15 83       	std	Z+5, r17	; 0x05
    5184:	26 83       	std	Z+6, r18	; 0x06
    5186:	37 83       	std	Z+7, r19	; 0x07
    5188:	ad 96       	adiw	r28, 0x2d	; 45
    518a:	0c ad       	ldd	r16, Y+60	; 0x3c
    518c:	1d ad       	ldd	r17, Y+61	; 0x3d
    518e:	2e ad       	ldd	r18, Y+62	; 0x3e
    5190:	3f ad       	ldd	r19, Y+63	; 0x3f
    5192:	ad 97       	sbiw	r28, 0x2d	; 45
    5194:	00 87       	std	Z+8, r16	; 0x08
    5196:	11 87       	std	Z+9, r17	; 0x09
    5198:	22 87       	std	Z+10, r18	; 0x0a
    519a:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    519c:	64 87       	std	Z+12, r22	; 0x0c
    519e:	75 87       	std	Z+13, r23	; 0x0d
    51a0:	86 87       	std	Z+14, r24	; 0x0e
    51a2:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    51a4:	ec 96       	adiw	r28, 0x3c	; 60
    51a6:	4c ad       	ldd	r20, Y+60	; 0x3c
    51a8:	5d ad       	ldd	r21, Y+61	; 0x3d
    51aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    51ac:	7f ad       	ldd	r23, Y+63	; 0x3f
    51ae:	ec 97       	sbiw	r28, 0x3c	; 60
    51b0:	cf 01       	movw	r24, r30
    51b2:	0e 94 9a 20 	call	0x4134	; 0x4134 <scalar_into_quaternion>
    51b6:	7d c0       	rjmp	.+250    	; 0x52b2 <quest+0x7c2>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    51b8:	e3 96       	adiw	r28, 0x33	; 51
    51ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    51bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    51be:	e3 97       	sbiw	r28, 0x33	; 51
    51c0:	10 82       	st	Z, r1
    51c2:	11 82       	std	Z+1, r1	; 0x01
    51c4:	12 82       	std	Z+2, r1	; 0x02
    51c6:	13 82       	std	Z+3, r1	; 0x03
    51c8:	14 82       	std	Z+4, r1	; 0x04
    51ca:	15 82       	std	Z+5, r1	; 0x05
    51cc:	16 82       	std	Z+6, r1	; 0x06
    51ce:	17 82       	std	Z+7, r1	; 0x07
    51d0:	10 86       	std	Z+8, r1	; 0x08
    51d2:	11 86       	std	Z+9, r1	; 0x09
    51d4:	12 86       	std	Z+10, r1	; 0x0a
    51d6:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	a0 e8       	ldi	r26, 0x80	; 128
    51de:	bf e3       	ldi	r27, 0x3F	; 63
    51e0:	84 87       	std	Z+12, r24	; 0x0c
    51e2:	95 87       	std	Z+13, r25	; 0x0d
    51e4:	a6 87       	std	Z+14, r26	; 0x0e
    51e6:	b7 87       	std	Z+15, r27	; 0x0f
    51e8:	64 c0       	rjmp	.+200    	; 0x52b2 <quest+0x7c2>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    51ea:	80 90 e9 04 	lds	r8, 0x04E9	; 0x8004e9 <Current_state+0x3e>
    51ee:	90 90 ea 04 	lds	r9, 0x04EA	; 0x8004ea <Current_state+0x3f>
    51f2:	a0 90 eb 04 	lds	r10, 0x04EB	; 0x8004eb <Current_state+0x40>
    51f6:	b0 90 ec 04 	lds	r11, 0x04EC	; 0x8004ec <Current_state+0x41>
    51fa:	c0 90 ed 04 	lds	r12, 0x04ED	; 0x8004ed <Current_state+0x42>
    51fe:	d0 90 ee 04 	lds	r13, 0x04EE	; 0x8004ee <Current_state+0x43>
    5202:	e0 90 ef 04 	lds	r14, 0x04EF	; 0x8004ef <Current_state+0x44>
    5206:	f0 90 f0 04 	lds	r15, 0x04F0	; 0x8004f0 <Current_state+0x45>
    520a:	a7 01       	movw	r20, r14
    520c:	96 01       	movw	r18, r12
    520e:	c5 01       	movw	r24, r10
    5210:	b4 01       	movw	r22, r8
    5212:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    5216:	18 16       	cp	r1, r24
    5218:	4c f0       	brlt	.+18     	; 0x522c <quest+0x73c>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    521a:	f7 fa       	bst	r15, 7
    521c:	f0 94       	com	r15
    521e:	f7 f8       	bld	r15, 7
    5220:	f0 94       	com	r15
    5222:	c9 82       	std	Y+1, r12	; 0x01
    5224:	da 82       	std	Y+2, r13	; 0x02
    5226:	eb 82       	std	Y+3, r14	; 0x03
    5228:	fc 82       	std	Y+4, r15	; 0x04
    522a:	04 c0       	rjmp	.+8      	; 0x5234 <quest+0x744>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    522c:	89 82       	std	Y+1, r8	; 0x01
    522e:	9a 82       	std	Y+2, r9	; 0x02
    5230:	ab 82       	std	Y+3, r10	; 0x03
    5232:	bc 82       	std	Y+4, r11	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5234:	80 90 f1 04 	lds	r8, 0x04F1	; 0x8004f1 <Current_state+0x46>
    5238:	90 90 f2 04 	lds	r9, 0x04F2	; 0x8004f2 <Current_state+0x47>
    523c:	a0 90 f3 04 	lds	r10, 0x04F3	; 0x8004f3 <Current_state+0x48>
    5240:	b0 90 f4 04 	lds	r11, 0x04F4	; 0x8004f4 <Current_state+0x49>
    5244:	c0 90 f5 04 	lds	r12, 0x04F5	; 0x8004f5 <Current_state+0x4a>
    5248:	d0 90 f6 04 	lds	r13, 0x04F6	; 0x8004f6 <Current_state+0x4b>
    524c:	e0 90 f7 04 	lds	r14, 0x04F7	; 0x8004f7 <Current_state+0x4c>
    5250:	f0 90 f8 04 	lds	r15, 0x04F8	; 0x8004f8 <Current_state+0x4d>
    5254:	a7 01       	movw	r20, r14
    5256:	96 01       	movw	r18, r12
    5258:	c5 01       	movw	r24, r10
    525a:	b4 01       	movw	r22, r8
    525c:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    5260:	18 16       	cp	r1, r24
    5262:	4c f0       	brlt	.+18     	; 0x5276 <quest+0x786>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5264:	f7 fa       	bst	r15, 7
    5266:	f0 94       	com	r15
    5268:	f7 f8       	bld	r15, 7
    526a:	f0 94       	com	r15
    526c:	cd 82       	std	Y+5, r12	; 0x05
    526e:	de 82       	std	Y+6, r13	; 0x06
    5270:	ef 82       	std	Y+7, r14	; 0x07
    5272:	f8 86       	std	Y+8, r15	; 0x08
    5274:	04 c0       	rjmp	.+8      	; 0x527e <quest+0x78e>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    5276:	8d 82       	std	Y+5, r8	; 0x05
    5278:	9e 82       	std	Y+6, r9	; 0x06
    527a:	af 82       	std	Y+7, r10	; 0x07
    527c:	b8 86       	std	Y+8, r11	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    527e:	80 90 f9 04 	lds	r8, 0x04F9	; 0x8004f9 <Current_state+0x4e>
    5282:	90 90 fa 04 	lds	r9, 0x04FA	; 0x8004fa <Current_state+0x4f>
    5286:	a0 90 fb 04 	lds	r10, 0x04FB	; 0x8004fb <Current_state+0x50>
    528a:	b0 90 fc 04 	lds	r11, 0x04FC	; 0x8004fc <Current_state+0x51>
    528e:	c0 90 fd 04 	lds	r12, 0x04FD	; 0x8004fd <Current_state+0x52>
    5292:	d0 90 fe 04 	lds	r13, 0x04FE	; 0x8004fe <Current_state+0x53>
    5296:	e0 90 ff 04 	lds	r14, 0x04FF	; 0x8004ff <Current_state+0x54>
    529a:	f0 90 00 05 	lds	r15, 0x0500	; 0x800500 <Current_state+0x55>
    529e:	a7 01       	movw	r20, r14
    52a0:	96 01       	movw	r18, r12
    52a2:	c5 01       	movw	r24, r10
    52a4:	b4 01       	movw	r22, r8
    52a6:	0e 94 36 34 	call	0x686c	; 0x686c <__gesf2>
    52aa:	18 16       	cp	r1, r24
    52ac:	0c f4       	brge	.+2      	; 0x52b0 <quest+0x7c0>
    52ae:	91 cc       	rjmp	.-1758   	; 0x4bd2 <quest+0xe2>
    52b0:	95 cc       	rjmp	.-1750   	; 0x4bdc <quest+0xec>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    52b2:	e8 96       	adiw	r28, 0x38	; 56
    52b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    52b6:	e8 97       	sbiw	r28, 0x38	; 56
    52b8:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <light_prev.2044>
 
  return light;
   
}
    52bc:	8f 2f       	mov	r24, r31
    52be:	c5 58       	subi	r28, 0x85	; 133
    52c0:	df 4f       	sbci	r29, 0xFF	; 255
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	de bf       	out	0x3e, r29	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	df 91       	pop	r29
    52ce:	cf 91       	pop	r28
    52d0:	1f 91       	pop	r17
    52d2:	0f 91       	pop	r16
    52d4:	ff 90       	pop	r15
    52d6:	ef 90       	pop	r14
    52d8:	df 90       	pop	r13
    52da:	cf 90       	pop	r12
    52dc:	bf 90       	pop	r11
    52de:	af 90       	pop	r10
    52e0:	9f 90       	pop	r9
    52e2:	8f 90       	pop	r8
    52e4:	7f 90       	pop	r7
    52e6:	6f 90       	pop	r6
    52e8:	5f 90       	pop	r5
    52ea:	4f 90       	pop	r4
    52ec:	3f 90       	pop	r3
    52ee:	2f 90       	pop	r2
    52f0:	08 95       	ret

000052f2 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    52f2:	2f 92       	push	r2
    52f4:	3f 92       	push	r3
    52f6:	4f 92       	push	r4
    52f8:	5f 92       	push	r5
    52fa:	6f 92       	push	r6
    52fc:	7f 92       	push	r7
    52fe:	8f 92       	push	r8
    5300:	9f 92       	push	r9
    5302:	af 92       	push	r10
    5304:	bf 92       	push	r11
    5306:	cf 92       	push	r12
    5308:	df 92       	push	r13
    530a:	ef 92       	push	r14
    530c:	ff 92       	push	r15
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
    531a:	c6 5c       	subi	r28, 0xC6	; 198
    531c:	d1 09       	sbc	r29, r1
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    5328:	cd 53       	subi	r28, 0x3D	; 61
    532a:	df 4f       	sbci	r29, 0xFF	; 255
    532c:	88 83       	st	Y, r24
    532e:	c3 5c       	subi	r28, 0xC3	; 195
    5330:	d0 40       	sbci	r29, 0x00	; 0
    5332:	cc 53       	subi	r28, 0x3C	; 60
    5334:	df 4f       	sbci	r29, 0xFF	; 255
    5336:	98 83       	st	Y, r25
    5338:	c4 5c       	subi	r28, 0xC4	; 196
    533a:	d0 40       	sbci	r29, 0x00	; 0
    533c:	cb 53       	subi	r28, 0x3B	; 59
    533e:	df 4f       	sbci	r29, 0xFF	; 255
    5340:	68 83       	st	Y, r22
    5342:	c5 5c       	subi	r28, 0xC5	; 197
    5344:	d0 40       	sbci	r29, 0x00	; 0
    5346:	ca 53       	subi	r28, 0x3A	; 58
    5348:	df 4f       	sbci	r29, 0xFF	; 255
    534a:	78 83       	st	Y, r23
    534c:	c6 5c       	subi	r28, 0xC6	; 198
    534e:	d0 40       	sbci	r29, 0x00	; 0
    5350:	28 2e       	mov	r2, r24
    5352:	39 2e       	mov	r3, r25
    5354:	0a e5       	ldi	r16, 0x5A	; 90
    5356:	14 e0       	ldi	r17, 0x04	; 4
    5358:	ce 01       	movw	r24, r28
    535a:	01 96       	adiw	r24, 0x01	; 1
    535c:	7c 01       	movw	r14, r24
    535e:	de 01       	movw	r26, r28
    5360:	51 96       	adiw	r26, 0x11	; 17
    5362:	cb 54       	subi	r28, 0x4B	; 75
    5364:	df 4f       	sbci	r29, 0xFF	; 255
    5366:	b9 83       	std	Y+1, r27	; 0x01
    5368:	a8 83       	st	Y, r26
    536a:	c5 5b       	subi	r28, 0xB5	; 181
    536c:	d0 40       	sbci	r29, 0x00	; 0
    536e:	0f 2e       	mov	r0, r31
    5370:	fa e6       	ldi	r31, 0x6A	; 106
    5372:	cf 2e       	mov	r12, r31
    5374:	f4 e0       	ldi	r31, 0x04	; 4
    5376:	df 2e       	mov	r13, r31
    5378:	f0 2d       	mov	r31, r0
    537a:	cf 54       	subi	r28, 0x4F	; 79
    537c:	df 4f       	sbci	r29, 0xFF	; 255
    537e:	b9 83       	std	Y+1, r27	; 0x01
    5380:	a8 83       	st	Y, r26
    5382:	c1 5b       	subi	r28, 0xB1	; 177
    5384:	d0 40       	sbci	r29, 0x00	; 0
    5386:	c7 54       	subi	r28, 0x47	; 71
    5388:	df 4f       	sbci	r29, 0xFF	; 255
    538a:	99 83       	std	Y+1, r25	; 0x01
    538c:	88 83       	st	Y, r24
    538e:	c9 5b       	subi	r28, 0xB9	; 185
    5390:	d0 40       	sbci	r29, 0x00	; 0
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    5392:	f1 01       	movw	r30, r2
    5394:	81 90       	ld	r8, Z+
    5396:	91 90       	ld	r9, Z+
    5398:	a1 90       	ld	r10, Z+
    539a:	b1 90       	ld	r11, Z+
    539c:	1f 01       	movw	r2, r30
    539e:	d8 01       	movw	r26, r16
    53a0:	4d 90       	ld	r4, X+
    53a2:	5d 90       	ld	r5, X+
    53a4:	6d 90       	ld	r6, X+
    53a6:	7d 90       	ld	r7, X+
    53a8:	8d 01       	movw	r16, r26
    53aa:	a3 01       	movw	r20, r6
    53ac:	92 01       	movw	r18, r4
    53ae:	c5 01       	movw	r24, r10
    53b0:	b4 01       	movw	r22, r8
    53b2:	64 d7       	rcall	.+3784   	; 0x627c <__subsf3>
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	40 e0       	ldi	r20, 0x00	; 0
    53ba:	5f e3       	ldi	r21, 0x3F	; 63
    53bc:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    53c0:	f7 01       	movw	r30, r14
    53c2:	61 93       	st	Z+, r22
    53c4:	71 93       	st	Z+, r23
    53c6:	81 93       	st	Z+, r24
    53c8:	91 93       	st	Z+, r25
    53ca:	7f 01       	movw	r14, r30
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    53cc:	a3 01       	movw	r20, r6
    53ce:	92 01       	movw	r18, r4
    53d0:	c5 01       	movw	r24, r10
    53d2:	b4 01       	movw	r22, r8
    53d4:	54 d7       	rcall	.+3752   	; 0x627e <__addsf3>
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 e0       	ldi	r20, 0x00	; 0
    53dc:	5f e3       	ldi	r21, 0x3F	; 63
    53de:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    53e2:	cf 54       	subi	r28, 0x4F	; 79
    53e4:	df 4f       	sbci	r29, 0xFF	; 255
    53e6:	a8 81       	ld	r26, Y
    53e8:	b9 81       	ldd	r27, Y+1	; 0x01
    53ea:	c1 5b       	subi	r28, 0xB1	; 177
    53ec:	d0 40       	sbci	r29, 0x00	; 0
    53ee:	6d 93       	st	X+, r22
    53f0:	7d 93       	st	X+, r23
    53f2:	8d 93       	st	X+, r24
    53f4:	9d 93       	st	X+, r25
    53f6:	cf 54       	subi	r28, 0x4F	; 79
    53f8:	df 4f       	sbci	r29, 0xFF	; 255
    53fa:	b9 83       	std	Y+1, r27	; 0x01
    53fc:	a8 83       	st	Y, r26
    53fe:	c1 5b       	subi	r28, 0xB1	; 177
    5400:	d0 40       	sbci	r29, 0x00	; 0
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    5402:	0c 15       	cp	r16, r12
    5404:	1d 05       	cpc	r17, r13
    5406:	29 f6       	brne	.-118    	; 0x5392 <omega_estimation+0xa0>
    5408:	c7 54       	subi	r28, 0x47	; 71
    540a:	df 4f       	sbci	r29, 0xFF	; 255
    540c:	e8 80       	ld	r14, Y
    540e:	f9 80       	ldd	r15, Y+1	; 0x01
    5410:	c9 5b       	subi	r28, 0xB9	; 185
    5412:	d0 40       	sbci	r29, 0x00	; 0
    5414:	de 01       	movw	r26, r28
    5416:	9d 96       	adiw	r26, 0x2d	; 45
    5418:	8e 01       	movw	r16, r28
    541a:	0f 5d       	subi	r16, 0xDF	; 223
    541c:	1f 4f       	sbci	r17, 0xFF	; 255
    541e:	ce 01       	movw	r24, r28
    5420:	0d 96       	adiw	r24, 0x0d	; 13
    5422:	bd 01       	movw	r22, r26
    5424:	98 01       	movw	r18, r16
    5426:	f7 01       	movw	r30, r14
    5428:	cb 54       	subi	r28, 0x4B	; 75
    542a:	df 4f       	sbci	r29, 0xFF	; 255
    542c:	48 81       	ld	r20, Y
    542e:	59 81       	ldd	r21, Y+1	; 0x01
    5430:	c5 5b       	subi	r28, 0xB5	; 181
    5432:	d0 40       	sbci	r29, 0x00	; 0
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    5434:	c1 90       	ld	r12, Z+
    5436:	d1 90       	ld	r13, Z+
    5438:	e1 90       	ld	r14, Z+
    543a:	f1 90       	ld	r15, Z+
    543c:	db 01       	movw	r26, r22
    543e:	cd 92       	st	X+, r12
    5440:	dd 92       	st	X+, r13
    5442:	ed 92       	st	X+, r14
    5444:	fd 92       	st	X+, r15
    5446:	bd 01       	movw	r22, r26
    e[i] = q[i];
    5448:	da 01       	movw	r26, r20
    544a:	cd 90       	ld	r12, X+
    544c:	dd 90       	ld	r13, X+
    544e:	ed 90       	ld	r14, X+
    5450:	fd 90       	ld	r15, X+
    5452:	ad 01       	movw	r20, r26
    5454:	d9 01       	movw	r26, r18
    5456:	cd 92       	st	X+, r12
    5458:	dd 92       	st	X+, r13
    545a:	ed 92       	st	X+, r14
    545c:	fd 92       	st	X+, r15
    545e:	9d 01       	movw	r18, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    5460:	e8 17       	cp	r30, r24
    5462:	f9 07       	cpc	r31, r25
    5464:	39 f7       	brne	.-50     	; 0x5434 <omega_estimation+0x142>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    5466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    546a:	af 8d       	ldd	r26, Y+31	; 0x1f
    546c:	b8 a1       	ldd	r27, Y+32	; 0x20
    546e:	c7 54       	subi	r28, 0x47	; 71
    5470:	df 4f       	sbci	r29, 0xFF	; 255
    5472:	88 83       	st	Y, r24
    5474:	99 83       	std	Y+1, r25	; 0x01
    5476:	aa 83       	std	Y+2, r26	; 0x02
    5478:	bb 83       	std	Y+3, r27	; 0x03
    547a:	c9 5b       	subi	r28, 0xB9	; 185
    547c:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    547e:	ad 96       	adiw	r28, 0x2d	; 45
    5480:	1c ae       	std	Y+60, r1	; 0x3c
    5482:	1d ae       	std	Y+61, r1	; 0x3d
    5484:	1e ae       	std	Y+62, r1	; 0x3e
    5486:	1f ae       	std	Y+63, r1	; 0x3f
    5488:	ad 97       	sbiw	r28, 0x2d	; 45
    548a:	c9 a4       	ldd	r12, Y+41	; 0x29
    548c:	da a4       	ldd	r13, Y+42	; 0x2a
    548e:	eb a4       	ldd	r14, Y+43	; 0x2b
    5490:	fc a4       	ldd	r15, Y+44	; 0x2c
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e0       	ldi	r20, 0x00	; 0
    5498:	50 ec       	ldi	r21, 0xC0	; 192
    549a:	c7 01       	movw	r24, r14
    549c:	b6 01       	movw	r22, r12
    549e:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    54a2:	e1 96       	adiw	r28, 0x31	; 49
    54a4:	6c af       	std	Y+60, r22	; 0x3c
    54a6:	7d af       	std	Y+61, r23	; 0x3d
    54a8:	8e af       	std	Y+62, r24	; 0x3e
    54aa:	9f af       	std	Y+63, r25	; 0x3f
    54ac:	e1 97       	sbiw	r28, 0x31	; 49
    54ae:	8d a0       	ldd	r8, Y+37	; 0x25
    54b0:	9e a0       	ldd	r9, Y+38	; 0x26
    54b2:	af a0       	ldd	r10, Y+39	; 0x27
    54b4:	b8 a4       	ldd	r11, Y+40	; 0x28
    54b6:	a5 01       	movw	r20, r10
    54b8:	94 01       	movw	r18, r8
    54ba:	c5 01       	movw	r24, r10
    54bc:	b4 01       	movw	r22, r8
    54be:	df d6       	rcall	.+3518   	; 0x627e <__addsf3>
    54c0:	e5 96       	adiw	r28, 0x35	; 53
    54c2:	6c af       	std	Y+60, r22	; 0x3c
    54c4:	7d af       	std	Y+61, r23	; 0x3d
    54c6:	8e af       	std	Y+62, r24	; 0x3e
    54c8:	9f af       	std	Y+63, r25	; 0x3f
    54ca:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    54cc:	a7 01       	movw	r20, r14
    54ce:	96 01       	movw	r18, r12
    54d0:	c7 01       	movw	r24, r14
    54d2:	b6 01       	movw	r22, r12
    54d4:	d4 d6       	rcall	.+3496   	; 0x627e <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    54d6:	e9 96       	adiw	r28, 0x39	; 57
    54d8:	6c af       	std	Y+60, r22	; 0x3c
    54da:	7d af       	std	Y+61, r23	; 0x3d
    54dc:	8e af       	std	Y+62, r24	; 0x3e
    54de:	9f af       	std	Y+63, r25	; 0x3f
    54e0:	e9 97       	sbiw	r28, 0x39	; 57
    54e2:	ed 96       	adiw	r28, 0x3d	; 61
    54e4:	1c ae       	std	Y+60, r1	; 0x3c
    54e6:	1d ae       	std	Y+61, r1	; 0x3d
    54e8:	1e ae       	std	Y+62, r1	; 0x3e
    54ea:	1f ae       	std	Y+63, r1	; 0x3f
    54ec:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    54ee:	c9 a0       	ldd	r12, Y+33	; 0x21
    54f0:	da a0       	ldd	r13, Y+34	; 0x22
    54f2:	eb a0       	ldd	r14, Y+35	; 0x23
    54f4:	fc a0       	ldd	r15, Y+36	; 0x24
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	40 e0       	ldi	r20, 0x00	; 0
    54fc:	50 ec       	ldi	r21, 0xC0	; 192
    54fe:	c7 01       	movw	r24, r14
    5500:	b6 01       	movw	r22, r12
    5502:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5506:	c3 58       	subi	r28, 0x83	; 131
    5508:	df 4f       	sbci	r29, 0xFF	; 255
    550a:	68 83       	st	Y, r22
    550c:	79 83       	std	Y+1, r23	; 0x01
    550e:	8a 83       	std	Y+2, r24	; 0x02
    5510:	9b 83       	std	Y+3, r25	; 0x03
    5512:	cd 57       	subi	r28, 0x7D	; 125
    5514:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5516:	20 e0       	ldi	r18, 0x00	; 0
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	40 e0       	ldi	r20, 0x00	; 0
    551c:	50 ec       	ldi	r21, 0xC0	; 192
    551e:	c5 01       	movw	r24, r10
    5520:	b4 01       	movw	r22, r8
    5522:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5526:	cf 57       	subi	r28, 0x7F	; 127
    5528:	df 4f       	sbci	r29, 0xFF	; 255
    552a:	68 83       	st	Y, r22
    552c:	79 83       	std	Y+1, r23	; 0x01
    552e:	8a 83       	std	Y+2, r24	; 0x02
    5530:	9b 83       	std	Y+3, r25	; 0x03
    5532:	c1 58       	subi	r28, 0x81	; 129
    5534:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5536:	a7 01       	movw	r20, r14
    5538:	96 01       	movw	r18, r12
    553a:	c7 01       	movw	r24, r14
    553c:	b6 01       	movw	r22, r12
    553e:	9f d6       	rcall	.+3390   	; 0x627e <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5540:	cb 57       	subi	r28, 0x7B	; 123
    5542:	df 4f       	sbci	r29, 0xFF	; 255
    5544:	68 83       	st	Y, r22
    5546:	79 83       	std	Y+1, r23	; 0x01
    5548:	8a 83       	std	Y+2, r24	; 0x02
    554a:	9b 83       	std	Y+3, r25	; 0x03
    554c:	c5 58       	subi	r28, 0x85	; 133
    554e:	d0 40       	sbci	r29, 0x00	; 0
    5550:	c7 57       	subi	r28, 0x77	; 119
    5552:	df 4f       	sbci	r29, 0xFF	; 255
    5554:	18 82       	st	Y, r1
    5556:	19 82       	std	Y+1, r1	; 0x01
    5558:	1a 82       	std	Y+2, r1	; 0x02
    555a:	1b 82       	std	Y+3, r1	; 0x03
    555c:	c9 58       	subi	r28, 0x89	; 137
    555e:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    5560:	c7 54       	subi	r28, 0x47	; 71
    5562:	df 4f       	sbci	r29, 0xFF	; 255
    5564:	28 81       	ld	r18, Y
    5566:	39 81       	ldd	r19, Y+1	; 0x01
    5568:	4a 81       	ldd	r20, Y+2	; 0x02
    556a:	5b 81       	ldd	r21, Y+3	; 0x03
    556c:	c9 5b       	subi	r28, 0xB9	; 185
    556e:	d0 40       	sbci	r29, 0x00	; 0
    5570:	ca 01       	movw	r24, r20
    5572:	b9 01       	movw	r22, r18
    5574:	84 d6       	rcall	.+3336   	; 0x627e <__addsf3>
    5576:	c3 57       	subi	r28, 0x73	; 115
    5578:	df 4f       	sbci	r29, 0xFF	; 255
    557a:	68 83       	st	Y, r22
    557c:	79 83       	std	Y+1, r23	; 0x01
    557e:	8a 83       	std	Y+2, r24	; 0x02
    5580:	9b 83       	std	Y+3, r25	; 0x03
    5582:	cd 58       	subi	r28, 0x8D	; 141
    5584:	d0 40       	sbci	r29, 0x00	; 0
    5586:	cf 56       	subi	r28, 0x6F	; 111
    5588:	df 4f       	sbci	r29, 0xFF	; 255
    558a:	18 82       	st	Y, r1
    558c:	19 82       	std	Y+1, r1	; 0x01
    558e:	1a 82       	std	Y+2, r1	; 0x02
    5590:	1b 82       	std	Y+3, r1	; 0x03
    5592:	c1 59       	subi	r28, 0x91	; 145
    5594:	d0 40       	sbci	r29, 0x00	; 0
    5596:	cb 56       	subi	r28, 0x6B	; 107
    5598:	df 4f       	sbci	r29, 0xFF	; 255
    559a:	18 82       	st	Y, r1
    559c:	19 82       	std	Y+1, r1	; 0x01
    559e:	1a 82       	std	Y+2, r1	; 0x02
    55a0:	1b 82       	std	Y+3, r1	; 0x03
    55a2:	c5 59       	subi	r28, 0x95	; 149
    55a4:	d0 40       	sbci	r29, 0x00	; 0
    55a6:	c7 56       	subi	r28, 0x67	; 103
    55a8:	df 4f       	sbci	r29, 0xFF	; 255
    55aa:	18 82       	st	Y, r1
    55ac:	19 82       	std	Y+1, r1	; 0x01
    55ae:	1a 82       	std	Y+2, r1	; 0x02
    55b0:	1b 82       	std	Y+3, r1	; 0x03
    55b2:	c9 59       	subi	r28, 0x99	; 153
    55b4:	d0 40       	sbci	r29, 0x00	; 0
    55b6:	c3 56       	subi	r28, 0x63	; 99
    55b8:	df 4f       	sbci	r29, 0xFF	; 255
    55ba:	68 83       	st	Y, r22
    55bc:	79 83       	std	Y+1, r23	; 0x01
    55be:	8a 83       	std	Y+2, r24	; 0x02
    55c0:	9b 83       	std	Y+3, r25	; 0x03
    55c2:	cd 59       	subi	r28, 0x9D	; 157
    55c4:	d0 40       	sbci	r29, 0x00	; 0
    55c6:	cf 55       	subi	r28, 0x5F	; 95
    55c8:	df 4f       	sbci	r29, 0xFF	; 255
    55ca:	18 82       	st	Y, r1
    55cc:	19 82       	std	Y+1, r1	; 0x01
    55ce:	1a 82       	std	Y+2, r1	; 0x02
    55d0:	1b 82       	std	Y+3, r1	; 0x03
    55d2:	c1 5a       	subi	r28, 0xA1	; 161
    55d4:	d0 40       	sbci	r29, 0x00	; 0
    55d6:	cb 55       	subi	r28, 0x5B	; 91
    55d8:	df 4f       	sbci	r29, 0xFF	; 255
    55da:	18 82       	st	Y, r1
    55dc:	19 82       	std	Y+1, r1	; 0x01
    55de:	1a 82       	std	Y+2, r1	; 0x02
    55e0:	1b 82       	std	Y+3, r1	; 0x03
    55e2:	c5 5a       	subi	r28, 0xA5	; 165
    55e4:	d0 40       	sbci	r29, 0x00	; 0
    55e6:	c7 55       	subi	r28, 0x57	; 87
    55e8:	df 4f       	sbci	r29, 0xFF	; 255
    55ea:	18 82       	st	Y, r1
    55ec:	19 82       	std	Y+1, r1	; 0x01
    55ee:	1a 82       	std	Y+2, r1	; 0x02
    55f0:	1b 82       	std	Y+3, r1	; 0x03
    55f2:	c9 5a       	subi	r28, 0xA9	; 169
    55f4:	d0 40       	sbci	r29, 0x00	; 0
    55f6:	c3 55       	subi	r28, 0x53	; 83
    55f8:	df 4f       	sbci	r29, 0xFF	; 255
    55fa:	68 83       	st	Y, r22
    55fc:	79 83       	std	Y+1, r23	; 0x01
    55fe:	8a 83       	std	Y+2, r24	; 0x02
    5600:	9b 83       	std	Y+3, r25	; 0x03
    5602:	cd 5a       	subi	r28, 0xAD	; 173
    5604:	d0 40       	sbci	r29, 0x00	; 0
    5606:	3e 01       	movw	r6, r28
    5608:	95 e4       	ldi	r25, 0x45	; 69
    560a:	69 0e       	add	r6, r25
    560c:	71 1c       	adc	r7, r1
    560e:	c3 54       	subi	r28, 0x43	; 67
    5610:	df 4f       	sbci	r29, 0xFF	; 255
    5612:	19 83       	std	Y+1, r17	; 0x01
    5614:	08 83       	st	Y, r16
    5616:	cd 5b       	subi	r28, 0xBD	; 189
    5618:	d0 40       	sbci	r29, 0x00	; 0
    561a:	81 2c       	mov	r8, r1
    561c:	91 2c       	mov	r9, r1
    561e:	5e 01       	movw	r10, r28
    5620:	ad e2       	ldi	r26, 0x2D	; 45
    5622:	aa 0e       	add	r10, r26
    5624:	b1 1c       	adc	r11, r1
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    5626:	cf 53       	subi	r28, 0x3F	; 63
    5628:	df 4f       	sbci	r29, 0xFF	; 255
    562a:	08 83       	st	Y, r16
    562c:	c1 5c       	subi	r28, 0xC1	; 193
    562e:	d0 40       	sbci	r29, 0x00	; 0
    5630:	ce 53       	subi	r28, 0x3E	; 62
    5632:	df 4f       	sbci	r29, 0xFF	; 255
    5634:	18 83       	st	Y, r17
    5636:	c2 5c       	subi	r28, 0xC2	; 194
    5638:	d0 40       	sbci	r29, 0x00	; 0
    563a:	59 c0       	rjmp	.+178    	; 0x56ee <omega_estimation+0x3fc>
    563c:	f1 01       	movw	r30, r2
    563e:	61 91       	ld	r22, Z+
    5640:	71 91       	ld	r23, Z+
    5642:	81 91       	ld	r24, Z+
    5644:	91 91       	ld	r25, Z+
    5646:	1f 01       	movw	r2, r30
    5648:	d6 01       	movw	r26, r12
    564a:	2d 91       	ld	r18, X+
    564c:	3d 91       	ld	r19, X+
    564e:	4d 91       	ld	r20, X+
    5650:	5d 91       	ld	r21, X+
    5652:	6d 01       	movw	r12, r26
    5654:	f2 01       	movw	r30, r4
    5656:	61 90       	ld	r6, Z+
    5658:	71 90       	ld	r7, Z+
    565a:	81 90       	ld	r8, Z+
    565c:	91 90       	ld	r9, Z+
    565e:	2f 01       	movw	r4, r30
    5660:	0d d6       	rcall	.+3098   	; 0x627c <__subsf3>
    5662:	cf 54       	subi	r28, 0x4F	; 79
    5664:	df 4f       	sbci	r29, 0xFF	; 255
    5666:	68 83       	st	Y, r22
    5668:	79 83       	std	Y+1, r23	; 0x01
    566a:	8a 83       	std	Y+2, r24	; 0x02
    566c:	9b 83       	std	Y+3, r25	; 0x03
    566e:	c1 5b       	subi	r28, 0xB1	; 177
    5670:	d0 40       	sbci	r29, 0x00	; 0
    5672:	a4 01       	movw	r20, r8
    5674:	93 01       	movw	r18, r6
    5676:	cb 54       	subi	r28, 0x4B	; 75
    5678:	df 4f       	sbci	r29, 0xFF	; 255
    567a:	68 81       	ld	r22, Y
    567c:	79 81       	ldd	r23, Y+1	; 0x01
    567e:	8a 81       	ldd	r24, Y+2	; 0x02
    5680:	9b 81       	ldd	r25, Y+3	; 0x03
    5682:	c5 5b       	subi	r28, 0xB5	; 181
    5684:	d0 40       	sbci	r29, 0x00	; 0
    5686:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    568a:	c7 54       	subi	r28, 0x47	; 71
    568c:	df 4f       	sbci	r29, 0xFF	; 255
    568e:	28 81       	ld	r18, Y
    5690:	39 81       	ldd	r19, Y+1	; 0x01
    5692:	4a 81       	ldd	r20, Y+2	; 0x02
    5694:	5b 81       	ldd	r21, Y+3	; 0x03
    5696:	c9 5b       	subi	r28, 0xB9	; 185
    5698:	d0 40       	sbci	r29, 0x00	; 0
    569a:	d5 d6       	rcall	.+3498   	; 0x6446 <__divsf3>
    569c:	9b 01       	movw	r18, r22
    569e:	ac 01       	movw	r20, r24
    56a0:	cf 54       	subi	r28, 0x4F	; 79
    56a2:	df 4f       	sbci	r29, 0xFF	; 255
    56a4:	68 81       	ld	r22, Y
    56a6:	79 81       	ldd	r23, Y+1	; 0x01
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	9b 81       	ldd	r25, Y+3	; 0x03
    56ac:	c1 5b       	subi	r28, 0xB1	; 177
    56ae:	d0 40       	sbci	r29, 0x00	; 0
    56b0:	e6 d5       	rcall	.+3020   	; 0x627e <__addsf3>
    56b2:	d8 01       	movw	r26, r16
    56b4:	6d 93       	st	X+, r22
    56b6:	7d 93       	st	X+, r23
    56b8:	8d 93       	st	X+, r24
    56ba:	9c 93       	st	X, r25
    56bc:	13 97       	sbiw	r26, 0x03	; 3
    56be:	04 5f       	subi	r16, 0xF4	; 244
    56c0:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    56c2:	4a 14       	cp	r4, r10
    56c4:	5b 04       	cpc	r5, r11
    56c6:	09 f0       	breq	.+2      	; 0x56ca <omega_estimation+0x3d8>
    56c8:	b9 cf       	rjmp	.-142    	; 0x563c <omega_estimation+0x34a>
    56ca:	47 01       	movw	r8, r14
    56cc:	c1 54       	subi	r28, 0x41	; 65
    56ce:	df 4f       	sbci	r29, 0xFF	; 255
    56d0:	68 80       	ld	r6, Y
    56d2:	79 80       	ldd	r7, Y+1	; 0x01
    56d4:	cf 5b       	subi	r28, 0xBF	; 191
    56d6:	d0 40       	sbci	r29, 0x00	; 0
    56d8:	bc e0       	ldi	r27, 0x0C	; 12
    56da:	8b 0e       	add	r8, r27
    56dc:	91 1c       	adc	r9, r1
    56de:	e4 e0       	ldi	r30, 0x04	; 4
    56e0:	6e 0e       	add	r6, r30
    56e2:	71 1c       	adc	r7, r1
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    56e4:	f4 e2       	ldi	r31, 0x24	; 36
    56e6:	8f 16       	cp	r8, r31
    56e8:	91 04       	cpc	r9, r1
    56ea:	09 f4       	brne	.+2      	; 0x56ee <omega_estimation+0x3fc>
    56ec:	40 c0       	rjmp	.+128    	; 0x576e <omega_estimation+0x47c>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    56ee:	c3 54       	subi	r28, 0x43	; 67
    56f0:	df 4f       	sbci	r29, 0xFF	; 255
    56f2:	a8 81       	ld	r26, Y
    56f4:	b9 81       	ldd	r27, Y+1	; 0x01
    56f6:	cd 5b       	subi	r28, 0xBD	; 189
    56f8:	d0 40       	sbci	r29, 0x00	; 0
    56fa:	6d 91       	ld	r22, X+
    56fc:	7d 91       	ld	r23, X+
    56fe:	8d 91       	ld	r24, X+
    5700:	9d 91       	ld	r25, X+
    5702:	c3 54       	subi	r28, 0x43	; 67
    5704:	df 4f       	sbci	r29, 0xFF	; 255
    5706:	b9 83       	std	Y+1, r27	; 0x01
    5708:	a8 83       	st	Y, r26
    570a:	cd 5b       	subi	r28, 0xBD	; 189
    570c:	d0 40       	sbci	r29, 0x00	; 0
    570e:	9b 01       	movw	r18, r22
    5710:	ac 01       	movw	r20, r24
    5712:	b5 d5       	rcall	.+2922   	; 0x627e <__addsf3>
    5714:	cb 54       	subi	r28, 0x4B	; 75
    5716:	df 4f       	sbci	r29, 0xFF	; 255
    5718:	68 83       	st	Y, r22
    571a:	79 83       	std	Y+1, r23	; 0x01
    571c:	8a 83       	std	Y+2, r24	; 0x02
    571e:	9b 83       	std	Y+3, r25	; 0x03
    5720:	c5 5b       	subi	r28, 0xB5	; 181
    5722:	d0 40       	sbci	r29, 0x00	; 0
    5724:	0f 2e       	mov	r0, r31
    5726:	fd e8       	ldi	r31, 0x8D	; 141
    5728:	2f 2e       	mov	r2, r31
    572a:	31 2c       	mov	r3, r1
    572c:	f0 2d       	mov	r31, r0
    572e:	2c 0e       	add	r2, r28
    5730:	3d 1e       	adc	r3, r29
    5732:	28 0c       	add	r2, r8
    5734:	39 1c       	adc	r3, r9
    5736:	0f 2e       	mov	r0, r31
    5738:	f9 e6       	ldi	r31, 0x69	; 105
    573a:	cf 2e       	mov	r12, r31
    573c:	d1 2c       	mov	r13, r1
    573e:	f0 2d       	mov	r31, r0
    5740:	cc 0e       	add	r12, r28
    5742:	dd 1e       	adc	r13, r29
    5744:	c8 0c       	add	r12, r8
    5746:	d9 1c       	adc	r13, r9
    5748:	83 01       	movw	r16, r6
    574a:	cf 53       	subi	r28, 0x3F	; 63
    574c:	df 4f       	sbci	r29, 0xFF	; 255
    574e:	48 80       	ld	r4, Y
    5750:	c1 5c       	subi	r28, 0xC1	; 193
    5752:	d0 40       	sbci	r29, 0x00	; 0
    5754:	ce 53       	subi	r28, 0x3E	; 62
    5756:	df 4f       	sbci	r29, 0xFF	; 255
    5758:	58 80       	ld	r5, Y
    575a:	c2 5c       	subi	r28, 0xC2	; 194
    575c:	d0 40       	sbci	r29, 0x00	; 0
    575e:	74 01       	movw	r14, r8
    5760:	c1 54       	subi	r28, 0x41	; 65
    5762:	df 4f       	sbci	r29, 0xFF	; 255
    5764:	79 82       	std	Y+1, r7	; 0x01
    5766:	68 82       	st	Y, r6
    5768:	cf 5b       	subi	r28, 0xBF	; 191
    576a:	d0 40       	sbci	r29, 0x00	; 0
    576c:	67 cf       	rjmp	.-306    	; 0x563c <omega_estimation+0x34a>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    576e:	ae 01       	movw	r20, r28
    5770:	47 5c       	subi	r20, 0xC7	; 199
    5772:	5f 4f       	sbci	r21, 0xFF	; 255
    5774:	be 01       	movw	r22, r28
    5776:	6b 5b       	subi	r22, 0xBB	; 187
    5778:	7f 4f       	sbci	r23, 0xFF	; 255
    577a:	ce 01       	movw	r24, r28
    577c:	8d 96       	adiw	r24, 0x2d	; 45
    577e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <vector_into_matrix>
    5782:	8e 01       	movw	r16, r28
    5784:	07 5c       	subi	r16, 0xC7	; 199
    5786:	1f 4f       	sbci	r17, 0xFF	; 255
    5788:	0f 2e       	mov	r0, r31
    578a:	fe e4       	ldi	r31, 0x4E	; 78
    578c:	cf 2e       	mov	r12, r31
    578e:	f4 e0       	ldi	r31, 0x04	; 4
    5790:	df 2e       	mov	r13, r31
    5792:	f0 2d       	mov	r31, r0
    5794:	cb 53       	subi	r28, 0x3B	; 59
    5796:	df 4f       	sbci	r29, 0xFF	; 255
    5798:	28 80       	ld	r2, Y
    579a:	c5 5c       	subi	r28, 0xC5	; 197
    579c:	d0 40       	sbci	r29, 0x00	; 0
    579e:	ca 53       	subi	r28, 0x3A	; 58
    57a0:	df 4f       	sbci	r29, 0xFF	; 255
    57a2:	38 80       	ld	r3, Y
    57a4:	c6 5c       	subi	r28, 0xC6	; 198
    57a6:	d0 40       	sbci	r29, 0x00	; 0
    57a8:	78 01       	movw	r14, r16
    57aa:	bc e0       	ldi	r27, 0x0C	; 12
    57ac:	eb 0e       	add	r14, r27
    57ae:	f1 1c       	adc	r15, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    57b0:	f8 01       	movw	r30, r16
    57b2:	61 91       	ld	r22, Z+
    57b4:	71 91       	ld	r23, Z+
    57b6:	81 91       	ld	r24, Z+
    57b8:	91 91       	ld	r25, Z+
    57ba:	8f 01       	movw	r16, r30
    57bc:	d6 01       	movw	r26, r12
    57be:	4d 90       	ld	r4, X+
    57c0:	5d 90       	ld	r5, X+
    57c2:	6d 90       	ld	r6, X+
    57c4:	7d 90       	ld	r7, X+
    57c6:	6d 01       	movw	r12, r26
    57c8:	28 e0       	ldi	r18, 0x08	; 8
    57ca:	31 e2       	ldi	r19, 0x21	; 33
    57cc:	44 e0       	ldi	r20, 0x04	; 4
    57ce:	5d e3       	ldi	r21, 0x3D	; 61
    57d0:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    57d4:	4b 01       	movw	r8, r22
    57d6:	5c 01       	movw	r10, r24
    57d8:	20 ef       	ldi	r18, 0xF0	; 240
    57da:	3d eb       	ldi	r19, 0xBD	; 189
    57dc:	47 e7       	ldi	r20, 0x77	; 119
    57de:	5f e3       	ldi	r21, 0x3F	; 63
    57e0:	c3 01       	movw	r24, r6
    57e2:	b2 01       	movw	r22, r4
    57e4:	0e 94 41 34 	call	0x6882	; 0x6882 <__mulsf3>
    57e8:	9b 01       	movw	r18, r22
    57ea:	ac 01       	movw	r20, r24
    57ec:	c5 01       	movw	r24, r10
    57ee:	b4 01       	movw	r22, r8
    57f0:	46 d5       	rcall	.+2700   	; 0x627e <__addsf3>
    57f2:	f1 01       	movw	r30, r2
    57f4:	61 93       	st	Z+, r22
    57f6:	71 93       	st	Z+, r23
    57f8:	81 93       	st	Z+, r24
    57fa:	91 93       	st	Z+, r25
    57fc:	1f 01       	movw	r2, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    57fe:	0e 15       	cp	r16, r14
    5800:	1f 05       	cpc	r17, r15
    5802:	b1 f6       	brne	.-84     	; 0x57b0 <omega_estimation+0x4be>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    5804:	6a e5       	ldi	r22, 0x5A	; 90
    5806:	74 e0       	ldi	r23, 0x04	; 4
    5808:	cd 53       	subi	r28, 0x3D	; 61
    580a:	df 4f       	sbci	r29, 0xFF	; 255
    580c:	88 81       	ld	r24, Y
    580e:	c3 5c       	subi	r28, 0xC3	; 195
    5810:	d0 40       	sbci	r29, 0x00	; 0
    5812:	cc 53       	subi	r28, 0x3C	; 60
    5814:	df 4f       	sbci	r29, 0xFF	; 255
    5816:	98 81       	ld	r25, Y
    5818:	c4 5c       	subi	r28, 0xC4	; 196
    581a:	d0 40       	sbci	r29, 0x00	; 0
    581c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    5820:	6e e4       	ldi	r22, 0x4E	; 78
    5822:	74 e0       	ldi	r23, 0x04	; 4
    5824:	cb 53       	subi	r28, 0x3B	; 59
    5826:	df 4f       	sbci	r29, 0xFF	; 255
    5828:	88 81       	ld	r24, Y
    582a:	c5 5c       	subi	r28, 0xC5	; 197
    582c:	d0 40       	sbci	r29, 0x00	; 0
    582e:	ca 53       	subi	r28, 0x3A	; 58
    5830:	df 4f       	sbci	r29, 0xFF	; 255
    5832:	98 81       	ld	r25, Y
    5834:	c6 5c       	subi	r28, 0xC6	; 198
    5836:	d0 40       	sbci	r29, 0x00	; 0
    5838:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    583c:	ca 53       	subi	r28, 0x3A	; 58
    583e:	df 4f       	sbci	r29, 0xFF	; 255
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	de bf       	out	0x3e, r29	; 62
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	cd bf       	out	0x3d, r28	; 61
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	1f 91       	pop	r17
    5850:	0f 91       	pop	r16
    5852:	ff 90       	pop	r15
    5854:	ef 90       	pop	r14
    5856:	df 90       	pop	r13
    5858:	cf 90       	pop	r12
    585a:	bf 90       	pop	r11
    585c:	af 90       	pop	r10
    585e:	9f 90       	pop	r9
    5860:	8f 90       	pop	r8
    5862:	7f 90       	pop	r7
    5864:	6f 90       	pop	r6
    5866:	5f 90       	pop	r5
    5868:	4f 90       	pop	r4
    586a:	3f 90       	pop	r3
    586c:	2f 90       	pop	r2
    586e:	08 95       	ret

00005870 <init_SPI>:
}

void init_SPI(void)
{
	///Set MOSI and SCK output, all others input
	DDRB = 0;
    5870:	17 ba       	out	0x17, r1	; 23
	DDRB = _BV(SPICLK) | _BV(SPIDO);
    5872:	86 e0       	ldi	r24, 0x06	; 6
    5874:	87 bb       	out	0x17, r24	; 23
	
	
	DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5876:	87 b3       	in	r24, 0x17	; 23
    5878:	81 63       	ori	r24, 0x31	; 49
    587a:	87 bb       	out	0x17, r24	; 23
	///Switch off all devices
	PORT_CS |= _BV(CC1020) | _BV(ADC_S);
    587c:	88 b3       	in	r24, 0x18	; 24
    587e:	80 63       	ori	r24, 0x30	; 48
    5880:	88 bb       	out	0x18, r24	; 24
	
	PORTB&= ~(1<<PB0);
    5882:	c0 98       	cbi	0x18, 0	; 24
	///Enable SPI, Master, set clock rate
	///@todo Check frequency
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);
    5884:	8f e5       	ldi	r24, 0x5F	; 95
    5886:	8d b9       	out	0x0d, r24	; 13
    5888:	08 95       	ret

0000588a <poll_SS1>:
}

// for oils purpose
	
void poll_SS1(void)
{
    588a:	cf 92       	push	r12
    588c:	df 92       	push	r13
    588e:	ef 92       	push	r14
    5890:	ff 92       	push	r15
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	cf 93       	push	r28
    5898:	df 93       	push	r29
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    589e:	2c 97       	sbiw	r28, 0x0c	; 12
    58a0:	0f b6       	in	r0, 0x3f	; 63
    58a2:	f8 94       	cli
    58a4:	de bf       	out	0x3e, r29	; 62
    58a6:	0f be       	out	0x3f, r0	; 63
    58a8:	cd bf       	out	0x3d, r28	; 61
    58aa:	6e 01       	movw	r12, r28
    58ac:	82 e0       	ldi	r24, 0x02	; 2
    58ae:	c8 0e       	add	r12, r24
    58b0:	d1 1c       	adc	r13, r1
    58b2:	e1 2c       	mov	r14, r1
    58b4:	f1 2c       	mov	r15, r1
  //transmit_UART0(c);
  uint8_t sun_sen_anant[12];
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    58b6:	9d d0       	rcall	.+314    	; 0x59f2 <receive_UART0>
    58b8:	87 01       	movw	r16, r14
    58ba:	00 0f       	add	r16, r16
    58bc:	11 1f       	adc	r17, r17
    58be:	03 52       	subi	r16, 0x23	; 35
    58c0:	1b 4f       	sbci	r17, 0xFB	; 251
    58c2:	f8 01       	movw	r30, r16
    58c4:	91 83       	std	Z+1, r25	; 0x01
    58c6:	80 83       	st	Z, r24
	sun_sen_anant[2*channel] = (uint8_t)(Current_state.ss.reading[channel]);
    58c8:	80 81       	ld	r24, Z
    58ca:	91 81       	ldd	r25, Z+1	; 0x01
    58cc:	f6 01       	movw	r30, r12
    58ce:	31 97       	sbiw	r30, 0x01	; 1
    58d0:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    58d2:	f8 01       	movw	r30, r16
    58d4:	80 81       	ld	r24, Z
    58d6:	91 81       	ldd	r25, Z+1	; 0x01
    58d8:	98 2f       	mov	r25, r24
    58da:	88 27       	eor	r24, r24
    58dc:	91 83       	std	Z+1, r25	; 0x01
    58de:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] &= 0xFF00;
    58e0:	80 81       	ld	r24, Z
    58e2:	91 81       	ldd	r25, Z+1	; 0x01
    58e4:	88 27       	eor	r24, r24
    58e6:	91 83       	std	Z+1, r25	; 0x01
    58e8:	80 83       	st	Z, r24
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    58ea:	83 d0       	rcall	.+262    	; 0x59f2 <receive_UART0>
    58ec:	f8 01       	movw	r30, r16
    58ee:	20 81       	ld	r18, Z
    58f0:	31 81       	ldd	r19, Z+1	; 0x01
    58f2:	82 2b       	or	r24, r18
    58f4:	93 2b       	or	r25, r19
    58f6:	91 83       	std	Z+1, r25	; 0x01
    58f8:	80 83       	st	Z, r24
	sun_sen_anant[2*channel + 1] = (uint8_t)(Current_state.ss.reading[channel]);
    58fa:	80 81       	ld	r24, Z
    58fc:	91 81       	ldd	r25, Z+1	; 0x01
    58fe:	f6 01       	movw	r30, r12
    5900:	80 83       	st	Z, r24
    5902:	ff ef       	ldi	r31, 0xFF	; 255
    5904:	ef 1a       	sub	r14, r31
    5906:	ff 0a       	sbc	r15, r31
    5908:	82 e0       	ldi	r24, 0x02	; 2
    590a:	c8 0e       	add	r12, r24
    590c:	d1 1c       	adc	r13, r1
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
  uint8_t sun_sen_anant[12];
  while(channel <= 5)
    590e:	e6 e0       	ldi	r30, 0x06	; 6
    5910:	ee 16       	cp	r14, r30
    5912:	f1 04       	cpc	r15, r1
    5914:	81 f6       	brne	.-96     	; 0x58b6 <poll_SS1+0x2c>
    5916:	00 e0       	ldi	r16, 0x00	; 0
    5918:	10 e0       	ldi	r17, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
    591a:	f8 01       	movw	r30, r16
    591c:	ee 0f       	add	r30, r30
    591e:	ff 1f       	adc	r31, r31
    5920:	e3 52       	subi	r30, 0x23	; 35
    5922:	fb 4f       	sbci	r31, 0xFB	; 251
    5924:	60 81       	ld	r22, Z
    5926:	71 81       	ldd	r23, Z+1	; 0x01
    5928:	80 e0       	ldi	r24, 0x00	; 0
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	25 d6       	rcall	.+3146   	; 0x6578 <__floatunsisf>
    592e:	23 e3       	ldi	r18, 0x33	; 51
    5930:	33 e3       	ldi	r19, 0x33	; 51
    5932:	43 e5       	ldi	r20, 0x53	; 83
    5934:	50 e4       	ldi	r21, 0x40	; 64
    5936:	a5 d7       	rcall	.+3914   	; 0x6882 <__mulsf3>
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	40 e8       	ldi	r20, 0x80	; 128
    593e:	5a e3       	ldi	r21, 0x3A	; 58
    5940:	a0 d7       	rcall	.+3904   	; 0x6882 <__mulsf3>
    5942:	f8 01       	movw	r30, r16
    5944:	ee 0f       	add	r30, r30
    5946:	ff 1f       	adc	r31, r31
    5948:	ee 0f       	add	r30, r30
    594a:	ff 1f       	adc	r31, r31
    594c:	e9 54       	subi	r30, 0x49	; 73
    594e:	fb 4f       	sbci	r31, 0xFB	; 251
    5950:	62 ab       	std	Z+50, r22	; 0x32
    5952:	73 ab       	std	Z+51, r23	; 0x33
    5954:	84 ab       	std	Z+52, r24	; 0x34
    5956:	95 ab       	std	Z+53, r25	; 0x35
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
	sun_sen_anant[2*channel + 1] = (uint8_t)(Current_state.ss.reading[channel]);
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    5958:	0f 5f       	subi	r16, 0xFF	; 255
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
    595c:	06 30       	cpi	r16, 0x06	; 6
    595e:	11 05       	cpc	r17, r1
    5960:	e1 f6       	brne	.-72     	; 0x591a <poll_SS1+0x90>
    5962:	8e 01       	movw	r16, r28
    5964:	0f 5f       	subi	r16, 0xFF	; 255
    5966:	1f 4f       	sbci	r17, 0xFF	; 255
    5968:	7e 01       	movw	r14, r28
    596a:	fd e0       	ldi	r31, 0x0D	; 13
    596c:	ef 0e       	add	r14, r31
    596e:	f1 1c       	adc	r15, r1
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
  }
  
  for (int iter = 0; iter<12; iter++){
	  transmit_UART0(sun_sen_anant[iter]);
    5970:	f8 01       	movw	r30, r16
    5972:	81 91       	ld	r24, Z+
    5974:	8f 01       	movw	r16, r30
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	38 d0       	rcall	.+112    	; 0x59ea <transmit_UART0>
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
  }
  
  for (int iter = 0; iter<12; iter++){
    597a:	0e 15       	cp	r16, r14
    597c:	1f 05       	cpc	r17, r15
    597e:	c1 f7       	brne	.-16     	; 0x5970 <poll_SS1+0xe6>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
    5980:	2c 96       	adiw	r28, 0x0c	; 12
    5982:	0f b6       	in	r0, 0x3f	; 63
    5984:	f8 94       	cli
    5986:	de bf       	out	0x3e, r29	; 62
    5988:	0f be       	out	0x3f, r0	; 63
    598a:	cd bf       	out	0x3d, r28	; 61
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	1f 91       	pop	r17
    5992:	0f 91       	pop	r16
    5994:	ff 90       	pop	r15
    5996:	ef 90       	pop	r14
    5998:	df 90       	pop	r13
    599a:	cf 90       	pop	r12
    599c:	08 95       	ret

0000599e <timer_reset_two_sec>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    599e:	86 b7       	in	r24, 0x36	; 54
    59a0:	80 61       	ori	r24, 0x10	; 16
    59a2:	86 bf       	out	0x36, r24	; 54
    59a4:	1e bc       	out	0x2e, r1	; 46
    59a6:	1d bc       	out	0x2d, r1	; 45
    59a8:	1c bc       	out	0x2c, r1	; 44
    59aa:	88 e0       	ldi	r24, 0x08	; 8
    59ac:	9d e3       	ldi	r25, 0x3D	; 61
    59ae:	9b bd       	out	0x2b, r25	; 43
    59b0:	8a bd       	out	0x2a, r24	; 42
    59b2:	1f bc       	out	0x2f, r1	; 47
    59b4:	85 e0       	ldi	r24, 0x05	; 5
    59b6:	8e bd       	out	0x2e, r24	; 46
    59b8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    59bc:	08 95       	ret

000059be <timer_wait_reset>:
  wdt_enable(time);
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    59be:	06 b6       	in	r0, 0x36	; 54
    59c0:	04 fe       	sbrs	r0, 4
    59c2:	fd cf       	rjmp	.-6      	; 0x59be <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    59c4:	ec cf       	rjmp	.-40     	; 0x599e <timer_reset_two_sec>
    59c6:	08 95       	ret

000059c8 <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    59c8:	1b b8       	out	0x0b, r1	; 11
    59ca:	1a b8       	out	0x0a, r1	; 10
    59cc:	e5 e9       	ldi	r30, 0x95	; 149
    59ce:	f0 e0       	ldi	r31, 0x00	; 0
    59d0:	10 82       	st	Z, r1
    59d2:	59 9a       	sbi	0x0b, 1	; 11
    59d4:	8a b1       	in	r24, 0x0a	; 10
    59d6:	88 61       	ori	r24, 0x18	; 24
    59d8:	8a b9       	out	0x0a, r24	; 10
    59da:	80 81       	ld	r24, Z
    59dc:	8e 60       	ori	r24, 0x0E	; 14
    59de:	80 83       	st	Z, r24
    59e0:	87 e6       	ldi	r24, 0x67	; 103
    59e2:	89 b9       	out	0x09, r24	; 9
    59e4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    59e8:	08 95       	ret

000059ea <transmit_UART0>:
    59ea:	5d 9b       	sbis	0x0b, 5	; 11
    59ec:	fe cf       	rjmp	.-4      	; 0x59ea <transmit_UART0>
    59ee:	8c b9       	out	0x0c, r24	; 12
    59f0:	08 95       	ret

000059f2 <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    59f2:	5f 9b       	sbis	0x0b, 7	; 11
    59f4:	fe cf       	rjmp	.-4      	; 0x59f2 <receive_UART0>
  return UDR0;
    59f6:	8c b1       	in	r24, 0x0c	; 12
}
    59f8:	08 95       	ret

000059fa <timer1_init>:
void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
    59fa:	8e b5       	in	r24, 0x2e	; 46
    59fc:	81 60       	ori	r24, 0x01	; 1
    59fe:	8e bd       	out	0x2e, r24	; 46
    5a00:	1d bc       	out	0x2d, r1	; 45
    5a02:	1c bc       	out	0x2c, r1	; 44
    5a04:	87 b7       	in	r24, 0x37	; 55
    5a06:	84 60       	ori	r24, 0x04	; 4
    5a08:	87 bf       	out	0x37, r24	; 55
    5a0a:	78 94       	sei
    5a0c:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <tot_overflow>
    5a10:	08 95       	ret

00005a12 <__vector_14>:
    5a12:	1f 92       	push	r1
    5a14:	0f 92       	push	r0
    5a16:	0f b6       	in	r0, 0x3f	; 63
    5a18:	0f 92       	push	r0
    5a1a:	11 24       	eor	r1, r1
    5a1c:	8f 93       	push	r24
    5a1e:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
    5a22:	8f 5f       	subi	r24, 0xFF	; 255
    5a24:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <tot_overflow>
    5a28:	8f 91       	pop	r24
    5a2a:	0f 90       	pop	r0
    5a2c:	0f be       	out	0x3f, r0	; 63
    5a2e:	0f 90       	pop	r0
    5a30:	1f 90       	pop	r1
    5a32:	18 95       	reti

00005a34 <TWI_init_master>:
    5a34:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    5a38:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    5a3c:	8c e0       	ldi	r24, 0x0C	; 12
    5a3e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    5a42:	08 95       	ret

00005a44 <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    5a44:	e7 e2       	ldi	r30, 0x27	; 39
    5a46:	f5 e0       	ldi	r31, 0x05	; 5
    5a48:	2e e2       	ldi	r18, 0x2E	; 46
    5a4a:	35 e0       	ldi	r19, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    5a4c:	9f ef       	ldi	r25, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    5a4e:	81 91       	ld	r24, Z+
    5a50:	8f b9       	out	0x0f, r24	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5a52:	77 9b       	sbis	0x0e, 7	; 14
    5a54:	fe cf       	rjmp	.-4      	; 0x5a52 <SendHM+0xe>
		 PORTA = 0xFF;
    5a56:	9b bb       	out	0x1b, r25	; 27
    5a58:	af ec       	ldi	r26, 0xCF	; 207
    5a5a:	b7 e0       	ldi	r27, 0x07	; 7
    5a5c:	11 97       	sbiw	r26, 0x01	; 1
    5a5e:	f1 f7       	brne	.-4      	; 0x5a5c <SendHM+0x18>
    5a60:	00 c0       	rjmp	.+0      	; 0x5a62 <SendHM+0x1e>
    5a62:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    5a64:	e2 17       	cp	r30, r18
    5a66:	f3 07       	cpc	r31, r19
    5a68:	91 f7       	brne	.-28     	; 0x5a4e <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    5a6a:	08 95       	ret

00005a6c <main>:


int main(void){
    5a6c:	cf 93       	push	r28
    5a6e:	df 93       	push	r29
    5a70:	cd b7       	in	r28, 0x3d	; 61
    5a72:	de b7       	in	r29, 0x3e	; 62
    5a74:	68 97       	sbiw	r28, 0x18	; 24
    5a76:	0f b6       	in	r0, 0x3f	; 63
    5a78:	f8 94       	cli
    5a7a:	de bf       	out	0x3e, r29	; 62
    5a7c:	0f be       	out	0x3f, r0	; 63
    5a7e:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    5a80:	f7 de       	rcall	.-530    	; 0x5870 <init_SPI>
  init_UART0();
    5a82:	a2 df       	rcall	.-188    	; 0x59c8 <init_UART0>
  init_UART_MM();
    5a84:	0e 94 31 1c 	call	0x3862	; 0x3862 <init_UART_MM>
  configure_torquer();
    5a88:	0e 94 23 21 	call	0x4246	; 0x4246 <configure_torquer>
  DDRA=0xF0;
    5a8c:	80 ef       	ldi	r24, 0xF0	; 240
    5a8e:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5a90:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <Current_state+0x2e>
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    5a94:	87 b3       	in	r24, 0x17	; 23
    5a96:	81 62       	ori	r24, 0x21	; 33
    5a98:	87 bb       	out	0x17, r24	; 23
    5a9a:	2f ef       	ldi	r18, 0xFF	; 255
    5a9c:	83 ed       	ldi	r24, 0xD3	; 211
    5a9e:	90 e3       	ldi	r25, 0x30	; 48
    5aa0:	21 50       	subi	r18, 0x01	; 1
    5aa2:	80 40       	sbci	r24, 0x00	; 0
    5aa4:	90 40       	sbci	r25, 0x00	; 0
    5aa6:	e1 f7       	brne	.-8      	; 0x5aa0 <main+0x34>
    5aa8:	00 c0       	rjmp	.+0      	; 0x5aaa <main+0x3e>
    5aaa:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5aac:	80 ed       	ldi	r24, 0xD0	; 208
    5aae:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5ab0:	c1 df       	rcall	.-126    	; 0x5a34 <TWI_init_master>
    5ab2:	af ef       	ldi	r26, 0xFF	; 255
    5ab4:	b1 e1       	ldi	r27, 0x11	; 17
    5ab6:	ea e7       	ldi	r30, 0x7A	; 122
    5ab8:	a1 50       	subi	r26, 0x01	; 1
    5aba:	b0 40       	sbci	r27, 0x00	; 0
    5abc:	e0 40       	sbci	r30, 0x00	; 0
    5abe:	e1 f7       	brne	.-8      	; 0x5ab8 <main+0x4c>
    5ac0:	00 c0       	rjmp	.+0      	; 0x5ac2 <main+0x56>
    5ac2:	00 00       	nop
  //transmit_string_UART0("Code");
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    5ac4:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    5ac6:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <Time>
    5aca:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <Time+0x1>
    5ace:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Time+0x2>
    5ad2:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <Time+0x3>
    5ad6:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <Time+0x4>
    5ada:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <Time+0x5>
    5ade:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <Time+0x6>
    5ae2:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <Time+0x7>
  //transmit_UART0(42);
      /**
      * * * * Task 1: Control codes
       * @ref control
       */
	receive_UART0();	 
    5ae6:	85 df       	rcall	.-246    	; 0x59f2 <receive_UART0>
  PORTB |= (1<<PB5); //Set slave select of ADC =1
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5ae8:	0f 2e       	mov	r0, r31
    5aea:	fb ea       	ldi	r31, 0xAB	; 171
    5aec:	2f 2e       	mov	r2, r31
    5aee:	f4 e0       	ldi	r31, 0x04	; 4
    5af0:	3f 2e       	mov	r3, r31
    5af2:	f0 2d       	mov	r31, r0
G4 = (uint8_t)((Current_state.gps.lon)>>8);
G5 = Current_state.gps.seconds;
G6 = Current_state.gps.minutes;
G7 = Current_state.gps.hours;
G8 = Current_state.gps.date;
G9 = (uint8_t)(q_o[0]*127);
    5af4:	04 e7       	ldi	r16, 0x74	; 116
    5af6:	14 e0       	ldi	r17, 0x04	; 4
	receive_UART0();	 
	  
  while (1)
  {
	  /////////////////////
	  timer1_init();
    5af8:	80 df       	rcall	.-256    	; 0x59fa <timer1_init>
	  uint16_t counter_value=TCNT1;
    5afa:	8c b5       	in	r24, 0x2c	; 44
    5afc:	9d b5       	in	r25, 0x2d	; 45
	  uint8_t overflow=tot_overflow;
    5afe:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
	  ///////////////////
	  timer_reset_two_sec();
    5b02:	4d df       	rcall	.-358    	; 0x599e <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5b04:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5b08:	84 30       	cpi	r24, 0x04	; 4
    5b0a:	31 f4       	brne	.+12     	; 0x5b18 <main+0xac>
    5b0c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5b10:	8c 64       	ori	r24, 0x4C	; 76
    5b12:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5b16:	07 c0       	rjmp	.+14     	; 0x5b26 <main+0xba>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5b18:	81 30       	cpi	r24, 0x01	; 1
    5b1a:	29 f4       	brne	.+10     	; 0x5b26 <main+0xba>
    5b1c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5b20:	8c 6c       	ori	r24, 0xCC	; 204
    5b22:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5b26:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5b28:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5b2a:	d1 01       	movw	r26, r2
    5b2c:	9f 96       	adiw	r26, 0x2f	; 47
    5b2e:	8c 91       	ld	r24, X
    5b30:	9f 97       	sbiw	r26, 0x2f	; 47
    5b32:	82 30       	cpi	r24, 0x02	; 2
    5b34:	51 f4       	brne	.+20     	; 0x5b4a <main+0xde>
    5b36:	9e 96       	adiw	r26, 0x2e	; 46
    5b38:	8c 91       	ld	r24, X
    5b3a:	81 11       	cpse	r24, r1
    5b3c:	06 c0       	rjmp	.+12     	; 0x5b4a <main+0xde>
	{write_data |= (1<<5);}
    5b3e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5b42:	80 62       	ori	r24, 0x20	; 32
    5b44:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5b48:	05 c0       	rjmp	.+10     	; 0x5b54 <main+0xe8>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5b4a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5b4e:	8f 7d       	andi	r24, 0xDF	; 223
    5b50:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5b54:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5b58:	81 30       	cpi	r24, 0x01	; 1
    5b5a:	49 f4       	brne	.+18     	; 0x5b6e <main+0x102>
    5b5c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <light_main>
    5b60:	81 11       	cpse	r24, r1
    5b62:	05 c0       	rjmp	.+10     	; 0x5b6e <main+0x102>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5b64:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5b68:	8b 79       	andi	r24, 0x9B	; 155
    5b6a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5b6e:	ef e1       	ldi	r30, 0x1F	; 31
    5b70:	fe e4       	ldi	r31, 0x4E	; 78
    5b72:	31 97       	sbiw	r30, 0x01	; 1
    5b74:	f1 f7       	brne	.-4      	; 0x5b72 <main+0x106>
    5b76:	00 c0       	rjmp	.+0      	; 0x5b78 <main+0x10c>
    5b78:	00 00       	nop
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5b7a:	d1 01       	movw	r26, r2
    5b7c:	59 96       	adiw	r26, 0x19	; 25
    5b7e:	8d 91       	ld	r24, X+
    5b80:	9d 91       	ld	r25, X+
    5b82:	0d 90       	ld	r0, X+
    5b84:	bc 91       	ld	r27, X
    5b86:	a0 2d       	mov	r26, r0
    5b88:	89 83       	std	Y+1, r24	; 0x01
    5b8a:	9a 83       	std	Y+2, r25	; 0x02
    5b8c:	ab 83       	std	Y+3, r26	; 0x03
    5b8e:	bc 83       	std	Y+4, r27	; 0x04
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5b90:	f1 01       	movw	r30, r2
    5b92:	41 8c       	ldd	r4, Z+25	; 0x19
    5b94:	52 8c       	ldd	r5, Z+26	; 0x1a
    5b96:	63 8c       	ldd	r6, Z+27	; 0x1b
    5b98:	74 8c       	ldd	r7, Z+28	; 0x1c
G3 = (uint8_t)Current_state.gps.lon;
    5b9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b9c:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b9e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5ba0:	b0 a1       	ldd	r27, Z+32	; 0x20
    5ba2:	8d 83       	std	Y+5, r24	; 0x05
    5ba4:	9e 83       	std	Y+6, r25	; 0x06
    5ba6:	af 83       	std	Y+7, r26	; 0x07
    5ba8:	b8 87       	std	Y+8, r27	; 0x08
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5baa:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bac:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bae:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5bb0:	b0 a1       	ldd	r27, Z+32	; 0x20
    5bb2:	89 87       	std	Y+9, r24	; 0x09
    5bb4:	9a 87       	std	Y+10, r25	; 0x0a
    5bb6:	ab 87       	std	Y+11, r26	; 0x0b
    5bb8:	bc 87       	std	Y+12, r27	; 0x0c
G5 = Current_state.gps.seconds;
    5bba:	97 a0       	ldd	r9, Z+39	; 0x27
G6 = Current_state.gps.minutes;
    5bbc:	a6 a0       	ldd	r10, Z+38	; 0x26
G7 = Current_state.gps.hours;
    5bbe:	b5 a0       	ldd	r11, Z+37	; 0x25
G8 = Current_state.gps.date;
    5bc0:	c0 a4       	ldd	r12, Z+40	; 0x28
G9 = (uint8_t)(q_o[0]*127);
    5bc2:	20 e0       	ldi	r18, 0x00	; 0
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	4e ef       	ldi	r20, 0xFE	; 254
    5bc8:	52 e4       	ldi	r21, 0x42	; 66
    5bca:	d8 01       	movw	r26, r16
    5bcc:	6d 91       	ld	r22, X+
    5bce:	7d 91       	ld	r23, X+
    5bd0:	8d 91       	ld	r24, X+
    5bd2:	9c 91       	ld	r25, X
    5bd4:	56 d6       	rcall	.+3244   	; 0x6882 <__mulsf3>
    5bd6:	a4 d4       	rcall	.+2376   	; 0x6520 <__fixunssfsi>
    5bd8:	d6 2e       	mov	r13, r22
G10 = (uint8_t)(q_o[1]*127);
    5bda:	20 e0       	ldi	r18, 0x00	; 0
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	4e ef       	ldi	r20, 0xFE	; 254
    5be0:	52 e4       	ldi	r21, 0x42	; 66
    5be2:	f8 01       	movw	r30, r16
    5be4:	64 81       	ldd	r22, Z+4	; 0x04
    5be6:	75 81       	ldd	r23, Z+5	; 0x05
    5be8:	86 81       	ldd	r24, Z+6	; 0x06
    5bea:	97 81       	ldd	r25, Z+7	; 0x07
    5bec:	4a d6       	rcall	.+3220   	; 0x6882 <__mulsf3>
    5bee:	98 d4       	rcall	.+2352   	; 0x6520 <__fixunssfsi>
    5bf0:	e6 2e       	mov	r14, r22
G11 = (uint8_t)(q_o[2]*127);
    5bf2:	20 e0       	ldi	r18, 0x00	; 0
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	4e ef       	ldi	r20, 0xFE	; 254
    5bf8:	52 e4       	ldi	r21, 0x42	; 66
    5bfa:	d8 01       	movw	r26, r16
    5bfc:	18 96       	adiw	r26, 0x08	; 8
    5bfe:	6d 91       	ld	r22, X+
    5c00:	7d 91       	ld	r23, X+
    5c02:	8d 91       	ld	r24, X+
    5c04:	9c 91       	ld	r25, X
    5c06:	1b 97       	sbiw	r26, 0x0b	; 11
    5c08:	3c d6       	rcall	.+3192   	; 0x6882 <__mulsf3>
    5c0a:	8a d4       	rcall	.+2324   	; 0x6520 <__fixunssfsi>
    5c0c:	f6 2e       	mov	r15, r22
G12 = (uint8_t)(q_o[3]*127);
    5c0e:	20 e0       	ldi	r18, 0x00	; 0
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	4e ef       	ldi	r20, 0xFE	; 254
    5c14:	52 e4       	ldi	r21, 0x42	; 66
    5c16:	f8 01       	movw	r30, r16
    5c18:	64 85       	ldd	r22, Z+12	; 0x0c
    5c1a:	75 85       	ldd	r23, Z+13	; 0x0d
    5c1c:	86 85       	ldd	r24, Z+14	; 0x0e
    5c1e:	97 85       	ldd	r25, Z+15	; 0x0f
    5c20:	30 d6       	rcall	.+3168   	; 0x6882 <__mulsf3>
    5c22:	7e d4       	rcall	.+2300   	; 0x6520 <__fixunssfsi>
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5c24:	e9 81       	ldd	r30, Y+1	; 0x01
    5c26:	a4 e1       	ldi	r26, 0x14	; 20
    5c28:	b1 e0       	ldi	r27, 0x01	; 1
    5c2a:	ec 93       	st	X, r30
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5c2c:	50 92 15 01 	sts	0x0115, r5	; 0x800115 <GPS_Data+0x1>
G3 = (uint8_t)Current_state.gps.lon;
    5c30:	fd 81       	ldd	r31, Y+5	; 0x05
    5c32:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <GPS_Data+0x2>
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5c36:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c38:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <GPS_Data+0x3>

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    5c3c:	90 92 18 01 	sts	0x0118, r9	; 0x800118 <GPS_Data+0x4>
GPS_Data[5] = G6;
    5c40:	a0 92 19 01 	sts	0x0119, r10	; 0x800119 <GPS_Data+0x5>
GPS_Data[6] = G7;
    5c44:	b0 92 1a 01 	sts	0x011A, r11	; 0x80011a <GPS_Data+0x6>
GPS_Data[7] = G8;
    5c48:	c0 92 1b 01 	sts	0x011B, r12	; 0x80011b <GPS_Data+0x7>
GPS_Data[8] = G9;
    5c4c:	d0 92 1c 01 	sts	0x011C, r13	; 0x80011c <GPS_Data+0x8>
GPS_Data[9] = G10;
    5c50:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <GPS_Data+0x9>
GPS_Data[10] = G11;
    5c54:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <GPS_Data+0xa>
GPS_Data[11] = G12;
    5c58:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <GPS_Data+0xb>
//////////////////////////////////////////

///////////////////////////////////////
if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5c5c:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <flag_india>
    5c60:	81 30       	cpi	r24, 0x01	; 1
    5c62:	29 f0       	breq	.+10     	; 0x5c6e <main+0x202>
    5c64:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <flag_france>
    5c68:	81 30       	cpi	r24, 0x01	; 1
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <main+0x202>
    5c6c:	4d c0       	rjmp	.+154    	; 0x5d08 <main+0x29c>
{
	
	if(FirstTimeOuter ==0)
    5c6e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <FirstTimeOuter>
    5c72:	81 11       	cpse	r24, r1
    5c74:	0e c0       	rjmp	.+28     	; 0x5c92 <main+0x226>
	{
		
	FirstTimeInner = 0;
    5c76:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeNormal = 0;
    5c7a:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5c7e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5c82:	8d 7f       	andi	r24, 0xFD	; 253
    5c84:	80 61       	ori	r24, 0x10	; 16
    5c86:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 1;
    5c8a:	81 e0       	ldi	r24, 0x01	; 1
    5c8c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    5c90:	35 c0       	rjmp	.+106    	; 0x5cfc <main+0x290>
	}
	else if(FirstTimeOuter == 1)
    5c92:	81 30       	cpi	r24, 0x01	; 1
    5c94:	e1 f4       	brne	.+56     	; 0x5cce <main+0x262>
	{
		
		if(countu ==0)
    5c96:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5c9a:	81 11       	cpse	r24, r1
    5c9c:	14 c0       	rjmp	.+40     	; 0x5cc6 <main+0x25a>
    5c9e:	83 e0       	ldi	r24, 0x03	; 3
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5ca2:	a1 eb       	ldi	r26, 0xB1	; 177
    5ca4:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5ca6:	77 9b       	sbis	0x0e, 7	; 14
    5ca8:	fe cf       	rjmp	.-4      	; 0x5ca6 <main+0x23a>
			PORTA = 0xFF;
    5caa:	bf ef       	ldi	r27, 0xFF	; 255
    5cac:	bb bb       	out	0x1b, r27	; 27
    5cae:	ef ec       	ldi	r30, 0xCF	; 207
    5cb0:	f7 e0       	ldi	r31, 0x07	; 7
    5cb2:	31 97       	sbiw	r30, 0x01	; 1
    5cb4:	f1 f7       	brne	.-4      	; 0x5cb2 <main+0x246>
    5cb6:	00 c0       	rjmp	.+0      	; 0x5cb8 <main+0x24c>
    5cb8:	00 00       	nop
    5cba:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5cbc:	91 f7       	brne	.-28     	; 0x5ca2 <main+0x236>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5cbe:	82 e0       	ldi	r24, 0x02	; 2
    5cc0:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    5cc4:	1b c0       	rjmp	.+54     	; 0x5cfc <main+0x290>
		}
		else if(countu == 1)
    5cc6:	81 30       	cpi	r24, 0x01	; 1
    5cc8:	c9 f4       	brne	.+50     	; 0x5cfc <main+0x290>
		{
			
			SendHM();
    5cca:	bc de       	rcall	.-648    	; 0x5a44 <SendHM>
    5ccc:	17 c0       	rjmp	.+46     	; 0x5cfc <main+0x290>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5cce:	ba de       	rcall	.-652    	; 0x5a44 <SendHM>
		if(countu ==0)
    5cd0:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5cd4:	81 11       	cpse	r24, r1
    5cd6:	12 c0       	rjmp	.+36     	; 0x5cfc <main+0x290>
    5cd8:	e4 e1       	ldi	r30, 0x14	; 20
    5cda:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5cdc:	81 91       	ld	r24, Z+
    5cde:	8f b9       	out	0x0f, r24	; 15
				while(!(SPSR & (1<<SPIF) ));
    5ce0:	77 9b       	sbis	0x0e, 7	; 14
    5ce2:	fe cf       	rjmp	.-4      	; 0x5ce0 <main+0x274>
				PORTA = 0xFF;
    5ce4:	2f ef       	ldi	r18, 0xFF	; 255
    5ce6:	2b bb       	out	0x1b, r18	; 27
    5ce8:	8f ec       	ldi	r24, 0xCF	; 207
    5cea:	97 e0       	ldi	r25, 0x07	; 7
    5cec:	01 97       	sbiw	r24, 0x01	; 1
    5cee:	f1 f7       	brne	.-4      	; 0x5cec <main+0x280>
    5cf0:	00 c0       	rjmp	.+0      	; 0x5cf2 <main+0x286>
    5cf2:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5cf4:	91 e0       	ldi	r25, 0x01	; 1
    5cf6:	e0 32       	cpi	r30, 0x20	; 32
    5cf8:	f9 07       	cpc	r31, r25
    5cfa:	81 f7       	brne	.-32     	; 0x5cdc <main+0x270>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5cfc:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5d00:	8e 5f       	subi	r24, 0xFE	; 254
    5d02:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    5d06:	94 c0       	rjmp	.+296    	; 0x5e30 <main+0x3c4>
}
else if(flag_mumbai ==1) //Check for Circles
    5d08:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <flag_mumbai>
    5d0c:	81 30       	cpi	r24, 0x01	; 1
    5d0e:	09 f0       	breq	.+2      	; 0x5d12 <main+0x2a6>
    5d10:	4d c0       	rjmp	.+154    	; 0x5dac <main+0x340>
{
	
	if(FirstTimeInner ==0)
    5d12:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <FirstTimeInner>
    5d16:	81 11       	cpse	r24, r1
    5d18:	0e c0       	rjmp	.+28     	; 0x5d36 <main+0x2ca>
	{
		
		FirstTimeOuter = 0;
    5d1a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
		FirstTimeNormal = 0;
    5d1e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5d22:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5d26:	8d 7f       	andi	r24, 0xFD	; 253
    5d28:	80 61       	ori	r24, 0x10	; 16
    5d2a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		FirstTimeInner = 1;
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    5d34:	35 c0       	rjmp	.+106    	; 0x5da0 <main+0x334>
		
	}
	else if(FirstTimeInner == 1)
    5d36:	81 30       	cpi	r24, 0x01	; 1
    5d38:	e1 f4       	brne	.+56     	; 0x5d72 <main+0x306>
	{
		
		if(countu ==0)
    5d3a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5d3e:	81 11       	cpse	r24, r1
    5d40:	14 c0       	rjmp	.+40     	; 0x5d6a <main+0x2fe>
    5d42:	83 e0       	ldi	r24, 0x03	; 3
    5d44:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5d46:	a1 ef       	ldi	r26, 0xF1	; 241
    5d48:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d4a:	77 9b       	sbis	0x0e, 7	; 14
    5d4c:	fe cf       	rjmp	.-4      	; 0x5d4a <main+0x2de>
			PORTA = 0xFF;
    5d4e:	bf ef       	ldi	r27, 0xFF	; 255
    5d50:	bb bb       	out	0x1b, r27	; 27
    5d52:	ef ec       	ldi	r30, 0xCF	; 207
    5d54:	f7 e0       	ldi	r31, 0x07	; 7
    5d56:	31 97       	sbiw	r30, 0x01	; 1
    5d58:	f1 f7       	brne	.-4      	; 0x5d56 <main+0x2ea>
    5d5a:	00 c0       	rjmp	.+0      	; 0x5d5c <main+0x2f0>
    5d5c:	00 00       	nop
    5d5e:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5d60:	91 f7       	brne	.-28     	; 0x5d46 <main+0x2da>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5d62:	82 e0       	ldi	r24, 0x02	; 2
    5d64:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    5d68:	1b c0       	rjmp	.+54     	; 0x5da0 <main+0x334>
		}
		
		else if(countu == 1)
    5d6a:	81 30       	cpi	r24, 0x01	; 1
    5d6c:	c9 f4       	brne	.+50     	; 0x5da0 <main+0x334>
		{
			
			SendHM();
    5d6e:	6a de       	rcall	.-812    	; 0x5a44 <SendHM>
    5d70:	17 c0       	rjmp	.+46     	; 0x5da0 <main+0x334>
		
	}
	else
	{
		
		SendHM();
    5d72:	68 de       	rcall	.-816    	; 0x5a44 <SendHM>
		if(countu ==0)
    5d74:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5d78:	81 11       	cpse	r24, r1
    5d7a:	12 c0       	rjmp	.+36     	; 0x5da0 <main+0x334>
    5d7c:	e4 e1       	ldi	r30, 0x14	; 20
    5d7e:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5d80:	81 91       	ld	r24, Z+
    5d82:	8f b9       	out	0x0f, r24	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d84:	77 9b       	sbis	0x0e, 7	; 14
    5d86:	fe cf       	rjmp	.-4      	; 0x5d84 <main+0x318>
			PORTA = 0xFF;
    5d88:	2f ef       	ldi	r18, 0xFF	; 255
    5d8a:	2b bb       	out	0x1b, r18	; 27
    5d8c:	8f ec       	ldi	r24, 0xCF	; 207
    5d8e:	97 e0       	ldi	r25, 0x07	; 7
    5d90:	01 97       	sbiw	r24, 0x01	; 1
    5d92:	f1 f7       	brne	.-4      	; 0x5d90 <main+0x324>
    5d94:	00 c0       	rjmp	.+0      	; 0x5d96 <main+0x32a>
    5d96:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5d98:	91 e0       	ldi	r25, 0x01	; 1
    5d9a:	e0 32       	cpi	r30, 0x20	; 32
    5d9c:	f9 07       	cpc	r31, r25
    5d9e:	81 f7       	brne	.-32     	; 0x5d80 <main+0x314>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5da0:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5da4:	8e 5f       	subi	r24, 0xFE	; 254
    5da6:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    5daa:	42 c0       	rjmp	.+132    	; 0x5e30 <main+0x3c4>
}
else
{

	countd = 0;
    5dac:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu = 0;
    5db0:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	if(FirstTimeNormal == 0)
    5db4:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <FirstTimeNormal>
    5db8:	81 11       	cpse	r24, r1
    5dba:	13 c0       	rjmp	.+38     	; 0x5de2 <main+0x376>
    5dbc:	83 e0       	ldi	r24, 0x03	; 3
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5dc0:	a1 ed       	ldi	r26, 0xD1	; 209
    5dc2:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5dc4:	77 9b       	sbis	0x0e, 7	; 14
    5dc6:	fe cf       	rjmp	.-4      	; 0x5dc4 <main+0x358>
			PORTA = 0xFF;
    5dc8:	bf ef       	ldi	r27, 0xFF	; 255
    5dca:	bb bb       	out	0x1b, r27	; 27
    5dcc:	ef ec       	ldi	r30, 0xCF	; 207
    5dce:	f7 e0       	ldi	r31, 0x07	; 7
    5dd0:	31 97       	sbiw	r30, 0x01	; 1
    5dd2:	f1 f7       	brne	.-4      	; 0x5dd0 <main+0x364>
    5dd4:	00 c0       	rjmp	.+0      	; 0x5dd6 <main+0x36a>
    5dd6:	00 00       	nop
    5dd8:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5dda:	91 f7       	brne	.-28     	; 0x5dc0 <main+0x354>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5ddc:	81 e0       	ldi	r24, 0x01	; 1
    5dde:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <FirstTimeNormal>
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5de2:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <UniversalCycles>
    5de6:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <UniversalCycles+0x1>
    5dea:	9a 01       	movw	r18, r20
    5dec:	ad ec       	ldi	r26, 0xCD	; 205
    5dee:	bc ec       	ldi	r27, 0xCC	; 204
    5df0:	52 d7       	rcall	.+3748   	; 0x6c96 <__umulhisi3>
    5df2:	96 95       	lsr	r25
    5df4:	87 95       	ror	r24
    5df6:	96 95       	lsr	r25
    5df8:	87 95       	ror	r24
    5dfa:	96 95       	lsr	r25
    5dfc:	87 95       	ror	r24
    5dfe:	9c 01       	movw	r18, r24
    5e00:	22 0f       	add	r18, r18
    5e02:	33 1f       	adc	r19, r19
    5e04:	88 0f       	add	r24, r24
    5e06:	99 1f       	adc	r25, r25
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	88 0f       	add	r24, r24
    5e0e:	99 1f       	adc	r25, r25
    5e10:	82 0f       	add	r24, r18
    5e12:	93 1f       	adc	r25, r19
    5e14:	48 17       	cp	r20, r24
    5e16:	59 07       	cpc	r21, r25
    5e18:	09 f4       	brne	.+2      	; 0x5e1c <main+0x3b0>
    5e1a:	14 de       	rcall	.-984    	; 0x5a44 <SendHM>
	write_data &= ~(1<<4);
    5e1c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5e20:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5e22:	82 60       	ori	r24, 0x02	; 2
    5e24:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeInner = 0;
    5e28:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeOuter = 0;
    5e2c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
}

if ((countd >120)&&(countd <=150))
    5e30:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <countd>
    5e34:	87 e8       	ldi	r24, 0x87	; 135
    5e36:	89 0f       	add	r24, r25
    5e38:	8e 31       	cpi	r24, 0x1E	; 30
    5e3a:	d8 f4       	brcc	.+54     	; 0x5e72 <main+0x406>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5e3c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5e40:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5e42:	82 60       	ori	r24, 0x02	; 2
    5e44:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	if (countd == 122)
    5e48:	9a 37       	cpi	r25, 0x7A	; 122
    5e4a:	81 f4       	brne	.+32     	; 0x5e6c <main+0x400>
    5e4c:	83 e0       	ldi	r24, 0x03	; 3
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5e50:	f1 ed       	ldi	r31, 0xD1	; 209
    5e52:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1<<SPIF) ));
    5e54:	77 9b       	sbis	0x0e, 7	; 14
    5e56:	fe cf       	rjmp	.-4      	; 0x5e54 <main+0x3e8>
		PORTA = 0xFF;
    5e58:	2f ef       	ldi	r18, 0xFF	; 255
    5e5a:	2b bb       	out	0x1b, r18	; 27
    5e5c:	af ec       	ldi	r26, 0xCF	; 207
    5e5e:	b7 e0       	ldi	r27, 0x07	; 7
    5e60:	11 97       	sbiw	r26, 0x01	; 1
    5e62:	f1 f7       	brne	.-4      	; 0x5e60 <main+0x3f4>
    5e64:	00 c0       	rjmp	.+0      	; 0x5e66 <main+0x3fa>
    5e66:	00 00       	nop
    5e68:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5e6a:	91 f7       	brne	.-28     	; 0x5e50 <main+0x3e4>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <countu>
}
if (countd >150)
    5e72:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5e76:	87 39       	cpi	r24, 0x97	; 151
    5e78:	70 f0       	brcs	.+28     	; 0x5e96 <main+0x42a>
{

	countd=0;
    5e7a:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu=0;
    5e7e:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	write_data &= ~(1<<1); 
    5e82:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5e86:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5e88:	80 61       	ori	r24, 0x10	; 16
    5e8a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 0;
    5e8e:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
	FirstTimeInner = 0;
    5e92:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
		
}

	
		PORTB |= (1<<PB0);
    5e96:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5e98:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    5e9a:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5e9e:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5ea2:	89 2b       	or	r24, r25
    5ea4:	79 f4       	brne	.+30     	; 0x5ec4 <main+0x458>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5ea6:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    5eaa:	88 23       	and	r24, r24
    5eac:	4c f1       	brlt	.+82     	; 0x5f00 <main+0x494>
	     	{
		     	counter1 = 1;
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    5eb6:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
		     	write_data &= ~(1<<7);
    5eba:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5ebe:	8f 77       	andi	r24, 0x7F	; 127
    5ec0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5ec4:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5ec8:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5ecc:	9c 01       	movw	r18, r24
    5ece:	21 50       	subi	r18, 0x01	; 1
    5ed0:	31 09       	sbc	r19, r1
    5ed2:	26 30       	cpi	r18, 0x06	; 6
    5ed4:	31 05       	cpc	r19, r1
    5ed6:	28 f4       	brcc	.+10     	; 0x5ee2 <main+0x476>
     	{
	     	counter1 = counter1+1;
    5ed8:	01 96       	adiw	r24, 0x01	; 1
    5eda:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    5ede:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
     	}
     	
     	if(counter1 == 7)
    5ee2:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5ee6:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5eea:	07 97       	sbiw	r24, 0x07	; 7
    5eec:	49 f4       	brne	.+18     	; 0x5f00 <main+0x494>
     	{
	     	counter1 = 0;
    5eee:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <counter1+0x1>
    5ef2:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <counter1>
	     	write_data |= (1<<7);
    5ef6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5efa:	80 68       	ori	r24, 0x80	; 128
    5efc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5f00:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    5f04:	85 fd       	sbrc	r24, 5
    5f06:	04 c0       	rjmp	.+8      	; 0x5f10 <main+0x4a4>
			 {
				Current_state.gps.gps_OC = 1;
    5f08:	81 e0       	ldi	r24, 0x01	; 1
    5f0a:	f1 01       	movw	r30, r2
    5f0c:	86 a7       	std	Z+46, r24	; 0x2e
    5f0e:	03 c0       	rjmp	.+6      	; 0x5f16 <main+0x4aa>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5f10:	d1 01       	movw	r26, r2
    5f12:	9e 96       	adiw	r26, 0x2e	; 46
    5f14:	1c 92       	st	X, r1
			}


	//wdt_enable(WDTO_2S);
	//wdt_reset();
	control();
    5f16:	0e 94 3c 08 	call	0x1078	; 0x1078 <control>
	//for (int i = 0; i<7;i++)
	//{
	//	transmit_UART0(HM_Data[i]);
	//}
	
	light_main = light_cal();	
    5f1a:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <light_cal>
    5f1e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <light_main>
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    5f22:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <HM_Data+0x6>
    5f26:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    5f28:	0e 94 7e 21 	call	0x42fc	; 0x42fc <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    5f2c:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <Time>
    5f30:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <Time+0x1>
    5f34:	40 91 21 05 	lds	r20, 0x0521	; 0x800521 <Time+0x2>
    5f38:	50 91 22 05 	lds	r21, 0x0522	; 0x800522 <Time+0x3>
    5f3c:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <Time+0x4>
    5f40:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <Time+0x5>
    5f44:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <Time+0x6>
    5f48:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <Time+0x7>
    5f4c:	a2 e0       	ldi	r26, 0x02	; 2
    5f4e:	d4 d6       	rcall	.+3496   	; 0x6cf8 <__adddi3_s8>
    5f50:	20 93 1f 05 	sts	0x051F, r18	; 0x80051f <Time>
    5f54:	30 93 20 05 	sts	0x0520, r19	; 0x800520 <Time+0x1>
    5f58:	40 93 21 05 	sts	0x0521, r20	; 0x800521 <Time+0x2>
    5f5c:	50 93 22 05 	sts	0x0522, r21	; 0x800522 <Time+0x3>
    5f60:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <Time+0x4>
    5f64:	70 93 24 05 	sts	0x0524, r23	; 0x800524 <Time+0x5>
    5f68:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Time+0x6>
    5f6c:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <Time+0x7>
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    5f70:	f1 01       	movw	r30, r2
    5f72:	61 8d       	ldd	r22, Z+25	; 0x19
    5f74:	72 8d       	ldd	r23, Z+26	; 0x1a
    5f76:	83 8d       	ldd	r24, Z+27	; 0x1b
    5f78:	94 8d       	ldd	r25, Z+28	; 0x1c
    5f7a:	00 d3       	rcall	.+1536   	; 0x657c <__floatsisf>
    5f7c:	20 e0       	ldi	r18, 0x00	; 0
    5f7e:	30 e0       	ldi	r19, 0x00	; 0
    5f80:	48 ec       	ldi	r20, 0xC8	; 200
    5f82:	52 e4       	ldi	r21, 0x42	; 66
    5f84:	60 d2       	rcall	.+1216   	; 0x6446 <__divsf3>
    5f86:	29 e9       	ldi	r18, 0x99	; 153
    5f88:	3a ea       	ldi	r19, 0xAA	; 170
    5f8a:	44 eb       	ldi	r20, 0xB4	; 180
    5f8c:	51 e4       	ldi	r21, 0x41	; 65
    5f8e:	76 d1       	rcall	.+748    	; 0x627c <__subsf3>
    5f90:	69 87       	std	Y+9, r22	; 0x09
    5f92:	7a 87       	std	Y+10, r23	; 0x0a
    5f94:	8b 87       	std	Y+11, r24	; 0x0b
    5f96:	9c 87       	std	Y+12, r25	; 0x0c
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    5f98:	d1 01       	movw	r26, r2
    5f9a:	5d 96       	adiw	r26, 0x1d	; 29
    5f9c:	6d 91       	ld	r22, X+
    5f9e:	7d 91       	ld	r23, X+
    5fa0:	8d 91       	ld	r24, X+
    5fa2:	9c 91       	ld	r25, X
    5fa4:	90 97       	sbiw	r26, 0x20	; 32
    5fa6:	ea d2       	rcall	.+1492   	; 0x657c <__floatsisf>
    5fa8:	20 e0       	ldi	r18, 0x00	; 0
    5faa:	30 e0       	ldi	r19, 0x00	; 0
    5fac:	48 ec       	ldi	r20, 0xC8	; 200
    5fae:	52 e4       	ldi	r21, 0x42	; 66
    5fb0:	4a d2       	rcall	.+1172   	; 0x6446 <__divsf3>
    5fb2:	20 e8       	ldi	r18, 0x80	; 128
    5fb4:	38 e8       	ldi	r19, 0x88	; 136
    5fb6:	45 ea       	ldi	r20, 0xA5	; 165
    5fb8:	52 e4       	ldi	r21, 0x42	; 66
    5fba:	60 d1       	rcall	.+704    	; 0x627c <__subsf3>
    5fbc:	6d 87       	std	Y+13, r22	; 0x0d
    5fbe:	7e 87       	std	Y+14, r23	; 0x0e
    5fc0:	8f 87       	std	Y+15, r24	; 0x0f
    5fc2:	98 8b       	std	Y+16, r25	; 0x10
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    5fc4:	f1 01       	movw	r30, r2
    5fc6:	61 8d       	ldd	r22, Z+25	; 0x19
    5fc8:	72 8d       	ldd	r23, Z+26	; 0x1a
    5fca:	83 8d       	ldd	r24, Z+27	; 0x1b
    5fcc:	94 8d       	ldd	r25, Z+28	; 0x1c
    5fce:	d6 d2       	rcall	.+1452   	; 0x657c <__floatsisf>
    5fd0:	20 e0       	ldi	r18, 0x00	; 0
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	48 ec       	ldi	r20, 0xC8	; 200
    5fd6:	52 e4       	ldi	r21, 0x42	; 66
    5fd8:	36 d2       	rcall	.+1132   	; 0x6446 <__divsf3>
    5fda:	28 ed       	ldi	r18, 0xD8	; 216
    5fdc:	3f e0       	ldi	r19, 0x0F	; 15
    5fde:	49 e4       	ldi	r20, 0x49	; 73
    5fe0:	50 e4       	ldi	r21, 0x40	; 64
    5fe2:	4f d4       	rcall	.+2206   	; 0x6882 <__mulsf3>
    5fe4:	20 e0       	ldi	r18, 0x00	; 0
    5fe6:	30 e0       	ldi	r19, 0x00	; 0
    5fe8:	44 e3       	ldi	r20, 0x34	; 52
    5fea:	53 e4       	ldi	r21, 0x43	; 67
    5fec:	2c d2       	rcall	.+1112   	; 0x6446 <__divsf3>
    5fee:	6d 8b       	std	Y+21, r22	; 0x15
    5ff0:	7e 8b       	std	Y+22, r23	; 0x16
    5ff2:	8f 8b       	std	Y+23, r24	; 0x17
    5ff4:	98 8f       	std	Y+24, r25	; 0x18
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    5ff6:	d1 01       	movw	r26, r2
    5ff8:	59 96       	adiw	r26, 0x19	; 25
    5ffa:	8d 90       	ld	r8, X+
    5ffc:	9d 90       	ld	r9, X+
    5ffe:	ad 90       	ld	r10, X+
    6000:	bc 90       	ld	r11, X
    6002:	5c 97       	sbiw	r26, 0x1c	; 28
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6004:	5d 96       	adiw	r26, 0x1d	; 29
    6006:	cd 90       	ld	r12, X+
    6008:	dd 90       	ld	r13, X+
    600a:	ed 90       	ld	r14, X+
    600c:	fc 90       	ld	r15, X
    600e:	90 97       	sbiw	r26, 0x20	; 32
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6010:	59 96       	adiw	r26, 0x19	; 25
    6012:	4d 90       	ld	r4, X+
    6014:	5d 90       	ld	r5, X+
    6016:	6d 90       	ld	r6, X+
    6018:	7c 90       	ld	r7, X
    601a:	5c 97       	sbiw	r26, 0x1c	; 28
// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    601c:	59 96       	adiw	r26, 0x19	; 25
    601e:	6d 91       	ld	r22, X+
    6020:	7d 91       	ld	r23, X+
    6022:	8d 91       	ld	r24, X+
    6024:	9c 91       	ld	r25, X
    6026:	5c 97       	sbiw	r26, 0x1c	; 28
    6028:	a9 d2       	rcall	.+1362   	; 0x657c <__floatsisf>
    602a:	20 e0       	ldi	r18, 0x00	; 0
    602c:	30 e0       	ldi	r19, 0x00	; 0
    602e:	48 ec       	ldi	r20, 0xC8	; 200
    6030:	52 e4       	ldi	r21, 0x42	; 66
    6032:	09 d2       	rcall	.+1042   	; 0x6446 <__divsf3>
    6034:	26 ea       	ldi	r18, 0xA6	; 166
    6036:	3b e9       	ldi	r19, 0x9B	; 155
    6038:	48 e9       	ldi	r20, 0x98	; 152
    603a:	51 e4       	ldi	r21, 0x41	; 65
    603c:	1f d1       	rcall	.+574    	; 0x627c <__subsf3>
    603e:	69 83       	std	Y+1, r22	; 0x01
    6040:	7a 83       	std	Y+2, r23	; 0x02
    6042:	8b 83       	std	Y+3, r24	; 0x03
    6044:	9c 83       	std	Y+4, r25	; 0x04
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    6046:	f1 01       	movw	r30, r2
    6048:	65 8d       	ldd	r22, Z+29	; 0x1d
    604a:	76 8d       	ldd	r23, Z+30	; 0x1e
    604c:	87 8d       	ldd	r24, Z+31	; 0x1f
    604e:	90 a1       	ldd	r25, Z+32	; 0x20
    6050:	95 d2       	rcall	.+1322   	; 0x657c <__floatsisf>
    6052:	20 e0       	ldi	r18, 0x00	; 0
    6054:	30 e0       	ldi	r19, 0x00	; 0
    6056:	48 ec       	ldi	r20, 0xC8	; 200
    6058:	52 e4       	ldi	r21, 0x42	; 66
    605a:	f5 d1       	rcall	.+1002   	; 0x6446 <__divsf3>
    605c:	26 e0       	ldi	r18, 0x06	; 6
    605e:	31 ec       	ldi	r19, 0xC1	; 193
    6060:	41 e9       	ldi	r20, 0x91	; 145
    6062:	52 e4       	ldi	r21, 0x42	; 66
    6064:	0b d1       	rcall	.+534    	; 0x627c <__subsf3>
    6066:	6d 83       	std	Y+5, r22	; 0x05
    6068:	7e 83       	std	Y+6, r23	; 0x06
    606a:	8f 83       	std	Y+7, r24	; 0x07
    606c:	98 87       	std	Y+8, r25	; 0x08
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    606e:	d1 01       	movw	r26, r2
    6070:	59 96       	adiw	r26, 0x19	; 25
    6072:	6d 91       	ld	r22, X+
    6074:	7d 91       	ld	r23, X+
    6076:	8d 91       	ld	r24, X+
    6078:	9c 91       	ld	r25, X
    607a:	5c 97       	sbiw	r26, 0x1c	; 28
    607c:	7f d2       	rcall	.+1278   	; 0x657c <__floatsisf>
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	30 e0       	ldi	r19, 0x00	; 0
    6082:	48 ec       	ldi	r20, 0xC8	; 200
    6084:	52 e4       	ldi	r21, 0x42	; 66
    6086:	df d1       	rcall	.+958    	; 0x6446 <__divsf3>
    6088:	28 ed       	ldi	r18, 0xD8	; 216
    608a:	3f e0       	ldi	r19, 0x0F	; 15
    608c:	49 e4       	ldi	r20, 0x49	; 73
    608e:	50 e4       	ldi	r21, 0x40	; 64
    6090:	f8 d3       	rcall	.+2032   	; 0x6882 <__mulsf3>
    6092:	20 e0       	ldi	r18, 0x00	; 0
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	44 e3       	ldi	r20, 0x34	; 52
    6098:	53 e4       	ldi	r21, 0x43	; 67
    609a:	d5 d1       	rcall	.+938    	; 0x6446 <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    609c:	d1 d1       	rcall	.+930    	; 0x6440 <cos>
    609e:	69 8b       	std	Y+17, r22	; 0x11
    60a0:	7a 8b       	std	Y+18, r23	; 0x12
    60a2:	8b 8b       	std	Y+19, r24	; 0x13
    60a4:	9c 8b       	std	Y+20, r25	; 0x14
    60a6:	29 81       	ldd	r18, Y+1	; 0x01
    60a8:	3a 81       	ldd	r19, Y+2	; 0x02
    60aa:	4b 81       	ldd	r20, Y+3	; 0x03
    60ac:	5c 81       	ldd	r21, Y+4	; 0x04
    60ae:	ca 01       	movw	r24, r20
    60b0:	b9 01       	movw	r22, r18
    60b2:	e7 d3       	rcall	.+1998   	; 0x6882 <__mulsf3>
    60b4:	69 83       	std	Y+1, r22	; 0x01
    60b6:	7a 83       	std	Y+2, r23	; 0x02
    60b8:	8b 83       	std	Y+3, r24	; 0x03
    60ba:	9c 83       	std	Y+4, r25	; 0x04
    60bc:	2d 81       	ldd	r18, Y+5	; 0x05
    60be:	3e 81       	ldd	r19, Y+6	; 0x06
    60c0:	4f 81       	ldd	r20, Y+7	; 0x07
    60c2:	58 85       	ldd	r21, Y+8	; 0x08
    60c4:	69 89       	ldd	r22, Y+17	; 0x11
    60c6:	7a 89       	ldd	r23, Y+18	; 0x12
    60c8:	8b 89       	ldd	r24, Y+19	; 0x13
    60ca:	9c 89       	ldd	r25, Y+20	; 0x14
    60cc:	da d3       	rcall	.+1972   	; 0x6882 <__mulsf3>
    60ce:	2d 81       	ldd	r18, Y+5	; 0x05
    60d0:	3e 81       	ldd	r19, Y+6	; 0x06
    60d2:	4f 81       	ldd	r20, Y+7	; 0x07
    60d4:	58 85       	ldd	r21, Y+8	; 0x08
    60d6:	d5 d3       	rcall	.+1962   	; 0x6882 <__mulsf3>
    60d8:	9b 01       	movw	r18, r22
    60da:	ac 01       	movw	r20, r24
    60dc:	69 81       	ldd	r22, Y+1	; 0x01
    60de:	7a 81       	ldd	r23, Y+2	; 0x02
    60e0:	8b 81       	ldd	r24, Y+3	; 0x03
    60e2:	9c 81       	ldd	r25, Y+4	; 0x04
    60e4:	cc d0       	rcall	.+408    	; 0x627e <__addsf3>
    60e6:	20 e0       	ldi	r18, 0x00	; 0
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	48 ec       	ldi	r20, 0xC8	; 200
    60ec:	52 e4       	ldi	r21, 0x42	; 66
    60ee:	a4 d1       	rcall	.+840    	; 0x6438 <__cmpsf2>
    60f0:	88 23       	and	r24, r24
    60f2:	64 f4       	brge	.+24     	; 0x610c <main+0x6a0>
    60f4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    60f8:	81 30       	cpi	r24, 0x01	; 1
    60fa:	09 f0       	breq	.+2      	; 0x60fe <main+0x692>
    60fc:	43 c0       	rjmp	.+134    	; 0x6184 <main+0x718>
		{
			flag_mumbai = 1;
    60fe:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <flag_mumbai>
			flag_india = 0;
    6102:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
			flag_france = 0;
    6106:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    610a:	9b c0       	rjmp	.+310    	; 0x6242 <main+0x7d6>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    610c:	6d 89       	ldd	r22, Y+21	; 0x15
    610e:	7e 89       	ldd	r23, Y+22	; 0x16
    6110:	8f 89       	ldd	r24, Y+23	; 0x17
    6112:	98 8d       	ldd	r25, Y+24	; 0x18
    6114:	95 d1       	rcall	.+810    	; 0x6440 <cos>
    6116:	69 83       	std	Y+1, r22	; 0x01
    6118:	7a 83       	std	Y+2, r23	; 0x02
    611a:	8b 83       	std	Y+3, r24	; 0x03
    611c:	9c 83       	std	Y+4, r25	; 0x04
    611e:	29 85       	ldd	r18, Y+9	; 0x09
    6120:	3a 85       	ldd	r19, Y+10	; 0x0a
    6122:	4b 85       	ldd	r20, Y+11	; 0x0b
    6124:	5c 85       	ldd	r21, Y+12	; 0x0c
    6126:	ca 01       	movw	r24, r20
    6128:	b9 01       	movw	r22, r18
    612a:	ab d3       	rcall	.+1878   	; 0x6882 <__mulsf3>
    612c:	6d 83       	std	Y+5, r22	; 0x05
    612e:	7e 83       	std	Y+6, r23	; 0x06
    6130:	8f 83       	std	Y+7, r24	; 0x07
    6132:	98 87       	std	Y+8, r25	; 0x08
    6134:	2d 85       	ldd	r18, Y+13	; 0x0d
    6136:	3e 85       	ldd	r19, Y+14	; 0x0e
    6138:	4f 85       	ldd	r20, Y+15	; 0x0f
    613a:	58 89       	ldd	r21, Y+16	; 0x10
    613c:	69 81       	ldd	r22, Y+1	; 0x01
    613e:	7a 81       	ldd	r23, Y+2	; 0x02
    6140:	8b 81       	ldd	r24, Y+3	; 0x03
    6142:	9c 81       	ldd	r25, Y+4	; 0x04
    6144:	9e d3       	rcall	.+1852   	; 0x6882 <__mulsf3>
    6146:	2d 85       	ldd	r18, Y+13	; 0x0d
    6148:	3e 85       	ldd	r19, Y+14	; 0x0e
    614a:	4f 85       	ldd	r20, Y+15	; 0x0f
    614c:	58 89       	ldd	r21, Y+16	; 0x10
    614e:	99 d3       	rcall	.+1842   	; 0x6882 <__mulsf3>
    6150:	9b 01       	movw	r18, r22
    6152:	ac 01       	movw	r20, r24
    6154:	6d 81       	ldd	r22, Y+5	; 0x05
    6156:	7e 81       	ldd	r23, Y+6	; 0x06
    6158:	8f 81       	ldd	r24, Y+7	; 0x07
    615a:	98 85       	ldd	r25, Y+8	; 0x08
    615c:	90 d0       	rcall	.+288    	; 0x627e <__addsf3>
    615e:	20 e0       	ldi	r18, 0x00	; 0
    6160:	30 e4       	ldi	r19, 0x40	; 64
    6162:	4c e1       	ldi	r20, 0x1C	; 28
    6164:	54 e4       	ldi	r21, 0x44	; 68
    6166:	68 d1       	rcall	.+720    	; 0x6438 <__cmpsf2>
    6168:	88 23       	and	r24, r24
    616a:	64 f4       	brge	.+24     	; 0x6184 <main+0x718>
    616c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    6170:	81 30       	cpi	r24, 0x01	; 1
    6172:	09 f0       	breq	.+2      	; 0x6176 <main+0x70a>
    6174:	60 c0       	rjmp	.+192    	; 0x6236 <main+0x7ca>
	  {
      flag_mumbai = 0;
    6176:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_india = 1;
    617a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <flag_india>
	  flag_france = 0;
    617e:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    6182:	5f c0       	rjmp	.+190    	; 0x6242 <main+0x7d6>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6184:	c7 01       	movw	r24, r14
    6186:	b6 01       	movw	r22, r12
    6188:	f9 d1       	rcall	.+1010   	; 0x657c <__floatsisf>
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	30 e0       	ldi	r19, 0x00	; 0
    618e:	48 ec       	ldi	r20, 0xC8	; 200
    6190:	52 e4       	ldi	r21, 0x42	; 66
    6192:	59 d1       	rcall	.+690    	; 0x6446 <__divsf3>
    6194:	28 eb       	ldi	r18, 0xB8	; 184
    6196:	3e e1       	ldi	r19, 0x1E	; 30
    6198:	45 e1       	ldi	r20, 0x15	; 21
    619a:	50 e4       	ldi	r21, 0x40	; 64
    619c:	6f d0       	rcall	.+222    	; 0x627c <__subsf3>
    619e:	6b 01       	movw	r12, r22
    61a0:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    61a2:	c5 01       	movw	r24, r10
    61a4:	b4 01       	movw	r22, r8
    61a6:	ea d1       	rcall	.+980    	; 0x657c <__floatsisf>
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	48 ec       	ldi	r20, 0xC8	; 200
    61ae:	52 e4       	ldi	r21, 0x42	; 66
    61b0:	4a d1       	rcall	.+660    	; 0x6446 <__divsf3>
    61b2:	23 e3       	ldi	r18, 0x33	; 51
    61b4:	33 e3       	ldi	r19, 0x33	; 51
    61b6:	43 e4       	ldi	r20, 0x43	; 67
    61b8:	52 e4       	ldi	r21, 0x42	; 66
    61ba:	60 d0       	rcall	.+192    	; 0x627c <__subsf3>
    61bc:	4b 01       	movw	r8, r22
    61be:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    61c0:	c3 01       	movw	r24, r6
    61c2:	b2 01       	movw	r22, r4
    61c4:	db d1       	rcall	.+950    	; 0x657c <__floatsisf>
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	48 ec       	ldi	r20, 0xC8	; 200
    61cc:	52 e4       	ldi	r21, 0x42	; 66
    61ce:	3b d1       	rcall	.+630    	; 0x6446 <__divsf3>
    61d0:	28 ed       	ldi	r18, 0xD8	; 216
    61d2:	3f e0       	ldi	r19, 0x0F	; 15
    61d4:	49 e4       	ldi	r20, 0x49	; 73
    61d6:	50 e4       	ldi	r21, 0x40	; 64
    61d8:	54 d3       	rcall	.+1704   	; 0x6882 <__mulsf3>
    61da:	20 e0       	ldi	r18, 0x00	; 0
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	44 e3       	ldi	r20, 0x34	; 52
    61e0:	53 e4       	ldi	r21, 0x43	; 67
    61e2:	31 d1       	rcall	.+610    	; 0x6446 <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    61e4:	2d d1       	rcall	.+602    	; 0x6440 <cos>
    61e6:	2b 01       	movw	r4, r22
    61e8:	3c 01       	movw	r6, r24
    61ea:	a5 01       	movw	r20, r10
    61ec:	94 01       	movw	r18, r8
    61ee:	c5 01       	movw	r24, r10
    61f0:	b4 01       	movw	r22, r8
    61f2:	47 d3       	rcall	.+1678   	; 0x6882 <__mulsf3>
    61f4:	4b 01       	movw	r8, r22
    61f6:	5c 01       	movw	r10, r24
    61f8:	a7 01       	movw	r20, r14
    61fa:	96 01       	movw	r18, r12
    61fc:	c3 01       	movw	r24, r6
    61fe:	b2 01       	movw	r22, r4
    6200:	40 d3       	rcall	.+1664   	; 0x6882 <__mulsf3>
    6202:	a7 01       	movw	r20, r14
    6204:	96 01       	movw	r18, r12
    6206:	3d d3       	rcall	.+1658   	; 0x6882 <__mulsf3>
    6208:	9b 01       	movw	r18, r22
    620a:	ac 01       	movw	r20, r24
    620c:	c5 01       	movw	r24, r10
    620e:	b4 01       	movw	r22, r8
    6210:	36 d0       	rcall	.+108    	; 0x627e <__addsf3>
    6212:	20 e0       	ldi	r18, 0x00	; 0
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	48 ec       	ldi	r20, 0xC8	; 200
    6218:	52 e4       	ldi	r21, 0x42	; 66
    621a:	0e d1       	rcall	.+540    	; 0x6438 <__cmpsf2>
    621c:	88 23       	and	r24, r24
    621e:	5c f4       	brge	.+22     	; 0x6236 <main+0x7ca>
    6220:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    6224:	81 30       	cpi	r24, 0x01	; 1
    6226:	39 f4       	brne	.+14     	; 0x6236 <main+0x7ca>
      {
	  flag_mumbai = 0;
    6228:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_france = 1;
    622c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <flag_france>
	  flag_india = 0;
    6230:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
    6234:	06 c0       	rjmp	.+12     	; 0x6242 <main+0x7d6>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    6236:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
	  flag_india = 0;
    623a:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
	  flag_mumbai = 0;
    623e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    6242:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UniversalCycles>
    6246:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UniversalCycles+0x1>
    624a:	01 96       	adiw	r24, 0x01	; 1
    624c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <UniversalCycles+0x1>
    6250:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <UniversalCycles>
    //}
	//////////////////////////////////
	overflow=tot_overflow-overflow;
    6254:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <tot_overflow>
	counter_value = TCNT1 + (65535-counter_value);
    6258:	8c b5       	in	r24, 0x2c	; 44
    625a:	9d b5       	in	r25, 0x2d	; 45
	//transmit_UART0((uint8_t)(net_time>>8));
	//transmit_UART0((uint8_t)(net_time>>16));
	//transmit_UART0((uint8_t)(net_time>>24));
	//transmit_UART0('\r');
	//////////////////////////////////
	timer_wait_reset();
    625c:	b0 db       	rcall	.-2208   	; 0x59be <timer_wait_reset>
	//wdt_disable();
  }
    625e:	4c cc       	rjmp	.-1896   	; 0x5af8 <main+0x8c>

00006260 <acos>:
    6260:	9f 93       	push	r25
    6262:	9f 77       	andi	r25, 0x7F	; 127
    6264:	04 d2       	rcall	.+1032   	; 0x666e <__fp_arccos>
    6266:	0f 90       	pop	r0
    6268:	00 20       	and	r0, r0
    626a:	3a f4       	brpl	.+14     	; 0x627a <acos+0x1a>
    626c:	90 58       	subi	r25, 0x80	; 128
    626e:	a2 ea       	ldi	r26, 0xA2	; 162
    6270:	2a ed       	ldi	r18, 0xDA	; 218
    6272:	3f e0       	ldi	r19, 0x0F	; 15
    6274:	49 e4       	ldi	r20, 0x49	; 73
    6276:	50 e4       	ldi	r21, 0x40	; 64
    6278:	13 d0       	rcall	.+38     	; 0x62a0 <__addsf3x>
    627a:	ad c2       	rjmp	.+1370   	; 0x67d6 <__fp_round>

0000627c <__subsf3>:
    627c:	50 58       	subi	r21, 0x80	; 128

0000627e <__addsf3>:
    627e:	bb 27       	eor	r27, r27
    6280:	aa 27       	eor	r26, r26
    6282:	0e d0       	rcall	.+28     	; 0x62a0 <__addsf3x>
    6284:	a8 c2       	rjmp	.+1360   	; 0x67d6 <__fp_round>
    6286:	71 d2       	rcall	.+1250   	; 0x676a <__fp_pscA>
    6288:	30 f0       	brcs	.+12     	; 0x6296 <__addsf3+0x18>
    628a:	76 d2       	rcall	.+1260   	; 0x6778 <__fp_pscB>
    628c:	20 f0       	brcs	.+8      	; 0x6296 <__addsf3+0x18>
    628e:	31 f4       	brne	.+12     	; 0x629c <__addsf3+0x1e>
    6290:	9f 3f       	cpi	r25, 0xFF	; 255
    6292:	11 f4       	brne	.+4      	; 0x6298 <__addsf3+0x1a>
    6294:	1e f4       	brtc	.+6      	; 0x629c <__addsf3+0x1e>
    6296:	30 c2       	rjmp	.+1120   	; 0x66f8 <__fp_nan>
    6298:	0e f4       	brtc	.+2      	; 0x629c <__addsf3+0x1e>
    629a:	e0 95       	com	r30
    629c:	e7 fb       	bst	r30, 7
    629e:	26 c2       	rjmp	.+1100   	; 0x66ec <__fp_inf>

000062a0 <__addsf3x>:
    62a0:	e9 2f       	mov	r30, r25
    62a2:	bb d2       	rcall	.+1398   	; 0x681a <__fp_split3>
    62a4:	80 f3       	brcs	.-32     	; 0x6286 <__addsf3+0x8>
    62a6:	ba 17       	cp	r27, r26
    62a8:	62 07       	cpc	r22, r18
    62aa:	73 07       	cpc	r23, r19
    62ac:	84 07       	cpc	r24, r20
    62ae:	95 07       	cpc	r25, r21
    62b0:	18 f0       	brcs	.+6      	; 0x62b8 <__addsf3x+0x18>
    62b2:	71 f4       	brne	.+28     	; 0x62d0 <__addsf3x+0x30>
    62b4:	9e f5       	brtc	.+102    	; 0x631c <__addsf3x+0x7c>
    62b6:	d3 c2       	rjmp	.+1446   	; 0x685e <__fp_zero>
    62b8:	0e f4       	brtc	.+2      	; 0x62bc <__addsf3x+0x1c>
    62ba:	e0 95       	com	r30
    62bc:	0b 2e       	mov	r0, r27
    62be:	ba 2f       	mov	r27, r26
    62c0:	a0 2d       	mov	r26, r0
    62c2:	0b 01       	movw	r0, r22
    62c4:	b9 01       	movw	r22, r18
    62c6:	90 01       	movw	r18, r0
    62c8:	0c 01       	movw	r0, r24
    62ca:	ca 01       	movw	r24, r20
    62cc:	a0 01       	movw	r20, r0
    62ce:	11 24       	eor	r1, r1
    62d0:	ff 27       	eor	r31, r31
    62d2:	59 1b       	sub	r21, r25
    62d4:	99 f0       	breq	.+38     	; 0x62fc <__addsf3x+0x5c>
    62d6:	59 3f       	cpi	r21, 0xF9	; 249
    62d8:	50 f4       	brcc	.+20     	; 0x62ee <__addsf3x+0x4e>
    62da:	50 3e       	cpi	r21, 0xE0	; 224
    62dc:	68 f1       	brcs	.+90     	; 0x6338 <__addsf3x+0x98>
    62de:	1a 16       	cp	r1, r26
    62e0:	f0 40       	sbci	r31, 0x00	; 0
    62e2:	a2 2f       	mov	r26, r18
    62e4:	23 2f       	mov	r18, r19
    62e6:	34 2f       	mov	r19, r20
    62e8:	44 27       	eor	r20, r20
    62ea:	58 5f       	subi	r21, 0xF8	; 248
    62ec:	f3 cf       	rjmp	.-26     	; 0x62d4 <__addsf3x+0x34>
    62ee:	46 95       	lsr	r20
    62f0:	37 95       	ror	r19
    62f2:	27 95       	ror	r18
    62f4:	a7 95       	ror	r26
    62f6:	f0 40       	sbci	r31, 0x00	; 0
    62f8:	53 95       	inc	r21
    62fa:	c9 f7       	brne	.-14     	; 0x62ee <__addsf3x+0x4e>
    62fc:	7e f4       	brtc	.+30     	; 0x631c <__addsf3x+0x7c>
    62fe:	1f 16       	cp	r1, r31
    6300:	ba 0b       	sbc	r27, r26
    6302:	62 0b       	sbc	r22, r18
    6304:	73 0b       	sbc	r23, r19
    6306:	84 0b       	sbc	r24, r20
    6308:	ba f0       	brmi	.+46     	; 0x6338 <__addsf3x+0x98>
    630a:	91 50       	subi	r25, 0x01	; 1
    630c:	a1 f0       	breq	.+40     	; 0x6336 <__addsf3x+0x96>
    630e:	ff 0f       	add	r31, r31
    6310:	bb 1f       	adc	r27, r27
    6312:	66 1f       	adc	r22, r22
    6314:	77 1f       	adc	r23, r23
    6316:	88 1f       	adc	r24, r24
    6318:	c2 f7       	brpl	.-16     	; 0x630a <__addsf3x+0x6a>
    631a:	0e c0       	rjmp	.+28     	; 0x6338 <__addsf3x+0x98>
    631c:	ba 0f       	add	r27, r26
    631e:	62 1f       	adc	r22, r18
    6320:	73 1f       	adc	r23, r19
    6322:	84 1f       	adc	r24, r20
    6324:	48 f4       	brcc	.+18     	; 0x6338 <__addsf3x+0x98>
    6326:	87 95       	ror	r24
    6328:	77 95       	ror	r23
    632a:	67 95       	ror	r22
    632c:	b7 95       	ror	r27
    632e:	f7 95       	ror	r31
    6330:	9e 3f       	cpi	r25, 0xFE	; 254
    6332:	08 f0       	brcs	.+2      	; 0x6336 <__addsf3x+0x96>
    6334:	b3 cf       	rjmp	.-154    	; 0x629c <__addsf3+0x1e>
    6336:	93 95       	inc	r25
    6338:	88 0f       	add	r24, r24
    633a:	08 f0       	brcs	.+2      	; 0x633e <__addsf3x+0x9e>
    633c:	99 27       	eor	r25, r25
    633e:	ee 0f       	add	r30, r30
    6340:	97 95       	ror	r25
    6342:	87 95       	ror	r24
    6344:	08 95       	ret

00006346 <asin>:
    6346:	9f 93       	push	r25
    6348:	9f 77       	andi	r25, 0x7F	; 127
    634a:	ee e3       	ldi	r30, 0x3E	; 62
    634c:	89 37       	cpi	r24, 0x79	; 121
    634e:	9e 07       	cpc	r25, r30
    6350:	20 f4       	brcc	.+8      	; 0x635a <asin+0x14>
    6352:	e2 ea       	ldi	r30, 0xA2	; 162
    6354:	f0 e0       	ldi	r31, 0x00	; 0
    6356:	f8 d1       	rcall	.+1008   	; 0x6748 <__fp_powsodd>
    6358:	09 c0       	rjmp	.+18     	; 0x636c <asin+0x26>
    635a:	89 d1       	rcall	.+786    	; 0x666e <__fp_arccos>
    635c:	90 58       	subi	r25, 0x80	; 128
    635e:	a2 ea       	ldi	r26, 0xA2	; 162
    6360:	2a ed       	ldi	r18, 0xDA	; 218
    6362:	3f e0       	ldi	r19, 0x0F	; 15
    6364:	49 ec       	ldi	r20, 0xC9	; 201
    6366:	5f e3       	ldi	r21, 0x3F	; 63
    6368:	9b df       	rcall	.-202    	; 0x62a0 <__addsf3x>
    636a:	35 d2       	rcall	.+1130   	; 0x67d6 <__fp_round>
    636c:	0f 90       	pop	r0
    636e:	07 fc       	sbrc	r0, 7
    6370:	90 58       	subi	r25, 0x80	; 128
    6372:	08 95       	ret
    6374:	fa d1       	rcall	.+1012   	; 0x676a <__fp_pscA>
    6376:	58 f0       	brcs	.+22     	; 0x638e <asin+0x48>
    6378:	80 e8       	ldi	r24, 0x80	; 128
    637a:	91 e0       	ldi	r25, 0x01	; 1
    637c:	09 f4       	brne	.+2      	; 0x6380 <asin+0x3a>
    637e:	9e ef       	ldi	r25, 0xFE	; 254
    6380:	fb d1       	rcall	.+1014   	; 0x6778 <__fp_pscB>
    6382:	28 f0       	brcs	.+10     	; 0x638e <asin+0x48>
    6384:	40 e8       	ldi	r20, 0x80	; 128
    6386:	51 e0       	ldi	r21, 0x01	; 1
    6388:	59 f4       	brne	.+22     	; 0x63a0 <atan2+0xe>
    638a:	5e ef       	ldi	r21, 0xFE	; 254
    638c:	09 c0       	rjmp	.+18     	; 0x63a0 <atan2+0xe>
    638e:	b4 c1       	rjmp	.+872    	; 0x66f8 <__fp_nan>
    6390:	66 c2       	rjmp	.+1228   	; 0x685e <__fp_zero>

00006392 <atan2>:
    6392:	e9 2f       	mov	r30, r25
    6394:	e0 78       	andi	r30, 0x80	; 128
    6396:	41 d2       	rcall	.+1154   	; 0x681a <__fp_split3>
    6398:	68 f3       	brcs	.-38     	; 0x6374 <asin+0x2e>
    639a:	09 2e       	mov	r0, r25
    639c:	05 2a       	or	r0, r21
    639e:	c1 f3       	breq	.-16     	; 0x6390 <asin+0x4a>
    63a0:	26 17       	cp	r18, r22
    63a2:	37 07       	cpc	r19, r23
    63a4:	48 07       	cpc	r20, r24
    63a6:	59 07       	cpc	r21, r25
    63a8:	38 f0       	brcs	.+14     	; 0x63b8 <atan2+0x26>
    63aa:	0e 2e       	mov	r0, r30
    63ac:	07 f8       	bld	r0, 7
    63ae:	e0 25       	eor	r30, r0
    63b0:	69 f0       	breq	.+26     	; 0x63cc <atan2+0x3a>
    63b2:	e0 25       	eor	r30, r0
    63b4:	e0 64       	ori	r30, 0x40	; 64
    63b6:	0a c0       	rjmp	.+20     	; 0x63cc <atan2+0x3a>
    63b8:	ef 63       	ori	r30, 0x3F	; 63
    63ba:	07 f8       	bld	r0, 7
    63bc:	00 94       	com	r0
    63be:	07 fa       	bst	r0, 7
    63c0:	db 01       	movw	r26, r22
    63c2:	b9 01       	movw	r22, r18
    63c4:	9d 01       	movw	r18, r26
    63c6:	dc 01       	movw	r26, r24
    63c8:	ca 01       	movw	r24, r20
    63ca:	ad 01       	movw	r20, r26
    63cc:	ef 93       	push	r30
    63ce:	4a d0       	rcall	.+148    	; 0x6464 <__divsf3_pse>
    63d0:	02 d2       	rcall	.+1028   	; 0x67d6 <__fp_round>
    63d2:	0a d0       	rcall	.+20     	; 0x63e8 <atan>
    63d4:	5f 91       	pop	r21
    63d6:	55 23       	and	r21, r21
    63d8:	31 f0       	breq	.+12     	; 0x63e6 <atan2+0x54>
    63da:	2b ed       	ldi	r18, 0xDB	; 219
    63dc:	3f e0       	ldi	r19, 0x0F	; 15
    63de:	49 e4       	ldi	r20, 0x49	; 73
    63e0:	50 fd       	sbrc	r21, 0
    63e2:	49 ec       	ldi	r20, 0xC9	; 201
    63e4:	4c cf       	rjmp	.-360    	; 0x627e <__addsf3>
    63e6:	08 95       	ret

000063e8 <atan>:
    63e8:	df 93       	push	r29
    63ea:	dd 27       	eor	r29, r29
    63ec:	b9 2f       	mov	r27, r25
    63ee:	bf 77       	andi	r27, 0x7F	; 127
    63f0:	40 e8       	ldi	r20, 0x80	; 128
    63f2:	5f e3       	ldi	r21, 0x3F	; 63
    63f4:	16 16       	cp	r1, r22
    63f6:	17 06       	cpc	r1, r23
    63f8:	48 07       	cpc	r20, r24
    63fa:	5b 07       	cpc	r21, r27
    63fc:	10 f4       	brcc	.+4      	; 0x6402 <atan+0x1a>
    63fe:	d9 2f       	mov	r29, r25
    6400:	39 d2       	rcall	.+1138   	; 0x6874 <inverse>
    6402:	9f 93       	push	r25
    6404:	8f 93       	push	r24
    6406:	7f 93       	push	r23
    6408:	6f 93       	push	r22
    640a:	32 d3       	rcall	.+1636   	; 0x6a70 <square>
    640c:	e6 eb       	ldi	r30, 0xB6	; 182
    640e:	f0 e0       	ldi	r31, 0x00	; 0
    6410:	76 d1       	rcall	.+748    	; 0x66fe <__fp_powser>
    6412:	e1 d1       	rcall	.+962    	; 0x67d6 <__fp_round>
    6414:	2f 91       	pop	r18
    6416:	3f 91       	pop	r19
    6418:	4f 91       	pop	r20
    641a:	5f 91       	pop	r21
    641c:	3e d2       	rcall	.+1148   	; 0x689a <__mulsf3x>
    641e:	dd 23       	and	r29, r29
    6420:	49 f0       	breq	.+18     	; 0x6434 <atan+0x4c>
    6422:	90 58       	subi	r25, 0x80	; 128
    6424:	a2 ea       	ldi	r26, 0xA2	; 162
    6426:	2a ed       	ldi	r18, 0xDA	; 218
    6428:	3f e0       	ldi	r19, 0x0F	; 15
    642a:	49 ec       	ldi	r20, 0xC9	; 201
    642c:	5f e3       	ldi	r21, 0x3F	; 63
    642e:	d0 78       	andi	r29, 0x80	; 128
    6430:	5d 27       	eor	r21, r29
    6432:	36 df       	rcall	.-404    	; 0x62a0 <__addsf3x>
    6434:	df 91       	pop	r29
    6436:	cf c1       	rjmp	.+926    	; 0x67d6 <__fp_round>

00006438 <__cmpsf2>:
    6438:	35 d1       	rcall	.+618    	; 0x66a4 <__fp_cmp>
    643a:	08 f4       	brcc	.+2      	; 0x643e <__cmpsf2+0x6>
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	08 95       	ret

00006440 <cos>:
    6440:	a3 d1       	rcall	.+838    	; 0x6788 <__fp_rempio2>
    6442:	e3 95       	inc	r30
    6444:	d9 c1       	rjmp	.+946    	; 0x67f8 <__fp_sinus>

00006446 <__divsf3>:
    6446:	0c d0       	rcall	.+24     	; 0x6460 <__divsf3x>
    6448:	c6 c1       	rjmp	.+908    	; 0x67d6 <__fp_round>
    644a:	96 d1       	rcall	.+812    	; 0x6778 <__fp_pscB>
    644c:	40 f0       	brcs	.+16     	; 0x645e <__divsf3+0x18>
    644e:	8d d1       	rcall	.+794    	; 0x676a <__fp_pscA>
    6450:	30 f0       	brcs	.+12     	; 0x645e <__divsf3+0x18>
    6452:	21 f4       	brne	.+8      	; 0x645c <__divsf3+0x16>
    6454:	5f 3f       	cpi	r21, 0xFF	; 255
    6456:	19 f0       	breq	.+6      	; 0x645e <__divsf3+0x18>
    6458:	49 c1       	rjmp	.+658    	; 0x66ec <__fp_inf>
    645a:	51 11       	cpse	r21, r1
    645c:	01 c2       	rjmp	.+1026   	; 0x6860 <__fp_szero>
    645e:	4c c1       	rjmp	.+664    	; 0x66f8 <__fp_nan>

00006460 <__divsf3x>:
    6460:	dc d1       	rcall	.+952    	; 0x681a <__fp_split3>
    6462:	98 f3       	brcs	.-26     	; 0x644a <__divsf3+0x4>

00006464 <__divsf3_pse>:
    6464:	99 23       	and	r25, r25
    6466:	c9 f3       	breq	.-14     	; 0x645a <__divsf3+0x14>
    6468:	55 23       	and	r21, r21
    646a:	b1 f3       	breq	.-20     	; 0x6458 <__divsf3+0x12>
    646c:	95 1b       	sub	r25, r21
    646e:	55 0b       	sbc	r21, r21
    6470:	bb 27       	eor	r27, r27
    6472:	aa 27       	eor	r26, r26
    6474:	62 17       	cp	r22, r18
    6476:	73 07       	cpc	r23, r19
    6478:	84 07       	cpc	r24, r20
    647a:	38 f0       	brcs	.+14     	; 0x648a <__divsf3_pse+0x26>
    647c:	9f 5f       	subi	r25, 0xFF	; 255
    647e:	5f 4f       	sbci	r21, 0xFF	; 255
    6480:	22 0f       	add	r18, r18
    6482:	33 1f       	adc	r19, r19
    6484:	44 1f       	adc	r20, r20
    6486:	aa 1f       	adc	r26, r26
    6488:	a9 f3       	breq	.-22     	; 0x6474 <__divsf3_pse+0x10>
    648a:	33 d0       	rcall	.+102    	; 0x64f2 <__divsf3_pse+0x8e>
    648c:	0e 2e       	mov	r0, r30
    648e:	3a f0       	brmi	.+14     	; 0x649e <__divsf3_pse+0x3a>
    6490:	e0 e8       	ldi	r30, 0x80	; 128
    6492:	30 d0       	rcall	.+96     	; 0x64f4 <__divsf3_pse+0x90>
    6494:	91 50       	subi	r25, 0x01	; 1
    6496:	50 40       	sbci	r21, 0x00	; 0
    6498:	e6 95       	lsr	r30
    649a:	00 1c       	adc	r0, r0
    649c:	ca f7       	brpl	.-14     	; 0x6490 <__divsf3_pse+0x2c>
    649e:	29 d0       	rcall	.+82     	; 0x64f2 <__divsf3_pse+0x8e>
    64a0:	fe 2f       	mov	r31, r30
    64a2:	27 d0       	rcall	.+78     	; 0x64f2 <__divsf3_pse+0x8e>
    64a4:	66 0f       	add	r22, r22
    64a6:	77 1f       	adc	r23, r23
    64a8:	88 1f       	adc	r24, r24
    64aa:	bb 1f       	adc	r27, r27
    64ac:	26 17       	cp	r18, r22
    64ae:	37 07       	cpc	r19, r23
    64b0:	48 07       	cpc	r20, r24
    64b2:	ab 07       	cpc	r26, r27
    64b4:	b0 e8       	ldi	r27, 0x80	; 128
    64b6:	09 f0       	breq	.+2      	; 0x64ba <__divsf3_pse+0x56>
    64b8:	bb 0b       	sbc	r27, r27
    64ba:	80 2d       	mov	r24, r0
    64bc:	bf 01       	movw	r22, r30
    64be:	ff 27       	eor	r31, r31
    64c0:	93 58       	subi	r25, 0x83	; 131
    64c2:	5f 4f       	sbci	r21, 0xFF	; 255
    64c4:	2a f0       	brmi	.+10     	; 0x64d0 <__divsf3_pse+0x6c>
    64c6:	9e 3f       	cpi	r25, 0xFE	; 254
    64c8:	51 05       	cpc	r21, r1
    64ca:	68 f0       	brcs	.+26     	; 0x64e6 <__divsf3_pse+0x82>
    64cc:	0f c1       	rjmp	.+542    	; 0x66ec <__fp_inf>
    64ce:	c8 c1       	rjmp	.+912    	; 0x6860 <__fp_szero>
    64d0:	5f 3f       	cpi	r21, 0xFF	; 255
    64d2:	ec f3       	brlt	.-6      	; 0x64ce <__divsf3_pse+0x6a>
    64d4:	98 3e       	cpi	r25, 0xE8	; 232
    64d6:	dc f3       	brlt	.-10     	; 0x64ce <__divsf3_pse+0x6a>
    64d8:	86 95       	lsr	r24
    64da:	77 95       	ror	r23
    64dc:	67 95       	ror	r22
    64de:	b7 95       	ror	r27
    64e0:	f7 95       	ror	r31
    64e2:	9f 5f       	subi	r25, 0xFF	; 255
    64e4:	c9 f7       	brne	.-14     	; 0x64d8 <__divsf3_pse+0x74>
    64e6:	88 0f       	add	r24, r24
    64e8:	91 1d       	adc	r25, r1
    64ea:	96 95       	lsr	r25
    64ec:	87 95       	ror	r24
    64ee:	97 f9       	bld	r25, 7
    64f0:	08 95       	ret
    64f2:	e1 e0       	ldi	r30, 0x01	; 1
    64f4:	66 0f       	add	r22, r22
    64f6:	77 1f       	adc	r23, r23
    64f8:	88 1f       	adc	r24, r24
    64fa:	bb 1f       	adc	r27, r27
    64fc:	62 17       	cp	r22, r18
    64fe:	73 07       	cpc	r23, r19
    6500:	84 07       	cpc	r24, r20
    6502:	ba 07       	cpc	r27, r26
    6504:	20 f0       	brcs	.+8      	; 0x650e <__divsf3_pse+0xaa>
    6506:	62 1b       	sub	r22, r18
    6508:	73 0b       	sbc	r23, r19
    650a:	84 0b       	sbc	r24, r20
    650c:	ba 0b       	sbc	r27, r26
    650e:	ee 1f       	adc	r30, r30
    6510:	88 f7       	brcc	.-30     	; 0x64f4 <__divsf3_pse+0x90>
    6512:	e0 95       	com	r30
    6514:	08 95       	ret

00006516 <__fixsfsi>:
    6516:	04 d0       	rcall	.+8      	; 0x6520 <__fixunssfsi>
    6518:	68 94       	set
    651a:	b1 11       	cpse	r27, r1
    651c:	a1 c1       	rjmp	.+834    	; 0x6860 <__fp_szero>
    651e:	08 95       	ret

00006520 <__fixunssfsi>:
    6520:	84 d1       	rcall	.+776    	; 0x682a <__fp_splitA>
    6522:	88 f0       	brcs	.+34     	; 0x6546 <__fixunssfsi+0x26>
    6524:	9f 57       	subi	r25, 0x7F	; 127
    6526:	90 f0       	brcs	.+36     	; 0x654c <__fixunssfsi+0x2c>
    6528:	b9 2f       	mov	r27, r25
    652a:	99 27       	eor	r25, r25
    652c:	b7 51       	subi	r27, 0x17	; 23
    652e:	a0 f0       	brcs	.+40     	; 0x6558 <__fixunssfsi+0x38>
    6530:	d1 f0       	breq	.+52     	; 0x6566 <__fixunssfsi+0x46>
    6532:	66 0f       	add	r22, r22
    6534:	77 1f       	adc	r23, r23
    6536:	88 1f       	adc	r24, r24
    6538:	99 1f       	adc	r25, r25
    653a:	1a f0       	brmi	.+6      	; 0x6542 <__fixunssfsi+0x22>
    653c:	ba 95       	dec	r27
    653e:	c9 f7       	brne	.-14     	; 0x6532 <__fixunssfsi+0x12>
    6540:	12 c0       	rjmp	.+36     	; 0x6566 <__fixunssfsi+0x46>
    6542:	b1 30       	cpi	r27, 0x01	; 1
    6544:	81 f0       	breq	.+32     	; 0x6566 <__fixunssfsi+0x46>
    6546:	8b d1       	rcall	.+790    	; 0x685e <__fp_zero>
    6548:	b1 e0       	ldi	r27, 0x01	; 1
    654a:	08 95       	ret
    654c:	88 c1       	rjmp	.+784    	; 0x685e <__fp_zero>
    654e:	67 2f       	mov	r22, r23
    6550:	78 2f       	mov	r23, r24
    6552:	88 27       	eor	r24, r24
    6554:	b8 5f       	subi	r27, 0xF8	; 248
    6556:	39 f0       	breq	.+14     	; 0x6566 <__fixunssfsi+0x46>
    6558:	b9 3f       	cpi	r27, 0xF9	; 249
    655a:	cc f3       	brlt	.-14     	; 0x654e <__fixunssfsi+0x2e>
    655c:	86 95       	lsr	r24
    655e:	77 95       	ror	r23
    6560:	67 95       	ror	r22
    6562:	b3 95       	inc	r27
    6564:	d9 f7       	brne	.-10     	; 0x655c <__fixunssfsi+0x3c>
    6566:	3e f4       	brtc	.+14     	; 0x6576 <__fixunssfsi+0x56>
    6568:	90 95       	com	r25
    656a:	80 95       	com	r24
    656c:	70 95       	com	r23
    656e:	61 95       	neg	r22
    6570:	7f 4f       	sbci	r23, 0xFF	; 255
    6572:	8f 4f       	sbci	r24, 0xFF	; 255
    6574:	9f 4f       	sbci	r25, 0xFF	; 255
    6576:	08 95       	ret

00006578 <__floatunsisf>:
    6578:	e8 94       	clt
    657a:	09 c0       	rjmp	.+18     	; 0x658e <__floatsisf+0x12>

0000657c <__floatsisf>:
    657c:	97 fb       	bst	r25, 7
    657e:	3e f4       	brtc	.+14     	; 0x658e <__floatsisf+0x12>
    6580:	90 95       	com	r25
    6582:	80 95       	com	r24
    6584:	70 95       	com	r23
    6586:	61 95       	neg	r22
    6588:	7f 4f       	sbci	r23, 0xFF	; 255
    658a:	8f 4f       	sbci	r24, 0xFF	; 255
    658c:	9f 4f       	sbci	r25, 0xFF	; 255
    658e:	99 23       	and	r25, r25
    6590:	a9 f0       	breq	.+42     	; 0x65bc <__floatsisf+0x40>
    6592:	f9 2f       	mov	r31, r25
    6594:	96 e9       	ldi	r25, 0x96	; 150
    6596:	bb 27       	eor	r27, r27
    6598:	93 95       	inc	r25
    659a:	f6 95       	lsr	r31
    659c:	87 95       	ror	r24
    659e:	77 95       	ror	r23
    65a0:	67 95       	ror	r22
    65a2:	b7 95       	ror	r27
    65a4:	f1 11       	cpse	r31, r1
    65a6:	f8 cf       	rjmp	.-16     	; 0x6598 <__floatsisf+0x1c>
    65a8:	fa f4       	brpl	.+62     	; 0x65e8 <__floatsisf+0x6c>
    65aa:	bb 0f       	add	r27, r27
    65ac:	11 f4       	brne	.+4      	; 0x65b2 <__floatsisf+0x36>
    65ae:	60 ff       	sbrs	r22, 0
    65b0:	1b c0       	rjmp	.+54     	; 0x65e8 <__floatsisf+0x6c>
    65b2:	6f 5f       	subi	r22, 0xFF	; 255
    65b4:	7f 4f       	sbci	r23, 0xFF	; 255
    65b6:	8f 4f       	sbci	r24, 0xFF	; 255
    65b8:	9f 4f       	sbci	r25, 0xFF	; 255
    65ba:	16 c0       	rjmp	.+44     	; 0x65e8 <__floatsisf+0x6c>
    65bc:	88 23       	and	r24, r24
    65be:	11 f0       	breq	.+4      	; 0x65c4 <__floatsisf+0x48>
    65c0:	96 e9       	ldi	r25, 0x96	; 150
    65c2:	11 c0       	rjmp	.+34     	; 0x65e6 <__floatsisf+0x6a>
    65c4:	77 23       	and	r23, r23
    65c6:	21 f0       	breq	.+8      	; 0x65d0 <__floatsisf+0x54>
    65c8:	9e e8       	ldi	r25, 0x8E	; 142
    65ca:	87 2f       	mov	r24, r23
    65cc:	76 2f       	mov	r23, r22
    65ce:	05 c0       	rjmp	.+10     	; 0x65da <__floatsisf+0x5e>
    65d0:	66 23       	and	r22, r22
    65d2:	71 f0       	breq	.+28     	; 0x65f0 <__floatsisf+0x74>
    65d4:	96 e8       	ldi	r25, 0x86	; 134
    65d6:	86 2f       	mov	r24, r22
    65d8:	70 e0       	ldi	r23, 0x00	; 0
    65da:	60 e0       	ldi	r22, 0x00	; 0
    65dc:	2a f0       	brmi	.+10     	; 0x65e8 <__floatsisf+0x6c>
    65de:	9a 95       	dec	r25
    65e0:	66 0f       	add	r22, r22
    65e2:	77 1f       	adc	r23, r23
    65e4:	88 1f       	adc	r24, r24
    65e6:	da f7       	brpl	.-10     	; 0x65de <__floatsisf+0x62>
    65e8:	88 0f       	add	r24, r24
    65ea:	96 95       	lsr	r25
    65ec:	87 95       	ror	r24
    65ee:	97 f9       	bld	r25, 7
    65f0:	08 95       	ret

000065f2 <__floatundisf>:
    65f2:	e8 94       	clt

000065f4 <__fp_di2sf>:
    65f4:	f9 2f       	mov	r31, r25
    65f6:	96 eb       	ldi	r25, 0xB6	; 182
    65f8:	ff 23       	and	r31, r31
    65fa:	81 f0       	breq	.+32     	; 0x661c <__fp_di2sf+0x28>
    65fc:	12 16       	cp	r1, r18
    65fe:	13 06       	cpc	r1, r19
    6600:	14 06       	cpc	r1, r20
    6602:	44 0b       	sbc	r20, r20
    6604:	93 95       	inc	r25
    6606:	f6 95       	lsr	r31
    6608:	87 95       	ror	r24
    660a:	77 95       	ror	r23
    660c:	67 95       	ror	r22
    660e:	57 95       	ror	r21
    6610:	40 40       	sbci	r20, 0x00	; 0
    6612:	ff 23       	and	r31, r31
    6614:	b9 f7       	brne	.-18     	; 0x6604 <__fp_di2sf+0x10>
    6616:	1b c0       	rjmp	.+54     	; 0x664e <__fp_di2sf+0x5a>
    6618:	99 27       	eor	r25, r25
    661a:	08 95       	ret
    661c:	88 23       	and	r24, r24
    661e:	51 f4       	brne	.+20     	; 0x6634 <__fp_di2sf+0x40>
    6620:	98 50       	subi	r25, 0x08	; 8
    6622:	d2 f7       	brpl	.-12     	; 0x6618 <__fp_di2sf+0x24>
    6624:	87 2b       	or	r24, r23
    6626:	76 2f       	mov	r23, r22
    6628:	65 2f       	mov	r22, r21
    662a:	54 2f       	mov	r21, r20
    662c:	43 2f       	mov	r20, r19
    662e:	32 2f       	mov	r19, r18
    6630:	20 e0       	ldi	r18, 0x00	; 0
    6632:	b1 f3       	breq	.-20     	; 0x6620 <__fp_di2sf+0x2c>
    6634:	12 16       	cp	r1, r18
    6636:	13 06       	cpc	r1, r19
    6638:	14 06       	cpc	r1, r20
    663a:	44 0b       	sbc	r20, r20
    663c:	88 23       	and	r24, r24
    663e:	3a f0       	brmi	.+14     	; 0x664e <__fp_di2sf+0x5a>
    6640:	9a 95       	dec	r25
    6642:	44 0f       	add	r20, r20
    6644:	55 1f       	adc	r21, r21
    6646:	66 1f       	adc	r22, r22
    6648:	77 1f       	adc	r23, r23
    664a:	88 1f       	adc	r24, r24
    664c:	ca f7       	brpl	.-14     	; 0x6640 <__fp_di2sf+0x4c>
    664e:	55 23       	and	r21, r21
    6650:	4a f4       	brpl	.+18     	; 0x6664 <__fp_di2sf+0x70>
    6652:	44 0f       	add	r20, r20
    6654:	55 1f       	adc	r21, r21
    6656:	11 f4       	brne	.+4      	; 0x665c <__fp_di2sf+0x68>
    6658:	60 ff       	sbrs	r22, 0
    665a:	04 c0       	rjmp	.+8      	; 0x6664 <__fp_di2sf+0x70>
    665c:	6f 5f       	subi	r22, 0xFF	; 255
    665e:	7f 4f       	sbci	r23, 0xFF	; 255
    6660:	8f 4f       	sbci	r24, 0xFF	; 255
    6662:	9f 4f       	sbci	r25, 0xFF	; 255
    6664:	88 0f       	add	r24, r24
    6666:	96 95       	lsr	r25
    6668:	87 95       	ror	r24
    666a:	97 f9       	bld	r25, 7
    666c:	08 95       	ret

0000666e <__fp_arccos>:
    666e:	df 93       	push	r29
    6670:	cf 93       	push	r28
    6672:	1f 93       	push	r17
    6674:	0f 93       	push	r16
    6676:	8b 01       	movw	r16, r22
    6678:	ec 01       	movw	r28, r24
    667a:	e3 ee       	ldi	r30, 0xE3	; 227
    667c:	f0 e0       	ldi	r31, 0x00	; 0
    667e:	3f d0       	rcall	.+126    	; 0x66fe <__fp_powser>
    6680:	aa d0       	rcall	.+340    	; 0x67d6 <__fp_round>
    6682:	98 01       	movw	r18, r16
    6684:	ae 01       	movw	r20, r28
    6686:	8b 01       	movw	r16, r22
    6688:	ec 01       	movw	r28, r24
    668a:	60 e0       	ldi	r22, 0x00	; 0
    668c:	70 e0       	ldi	r23, 0x00	; 0
    668e:	80 e8       	ldi	r24, 0x80	; 128
    6690:	9f e3       	ldi	r25, 0x3F	; 63
    6692:	f4 dd       	rcall	.-1048   	; 0x627c <__subsf3>
    6694:	af d1       	rcall	.+862    	; 0x69f4 <sqrt>
    6696:	98 01       	movw	r18, r16
    6698:	ae 01       	movw	r20, r28
    669a:	0f 91       	pop	r16
    669c:	1f 91       	pop	r17
    669e:	cf 91       	pop	r28
    66a0:	df 91       	pop	r29
    66a2:	fb c0       	rjmp	.+502    	; 0x689a <__mulsf3x>

000066a4 <__fp_cmp>:
    66a4:	99 0f       	add	r25, r25
    66a6:	00 08       	sbc	r0, r0
    66a8:	55 0f       	add	r21, r21
    66aa:	aa 0b       	sbc	r26, r26
    66ac:	e0 e8       	ldi	r30, 0x80	; 128
    66ae:	fe ef       	ldi	r31, 0xFE	; 254
    66b0:	16 16       	cp	r1, r22
    66b2:	17 06       	cpc	r1, r23
    66b4:	e8 07       	cpc	r30, r24
    66b6:	f9 07       	cpc	r31, r25
    66b8:	c0 f0       	brcs	.+48     	; 0x66ea <__fp_cmp+0x46>
    66ba:	12 16       	cp	r1, r18
    66bc:	13 06       	cpc	r1, r19
    66be:	e4 07       	cpc	r30, r20
    66c0:	f5 07       	cpc	r31, r21
    66c2:	98 f0       	brcs	.+38     	; 0x66ea <__fp_cmp+0x46>
    66c4:	62 1b       	sub	r22, r18
    66c6:	73 0b       	sbc	r23, r19
    66c8:	84 0b       	sbc	r24, r20
    66ca:	95 0b       	sbc	r25, r21
    66cc:	39 f4       	brne	.+14     	; 0x66dc <__fp_cmp+0x38>
    66ce:	0a 26       	eor	r0, r26
    66d0:	61 f0       	breq	.+24     	; 0x66ea <__fp_cmp+0x46>
    66d2:	23 2b       	or	r18, r19
    66d4:	24 2b       	or	r18, r20
    66d6:	25 2b       	or	r18, r21
    66d8:	21 f4       	brne	.+8      	; 0x66e2 <__fp_cmp+0x3e>
    66da:	08 95       	ret
    66dc:	0a 26       	eor	r0, r26
    66de:	09 f4       	brne	.+2      	; 0x66e2 <__fp_cmp+0x3e>
    66e0:	a1 40       	sbci	r26, 0x01	; 1
    66e2:	a6 95       	lsr	r26
    66e4:	8f ef       	ldi	r24, 0xFF	; 255
    66e6:	81 1d       	adc	r24, r1
    66e8:	81 1d       	adc	r24, r1
    66ea:	08 95       	ret

000066ec <__fp_inf>:
    66ec:	97 f9       	bld	r25, 7
    66ee:	9f 67       	ori	r25, 0x7F	; 127
    66f0:	80 e8       	ldi	r24, 0x80	; 128
    66f2:	70 e0       	ldi	r23, 0x00	; 0
    66f4:	60 e0       	ldi	r22, 0x00	; 0
    66f6:	08 95       	ret

000066f8 <__fp_nan>:
    66f8:	9f ef       	ldi	r25, 0xFF	; 255
    66fa:	80 ec       	ldi	r24, 0xC0	; 192
    66fc:	08 95       	ret

000066fe <__fp_powser>:
    66fe:	df 93       	push	r29
    6700:	cf 93       	push	r28
    6702:	1f 93       	push	r17
    6704:	0f 93       	push	r16
    6706:	ff 92       	push	r15
    6708:	ef 92       	push	r14
    670a:	df 92       	push	r13
    670c:	7b 01       	movw	r14, r22
    670e:	8c 01       	movw	r16, r24
    6710:	68 94       	set
    6712:	05 c0       	rjmp	.+10     	; 0x671e <__fp_powser+0x20>
    6714:	da 2e       	mov	r13, r26
    6716:	ef 01       	movw	r28, r30
    6718:	c0 d0       	rcall	.+384    	; 0x689a <__mulsf3x>
    671a:	fe 01       	movw	r30, r28
    671c:	e8 94       	clt
    671e:	a5 91       	lpm	r26, Z+
    6720:	25 91       	lpm	r18, Z+
    6722:	35 91       	lpm	r19, Z+
    6724:	45 91       	lpm	r20, Z+
    6726:	55 91       	lpm	r21, Z+
    6728:	ae f3       	brts	.-22     	; 0x6714 <__fp_powser+0x16>
    672a:	ef 01       	movw	r28, r30
    672c:	b9 dd       	rcall	.-1166   	; 0x62a0 <__addsf3x>
    672e:	fe 01       	movw	r30, r28
    6730:	97 01       	movw	r18, r14
    6732:	a8 01       	movw	r20, r16
    6734:	da 94       	dec	r13
    6736:	79 f7       	brne	.-34     	; 0x6716 <__fp_powser+0x18>
    6738:	df 90       	pop	r13
    673a:	ef 90       	pop	r14
    673c:	ff 90       	pop	r15
    673e:	0f 91       	pop	r16
    6740:	1f 91       	pop	r17
    6742:	cf 91       	pop	r28
    6744:	df 91       	pop	r29
    6746:	08 95       	ret

00006748 <__fp_powsodd>:
    6748:	9f 93       	push	r25
    674a:	8f 93       	push	r24
    674c:	7f 93       	push	r23
    674e:	6f 93       	push	r22
    6750:	ff 93       	push	r31
    6752:	ef 93       	push	r30
    6754:	9b 01       	movw	r18, r22
    6756:	ac 01       	movw	r20, r24
    6758:	94 d0       	rcall	.+296    	; 0x6882 <__mulsf3>
    675a:	ef 91       	pop	r30
    675c:	ff 91       	pop	r31
    675e:	cf df       	rcall	.-98     	; 0x66fe <__fp_powser>
    6760:	2f 91       	pop	r18
    6762:	3f 91       	pop	r19
    6764:	4f 91       	pop	r20
    6766:	5f 91       	pop	r21
    6768:	8c c0       	rjmp	.+280    	; 0x6882 <__mulsf3>

0000676a <__fp_pscA>:
    676a:	00 24       	eor	r0, r0
    676c:	0a 94       	dec	r0
    676e:	16 16       	cp	r1, r22
    6770:	17 06       	cpc	r1, r23
    6772:	18 06       	cpc	r1, r24
    6774:	09 06       	cpc	r0, r25
    6776:	08 95       	ret

00006778 <__fp_pscB>:
    6778:	00 24       	eor	r0, r0
    677a:	0a 94       	dec	r0
    677c:	12 16       	cp	r1, r18
    677e:	13 06       	cpc	r1, r19
    6780:	14 06       	cpc	r1, r20
    6782:	05 06       	cpc	r0, r21
    6784:	08 95       	ret
    6786:	b8 cf       	rjmp	.-144    	; 0x66f8 <__fp_nan>

00006788 <__fp_rempio2>:
    6788:	50 d0       	rcall	.+160    	; 0x682a <__fp_splitA>
    678a:	e8 f3       	brcs	.-6      	; 0x6786 <__fp_pscB+0xe>
    678c:	e8 94       	clt
    678e:	e0 e0       	ldi	r30, 0x00	; 0
    6790:	bb 27       	eor	r27, r27
    6792:	9f 57       	subi	r25, 0x7F	; 127
    6794:	f0 f0       	brcs	.+60     	; 0x67d2 <__fp_rempio2+0x4a>
    6796:	2a ed       	ldi	r18, 0xDA	; 218
    6798:	3f e0       	ldi	r19, 0x0F	; 15
    679a:	49 ec       	ldi	r20, 0xC9	; 201
    679c:	06 c0       	rjmp	.+12     	; 0x67aa <__fp_rempio2+0x22>
    679e:	ee 0f       	add	r30, r30
    67a0:	bb 0f       	add	r27, r27
    67a2:	66 1f       	adc	r22, r22
    67a4:	77 1f       	adc	r23, r23
    67a6:	88 1f       	adc	r24, r24
    67a8:	28 f0       	brcs	.+10     	; 0x67b4 <__fp_rempio2+0x2c>
    67aa:	b2 3a       	cpi	r27, 0xA2	; 162
    67ac:	62 07       	cpc	r22, r18
    67ae:	73 07       	cpc	r23, r19
    67b0:	84 07       	cpc	r24, r20
    67b2:	28 f0       	brcs	.+10     	; 0x67be <__fp_rempio2+0x36>
    67b4:	b2 5a       	subi	r27, 0xA2	; 162
    67b6:	62 0b       	sbc	r22, r18
    67b8:	73 0b       	sbc	r23, r19
    67ba:	84 0b       	sbc	r24, r20
    67bc:	e3 95       	inc	r30
    67be:	9a 95       	dec	r25
    67c0:	72 f7       	brpl	.-36     	; 0x679e <__fp_rempio2+0x16>
    67c2:	80 38       	cpi	r24, 0x80	; 128
    67c4:	30 f4       	brcc	.+12     	; 0x67d2 <__fp_rempio2+0x4a>
    67c6:	9a 95       	dec	r25
    67c8:	bb 0f       	add	r27, r27
    67ca:	66 1f       	adc	r22, r22
    67cc:	77 1f       	adc	r23, r23
    67ce:	88 1f       	adc	r24, r24
    67d0:	d2 f7       	brpl	.-12     	; 0x67c6 <__fp_rempio2+0x3e>
    67d2:	90 48       	sbci	r25, 0x80	; 128
    67d4:	83 c1       	rjmp	.+774    	; 0x6adc <__fp_mpack_finite>

000067d6 <__fp_round>:
    67d6:	09 2e       	mov	r0, r25
    67d8:	03 94       	inc	r0
    67da:	00 0c       	add	r0, r0
    67dc:	11 f4       	brne	.+4      	; 0x67e2 <__fp_round+0xc>
    67de:	88 23       	and	r24, r24
    67e0:	52 f0       	brmi	.+20     	; 0x67f6 <__fp_round+0x20>
    67e2:	bb 0f       	add	r27, r27
    67e4:	40 f4       	brcc	.+16     	; 0x67f6 <__fp_round+0x20>
    67e6:	bf 2b       	or	r27, r31
    67e8:	11 f4       	brne	.+4      	; 0x67ee <__fp_round+0x18>
    67ea:	60 ff       	sbrs	r22, 0
    67ec:	04 c0       	rjmp	.+8      	; 0x67f6 <__fp_round+0x20>
    67ee:	6f 5f       	subi	r22, 0xFF	; 255
    67f0:	7f 4f       	sbci	r23, 0xFF	; 255
    67f2:	8f 4f       	sbci	r24, 0xFF	; 255
    67f4:	9f 4f       	sbci	r25, 0xFF	; 255
    67f6:	08 95       	ret

000067f8 <__fp_sinus>:
    67f8:	ef 93       	push	r30
    67fa:	e0 ff       	sbrs	r30, 0
    67fc:	06 c0       	rjmp	.+12     	; 0x680a <__fp_sinus+0x12>
    67fe:	a2 ea       	ldi	r26, 0xA2	; 162
    6800:	2a ed       	ldi	r18, 0xDA	; 218
    6802:	3f e0       	ldi	r19, 0x0F	; 15
    6804:	49 ec       	ldi	r20, 0xC9	; 201
    6806:	5f eb       	ldi	r21, 0xBF	; 191
    6808:	4b dd       	rcall	.-1386   	; 0x62a0 <__addsf3x>
    680a:	e5 df       	rcall	.-54     	; 0x67d6 <__fp_round>
    680c:	0f 90       	pop	r0
    680e:	03 94       	inc	r0
    6810:	01 fc       	sbrc	r0, 1
    6812:	90 58       	subi	r25, 0x80	; 128
    6814:	eb e0       	ldi	r30, 0x0B	; 11
    6816:	f1 e0       	ldi	r31, 0x01	; 1
    6818:	97 cf       	rjmp	.-210    	; 0x6748 <__fp_powsodd>

0000681a <__fp_split3>:
    681a:	57 fd       	sbrc	r21, 7
    681c:	90 58       	subi	r25, 0x80	; 128
    681e:	44 0f       	add	r20, r20
    6820:	55 1f       	adc	r21, r21
    6822:	59 f0       	breq	.+22     	; 0x683a <__fp_splitA+0x10>
    6824:	5f 3f       	cpi	r21, 0xFF	; 255
    6826:	71 f0       	breq	.+28     	; 0x6844 <__fp_splitA+0x1a>
    6828:	47 95       	ror	r20

0000682a <__fp_splitA>:
    682a:	88 0f       	add	r24, r24
    682c:	97 fb       	bst	r25, 7
    682e:	99 1f       	adc	r25, r25
    6830:	61 f0       	breq	.+24     	; 0x684a <__fp_splitA+0x20>
    6832:	9f 3f       	cpi	r25, 0xFF	; 255
    6834:	79 f0       	breq	.+30     	; 0x6854 <__fp_splitA+0x2a>
    6836:	87 95       	ror	r24
    6838:	08 95       	ret
    683a:	12 16       	cp	r1, r18
    683c:	13 06       	cpc	r1, r19
    683e:	14 06       	cpc	r1, r20
    6840:	55 1f       	adc	r21, r21
    6842:	f2 cf       	rjmp	.-28     	; 0x6828 <__fp_split3+0xe>
    6844:	46 95       	lsr	r20
    6846:	f1 df       	rcall	.-30     	; 0x682a <__fp_splitA>
    6848:	08 c0       	rjmp	.+16     	; 0x685a <__fp_splitA+0x30>
    684a:	16 16       	cp	r1, r22
    684c:	17 06       	cpc	r1, r23
    684e:	18 06       	cpc	r1, r24
    6850:	99 1f       	adc	r25, r25
    6852:	f1 cf       	rjmp	.-30     	; 0x6836 <__fp_splitA+0xc>
    6854:	86 95       	lsr	r24
    6856:	71 05       	cpc	r23, r1
    6858:	61 05       	cpc	r22, r1
    685a:	08 94       	sec
    685c:	08 95       	ret

0000685e <__fp_zero>:
    685e:	e8 94       	clt

00006860 <__fp_szero>:
    6860:	bb 27       	eor	r27, r27
    6862:	66 27       	eor	r22, r22
    6864:	77 27       	eor	r23, r23
    6866:	cb 01       	movw	r24, r22
    6868:	97 f9       	bld	r25, 7
    686a:	08 95       	ret

0000686c <__gesf2>:
    686c:	1b df       	rcall	.-458    	; 0x66a4 <__fp_cmp>
    686e:	08 f4       	brcc	.+2      	; 0x6872 <__gesf2+0x6>
    6870:	8f ef       	ldi	r24, 0xFF	; 255
    6872:	08 95       	ret

00006874 <inverse>:
    6874:	9b 01       	movw	r18, r22
    6876:	ac 01       	movw	r20, r24
    6878:	60 e0       	ldi	r22, 0x00	; 0
    687a:	70 e0       	ldi	r23, 0x00	; 0
    687c:	80 e8       	ldi	r24, 0x80	; 128
    687e:	9f e3       	ldi	r25, 0x3F	; 63
    6880:	e2 cd       	rjmp	.-1084   	; 0x6446 <__divsf3>

00006882 <__mulsf3>:
    6882:	0b d0       	rcall	.+22     	; 0x689a <__mulsf3x>
    6884:	a8 cf       	rjmp	.-176    	; 0x67d6 <__fp_round>
    6886:	71 df       	rcall	.-286    	; 0x676a <__fp_pscA>
    6888:	28 f0       	brcs	.+10     	; 0x6894 <__mulsf3+0x12>
    688a:	76 df       	rcall	.-276    	; 0x6778 <__fp_pscB>
    688c:	18 f0       	brcs	.+6      	; 0x6894 <__mulsf3+0x12>
    688e:	95 23       	and	r25, r21
    6890:	09 f0       	breq	.+2      	; 0x6894 <__mulsf3+0x12>
    6892:	2c cf       	rjmp	.-424    	; 0x66ec <__fp_inf>
    6894:	31 cf       	rjmp	.-414    	; 0x66f8 <__fp_nan>
    6896:	11 24       	eor	r1, r1
    6898:	e3 cf       	rjmp	.-58     	; 0x6860 <__fp_szero>

0000689a <__mulsf3x>:
    689a:	bf df       	rcall	.-130    	; 0x681a <__fp_split3>
    689c:	a0 f3       	brcs	.-24     	; 0x6886 <__mulsf3+0x4>

0000689e <__mulsf3_pse>:
    689e:	95 9f       	mul	r25, r21
    68a0:	d1 f3       	breq	.-12     	; 0x6896 <__mulsf3+0x14>
    68a2:	95 0f       	add	r25, r21
    68a4:	50 e0       	ldi	r21, 0x00	; 0
    68a6:	55 1f       	adc	r21, r21
    68a8:	62 9f       	mul	r22, r18
    68aa:	f0 01       	movw	r30, r0
    68ac:	72 9f       	mul	r23, r18
    68ae:	bb 27       	eor	r27, r27
    68b0:	f0 0d       	add	r31, r0
    68b2:	b1 1d       	adc	r27, r1
    68b4:	63 9f       	mul	r22, r19
    68b6:	aa 27       	eor	r26, r26
    68b8:	f0 0d       	add	r31, r0
    68ba:	b1 1d       	adc	r27, r1
    68bc:	aa 1f       	adc	r26, r26
    68be:	64 9f       	mul	r22, r20
    68c0:	66 27       	eor	r22, r22
    68c2:	b0 0d       	add	r27, r0
    68c4:	a1 1d       	adc	r26, r1
    68c6:	66 1f       	adc	r22, r22
    68c8:	82 9f       	mul	r24, r18
    68ca:	22 27       	eor	r18, r18
    68cc:	b0 0d       	add	r27, r0
    68ce:	a1 1d       	adc	r26, r1
    68d0:	62 1f       	adc	r22, r18
    68d2:	73 9f       	mul	r23, r19
    68d4:	b0 0d       	add	r27, r0
    68d6:	a1 1d       	adc	r26, r1
    68d8:	62 1f       	adc	r22, r18
    68da:	83 9f       	mul	r24, r19
    68dc:	a0 0d       	add	r26, r0
    68de:	61 1d       	adc	r22, r1
    68e0:	22 1f       	adc	r18, r18
    68e2:	74 9f       	mul	r23, r20
    68e4:	33 27       	eor	r19, r19
    68e6:	a0 0d       	add	r26, r0
    68e8:	61 1d       	adc	r22, r1
    68ea:	23 1f       	adc	r18, r19
    68ec:	84 9f       	mul	r24, r20
    68ee:	60 0d       	add	r22, r0
    68f0:	21 1d       	adc	r18, r1
    68f2:	82 2f       	mov	r24, r18
    68f4:	76 2f       	mov	r23, r22
    68f6:	6a 2f       	mov	r22, r26
    68f8:	11 24       	eor	r1, r1
    68fa:	9f 57       	subi	r25, 0x7F	; 127
    68fc:	50 40       	sbci	r21, 0x00	; 0
    68fe:	8a f0       	brmi	.+34     	; 0x6922 <__mulsf3_pse+0x84>
    6900:	e1 f0       	breq	.+56     	; 0x693a <__mulsf3_pse+0x9c>
    6902:	88 23       	and	r24, r24
    6904:	4a f0       	brmi	.+18     	; 0x6918 <__mulsf3_pse+0x7a>
    6906:	ee 0f       	add	r30, r30
    6908:	ff 1f       	adc	r31, r31
    690a:	bb 1f       	adc	r27, r27
    690c:	66 1f       	adc	r22, r22
    690e:	77 1f       	adc	r23, r23
    6910:	88 1f       	adc	r24, r24
    6912:	91 50       	subi	r25, 0x01	; 1
    6914:	50 40       	sbci	r21, 0x00	; 0
    6916:	a9 f7       	brne	.-22     	; 0x6902 <__mulsf3_pse+0x64>
    6918:	9e 3f       	cpi	r25, 0xFE	; 254
    691a:	51 05       	cpc	r21, r1
    691c:	70 f0       	brcs	.+28     	; 0x693a <__mulsf3_pse+0x9c>
    691e:	e6 ce       	rjmp	.-564    	; 0x66ec <__fp_inf>
    6920:	9f cf       	rjmp	.-194    	; 0x6860 <__fp_szero>
    6922:	5f 3f       	cpi	r21, 0xFF	; 255
    6924:	ec f3       	brlt	.-6      	; 0x6920 <__mulsf3_pse+0x82>
    6926:	98 3e       	cpi	r25, 0xE8	; 232
    6928:	dc f3       	brlt	.-10     	; 0x6920 <__mulsf3_pse+0x82>
    692a:	86 95       	lsr	r24
    692c:	77 95       	ror	r23
    692e:	67 95       	ror	r22
    6930:	b7 95       	ror	r27
    6932:	f7 95       	ror	r31
    6934:	e7 95       	ror	r30
    6936:	9f 5f       	subi	r25, 0xFF	; 255
    6938:	c1 f7       	brne	.-16     	; 0x692a <__mulsf3_pse+0x8c>
    693a:	fe 2b       	or	r31, r30
    693c:	88 0f       	add	r24, r24
    693e:	91 1d       	adc	r25, r1
    6940:	96 95       	lsr	r25
    6942:	87 95       	ror	r24
    6944:	97 f9       	bld	r25, 7
    6946:	08 95       	ret

00006948 <pow>:
    6948:	fa 01       	movw	r30, r20
    694a:	ee 0f       	add	r30, r30
    694c:	ff 1f       	adc	r31, r31
    694e:	30 96       	adiw	r30, 0x00	; 0
    6950:	21 05       	cpc	r18, r1
    6952:	31 05       	cpc	r19, r1
    6954:	99 f1       	breq	.+102    	; 0x69bc <pow+0x74>
    6956:	61 15       	cp	r22, r1
    6958:	71 05       	cpc	r23, r1
    695a:	61 f4       	brne	.+24     	; 0x6974 <pow+0x2c>
    695c:	80 38       	cpi	r24, 0x80	; 128
    695e:	bf e3       	ldi	r27, 0x3F	; 63
    6960:	9b 07       	cpc	r25, r27
    6962:	49 f1       	breq	.+82     	; 0x69b6 <pow+0x6e>
    6964:	68 94       	set
    6966:	90 38       	cpi	r25, 0x80	; 128
    6968:	81 05       	cpc	r24, r1
    696a:	61 f0       	breq	.+24     	; 0x6984 <pow+0x3c>
    696c:	80 38       	cpi	r24, 0x80	; 128
    696e:	bf ef       	ldi	r27, 0xFF	; 255
    6970:	9b 07       	cpc	r25, r27
    6972:	41 f0       	breq	.+16     	; 0x6984 <pow+0x3c>
    6974:	99 23       	and	r25, r25
    6976:	42 f5       	brpl	.+80     	; 0x69c8 <pow+0x80>
    6978:	ff 3f       	cpi	r31, 0xFF	; 255
    697a:	e1 05       	cpc	r30, r1
    697c:	31 05       	cpc	r19, r1
    697e:	21 05       	cpc	r18, r1
    6980:	11 f1       	breq	.+68     	; 0x69c6 <pow+0x7e>
    6982:	e8 94       	clt
    6984:	08 94       	sec
    6986:	e7 95       	ror	r30
    6988:	d9 01       	movw	r26, r18
    698a:	aa 23       	and	r26, r26
    698c:	29 f4       	brne	.+10     	; 0x6998 <pow+0x50>
    698e:	ab 2f       	mov	r26, r27
    6990:	be 2f       	mov	r27, r30
    6992:	f8 5f       	subi	r31, 0xF8	; 248
    6994:	d0 f3       	brcs	.-12     	; 0x698a <pow+0x42>
    6996:	10 c0       	rjmp	.+32     	; 0x69b8 <pow+0x70>
    6998:	ff 5f       	subi	r31, 0xFF	; 255
    699a:	70 f4       	brcc	.+28     	; 0x69b8 <pow+0x70>
    699c:	a6 95       	lsr	r26
    699e:	e0 f7       	brcc	.-8      	; 0x6998 <pow+0x50>
    69a0:	f7 39       	cpi	r31, 0x97	; 151
    69a2:	50 f0       	brcs	.+20     	; 0x69b8 <pow+0x70>
    69a4:	19 f0       	breq	.+6      	; 0x69ac <pow+0x64>
    69a6:	ff 3a       	cpi	r31, 0xAF	; 175
    69a8:	38 f4       	brcc	.+14     	; 0x69b8 <pow+0x70>
    69aa:	9f 77       	andi	r25, 0x7F	; 127
    69ac:	9f 93       	push	r25
    69ae:	0c d0       	rcall	.+24     	; 0x69c8 <pow+0x80>
    69b0:	0f 90       	pop	r0
    69b2:	07 fc       	sbrc	r0, 7
    69b4:	90 58       	subi	r25, 0x80	; 128
    69b6:	08 95       	ret
    69b8:	3e f0       	brts	.+14     	; 0x69c8 <pow+0x80>
    69ba:	9e ce       	rjmp	.-708    	; 0x66f8 <__fp_nan>
    69bc:	60 e0       	ldi	r22, 0x00	; 0
    69be:	70 e0       	ldi	r23, 0x00	; 0
    69c0:	80 e8       	ldi	r24, 0x80	; 128
    69c2:	9f e3       	ldi	r25, 0x3F	; 63
    69c4:	08 95       	ret
    69c6:	4f e7       	ldi	r20, 0x7F	; 127
    69c8:	9f 77       	andi	r25, 0x7F	; 127
    69ca:	5f 93       	push	r21
    69cc:	4f 93       	push	r20
    69ce:	3f 93       	push	r19
    69d0:	2f 93       	push	r18
    69d2:	d2 d0       	rcall	.+420    	; 0x6b78 <log>
    69d4:	2f 91       	pop	r18
    69d6:	3f 91       	pop	r19
    69d8:	4f 91       	pop	r20
    69da:	5f 91       	pop	r21
    69dc:	52 df       	rcall	.-348    	; 0x6882 <__mulsf3>
    69de:	50 c0       	rjmp	.+160    	; 0x6a80 <exp>

000069e0 <sin>:
    69e0:	9f 93       	push	r25
    69e2:	d2 de       	rcall	.-604    	; 0x6788 <__fp_rempio2>
    69e4:	0f 90       	pop	r0
    69e6:	07 fc       	sbrc	r0, 7
    69e8:	ee 5f       	subi	r30, 0xFE	; 254
    69ea:	06 cf       	rjmp	.-500    	; 0x67f8 <__fp_sinus>
    69ec:	11 f4       	brne	.+4      	; 0x69f2 <sin+0x12>
    69ee:	0e f4       	brtc	.+2      	; 0x69f2 <sin+0x12>
    69f0:	83 ce       	rjmp	.-762    	; 0x66f8 <__fp_nan>
    69f2:	72 c0       	rjmp	.+228    	; 0x6ad8 <__fp_mpack>

000069f4 <sqrt>:
    69f4:	1a df       	rcall	.-460    	; 0x682a <__fp_splitA>
    69f6:	d0 f3       	brcs	.-12     	; 0x69ec <sin+0xc>
    69f8:	99 23       	and	r25, r25
    69fa:	d9 f3       	breq	.-10     	; 0x69f2 <sin+0x12>
    69fc:	ce f3       	brts	.-14     	; 0x69f0 <sin+0x10>
    69fe:	9f 57       	subi	r25, 0x7F	; 127
    6a00:	55 0b       	sbc	r21, r21
    6a02:	87 ff       	sbrs	r24, 7
    6a04:	77 d0       	rcall	.+238    	; 0x6af4 <__fp_norm2>
    6a06:	00 24       	eor	r0, r0
    6a08:	a0 e6       	ldi	r26, 0x60	; 96
    6a0a:	40 ea       	ldi	r20, 0xA0	; 160
    6a0c:	90 01       	movw	r18, r0
    6a0e:	80 58       	subi	r24, 0x80	; 128
    6a10:	56 95       	lsr	r21
    6a12:	97 95       	ror	r25
    6a14:	28 f4       	brcc	.+10     	; 0x6a20 <sqrt+0x2c>
    6a16:	80 5c       	subi	r24, 0xC0	; 192
    6a18:	66 0f       	add	r22, r22
    6a1a:	77 1f       	adc	r23, r23
    6a1c:	88 1f       	adc	r24, r24
    6a1e:	20 f0       	brcs	.+8      	; 0x6a28 <sqrt+0x34>
    6a20:	26 17       	cp	r18, r22
    6a22:	37 07       	cpc	r19, r23
    6a24:	48 07       	cpc	r20, r24
    6a26:	30 f4       	brcc	.+12     	; 0x6a34 <sqrt+0x40>
    6a28:	62 1b       	sub	r22, r18
    6a2a:	73 0b       	sbc	r23, r19
    6a2c:	84 0b       	sbc	r24, r20
    6a2e:	20 29       	or	r18, r0
    6a30:	31 29       	or	r19, r1
    6a32:	4a 2b       	or	r20, r26
    6a34:	a6 95       	lsr	r26
    6a36:	17 94       	ror	r1
    6a38:	07 94       	ror	r0
    6a3a:	20 25       	eor	r18, r0
    6a3c:	31 25       	eor	r19, r1
    6a3e:	4a 27       	eor	r20, r26
    6a40:	58 f7       	brcc	.-42     	; 0x6a18 <sqrt+0x24>
    6a42:	66 0f       	add	r22, r22
    6a44:	77 1f       	adc	r23, r23
    6a46:	88 1f       	adc	r24, r24
    6a48:	20 f0       	brcs	.+8      	; 0x6a52 <sqrt+0x5e>
    6a4a:	26 17       	cp	r18, r22
    6a4c:	37 07       	cpc	r19, r23
    6a4e:	48 07       	cpc	r20, r24
    6a50:	30 f4       	brcc	.+12     	; 0x6a5e <sqrt+0x6a>
    6a52:	62 0b       	sbc	r22, r18
    6a54:	73 0b       	sbc	r23, r19
    6a56:	84 0b       	sbc	r24, r20
    6a58:	20 0d       	add	r18, r0
    6a5a:	31 1d       	adc	r19, r1
    6a5c:	41 1d       	adc	r20, r1
    6a5e:	a0 95       	com	r26
    6a60:	81 f7       	brne	.-32     	; 0x6a42 <sqrt+0x4e>
    6a62:	b9 01       	movw	r22, r18
    6a64:	84 2f       	mov	r24, r20
    6a66:	91 58       	subi	r25, 0x81	; 129
    6a68:	88 0f       	add	r24, r24
    6a6a:	96 95       	lsr	r25
    6a6c:	87 95       	ror	r24
    6a6e:	08 95       	ret

00006a70 <square>:
    6a70:	9b 01       	movw	r18, r22
    6a72:	ac 01       	movw	r20, r24
    6a74:	06 cf       	rjmp	.-500    	; 0x6882 <__mulsf3>
    6a76:	19 f4       	brne	.+6      	; 0x6a7e <square+0xe>
    6a78:	0e f0       	brts	.+2      	; 0x6a7c <square+0xc>
    6a7a:	38 ce       	rjmp	.-912    	; 0x66ec <__fp_inf>
    6a7c:	f0 ce       	rjmp	.-544    	; 0x685e <__fp_zero>
    6a7e:	3c ce       	rjmp	.-904    	; 0x66f8 <__fp_nan>

00006a80 <exp>:
    6a80:	d4 de       	rcall	.-600    	; 0x682a <__fp_splitA>
    6a82:	c8 f3       	brcs	.-14     	; 0x6a76 <square+0x6>
    6a84:	96 38       	cpi	r25, 0x86	; 134
    6a86:	c0 f7       	brcc	.-16     	; 0x6a78 <square+0x8>
    6a88:	07 f8       	bld	r0, 7
    6a8a:	0f 92       	push	r0
    6a8c:	e8 94       	clt
    6a8e:	2b e3       	ldi	r18, 0x3B	; 59
    6a90:	3a ea       	ldi	r19, 0xAA	; 170
    6a92:	48 eb       	ldi	r20, 0xB8	; 184
    6a94:	5f e7       	ldi	r21, 0x7F	; 127
    6a96:	03 df       	rcall	.-506    	; 0x689e <__mulsf3_pse>
    6a98:	0f 92       	push	r0
    6a9a:	0f 92       	push	r0
    6a9c:	0f 92       	push	r0
    6a9e:	4d b7       	in	r20, 0x3d	; 61
    6aa0:	5e b7       	in	r21, 0x3e	; 62
    6aa2:	0f 92       	push	r0
    6aa4:	a9 d0       	rcall	.+338    	; 0x6bf8 <modf>
    6aa6:	e9 e2       	ldi	r30, 0x29	; 41
    6aa8:	f1 e0       	ldi	r31, 0x01	; 1
    6aaa:	29 de       	rcall	.-942    	; 0x66fe <__fp_powser>
    6aac:	4f 91       	pop	r20
    6aae:	5f 91       	pop	r21
    6ab0:	ef 91       	pop	r30
    6ab2:	ff 91       	pop	r31
    6ab4:	e5 95       	asr	r30
    6ab6:	ee 1f       	adc	r30, r30
    6ab8:	ff 1f       	adc	r31, r31
    6aba:	49 f0       	breq	.+18     	; 0x6ace <exp+0x4e>
    6abc:	fe 57       	subi	r31, 0x7E	; 126
    6abe:	e0 68       	ori	r30, 0x80	; 128
    6ac0:	44 27       	eor	r20, r20
    6ac2:	ee 0f       	add	r30, r30
    6ac4:	44 1f       	adc	r20, r20
    6ac6:	fa 95       	dec	r31
    6ac8:	e1 f7       	brne	.-8      	; 0x6ac2 <exp+0x42>
    6aca:	41 95       	neg	r20
    6acc:	55 0b       	sbc	r21, r21
    6ace:	1b d0       	rcall	.+54     	; 0x6b06 <ldexp>
    6ad0:	0f 90       	pop	r0
    6ad2:	07 fe       	sbrs	r0, 7
    6ad4:	cf ce       	rjmp	.-610    	; 0x6874 <inverse>
    6ad6:	08 95       	ret

00006ad8 <__fp_mpack>:
    6ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    6ada:	31 f0       	breq	.+12     	; 0x6ae8 <__fp_mpack_finite+0xc>

00006adc <__fp_mpack_finite>:
    6adc:	91 50       	subi	r25, 0x01	; 1
    6ade:	20 f4       	brcc	.+8      	; 0x6ae8 <__fp_mpack_finite+0xc>
    6ae0:	87 95       	ror	r24
    6ae2:	77 95       	ror	r23
    6ae4:	67 95       	ror	r22
    6ae6:	b7 95       	ror	r27
    6ae8:	88 0f       	add	r24, r24
    6aea:	91 1d       	adc	r25, r1
    6aec:	96 95       	lsr	r25
    6aee:	87 95       	ror	r24
    6af0:	97 f9       	bld	r25, 7
    6af2:	08 95       	ret

00006af4 <__fp_norm2>:
    6af4:	91 50       	subi	r25, 0x01	; 1
    6af6:	50 40       	sbci	r21, 0x00	; 0
    6af8:	66 0f       	add	r22, r22
    6afa:	77 1f       	adc	r23, r23
    6afc:	88 1f       	adc	r24, r24
    6afe:	d2 f7       	brpl	.-12     	; 0x6af4 <__fp_norm2>
    6b00:	08 95       	ret
    6b02:	f4 cd       	rjmp	.-1048   	; 0x66ec <__fp_inf>
    6b04:	e9 cf       	rjmp	.-46     	; 0x6ad8 <__fp_mpack>

00006b06 <ldexp>:
    6b06:	91 de       	rcall	.-734    	; 0x682a <__fp_splitA>
    6b08:	e8 f3       	brcs	.-6      	; 0x6b04 <__fp_norm2+0x10>
    6b0a:	99 23       	and	r25, r25
    6b0c:	d9 f3       	breq	.-10     	; 0x6b04 <__fp_norm2+0x10>
    6b0e:	94 0f       	add	r25, r20
    6b10:	51 1d       	adc	r21, r1
    6b12:	bb f3       	brvs	.-18     	; 0x6b02 <__fp_norm2+0xe>
    6b14:	91 50       	subi	r25, 0x01	; 1
    6b16:	50 40       	sbci	r21, 0x00	; 0
    6b18:	94 f0       	brlt	.+36     	; 0x6b3e <ldexp+0x38>
    6b1a:	59 f0       	breq	.+22     	; 0x6b32 <ldexp+0x2c>
    6b1c:	88 23       	and	r24, r24
    6b1e:	32 f0       	brmi	.+12     	; 0x6b2c <ldexp+0x26>
    6b20:	66 0f       	add	r22, r22
    6b22:	77 1f       	adc	r23, r23
    6b24:	88 1f       	adc	r24, r24
    6b26:	91 50       	subi	r25, 0x01	; 1
    6b28:	50 40       	sbci	r21, 0x00	; 0
    6b2a:	c1 f7       	brne	.-16     	; 0x6b1c <ldexp+0x16>
    6b2c:	9e 3f       	cpi	r25, 0xFE	; 254
    6b2e:	51 05       	cpc	r21, r1
    6b30:	44 f7       	brge	.-48     	; 0x6b02 <__fp_norm2+0xe>
    6b32:	88 0f       	add	r24, r24
    6b34:	91 1d       	adc	r25, r1
    6b36:	96 95       	lsr	r25
    6b38:	87 95       	ror	r24
    6b3a:	97 f9       	bld	r25, 7
    6b3c:	08 95       	ret
    6b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    6b40:	ac f0       	brlt	.+42     	; 0x6b6c <ldexp+0x66>
    6b42:	98 3e       	cpi	r25, 0xE8	; 232
    6b44:	9c f0       	brlt	.+38     	; 0x6b6c <ldexp+0x66>
    6b46:	bb 27       	eor	r27, r27
    6b48:	86 95       	lsr	r24
    6b4a:	77 95       	ror	r23
    6b4c:	67 95       	ror	r22
    6b4e:	b7 95       	ror	r27
    6b50:	08 f4       	brcc	.+2      	; 0x6b54 <ldexp+0x4e>
    6b52:	b1 60       	ori	r27, 0x01	; 1
    6b54:	93 95       	inc	r25
    6b56:	c1 f7       	brne	.-16     	; 0x6b48 <ldexp+0x42>
    6b58:	bb 0f       	add	r27, r27
    6b5a:	58 f7       	brcc	.-42     	; 0x6b32 <ldexp+0x2c>
    6b5c:	11 f4       	brne	.+4      	; 0x6b62 <ldexp+0x5c>
    6b5e:	60 ff       	sbrs	r22, 0
    6b60:	e8 cf       	rjmp	.-48     	; 0x6b32 <ldexp+0x2c>
    6b62:	6f 5f       	subi	r22, 0xFF	; 255
    6b64:	7f 4f       	sbci	r23, 0xFF	; 255
    6b66:	8f 4f       	sbci	r24, 0xFF	; 255
    6b68:	9f 4f       	sbci	r25, 0xFF	; 255
    6b6a:	e3 cf       	rjmp	.-58     	; 0x6b32 <ldexp+0x2c>
    6b6c:	79 ce       	rjmp	.-782    	; 0x6860 <__fp_szero>
    6b6e:	0e f0       	brts	.+2      	; 0x6b72 <ldexp+0x6c>
    6b70:	b3 cf       	rjmp	.-154    	; 0x6ad8 <__fp_mpack>
    6b72:	c2 cd       	rjmp	.-1148   	; 0x66f8 <__fp_nan>
    6b74:	68 94       	set
    6b76:	ba cd       	rjmp	.-1164   	; 0x66ec <__fp_inf>

00006b78 <log>:
    6b78:	58 de       	rcall	.-848    	; 0x682a <__fp_splitA>
    6b7a:	c8 f3       	brcs	.-14     	; 0x6b6e <ldexp+0x68>
    6b7c:	99 23       	and	r25, r25
    6b7e:	d1 f3       	breq	.-12     	; 0x6b74 <ldexp+0x6e>
    6b80:	c6 f3       	brts	.-16     	; 0x6b72 <ldexp+0x6c>
    6b82:	df 93       	push	r29
    6b84:	cf 93       	push	r28
    6b86:	1f 93       	push	r17
    6b88:	0f 93       	push	r16
    6b8a:	ff 92       	push	r15
    6b8c:	c9 2f       	mov	r28, r25
    6b8e:	dd 27       	eor	r29, r29
    6b90:	88 23       	and	r24, r24
    6b92:	2a f0       	brmi	.+10     	; 0x6b9e <log+0x26>
    6b94:	21 97       	sbiw	r28, 0x01	; 1
    6b96:	66 0f       	add	r22, r22
    6b98:	77 1f       	adc	r23, r23
    6b9a:	88 1f       	adc	r24, r24
    6b9c:	da f7       	brpl	.-10     	; 0x6b94 <log+0x1c>
    6b9e:	20 e0       	ldi	r18, 0x00	; 0
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
    6ba2:	40 e8       	ldi	r20, 0x80	; 128
    6ba4:	5f eb       	ldi	r21, 0xBF	; 191
    6ba6:	9f e3       	ldi	r25, 0x3F	; 63
    6ba8:	88 39       	cpi	r24, 0x98	; 152
    6baa:	20 f0       	brcs	.+8      	; 0x6bb4 <log+0x3c>
    6bac:	80 3e       	cpi	r24, 0xE0	; 224
    6bae:	30 f0       	brcs	.+12     	; 0x6bbc <log+0x44>
    6bb0:	21 96       	adiw	r28, 0x01	; 1
    6bb2:	8f 77       	andi	r24, 0x7F	; 127
    6bb4:	64 db       	rcall	.-2360   	; 0x627e <__addsf3>
    6bb6:	e1 e5       	ldi	r30, 0x51	; 81
    6bb8:	f1 e0       	ldi	r31, 0x01	; 1
    6bba:	03 c0       	rjmp	.+6      	; 0x6bc2 <log+0x4a>
    6bbc:	60 db       	rcall	.-2368   	; 0x627e <__addsf3>
    6bbe:	ee e7       	ldi	r30, 0x7E	; 126
    6bc0:	f1 e0       	ldi	r31, 0x01	; 1
    6bc2:	9d dd       	rcall	.-1222   	; 0x66fe <__fp_powser>
    6bc4:	8b 01       	movw	r16, r22
    6bc6:	be 01       	movw	r22, r28
    6bc8:	ec 01       	movw	r28, r24
    6bca:	fb 2e       	mov	r15, r27
    6bcc:	6f 57       	subi	r22, 0x7F	; 127
    6bce:	71 09       	sbc	r23, r1
    6bd0:	75 95       	asr	r23
    6bd2:	77 1f       	adc	r23, r23
    6bd4:	88 0b       	sbc	r24, r24
    6bd6:	99 0b       	sbc	r25, r25
    6bd8:	d1 dc       	rcall	.-1630   	; 0x657c <__floatsisf>
    6bda:	28 e1       	ldi	r18, 0x18	; 24
    6bdc:	32 e7       	ldi	r19, 0x72	; 114
    6bde:	41 e3       	ldi	r20, 0x31	; 49
    6be0:	5f e3       	ldi	r21, 0x3F	; 63
    6be2:	5b de       	rcall	.-842    	; 0x689a <__mulsf3x>
    6be4:	af 2d       	mov	r26, r15
    6be6:	98 01       	movw	r18, r16
    6be8:	ae 01       	movw	r20, r28
    6bea:	ff 90       	pop	r15
    6bec:	0f 91       	pop	r16
    6bee:	1f 91       	pop	r17
    6bf0:	cf 91       	pop	r28
    6bf2:	df 91       	pop	r29
    6bf4:	55 db       	rcall	.-2390   	; 0x62a0 <__addsf3x>
    6bf6:	ef cd       	rjmp	.-1058   	; 0x67d6 <__fp_round>

00006bf8 <modf>:
    6bf8:	fa 01       	movw	r30, r20
    6bfa:	dc 01       	movw	r26, r24
    6bfc:	aa 0f       	add	r26, r26
    6bfe:	bb 1f       	adc	r27, r27
    6c00:	9b 01       	movw	r18, r22
    6c02:	ac 01       	movw	r20, r24
    6c04:	bf 57       	subi	r27, 0x7F	; 127
    6c06:	28 f4       	brcc	.+10     	; 0x6c12 <modf+0x1a>
    6c08:	22 27       	eor	r18, r18
    6c0a:	33 27       	eor	r19, r19
    6c0c:	44 27       	eor	r20, r20
    6c0e:	50 78       	andi	r21, 0x80	; 128
    6c10:	1f c0       	rjmp	.+62     	; 0x6c50 <modf+0x58>
    6c12:	b7 51       	subi	r27, 0x17	; 23
    6c14:	88 f4       	brcc	.+34     	; 0x6c38 <modf+0x40>
    6c16:	ab 2f       	mov	r26, r27
    6c18:	00 24       	eor	r0, r0
    6c1a:	46 95       	lsr	r20
    6c1c:	37 95       	ror	r19
    6c1e:	27 95       	ror	r18
    6c20:	01 1c       	adc	r0, r1
    6c22:	a3 95       	inc	r26
    6c24:	d2 f3       	brmi	.-12     	; 0x6c1a <modf+0x22>
    6c26:	00 20       	and	r0, r0
    6c28:	69 f0       	breq	.+26     	; 0x6c44 <modf+0x4c>
    6c2a:	22 0f       	add	r18, r18
    6c2c:	33 1f       	adc	r19, r19
    6c2e:	44 1f       	adc	r20, r20
    6c30:	b3 95       	inc	r27
    6c32:	da f3       	brmi	.-10     	; 0x6c2a <modf+0x32>
    6c34:	0d d0       	rcall	.+26     	; 0x6c50 <modf+0x58>
    6c36:	22 cb       	rjmp	.-2492   	; 0x627c <__subsf3>
    6c38:	61 30       	cpi	r22, 0x01	; 1
    6c3a:	71 05       	cpc	r23, r1
    6c3c:	a0 e8       	ldi	r26, 0x80	; 128
    6c3e:	8a 07       	cpc	r24, r26
    6c40:	b9 46       	sbci	r27, 0x69	; 105
    6c42:	30 f4       	brcc	.+12     	; 0x6c50 <modf+0x58>
    6c44:	9b 01       	movw	r18, r22
    6c46:	ac 01       	movw	r20, r24
    6c48:	66 27       	eor	r22, r22
    6c4a:	77 27       	eor	r23, r23
    6c4c:	88 27       	eor	r24, r24
    6c4e:	90 78       	andi	r25, 0x80	; 128
    6c50:	30 96       	adiw	r30, 0x00	; 0
    6c52:	21 f0       	breq	.+8      	; 0x6c5c <modf+0x64>
    6c54:	20 83       	st	Z, r18
    6c56:	31 83       	std	Z+1, r19	; 0x01
    6c58:	42 83       	std	Z+2, r20	; 0x02
    6c5a:	53 83       	std	Z+3, r21	; 0x03
    6c5c:	08 95       	ret

00006c5e <__divmodhi4>:
    6c5e:	97 fb       	bst	r25, 7
    6c60:	07 2e       	mov	r0, r23
    6c62:	16 f4       	brtc	.+4      	; 0x6c68 <__divmodhi4+0xa>
    6c64:	00 94       	com	r0
    6c66:	06 d0       	rcall	.+12     	; 0x6c74 <__divmodhi4_neg1>
    6c68:	77 fd       	sbrc	r23, 7
    6c6a:	08 d0       	rcall	.+16     	; 0x6c7c <__divmodhi4_neg2>
    6c6c:	63 d0       	rcall	.+198    	; 0x6d34 <__udivmodhi4>
    6c6e:	07 fc       	sbrc	r0, 7
    6c70:	05 d0       	rcall	.+10     	; 0x6c7c <__divmodhi4_neg2>
    6c72:	3e f4       	brtc	.+14     	; 0x6c82 <__divmodhi4_exit>

00006c74 <__divmodhi4_neg1>:
    6c74:	90 95       	com	r25
    6c76:	81 95       	neg	r24
    6c78:	9f 4f       	sbci	r25, 0xFF	; 255
    6c7a:	08 95       	ret

00006c7c <__divmodhi4_neg2>:
    6c7c:	70 95       	com	r23
    6c7e:	61 95       	neg	r22
    6c80:	7f 4f       	sbci	r23, 0xFF	; 255

00006c82 <__divmodhi4_exit>:
    6c82:	08 95       	ret

00006c84 <__tablejump2__>:
    6c84:	ee 0f       	add	r30, r30
    6c86:	ff 1f       	adc	r31, r31
    6c88:	00 24       	eor	r0, r0
    6c8a:	00 1c       	adc	r0, r0
    6c8c:	0b be       	out	0x3b, r0	; 59
    6c8e:	07 90       	elpm	r0, Z+
    6c90:	f6 91       	elpm	r31, Z
    6c92:	e0 2d       	mov	r30, r0
    6c94:	09 94       	ijmp

00006c96 <__umulhisi3>:
    6c96:	a2 9f       	mul	r26, r18
    6c98:	b0 01       	movw	r22, r0
    6c9a:	b3 9f       	mul	r27, r19
    6c9c:	c0 01       	movw	r24, r0
    6c9e:	a3 9f       	mul	r26, r19
    6ca0:	70 0d       	add	r23, r0
    6ca2:	81 1d       	adc	r24, r1
    6ca4:	11 24       	eor	r1, r1
    6ca6:	91 1d       	adc	r25, r1
    6ca8:	b2 9f       	mul	r27, r18
    6caa:	70 0d       	add	r23, r0
    6cac:	81 1d       	adc	r24, r1
    6cae:	11 24       	eor	r1, r1
    6cb0:	91 1d       	adc	r25, r1
    6cb2:	08 95       	ret

00006cb4 <__ashldi3>:
    6cb4:	0f 93       	push	r16
    6cb6:	08 30       	cpi	r16, 0x08	; 8
    6cb8:	90 f0       	brcs	.+36     	; 0x6cde <__ashldi3+0x2a>
    6cba:	98 2f       	mov	r25, r24
    6cbc:	87 2f       	mov	r24, r23
    6cbe:	76 2f       	mov	r23, r22
    6cc0:	65 2f       	mov	r22, r21
    6cc2:	54 2f       	mov	r21, r20
    6cc4:	43 2f       	mov	r20, r19
    6cc6:	32 2f       	mov	r19, r18
    6cc8:	22 27       	eor	r18, r18
    6cca:	08 50       	subi	r16, 0x08	; 8
    6ccc:	f4 cf       	rjmp	.-24     	; 0x6cb6 <__ashldi3+0x2>
    6cce:	22 0f       	add	r18, r18
    6cd0:	33 1f       	adc	r19, r19
    6cd2:	44 1f       	adc	r20, r20
    6cd4:	55 1f       	adc	r21, r21
    6cd6:	66 1f       	adc	r22, r22
    6cd8:	77 1f       	adc	r23, r23
    6cda:	88 1f       	adc	r24, r24
    6cdc:	99 1f       	adc	r25, r25
    6cde:	0a 95       	dec	r16
    6ce0:	b2 f7       	brpl	.-20     	; 0x6cce <__ashldi3+0x1a>
    6ce2:	0f 91       	pop	r16
    6ce4:	08 95       	ret

00006ce6 <__adddi3>:
    6ce6:	2a 0d       	add	r18, r10
    6ce8:	3b 1d       	adc	r19, r11
    6cea:	4c 1d       	adc	r20, r12
    6cec:	5d 1d       	adc	r21, r13
    6cee:	6e 1d       	adc	r22, r14
    6cf0:	7f 1d       	adc	r23, r15
    6cf2:	80 1f       	adc	r24, r16
    6cf4:	91 1f       	adc	r25, r17
    6cf6:	08 95       	ret

00006cf8 <__adddi3_s8>:
    6cf8:	00 24       	eor	r0, r0
    6cfa:	a7 fd       	sbrc	r26, 7
    6cfc:	00 94       	com	r0
    6cfe:	2a 0f       	add	r18, r26
    6d00:	30 1d       	adc	r19, r0
    6d02:	40 1d       	adc	r20, r0
    6d04:	50 1d       	adc	r21, r0
    6d06:	60 1d       	adc	r22, r0
    6d08:	70 1d       	adc	r23, r0
    6d0a:	80 1d       	adc	r24, r0
    6d0c:	90 1d       	adc	r25, r0
    6d0e:	08 95       	ret

00006d10 <__subdi3>:
    6d10:	2a 19       	sub	r18, r10
    6d12:	3b 09       	sbc	r19, r11
    6d14:	4c 09       	sbc	r20, r12
    6d16:	5d 09       	sbc	r21, r13
    6d18:	6e 09       	sbc	r22, r14
    6d1a:	7f 09       	sbc	r23, r15
    6d1c:	80 0b       	sbc	r24, r16
    6d1e:	91 0b       	sbc	r25, r17
    6d20:	08 95       	ret

00006d22 <__cmpdi2>:
    6d22:	2a 15       	cp	r18, r10
    6d24:	3b 05       	cpc	r19, r11
    6d26:	4c 05       	cpc	r20, r12
    6d28:	5d 05       	cpc	r21, r13
    6d2a:	6e 05       	cpc	r22, r14
    6d2c:	7f 05       	cpc	r23, r15
    6d2e:	80 07       	cpc	r24, r16
    6d30:	91 07       	cpc	r25, r17
    6d32:	08 95       	ret

00006d34 <__udivmodhi4>:
    6d34:	aa 1b       	sub	r26, r26
    6d36:	bb 1b       	sub	r27, r27
    6d38:	51 e1       	ldi	r21, 0x11	; 17
    6d3a:	07 c0       	rjmp	.+14     	; 0x6d4a <__udivmodhi4_ep>

00006d3c <__udivmodhi4_loop>:
    6d3c:	aa 1f       	adc	r26, r26
    6d3e:	bb 1f       	adc	r27, r27
    6d40:	a6 17       	cp	r26, r22
    6d42:	b7 07       	cpc	r27, r23
    6d44:	10 f0       	brcs	.+4      	; 0x6d4a <__udivmodhi4_ep>
    6d46:	a6 1b       	sub	r26, r22
    6d48:	b7 0b       	sbc	r27, r23

00006d4a <__udivmodhi4_ep>:
    6d4a:	88 1f       	adc	r24, r24
    6d4c:	99 1f       	adc	r25, r25
    6d4e:	5a 95       	dec	r21
    6d50:	a9 f7       	brne	.-22     	; 0x6d3c <__udivmodhi4_loop>
    6d52:	80 95       	com	r24
    6d54:	90 95       	com	r25
    6d56:	bc 01       	movw	r22, r24
    6d58:	cd 01       	movw	r24, r26
    6d5a:	08 95       	ret

00006d5c <_exit>:
    6d5c:	f8 94       	cli

00006d5e <__stop_program>:
    6d5e:	ff cf       	rjmp	.-2      	; 0x6d5e <__stop_program>
