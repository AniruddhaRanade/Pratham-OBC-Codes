
xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00006cd4  00006d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039b  00800192  00800192  00006dfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006dfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a74  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000179e  00000000  00000000  0000dcac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e9f  00000000  00000000  0000f44a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fac  00000000  00000000  000122ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d61  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e8b  00000000  00000000  00013ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00018e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 c3 2c 	jmp	0x5986	; 0x5986 <__vector_14>
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	26 0c       	add	r2, r6
      8e:	2f 0c       	add	r2, r15
      90:	38 0c       	add	r3, r8
      92:	41 0c       	add	r4, r1
      94:	4a 0c       	add	r4, r10
      96:	53 0c       	add	r5, r3
      98:	5c 0c       	add	r5, r12
      9a:	65 0c       	add	r6, r5
      9c:	6e 0c       	add	r6, r14
      9e:	77 0c       	add	r7, r7
      a0:	80 0c       	add	r8, r0
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1e4>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	e4 ed       	ldi	r30, 0xD4	; 212
     7e0:	fc e6       	ldi	r31, 0x6C	; 108
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a2 39       	cpi	r26, 0x92	; 146
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a2 e9       	ldi	r26, 0x92	; 146
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	ad 32       	cpi	r26, 0x2D	; 45
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <main>
     806:	0c 94 68 36 	jmp	0x6cd0	; 0x6cd0 <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6a 97       	sbiw	r28, 0x1a	; 26
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9a 8f       	std	Y+26, r25	; 0x1a
     842:	89 8f       	std	Y+25, r24	; 0x19
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <Current_state+0x55>
     848:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <Current_state+0x56>
     84c:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <Current_state+0x57>
     850:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <Current_state+0x58>
     854:	eb ee       	ldi	r30, 0xEB	; 235
     856:	f1 e0       	ldi	r31, 0x01	; 1
     858:	80 87       	std	Z+8, r24	; 0x08
     85a:	91 87       	std	Z+9, r25	; 0x09
     85c:	a2 87       	std	Z+10, r26	; 0x0a
     85e:	b3 87       	std	Z+11, r27	; 0x0b
	  v_B[1] = -1*Current_state.mm.B_y;
     860:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <Current_state+0x59>
     864:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <Current_state+0x5a>
     868:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <Current_state+0x5b>
     86c:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <Current_state+0x5c>
     870:	b0 58       	subi	r27, 0x80	; 128
     872:	84 83       	std	Z+4, r24	; 0x04
     874:	95 83       	std	Z+5, r25	; 0x05
     876:	a6 83       	std	Z+6, r26	; 0x06
     878:	b7 83       	std	Z+7, r27	; 0x07
	  v_B[0] = Current_state.mm.B_z;
     87a:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <Current_state+0x5d>
     87e:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <Current_state+0x5e>
     882:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <Current_state+0x5f>
     886:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <Current_state+0x60>
     88a:	80 83       	st	Z, r24
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	a2 83       	std	Z+2, r26	; 0x02
     890:	b3 83       	std	Z+3, r27	; 0x03
	  
	if(first_B)
     892:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <first_B>
     896:	88 23       	and	r24, r24
     898:	41 f0       	breq	.+16     	; 0x8aa <detumbling+0x9e>
	{
		
		copy_vector(v_B, v_B_old);
     89a:	62 e9       	ldi	r22, 0x92	; 146
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	cf 01       	movw	r24, r30
     8a0:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <copy_vector>
		first_B = 0;
     8a4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <first_B>
     8a8:	81 c0       	rjmp	.+258    	; 0x9ac <detumbling+0x1a0>
     8aa:	0b ee       	ldi	r16, 0xEB	; 235
     8ac:	11 e0       	ldi	r17, 0x01	; 1
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f2 e9       	ldi	r31, 0x92	; 146
     8b2:	8f 2e       	mov	r8, r31
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	9f 2e       	mov	r9, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	5e 01       	movw	r10, r28
     8bc:	8d e0       	ldi	r24, 0x0D	; 13
     8be:	a8 0e       	add	r10, r24
     8c0:	b1 1c       	adc	r11, r1
     8c2:	fe 01       	movw	r30, r28
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	1f 01       	movw	r2, r30
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8c8:	f8 01       	movw	r30, r16
     8ca:	c1 90       	ld	r12, Z+
     8cc:	d1 90       	ld	r13, Z+
     8ce:	e1 90       	ld	r14, Z+
     8d0:	f1 90       	ld	r15, Z+
     8d2:	8f 01       	movw	r16, r30
     8d4:	f4 01       	movw	r30, r8
     8d6:	41 90       	ld	r4, Z+
     8d8:	51 90       	ld	r5, Z+
     8da:	61 90       	ld	r6, Z+
     8dc:	71 90       	ld	r7, Z+
     8de:	4f 01       	movw	r8, r30
     8e0:	a3 01       	movw	r20, r6
     8e2:	92 01       	movw	r18, r4
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     8f8:	f5 01       	movw	r30, r10
     8fa:	61 93       	st	Z+, r22
     8fc:	71 93       	st	Z+, r23
     8fe:	81 93       	st	Z+, r24
     900:	91 93       	st	Z+, r25
     902:	5f 01       	movw	r10, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	07 3f       	cpi	r16, 0xF7	; 247
     92c:	1f 07       	cpc	r17, r31
     92e:	61 f6       	brne	.-104    	; 0x8c8 <detumbling+0xbc>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_norm>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	9f eb       	ldi	r25, 0xBF	; 191
     944:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	6d 85       	ldd	r22, Y+13	; 0x0d
     952:	7e 85       	ldd	r23, Y+14	; 0x0e
     954:	8f 85       	ldd	r24, Y+15	; 0x0f
     956:	98 89       	ldd	r25, Y+16	; 0x10
     958:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     95c:	e9 8d       	ldd	r30, Y+25	; 0x19
     95e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     960:	60 83       	st	Z, r22
     962:	71 83       	std	Z+1, r23	; 0x01
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	69 89       	ldd	r22, Y+17	; 0x11
     96e:	7a 89       	ldd	r23, Y+18	; 0x12
     970:	8b 89       	ldd	r24, Y+19	; 0x13
     972:	9c 89       	ldd	r25, Y+20	; 0x14
     974:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     978:	e9 8d       	ldd	r30, Y+25	; 0x19
     97a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     97c:	64 83       	std	Z+4, r22	; 0x04
     97e:	75 83       	std	Z+5, r23	; 0x05
     980:	86 83       	std	Z+6, r24	; 0x06
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	a7 01       	movw	r20, r14
     986:	96 01       	movw	r18, r12
     988:	6d 89       	ldd	r22, Y+21	; 0x15
     98a:	7e 89       	ldd	r23, Y+22	; 0x16
     98c:	8f 89       	ldd	r24, Y+23	; 0x17
     98e:	98 8d       	ldd	r25, Y+24	; 0x18
     990:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     994:	e9 8d       	ldd	r30, Y+25	; 0x19
     996:	fa 8d       	ldd	r31, Y+26	; 0x1a
     998:	60 87       	std	Z+8, r22	; 0x08
     99a:	71 87       	std	Z+9, r23	; 0x09
     99c:	82 87       	std	Z+10, r24	; 0x0a
     99e:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9a0:	62 e9       	ldi	r22, 0x92	; 146
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	8b ee       	ldi	r24, 0xEB	; 235
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <copy_vector>
	
}
     9ac:	6a 96       	adiw	r28, 0x1a	; 26
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	3f 90       	pop	r3
     9da:	2f 90       	pop	r2
     9dc:	08 95       	ret

000009de <nominal>:
 

void nominal(vector v_m_N)
{
     9de:	2f 92       	push	r2
     9e0:	3f 92       	push	r3
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	e9 97       	sbiw	r28, 0x39	; 57
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	9d ab       	std	Y+53, r25	; 0x35
     a14:	8c ab       	std	Y+52, r24	; 0x34
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a16:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <Current_state+0x55>
     a1a:	70 91 01 05 	lds	r23, 0x0501	; 0x800501 <Current_state+0x56>
     a1e:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <Current_state+0x57>
     a22:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <Current_state+0x58>
     a26:	0b ee       	ldi	r16, 0xEB	; 235
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e4       	ldi	r19, 0x40	; 64
     a2e:	4c e1       	ldi	r20, 0x1C	; 28
     a30:	56 e4       	ldi	r21, 0x46	; 70
     a32:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     a36:	f8 01       	movw	r30, r16
     a38:	60 87       	std	Z+8, r22	; 0x08
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	82 87       	std	Z+10, r24	; 0x0a
     a3e:	93 87       	std	Z+11, r25	; 0x0b
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a40:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <Current_state+0x59>
     a44:	70 91 05 05 	lds	r23, 0x0505	; 0x800505 <Current_state+0x5a>
     a48:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <Current_state+0x5b>
     a4c:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <Current_state+0x5c>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e4       	ldi	r19, 0x40	; 64
     a54:	4c e1       	ldi	r20, 0x1C	; 28
     a56:	56 e4       	ldi	r21, 0x46	; 70
     a58:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	b0 58       	subi	r27, 0x80	; 128
     a62:	f8 01       	movw	r30, r16
     a64:	84 83       	std	Z+4, r24	; 0x04
     a66:	95 83       	std	Z+5, r25	; 0x05
     a68:	a6 83       	std	Z+6, r26	; 0x06
     a6a:	b7 83       	std	Z+7, r27	; 0x07
	     v_B[0] = Current_state.mm.B_z/10000;
     a6c:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <Current_state+0x5d>
     a70:	70 91 09 05 	lds	r23, 0x0509	; 0x800509 <Current_state+0x5e>
     a74:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <Current_state+0x5f>
     a78:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <Current_state+0x60>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e4       	ldi	r19, 0x40	; 64
     a80:	4c e1       	ldi	r20, 0x1C	; 28
     a82:	56 e4       	ldi	r21, 0x46	; 70
     a84:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     a88:	f8 01       	movw	r30, r16
     a8a:	60 83       	st	Z, r22
     a8c:	71 83       	std	Z+1, r23	; 0x01
     a8e:	82 83       	std	Z+2, r24	; 0x02
     a90:	93 83       	std	Z+3, r25	; 0x03
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_norm>
     a98:	6f 87       	std	Y+15, r22	; 0x0f
     a9a:	78 8b       	std	Y+16, r23	; 0x10
     a9c:	89 8b       	std	Y+17, r24	; 0x11
     a9e:	9a 8b       	std	Y+18, r25	; 0x12
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     aa0:	40 90 80 04 	lds	r4, 0x0480	; 0x800480 <q_o+0xc>
     aa4:	50 90 81 04 	lds	r5, 0x0481	; 0x800481 <q_o+0xd>
     aa8:	60 90 82 04 	lds	r6, 0x0482	; 0x800482 <q_o+0xe>
     aac:	70 90 83 04 	lds	r7, 0x0483	; 0x800483 <q_o+0xf>
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f4 e7       	ldi	r31, 0x74	; 116
     ab4:	ef 2e       	mov	r14, r31
     ab6:	f4 e0       	ldi	r31, 0x04	; 4
     ab8:	ff 2e       	mov	r15, r31
     aba:	f0 2d       	mov	r31, r0
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	4c 01       	movw	r8, r24
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f3 ed       	ldi	r31, 0xD3	; 211
     ac6:	2f 2e       	mov	r2, r31
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	3f 2e       	mov	r3, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	0f 2e       	mov	r0, r31
     ad0:	f0 e8       	ldi	r31, 0x80	; 128
     ad2:	af 2e       	mov	r10, r31
     ad4:	f4 e0       	ldi	r31, 0x04	; 4
     ad6:	bf 2e       	mov	r11, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	81 01       	movw	r16, r2
     adc:	6c 01       	movw	r12, r24
     ade:	f7 01       	movw	r30, r14
     ae0:	61 91       	ld	r22, Z+
     ae2:	71 91       	ld	r23, Z+
     ae4:	81 91       	ld	r24, Z+
     ae6:	91 91       	ld	r25, Z+
     ae8:	7f 01       	movw	r14, r30
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     afa:	f6 01       	movw	r30, r12
     afc:	61 93       	st	Z+, r22
     afe:	71 93       	st	Z+, r23
     b00:	81 93       	st	Z+, r24
     b02:	91 93       	st	Z+, r25
     b04:	6f 01       	movw	r12, r30
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	f8 01       	movw	r30, r16
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     b20:	f8 01       	movw	r30, r16
     b22:	61 93       	st	Z+, r22
     b24:	71 93       	st	Z+, r23
     b26:	81 93       	st	Z+, r24
     b28:	91 93       	st	Z+, r25
     b2a:	8f 01       	movw	r16, r30
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b2c:	ea 14       	cp	r14, r10
     b2e:	fb 04       	cpc	r15, r11
     b30:	b1 f6       	brne	.-84     	; 0xade <nominal+0x100>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b32:	2f 85       	ldd	r18, Y+15	; 0x0f
     b34:	38 89       	ldd	r19, Y+16	; 0x10
     b36:	49 89       	ldd	r20, Y+17	; 0x11
     b38:	5a 89       	ldd	r21, Y+18	; 0x12
     b3a:	ca 01       	movw	r24, r20
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     b42:	6c a7       	std	Y+44, r22	; 0x2c
     b44:	7d a7       	std	Y+45, r23	; 0x2d
     b46:	8e a7       	std	Y+46, r24	; 0x2e
     b48:	9f a7       	std	Y+47, r25	; 0x2f
     b4a:	8e e9       	ldi	r24, 0x9E	; 158
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9f a3       	std	Y+39, r25	; 0x27
     b50:	8e a3       	std	Y+38, r24	; 0x26
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	fe 01       	movw	r30, r28
     b58:	3d 96       	adiw	r30, 0x0d	; 13
     b5a:	fe 87       	std	Y+14, r31	; 0x0e
     b5c:	ed 87       	std	Y+13, r30	; 0x0d
     b5e:	28 aa       	std	Y+48, r2	; 0x30
     b60:	39 aa       	std	Y+49, r3	; 0x31
     b62:	8a aa       	std	Y+50, r8	; 0x32
     b64:	9b aa       	std	Y+51, r9	; 0x33
     b66:	86 01       	movw	r16, r12
     b68:	ce a0       	ldd	r12, Y+38	; 0x26
     b6a:	df a0       	ldd	r13, Y+39	; 0x27
     b6c:	d9 a6       	std	Y+41, r13	; 0x29
     b6e:	c8 a6       	std	Y+40, r12	; 0x28
     b70:	c8 01       	movw	r24, r16
     b72:	82 59       	subi	r24, 0x92	; 146
     b74:	9e 4f       	sbci	r25, 0xFE	; 254
     b76:	9d 8b       	std	Y+21, r25	; 0x15
     b78:	8c 8b       	std	Y+20, r24	; 0x14
     b7a:	f8 01       	movw	r30, r16
     b7c:	e6 5b       	subi	r30, 0xB6	; 182
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	ff 8b       	std	Y+23, r31	; 0x17
     b82:	ee 8b       	std	Y+22, r30	; 0x16
     b84:	8f ed       	ldi	r24, 0xDF	; 223
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	99 8f       	std	Y+25, r25	; 0x19
     b8a:	88 8f       	std	Y+24, r24	; 0x18
     b8c:	f8 01       	movw	r30, r16
     b8e:	ea 5d       	subi	r30, 0xDA	; 218
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	fb 8f       	std	Y+27, r31	; 0x1b
     b94:	ea 8f       	std	Y+26, r30	; 0x1a
     b96:	c8 a8       	ldd	r12, Y+48	; 0x30
     b98:	d9 a8       	ldd	r13, Y+49	; 0x31
     b9a:	ea a8       	ldd	r14, Y+50	; 0x32
     b9c:	fb a8       	ldd	r15, Y+51	; 0x33
     b9e:	1f 86       	std	Y+15, r1	; 0x0f
     ba0:	1b 8a       	std	Y+19, r1	; 0x13
     ba2:	31 2c       	mov	r3, r1
     ba4:	21 2c       	mov	r2, r1
     ba6:	1b a7       	std	Y+43, r17	; 0x2b
     ba8:	0a a7       	std	Y+42, r16	; 0x2a
     baa:	87 01       	movw	r16, r14
     bac:	dd 8e       	std	Y+29, r13	; 0x1d
     bae:	cc 8e       	std	Y+28, r12	; 0x1c
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     bb0:	f8 01       	movw	r30, r16
     bb2:	61 91       	ld	r22, Z+
     bb4:	71 91       	ld	r23, Z+
     bb6:	81 91       	ld	r24, Z+
     bb8:	91 91       	ld	r25, Z+
     bba:	8f 01       	movw	r16, r30
     bbc:	ec 89       	ldd	r30, Y+20	; 0x14
     bbe:	fd 89       	ldd	r31, Y+21	; 0x15
     bc0:	21 91       	ld	r18, Z+
     bc2:	31 91       	ld	r19, Z+
     bc4:	41 91       	ld	r20, Z+
     bc6:	51 91       	ld	r21, Z+
     bc8:	fd 8b       	std	Y+21, r31	; 0x15
     bca:	ec 8b       	std	Y+20, r30	; 0x14
     bcc:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bce:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bd0:	81 90       	ld	r8, Z+
     bd2:	91 90       	ld	r9, Z+
     bd4:	a1 90       	ld	r10, Z+
     bd6:	b1 90       	ld	r11, Z+
     bd8:	fd 8f       	std	Y+29, r31	; 0x1d
     bda:	ec 8f       	std	Y+28, r30	; 0x1c
     bdc:	ee 89       	ldd	r30, Y+22	; 0x16
     bde:	ff 89       	ldd	r31, Y+23	; 0x17
     be0:	41 90       	ld	r4, Z+
     be2:	51 90       	ld	r5, Z+
     be4:	61 90       	ld	r6, Z+
     be6:	71 90       	ld	r7, Z+
     be8:	ff 8b       	std	Y+23, r31	; 0x17
     bea:	ee 8b       	std	Y+22, r30	; 0x16
     bec:	e8 8d       	ldd	r30, Y+24	; 0x18
     bee:	f9 8d       	ldd	r31, Y+25	; 0x19
     bf0:	c1 90       	ld	r12, Z+
     bf2:	d1 90       	ld	r13, Z+
     bf4:	e1 90       	ld	r14, Z+
     bf6:	f1 90       	ld	r15, Z+
     bf8:	f9 8f       	std	Y+25, r31	; 0x19
     bfa:	e8 8f       	std	Y+24, r30	; 0x18
     bfc:	ce aa       	std	Y+54, r12	; 0x36
     bfe:	df aa       	std	Y+55, r13	; 0x37
     c00:	e8 ae       	std	Y+56, r14	; 0x38
     c02:	f9 ae       	std	Y+57, r15	; 0x39
     c04:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c06:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c08:	c1 90       	ld	r12, Z+
     c0a:	d1 90       	ld	r13, Z+
     c0c:	e1 90       	ld	r14, Z+
     c0e:	f1 90       	ld	r15, Z+
     c10:	fb 8f       	std	Y+27, r31	; 0x1b
     c12:	ea 8f       	std	Y+26, r30	; 0x1a
     c14:	ce 8e       	std	Y+30, r12	; 0x1e
     c16:	df 8e       	std	Y+31, r13	; 0x1f
     c18:	e8 a2       	std	Y+32, r14	; 0x20
     c1a:	f9 a2       	std	Y+33, r15	; 0x21
     c1c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     c20:	6b 01       	movw	r12, r22
     c22:	7c 01       	movw	r14, r24
     c24:	a3 01       	movw	r20, r6
     c26:	92 01       	movw	r18, r4
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     c3c:	4b 01       	movw	r8, r22
     c3e:	5c 01       	movw	r10, r24
     c40:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c42:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c44:	48 a1       	ldd	r20, Y+32	; 0x20
     c46:	59 a1       	ldd	r21, Y+33	; 0x21
     c48:	6e a9       	ldd	r22, Y+54	; 0x36
     c4a:	7f a9       	ldd	r23, Y+55	; 0x37
     c4c:	88 ad       	ldd	r24, Y+56	; 0x38
     c4e:	99 ad       	ldd	r25, Y+57	; 0x39
     c50:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	c5 01       	movw	r24, r10
     c5a:	b4 01       	movw	r22, r8
     c5c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	6f 85       	ldd	r22, Y+15	; 0x0f
     c66:	7b 89       	ldd	r23, Y+19	; 0x13
     c68:	83 2d       	mov	r24, r3
     c6a:	92 2d       	mov	r25, r2
     c6c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     c70:	6f 87       	std	Y+15, r22	; 0x0f
     c72:	7b 8b       	std	Y+19, r23	; 0x13
     c74:	38 2e       	mov	r3, r24
     c76:	29 2e       	mov	r2, r25
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     c78:	cd 84       	ldd	r12, Y+13	; 0x0d
     c7a:	de 84       	ldd	r13, Y+14	; 0x0e
     c7c:	0c 15       	cp	r16, r12
     c7e:	1d 05       	cpc	r17, r13
     c80:	09 f0       	breq	.+2      	; 0xc84 <nominal+0x2a6>
     c82:	96 cf       	rjmp	.-212    	; 0xbb0 <nominal+0x1d2>
     c84:	0a a5       	ldd	r16, Y+42	; 0x2a
     c86:	1b a5       	ldd	r17, Y+43	; 0x2b
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     c88:	2c a5       	ldd	r18, Y+44	; 0x2c
     c8a:	3d a5       	ldd	r19, Y+45	; 0x2d
     c8c:	4e a5       	ldd	r20, Y+46	; 0x2e
     c8e:	5f a5       	ldd	r21, Y+47	; 0x2f
     c90:	92 2d       	mov	r25, r2
     c92:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     c96:	e8 a5       	ldd	r30, Y+40	; 0x28
     c98:	f9 a5       	ldd	r31, Y+41	; 0x29
     c9a:	60 83       	st	Z, r22
     c9c:	71 83       	std	Z+1, r23	; 0x01
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	93 83       	std	Z+3, r25	; 0x03
     ca2:	8e a1       	ldd	r24, Y+38	; 0x26
     ca4:	9f a1       	ldd	r25, Y+39	; 0x27
     ca6:	04 96       	adiw	r24, 0x04	; 4
     ca8:	9f a3       	std	Y+39, r25	; 0x27
     caa:	8e a3       	std	Y+38, r24	; 0x26
     cac:	04 5f       	subi	r16, 0xF4	; 244
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     cb0:	04 32       	cpi	r16, 0x24	; 36
     cb2:	11 05       	cpc	r17, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <nominal+0x2da>
     cb6:	58 cf       	rjmp	.-336    	; 0xb68 <nominal+0x18a>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     cb8:	4c a9       	ldd	r20, Y+52	; 0x34
     cba:	5d a9       	ldd	r21, Y+53	; 0x35
     cbc:	6b ee       	ldi	r22, 0xEB	; 235
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	8e e9       	ldi	r24, 0x9E	; 158
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cc8:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <light>
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 76 32 	call	0x64ec	; 0x64ec <__floatunsisf>
     cd6:	ab 01       	movw	r20, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	8c a9       	ldd	r24, Y+52	; 0x34
     cdc:	9d a9       	ldd	r25, Y+53	; 0x35
     cde:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     ce2:	e9 96       	adiw	r28, 0x39	; 57
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	3f 90       	pop	r3
     d10:	2f 90       	pop	r2
     d12:	08 95       	ret

00000d14 <apply_torque>:

void apply_torque(vector v_m)
{
     d14:	2f 92       	push	r2
     d16:	3f 92       	push	r3
     d18:	4f 92       	push	r4
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	4c 01       	movw	r8, r24
     d3a:	ec 01       	movw	r28, r24
     d3c:	5c 01       	movw	r10, r24
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	a8 0e       	add	r10, r24
     d42:	b1 1c       	adc	r11, r1
     d44:	84 01       	movw	r16, r8
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d46:	d8 01       	movw	r26, r16
     d48:	4d 90       	ld	r4, X+
     d4a:	5d 90       	ld	r5, X+
     d4c:	6d 90       	ld	r6, X+
     d4e:	7c 90       	ld	r7, X
     d50:	73 01       	movw	r14, r6
     d52:	62 01       	movw	r12, r4
     d54:	e8 94       	clt
     d56:	f7 f8       	bld	r15, 7
     d58:	23 e3       	ldi	r18, 0x33	; 51
     d5a:	33 e3       	ldi	r19, 0x33	; 51
     d5c:	43 e7       	ldi	r20, 0x73	; 115
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
     d68:	18 16       	cp	r1, r24
     d6a:	0c f5       	brge	.+66     	; 0xdae <apply_torque+0x9a>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d6c:	a3 01       	movw	r20, r6
     d6e:	92 01       	movw	r18, r4
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f eb       	ldi	r21, 0xBF	; 191
     d80:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
     d84:	81 11       	cpse	r24, r1
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <apply_torque+0x88>
			v_m[i] = -1*M_MAX;
     d88:	83 e3       	ldi	r24, 0x33	; 51
     d8a:	93 e3       	ldi	r25, 0x33	; 51
     d8c:	a3 e7       	ldi	r26, 0x73	; 115
     d8e:	bf eb       	ldi	r27, 0xBF	; 191
     d90:	f8 01       	movw	r30, r16
     d92:	80 83       	st	Z, r24
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	a2 83       	std	Z+2, r26	; 0x02
     d98:	b3 83       	std	Z+3, r27	; 0x03
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <apply_torque+0x9a>
			else
			v_m[i] = M_MAX;
     d9c:	83 e3       	ldi	r24, 0x33	; 51
     d9e:	93 e3       	ldi	r25, 0x33	; 51
     da0:	a3 e7       	ldi	r26, 0x73	; 115
     da2:	bf e3       	ldi	r27, 0x3F	; 63
     da4:	f8 01       	movw	r30, r16
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
     dae:	0c 5f       	subi	r16, 0xFC	; 252
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     db2:	0a 15       	cp	r16, r10
     db4:	1b 05       	cpc	r17, r11
     db6:	39 f6       	brne	.-114    	; 0xd46 <apply_torque+0x32>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     db8:	45 ed       	ldi	r20, 0xD5	; 213
     dba:	5f e0       	ldi	r21, 0x0F	; 15
     dbc:	61 ec       	ldi	r22, 0xC1	; 193
     dbe:	7e e3       	ldi	r23, 0x3E	; 62
     dc0:	c4 01       	movw	r24, r8
     dc2:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <scalar_into_vector>
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     dc6:	48 80       	ld	r4, Y
     dc8:	59 80       	ldd	r5, Y+1	; 0x01
     dca:	6a 80       	ldd	r6, Y+2	; 0x02
     dcc:	7b 80       	ldd	r7, Y+3	; 0x03
     dce:	73 01       	movw	r14, r6
     dd0:	62 01       	movw	r12, r4
     dd2:	e8 94       	clt
     dd4:	f7 f8       	bld	r15, 7
     dd6:	28 ea       	ldi	r18, 0xA8	; 168
     dd8:	36 ec       	ldi	r19, 0xC6	; 198
     dda:	4b e8       	ldi	r20, 0x8B	; 139
     ddc:	5e e3       	ldi	r21, 0x3E	; 62
     dde:	c7 01       	movw	r24, r14
     de0:	b6 01       	movw	r22, r12
     de2:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
     de6:	18 16       	cp	r1, r24
     de8:	fc f4       	brge	.+62     	; 0xe28 <apply_torque+0x114>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     dea:	a3 01       	movw	r20, r6
     dec:	92 01       	movw	r18, r4
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f eb       	ldi	r21, 0xBF	; 191
     dfe:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
     e02:	81 11       	cpse	r24, r1
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <apply_torque+0x104>
			v_m[i] = -1*I_MAX;
     e06:	88 ea       	ldi	r24, 0xA8	; 168
     e08:	96 ec       	ldi	r25, 0xC6	; 198
     e0a:	ab e8       	ldi	r26, 0x8B	; 139
     e0c:	be eb       	ldi	r27, 0xBE	; 190
     e0e:	88 83       	st	Y, r24
     e10:	99 83       	std	Y+1, r25	; 0x01
     e12:	aa 83       	std	Y+2, r26	; 0x02
     e14:	bb 83       	std	Y+3, r27	; 0x03
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <apply_torque+0x114>
			else
			v_m[i] = I_MAX;
     e18:	88 ea       	ldi	r24, 0xA8	; 168
     e1a:	96 ec       	ldi	r25, 0xC6	; 198
     e1c:	ab e8       	ldi	r26, 0x8B	; 139
     e1e:	be e3       	ldi	r27, 0x3E	; 62
     e20:	88 83       	st	Y, r24
     e22:	99 83       	std	Y+1, r25	; 0x01
     e24:	aa 83       	std	Y+2, r26	; 0x02
     e26:	bb 83       	std	Y+3, r27	; 0x03
     e28:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	//v_m[0]=0.2;v_m[1]=-0.1;v_m[2]=-0.15;
	for(i = 0; i < 3; i++)
     e2a:	ac 16       	cp	r10, r28
     e2c:	bd 06       	cpc	r11, r29
     e2e:	59 f6       	brne	.-106    	; 0xdc6 <apply_torque+0xb2>
	//sen = Mode;
	//transmit_UART0(sen);
	//sen = gps_power;
	//transmit_UART0(sen);
	//Anant Changes-
	if (v_m[0] > 0) //v_m is calculated current
     e30:	d4 01       	movw	r26, r8
     e32:	cd 90       	ld	r12, X+
     e34:	dd 90       	ld	r13, X+
     e36:	ed 90       	ld	r14, X+
     e38:	fc 90       	ld	r15, X
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	a9 01       	movw	r20, r18
     e40:	c7 01       	movw	r24, r14
     e42:	b6 01       	movw	r22, r12
     e44:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
     e48:	18 16       	cp	r1, r24
     e4a:	c4 f4       	brge	.+48     	; 0xe7c <apply_torque+0x168>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	c7 01       	movw	r24, r14
     e56:	b6 01       	movw	r22, r12
     e58:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     e5c:	28 ea       	ldi	r18, 0xA8	; 168
     e5e:	36 ec       	ldi	r19, 0xC6	; 198
     e60:	4b e8       	ldi	r20, 0x8B	; 139
     e62:	5e e3       	ldi	r21, 0x3E	; 62
     e64:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     e68:	9f 77       	andi	r25, 0x7F	; 127
     e6a:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     e6e:	70 93 14 05 	sts	0x0514, r23	; 0x800514 <Current_state+0x69>
     e72:	60 93 13 05 	sts	0x0513, r22	; 0x800513 <Current_state+0x68>
		Current_state.pwm.x_dir = 0;
     e76:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Current_state+0x6e>
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <apply_torque+0x1a4>
	}
	else
	{
	Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
     e7c:	28 ea       	ldi	r18, 0xA8	; 168
     e7e:	36 ec       	ldi	r19, 0xC6	; 198
     e80:	4b e8       	ldi	r20, 0x8B	; 139
     e82:	5e e3       	ldi	r21, 0x3E	; 62
     e84:	c7 01       	movw	r24, r14
     e86:	b6 01       	movw	r22, r12
     e88:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     ea4:	9f 77       	andi	r25, 0x7F	; 127
     ea6:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     eaa:	70 93 14 05 	sts	0x0514, r23	; 0x800514 <Current_state+0x69>
     eae:	60 93 13 05 	sts	0x0513, r22	; 0x800513 <Current_state+0x68>
	Current_state.pwm.x_dir = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <Current_state+0x6e>
	}
	if (v_m[1] > 0)
     eb8:	f4 01       	movw	r30, r8
     eba:	c4 80       	ldd	r12, Z+4	; 0x04
     ebc:	d5 80       	ldd	r13, Z+5	; 0x05
     ebe:	e6 80       	ldd	r14, Z+6	; 0x06
     ec0:	f7 80       	ldd	r15, Z+7	; 0x07
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	c4 f4       	brge	.+48     	; 0xf04 <apply_torque+0x1f0>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	4f e7       	ldi	r20, 0x7F	; 127
     eda:	57 e4       	ldi	r21, 0x47	; 71
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     ee4:	28 ea       	ldi	r18, 0xA8	; 168
     ee6:	36 ec       	ldi	r19, 0xC6	; 198
     ee8:	4b e8       	ldi	r20, 0x8B	; 139
     eea:	5e e3       	ldi	r21, 0x3E	; 62
     eec:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     ef0:	9f 77       	andi	r25, 0x7F	; 127
     ef2:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     ef6:	70 93 16 05 	sts	0x0516, r23	; 0x800516 <Current_state+0x6b>
     efa:	60 93 15 05 	sts	0x0515, r22	; 0x800515 <Current_state+0x6a>
		Current_state.pwm.y_dir = 0;
     efe:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
     f02:	1e c0       	rjmp	.+60     	; 0xf40 <apply_torque+0x22c>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
     f04:	28 ea       	ldi	r18, 0xA8	; 168
     f06:	36 ec       	ldi	r19, 0xC6	; 198
     f08:	4b e8       	ldi	r20, 0x8B	; 139
     f0a:	5e e3       	ldi	r21, 0x3E	; 62
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f e7       	ldi	r20, 0x7F	; 127
     f26:	57 e4       	ldi	r21, 0x47	; 71
     f28:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     f2c:	9f 77       	andi	r25, 0x7F	; 127
     f2e:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     f32:	70 93 16 05 	sts	0x0516, r23	; 0x800516 <Current_state+0x6b>
     f36:	60 93 15 05 	sts	0x0515, r22	; 0x800515 <Current_state+0x6a>
		Current_state.pwm.y_dir = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <Current_state+0x6f>
	}
	if (v_m[2] > 0)
     f40:	d4 01       	movw	r26, r8
     f42:	18 96       	adiw	r26, 0x08	; 8
     f44:	cd 90       	ld	r12, X+
     f46:	dd 90       	ld	r13, X+
     f48:	ed 90       	ld	r14, X+
     f4a:	fc 90       	ld	r15, X
     f4c:	1b 97       	sbiw	r26, 0x0b	; 11
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	a9 01       	movw	r20, r18
     f54:	c7 01       	movw	r24, r14
     f56:	b6 01       	movw	r22, r12
     f58:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	c4 f4       	brge	.+48     	; 0xf90 <apply_torque+0x27c>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	c7 01       	movw	r24, r14
     f6a:	b6 01       	movw	r22, r12
     f6c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     f70:	28 ea       	ldi	r18, 0xA8	; 168
     f72:	36 ec       	ldi	r19, 0xC6	; 198
     f74:	4b e8       	ldi	r20, 0x8B	; 139
     f76:	5e e3       	ldi	r21, 0x3E	; 62
     f78:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     f7c:	9f 77       	andi	r25, 0x7F	; 127
     f7e:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     f82:	70 93 18 05 	sts	0x0518, r23	; 0x800518 <Current_state+0x6d>
     f86:	60 93 17 05 	sts	0x0517, r22	; 0x800517 <Current_state+0x6c>
		Current_state.pwm.z_dir = 0;
     f8a:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
     f8e:	1e c0       	rjmp	.+60     	; 0xfcc <apply_torque+0x2b8>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
     f90:	28 ea       	ldi	r18, 0xA8	; 168
     f92:	36 ec       	ldi	r19, 0xC6	; 198
     f94:	4b e8       	ldi	r20, 0x8B	; 139
     f96:	5e e3       	ldi	r21, 0x3E	; 62
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	57 e4       	ldi	r21, 0x47	; 71
     fb4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
     fb8:	9f 77       	andi	r25, 0x7F	; 127
     fba:	0e 94 4a 32 	call	0x6494	; 0x6494 <__fixunssfsi>
     fbe:	70 93 18 05 	sts	0x0518, r23	; 0x800518 <Current_state+0x6d>
     fc2:	60 93 17 05 	sts	0x0517, r22	; 0x800517 <Current_state+0x6c>
		Current_state.pwm.z_dir = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Current_state+0x70>
	}
 
	//Anant Changes
	init_UART0();
     fcc:	0e 94 9e 2c 	call	0x593c	; 0x593c <init_UART0>
	
	transmit_UART0(Current_state.pwm.x_dir);
     fd0:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <Current_state+0x6e>
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.x;
     fda:	c3 e1       	ldi	r28, 0x13	; 19
     fdc:	d5 e0       	ldi	r29, 0x05	; 5
     fde:	88 81       	ld	r24, Y
     fe0:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
     fe2:	08 2e       	mov	r0, r24
     fe4:	00 0c       	add	r0, r0
     fe6:	99 0b       	sbc	r25, r25
     fe8:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.x>>8);
     fec:	88 81       	ld	r24, Y
     fee:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
     ff0:	89 2f       	mov	r24, r25
     ff2:	99 0f       	add	r25, r25
     ff4:	99 0b       	sbc	r25, r25
     ff6:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	
	transmit_UART0(Current_state.pwm.y_dir);
     ffa:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.y;
    1004:	c5 e1       	ldi	r28, 0x15	; 21
    1006:	d5 e0       	ldi	r29, 0x05	; 5
    1008:	88 81       	ld	r24, Y
    100a:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
    100c:	08 2e       	mov	r0, r24
    100e:	00 0c       	add	r0, r0
    1010:	99 0b       	sbc	r25, r25
    1012:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.y>>8);
    1016:	88 81       	ld	r24, Y
    1018:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
    101a:	89 2f       	mov	r24, r25
    101c:	99 0f       	add	r25, r25
    101e:	99 0b       	sbc	r25, r25
    1020:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	
	transmit_UART0(Current_state.pwm.z_dir);
    1024:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen1 = (uint8_t)Current_state.pwm.z;
    102e:	c7 e1       	ldi	r28, 0x17	; 23
    1030:	d5 e0       	ldi	r29, 0x05	; 5
    1032:	88 81       	ld	r24, Y
    1034:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen1);
    1036:	08 2e       	mov	r0, r24
    1038:	00 0c       	add	r0, r0
    103a:	99 0b       	sbc	r25, r25
    103c:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	sen2 = (uint8_t)(Current_state.pwm.z>>8);
    1040:	88 81       	ld	r24, Y
    1042:	99 81       	ldd	r25, Y+1	; 0x01
	transmit_UART0(sen2);
    1044:	89 2f       	mov	r24, r25
    1046:	99 0f       	add	r25, r25
    1048:	99 0b       	sbc	r25, r25
    104a:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
	
	//Anant Changes-
	
	
 
PORTA=0xA0;
    104e:	80 ea       	ldi	r24, 0xA0	; 160
    1050:	8b bb       	out	0x1b, r24	; 27
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	8f 90       	pop	r8
    106a:	7f 90       	pop	r7
    106c:	6f 90       	pop	r6
    106e:	5f 90       	pop	r5
    1070:	4f 90       	pop	r4
    1072:	3f 90       	pop	r3
    1074:	2f 90       	pop	r2
    1076:	08 95       	ret

00001078 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	e0 97       	sbiw	r28, 0x30	; 48
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    10a4:	0e 94 73 21 	call	0x42e6	; 0x42e6 <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a8:	8f ec       	ldi	r24, 0xCF	; 207
    10aa:	97 e0       	ldi	r25, 0x07	; 7
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <control+0x34>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <control+0x3a>
    10b2:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    10b4:	0e 94 16 21 	call	0x422c	; 0x422c <read_MM>
  // write apply torquer function here
   if(Mode == DETUMBLING)
    10b8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	21 f4       	brne	.+8      	; 0x10c8 <control+0x50>
   apply_torque(v_m_D);
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	27 de       	rcall	.-946    	; 0xd14 <apply_torque>
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <control+0x5a>
   else if(Mode == NOMINAL)
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <control+0x5a>
   apply_torque(v_m_N);
    10cc:	ce 01       	movw	r24, r28
    10ce:	0d 96       	adiw	r24, 0x0d	; 13
    10d0:	21 de       	rcall	.-958    	; 0xd14 <apply_torque>
   
  set_PWM();
    10d2:	0e 94 42 21 	call	0x4284	; 0x4284 <set_PWM>
    10d6:	8f e1       	ldi	r24, 0x1F	; 31
    10d8:	9e e4       	ldi	r25, 0x4E	; 78
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <control+0x62>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <control+0x68>
    10e0:	00 00       	nop
  
  _delay_ms(10);
  detumbling(v_m_D);
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	92 db       	rcall	.-2268   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    10e8:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <Current_state+0x55>
    10ec:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <Current_state+0x56>
    10f0:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <Current_state+0x57>
    10f4:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <Current_state+0x58>
    10f8:	eb ee       	ldi	r30, 0xEB	; 235
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	80 87       	std	Z+8, r24	; 0x08
    10fe:	91 87       	std	Z+9, r25	; 0x09
    1100:	a2 87       	std	Z+10, r26	; 0x0a
    1102:	b3 87       	std	Z+11, r27	; 0x0b
  v_B[1] = -1*Current_state.mm.B_y;
    1104:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <Current_state+0x59>
    1108:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <Current_state+0x5a>
    110c:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <Current_state+0x5b>
    1110:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <Current_state+0x5c>
    1114:	b0 58       	subi	r27, 0x80	; 128
    1116:	84 83       	std	Z+4, r24	; 0x04
    1118:	95 83       	std	Z+5, r25	; 0x05
    111a:	a6 83       	std	Z+6, r26	; 0x06
    111c:	b7 83       	std	Z+7, r27	; 0x07
  v_B[0] = Current_state.mm.B_z;
    111e:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <Current_state+0x5d>
    1122:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <Current_state+0x5e>
    1126:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <Current_state+0x5f>
    112a:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <Current_state+0x60>
    112e:	80 83       	st	Z, r24
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	a2 83       	std	Z+2, r26	; 0x02
    1134:	b3 83       	std	Z+3, r27	; 0x03
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2)){
    1136:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    113a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gps_power+0x1>
    113e:	02 97       	sbiw	r24, 0x02	; 2
    1140:	d9 f4       	brne	.+54     	; 0x1178 <__stack+0x79>
    1142:	9f e7       	ldi	r25, 0x7F	; 127
    1144:	e8 e3       	ldi	r30, 0x38	; 56
    1146:	11 e0       	ldi	r17, 0x01	; 1
    1148:	91 50       	subi	r25, 0x01	; 1
    114a:	e0 40       	sbci	r30, 0x00	; 0
    114c:	10 40       	sbci	r17, 0x00	; 0
    114e:	e1 f7       	brne	.-8      	; 0x1148 <__stack+0x49>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <__stack+0x53>
    1152:	00 00       	nop
			_delay_ms(50);
			uint8_t q= 90;
			//Anant Changes
			init_UART0(); //may not work
    1154:	0e 94 9e 2c 	call	0x593c	; 0x593c <init_UART0>
			//Anant CHanges-
			transmit_UART0(q);
    1158:	8a e5       	ldi	r24, 0x5A	; 90
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
			read_GPS();
    1160:	0e 94 11 21 	call	0x4222	; 0x4222 <read_GPS>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	89 e6       	ldi	r24, 0x69	; 105
    1168:	98 e1       	ldi	r25, 0x18	; 24
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <__stack+0x6b>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <__stack+0x75>
    1174:	00 00       	nop
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <__stack+0x97>
    1178:	ef e7       	ldi	r30, 0x7F	; 127
    117a:	18 e3       	ldi	r17, 0x38	; 56
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	e1 50       	subi	r30, 0x01	; 1
    1180:	10 40       	sbci	r17, 0x00	; 0
    1182:	20 40       	sbci	r18, 0x00	; 0
    1184:	e1 f7       	brne	.-8      	; 0x117e <__stack+0x7f>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <__stack+0x89>
    1188:	00 00       	nop
		}
		//Anant Changes
		else{
			_delay_ms(50);
			uint8_t q= 91;
			init_UART0();
    118a:	0e 94 9e 2c 	call	0x593c	; 0x593c <init_UART0>
			transmit_UART0(q);
    118e:	8b e5       	ldi	r24, 0x5B	; 91
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    1196:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	19 f4       	brne	.+6      	; 0x11a4 <__stack+0xa5>
      copy_gps_reading();  //check if gps is on but pdop data
    119e:	0e 94 87 21 	call	0x430e	; 0x430e <copy_gps_reading>
    11a2:	61 c0       	rjmp	.+194    	; 0x1266 <__stack+0x167>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    11a4:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    11a8:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    11ac:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    11b0:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    11b4:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    11b8:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    11bc:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    11c0:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    11c4:	a2 e0       	ldi	r26, 0x02	; 2
    11c6:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <__adddi3_s8>
    11ca:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    11ce:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    11d2:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    11d6:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    11da:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    11de:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    11e2:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    11e6:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
	  seconds_since_pivot += FRAME_TIME;
    11ea:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    11ee:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    11f2:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    11f6:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    11fa:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    11fe:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    1202:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    1206:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    120a:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <__adddi3_s8>
    120e:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    1212:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1216:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    121a:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    121e:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    1222:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1226:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    122a:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	 /////////////////////////////////////////
	 Current_state.gps.seconds += FRAME_TIME;
    122e:	eb ea       	ldi	r30, 0xAB	; 171
    1230:	f4 e0       	ldi	r31, 0x04	; 4
    1232:	86 a1       	ldd	r24, Z+38	; 0x26
    1234:	8e 5f       	subi	r24, 0xFE	; 254
    1236:	86 a3       	std	Z+38, r24	; 0x26
	 if(Current_state.gps.seconds > 58)
    1238:	86 a1       	ldd	r24, Z+38	; 0x26
    123a:	8b 33       	cpi	r24, 0x3B	; 59
    123c:	20 f0       	brcs	.+8      	; 0x1246 <__stack+0x147>
	 {
		 Current_state.gps.seconds = 0;
    123e:	16 a2       	std	Z+38, r1	; 0x26
		 Current_state.gps.minutes += 1;
    1240:	85 a1       	ldd	r24, Z+37	; 0x25
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	85 a3       	std	Z+37, r24	; 0x25
		 
	 }
	 if (Current_state.gps.minutes > 59)
    1246:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <Current_state+0x25>
    124a:	8c 33       	cpi	r24, 0x3C	; 60
    124c:	30 f0       	brcs	.+12     	; 0x125a <__stack+0x15b>
	 {
		 Current_state.gps.minutes = 0;
    124e:	eb ea       	ldi	r30, 0xAB	; 171
    1250:	f4 e0       	ldi	r31, 0x04	; 4
    1252:	15 a2       	std	Z+37, r1	; 0x25
		 Current_state.gps.hours += 1;
    1254:	84 a1       	ldd	r24, Z+36	; 0x24
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	84 a3       	std	Z+36, r24	; 0x24
	 }
	 if (Current_state.gps.hours > 23)
    125a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Current_state+0x24>
    125e:	88 31       	cpi	r24, 0x18	; 24
    1260:	10 f0       	brcs	.+4      	; 0x1266 <__stack+0x167>
	 {
		 Current_state.gps.hours = 0;
    1262:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <Current_state+0x24>
    1266:	8f e7       	ldi	r24, 0x7F	; 127
    1268:	98 e3       	ldi	r25, 0x38	; 56
    126a:	e1 e0       	ldi	r30, 0x01	; 1
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	90 40       	sbci	r25, 0x00	; 0
    1270:	e0 40       	sbci	r30, 0x00	; 0
    1272:	e1 f7       	brne	.-8      	; 0x126c <__stack+0x16d>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <__stack+0x177>
    1276:	00 00       	nop
	 /////////////////////////////////////////
	  }

	_delay_ms(50);  
    uint8_t e=100;
    transmit_UART0(e);
    1278:	84 e6       	ldi	r24, 0x64	; 100
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    read_SS();
    1280:	0e 94 13 21 	call	0x4226	; 0x4226 <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1284:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <light_cal>
    1288:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
	if(GPS_done != 255)
    128c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <GPS_done>
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	09 f4       	brne	.+2      	; 0x1296 <__stack+0x197>
    1294:	43 c0       	rjmp	.+134    	; 0x131c <__stack+0x21d>
	{
		
    sgp_orbit_propagator();
    1296:	0e 94 5e 23 	call	0x46bc	; 0x46bc <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    129a:	ce 01       	movw	r24, r28
    129c:	49 96       	adiw	r24, 0x19	; 25
    129e:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    12a2:	ce 01       	movw	r24, r28
    12a4:	85 96       	adiw	r24, 0x25	; 37
    12a6:	0e 94 ca 24 	call	0x4994	; 0x4994 <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    12aa:	21 ed       	ldi	r18, 0xD1	; 209
    12ac:	31 e0       	ldi	r19, 0x01	; 1
    12ae:	44 e7       	ldi	r20, 0x74	; 116
    12b0:	54 e0       	ldi	r21, 0x04	; 4
    12b2:	be 01       	movw	r22, r28
    12b4:	67 5e       	subi	r22, 0xE7	; 231
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	ce 01       	movw	r24, r28
    12ba:	85 96       	adiw	r24, 0x25	; 37
    12bc:	0e 94 6d 25 	call	0x4ada	; 0x4ada <quest>
    12c0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <light>
    
    omega_estimation(q_o, v_w);
    12c4:	6f ed       	ldi	r22, 0xDF	; 223
    12c6:	71 e0       	ldi	r23, 0x01	; 1
    12c8:	84 e7       	ldi	r24, 0x74	; 116
    12ca:	94 e0       	ldi	r25, 0x04	; 4
    12cc:	0e 94 6e 29 	call	0x52dc	; 0x52dc <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    12d0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    12d4:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <w_ctrl>
    12d8:	86 9f       	mul	r24, r22
    12da:	b0 01       	movw	r22, r0
    12dc:	11 24       	eor	r1, r1
    12de:	07 2e       	mov	r0, r23
    12e0:	00 0c       	add	r0, r0
    12e2:	88 0b       	sbc	r24, r24
    12e4:	99 0b       	sbc	r25, r25
    12e6:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    12ea:	ab 01       	movw	r20, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	8f ed       	ldi	r24, 0xDF	; 223
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    12f6:	8f ed       	ldi	r24, 0xDF	; 223
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_norm>
    12fe:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <mod_w>
    1302:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <mod_w+0x1>
    1306:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <mod_w+0x2>
    130a:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <mod_w+0x3>
    convert_unit_quaternion(q_o);
    130e:	84 e7       	ldi	r24, 0x74	; 116
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    1316:	ce 01       	movw	r24, r28
    1318:	0d 96       	adiw	r24, 0x0d	; 13
    131a:	61 db       	rcall	.-2366   	; 0x9de <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    131c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    1320:	88 37       	cpi	r24, 0x78	; 120
    1322:	dc f4       	brge	.+54     	; 0x135a <__stack+0x25b>
    1324:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <Time>
    1328:	30 91 1f 05 	lds	r19, 0x051F	; 0x80051f <Time+0x1>
    132c:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <Time+0x2>
    1330:	50 91 21 05 	lds	r21, 0x0521	; 0x800521 <Time+0x3>
    1334:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <Time+0x4>
    1338:	70 91 23 05 	lds	r23, 0x0523	; 0x800523 <Time+0x5>
    133c:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <Time+0x6>
    1340:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <Time+0x7>
    1344:	20 32       	cpi	r18, 0x20	; 32
    1346:	31 4a       	sbci	r19, 0xA1	; 161
    1348:	47 40       	sbci	r20, 0x07	; 7
    134a:	51 05       	cpc	r21, r1
    134c:	61 05       	cpc	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	81 05       	cpc	r24, r1
    1352:	91 05       	cpc	r25, r1
    1354:	09 f0       	breq	.+2      	; 0x1358 <__stack+0x259>
    1356:	08 f4       	brcc	.+2      	; 0x135a <__stack+0x25b>
    1358:	6b c0       	rjmp	.+214    	; 0x1430 <__stack+0x331>
		{    avg_md_new = 0;
    135a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    135e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    1362:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    1366:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
			star_flag = 121;                 // 91
    136a:	89 e7       	ldi	r24, 0x79	; 121
    136c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
			if (light ==1)
    1370:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	21 f5       	brne	.+72     	; 0x13c0 <__stack+0x2c1>
			{
				time_l = time_l +2;
    1378:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <time_l>
    137c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <time_l+0x1>
    1380:	02 96       	adiw	r24, 0x02	; 2
    1382:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <time_l+0x1>
    1386:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <time_l>
				time_e =0;
    138a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <time_e+0x1>
    138e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <time_e>
				start_time = time_l % 720;   //690
    1392:	60 ed       	ldi	r22, 0xD0	; 208
    1394:	72 e0       	ldi	r23, 0x02	; 2
    1396:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <__divmodhi4>
    139a:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <start_time+0x1>
    139e:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <start_time>
				if (start_time <600)       //600
    13a2:	88 35       	cpi	r24, 0x58	; 88
    13a4:	92 40       	sbci	r25, 0x02	; 2
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <__stack+0x2b3>
				{
					gps_power =0;          // 0 
    13a8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    13ac:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    13b0:	2c c1       	rjmp	.+600    	; 0x160a <__stack+0x50b>
				}
				else
				{
					gps_power =2;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    13ba:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    13be:	25 c1       	rjmp	.+586    	; 0x160a <__stack+0x50b>
				}
			}
			else
			{
				start_time =0;
    13c0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <start_time+0x1>
    13c4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <start_time>
				time_e = time_e +2;
    13c8:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <time_e>
    13cc:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <time_e+0x1>
    13d0:	6e 5f       	subi	r22, 0xFE	; 254
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <time_e+0x1>
    13d8:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <time_e>
				if (time_e > (eclipse_time-150))
    13dc:	07 2e       	mov	r0, r23
    13de:	00 0c       	add	r0, r0
    13e0:	88 0b       	sbc	r24, r24
    13e2:	99 0b       	sbc	r25, r25
    13e4:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    13e8:	6b 01       	movw	r12, r22
    13ea:	7c 01       	movw	r14, r24
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	46 e1       	ldi	r20, 0x16	; 22
    13f2:	53 e4       	ldi	r21, 0x43	; 67
    13f4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <eclipse_time>
    13f8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <eclipse_time+0x1>
    13fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <eclipse_time+0x2>
    1400:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <eclipse_time+0x3>
    1404:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	c7 01       	movw	r24, r14
    140e:	b6 01       	movw	r22, r12
    1410:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    1414:	18 16       	cp	r1, r24
    1416:	3c f4       	brge	.+14     	; 0x1426 <__stack+0x327>
				{
					gps_power =2;
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    1420:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
    1424:	f2 c0       	rjmp	.+484    	; 0x160a <__stack+0x50b>
				}
				else
				{
					gps_power =0;
    1426:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    142a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
    142e:	ed c0       	rjmp	.+474    	; 0x160a <__stack+0x50b>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_norm>
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <norm_m_d>
    1440:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <norm_m_d+0x1>
    1444:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <norm_m_d+0x2>
    1448:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <norm_m_d+0x3>
			md_start = norm_m_d * light;
    144c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1450:	68 2f       	mov	r22, r24
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
    146c:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <md_start>
    1470:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <md_start+0x1>
    1474:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <md_start+0x2>
    1478:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <md_start+0x3>
			if (md_start != 0)
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <__stack+0x38d>
    148a:	62 c0       	rjmp	.+196    	; 0x1550 <__stack+0x451>
			{
				if (num==2)
    148c:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <num>
    1490:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <num+0x1>
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	88 16       	cp	r8, r24
    1498:	91 04       	cpc	r9, r1
    149a:	a9 f4       	brne	.+42     	; 0x14c6 <__stack+0x3c7>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    149c:	a7 01       	movw	r20, r14
    149e:	96 01       	movw	r18, r12
    14a0:	c7 01       	movw	r24, r14
    14a2:	b6 01       	movw	r22, r12
    14a4:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    14b4:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    14b8:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    14bc:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    14c0:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
    14c4:	2c c0       	rjmp	.+88     	; 0x151e <__stack+0x41f>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    14c6:	b4 01       	movw	r22, r8
    14c8:	61 50       	subi	r22, 0x01	; 1
    14ca:	71 09       	sbc	r23, r1
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 76 32 	call	0x64ec	; 0x64ec <__floatunsisf>
    14d4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <avg_md>
    14d8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <avg_md+0x1>
    14dc:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <avg_md+0x2>
    14e0:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <avg_md+0x3>
    14e4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    14e8:	9b 01       	movw	r18, r22
    14ea:	ac 01       	movw	r20, r24
    14ec:	c7 01       	movw	r24, r14
    14ee:	b6 01       	movw	r22, r12
    14f0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    14f4:	6b 01       	movw	r12, r22
    14f6:	7c 01       	movw	r14, r24
    14f8:	b4 01       	movw	r22, r8
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 76 32 	call	0x64ec	; 0x64ec <__floatunsisf>
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	c7 01       	movw	r24, r14
    1508:	b6 01       	movw	r22, r12
    150a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    150e:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <avg_md_new>
    1512:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <avg_md_new+0x1>
    1516:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <avg_md_new+0x2>
    151a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <avg_md_new+0x3>
				}
				num = num +1;
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	89 1a       	sub	r8, r25
    1522:	99 0a       	sbc	r9, r25
    1524:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <num+0x1>
    1528:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <num>
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    152c:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <avg_md_new>
    1530:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    1534:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1538:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	c7 01       	movw	r24, r14
    1544:	b6 01       	movw	r22, r12
    1546:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    154a:	81 11       	cpse	r24, r1
    154c:	10 c0       	rjmp	.+32     	; 0x156e <__stack+0x46f>
    154e:	1a c0       	rjmp	.+52     	; 0x1584 <__stack+0x485>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <num+0x1>
    1558:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <num>
				avg_md_new = 0;
    155c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <avg_md_new>
    1560:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <avg_md_new+0x1>
    1564:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <avg_md_new+0x2>
    1568:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <avg_md_new+0x3>
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <__stack+0x485>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	37 ed       	ldi	r19, 0xD7	; 215
    1572:	43 e2       	ldi	r20, 0x23	; 35
    1574:	5d e3       	ldi	r21, 0x3D	; 61
    1576:	c7 01       	movw	r24, r14
    1578:	b6 01       	movw	r22, r12
    157a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    157e:	88 23       	and	r24, r24
    1580:	84 f0       	brlt	.+32     	; 0x15a2 <__stack+0x4a3>
    1582:	19 c0       	rjmp	.+50     	; 0x15b6 <__stack+0x4b7>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <avg_md>
    158e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <avg_md+0x1>
    1592:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <avg_md+0x2>
    1596:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <avg_md+0x3>
    159a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    159e:	88 23       	and	r24, r24
    15a0:	51 f0       	breq	.+20     	; 0x15b6 <__stack+0x4b7>
			{
				flag_on = flag_on +2;
    15a2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <flag_on>
    15a6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <flag_on+0x1>
    15aa:	02 96       	adiw	r24, 0x02	; 2
    15ac:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <flag_on+0x1>
    15b0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <flag_on>
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <__stack+0x4bf>
			}
			else
			{
				flag_on = 0;
    15b6:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <flag_on+0x1>
    15ba:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <flag_on>
			}
			if (flag_on > gps_start)
    15be:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <flag_on>
    15c2:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <flag_on+0x1>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 76 32 	call	0x64ec	; 0x64ec <__floatunsisf>
    15ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    15d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    15d6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
    15da:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
    15de:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	64 f4       	brge	.+24     	; 0x15fe <__stack+0x4ff>
			{
				gps_power = 2;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gps_power+0x1>
    15ee:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gps_power>
				star_flag = star_flag +2;
    15f2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    15f6:	8e 5f       	subi	r24, 0xFE	; 254
    15f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <star_flag>
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <__stack+0x50b>
			}
			else
			{
				gps_power=0;
    15fe:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gps_power+0x1>
    1602:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gps_power>
				star_flag = 0;                        
    1606:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <star_flag>
			}
			
		}
  avg_md = avg_md_new;
    160a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <avg_md_new>
    160e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <avg_md_new+0x1>
    1612:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <avg_md_new+0x2>
    1616:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <avg_md_new+0x3>
    161a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <avg_md>
    161e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <avg_md+0x1>
    1622:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <avg_md+0x2>
    1626:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <avg_md+0x3>
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    162a:	c0 90 84 04 	lds	r12, 0x0484	; 0x800484 <mod_w>
    162e:	d0 90 85 04 	lds	r13, 0x0485	; 0x800485 <mod_w+0x1>
    1632:	e0 90 86 04 	lds	r14, 0x0486	; 0x800486 <mod_w+0x2>
    1636:	f0 90 87 04 	lds	r15, 0x0487	; 0x800487 <mod_w+0x3>
    163a:	2f e6       	ldi	r18, 0x6F	; 111
    163c:	32 e1       	ldi	r19, 0x12	; 18
    163e:	43 e8       	ldi	r20, 0x83	; 131
    1640:	5b e3       	ldi	r21, 0x3B	; 59
    1642:	c7 01       	movw	r24, r14
    1644:	b6 01       	movw	r22, r12
    1646:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    164a:	88 23       	and	r24, r24
    164c:	bc f4       	brge	.+46     	; 0x167c <__stack+0x57d>
    164e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <light>
    1652:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <w_ctrl>
    1656:	89 9f       	mul	r24, r25
    1658:	c0 01       	movw	r24, r0
    165a:	11 24       	eor	r1, r1
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	71 f4       	brne	.+28     	; 0x167c <__stack+0x57d>
   {
	   flag_N = flag_N+1;
    1660:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <flag_N>
    1664:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <flag_N+0x1>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <flag_N+0x1>
    166e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <flag_N>
	   flag_D = 0;
    1672:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1676:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    167a:	17 c0       	rjmp	.+46     	; 0x16aa <__stack+0x5ab>
   }
   else if (mod_w > TOLW_N2D)
    167c:	2f e6       	ldi	r18, 0x6F	; 111
    167e:	32 e1       	ldi	r19, 0x12	; 18
    1680:	43 e0       	ldi	r20, 0x03	; 3
    1682:	5c e3       	ldi	r21, 0x3C	; 60
    1684:	c7 01       	movw	r24, r14
    1686:	b6 01       	movw	r22, r12
    1688:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    168c:	18 16       	cp	r1, r24
    168e:	6c f4       	brge	.+26     	; 0x16aa <__stack+0x5ab>
   {
	   flag_D = flag_D +1;
    1690:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag_D>
    1694:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <flag_D+0x1>
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <flag_D+0x1>
    169e:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <flag_D>
	   flag_N = 0;
    16a2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    16a6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    16aa:	60 90 1e 05 	lds	r6, 0x051E	; 0x80051e <Time>
    16ae:	70 90 1f 05 	lds	r7, 0x051F	; 0x80051f <Time+0x1>
    16b2:	80 90 20 05 	lds	r8, 0x0520	; 0x800520 <Time+0x2>
    16b6:	90 90 21 05 	lds	r9, 0x0521	; 0x800521 <Time+0x3>
    16ba:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <Time+0x4>
    16be:	a0 91 23 05 	lds	r26, 0x0523	; 0x800523 <Time+0x5>
    16c2:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <Time+0x6>
    16c6:	e0 91 25 05 	lds	r30, 0x0525	; 0x800525 <Time+0x7>
    16ca:	26 2d       	mov	r18, r6
    16cc:	37 2d       	mov	r19, r7
    16ce:	48 2d       	mov	r20, r8
    16d0:	59 2d       	mov	r21, r9
    16d2:	6b 2f       	mov	r22, r27
    16d4:	7a 2f       	mov	r23, r26
    16d6:	8f 2f       	mov	r24, r31
    16d8:	9e 2f       	mov	r25, r30
    16da:	23 3f       	cpi	r18, 0xF3	; 243
    16dc:	31 40       	sbci	r19, 0x01	; 1
    16de:	41 05       	cpc	r20, r1
    16e0:	51 05       	cpc	r21, r1
    16e2:	61 05       	cpc	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	81 05       	cpc	r24, r1
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f0       	breq	.+2      	; 0x16ee <__stack+0x5ef>
    16ec:	a0 f4       	brcc	.+40     	; 0x1716 <__stack+0x617>
	{
		Mode = DETUMBLING;
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
		t_now = 0;
    16f4:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <t_now>
    16f8:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <t_now+0x1>
    16fc:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <t_now+0x2>
    1700:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <t_now+0x3>
    1704:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <t_now+0x4>
    1708:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <t_now+0x5>
    170c:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <t_now+0x6>
    1710:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <t_now+0x7>
    1714:	77 c0       	rjmp	.+238    	; 0x1804 <__stack+0x705>
	}
	else
	{
		if (star_flag >0)
    1716:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <star_flag>
    171a:	18 16       	cp	r1, r24
    171c:	5c f5       	brge	.+86     	; 0x1774 <__stack+0x675>
		{
			if (Mode == DETUMBLING)
    171e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	39 f5       	brne	.+78     	; 0x1774 <__stack+0x675>
			{
				if (flag_N > tol_time)
    1726:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <flag_N>
    172a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <flag_N+0x1>
    172e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    1732:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    1736:	82 17       	cp	r24, r18
    1738:	93 07       	cpc	r25, r19
    173a:	c4 f4       	brge	.+48     	; 0x176c <__stack+0x66d>
				{
					Mode = NOMINAL;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
					t_now = Time;
    1742:	60 92 c5 01 	sts	0x01C5, r6	; 0x8001c5 <t_now>
    1746:	70 92 c6 01 	sts	0x01C6, r7	; 0x8001c6 <t_now+0x1>
    174a:	80 92 c7 01 	sts	0x01C7, r8	; 0x8001c7 <t_now+0x2>
    174e:	90 92 c8 01 	sts	0x01C8, r9	; 0x8001c8 <t_now+0x3>
    1752:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <t_now+0x4>
    1756:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <t_now+0x5>
    175a:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <t_now+0x6>
    175e:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <t_now+0x7>
					flag_N = 0;
    1762:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1766:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <__stack+0x675>
				}
				else
				{flag_D = 0;}	
    176c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    1770:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1774:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	09 f0       	breq	.+2      	; 0x177e <__stack+0x67f>
    177c:	43 c0       	rjmp	.+134    	; 0x1804 <__stack+0x705>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    177e:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <flag_D>
    1782:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <flag_D+0x1>
    1786:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tol_time>
    178a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tol_time+0x1>
    178e:	82 17       	cp	r24, r18
    1790:	93 07       	cpc	r25, r19
    1792:	a4 f5       	brge	.+104    	; 0x17fc <__stack+0x6fd>
    1794:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <t_now>
    1798:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <t_now+0x1>
    179c:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <t_now+0x2>
    17a0:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <t_now+0x3>
    17a4:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <t_now+0x4>
    17a8:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <t_now+0x5>
    17ac:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <t_now+0x6>
    17b0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <t_now+0x7>
    17b4:	20 5f       	subi	r18, 0xF0	; 240
    17b6:	38 4d       	sbci	r19, 0xD8	; 216
    17b8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	6f 4f       	sbci	r22, 0xFF	; 255
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	8f 4f       	sbci	r24, 0xFF	; 255
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	a2 2e       	mov	r10, r18
    17c6:	b3 2e       	mov	r11, r19
    17c8:	c4 2e       	mov	r12, r20
    17ca:	d5 2e       	mov	r13, r21
    17cc:	e6 2e       	mov	r14, r22
    17ce:	f7 2e       	mov	r15, r23
    17d0:	08 2f       	mov	r16, r24
    17d2:	19 2f       	mov	r17, r25
    17d4:	26 2d       	mov	r18, r6
    17d6:	37 2d       	mov	r19, r7
    17d8:	48 2d       	mov	r20, r8
    17da:	59 2d       	mov	r21, r9
    17dc:	6b 2f       	mov	r22, r27
    17de:	7a 2f       	mov	r23, r26
    17e0:	8f 2f       	mov	r24, r31
    17e2:	9e 2f       	mov	r25, r30
    17e4:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__cmpdi2>
    17e8:	49 f0       	breq	.+18     	; 0x17fc <__stack+0x6fd>
    17ea:	40 f0       	brcs	.+16     	; 0x17fc <__stack+0x6fd>
		 {
			 Mode = DETUMBLING;
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Mode>
			 flag_D = 0;
    17f2:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <flag_D+0x1>
    17f6:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_D>
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <__stack+0x705>
		 }
		 else
		 {
			 flag_N = 0;
    17fc:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <flag_N+0x1>
    1800:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <flag_N>
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    1804:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gps_power>
    1808:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <Current_state+0x2e>
}
    180c:	e0 96       	adiw	r28, 0x30	; 48
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	08 95       	ret

00001836 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	32 97       	sbiw	r30, 0x02	; 2
    183c:	eb 30       	cpi	r30, 0x0B	; 11
    183e:	f1 05       	cpc	r31, r1
    1840:	08 f0       	brcs	.+2      	; 0x1844 <days_in_months+0xe>
    1842:	67 c0       	rjmp	.+206    	; 0x1912 <days_in_months+0xdc>
    1844:	ea 5b       	subi	r30, 0xBA	; 186
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	0c 94 fc 35 	jmp	0x6bf8	; 0x6bf8 <__tablejump2__>
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    184c:	2f e1       	ldi	r18, 0x1F	; 31
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	08 95       	ret
      break;
    case 3:
      return 59;
    185e:	2b e3       	ldi	r18, 0x3B	; 59
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	08 95       	ret
      break;
    case 4:
      return 90;
    1870:	2a e5       	ldi	r18, 0x5A	; 90
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	08 95       	ret
      break;
    case 5:
      return 120;
    1882:	28 e7       	ldi	r18, 0x78	; 120
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	08 95       	ret
      break;
    case 6:
      return 151;
    1894:	27 e9       	ldi	r18, 0x97	; 151
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	08 95       	ret
      break;
    case 7:
      return 181;
    18a6:	25 eb       	ldi	r18, 0xB5	; 181
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	08 95       	ret
      break;
    case 8:
      return 212;
    18b8:	24 ed       	ldi	r18, 0xD4	; 212
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	08 95       	ret
      break;
    case 9:
      return 243;
    18ca:	23 ef       	ldi	r18, 0xF3	; 243
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	08 95       	ret
      break;
    case 10:
      return 273;
    18dc:	21 e1       	ldi	r18, 0x11	; 17
    18de:	31 e0       	ldi	r19, 0x01	; 1
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	08 95       	ret
      break;
    case 11:
      return 304;
    18ee:	20 e3       	ldi	r18, 0x30	; 48
    18f0:	31 e0       	ldi	r19, 0x01	; 1
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	08 95       	ret
      break;
    case 12:
      return 334;
    1900:	2e e4       	ldi	r18, 0x4E	; 78
    1902:	31 e0       	ldi	r19, 0x01	; 1
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	08 95       	ret
uint64_t days_in_months(uint8_t month)
{
  switch (month)
  {
    case 1:
      return 0;
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    1922:	08 95       	ret

00001924 <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    1924:	2f 92       	push	r2
    1926:	3f 92       	push	r3
    1928:	4f 92       	push	r4
    192a:	5f 92       	push	r5
    192c:	6f 92       	push	r6
    192e:	7f 92       	push	r7
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	65 97       	sbiw	r28, 0x15	; 21
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	2c 01       	movw	r4, r24
    195a:	86 2f       	mov	r24, r22
    195c:	49 87       	std	Y+9, r20	; 0x09
    195e:	62 2e       	mov	r6, r18
    1960:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1962:	69 df       	rcall	.-302    	; 0x1836 <days_in_months>
    1964:	2a 87       	std	Y+10, r18	; 0x0a
    1966:	3b 87       	std	Y+11, r19	; 0x0b
    1968:	4c 87       	std	Y+12, r20	; 0x0c
    196a:	5d 87       	std	Y+13, r21	; 0x0d
    196c:	6e 87       	std	Y+14, r22	; 0x0e
    196e:	7f 87       	std	Y+15, r23	; 0x0f
    1970:	88 8b       	std	Y+16, r24	; 0x10
    1972:	99 8b       	std	Y+17, r25	; 0x11
    1974:	2e 2d       	mov	r18, r14
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	20 58       	subi	r18, 0x80	; 128
    1986:	3c 45       	sbci	r19, 0x5C	; 92
    1988:	44 49       	sbci	r20, 0x94	; 148
    198a:	5b 4c       	sbci	r21, 0xCB	; 203
    198c:	6e 40       	sbci	r22, 0x0E	; 14
    198e:	71 09       	sbc	r23, r1
    1990:	81 09       	sbc	r24, r1
    1992:	91 09       	sbc	r25, r1
    1994:	82 2e       	mov	r8, r18
    1996:	93 2e       	mov	r9, r19
    1998:	34 2e       	mov	r3, r20
    199a:	75 2e       	mov	r7, r21
    199c:	b6 2f       	mov	r27, r22
    199e:	a7 2f       	mov	r26, r23
    19a0:	f8 2f       	mov	r31, r24
    19a2:	e9 2f       	mov	r30, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    19a4:	20 2f       	mov	r18, r16
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	04 e0       	ldi	r16, 0x04	; 4
    19b6:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    19ba:	b1 2c       	mov	r11, r1
    19bc:	c1 2c       	mov	r12, r1
    19be:	d1 2c       	mov	r13, r1
    19c0:	e1 2c       	mov	r14, r1
    19c2:	f1 2c       	mov	r15, r1
    19c4:	00 e0       	ldi	r16, 0x00	; 0
    19c6:	10 e0       	ldi	r17, 0x00	; 0
    19c8:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    19cc:	02 e0       	ldi	r16, 0x02	; 2
    19ce:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    19d2:	a2 2e       	mov	r10, r18
    19d4:	b3 2e       	mov	r11, r19
    19d6:	c4 2e       	mov	r12, r20
    19d8:	d5 2e       	mov	r13, r21
    19da:	e6 2e       	mov	r14, r22
    19dc:	f7 2e       	mov	r15, r23
    19de:	08 2f       	mov	r16, r24
    19e0:	19 2f       	mov	r17, r25
    19e2:	28 2d       	mov	r18, r8
    19e4:	39 2d       	mov	r19, r9
    19e6:	43 2d       	mov	r20, r3
    19e8:	57 2d       	mov	r21, r7
    19ea:	6b 2f       	mov	r22, r27
    19ec:	7a 2f       	mov	r23, r26
    19ee:	8f 2f       	mov	r24, r31
    19f0:	9e 2f       	mov	r25, r30
    19f2:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    19f6:	72 2e       	mov	r7, r18
    19f8:	83 2e       	mov	r8, r19
    19fa:	94 2e       	mov	r9, r20
    19fc:	25 2e       	mov	r2, r21
    19fe:	36 2e       	mov	r3, r22
    1a00:	b7 2f       	mov	r27, r23
    1a02:	a8 2f       	mov	r26, r24
    1a04:	f9 2f       	mov	r31, r25
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
    1a06:	26 2d       	mov	r18, r6
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	04 e0       	ldi	r16, 0x04	; 4
    1a18:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1a1c:	a6 2c       	mov	r10, r6
    1a1e:	b1 2c       	mov	r11, r1
    1a20:	c1 2c       	mov	r12, r1
    1a22:	d1 2c       	mov	r13, r1
    1a24:	e1 2c       	mov	r14, r1
    1a26:	f1 2c       	mov	r15, r1
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1a30:	a2 2e       	mov	r10, r18
    1a32:	b3 2e       	mov	r11, r19
    1a34:	c4 2e       	mov	r12, r20
    1a36:	d5 2e       	mov	r13, r21
    1a38:	e6 2e       	mov	r14, r22
    1a3a:	f7 2e       	mov	r15, r23
    1a3c:	e8 2f       	mov	r30, r24
    1a3e:	19 2f       	mov	r17, r25
    1a40:	04 e0       	ldi	r16, 0x04	; 4
    1a42:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1a46:	0e 2f       	mov	r16, r30
    1a48:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1a4c:	04 e0       	ldi	r16, 0x04	; 4
    1a4e:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1a52:	a2 2e       	mov	r10, r18
    1a54:	b3 2e       	mov	r11, r19
    1a56:	c4 2e       	mov	r12, r20
    1a58:	d5 2e       	mov	r13, r21
    1a5a:	e6 2e       	mov	r14, r22
    1a5c:	f7 2e       	mov	r15, r23
    1a5e:	08 2f       	mov	r16, r24
    1a60:	19 2f       	mov	r17, r25
    1a62:	27 2d       	mov	r18, r7
    1a64:	38 2d       	mov	r19, r8
    1a66:	49 2d       	mov	r20, r9
    1a68:	52 2d       	mov	r21, r2
    1a6a:	63 2d       	mov	r22, r3
    1a6c:	7b 2f       	mov	r23, r27
    1a6e:	8a 2f       	mov	r24, r26
    1a70:	9f 2f       	mov	r25, r31
    1a72:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    1a76:	22 2e       	mov	r2, r18
    1a78:	33 2e       	mov	r3, r19
    1a7a:	4a 8b       	std	Y+18, r20	; 0x12
    1a7c:	5b 8b       	std	Y+19, r21	; 0x13
    1a7e:	66 2e       	mov	r6, r22
    1a80:	77 2e       	mov	r7, r23
    1a82:	8c 8b       	std	Y+20, r24	; 0x14
    1a84:	9d 8b       	std	Y+21, r25	; 0x15
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1a86:	92 01       	movw	r18, r4
    1a88:	49 82       	std	Y+1, r4	; 0x01
    1a8a:	3a 83       	std	Y+2, r19	; 0x02
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	03 e0       	ldi	r16, 0x03	; 3
    1a9a:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1a9e:	82 2e       	mov	r8, r18
    1aa0:	93 2e       	mov	r9, r19
    1aa2:	44 2e       	mov	r4, r20
    1aa4:	55 2e       	mov	r5, r21
    1aa6:	b6 2f       	mov	r27, r22
    1aa8:	a7 2f       	mov	r26, r23
    1aaa:	f8 2f       	mov	r31, r24
    1aac:	e9 2f       	mov	r30, r25
    1aae:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1ab2:	a2 2e       	mov	r10, r18
    1ab4:	b3 2e       	mov	r11, r19
    1ab6:	c4 2e       	mov	r12, r20
    1ab8:	d5 2e       	mov	r13, r21
    1aba:	e6 2e       	mov	r14, r22
    1abc:	f7 2e       	mov	r15, r23
    1abe:	08 2f       	mov	r16, r24
    1ac0:	19 2f       	mov	r17, r25
    1ac2:	28 2d       	mov	r18, r8
    1ac4:	39 2d       	mov	r19, r9
    1ac6:	44 2d       	mov	r20, r4
    1ac8:	55 2d       	mov	r21, r5
    1aca:	6b 2f       	mov	r22, r27
    1acc:	7a 2f       	mov	r23, r26
    1ace:	8f 2f       	mov	r24, r31
    1ad0:	9e 2f       	mov	r25, r30
    1ad2:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    1ad6:	a9 80       	ldd	r10, Y+1	; 0x01
    1ad8:	ba 80       	ldd	r11, Y+2	; 0x02
    1ada:	c1 2c       	mov	r12, r1
    1adc:	d1 2c       	mov	r13, r1
    1ade:	e1 2c       	mov	r14, r1
    1ae0:	f1 2c       	mov	r15, r1
    1ae2:	00 e0       	ldi	r16, 0x00	; 0
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    1aea:	a2 2e       	mov	r10, r18
    1aec:	b3 2e       	mov	r11, r19
    1aee:	c4 2e       	mov	r12, r20
    1af0:	d5 2e       	mov	r13, r21
    1af2:	e6 2e       	mov	r14, r22
    1af4:	f7 2e       	mov	r15, r23
    1af6:	e8 2f       	mov	r30, r24
    1af8:	19 2f       	mov	r17, r25
    1afa:	04 e0       	ldi	r16, 0x04	; 4
    1afc:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1b00:	0e 2f       	mov	r16, r30
    1b02:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1b06:	a2 2e       	mov	r10, r18
    1b08:	b3 2e       	mov	r11, r19
    1b0a:	c4 2e       	mov	r12, r20
    1b0c:	d5 2e       	mov	r13, r21
    1b0e:	e6 2e       	mov	r14, r22
    1b10:	f7 2e       	mov	r15, r23
    1b12:	e8 2f       	mov	r30, r24
    1b14:	19 2f       	mov	r17, r25
    1b16:	04 e0       	ldi	r16, 0x04	; 4
    1b18:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1b1c:	0e 2f       	mov	r16, r30
    1b1e:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1b22:	a2 2e       	mov	r10, r18
    1b24:	b3 2e       	mov	r11, r19
    1b26:	c4 2e       	mov	r12, r20
    1b28:	d5 2e       	mov	r13, r21
    1b2a:	e6 2e       	mov	r14, r22
    1b2c:	f7 2e       	mov	r15, r23
    1b2e:	e8 2f       	mov	r30, r24
    1b30:	19 2f       	mov	r17, r25
    1b32:	04 e0       	ldi	r16, 0x04	; 4
    1b34:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1b38:	0e 2f       	mov	r16, r30
    1b3a:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1b3e:	07 e0       	ldi	r16, 0x07	; 7
    1b40:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1b44:	a2 2e       	mov	r10, r18
    1b46:	b3 2e       	mov	r11, r19
    1b48:	c4 2e       	mov	r12, r20
    1b4a:	d5 2e       	mov	r13, r21
    1b4c:	e6 2e       	mov	r14, r22
    1b4e:	f7 2e       	mov	r15, r23
    1b50:	08 2f       	mov	r16, r24
    1b52:	19 2f       	mov	r17, r25
    1b54:	22 2d       	mov	r18, r2
    1b56:	33 2d       	mov	r19, r3
    1b58:	4a 89       	ldd	r20, Y+18	; 0x12
    1b5a:	5b 89       	ldd	r21, Y+19	; 0x13
    1b5c:	66 2d       	mov	r22, r6
    1b5e:	77 2d       	mov	r23, r7
    1b60:	8c 89       	ldd	r24, Y+20	; 0x14
    1b62:	9d 89       	ldd	r25, Y+21	; 0x15
    1b64:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    1b68:	72 2e       	mov	r7, r18
    1b6a:	83 2e       	mov	r8, r19
    1b6c:	94 2e       	mov	r9, r20
    1b6e:	b5 2f       	mov	r27, r21
    1b70:	66 2e       	mov	r6, r22
    1b72:	57 2e       	mov	r5, r23
    1b74:	f8 2f       	mov	r31, r24
    1b76:	e9 2f       	mov	r30, r25
    1b78:	29 85       	ldd	r18, Y+9	; 0x09
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	af ef       	ldi	r26, 0xFF	; 255
    1b8a:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <__adddi3_s8>
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b90:	bb 84       	ldd	r11, Y+11	; 0x0b
    1b92:	cc 84       	ldd	r12, Y+12	; 0x0c
    1b94:	dd 84       	ldd	r13, Y+13	; 0x0d
    1b96:	ee 84       	ldd	r14, Y+14	; 0x0e
    1b98:	ff 84       	ldd	r15, Y+15	; 0x0f
    1b9a:	08 89       	ldd	r16, Y+16	; 0x10
    1b9c:	19 89       	ldd	r17, Y+17	; 0x11
    1b9e:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
    1ba2:	a2 2e       	mov	r10, r18
    1ba4:	b3 2e       	mov	r11, r19
    1ba6:	c4 2e       	mov	r12, r20
    1ba8:	d5 2e       	mov	r13, r21
    1baa:	e6 2e       	mov	r14, r22
    1bac:	f7 2e       	mov	r15, r23
    1bae:	a8 2f       	mov	r26, r24
    1bb0:	19 2f       	mov	r17, r25
    1bb2:	02 e0       	ldi	r16, 0x02	; 2
    1bb4:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1bb8:	0a 2f       	mov	r16, r26
    1bba:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1bbe:	a2 2e       	mov	r10, r18
    1bc0:	b3 2e       	mov	r11, r19
    1bc2:	c4 2e       	mov	r12, r20
    1bc4:	d5 2e       	mov	r13, r21
    1bc6:	e6 2e       	mov	r14, r22
    1bc8:	f7 2e       	mov	r15, r23
    1bca:	a8 2f       	mov	r26, r24
    1bcc:	19 2f       	mov	r17, r25
    1bce:	04 e0       	ldi	r16, 0x04	; 4
    1bd0:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1bd4:	0a 2f       	mov	r16, r26
    1bd6:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1bda:	a2 2e       	mov	r10, r18
    1bdc:	b3 2e       	mov	r11, r19
    1bde:	c4 2e       	mov	r12, r20
    1be0:	d5 2e       	mov	r13, r21
    1be2:	e6 2e       	mov	r14, r22
    1be4:	f7 2e       	mov	r15, r23
    1be6:	a8 2f       	mov	r26, r24
    1be8:	19 2f       	mov	r17, r25
    1bea:	04 e0       	ldi	r16, 0x04	; 4
    1bec:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1bf0:	0a 2f       	mov	r16, r26
    1bf2:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1bf6:	07 e0       	ldi	r16, 0x07	; 7
    1bf8:	0e 94 14 36 	call	0x6c28	; 0x6c28 <__ashldi3>
    1bfc:	a2 2e       	mov	r10, r18
    1bfe:	b3 2e       	mov	r11, r19
    1c00:	c4 2e       	mov	r12, r20
    1c02:	d5 2e       	mov	r13, r21
    1c04:	e6 2e       	mov	r14, r22
    1c06:	f7 2e       	mov	r15, r23
    1c08:	08 2f       	mov	r16, r24
    1c0a:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1c0c:	27 2d       	mov	r18, r7
    1c0e:	38 2d       	mov	r19, r8
    1c10:	49 2d       	mov	r20, r9
    1c12:	5b 2f       	mov	r21, r27
    1c14:	66 2d       	mov	r22, r6
    1c16:	75 2d       	mov	r23, r5
    1c18:	8f 2f       	mov	r24, r31
    1c1a:	9e 2f       	mov	r25, r30
    1c1c:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__adddi3>
  return now;
}
    1c20:	65 96       	adiw	r28, 0x15	; 21
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	3f 90       	pop	r3
    1c4e:	2f 90       	pop	r2
    1c50:	08 95       	ret

00001c52 <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1c66:	e1 2c       	mov	r14, r1
    1c68:	0e e1       	ldi	r16, 0x1E	; 30
    1c6a:	24 e0       	ldi	r18, 0x04	; 4
    1c6c:	44 e1       	ldi	r20, 0x14	; 20
    1c6e:	63 e0       	ldi	r22, 0x03	; 3
    1c70:	80 ee       	ldi	r24, 0xE0	; 224
    1c72:	97 e0       	ldi	r25, 0x07	; 7
    1c74:	57 de       	rcall	.-850    	; 0x1924 <get_seconds_since_pivot>
    1c76:	a2 2e       	mov	r10, r18
    1c78:	b3 2e       	mov	r11, r19
    1c7a:	c4 2e       	mov	r12, r20
    1c7c:	d5 2e       	mov	r13, r21
    1c7e:	d6 2f       	mov	r29, r22
    1c80:	f7 2e       	mov	r15, r23
    1c82:	c8 2f       	mov	r28, r24
    1c84:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1c86:	eb ea       	ldi	r30, 0xAB	; 171
    1c88:	f4 e0       	ldi	r31, 0x04	; 4
    1c8a:	81 a5       	ldd	r24, Z+41	; 0x29
    1c8c:	92 a5       	ldd	r25, Z+42	; 0x2a
    1c8e:	e6 a0       	ldd	r14, Z+38	; 0x26
    1c90:	05 a1       	ldd	r16, Z+37	; 0x25
    1c92:	24 a1       	ldd	r18, Z+36	; 0x24
    1c94:	47 a1       	ldd	r20, Z+39	; 0x27
    1c96:	60 a5       	ldd	r22, Z+40	; 0x28
    1c98:	45 de       	rcall	.-886    	; 0x1924 <get_seconds_since_pivot>
    1c9a:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <seconds_since_pivot>
    1c9e:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <seconds_since_pivot+0x1>
    1ca2:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <seconds_since_pivot+0x2>
    1ca6:	50 93 8b 04 	sts	0x048B, r21	; 0x80048b <seconds_since_pivot+0x3>
    1caa:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <seconds_since_pivot+0x4>
    1cae:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <seconds_since_pivot+0x5>
    1cb2:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <seconds_since_pivot+0x6>
    1cb6:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <seconds_since_pivot+0x7>
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1cba:	ed 2e       	mov	r14, r29
    1cbc:	0c 2f       	mov	r16, r28
    1cbe:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__subdi3>
    1cc2:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <seconds_since_equinox>
    1cc6:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <seconds_since_equinox+0x1>
    1cca:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <seconds_since_equinox+0x2>
    1cce:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <seconds_since_equinox+0x3>
    1cd2:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <seconds_since_equinox+0x4>
    1cd6:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <seconds_since_equinox+0x5>
    1cda:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <seconds_since_equinox+0x6>
    1cde:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <seconds_since_equinox+0x7>
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	08 95       	ret

00001cf8 <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1cf8:	4f 92       	push	r4
    1cfa:	5f 92       	push	r5
    1cfc:	6f 92       	push	r6
    1cfe:	7f 92       	push	r7
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	a4 97       	sbiw	r28, 0x24	; 36
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	7c 01       	movw	r14, r24
    1d2a:	6b 01       	movw	r12, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1d2c:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    1d30:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    1d34:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    1d38:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    1d3c:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    1d40:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    1d44:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    1d48:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    1d4c:	0e 94 b3 32 	call	0x6566	; 0x6566 <__floatundisf>
    1d50:	27 eb       	ldi	r18, 0xB7	; 183
    1d52:	39 e5       	ldi	r19, 0x59	; 89
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1d5c:	2e eb       	ldi	r18, 0xBE	; 190
    1d5e:	37 ef       	ldi	r19, 0xF7	; 247
    1d60:	48 e9       	ldi	r20, 0x98	; 152
    1d62:	58 e3       	ldi	r21, 0x38	; 56
    1d64:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    1d68:	2b 01       	movw	r4, r22
    1d6a:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d6c:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    1d70:	4b 01       	movw	r8, r22
    1d72:	5c 01       	movw	r10, r24
    1d74:	69 83       	std	Y+1, r22	; 0x01
    1d76:	7a 83       	std	Y+2, r23	; 0x02
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	c3 01       	movw	r24, r6
    1d7e:	b2 01       	movw	r22, r4
    1d80:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    1d84:	6d 83       	std	Y+5, r22	; 0x05
    1d86:	7e 83       	std	Y+6, r23	; 0x06
    1d88:	8f 83       	std	Y+7, r24	; 0x07
    1d8a:	98 87       	std	Y+8, r25	; 0x08
    1d8c:	19 86       	std	Y+9, r1	; 0x09
    1d8e:	1a 86       	std	Y+10, r1	; 0x0a
    1d90:	1b 86       	std	Y+11, r1	; 0x0b
    1d92:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1d94:	8b 01       	movw	r16, r22
    1d96:	9c 01       	movw	r18, r24
    1d98:	30 58       	subi	r19, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d9a:	0d 87       	std	Y+13, r16	; 0x0d
    1d9c:	1e 87       	std	Y+14, r17	; 0x0e
    1d9e:	2f 87       	std	Y+15, r18	; 0x0f
    1da0:	38 8b       	std	Y+16, r19	; 0x10
    1da2:	89 8a       	std	Y+17, r8	; 0x11
    1da4:	9a 8a       	std	Y+18, r9	; 0x12
    1da6:	ab 8a       	std	Y+19, r10	; 0x13
    1da8:	bc 8a       	std	Y+20, r11	; 0x14
    1daa:	1d 8a       	std	Y+21, r1	; 0x15
    1dac:	1e 8a       	std	Y+22, r1	; 0x16
    1dae:	1f 8a       	std	Y+23, r1	; 0x17
    1db0:	18 8e       	std	Y+24, r1	; 0x18
    1db2:	19 8e       	std	Y+25, r1	; 0x19
    1db4:	1a 8e       	std	Y+26, r1	; 0x1a
    1db6:	1b 8e       	std	Y+27, r1	; 0x1b
    1db8:	1c 8e       	std	Y+28, r1	; 0x1c
    1dba:	1d 8e       	std	Y+29, r1	; 0x1d
    1dbc:	1e 8e       	std	Y+30, r1	; 0x1e
    1dbe:	1f 8e       	std	Y+31, r1	; 0x1f
    1dc0:	18 a2       	std	Y+32, r1	; 0x20
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e8       	ldi	r26, 0x80	; 128
    1dc8:	bf e3       	ldi	r27, 0x3F	; 63
    1dca:	89 a3       	std	Y+33, r24	; 0x21
    1dcc:	9a a3       	std	Y+34, r25	; 0x22
    1dce:	ab a3       	std	Y+35, r26	; 0x23
    1dd0:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1dd2:	a6 01       	movw	r20, r12
    1dd4:	be 01       	movw	r22, r28
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	c7 01       	movw	r24, r14
    1ddc:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1de0:	a4 96       	adiw	r28, 0x24	; 36
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	bf 90       	pop	r11
    1dfe:	af 90       	pop	r10
    1e00:	9f 90       	pop	r9
    1e02:	8f 90       	pop	r8
    1e04:	7f 90       	pop	r7
    1e06:	6f 90       	pop	r6
    1e08:	5f 90       	pop	r5
    1e0a:	4f 90       	pop	r4
    1e0c:	08 95       	ret

00001e0e <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1e0e:	4f 92       	push	r4
    1e10:	5f 92       	push	r5
    1e12:	6f 92       	push	r6
    1e14:	7f 92       	push	r7
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	a4 97       	sbiw	r28, 0x24	; 36
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1e3e:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    1e42:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    1e46:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    1e4a:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    1e4e:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    1e52:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    1e56:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    1e5a:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    1e5e:	0e 94 b3 32 	call	0x6566	; 0x6566 <__floatundisf>
    1e62:	27 eb       	ldi	r18, 0xB7	; 183
    1e64:	39 e5       	ldi	r19, 0x59	; 89
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1e6e:	2e eb       	ldi	r18, 0xBE	; 190
    1e70:	37 ef       	ldi	r19, 0xF7	; 247
    1e72:	48 e9       	ldi	r20, 0x98	; 152
    1e74:	58 e3       	ldi	r21, 0x38	; 56
    1e76:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    1e7a:	2b 01       	movw	r4, r22
    1e7c:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1e7e:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    1e82:	6b 01       	movw	r12, r22
    1e84:	7c 01       	movw	r14, r24
    1e86:	69 83       	std	Y+1, r22	; 0x01
    1e88:	7a 83       	std	Y+2, r23	; 0x02
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	c3 01       	movw	r24, r6
    1e90:	b2 01       	movw	r22, r4
    1e92:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    1e96:	2b 01       	movw	r4, r22
    1e98:	3c 01       	movw	r6, r24
    1e9a:	77 fa       	bst	r7, 7
    1e9c:	70 94       	com	r7
    1e9e:	77 f8       	bld	r7, 7
    1ea0:	70 94       	com	r7
    1ea2:	4d 82       	std	Y+5, r4	; 0x05
    1ea4:	5e 82       	std	Y+6, r5	; 0x06
    1ea6:	6f 82       	std	Y+7, r6	; 0x07
    1ea8:	78 86       	std	Y+8, r7	; 0x08
    1eaa:	19 86       	std	Y+9, r1	; 0x09
    1eac:	1a 86       	std	Y+10, r1	; 0x0a
    1eae:	1b 86       	std	Y+11, r1	; 0x0b
    1eb0:	1c 86       	std	Y+12, r1	; 0x0c
    1eb2:	6d 87       	std	Y+13, r22	; 0x0d
    1eb4:	7e 87       	std	Y+14, r23	; 0x0e
    1eb6:	8f 87       	std	Y+15, r24	; 0x0f
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	c9 8a       	std	Y+17, r12	; 0x11
    1ebc:	da 8a       	std	Y+18, r13	; 0x12
    1ebe:	eb 8a       	std	Y+19, r14	; 0x13
    1ec0:	fc 8a       	std	Y+20, r15	; 0x14
    1ec2:	1d 8a       	std	Y+21, r1	; 0x15
    1ec4:	1e 8a       	std	Y+22, r1	; 0x16
    1ec6:	1f 8a       	std	Y+23, r1	; 0x17
    1ec8:	18 8e       	std	Y+24, r1	; 0x18
    1eca:	19 8e       	std	Y+25, r1	; 0x19
    1ecc:	1a 8e       	std	Y+26, r1	; 0x1a
    1ece:	1b 8e       	std	Y+27, r1	; 0x1b
    1ed0:	1c 8e       	std	Y+28, r1	; 0x1c
    1ed2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ed4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ed6:	1f 8e       	std	Y+31, r1	; 0x1f
    1ed8:	18 a2       	std	Y+32, r1	; 0x20
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 e8       	ldi	r26, 0x80	; 128
    1ee0:	bf e3       	ldi	r27, 0x3F	; 63
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	ab a3       	std	Y+35, r26	; 0x23
    1ee8:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1eea:	a5 01       	movw	r20, r10
    1eec:	be 01       	movw	r22, r28
    1eee:	6f 5f       	subi	r22, 0xFF	; 255
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vector_into_matrix>
}
    1ef8:	a4 96       	adiw	r28, 0x24	; 36
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	bf 90       	pop	r11
    1f16:	af 90       	pop	r10
    1f18:	7f 90       	pop	r7
    1f1a:	6f 90       	pop	r6
    1f1c:	5f 90       	pop	r5
    1f1e:	4f 90       	pop	r4
    1f20:	08 95       	ret

00001f22 <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	c8 54       	subi	r28, 0x48	; 72
    1f38:	d1 09       	sbc	r29, r1
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	8c 01       	movw	r16, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	6a 01       	movw	r12, r20
    1f4a:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1f4c:	ae 01       	movw	r20, r28
    1f4e:	43 5f       	subi	r20, 0xF3	; 243
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	b8 01       	movw	r22, r16
    1f54:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <vector_cross_product>
  convert_unit_vector(v_o_y);
    1f58:	ce 01       	movw	r24, r28
    1f5a:	0d 96       	adiw	r24, 0x0d	; 13
    1f5c:	0e 94 b5 20 	call	0x416a	; 0x416a <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1f60:	f8 01       	movw	r30, r16
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	a2 81       	ldd	r26, Z+2	; 0x02
    1f68:	b3 81       	ldd	r27, Z+3	; 0x03
    1f6a:	b0 58       	subi	r27, 0x80	; 128
    1f6c:	89 8f       	std	Y+25, r24	; 0x19
    1f6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f70:	ab 8f       	std	Y+27, r26	; 0x1b
    1f72:	bc 8f       	std	Y+28, r27	; 0x1c
    1f74:	84 81       	ldd	r24, Z+4	; 0x04
    1f76:	95 81       	ldd	r25, Z+5	; 0x05
    1f78:	a6 81       	ldd	r26, Z+6	; 0x06
    1f7a:	b7 81       	ldd	r27, Z+7	; 0x07
    1f7c:	b0 58       	subi	r27, 0x80	; 128
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f80:	9e 8f       	std	Y+30, r25	; 0x1e
    1f82:	af 8f       	std	Y+31, r26	; 0x1f
    1f84:	b8 a3       	std	Y+32, r27	; 0x20
    1f86:	00 85       	ldd	r16, Z+8	; 0x08
    1f88:	11 85       	ldd	r17, Z+9	; 0x09
    1f8a:	22 85       	ldd	r18, Z+10	; 0x0a
    1f8c:	33 85       	ldd	r19, Z+11	; 0x0b
    1f8e:	30 58       	subi	r19, 0x80	; 128
    1f90:	09 a3       	std	Y+33, r16	; 0x21
    1f92:	1a a3       	std	Y+34, r17	; 0x22
    1f94:	2b a3       	std	Y+35, r18	; 0x23
    1f96:	3c a3       	std	Y+36, r19	; 0x24
  convert_unit_vector(v_o_z);
    1f98:	ce 01       	movw	r24, r28
    1f9a:	49 96       	adiw	r24, 0x19	; 25
    1f9c:	0e 94 b5 20 	call	0x416a	; 0x416a <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1fa0:	ae 01       	movw	r20, r28
    1fa2:	4f 5f       	subi	r20, 0xFF	; 255
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	be 01       	movw	r22, r28
    1fa8:	67 5e       	subi	r22, 0xE7	; 231
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	ce 01       	movw	r24, r28
    1fae:	0d 96       	adiw	r24, 0x0d	; 13
    1fb0:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <vector_cross_product>
  convert_unit_vector(v_o_x);
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	0e 94 b5 20 	call	0x416a	; 0x416a <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc2:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc4:	8d a3       	std	Y+37, r24	; 0x25
    1fc6:	9e a3       	std	Y+38, r25	; 0x26
    1fc8:	af a3       	std	Y+39, r26	; 0x27
    1fca:	b8 a7       	std	Y+40, r27	; 0x28
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	af 85       	ldd	r26, Y+15	; 0x0f
    1fd2:	b8 89       	ldd	r27, Y+16	; 0x10
    1fd4:	89 a7       	std	Y+41, r24	; 0x29
    1fd6:	9a a7       	std	Y+42, r25	; 0x2a
    1fd8:	ab a7       	std	Y+43, r26	; 0x2b
    1fda:	bc a7       	std	Y+44, r27	; 0x2c
    1fdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1fde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fe0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1fe2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1fe4:	8d a7       	std	Y+45, r24	; 0x2d
    1fe6:	9e a7       	std	Y+46, r25	; 0x2e
    1fe8:	af a7       	std	Y+47, r26	; 0x2f
    1fea:	b8 ab       	std	Y+48, r27	; 0x30
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	af 81       	ldd	r26, Y+7	; 0x07
    1ff2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ff4:	89 ab       	std	Y+49, r24	; 0x31
    1ff6:	9a ab       	std	Y+50, r25	; 0x32
    1ff8:	ab ab       	std	Y+51, r26	; 0x33
    1ffa:	bc ab       	std	Y+52, r27	; 0x34
    1ffc:	89 89       	ldd	r24, Y+17	; 0x11
    1ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    2000:	ab 89       	ldd	r26, Y+19	; 0x13
    2002:	bc 89       	ldd	r27, Y+20	; 0x14
    2004:	8d ab       	std	Y+53, r24	; 0x35
    2006:	9e ab       	std	Y+54, r25	; 0x36
    2008:	af ab       	std	Y+55, r26	; 0x37
    200a:	b8 af       	std	Y+56, r27	; 0x38
    200c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    200e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2010:	af 8d       	ldd	r26, Y+31	; 0x1f
    2012:	b8 a1       	ldd	r27, Y+32	; 0x20
    2014:	89 af       	std	Y+57, r24	; 0x39
    2016:	9a af       	std	Y+58, r25	; 0x3a
    2018:	ab af       	std	Y+59, r26	; 0x3b
    201a:	bc af       	std	Y+60, r27	; 0x3c
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	ab 85       	ldd	r26, Y+11	; 0x0b
    2022:	bc 85       	ldd	r27, Y+12	; 0x0c
    2024:	21 96       	adiw	r28, 0x01	; 1
    2026:	8c af       	std	Y+60, r24	; 0x3c
    2028:	9d af       	std	Y+61, r25	; 0x3d
    202a:	ae af       	std	Y+62, r26	; 0x3e
    202c:	bf af       	std	Y+63, r27	; 0x3f
    202e:	21 97       	sbiw	r28, 0x01	; 1
    2030:	8d 89       	ldd	r24, Y+21	; 0x15
    2032:	9e 89       	ldd	r25, Y+22	; 0x16
    2034:	af 89       	ldd	r26, Y+23	; 0x17
    2036:	b8 8d       	ldd	r27, Y+24	; 0x18
    2038:	25 96       	adiw	r28, 0x05	; 5
    203a:	8c af       	std	Y+60, r24	; 0x3c
    203c:	9d af       	std	Y+61, r25	; 0x3d
    203e:	ae af       	std	Y+62, r26	; 0x3e
    2040:	bf af       	std	Y+63, r27	; 0x3f
    2042:	25 97       	sbiw	r28, 0x05	; 5
    2044:	89 a1       	ldd	r24, Y+33	; 0x21
    2046:	9a a1       	ldd	r25, Y+34	; 0x22
    2048:	ab a1       	ldd	r26, Y+35	; 0x23
    204a:	bc a1       	ldd	r27, Y+36	; 0x24
    204c:	29 96       	adiw	r28, 0x09	; 9
    204e:	8c af       	std	Y+60, r24	; 0x3c
    2050:	9d af       	std	Y+61, r25	; 0x3d
    2052:	ae af       	std	Y+62, r26	; 0x3e
    2054:	bf af       	std	Y+63, r27	; 0x3f
    2056:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    2058:	a7 01       	movw	r20, r14
    205a:	be 01       	movw	r22, r28
    205c:	6b 5d       	subi	r22, 0xDB	; 219
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	c6 01       	movw	r24, r12
    2062:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vector_into_matrix>
}
    2066:	c8 5b       	subi	r28, 0xB8	; 184
    2068:	df 4f       	sbci	r29, 0xFF	; 255
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	cf 90       	pop	r12
    2084:	08 95       	ret

00002086 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    2086:	2f 92       	push	r2
    2088:	3f 92       	push	r3
    208a:	4f 92       	push	r4
    208c:	5f 92       	push	r5
    208e:	6f 92       	push	r6
    2090:	7f 92       	push	r7
    2092:	8f 92       	push	r8
    2094:	9f 92       	push	r9
    2096:	af 92       	push	r10
    2098:	bf 92       	push	r11
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	2c 97       	sbiw	r28, 0x0c	; 12
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	fc 01       	movw	r30, r24
    20bc:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    20be:	80 80       	ld	r8, Z
    20c0:	91 80       	ldd	r9, Z+1	; 0x01
    20c2:	a2 80       	ldd	r10, Z+2	; 0x02
    20c4:	b3 80       	ldd	r11, Z+3	; 0x03
    20c6:	c4 80       	ldd	r12, Z+4	; 0x04
    20c8:	d5 80       	ldd	r13, Z+5	; 0x05
    20ca:	e6 80       	ldd	r14, Z+6	; 0x06
    20cc:	f7 80       	ldd	r15, Z+7	; 0x07
    20ce:	40 84       	ldd	r4, Z+8	; 0x08
    20d0:	51 84       	ldd	r5, Z+9	; 0x09
    20d2:	62 84       	ldd	r6, Z+10	; 0x0a
    20d4:	73 84       	ldd	r7, Z+11	; 0x0b
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    20d6:	a5 01       	movw	r20, r10
    20d8:	94 01       	movw	r18, r8
    20da:	c7 01       	movw	r24, r14
    20dc:	b6 01       	movw	r22, r12
    20de:	0e 94 83 31 	call	0x6306	; 0x6306 <atan2>
    20e2:	69 87       	std	Y+9, r22	; 0x09
    20e4:	7a 87       	std	Y+10, r23	; 0x0a
    20e6:	8b 87       	std	Y+11, r24	; 0x0b
    20e8:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    20ea:	a5 01       	movw	r20, r10
    20ec:	94 01       	movw	r18, r8
    20ee:	c5 01       	movw	r24, r10
    20f0:	b4 01       	movw	r22, r8
    20f2:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    20f6:	69 83       	std	Y+1, r22	; 0x01
    20f8:	7a 83       	std	Y+2, r23	; 0x02
    20fa:	8b 83       	std	Y+3, r24	; 0x03
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	a5 01       	movw	r20, r10
    2100:	94 01       	movw	r18, r8
    2102:	c5 01       	movw	r24, r10
    2104:	b4 01       	movw	r22, r8
    2106:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    210a:	4b 01       	movw	r8, r22
    210c:	5c 01       	movw	r10, r24
    210e:	a7 01       	movw	r20, r14
    2110:	96 01       	movw	r18, r12
    2112:	c7 01       	movw	r24, r14
    2114:	b6 01       	movw	r22, r12
    2116:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    211a:	9b 01       	movw	r18, r22
    211c:	ac 01       	movw	r20, r24
    211e:	c5 01       	movw	r24, r10
    2120:	b4 01       	movw	r22, r8
    2122:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2126:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    212a:	69 83       	std	Y+1, r22	; 0x01
    212c:	7a 83       	std	Y+2, r23	; 0x02
    212e:	8b 83       	std	Y+3, r24	; 0x03
    2130:	9c 83       	std	Y+4, r25	; 0x04
  
  beta = atan2(z, (1 - F) * rho);
    2132:	25 e4       	ldi	r18, 0x45	; 69
    2134:	34 e2       	ldi	r19, 0x24	; 36
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	c3 01       	movw	r24, r6
    2144:	b2 01       	movw	r22, r4
    2146:	0e 94 83 31 	call	0x6306	; 0x6306 <atan2>
    214a:	4b 01       	movw	r8, r22
    214c:	5c 01       	movw	r10, r24
    214e:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    2150:	c5 01       	movw	r24, r10
    2152:	b4 01       	movw	r22, r8
    2154:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e4       	ldi	r20, 0x40	; 64
    215e:	50 e4       	ldi	r21, 0x40	; 64
    2160:	0e 94 5e 34 	call	0x68bc	; 0x68bc <pow>
    2164:	6b 01       	movw	r12, r22
    2166:	7c 01       	movw	r14, r24
    2168:	c5 01       	movw	r24, r10
    216a:	b4 01       	movw	r22, r8
    216c:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e4       	ldi	r20, 0x40	; 64
    2176:	50 e4       	ldi	r21, 0x40	; 64
    2178:	0e 94 5e 34 	call	0x68bc	; 0x68bc <pow>
    217c:	4b 01       	movw	r8, r22
    217e:	5c 01       	movw	r10, r24
    2180:	2e ea       	ldi	r18, 0xAE	; 174
    2182:	39 ec       	ldi	r19, 0xC9	; 201
    2184:	46 e2       	ldi	r20, 0x26	; 38
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2190:	9b 01       	movw	r18, r22
    2192:	ac 01       	movw	r20, r24
    2194:	69 81       	ldd	r22, Y+1	; 0x01
    2196:	7a 81       	ldd	r23, Y+2	; 0x02
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    21a0:	6b 01       	movw	r12, r22
    21a2:	7c 01       	movw	r14, r24
    21a4:	21 e5       	ldi	r18, 0x51	; 81
    21a6:	39 e5       	ldi	r19, 0x59	; 89
    21a8:	47 e2       	ldi	r20, 0x27	; 39
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	c5 01       	movw	r24, r10
    21ae:	b4 01       	movw	r22, r8
    21b0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    21b4:	a3 01       	movw	r20, r6
    21b6:	92 01       	movw	r18, r4
    21b8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    21bc:	a7 01       	movw	r20, r14
    21be:	96 01       	movw	r18, r12
    21c0:	0e 94 83 31 	call	0x6306	; 0x6306 <atan2>
    21c4:	6b 01       	movw	r12, r22
    21c6:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    21c8:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    21cc:	4b 01       	movw	r8, r22
    21ce:	5c 01       	movw	r10, r24
    21d0:	c7 01       	movw	r24, r14
    21d2:	b6 01       	movw	r22, r12
    21d4:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    21d8:	25 e4       	ldi	r18, 0x45	; 69
    21da:	34 e2       	ldi	r19, 0x24	; 36
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    21e4:	a5 01       	movw	r20, r10
    21e6:	94 01       	movw	r18, r8
    21e8:	0e 94 83 31 	call	0x6306	; 0x6306 <atan2>
    21ec:	4b 01       	movw	r8, r22
    21ee:	5c 01       	movw	r10, r24
    21f0:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <ecef2lla+0x170>
    21f4:	ad cf       	rjmp	.-166    	; 0x2150 <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    21f6:	c7 01       	movw	r24, r14
    21f8:	b6 01       	movw	r22, r12
    21fa:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    21fe:	4b 01       	movw	r8, r22
    2200:	5c 01       	movw	r10, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    2202:	2a e8       	ldi	r18, 0x8A	; 138
    2204:	3c e5       	ldi	r19, 0x5C	; 92
    2206:	4b ed       	ldi	r20, 0xDB	; 219
    2208:	5b e3       	ldi	r21, 0x3B	; 59
    220a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    220e:	6d 83       	std	Y+5, r22	; 0x05
    2210:	7e 83       	std	Y+6, r23	; 0x06
    2212:	8f 83       	std	Y+7, r24	; 0x07
    2214:	98 87       	std	Y+8, r25	; 0x08
    2216:	a5 01       	movw	r20, r10
    2218:	94 01       	movw	r18, r8
    221a:	6d 81       	ldd	r22, Y+5	; 0x05
    221c:	7e 81       	ldd	r23, Y+6	; 0x06
    221e:	8f 81       	ldd	r24, Y+7	; 0x07
    2220:	98 85       	ldd	r25, Y+8	; 0x08
    2222:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2226:	9b 01       	movw	r18, r22
    2228:	ac 01       	movw	r20, r24
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	80 e8       	ldi	r24, 0x80	; 128
    2230:	9f e3       	ldi	r25, 0x3F	; 63
    2232:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    2236:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    223a:	9b 01       	movw	r18, r22
    223c:	ac 01       	movw	r20, r24
    223e:	62 e3       	ldi	r22, 0x32	; 50
    2240:	75 ea       	ldi	r23, 0xA5	; 165
    2242:	82 ec       	ldi	r24, 0xC2	; 194
    2244:	9a e4       	ldi	r25, 0x4A	; 74
    2246:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    224a:	6d 83       	std	Y+5, r22	; 0x05
    224c:	7e 83       	std	Y+6, r23	; 0x06
    224e:	8f 83       	std	Y+7, r24	; 0x07
    2250:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2252:	c7 01       	movw	r24, r14
    2254:	b6 01       	movw	r22, r12
    2256:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
  
  v_lla[0] = phi;
    225a:	f1 01       	movw	r30, r2
    225c:	c0 82       	st	Z, r12
    225e:	d1 82       	std	Z+1, r13	; 0x01
    2260:	e2 82       	std	Z+2, r14	; 0x02
    2262:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    2264:	29 85       	ldd	r18, Y+9	; 0x09
    2266:	3a 85       	ldd	r19, Y+10	; 0x0a
    2268:	4b 85       	ldd	r20, Y+11	; 0x0b
    226a:	5c 85       	ldd	r21, Y+12	; 0x0c
    226c:	24 83       	std	Z+4, r18	; 0x04
    226e:	35 83       	std	Z+5, r19	; 0x05
    2270:	46 83       	std	Z+6, r20	; 0x06
    2272:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2274:	29 81       	ldd	r18, Y+1	; 0x01
    2276:	3a 81       	ldd	r19, Y+2	; 0x02
    2278:	4b 81       	ldd	r20, Y+3	; 0x03
    227a:	5c 81       	ldd	r21, Y+4	; 0x04
    227c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2280:	69 83       	std	Y+1, r22	; 0x01
    2282:	7a 83       	std	Y+2, r23	; 0x02
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	2a e8       	ldi	r18, 0x8A	; 138
    228a:	3c e5       	ldi	r19, 0x5C	; 92
    228c:	4b ed       	ldi	r20, 0xDB	; 219
    228e:	5b e3       	ldi	r21, 0x3B	; 59
    2290:	6d 81       	ldd	r22, Y+5	; 0x05
    2292:	7e 81       	ldd	r23, Y+6	; 0x06
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    229c:	a5 01       	movw	r20, r10
    229e:	94 01       	movw	r18, r8
    22a0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    22a4:	a3 01       	movw	r20, r6
    22a6:	92 01       	movw	r18, r4
    22a8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    22ac:	a5 01       	movw	r20, r10
    22ae:	94 01       	movw	r18, r8
    22b0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	69 81       	ldd	r22, Y+1	; 0x01
    22ba:	7a 81       	ldd	r23, Y+2	; 0x02
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    22c4:	2d 81       	ldd	r18, Y+5	; 0x05
    22c6:	3e 81       	ldd	r19, Y+6	; 0x06
    22c8:	4f 81       	ldd	r20, Y+7	; 0x07
    22ca:	58 85       	ldd	r21, Y+8	; 0x08
    22cc:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    22d0:	f1 01       	movw	r30, r2
    22d2:	60 87       	std	Z+8, r22	; 0x08
    22d4:	71 87       	std	Z+9, r23	; 0x09
    22d6:	82 87       	std	Z+10, r24	; 0x0a
    22d8:	93 87       	std	Z+11, r25	; 0x0b
   Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	44 e3       	ldi	r20, 0x34	; 52
    22e0:	53 e4       	ldi	r21, 0x43	; 67
    22e2:	c7 01       	movw	r24, r14
    22e4:	b6 01       	movw	r22, r12
    22e6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    22ea:	28 ed       	ldi	r18, 0xD8	; 216
    22ec:	3f e0       	ldi	r19, 0x0F	; 15
    22ee:	49 e4       	ldi	r20, 0x49	; 73
    22f0:	50 e4       	ldi	r21, 0x40	; 64
    22f2:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	48 ec       	ldi	r20, 0xC8	; 200
    22fc:	52 e4       	ldi	r21, 0x42	; 66
    22fe:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2302:	0e 94 45 32 	call	0x648a	; 0x648a <__fixsfsi>
    2306:	0b ea       	ldi	r16, 0xAB	; 171
    2308:	14 e0       	ldi	r17, 0x04	; 4
    230a:	f8 01       	movw	r30, r16
    230c:	60 8f       	std	Z+24, r22	; 0x18
    230e:	71 8f       	std	Z+25, r23	; 0x19
    2310:	82 8f       	std	Z+26, r24	; 0x1a
    2312:	93 8f       	std	Z+27, r25	; 0x1b
   Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	44 e3       	ldi	r20, 0x34	; 52
    231a:	53 e4       	ldi	r21, 0x43	; 67
    231c:	f1 01       	movw	r30, r2
    231e:	64 81       	ldd	r22, Z+4	; 0x04
    2320:	75 81       	ldd	r23, Z+5	; 0x05
    2322:	86 81       	ldd	r24, Z+6	; 0x06
    2324:	97 81       	ldd	r25, Z+7	; 0x07
    2326:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    232a:	28 ed       	ldi	r18, 0xD8	; 216
    232c:	3f e0       	ldi	r19, 0x0F	; 15
    232e:	49 e4       	ldi	r20, 0x49	; 73
    2330:	50 e4       	ldi	r21, 0x40	; 64
    2332:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	48 ec       	ldi	r20, 0xC8	; 200
    233c:	52 e4       	ldi	r21, 0x42	; 66
    233e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2342:	0e 94 45 32 	call	0x648a	; 0x648a <__fixsfsi>
    2346:	f8 01       	movw	r30, r16
    2348:	64 8f       	std	Z+28, r22	; 0x1c
    234a:	75 8f       	std	Z+29, r23	; 0x1d
    234c:	86 8f       	std	Z+30, r24	; 0x1e
    234e:	97 8f       	std	Z+31, r25	; 0x1f
   Current_state.gps.alt=v_lla[2]; 
    2350:	f1 01       	movw	r30, r2
    2352:	60 85       	ldd	r22, Z+8	; 0x08
    2354:	71 85       	ldd	r23, Z+9	; 0x09
    2356:	82 85       	ldd	r24, Z+10	; 0x0a
    2358:	93 85       	ldd	r25, Z+11	; 0x0b
    235a:	0e 94 45 32 	call	0x648a	; 0x648a <__fixsfsi>
    235e:	f8 01       	movw	r30, r16
    2360:	60 a3       	std	Z+32, r22	; 0x20
    2362:	71 a3       	std	Z+33, r23	; 0x21
    2364:	82 a3       	std	Z+34, r24	; 0x22
    2366:	93 a3       	std	Z+35, r25	; 0x23
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    2368:	2c 96       	adiw	r28, 0x0c	; 12
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	2f 90       	pop	r2
    2398:	08 95       	ret

0000239a <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    239a:	2f 92       	push	r2
    239c:	3f 92       	push	r3
    239e:	4f 92       	push	r4
    23a0:	5f 92       	push	r5
    23a2:	6f 92       	push	r6
    23a4:	7f 92       	push	r7
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	ac 97       	sbiw	r28, 0x2c	; 44
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	1c 01       	movw	r2, r24
    23d0:	7b 01       	movw	r14, r22
    23d2:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    23d4:	db 01       	movw	r26, r22
    23d6:	4d 90       	ld	r4, X+
    23d8:	5d 90       	ld	r5, X+
    23da:	6d 90       	ld	r6, X+
    23dc:	7c 90       	ld	r7, X
    23de:	c3 01       	movw	r24, r6
    23e0:	b2 01       	movw	r22, r4
    23e2:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    23e6:	4b 01       	movw	r8, r22
    23e8:	5c 01       	movw	r10, r24
    23ea:	f7 01       	movw	r30, r14
    23ec:	c4 80       	ldd	r12, Z+4	; 0x04
    23ee:	d5 80       	ldd	r13, Z+5	; 0x05
    23f0:	e6 80       	ldd	r14, Z+6	; 0x06
    23f2:	f7 80       	ldd	r15, Z+7	; 0x07
    23f4:	c7 01       	movw	r24, r14
    23f6:	b6 01       	movw	r22, r12
    23f8:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    23fc:	6d a3       	std	Y+37, r22	; 0x25
    23fe:	7e a3       	std	Y+38, r23	; 0x26
    2400:	8f a3       	std	Y+39, r24	; 0x27
    2402:	98 a7       	std	Y+40, r25	; 0x28
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    2404:	c3 01       	movw	r24, r6
    2406:	b2 01       	movw	r22, r4
    2408:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    240c:	2b 01       	movw	r4, r22
    240e:	3c 01       	movw	r6, r24
    2410:	c7 01       	movw	r24, r14
    2412:	b6 01       	movw	r22, r12
    2414:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    2418:	6b 01       	movw	r12, r22
    241a:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    241c:	77 fa       	bst	r7, 7
    241e:	70 94       	com	r7
    2420:	77 f8       	bld	r7, 7
    2422:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    2424:	d5 01       	movw	r26, r10
    2426:	c4 01       	movw	r24, r8
    2428:	b0 58       	subi	r27, 0x80	; 128
    242a:	89 a7       	std	Y+41, r24	; 0x29
    242c:	9a a7       	std	Y+42, r25	; 0x2a
    242e:	ab a7       	std	Y+43, r26	; 0x2b
    2430:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2432:	2d a1       	ldd	r18, Y+37	; 0x25
    2434:	3e a1       	ldd	r19, Y+38	; 0x26
    2436:	4f a1       	ldd	r20, Y+39	; 0x27
    2438:	58 a5       	ldd	r21, Y+40	; 0x28
    243a:	c3 01       	movw	r24, r6
    243c:	b2 01       	movw	r22, r4
    243e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2442:	69 83       	std	Y+1, r22	; 0x01
    2444:	7a 83       	std	Y+2, r23	; 0x02
    2446:	8b 83       	std	Y+3, r24	; 0x03
    2448:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    244a:	a3 01       	movw	r20, r6
    244c:	92 01       	movw	r18, r4
    244e:	c7 01       	movw	r24, r14
    2450:	b6 01       	movw	r22, r12
    2452:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2456:	6d 83       	std	Y+5, r22	; 0x05
    2458:	7e 83       	std	Y+6, r23	; 0x06
    245a:	8f 83       	std	Y+7, r24	; 0x07
    245c:	98 87       	std	Y+8, r25	; 0x08
    245e:	89 86       	std	Y+9, r8	; 0x09
    2460:	9a 86       	std	Y+10, r9	; 0x0a
    2462:	ab 86       	std	Y+11, r10	; 0x0b
    2464:	bc 86       	std	Y+12, r11	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    2466:	d7 01       	movw	r26, r14
    2468:	c6 01       	movw	r24, r12
    246a:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    246c:	8d 87       	std	Y+13, r24	; 0x0d
    246e:	9e 87       	std	Y+14, r25	; 0x0e
    2470:	af 87       	std	Y+15, r26	; 0x0f
    2472:	b8 8b       	std	Y+16, r27	; 0x10
    2474:	8d a1       	ldd	r24, Y+37	; 0x25
    2476:	9e a1       	ldd	r25, Y+38	; 0x26
    2478:	af a1       	ldd	r26, Y+39	; 0x27
    247a:	b8 a5       	ldd	r27, Y+40	; 0x28
    247c:	89 8b       	std	Y+17, r24	; 0x11
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	ab 8b       	std	Y+19, r26	; 0x13
    2482:	bc 8b       	std	Y+20, r27	; 0x14
    2484:	1d 8a       	std	Y+21, r1	; 0x15
    2486:	1e 8a       	std	Y+22, r1	; 0x16
    2488:	1f 8a       	std	Y+23, r1	; 0x17
    248a:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    248c:	9c 01       	movw	r18, r24
    248e:	ad 01       	movw	r20, r26
    2490:	69 a5       	ldd	r22, Y+41	; 0x29
    2492:	7a a5       	ldd	r23, Y+42	; 0x2a
    2494:	8b a5       	ldd	r24, Y+43	; 0x2b
    2496:	9c a5       	ldd	r25, Y+44	; 0x2c
    2498:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    249c:	69 8f       	std	Y+25, r22	; 0x19
    249e:	7a 8f       	std	Y+26, r23	; 0x1a
    24a0:	8b 8f       	std	Y+27, r24	; 0x1b
    24a2:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    24a4:	29 a5       	ldd	r18, Y+41	; 0x29
    24a6:	3a a5       	ldd	r19, Y+42	; 0x2a
    24a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    24aa:	5c a5       	ldd	r21, Y+44	; 0x2c
    24ac:	c7 01       	movw	r24, r14
    24ae:	b6 01       	movw	r22, r12
    24b0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    24b4:	6d 8f       	std	Y+29, r22	; 0x1d
    24b6:	7e 8f       	std	Y+30, r23	; 0x1e
    24b8:	8f 8f       	std	Y+31, r24	; 0x1f
    24ba:	98 a3       	std	Y+32, r25	; 0x20
    24bc:	49 a2       	std	Y+33, r4	; 0x21
    24be:	5a a2       	std	Y+34, r5	; 0x22
    24c0:	6b a2       	std	Y+35, r6	; 0x23
    24c2:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    24c4:	a8 01       	movw	r20, r16
    24c6:	be 01       	movw	r22, r28
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	c1 01       	movw	r24, r2
    24ce:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vector_into_matrix>
}
    24d2:	ac 96       	adiw	r28, 0x2c	; 44
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
    24ee:	bf 90       	pop	r11
    24f0:	af 90       	pop	r10
    24f2:	9f 90       	pop	r9
    24f4:	8f 90       	pop	r8
    24f6:	7f 90       	pop	r7
    24f8:	6f 90       	pop	r6
    24fa:	5f 90       	pop	r5
    24fc:	4f 90       	pop	r4
    24fe:	3f 90       	pop	r3
    2500:	2f 90       	pop	r2
    2502:	08 95       	ret

00002504 <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	0b b6       	in	r0, 0x3b	; 59
    2510:	0f 92       	push	r0
    2512:	2f 93       	push	r18
    2514:	8f 93       	push	r24
    2516:	9f 93       	push	r25
    2518:	af 93       	push	r26
    251a:	bf 93       	push	r27
    251c:	ef 93       	push	r30
    251e:	ff 93       	push	r31
  PORTA ^= 0xf0;
    2520:	9b b3       	in	r25, 0x1b	; 27
    2522:	80 ef       	ldi	r24, 0xF0	; 240
    2524:	89 27       	eor	r24, r25
    2526:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    2528:	8c b1       	in	r24, 0x0c	; 12
    252a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <last_byte>
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    252e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2532:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2536:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    253a:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    253e:	ba 2f       	mov	r27, r26
    2540:	a9 2f       	mov	r26, r25
    2542:	98 2f       	mov	r25, r24
    2544:	88 27       	eor	r24, r24
    2546:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    254a:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    254e:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    2552:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer &= 0xFFFFFF00;
    2556:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    255a:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    255e:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2562:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2566:	88 27       	eor	r24, r24
    2568:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    256c:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    2570:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    2574:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  buffer |= (uint32_t) last_byte;
    2578:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    257c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2580:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2584:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2588:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    258c:	82 2b       	or	r24, r18
    258e:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <buffer>
    2592:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <buffer+0x1>
    2596:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <buffer+0x2>
    259a:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
    259e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    25a2:	8c 30       	cpi	r24, 0x0C	; 12
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <__vector_18+0xa4>
    25a6:	86 c0       	rjmp	.+268    	; 0x26b4 <__vector_18+0x1b0>
  {
    
    if(pos<4)
    25a8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    25ac:	84 30       	cpi	r24, 0x04	; 4
    25ae:	28 f5       	brcc	.+74     	; 0x25fa <__vector_18+0xf6>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    25b0:	eb ea       	ldi	r30, 0xAB	; 171
    25b2:	f4 e0       	ldi	r31, 0x04	; 4
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	a2 81       	ldd	r26, Z+2	; 0x02
    25ba:	b3 81       	ldd	r27, Z+3	; 0x03
    25bc:	89 2f       	mov	r24, r25
    25be:	9a 2f       	mov	r25, r26
    25c0:	ab 2f       	mov	r26, r27
    25c2:	bb 27       	eor	r27, r27
    25c4:	a7 fd       	sbrc	r26, 7
    25c6:	ba 95       	dec	r27
    25c8:	80 83       	st	Z, r24
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	a2 83       	std	Z+2, r26	; 0x02
    25ce:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	a2 81       	ldd	r26, Z+2	; 0x02
    25d6:	b3 81       	ldd	r27, Z+3	; 0x03
    25d8:	bb 27       	eor	r27, r27
    25da:	80 83       	st	Z, r24
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	a2 83       	std	Z+2, r26	; 0x02
    25e0:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    25e2:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	a2 81       	ldd	r26, Z+2	; 0x02
    25ec:	b3 81       	ldd	r27, Z+3	; 0x03
    25ee:	b2 2b       	or	r27, r18
    25f0:	80 83       	st	Z, r24
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	a2 83       	std	Z+2, r26	; 0x02
    25f6:	b3 83       	std	Z+3, r27	; 0x03
    25f8:	51 c0       	rjmp	.+162    	; 0x269c <__vector_18+0x198>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    25fa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    25fe:	88 30       	cpi	r24, 0x08	; 8
    2600:	28 f5       	brcc	.+74     	; 0x264c <__vector_18+0x148>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    2602:	eb ea       	ldi	r30, 0xAB	; 171
    2604:	f4 e0       	ldi	r31, 0x04	; 4
    2606:	84 81       	ldd	r24, Z+4	; 0x04
    2608:	95 81       	ldd	r25, Z+5	; 0x05
    260a:	a6 81       	ldd	r26, Z+6	; 0x06
    260c:	b7 81       	ldd	r27, Z+7	; 0x07
    260e:	89 2f       	mov	r24, r25
    2610:	9a 2f       	mov	r25, r26
    2612:	ab 2f       	mov	r26, r27
    2614:	bb 27       	eor	r27, r27
    2616:	a7 fd       	sbrc	r26, 7
    2618:	ba 95       	dec	r27
    261a:	84 83       	std	Z+4, r24	; 0x04
    261c:	95 83       	std	Z+5, r25	; 0x05
    261e:	a6 83       	std	Z+6, r26	; 0x06
    2620:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y &= 0x00FFFFFF;
    2622:	84 81       	ldd	r24, Z+4	; 0x04
    2624:	95 81       	ldd	r25, Z+5	; 0x05
    2626:	a6 81       	ldd	r26, Z+6	; 0x06
    2628:	b7 81       	ldd	r27, Z+7	; 0x07
    262a:	bb 27       	eor	r27, r27
    262c:	84 83       	std	Z+4, r24	; 0x04
    262e:	95 83       	std	Z+5, r25	; 0x05
    2630:	a6 83       	std	Z+6, r26	; 0x06
    2632:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    2634:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2638:	84 81       	ldd	r24, Z+4	; 0x04
    263a:	95 81       	ldd	r25, Z+5	; 0x05
    263c:	a6 81       	ldd	r26, Z+6	; 0x06
    263e:	b7 81       	ldd	r27, Z+7	; 0x07
    2640:	b2 2b       	or	r27, r18
    2642:	84 83       	std	Z+4, r24	; 0x04
    2644:	95 83       	std	Z+5, r25	; 0x05
    2646:	a6 83       	std	Z+6, r26	; 0x06
    2648:	b7 83       	std	Z+7, r27	; 0x07
    264a:	28 c0       	rjmp	.+80     	; 0x269c <__vector_18+0x198>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    264c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    2650:	8c 30       	cpi	r24, 0x0C	; 12
    2652:	20 f5       	brcc	.+72     	; 0x269c <__vector_18+0x198>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    2654:	eb ea       	ldi	r30, 0xAB	; 171
    2656:	f4 e0       	ldi	r31, 0x04	; 4
    2658:	80 85       	ldd	r24, Z+8	; 0x08
    265a:	91 85       	ldd	r25, Z+9	; 0x09
    265c:	a2 85       	ldd	r26, Z+10	; 0x0a
    265e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2660:	89 2f       	mov	r24, r25
    2662:	9a 2f       	mov	r25, r26
    2664:	ab 2f       	mov	r26, r27
    2666:	bb 27       	eor	r27, r27
    2668:	a7 fd       	sbrc	r26, 7
    266a:	ba 95       	dec	r27
    266c:	80 87       	std	Z+8, r24	; 0x08
    266e:	91 87       	std	Z+9, r25	; 0x09
    2670:	a2 87       	std	Z+10, r26	; 0x0a
    2672:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z &= 0x00FFFFFF;
    2674:	80 85       	ldd	r24, Z+8	; 0x08
    2676:	91 85       	ldd	r25, Z+9	; 0x09
    2678:	a2 85       	ldd	r26, Z+10	; 0x0a
    267a:	b3 85       	ldd	r27, Z+11	; 0x0b
    267c:	bb 27       	eor	r27, r27
    267e:	80 87       	std	Z+8, r24	; 0x08
    2680:	91 87       	std	Z+9, r25	; 0x09
    2682:	a2 87       	std	Z+10, r26	; 0x0a
    2684:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    2686:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    268a:	80 85       	ldd	r24, Z+8	; 0x08
    268c:	91 85       	ldd	r25, Z+9	; 0x09
    268e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2690:	b3 85       	ldd	r27, Z+11	; 0x0b
    2692:	b2 2b       	or	r27, r18
    2694:	80 87       	std	Z+8, r24	; 0x08
    2696:	91 87       	std	Z+9, r25	; 0x09
    2698:	a2 87       	std	Z+10, r26	; 0x0a
    269a:	b3 87       	std	Z+11, r27	; 0x0b
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    269c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
    if(pos == 12)
    26a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos>
    26aa:	8c 30       	cpi	r24, 0x0C	; 12
    26ac:	19 f4       	brne	.+6      	; 0x26b4 <__vector_18+0x1b0>
	{
      pos = 0xFF;
    26ae:	8f ef       	ldi	r24, 0xFF	; 255
    26b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    26b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    26b8:	8c 30       	cpi	r24, 0x0C	; 12
    26ba:	08 f0       	brcs	.+2      	; 0x26be <__vector_18+0x1ba>
    26bc:	86 c0       	rjmp	.+268    	; 0x27ca <__vector_18+0x2c6>
  {
	  
    if(vel < 4)
    26be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	28 f5       	brcc	.+74     	; 0x2710 <__vector_18+0x20c>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    26c6:	eb ea       	ldi	r30, 0xAB	; 171
    26c8:	f4 e0       	ldi	r31, 0x04	; 4
    26ca:	84 85       	ldd	r24, Z+12	; 0x0c
    26cc:	95 85       	ldd	r25, Z+13	; 0x0d
    26ce:	a6 85       	ldd	r26, Z+14	; 0x0e
    26d0:	b7 85       	ldd	r27, Z+15	; 0x0f
    26d2:	89 2f       	mov	r24, r25
    26d4:	9a 2f       	mov	r25, r26
    26d6:	ab 2f       	mov	r26, r27
    26d8:	bb 27       	eor	r27, r27
    26da:	a7 fd       	sbrc	r26, 7
    26dc:	ba 95       	dec	r27
    26de:	84 87       	std	Z+12, r24	; 0x0c
    26e0:	95 87       	std	Z+13, r25	; 0x0d
    26e2:	a6 87       	std	Z+14, r26	; 0x0e
    26e4:	b7 87       	std	Z+15, r27	; 0x0f
		Current_state.gps.v_x &= 0x00FFFFFF;
    26e6:	84 85       	ldd	r24, Z+12	; 0x0c
    26e8:	95 85       	ldd	r25, Z+13	; 0x0d
    26ea:	a6 85       	ldd	r26, Z+14	; 0x0e
    26ec:	b7 85       	ldd	r27, Z+15	; 0x0f
    26ee:	bb 27       	eor	r27, r27
    26f0:	84 87       	std	Z+12, r24	; 0x0c
    26f2:	95 87       	std	Z+13, r25	; 0x0d
    26f4:	a6 87       	std	Z+14, r26	; 0x0e
    26f6:	b7 87       	std	Z+15, r27	; 0x0f
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    26f8:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    26fc:	84 85       	ldd	r24, Z+12	; 0x0c
    26fe:	95 85       	ldd	r25, Z+13	; 0x0d
    2700:	a6 85       	ldd	r26, Z+14	; 0x0e
    2702:	b7 85       	ldd	r27, Z+15	; 0x0f
    2704:	b2 2b       	or	r27, r18
    2706:	84 87       	std	Z+12, r24	; 0x0c
    2708:	95 87       	std	Z+13, r25	; 0x0d
    270a:	a6 87       	std	Z+14, r26	; 0x0e
    270c:	b7 87       	std	Z+15, r27	; 0x0f
    270e:	51 c0       	rjmp	.+162    	; 0x27b2 <__vector_18+0x2ae>
		
	}
	else if(vel < 8)
    2710:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2714:	88 30       	cpi	r24, 0x08	; 8
    2716:	28 f5       	brcc	.+74     	; 0x2762 <__vector_18+0x25e>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    2718:	eb ea       	ldi	r30, 0xAB	; 171
    271a:	f4 e0       	ldi	r31, 0x04	; 4
    271c:	80 89       	ldd	r24, Z+16	; 0x10
    271e:	91 89       	ldd	r25, Z+17	; 0x11
    2720:	a2 89       	ldd	r26, Z+18	; 0x12
    2722:	b3 89       	ldd	r27, Z+19	; 0x13
    2724:	89 2f       	mov	r24, r25
    2726:	9a 2f       	mov	r25, r26
    2728:	ab 2f       	mov	r26, r27
    272a:	bb 27       	eor	r27, r27
    272c:	a7 fd       	sbrc	r26, 7
    272e:	ba 95       	dec	r27
    2730:	80 8b       	std	Z+16, r24	; 0x10
    2732:	91 8b       	std	Z+17, r25	; 0x11
    2734:	a2 8b       	std	Z+18, r26	; 0x12
    2736:	b3 8b       	std	Z+19, r27	; 0x13
		Current_state.gps.v_y &= 0x00FFFFFF;
    2738:	80 89       	ldd	r24, Z+16	; 0x10
    273a:	91 89       	ldd	r25, Z+17	; 0x11
    273c:	a2 89       	ldd	r26, Z+18	; 0x12
    273e:	b3 89       	ldd	r27, Z+19	; 0x13
    2740:	bb 27       	eor	r27, r27
    2742:	80 8b       	std	Z+16, r24	; 0x10
    2744:	91 8b       	std	Z+17, r25	; 0x11
    2746:	a2 8b       	std	Z+18, r26	; 0x12
    2748:	b3 8b       	std	Z+19, r27	; 0x13
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    274a:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    274e:	80 89       	ldd	r24, Z+16	; 0x10
    2750:	91 89       	ldd	r25, Z+17	; 0x11
    2752:	a2 89       	ldd	r26, Z+18	; 0x12
    2754:	b3 89       	ldd	r27, Z+19	; 0x13
    2756:	b2 2b       	or	r27, r18
    2758:	80 8b       	std	Z+16, r24	; 0x10
    275a:	91 8b       	std	Z+17, r25	; 0x11
    275c:	a2 8b       	std	Z+18, r26	; 0x12
    275e:	b3 8b       	std	Z+19, r27	; 0x13
    2760:	28 c0       	rjmp	.+80     	; 0x27b2 <__vector_18+0x2ae>
	}
	else if(vel < 12)
    2762:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    2766:	8c 30       	cpi	r24, 0x0C	; 12
    2768:	20 f5       	brcc	.+72     	; 0x27b2 <__vector_18+0x2ae>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    276a:	eb ea       	ldi	r30, 0xAB	; 171
    276c:	f4 e0       	ldi	r31, 0x04	; 4
    276e:	84 89       	ldd	r24, Z+20	; 0x14
    2770:	95 89       	ldd	r25, Z+21	; 0x15
    2772:	a6 89       	ldd	r26, Z+22	; 0x16
    2774:	b7 89       	ldd	r27, Z+23	; 0x17
    2776:	89 2f       	mov	r24, r25
    2778:	9a 2f       	mov	r25, r26
    277a:	ab 2f       	mov	r26, r27
    277c:	bb 27       	eor	r27, r27
    277e:	a7 fd       	sbrc	r26, 7
    2780:	ba 95       	dec	r27
    2782:	84 8b       	std	Z+20, r24	; 0x14
    2784:	95 8b       	std	Z+21, r25	; 0x15
    2786:	a6 8b       	std	Z+22, r26	; 0x16
    2788:	b7 8b       	std	Z+23, r27	; 0x17
		Current_state.gps.v_z &= 0x00FFFFFF;
    278a:	84 89       	ldd	r24, Z+20	; 0x14
    278c:	95 89       	ldd	r25, Z+21	; 0x15
    278e:	a6 89       	ldd	r26, Z+22	; 0x16
    2790:	b7 89       	ldd	r27, Z+23	; 0x17
    2792:	bb 27       	eor	r27, r27
    2794:	84 8b       	std	Z+20, r24	; 0x14
    2796:	95 8b       	std	Z+21, r25	; 0x15
    2798:	a6 8b       	std	Z+22, r26	; 0x16
    279a:	b7 8b       	std	Z+23, r27	; 0x17
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    279c:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    27a0:	84 89       	ldd	r24, Z+20	; 0x14
    27a2:	95 89       	ldd	r25, Z+21	; 0x15
    27a4:	a6 89       	ldd	r26, Z+22	; 0x16
    27a6:	b7 89       	ldd	r27, Z+23	; 0x17
    27a8:	b2 2b       	or	r27, r18
    27aa:	84 8b       	std	Z+20, r24	; 0x14
    27ac:	95 8b       	std	Z+21, r25	; 0x15
    27ae:	a6 8b       	std	Z+22, r26	; 0x16
    27b0:	b7 8b       	std	Z+23, r27	; 0x17
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    27b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>
    if(vel == 12)
    27bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel>
    27c0:	8c 30       	cpi	r24, 0x0C	; 12
    27c2:	19 f4       	brne	.+6      	; 0x27ca <__vector_18+0x2c6>
     {
		  vel = 0xFF;
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    27ca:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    27ce:	84 30       	cpi	r24, 0x04	; 4
    27d0:	20 f5       	brcc	.+72     	; 0x281a <__vector_18+0x316>
  {
    if(dop >= 2)
    27d2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	a0 f0       	brcs	.+40     	; 0x2802 <__vector_18+0x2fe>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    27da:	eb ea       	ldi	r30, 0xAB	; 171
    27dc:	f4 e0       	ldi	r31, 0x04	; 4
    27de:	83 a5       	ldd	r24, Z+43	; 0x2b
    27e0:	94 a5       	ldd	r25, Z+44	; 0x2c
    27e2:	89 2f       	mov	r24, r25
    27e4:	99 27       	eor	r25, r25
    27e6:	94 a7       	std	Z+44, r25	; 0x2c
    27e8:	83 a7       	std	Z+43, r24	; 0x2b
		 Current_state.gps.pdop &= 0x00FF;
    27ea:	83 a5       	ldd	r24, Z+43	; 0x2b
    27ec:	94 a5       	ldd	r25, Z+44	; 0x2c
    27ee:	99 27       	eor	r25, r25
    27f0:	94 a7       	std	Z+44, r25	; 0x2c
    27f2:	83 a7       	std	Z+43, r24	; 0x2b
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    27f4:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    27f8:	83 a5       	ldd	r24, Z+43	; 0x2b
    27fa:	94 a5       	ldd	r25, Z+44	; 0x2c
    27fc:	92 2b       	or	r25, r18
    27fe:	94 a7       	std	Z+44, r25	; 0x2c
    2800:	83 a7       	std	Z+43, r24	; 0x2b
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    2802:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2806:	8f 5f       	subi	r24, 0xFF	; 255
    2808:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
    if(dop == 4)
    280c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dop>
    2810:	84 30       	cpi	r24, 0x04	; 4
    2812:	19 f4       	brne	.+6      	; 0x281a <__vector_18+0x316>
      dop = 0xFF;
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    281a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    281e:	80 31       	cpi	r24, 0x10	; 16
    2820:	08 f0       	brcs	.+2      	; 0x2824 <__vector_18+0x320>
    2822:	8b c0       	rjmp	.+278    	; 0x293a <__vector_18+0x436>
  {
	if(geo < 4);  
    2824:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	08 f4       	brcc	.+2      	; 0x282e <__vector_18+0x32a>
    282c:	7a c0       	rjmp	.+244    	; 0x2922 <__vector_18+0x41e>
    else if(geo < 8)
    282e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2832:	88 30       	cpi	r24, 0x08	; 8
    2834:	28 f5       	brcc	.+74     	; 0x2880 <__vector_18+0x37c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    2836:	eb ea       	ldi	r30, 0xAB	; 171
    2838:	f4 e0       	ldi	r31, 0x04	; 4
    283a:	80 8d       	ldd	r24, Z+24	; 0x18
    283c:	91 8d       	ldd	r25, Z+25	; 0x19
    283e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2840:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2842:	89 2f       	mov	r24, r25
    2844:	9a 2f       	mov	r25, r26
    2846:	ab 2f       	mov	r26, r27
    2848:	bb 27       	eor	r27, r27
    284a:	a7 fd       	sbrc	r26, 7
    284c:	ba 95       	dec	r27
    284e:	80 8f       	std	Z+24, r24	; 0x18
    2850:	91 8f       	std	Z+25, r25	; 0x19
    2852:	a2 8f       	std	Z+26, r26	; 0x1a
    2854:	b3 8f       	std	Z+27, r27	; 0x1b
		Current_state.gps.lat &= 0x00FFFFFF;
    2856:	80 8d       	ldd	r24, Z+24	; 0x18
    2858:	91 8d       	ldd	r25, Z+25	; 0x19
    285a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    285c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    285e:	bb 27       	eor	r27, r27
    2860:	80 8f       	std	Z+24, r24	; 0x18
    2862:	91 8f       	std	Z+25, r25	; 0x19
    2864:	a2 8f       	std	Z+26, r26	; 0x1a
    2866:	b3 8f       	std	Z+27, r27	; 0x1b
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    2868:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    286c:	80 8d       	ldd	r24, Z+24	; 0x18
    286e:	91 8d       	ldd	r25, Z+25	; 0x19
    2870:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2872:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2874:	b2 2b       	or	r27, r18
    2876:	80 8f       	std	Z+24, r24	; 0x18
    2878:	91 8f       	std	Z+25, r25	; 0x19
    287a:	a2 8f       	std	Z+26, r26	; 0x1a
    287c:	b3 8f       	std	Z+27, r27	; 0x1b
    287e:	51 c0       	rjmp	.+162    	; 0x2922 <__vector_18+0x41e>
	}
	else if(geo < 12)
    2880:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2884:	8c 30       	cpi	r24, 0x0C	; 12
    2886:	28 f5       	brcc	.+74     	; 0x28d2 <__vector_18+0x3ce>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    2888:	eb ea       	ldi	r30, 0xAB	; 171
    288a:	f4 e0       	ldi	r31, 0x04	; 4
    288c:	84 8d       	ldd	r24, Z+28	; 0x1c
    288e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2890:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2892:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2894:	89 2f       	mov	r24, r25
    2896:	9a 2f       	mov	r25, r26
    2898:	ab 2f       	mov	r26, r27
    289a:	bb 27       	eor	r27, r27
    289c:	a7 fd       	sbrc	r26, 7
    289e:	ba 95       	dec	r27
    28a0:	84 8f       	std	Z+28, r24	; 0x1c
    28a2:	95 8f       	std	Z+29, r25	; 0x1d
    28a4:	a6 8f       	std	Z+30, r26	; 0x1e
    28a6:	b7 8f       	std	Z+31, r27	; 0x1f
		Current_state.gps.lon &= 0x00FFFFFF;
    28a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    28aa:	95 8d       	ldd	r25, Z+29	; 0x1d
    28ac:	a6 8d       	ldd	r26, Z+30	; 0x1e
    28ae:	b7 8d       	ldd	r27, Z+31	; 0x1f
    28b0:	bb 27       	eor	r27, r27
    28b2:	84 8f       	std	Z+28, r24	; 0x1c
    28b4:	95 8f       	std	Z+29, r25	; 0x1d
    28b6:	a6 8f       	std	Z+30, r26	; 0x1e
    28b8:	b7 8f       	std	Z+31, r27	; 0x1f
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    28ba:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    28be:	84 8d       	ldd	r24, Z+28	; 0x1c
    28c0:	95 8d       	ldd	r25, Z+29	; 0x1d
    28c2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    28c4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    28c6:	b2 2b       	or	r27, r18
    28c8:	84 8f       	std	Z+28, r24	; 0x1c
    28ca:	95 8f       	std	Z+29, r25	; 0x1d
    28cc:	a6 8f       	std	Z+30, r26	; 0x1e
    28ce:	b7 8f       	std	Z+31, r27	; 0x1f
    28d0:	28 c0       	rjmp	.+80     	; 0x2922 <__vector_18+0x41e>
	}
	else if(geo < 16 )
    28d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    28d6:	80 31       	cpi	r24, 0x10	; 16
    28d8:	20 f5       	brcc	.+72     	; 0x2922 <__vector_18+0x41e>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    28da:	eb ea       	ldi	r30, 0xAB	; 171
    28dc:	f4 e0       	ldi	r31, 0x04	; 4
    28de:	80 a1       	ldd	r24, Z+32	; 0x20
    28e0:	91 a1       	ldd	r25, Z+33	; 0x21
    28e2:	a2 a1       	ldd	r26, Z+34	; 0x22
    28e4:	b3 a1       	ldd	r27, Z+35	; 0x23
    28e6:	89 2f       	mov	r24, r25
    28e8:	9a 2f       	mov	r25, r26
    28ea:	ab 2f       	mov	r26, r27
    28ec:	bb 27       	eor	r27, r27
    28ee:	a7 fd       	sbrc	r26, 7
    28f0:	ba 95       	dec	r27
    28f2:	80 a3       	std	Z+32, r24	; 0x20
    28f4:	91 a3       	std	Z+33, r25	; 0x21
    28f6:	a2 a3       	std	Z+34, r26	; 0x22
    28f8:	b3 a3       	std	Z+35, r27	; 0x23
		Current_state.gps.alt &= 0x00FFFFFF;
    28fa:	80 a1       	ldd	r24, Z+32	; 0x20
    28fc:	91 a1       	ldd	r25, Z+33	; 0x21
    28fe:	a2 a1       	ldd	r26, Z+34	; 0x22
    2900:	b3 a1       	ldd	r27, Z+35	; 0x23
    2902:	bb 27       	eor	r27, r27
    2904:	80 a3       	std	Z+32, r24	; 0x20
    2906:	91 a3       	std	Z+33, r25	; 0x21
    2908:	a2 a3       	std	Z+34, r26	; 0x22
    290a:	b3 a3       	std	Z+35, r27	; 0x23
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    290c:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    2910:	80 a1       	ldd	r24, Z+32	; 0x20
    2912:	91 a1       	ldd	r25, Z+33	; 0x21
    2914:	a2 a1       	ldd	r26, Z+34	; 0x22
    2916:	b3 a1       	ldd	r27, Z+35	; 0x23
    2918:	b2 2b       	or	r27, r18
    291a:	80 a3       	std	Z+32, r24	; 0x20
    291c:	91 a3       	std	Z+33, r25	; 0x21
    291e:	a2 a3       	std	Z+34, r26	; 0x22
    2920:	b3 a3       	std	Z+35, r27	; 0x23
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    2922:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2926:	8f 5f       	subi	r24, 0xFF	; 255
    2928:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>
    if(geo == 16)
    292c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <geo>
    2930:	80 31       	cpi	r24, 0x10	; 16
    2932:	19 f4       	brne	.+6      	; 0x293a <__vector_18+0x436>
	{
      geo = 0xFF;
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <geo>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    293a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    293e:	87 30       	cpi	r24, 0x07	; 7
    2940:	08 f0       	brcs	.+2      	; 0x2944 <__vector_18+0x440>
    2942:	54 c0       	rjmp	.+168    	; 0x29ec <__vector_18+0x4e8>
  {
	  
	  if(time == 0)
    2944:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2948:	81 11       	cpse	r24, r1
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <__vector_18+0x452>
	  {
		  Current_state.gps.hours = last_byte;
    294c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2950:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Current_state+0x24>
    2954:	3c c0       	rjmp	.+120    	; 0x29ce <__vector_18+0x4ca>
	  }
	  else if(time == 1)
    2956:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	29 f4       	brne	.+10     	; 0x2968 <__vector_18+0x464>
	  {
		  Current_state.gps.minutes = last_byte;
    295e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2962:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <Current_state+0x25>
    2966:	33 c0       	rjmp	.+102    	; 0x29ce <__vector_18+0x4ca>
	  }
	  else if(time == 2)
    2968:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	29 f4       	brne	.+10     	; 0x297a <__vector_18+0x476>
	  {
		  Current_state.gps.seconds = last_byte;
    2970:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2974:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <Current_state+0x26>
    2978:	2a c0       	rjmp	.+84     	; 0x29ce <__vector_18+0x4ca>
	  }
	  else if(time == 3)
    297a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    297e:	83 30       	cpi	r24, 0x03	; 3
    2980:	29 f4       	brne	.+10     	; 0x298c <__vector_18+0x488>
	  {
		  Current_state.gps.date = last_byte;
    2982:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2986:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <Current_state+0x27>
    298a:	21 c0       	rjmp	.+66     	; 0x29ce <__vector_18+0x4ca>
	  }else if(time == 4)
    298c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    2990:	84 30       	cpi	r24, 0x04	; 4
    2992:	29 f4       	brne	.+10     	; 0x299e <__vector_18+0x49a>
	  {
		  Current_state.gps.month = last_byte;
    2994:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <last_byte>
    2998:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <Current_state+0x28>
    299c:	18 c0       	rjmp	.+48     	; 0x29ce <__vector_18+0x4ca>
	  }else if(time > 4)
    299e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29a2:	85 30       	cpi	r24, 0x05	; 5
    29a4:	a0 f0       	brcs	.+40     	; 0x29ce <__vector_18+0x4ca>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    29a6:	eb ea       	ldi	r30, 0xAB	; 171
    29a8:	f4 e0       	ldi	r31, 0x04	; 4
    29aa:	81 a5       	ldd	r24, Z+41	; 0x29
    29ac:	92 a5       	ldd	r25, Z+42	; 0x2a
    29ae:	89 2f       	mov	r24, r25
    29b0:	99 27       	eor	r25, r25
    29b2:	92 a7       	std	Z+42, r25	; 0x2a
    29b4:	81 a7       	std	Z+41, r24	; 0x29
		  Current_state.gps.year &= 0x00FF;
    29b6:	81 a5       	ldd	r24, Z+41	; 0x29
    29b8:	92 a5       	ldd	r25, Z+42	; 0x2a
    29ba:	99 27       	eor	r25, r25
    29bc:	92 a7       	std	Z+42, r25	; 0x2a
    29be:	81 a7       	std	Z+41, r24	; 0x29
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    29c0:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <last_byte>
    29c4:	81 a5       	ldd	r24, Z+41	; 0x29
    29c6:	92 a5       	ldd	r25, Z+42	; 0x2a
    29c8:	92 2b       	or	r25, r18
    29ca:	92 a7       	std	Z+42, r25	; 0x2a
    29cc:	81 a7       	std	Z+41, r24	; 0x29

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    29ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
    if(time == 7)
    29d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time>
    29dc:	87 30       	cpi	r24, 0x07	; 7
    29de:	31 f4       	brne	.+12     	; 0x29ec <__vector_18+0x4e8>
    {
      time = 0xFF;
    29e0:	8f ef       	ldi	r24, 0xFF	; 255
    29e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time>
      ///* * The Entire message has been read
      message_end = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <message_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    29ec:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    29f0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    29f4:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    29f8:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    29fc:	8c 3a       	cpi	r24, 0xAC	; 172
    29fe:	94 40       	sbci	r25, 0x04	; 4
    2a00:	af 43       	sbci	r26, 0x3F	; 63
    2a02:	bf 43       	sbci	r27, 0x3F	; 63
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <__vector_18+0x50c>
  {
    message_end = 0;
    2a06:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    pos = 0;
    2a0a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pos>
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <__vector_18+0x58a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    2a10:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a14:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a18:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a1c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a20:	8c 3a       	cpi	r24, 0xAC	; 172
    2a22:	95 40       	sbci	r25, 0x05	; 5
    2a24:	af 43       	sbci	r26, 0x3F	; 63
    2a26:	bf 43       	sbci	r27, 0x3F	; 63
    2a28:	19 f4       	brne	.+6      	; 0x2a30 <__vector_18+0x52c>
    vel = 0;
    2a2a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vel>
    2a2e:	2f c0       	rjmp	.+94     	; 0x2a8e <__vector_18+0x58a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2a30:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a34:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a38:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a3c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a40:	8c 3a       	cpi	r24, 0xAC	; 172
    2a42:	9b 40       	sbci	r25, 0x0B	; 11
    2a44:	af 43       	sbci	r26, 0x3F	; 63
    2a46:	bf 43       	sbci	r27, 0x3F	; 63
    2a48:	19 f4       	brne	.+6      	; 0x2a50 <__vector_18+0x54c>
    dop = 0;
    2a4a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dop>
    2a4e:	1f c0       	rjmp	.+62     	; 0x2a8e <__vector_18+0x58a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    2a50:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a54:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a58:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a5c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a60:	8c 3a       	cpi	r24, 0xAC	; 172
    2a62:	9e 40       	sbci	r25, 0x0E	; 14
    2a64:	af 43       	sbci	r26, 0x3F	; 63
    2a66:	bf 43       	sbci	r27, 0x3F	; 63
    2a68:	19 f4       	brne	.+6      	; 0x2a70 <__vector_18+0x56c>
    geo = 0;
    2a6a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <geo>
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <__vector_18+0x58a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2a70:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <buffer>
    2a74:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <buffer+0x1>
    2a78:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <buffer+0x2>
    2a7c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <buffer+0x3>
    2a80:	8c 3a       	cpi	r24, 0xAC	; 172
    2a82:	9f 40       	sbci	r25, 0x0F	; 15
    2a84:	af 43       	sbci	r26, 0x3F	; 63
    2a86:	bf 43       	sbci	r27, 0x3F	; 63
    2a88:	11 f4       	brne	.+4      	; 0x2a8e <__vector_18+0x58a>
    time = 0;
    2a8a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end) //&& (Current_state.gps.pdop!=0))
    2a8e:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <Current_state+0x2b>
    2a92:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <Current_state+0x2c>
    2a96:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <message_end>
    2a9a:	88 23       	and	r24, r24
    2a9c:	a1 f0       	breq	.+40     	; 0x2ac6 <__vector_18+0x5c2>
  {
    GPS_done = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2aa4:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	9f ef       	ldi	r25, 0xFF	; 255
    2aaa:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <Current_state+0x2c>
    2aae:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <Current_state+0x2b>
    message_end = 0;
    2ab2:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_end>
    buffer = 0;
    2ab6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <buffer>
    2aba:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <buffer+0x1>
    2abe:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <buffer+0x2>
    2ac2:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <buffer+0x3>
  }
}
    2ac6:	ff 91       	pop	r31
    2ac8:	ef 91       	pop	r30
    2aca:	bf 91       	pop	r27
    2acc:	af 91       	pop	r26
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0b be       	out	0x3b, r0	; 59
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2ae2:	2f 92       	push	r2
    2ae4:	3f 92       	push	r3
    2ae6:	4f 92       	push	r4
    2ae8:	5f 92       	push	r5
    2aea:	6f 92       	push	r6
    2aec:	7f 92       	push	r7
    2aee:	8f 92       	push	r8
    2af0:	9f 92       	push	r9
    2af2:	af 92       	push	r10
    2af4:	bf 92       	push	r11
    2af6:	cf 92       	push	r12
    2af8:	df 92       	push	r13
    2afa:	ef 92       	push	r14
    2afc:	ff 92       	push	r15
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	c8 54       	subi	r28, 0x48	; 72
    2b0c:	d1 09       	sbc	r29, r1
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	fc 01       	movw	r30, r24
    2b1a:	2a 01       	movw	r4, r20
    2b1c:	3b 01       	movw	r6, r22
    2b1e:	32 2e       	mov	r3, r18
    2b20:	29 96       	adiw	r28, 0x09	; 9
    2b22:	1f af       	std	Y+63, r17	; 0x3f
    2b24:	0e af       	std	Y+62, r16	; 0x3e
    2b26:	29 97       	sbiw	r28, 0x09	; 9
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2b28:	80 80       	ld	r8, Z
    2b2a:	91 80       	ldd	r9, Z+1	; 0x01
    2b2c:	a2 80       	ldd	r10, Z+2	; 0x02
    2b2e:	b3 80       	ldd	r11, Z+3	; 0x03
    2b30:	c4 80       	ldd	r12, Z+4	; 0x04
    2b32:	d5 80       	ldd	r13, Z+5	; 0x05
    2b34:	e6 80       	ldd	r14, Z+6	; 0x06
    2b36:	f7 80       	ldd	r15, Z+7	; 0x07
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a e7       	ldi	r20, 0x7A	; 122
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	60 85       	ldd	r22, Z+8	; 0x08
    2b42:	71 85       	ldd	r23, Z+9	; 0x09
    2b44:	82 85       	ldd	r24, Z+10	; 0x0a
    2b46:	93 85       	ldd	r25, Z+11	; 0x0b
    2b48:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2b4c:	6d 83       	std	Y+5, r22	; 0x05
    2b4e:	7e 83       	std	Y+6, r23	; 0x06
    2b50:	8f 83       	std	Y+7, r24	; 0x07
    2b52:	98 87       	std	Y+8, r25	; 0x08
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2b54:	c5 01       	movw	r24, r10
    2b56:	b4 01       	movw	r22, r8
    2b58:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    2b5c:	69 83       	std	Y+1, r22	; 0x01
    2b5e:	7a 83       	std	Y+2, r23	; 0x02
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	c5 01       	movw	r24, r10
    2b66:	b4 01       	movw	r22, r8
    2b68:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    2b6c:	69 87       	std	Y+9, r22	; 0x09
    2b6e:	7a 87       	std	Y+10, r23	; 0x0a
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 ee       	ldi	r19, 0xE0	; 224
    2b78:	4b ef       	ldi	r20, 0xFB	; 251
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	c3 01       	movw	r24, r6
    2b7e:	b2 01       	movw	r22, r4
    2b80:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    2b84:	6e a7       	std	Y+46, r22	; 0x2e
    2b86:	7f a7       	std	Y+47, r23	; 0x2f
    2b88:	88 ab       	std	Y+48, r24	; 0x30
    2b8a:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	b6 01       	movw	r22, r12
    2b90:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    2b94:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <cl+0x4>
    2b98:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <cl+0x5>
    2b9c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <cl+0x6>
    2ba0:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <cl+0x7>
  sl[1] = sin(lon);
    2ba4:	c7 01       	movw	r24, r14
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    2bac:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <sl+0x4>
    2bb0:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <sl+0x5>
    2bb4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sl+0x6>
    2bb8:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <sl+0x7>
  one = A2 * clat * clat;
    2bbc:	2e e2       	ldi	r18, 0x2E	; 46
    2bbe:	3f e2       	ldi	r19, 0x2F	; 47
    2bc0:	4b e1       	ldi	r20, 0x1B	; 27
    2bc2:	5c e4       	ldi	r21, 0x4C	; 76
    2bc4:	69 85       	ldd	r22, Y+9	; 0x09
    2bc6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bcc:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2bd0:	29 85       	ldd	r18, Y+9	; 0x09
    2bd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bd8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2bdc:	4b 01       	movw	r8, r22
    2bde:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2be0:	2b e3       	ldi	r18, 0x3B	; 59
    2be2:	35 e2       	ldi	r19, 0x25	; 37
    2be4:	4a e1       	ldi	r20, 0x1A	; 26
    2be6:	5c e4       	ldi	r21, 0x4C	; 76
    2be8:	69 81       	ldd	r22, Y+1	; 0x01
    2bea:	7a 81       	ldd	r23, Y+2	; 0x02
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2bf4:	29 81       	ldd	r18, Y+1	; 0x01
    2bf6:	3a 81       	ldd	r19, Y+2	; 0x02
    2bf8:	4b 81       	ldd	r20, Y+3	; 0x03
    2bfa:	5c 81       	ldd	r21, Y+4	; 0x04
    2bfc:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2c00:	69 8b       	std	Y+17, r22	; 0x11
    2c02:	7a 8b       	std	Y+18, r23	; 0x12
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
  three = one + two;
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	c5 01       	movw	r24, r10
    2c0e:	b4 01       	movw	r22, r8
    2c10:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2c14:	6d 8b       	std	Y+21, r22	; 0x15
    2c16:	7e 8b       	std	Y+22, r23	; 0x16
    2c18:	8f 8b       	std	Y+23, r24	; 0x17
    2c1a:	98 8f       	std	Y+24, r25	; 0x18
  four = sqrt(three);
    2c1c:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    2c20:	2b 01       	movw	r4, r22
    2c22:	3c 01       	movw	r6, r24
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2c2c:	6b 01       	movw	r12, r22
    2c2e:	7c 01       	movw	r14, r24
    2c30:	2d 81       	ldd	r18, Y+5	; 0x05
    2c32:	3e 81       	ldd	r19, Y+6	; 0x06
    2c34:	4f 81       	ldd	r20, Y+7	; 0x07
    2c36:	58 85       	ldd	r21, Y+8	; 0x08
    2c38:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c40:	4f 81       	ldd	r20, Y+7	; 0x07
    2c42:	58 85       	ldd	r21, Y+8	; 0x08
    2c44:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2c48:	69 8f       	std	Y+25, r22	; 0x19
    2c4a:	7a 8f       	std	Y+26, r23	; 0x1a
    2c4c:	8b 8f       	std	Y+27, r24	; 0x1b
    2c4e:	9c 8f       	std	Y+28, r25	; 0x1c
    2c50:	2e e2       	ldi	r18, 0x2E	; 46
    2c52:	3f e2       	ldi	r19, 0x2F	; 47
    2c54:	4b e1       	ldi	r20, 0x1B	; 27
    2c56:	5c e4       	ldi	r21, 0x4C	; 76
    2c58:	c5 01       	movw	r24, r10
    2c5a:	b4 01       	movw	r22, r8
    2c5c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2c60:	69 a3       	std	Y+33, r22	; 0x21
    2c62:	7a a3       	std	Y+34, r23	; 0x22
    2c64:	8b a3       	std	Y+35, r24	; 0x23
    2c66:	9c a3       	std	Y+36, r25	; 0x24
    2c68:	2d 81       	ldd	r18, Y+5	; 0x05
    2c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c6c:	4f 81       	ldd	r20, Y+7	; 0x07
    2c6e:	58 85       	ldd	r21, Y+8	; 0x08
    2c70:	c7 01       	movw	r24, r14
    2c72:	b6 01       	movw	r22, r12
    2c74:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2c78:	2d 81       	ldd	r18, Y+5	; 0x05
    2c7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c7c:	4f 81       	ldd	r20, Y+7	; 0x07
    2c7e:	58 85       	ldd	r21, Y+8	; 0x08
    2c80:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2c84:	6b 01       	movw	r12, r22
    2c86:	7c 01       	movw	r14, r24
    2c88:	2e e2       	ldi	r18, 0x2E	; 46
    2c8a:	3f e2       	ldi	r19, 0x2F	; 47
    2c8c:	4b e1       	ldi	r20, 0x1B	; 27
    2c8e:	5c e4       	ldi	r21, 0x4C	; 76
    2c90:	c5 01       	movw	r24, r10
    2c92:	b4 01       	movw	r22, r8
    2c94:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2c98:	4b 01       	movw	r8, r22
    2c9a:	5c 01       	movw	r10, r24
    2c9c:	2b e3       	ldi	r18, 0x3B	; 59
    2c9e:	35 e2       	ldi	r19, 0x25	; 37
    2ca0:	4a e1       	ldi	r20, 0x1A	; 26
    2ca2:	5c e4       	ldi	r21, 0x4C	; 76
    2ca4:	69 89       	ldd	r22, Y+17	; 0x11
    2ca6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    2caa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cac:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2cb0:	9b 01       	movw	r18, r22
    2cb2:	ac 01       	movw	r20, r24
    2cb4:	c5 01       	movw	r24, r10
    2cb6:	b4 01       	movw	r22, r8
    2cb8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2cbc:	2d 89       	ldd	r18, Y+21	; 0x15
    2cbe:	3e 89       	ldd	r19, Y+22	; 0x16
    2cc0:	4f 89       	ldd	r20, Y+23	; 0x17
    2cc2:	58 8d       	ldd	r21, Y+24	; 0x18
    2cc4:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	c7 01       	movw	r24, r14
    2cce:	b6 01       	movw	r22, r12
    2cd0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2cd4:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    2cd8:	4b 01       	movw	r8, r22
    2cda:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2cdc:	a3 01       	movw	r20, r6
    2cde:	92 01       	movw	r18, r4
    2ce0:	6d 81       	ldd	r22, Y+5	; 0x05
    2ce2:	7e 81       	ldd	r23, Y+6	; 0x06
    2ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce6:	98 85       	ldd	r25, Y+8	; 0x08
    2ce8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2cec:	a5 01       	movw	r20, r10
    2cee:	94 01       	movw	r18, r8
    2cf0:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2cf4:	23 96       	adiw	r28, 0x03	; 3
    2cf6:	6c af       	std	Y+60, r22	; 0x3c
    2cf8:	7d af       	std	Y+61, r23	; 0x3d
    2cfa:	8e af       	std	Y+62, r24	; 0x3e
    2cfc:	9f af       	std	Y+63, r25	; 0x3f
    2cfe:	23 97       	sbiw	r28, 0x03	; 3
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2d00:	20 e8       	ldi	r18, 0x80	; 128
    2d02:	39 ef       	ldi	r19, 0xF9	; 249
    2d04:	44 e8       	ldi	r20, 0x84	; 132
    2d06:	58 e4       	ldi	r21, 0x48	; 72
    2d08:	69 81       	ldd	r22, Y+1	; 0x01
    2d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2d14:	29 85       	ldd	r18, Y+9	; 0x09
    2d16:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d18:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d1c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2d20:	6b 01       	movw	r12, r22
    2d22:	7c 01       	movw	r14, r24
    2d24:	a5 01       	movw	r20, r10
    2d26:	94 01       	movw	r18, r8
    2d28:	c3 01       	movw	r24, r6
    2d2a:	b2 01       	movw	r22, r4
    2d2c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	c7 01       	movw	r24, r14
    2d36:	b6 01       	movw	r22, r12
    2d38:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2d3c:	27 96       	adiw	r28, 0x07	; 7
    2d3e:	6c af       	std	Y+60, r22	; 0x3c
    2d40:	7d af       	std	Y+61, r23	; 0x3d
    2d42:	8e af       	std	Y+62, r24	; 0x3e
    2d44:	9f af       	std	Y+63, r25	; 0x3f
    2d46:	27 97       	sbiw	r28, 0x07	; 7
  slat = slat * cd - clat * sd;
    2d48:	23 96       	adiw	r28, 0x03	; 3
    2d4a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d50:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d52:	23 97       	sbiw	r28, 0x03	; 3
    2d54:	69 81       	ldd	r22, Y+1	; 0x01
    2d56:	7a 81       	ldd	r23, Y+2	; 0x02
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2d60:	6b 01       	movw	r12, r22
    2d62:	7c 01       	movw	r14, r24
    2d64:	27 96       	adiw	r28, 0x07	; 7
    2d66:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d68:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d6a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d6c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d6e:	27 97       	sbiw	r28, 0x07	; 7
    2d70:	69 85       	ldd	r22, Y+9	; 0x09
    2d72:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d78:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	c7 01       	movw	r24, r14
    2d82:	b6 01       	movw	r22, r12
    2d84:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    2d88:	69 8f       	std	Y+25, r22	; 0x19
    2d8a:	7a 8f       	std	Y+26, r23	; 0x1a
    2d8c:	8b 8f       	std	Y+27, r24	; 0x1b
    2d8e:	9c 8f       	std	Y+28, r25	; 0x1c
  clat = clat * cd + one * sd;
    2d90:	23 96       	adiw	r28, 0x03	; 3
    2d92:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d94:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d96:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d98:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d9a:	23 97       	sbiw	r28, 0x03	; 3
    2d9c:	69 85       	ldd	r22, Y+9	; 0x09
    2d9e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2da0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2da8:	6b 01       	movw	r12, r22
    2daa:	7c 01       	movw	r14, r24
    2dac:	27 96       	adiw	r28, 0x07	; 7
    2dae:	2c ad       	ldd	r18, Y+60	; 0x3c
    2db0:	3d ad       	ldd	r19, Y+61	; 0x3d
    2db2:	4e ad       	ldd	r20, Y+62	; 0x3e
    2db4:	5f ad       	ldd	r21, Y+63	; 0x3f
    2db6:	27 97       	sbiw	r28, 0x07	; 7
    2db8:	69 81       	ldd	r22, Y+1	; 0x01
    2dba:	7a 81       	ldd	r23, Y+2	; 0x02
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2dc4:	9b 01       	movw	r18, r22
    2dc6:	ac 01       	movw	r20, r24
    2dc8:	c7 01       	movw	r24, r14
    2dca:	b6 01       	movw	r22, r12
    2dcc:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2dd0:	6d 8b       	std	Y+21, r22	; 0x15
    2dd2:	7e 8b       	std	Y+22, r23	; 0x16
    2dd4:	8f 8b       	std	Y+23, r24	; 0x17
    2dd6:	98 8f       	std	Y+24, r25	; 0x18
  
  p[1] = 2.0 * slat;
    2dd8:	0d e3       	ldi	r16, 0x3D	; 61
    2dda:	13 e0       	ldi	r17, 0x03	; 3
    2ddc:	29 8d       	ldd	r18, Y+25	; 0x19
    2dde:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2de0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2de2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2de4:	ca 01       	movw	r24, r20
    2de6:	b9 01       	movw	r22, r18
    2de8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2dec:	d8 01       	movw	r26, r16
    2dee:	14 96       	adiw	r26, 0x04	; 4
    2df0:	6d 93       	st	X+, r22
    2df2:	7d 93       	st	X+, r23
    2df4:	8d 93       	st	X+, r24
    2df6:	9c 93       	st	X, r25
    2df8:	17 97       	sbiw	r26, 0x07	; 7
  p[2] = 2.0 * clat;
    2dfa:	2d 89       	ldd	r18, Y+21	; 0x15
    2dfc:	3e 89       	ldd	r19, Y+22	; 0x16
    2dfe:	4f 89       	ldd	r20, Y+23	; 0x17
    2e00:	58 8d       	ldd	r21, Y+24	; 0x18
    2e02:	ca 01       	movw	r24, r20
    2e04:	b9 01       	movw	r22, r18
    2e06:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	60 87       	std	Z+8, r22	; 0x08
    2e0e:	71 87       	std	Z+9, r23	; 0x09
    2e10:	82 87       	std	Z+10, r24	; 0x0a
    2e12:	93 87       	std	Z+11, r25	; 0x0b
  p[3] = 4.5 * slat * slat - 1.5;
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e9       	ldi	r20, 0x90	; 144
    2e1a:	50 e4       	ldi	r21, 0x40	; 64
    2e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e24:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2e28:	29 8d       	ldd	r18, Y+25	; 0x19
    2e2a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e2c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e2e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e30:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 ec       	ldi	r20, 0xC0	; 192
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    2e40:	d8 01       	movw	r26, r16
    2e42:	1c 96       	adiw	r26, 0x0c	; 12
    2e44:	6d 93       	st	X+, r22
    2e46:	7d 93       	st	X+, r23
    2e48:	8d 93       	st	X+, r24
    2e4a:	9c 93       	st	X, r25
    2e4c:	1f 97       	sbiw	r26, 0x0f	; 15
  p[4] = sqrt(27) * clat * slat;
    2e4e:	21 ee       	ldi	r18, 0xE1	; 225
    2e50:	36 e4       	ldi	r19, 0x46	; 70
    2e52:	46 ea       	ldi	r20, 0xA6	; 166
    2e54:	50 e4       	ldi	r21, 0x40	; 64
    2e56:	6d 89       	ldd	r22, Y+21	; 0x15
    2e58:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2e62:	29 8d       	ldd	r18, Y+25	; 0x19
    2e64:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e66:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e68:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e6a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2e6e:	f8 01       	movw	r30, r16
    2e70:	60 8b       	std	Z+16, r22	; 0x10
    2e72:	71 8b       	std	Z+17, r23	; 0x11
    2e74:	82 8b       	std	Z+18, r24	; 0x12
    2e76:	93 8b       	std	Z+19, r25	; 0x13
  q[1] = -1 * clat;
    2e78:	05 e7       	ldi	r16, 0x75	; 117
    2e7a:	12 e0       	ldi	r17, 0x02	; 2
    2e7c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e7e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e80:	af 89       	ldd	r26, Y+23	; 0x17
    2e82:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e84:	b0 58       	subi	r27, 0x80	; 128
    2e86:	f8 01       	movw	r30, r16
    2e88:	84 83       	std	Z+4, r24	; 0x04
    2e8a:	95 83       	std	Z+5, r25	; 0x05
    2e8c:	a6 83       	std	Z+6, r26	; 0x06
    2e8e:	b7 83       	std	Z+7, r27	; 0x07
  q[2] = slat;
    2e90:	89 8d       	ldd	r24, Y+25	; 0x19
    2e92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e94:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2e96:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2e98:	80 87       	std	Z+8, r24	; 0x08
    2e9a:	91 87       	std	Z+9, r25	; 0x09
    2e9c:	a2 87       	std	Z+10, r26	; 0x0a
    2e9e:	b3 87       	std	Z+11, r27	; 0x0b
  q[3] = -3.0 * clat * slat;
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e4       	ldi	r20, 0x40	; 64
    2ea6:	50 ec       	ldi	r21, 0xC0	; 192
    2ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2eac:	8f 89       	ldd	r24, Y+23	; 0x17
    2eae:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2eb4:	29 8d       	ldd	r18, Y+25	; 0x19
    2eb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2eb8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2eba:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ebc:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2ec0:	d8 01       	movw	r26, r16
    2ec2:	1c 96       	adiw	r26, 0x0c	; 12
    2ec4:	6d 93       	st	X+, r22
    2ec6:	7d 93       	st	X+, r23
    2ec8:	8d 93       	st	X+, r24
    2eca:	9c 93       	st	X, r25
    2ecc:	1f 97       	sbiw	r26, 0x0f	; 15
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2ece:	29 8d       	ldd	r18, Y+25	; 0x19
    2ed0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ed2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ed4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ed6:	ca 01       	movw	r24, r20
    2ed8:	b9 01       	movw	r22, r18
    2eda:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2ede:	6b 01       	movw	r12, r22
    2ee0:	7c 01       	movw	r14, r24
    2ee2:	2d 89       	ldd	r18, Y+21	; 0x15
    2ee4:	3e 89       	ldd	r19, Y+22	; 0x16
    2ee6:	4f 89       	ldd	r20, Y+23	; 0x17
    2ee8:	58 8d       	ldd	r21, Y+24	; 0x18
    2eea:	ca 01       	movw	r24, r20
    2eec:	b9 01       	movw	r22, r18
    2eee:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2ef2:	9b 01       	movw	r18, r22
    2ef4:	ac 01       	movw	r20, r24
    2ef6:	c7 01       	movw	r24, r14
    2ef8:	b6 01       	movw	r22, r12
    2efa:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    2efe:	27 ed       	ldi	r18, 0xD7	; 215
    2f00:	33 eb       	ldi	r19, 0xB3	; 179
    2f02:	4d ed       	ldi	r20, 0xDD	; 221
    2f04:	5f e3       	ldi	r21, 0x3F	; 63
    2f06:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	60 8b       	std	Z+16, r22	; 0x10
    2f0e:	71 8b       	std	Z+17, r23	; 0x11
    2f10:	82 8b       	std	Z+18, r24	; 0x12
    2f12:	93 8b       	std	Z+19, r25	; 0x13
  
  ratio = RE / r;
    2f14:	a5 01       	movw	r20, r10
    2f16:	94 01       	movw	r18, r8
    2f18:	6a e9       	ldi	r22, 0x9A	; 154
    2f1a:	79 e1       	ldi	r23, 0x19	; 25
    2f1c:	87 ec       	ldi	r24, 0xC7	; 199
    2f1e:	95 e4       	ldi	r25, 0x45	; 69
    2f20:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2f24:	6b af       	std	Y+59, r22	; 0x3b
    2f26:	7c af       	std	Y+60, r23	; 0x3c
    2f28:	8d af       	std	Y+61, r24	; 0x3d
    2f2a:	9e af       	std	Y+62, r25	; 0x3e
  
  max = (order * (order + 3)) / 2;
    2f2c:	23 2d       	mov	r18, r3
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	a9 01       	movw	r20, r18
    2f32:	4d 5f       	subi	r20, 0xFD	; 253
    2f34:	5f 4f       	sbci	r21, 0xFF	; 255
    2f36:	24 9f       	mul	r18, r20
    2f38:	c0 01       	movw	r24, r0
    2f3a:	25 9f       	mul	r18, r21
    2f3c:	90 0d       	add	r25, r0
    2f3e:	34 9f       	mul	r19, r20
    2f40:	90 0d       	add	r25, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	99 23       	and	r25, r25
    2f46:	0c f4       	brge	.+2      	; 0x2f4a <igrf+0x468>
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	95 95       	asr	r25
    2f4c:	87 95       	ror	r24
    2f4e:	8e ab       	std	Y+54, r24	; 0x36
  for(k = 1; k <= max; k++)
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <igrf+0x474>
    2f54:	f6 c3       	rjmp	.+2028   	; 0x3742 <igrf+0xc60>
    2f56:	41 2c       	mov	r4, r1
    2f58:	21 2c       	mov	r2, r1
    2f5a:	33 24       	eor	r3, r3
    2f5c:	33 94       	inc	r3
    2f5e:	f1 e0       	ldi	r31, 0x01	; 1
    2f60:	f9 8b       	std	Y+17, r31	; 0x11
    2f62:	19 a6       	std	Y+41, r1	; 0x29
    2f64:	1a a6       	std	Y+42, r1	; 0x2a
    2f66:	1b a6       	std	Y+43, r1	; 0x2b
    2f68:	1c a6       	std	Y+44, r1	; 0x2c
    2f6a:	1d a2       	std	Y+37, r1	; 0x25
    2f6c:	1e a2       	std	Y+38, r1	; 0x26
    2f6e:	1f a2       	std	Y+39, r1	; 0x27
    2f70:	18 a6       	std	Y+40, r1	; 0x28
    2f72:	1f aa       	std	Y+55, r1	; 0x37
    2f74:	18 ae       	std	Y+56, r1	; 0x38
    2f76:	19 ae       	std	Y+57, r1	; 0x39
    2f78:	1a ae       	std	Y+58, r1	; 0x3a
    2f7a:	19 a2       	std	Y+33, r1	; 0x21
    2f7c:	1a a2       	std	Y+34, r1	; 0x22
    2f7e:	1b a2       	std	Y+35, r1	; 0x23
    2f80:	1c a2       	std	Y+36, r1	; 0x24
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    2f82:	29 86       	std	Y+9, r2	; 0x09
    2f84:	4d a6       	std	Y+45, r4	; 0x2d
    2f86:	23 2c       	mov	r2, r3
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2f88:	29 85       	ldd	r18, Y+9	; 0x09
    2f8a:	22 15       	cp	r18, r2
    2f8c:	d8 f4       	brcc	.+54     	; 0x2fc4 <igrf+0x4e2>
    {
      m = 0;
      n++;
    2f8e:	2f 5f       	subi	r18, 0xFF	; 255
    2f90:	29 87       	std	Y+9, r18	; 0x09
      rr = pow(ratio, n + 2);
    2f92:	62 2f       	mov	r22, r18
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	6e 5f       	subi	r22, 0xFE	; 254
    2f98:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9a:	07 2e       	mov	r0, r23
    2f9c:	00 0c       	add	r0, r0
    2f9e:	88 0b       	sbc	r24, r24
    2fa0:	99 0b       	sbc	r25, r25
    2fa2:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    2fa6:	9b 01       	movw	r18, r22
    2fa8:	ac 01       	movw	r20, r24
    2faa:	6b ad       	ldd	r22, Y+59	; 0x3b
    2fac:	7c ad       	ldd	r23, Y+60	; 0x3c
    2fae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb2:	0e 94 5e 34 	call	0x68bc	; 0x68bc <pow>
    2fb6:	69 a7       	std	Y+41, r22	; 0x29
    2fb8:	7a a7       	std	Y+42, r23	; 0x2a
    2fba:	8b a7       	std	Y+43, r24	; 0x2b
    2fbc:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2fbe:	39 85       	ldd	r19, Y+9	; 0x09
    2fc0:	3d a7       	std	Y+45, r19	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2fc2:	21 2c       	mov	r2, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2fc4:	44 e0       	ldi	r20, 0x04	; 4
    2fc6:	43 15       	cp	r20, r3
    2fc8:	08 f0       	brcs	.+2      	; 0x2fcc <igrf+0x4ea>
    2fca:	1c c2       	rjmp	.+1080   	; 0x3404 <igrf+0x922>
    {
      if(m == n)
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	28 12       	cpse	r2, r24
    2fd0:	01 c1       	rjmp	.+514    	; 0x31d4 <igrf+0x6f2>
      {
        one = sqrt(1 - (0.5 / fm));
    2fd2:	42 2c       	mov	r4, r2
    2fd4:	51 2c       	mov	r5, r1
    2fd6:	b2 01       	movw	r22, r4
    2fd8:	05 2c       	mov	r0, r5
    2fda:	00 0c       	add	r0, r0
    2fdc:	88 0b       	sbc	r24, r24
    2fde:	99 0b       	sbc	r25, r25
    2fe0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    2fe4:	6b 01       	movw	r12, r22
    2fe6:	7c 01       	movw	r14, r24
    2fe8:	9b 01       	movw	r18, r22
    2fea:	ac 01       	movw	r20, r24
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	70 e0       	ldi	r23, 0x00	; 0
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	9f e3       	ldi	r25, 0x3F	; 63
    2ff4:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    2ff8:	4b 01       	movw	r8, r22
    2ffa:	5c 01       	movw	r10, r24
    2ffc:	a5 01       	movw	r20, r10
    2ffe:	94 01       	movw	r18, r8
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	80 e8       	ldi	r24, 0x80	; 128
    3006:	9f e3       	ldi	r25, 0x3F	; 63
    3008:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    300c:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    3010:	69 83       	std	Y+1, r22	; 0x01
    3012:	7a 83       	std	Y+2, r23	; 0x02
    3014:	8b 83       	std	Y+3, r24	; 0x03
    3016:	9c 83       	std	Y+4, r25	; 0x04
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    3018:	63 2c       	mov	r6, r3
    301a:	71 2c       	mov	r7, r1
    301c:	43 01       	movw	r8, r6
    301e:	84 18       	sub	r8, r4
    3020:	95 08       	sbc	r9, r5
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	89 1a       	sub	r8, r25
    3026:	91 08       	sbc	r9, r1
    3028:	66 0c       	add	r6, r6
    302a:	77 1c       	adc	r7, r7
    302c:	66 0c       	add	r6, r6
    302e:	77 1c       	adc	r7, r7
    3030:	d3 01       	movw	r26, r6
    3032:	a3 5c       	subi	r26, 0xC3	; 195
    3034:	bc 4f       	sbci	r27, 0xFC	; 252
    3036:	5d 01       	movw	r10, r26
    3038:	a7 01       	movw	r20, r14
    303a:	96 01       	movw	r18, r12
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	70 e0       	ldi	r23, 0x00	; 0
    3040:	80 e8       	ldi	r24, 0x80	; 128
    3042:	9f e3       	ldi	r25, 0x3F	; 63
    3044:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e8       	ldi	r20, 0x80	; 128
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3054:	29 81       	ldd	r18, Y+1	; 0x01
    3056:	3a 81       	ldd	r19, Y+2	; 0x02
    3058:	4b 81       	ldd	r20, Y+3	; 0x03
    305a:	5c 81       	ldd	r21, Y+4	; 0x04
    305c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3060:	2d 89       	ldd	r18, Y+21	; 0x15
    3062:	3e 89       	ldd	r19, Y+22	; 0x16
    3064:	4f 89       	ldd	r20, Y+23	; 0x17
    3066:	58 8d       	ldd	r21, Y+24	; 0x18
    3068:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    306c:	88 0c       	add	r8, r8
    306e:	99 1c       	adc	r9, r9
    3070:	88 0c       	add	r8, r8
    3072:	99 1c       	adc	r9, r9
    3074:	84 01       	movw	r16, r8
    3076:	03 5c       	subi	r16, 0xC3	; 195
    3078:	1c 4f       	sbci	r17, 0xFC	; 252
    307a:	f8 01       	movw	r30, r16
    307c:	20 81       	ld	r18, Z
    307e:	31 81       	ldd	r19, Z+1	; 0x01
    3080:	42 81       	ldd	r20, Z+2	; 0x02
    3082:	53 81       	ldd	r21, Z+3	; 0x03
    3084:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3088:	d5 01       	movw	r26, r10
    308a:	6d 93       	st	X+, r22
    308c:	7d 93       	st	X+, r23
    308e:	8d 93       	st	X+, r24
    3090:	9c 93       	st	X, r25
    3092:	13 97       	sbiw	r26, 0x03	; 3
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    3094:	f3 01       	movw	r30, r6
    3096:	eb 58       	subi	r30, 0x8B	; 139
    3098:	fd 4f       	sbci	r31, 0xFD	; 253
    309a:	5f 01       	movw	r10, r30
    309c:	f4 01       	movw	r30, r8
    309e:	eb 58       	subi	r30, 0x8B	; 139
    30a0:	fd 4f       	sbci	r31, 0xFD	; 253
    30a2:	20 81       	ld	r18, Z
    30a4:	31 81       	ldd	r19, Z+1	; 0x01
    30a6:	42 81       	ldd	r20, Z+2	; 0x02
    30a8:	53 81       	ldd	r21, Z+3	; 0x03
    30aa:	6d 89       	ldd	r22, Y+21	; 0x15
    30ac:	7e 89       	ldd	r23, Y+22	; 0x16
    30ae:	8f 89       	ldd	r24, Y+23	; 0x17
    30b0:	98 8d       	ldd	r25, Y+24	; 0x18
    30b2:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    30b6:	3b 01       	movw	r6, r22
    30b8:	4c 01       	movw	r8, r24
    30ba:	d8 01       	movw	r26, r16
    30bc:	2d 91       	ld	r18, X+
    30be:	3d 91       	ld	r19, X+
    30c0:	4d 91       	ld	r20, X+
    30c2:	5c 91       	ld	r21, X
    30c4:	69 8d       	ldd	r22, Y+25	; 0x19
    30c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30cc:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    30d0:	a7 01       	movw	r20, r14
    30d2:	96 01       	movw	r18, r12
    30d4:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    30d8:	9b 01       	movw	r18, r22
    30da:	ac 01       	movw	r20, r24
    30dc:	c4 01       	movw	r24, r8
    30de:	b3 01       	movw	r22, r6
    30e0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    30e4:	29 81       	ldd	r18, Y+1	; 0x01
    30e6:	3a 81       	ldd	r19, Y+2	; 0x02
    30e8:	4b 81       	ldd	r20, Y+3	; 0x03
    30ea:	5c 81       	ldd	r21, Y+4	; 0x04
    30ec:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    30f0:	f5 01       	movw	r30, r10
    30f2:	60 83       	st	Z, r22
    30f4:	71 83       	std	Z+1, r23	; 0x01
    30f6:	82 83       	std	Z+2, r24	; 0x02
    30f8:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    30fa:	82 01       	movw	r16, r4
    30fc:	01 50       	subi	r16, 0x01	; 1
    30fe:	11 09       	sbc	r17, r1
    3100:	c0 90 3d 02 	lds	r12, 0x023D	; 0x80023d <cl+0x4>
    3104:	d0 90 3e 02 	lds	r13, 0x023E	; 0x80023e <cl+0x5>
    3108:	e0 90 3f 02 	lds	r14, 0x023F	; 0x80023f <cl+0x6>
    310c:	f0 90 40 02 	lds	r15, 0x0240	; 0x800240 <cl+0x7>
    3110:	00 0f       	add	r16, r16
    3112:	11 1f       	adc	r17, r17
    3114:	00 0f       	add	r16, r16
    3116:	11 1f       	adc	r17, r17
    3118:	f8 01       	movw	r30, r16
    311a:	e7 5c       	subi	r30, 0xC7	; 199
    311c:	fd 4f       	sbci	r31, 0xFD	; 253
    311e:	80 80       	ld	r8, Z
    3120:	91 80       	ldd	r9, Z+1	; 0x01
    3122:	a2 80       	ldd	r10, Z+2	; 0x02
    3124:	b3 80       	ldd	r11, Z+3	; 0x03
    3126:	44 0c       	add	r4, r4
    3128:	55 1c       	adc	r5, r5
    312a:	44 0c       	add	r4, r4
    312c:	55 1c       	adc	r5, r5
    312e:	92 01       	movw	r18, r4
    3130:	23 50       	subi	r18, 0x03	; 3
    3132:	3e 4f       	sbci	r19, 0xFE	; 254
    3134:	39 01       	movw	r6, r18
    3136:	03 50       	subi	r16, 0x03	; 3
    3138:	1e 4f       	sbci	r17, 0xFE	; 254
    313a:	d8 01       	movw	r26, r16
    313c:	2d 91       	ld	r18, X+
    313e:	3d 91       	ld	r19, X+
    3140:	4d 91       	ld	r20, X+
    3142:	5c 91       	ld	r21, X
    3144:	c7 01       	movw	r24, r14
    3146:	b6 01       	movw	r22, r12
    3148:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    314c:	69 83       	std	Y+1, r22	; 0x01
    314e:	7a 83       	std	Y+2, r23	; 0x02
    3150:	8b 83       	std	Y+3, r24	; 0x03
    3152:	9c 83       	std	Y+4, r25	; 0x04
    3154:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    3158:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    315c:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    3160:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    3164:	c5 01       	movw	r24, r10
    3166:	b4 01       	movw	r22, r8
    3168:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    316c:	9b 01       	movw	r18, r22
    316e:	ac 01       	movw	r20, r24
    3170:	69 81       	ldd	r22, Y+1	; 0x01
    3172:	7a 81       	ldd	r23, Y+2	; 0x02
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    317c:	f3 01       	movw	r30, r6
    317e:	60 83       	st	Z, r22
    3180:	71 83       	std	Z+1, r23	; 0x01
    3182:	82 83       	std	Z+2, r24	; 0x02
    3184:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    3186:	92 01       	movw	r18, r4
    3188:	27 5c       	subi	r18, 0xC7	; 199
    318a:	3d 4f       	sbci	r19, 0xFD	; 253
    318c:	29 01       	movw	r4, r18
    318e:	a5 01       	movw	r20, r10
    3190:	94 01       	movw	r18, r8
    3192:	c7 01       	movw	r24, r14
    3194:	b6 01       	movw	r22, r12
    3196:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    319a:	6b 01       	movw	r12, r22
    319c:	7c 01       	movw	r14, r24
    319e:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <sl+0x4>
    31a2:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <sl+0x5>
    31a6:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <sl+0x6>
    31aa:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <sl+0x7>
    31ae:	d8 01       	movw	r26, r16
    31b0:	6d 91       	ld	r22, X+
    31b2:	7d 91       	ld	r23, X+
    31b4:	8d 91       	ld	r24, X+
    31b6:	9c 91       	ld	r25, X
    31b8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    31bc:	9b 01       	movw	r18, r22
    31be:	ac 01       	movw	r20, r24
    31c0:	c7 01       	movw	r24, r14
    31c2:	b6 01       	movw	r22, r12
    31c4:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    31c8:	f2 01       	movw	r30, r4
    31ca:	60 83       	st	Z, r22
    31cc:	71 83       	std	Z+1, r23	; 0x01
    31ce:	82 83       	std	Z+2, r24	; 0x02
    31d0:	93 83       	std	Z+3, r25	; 0x03
    31d2:	18 c1       	rjmp	.+560    	; 0x3404 <igrf+0x922>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    31d4:	fd a5       	ldd	r31, Y+45	; 0x2d
    31d6:	0f 2f       	mov	r16, r31
    31d8:	10 e0       	ldi	r17, 0x00	; 0
    31da:	22 9c       	mul	r2, r2
    31dc:	60 01       	movw	r12, r0
    31de:	11 24       	eor	r1, r1
    31e0:	00 9f       	mul	r16, r16
    31e2:	40 01       	movw	r8, r0
    31e4:	01 9f       	mul	r16, r17
    31e6:	90 0c       	add	r9, r0
    31e8:	90 0c       	add	r9, r0
    31ea:	11 24       	eor	r1, r1
    31ec:	8c 18       	sub	r8, r12
    31ee:	9d 08       	sbc	r9, r13
    31f0:	09 2c       	mov	r0, r9
    31f2:	00 0c       	add	r0, r0
    31f4:	aa 08       	sbc	r10, r10
    31f6:	bb 08       	sbc	r11, r11
    31f8:	c5 01       	movw	r24, r10
    31fa:	b4 01       	movw	r22, r8
    31fc:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3200:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    3204:	4b 01       	movw	r8, r22
    3206:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    3208:	b8 01       	movw	r22, r16
    320a:	11 0f       	add	r17, r17
    320c:	88 0b       	sbc	r24, r24
    320e:	99 0b       	sbc	r25, r25
    3210:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3214:	69 83       	std	Y+1, r22	; 0x01
    3216:	7a 83       	std	Y+2, r23	; 0x02
    3218:	8b 83       	std	Y+3, r24	; 0x03
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    3228:	6d 83       	std	Y+5, r22	; 0x05
    322a:	7e 83       	std	Y+6, r23	; 0x06
    322c:	8f 83       	std	Y+7, r24	; 0x07
    322e:	98 87       	std	Y+8, r25	; 0x08
    3230:	9b 01       	movw	r18, r22
    3232:	ac 01       	movw	r20, r24
    3234:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3238:	2b 01       	movw	r4, r22
    323a:	3c 01       	movw	r6, r24
    323c:	0d 2c       	mov	r0, r13
    323e:	00 0c       	add	r0, r0
    3240:	ee 08       	sbc	r14, r14
    3242:	ff 08       	sbc	r15, r15
    3244:	c7 01       	movw	r24, r14
    3246:	b6 01       	movw	r22, r12
    3248:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    324c:	9b 01       	movw	r18, r22
    324e:	ac 01       	movw	r20, r24
    3250:	c3 01       	movw	r24, r6
    3252:	b2 01       	movw	r22, r4
    3254:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    3258:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    325c:	a5 01       	movw	r20, r10
    325e:	94 01       	movw	r18, r8
    3260:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3264:	6b 01       	movw	r12, r22
    3266:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    3268:	29 81       	ldd	r18, Y+1	; 0x01
    326a:	3a 81       	ldd	r19, Y+2	; 0x02
    326c:	4b 81       	ldd	r20, Y+3	; 0x03
    326e:	5c 81       	ldd	r21, Y+4	; 0x04
    3270:	ca 01       	movw	r24, r20
    3272:	b9 01       	movw	r22, r18
    3274:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e8       	ldi	r20, 0x80	; 128
    327e:	5f e3       	ldi	r21, 0x3F	; 63
    3280:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    3284:	a5 01       	movw	r20, r10
    3286:	94 01       	movw	r18, r8
    3288:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    328c:	6d 87       	std	Y+13, r22	; 0x0d
    328e:	7e 87       	std	Y+14, r23	; 0x0e
    3290:	8f 87       	std	Y+15, r24	; 0x0f
    3292:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    3294:	83 2d       	mov	r24, r3
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	49 85       	ldd	r20, Y+9	; 0x09
    329a:	24 2f       	mov	r18, r20
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	4c 01       	movw	r8, r24
    32a0:	82 1a       	sub	r8, r18
    32a2:	93 0a       	sbc	r9, r19
    32a4:	84 01       	movw	r16, r8
    32a6:	02 1b       	sub	r16, r18
    32a8:	13 0b       	sbc	r17, r19
    32aa:	0f 5f       	subi	r16, 0xFF	; 255
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	3c 01       	movw	r6, r24
    32b0:	66 0c       	add	r6, r6
    32b2:	77 1c       	adc	r7, r7
    32b4:	66 0c       	add	r6, r6
    32b6:	77 1c       	adc	r7, r7
    32b8:	c3 01       	movw	r24, r6
    32ba:	83 5c       	subi	r24, 0xC3	; 195
    32bc:	9c 4f       	sbci	r25, 0xFC	; 252
    32be:	5c 01       	movw	r10, r24
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	69 81       	ldd	r22, Y+1	; 0x01
    32ca:	7a 81       	ldd	r23, Y+2	; 0x02
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	9c 81       	ldd	r25, Y+4	; 0x04
    32d0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    32d4:	6d 8f       	std	Y+29, r22	; 0x1d
    32d6:	7e 8f       	std	Y+30, r23	; 0x1e
    32d8:	8f 8f       	std	Y+31, r24	; 0x1f
    32da:	98 a3       	std	Y+32, r25	; 0x20
    32dc:	29 8d       	ldd	r18, Y+25	; 0x19
    32de:	3a 8d       	ldd	r19, Y+26	; 0x1a
    32e0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    32e2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    32e4:	6d 85       	ldd	r22, Y+13	; 0x0d
    32e6:	7e 85       	ldd	r23, Y+14	; 0x0e
    32e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ea:	98 89       	ldd	r25, Y+16	; 0x10
    32ec:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    32f0:	88 0c       	add	r8, r8
    32f2:	99 1c       	adc	r9, r9
    32f4:	88 0c       	add	r8, r8
    32f6:	99 1c       	adc	r9, r9
    32f8:	d4 01       	movw	r26, r8
    32fa:	a3 5c       	subi	r26, 0xC3	; 195
    32fc:	bc 4f       	sbci	r27, 0xFC	; 252
    32fe:	2d 01       	movw	r4, r26
    3300:	2d 91       	ld	r18, X+
    3302:	3d 91       	ld	r19, X+
    3304:	4d 91       	ld	r20, X+
    3306:	5c 91       	ld	r21, X
    3308:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    330c:	29 81       	ldd	r18, Y+1	; 0x01
    330e:	3a 81       	ldd	r19, Y+2	; 0x02
    3310:	4b 81       	ldd	r20, Y+3	; 0x03
    3312:	5c 81       	ldd	r21, Y+4	; 0x04
    3314:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3318:	6a ab       	std	Y+50, r22	; 0x32
    331a:	7b ab       	std	Y+51, r23	; 0x33
    331c:	8c ab       	std	Y+52, r24	; 0x34
    331e:	9d ab       	std	Y+53, r25	; 0x35
    3320:	00 0f       	add	r16, r16
    3322:	11 1f       	adc	r17, r17
    3324:	00 0f       	add	r16, r16
    3326:	11 1f       	adc	r17, r17
    3328:	f8 01       	movw	r30, r16
    332a:	e3 5c       	subi	r30, 0xC3	; 195
    332c:	fc 4f       	sbci	r31, 0xFC	; 252
    332e:	20 81       	ld	r18, Z
    3330:	31 81       	ldd	r19, Z+1	; 0x01
    3332:	42 81       	ldd	r20, Z+2	; 0x02
    3334:	53 81       	ldd	r21, Z+3	; 0x03
    3336:	c7 01       	movw	r24, r14
    3338:	b6 01       	movw	r22, r12
    333a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    333e:	2d 81       	ldd	r18, Y+5	; 0x05
    3340:	3e 81       	ldd	r19, Y+6	; 0x06
    3342:	4f 81       	ldd	r20, Y+7	; 0x07
    3344:	58 85       	ldd	r21, Y+8	; 0x08
    3346:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    334a:	9b 01       	movw	r18, r22
    334c:	ac 01       	movw	r20, r24
    334e:	6a a9       	ldd	r22, Y+50	; 0x32
    3350:	7b a9       	ldd	r23, Y+51	; 0x33
    3352:	8c a9       	ldd	r24, Y+52	; 0x34
    3354:	9d a9       	ldd	r25, Y+53	; 0x35
    3356:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    335a:	9b 01       	movw	r18, r22
    335c:	ac 01       	movw	r20, r24
    335e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3360:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3362:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3364:	98 a1       	ldd	r25, Y+32	; 0x20
    3366:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    336a:	f5 01       	movw	r30, r10
    336c:	60 83       	st	Z, r22
    336e:	71 83       	std	Z+1, r23	; 0x01
    3370:	82 83       	std	Z+2, r24	; 0x02
    3372:	93 83       	std	Z+3, r25	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    3374:	93 01       	movw	r18, r6
    3376:	2b 58       	subi	r18, 0x8B	; 139
    3378:	3d 4f       	sbci	r19, 0xFD	; 253
    337a:	39 01       	movw	r6, r18
    337c:	f4 01       	movw	r30, r8
    337e:	eb 58       	subi	r30, 0x8B	; 139
    3380:	fd 4f       	sbci	r31, 0xFD	; 253
    3382:	20 81       	ld	r18, Z
    3384:	31 81       	ldd	r19, Z+1	; 0x01
    3386:	42 81       	ldd	r20, Z+2	; 0x02
    3388:	53 81       	ldd	r21, Z+3	; 0x03
    338a:	69 8d       	ldd	r22, Y+25	; 0x19
    338c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    338e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3392:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3396:	4b 01       	movw	r8, r22
    3398:	5c 01       	movw	r10, r24
    339a:	d2 01       	movw	r26, r4
    339c:	2d 91       	ld	r18, X+
    339e:	3d 91       	ld	r19, X+
    33a0:	4d 91       	ld	r20, X+
    33a2:	5c 91       	ld	r21, X
    33a4:	6d 89       	ldd	r22, Y+21	; 0x15
    33a6:	7e 89       	ldd	r23, Y+22	; 0x16
    33a8:	8f 89       	ldd	r24, Y+23	; 0x17
    33aa:	98 8d       	ldd	r25, Y+24	; 0x18
    33ac:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    33b0:	29 81       	ldd	r18, Y+1	; 0x01
    33b2:	3a 81       	ldd	r19, Y+2	; 0x02
    33b4:	4b 81       	ldd	r20, Y+3	; 0x03
    33b6:	5c 81       	ldd	r21, Y+4	; 0x04
    33b8:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    33bc:	9b 01       	movw	r18, r22
    33be:	ac 01       	movw	r20, r24
    33c0:	c5 01       	movw	r24, r10
    33c2:	b4 01       	movw	r22, r8
    33c4:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    33c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    33ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    33cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    33ce:	58 89       	ldd	r21, Y+16	; 0x10
    33d0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    33d4:	4b 01       	movw	r8, r22
    33d6:	5c 01       	movw	r10, r24
    33d8:	f8 01       	movw	r30, r16
    33da:	eb 58       	subi	r30, 0x8B	; 139
    33dc:	fd 4f       	sbci	r31, 0xFD	; 253
    33de:	20 81       	ld	r18, Z
    33e0:	31 81       	ldd	r19, Z+1	; 0x01
    33e2:	42 81       	ldd	r20, Z+2	; 0x02
    33e4:	53 81       	ldd	r21, Z+3	; 0x03
    33e6:	c7 01       	movw	r24, r14
    33e8:	b6 01       	movw	r22, r12
    33ea:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    33ee:	9b 01       	movw	r18, r22
    33f0:	ac 01       	movw	r20, r24
    33f2:	c5 01       	movw	r24, r10
    33f4:	b4 01       	movw	r22, r8
    33f6:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    33fa:	f3 01       	movw	r30, r6
    33fc:	60 83       	st	Z, r22
    33fe:	71 83       	std	Z+1, r23	; 0x01
    3400:	82 83       	std	Z+2, r24	; 0x02
    3402:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    3404:	f9 89       	ldd	r31, Y+17	; 0x11
    3406:	0f 2f       	mov	r16, r31
    3408:	10 e0       	ldi	r17, 0x00	; 0
    340a:	c8 01       	movw	r24, r16
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	fc 01       	movw	r30, r24
    3416:	e4 54       	subi	r30, 0x44	; 68
    3418:	fb 4f       	sbci	r31, 0xFB	; 251
    341a:	c5 90       	lpm	r12, Z+
    341c:	d5 90       	lpm	r13, Z+
    341e:	e5 90       	lpm	r14, Z+
    3420:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    3422:	fc 01       	movw	r30, r24
    3424:	e4 55       	subi	r30, 0x54	; 84
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	25 91       	lpm	r18, Z+
    342a:	35 91       	lpm	r19, Z+
    342c:	45 91       	lpm	r20, Z+
    342e:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3430:	6e a5       	ldd	r22, Y+46	; 0x2e
    3432:	7f a5       	ldd	r23, Y+47	; 0x2f
    3434:	88 a9       	ldd	r24, Y+48	; 0x30
    3436:	99 a9       	ldd	r25, Y+49	; 0x31
    3438:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    343c:	9b 01       	movw	r18, r22
    343e:	ac 01       	movw	r20, r24
    3440:	c7 01       	movw	r24, r14
    3442:	b6 01       	movw	r22, r12
    3444:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3448:	29 a5       	ldd	r18, Y+41	; 0x29
    344a:	3a a5       	ldd	r19, Y+42	; 0x2a
    344c:	4b a5       	ldd	r20, Y+43	; 0x2b
    344e:	5c a5       	ldd	r21, Y+44	; 0x2c
    3450:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3454:	69 83       	std	Y+1, r22	; 0x01
    3456:	7a 83       	std	Y+2, r23	; 0x02
    3458:	8b 83       	std	Y+3, r24	; 0x03
    345a:	9c 83       	std	Y+4, r25	; 0x04
    
    
    if(m == 0)
    345c:	21 10       	cpse	r2, r1
    345e:	38 c0       	rjmp	.+112    	; 0x34d0 <igrf+0x9ee>
    {
      x += one * q[k];
    3460:	03 2d       	mov	r16, r3
    3462:	10 e0       	ldi	r17, 0x00	; 0
    3464:	00 0f       	add	r16, r16
    3466:	11 1f       	adc	r17, r17
    3468:	00 0f       	add	r16, r16
    346a:	11 1f       	adc	r17, r17
    346c:	f8 01       	movw	r30, r16
    346e:	eb 58       	subi	r30, 0x8B	; 139
    3470:	fd 4f       	sbci	r31, 0xFD	; 253
    3472:	20 81       	ld	r18, Z
    3474:	31 81       	ldd	r19, Z+1	; 0x01
    3476:	42 81       	ldd	r20, Z+2	; 0x02
    3478:	53 81       	ldd	r21, Z+3	; 0x03
    347a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	69 a1       	ldd	r22, Y+33	; 0x21
    3484:	7a a1       	ldd	r23, Y+34	; 0x22
    3486:	8b a1       	ldd	r24, Y+35	; 0x23
    3488:	9c a1       	ldd	r25, Y+36	; 0x24
    348a:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    348e:	69 a3       	std	Y+33, r22	; 0x21
    3490:	7a a3       	std	Y+34, r23	; 0x22
    3492:	8b a3       	std	Y+35, r24	; 0x23
    3494:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    3496:	f8 01       	movw	r30, r16
    3498:	e3 5c       	subi	r30, 0xC3	; 195
    349a:	fc 4f       	sbci	r31, 0xFC	; 252
    349c:	20 81       	ld	r18, Z
    349e:	31 81       	ldd	r19, Z+1	; 0x01
    34a0:	42 81       	ldd	r20, Z+2	; 0x02
    34a2:	53 81       	ldd	r21, Z+3	; 0x03
    34a4:	69 81       	ldd	r22, Y+1	; 0x01
    34a6:	7a 81       	ldd	r23, Y+2	; 0x02
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    34b0:	9b 01       	movw	r18, r22
    34b2:	ac 01       	movw	r20, r24
    34b4:	6d a1       	ldd	r22, Y+37	; 0x25
    34b6:	7e a1       	ldd	r23, Y+38	; 0x26
    34b8:	8f a1       	ldd	r24, Y+39	; 0x27
    34ba:	98 a5       	ldd	r25, Y+40	; 0x28
    34bc:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    34c0:	6d a3       	std	Y+37, r22	; 0x25
    34c2:	7e a3       	std	Y+38, r23	; 0x26
    34c4:	8f a3       	std	Y+39, r24	; 0x27
    34c6:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    34c8:	29 89       	ldd	r18, Y+17	; 0x11
    34ca:	2f 5f       	subi	r18, 0xFF	; 255
    34cc:	29 8b       	std	Y+17, r18	; 0x11
    34ce:	32 c1       	rjmp	.+612    	; 0x3734 <igrf+0xc52>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    34d0:	c8 01       	movw	r24, r16
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	fc 01       	movw	r30, r24
    34de:	e4 54       	subi	r30, 0x44	; 68
    34e0:	fb 4f       	sbci	r31, 0xFB	; 251
    34e2:	85 90       	lpm	r8, Z+
    34e4:	95 90       	lpm	r9, Z+
    34e6:	a5 90       	lpm	r10, Z+
    34e8:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    34ea:	84 55       	subi	r24, 0x54	; 84
    34ec:	9e 4f       	sbci	r25, 0xFE	; 254
    34ee:	fc 01       	movw	r30, r24
    34f0:	25 91       	lpm	r18, Z+
    34f2:	35 91       	lpm	r19, Z+
    34f4:	45 91       	lpm	r20, Z+
    34f6:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    34f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    34fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    34fc:	88 a9       	ldd	r24, Y+48	; 0x30
    34fe:	99 a9       	ldd	r25, Y+49	; 0x31
    3500:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3504:	9b 01       	movw	r18, r22
    3506:	ac 01       	movw	r20, r24
    3508:	c5 01       	movw	r24, r10
    350a:	b4 01       	movw	r22, r8
    350c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3510:	29 a5       	ldd	r18, Y+41	; 0x29
    3512:	3a a5       	ldd	r19, Y+42	; 0x2a
    3514:	4b a5       	ldd	r20, Y+43	; 0x2b
    3516:	5c a5       	ldd	r21, Y+44	; 0x2c
    3518:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    351c:	6d 87       	std	Y+13, r22	; 0x0d
    351e:	7e 87       	std	Y+14, r23	; 0x0e
    3520:	8f 87       	std	Y+15, r24	; 0x0f
    3522:	98 8b       	std	Y+16, r25	; 0x10
      three = one * cl[m] + two * sl[m];
    3524:	02 2d       	mov	r16, r2
    3526:	10 e0       	ldi	r17, 0x00	; 0
    3528:	c8 01       	movw	r24, r16
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	fc 01       	movw	r30, r24
    3534:	e7 5c       	subi	r30, 0xC7	; 199
    3536:	fd 4f       	sbci	r31, 0xFD	; 253
    3538:	c0 80       	ld	r12, Z
    353a:	d1 80       	ldd	r13, Z+1	; 0x01
    353c:	e2 80       	ldd	r14, Z+2	; 0x02
    353e:	f3 80       	ldd	r15, Z+3	; 0x03
    3540:	fc 01       	movw	r30, r24
    3542:	e3 50       	subi	r30, 0x03	; 3
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	40 80       	ld	r4, Z
    3548:	51 80       	ldd	r5, Z+1	; 0x01
    354a:	62 80       	ldd	r6, Z+2	; 0x02
    354c:	73 80       	ldd	r7, Z+3	; 0x03
    354e:	29 81       	ldd	r18, Y+1	; 0x01
    3550:	3a 81       	ldd	r19, Y+2	; 0x02
    3552:	4b 81       	ldd	r20, Y+3	; 0x03
    3554:	5c 81       	ldd	r21, Y+4	; 0x04
    3556:	c7 01       	movw	r24, r14
    3558:	b6 01       	movw	r22, r12
    355a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    355e:	4b 01       	movw	r8, r22
    3560:	5c 01       	movw	r10, r24
    3562:	2d 85       	ldd	r18, Y+13	; 0x0d
    3564:	3e 85       	ldd	r19, Y+14	; 0x0e
    3566:	4f 85       	ldd	r20, Y+15	; 0x0f
    3568:	58 89       	ldd	r21, Y+16	; 0x10
    356a:	c3 01       	movw	r24, r6
    356c:	b2 01       	movw	r22, r4
    356e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3572:	9b 01       	movw	r18, r22
    3574:	ac 01       	movw	r20, r24
    3576:	c5 01       	movw	r24, r10
    3578:	b4 01       	movw	r22, r8
    357a:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    357e:	6d 83       	std	Y+5, r22	; 0x05
    3580:	7e 83       	std	Y+6, r23	; 0x06
    3582:	8f 83       	std	Y+7, r24	; 0x07
    3584:	98 87       	std	Y+8, r25	; 0x08
      x += three * q[k];
    3586:	a3 2c       	mov	r10, r3
    3588:	b1 2c       	mov	r11, r1
    358a:	aa 0c       	add	r10, r10
    358c:	bb 1c       	adc	r11, r11
    358e:	aa 0c       	add	r10, r10
    3590:	bb 1c       	adc	r11, r11
    3592:	95 01       	movw	r18, r10
    3594:	2b 58       	subi	r18, 0x8B	; 139
    3596:	3d 4f       	sbci	r19, 0xFD	; 253
    3598:	d9 01       	movw	r26, r18
    359a:	8d 91       	ld	r24, X+
    359c:	9d 91       	ld	r25, X+
    359e:	0d 90       	ld	r0, X+
    35a0:	bc 91       	ld	r27, X
    35a2:	a0 2d       	mov	r26, r0
    35a4:	8d 8f       	std	Y+29, r24	; 0x1d
    35a6:	9e 8f       	std	Y+30, r25	; 0x1e
    35a8:	af 8f       	std	Y+31, r26	; 0x1f
    35aa:	b8 a3       	std	Y+32, r27	; 0x20
    35ac:	2d 81       	ldd	r18, Y+5	; 0x05
    35ae:	3e 81       	ldd	r19, Y+6	; 0x06
    35b0:	4f 81       	ldd	r20, Y+7	; 0x07
    35b2:	58 85       	ldd	r21, Y+8	; 0x08
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    35bc:	9b 01       	movw	r18, r22
    35be:	ac 01       	movw	r20, r24
    35c0:	69 a1       	ldd	r22, Y+33	; 0x21
    35c2:	7a a1       	ldd	r23, Y+34	; 0x22
    35c4:	8b a1       	ldd	r24, Y+35	; 0x23
    35c6:	9c a1       	ldd	r25, Y+36	; 0x24
    35c8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    35cc:	69 a3       	std	Y+33, r22	; 0x21
    35ce:	7a a3       	std	Y+34, r23	; 0x22
    35d0:	8b a3       	std	Y+35, r24	; 0x23
    35d2:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    35d4:	f5 01       	movw	r30, r10
    35d6:	e3 5c       	subi	r30, 0xC3	; 195
    35d8:	fc 4f       	sbci	r31, 0xFC	; 252
    35da:	80 80       	ld	r8, Z
    35dc:	91 80       	ldd	r9, Z+1	; 0x01
    35de:	a2 80       	ldd	r10, Z+2	; 0x02
    35e0:	b3 80       	ldd	r11, Z+3	; 0x03
    35e2:	2d 81       	ldd	r18, Y+5	; 0x05
    35e4:	3e 81       	ldd	r19, Y+6	; 0x06
    35e6:	4f 81       	ldd	r20, Y+7	; 0x07
    35e8:	58 85       	ldd	r21, Y+8	; 0x08
    35ea:	c5 01       	movw	r24, r10
    35ec:	b4 01       	movw	r22, r8
    35ee:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    35f2:	9b 01       	movw	r18, r22
    35f4:	ac 01       	movw	r20, r24
    35f6:	6d a1       	ldd	r22, Y+37	; 0x25
    35f8:	7e a1       	ldd	r23, Y+38	; 0x26
    35fa:	8f a1       	ldd	r24, Y+39	; 0x27
    35fc:	98 a5       	ldd	r25, Y+40	; 0x28
    35fe:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    3602:	6d a3       	std	Y+37, r22	; 0x25
    3604:	7e a3       	std	Y+38, r23	; 0x26
    3606:	8f a3       	std	Y+39, r24	; 0x27
    3608:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	a9 01       	movw	r20, r18
    3610:	6d 89       	ldd	r22, Y+21	; 0x15
    3612:	7e 89       	ldd	r23, Y+22	; 0x16
    3614:	8f 89       	ldd	r24, Y+23	; 0x17
    3616:	98 8d       	ldd	r25, Y+24	; 0x18
    3618:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    361c:	18 16       	cp	r1, r24
    361e:	0c f0       	brlt	.+2      	; 0x3622 <igrf+0xb40>
    3620:	54 c0       	rjmp	.+168    	; 0x36ca <igrf+0xbe8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    3622:	a3 01       	movw	r20, r6
    3624:	92 01       	movw	r18, r4
    3626:	69 81       	ldd	r22, Y+1	; 0x01
    3628:	7a 81       	ldd	r23, Y+2	; 0x02
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	9c 81       	ldd	r25, Y+4	; 0x04
    362e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3632:	2b 01       	movw	r4, r22
    3634:	3c 01       	movw	r6, r24
    3636:	a7 01       	movw	r20, r14
    3638:	96 01       	movw	r18, r12
    363a:	6d 85       	ldd	r22, Y+13	; 0x0d
    363c:	7e 85       	ldd	r23, Y+14	; 0x0e
    363e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3640:	98 89       	ldd	r25, Y+16	; 0x10
    3642:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3646:	9b 01       	movw	r18, r22
    3648:	ac 01       	movw	r20, r24
    364a:	c3 01       	movw	r24, r6
    364c:	b2 01       	movw	r22, r4
    364e:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    3652:	6b 01       	movw	r12, r22
    3654:	7c 01       	movw	r14, r24
    3656:	b8 01       	movw	r22, r16
    3658:	11 0f       	add	r17, r17
    365a:	88 0b       	sbc	r24, r24
    365c:	99 0b       	sbc	r25, r25
    365e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3662:	9b 01       	movw	r18, r22
    3664:	ac 01       	movw	r20, r24
    3666:	c7 01       	movw	r24, r14
    3668:	b6 01       	movw	r22, r12
    366a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    366e:	9b 01       	movw	r18, r22
    3670:	ac 01       	movw	r20, r24
    3672:	c5 01       	movw	r24, r10
    3674:	b4 01       	movw	r22, r8
    3676:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    367a:	6b 01       	movw	r12, r22
    367c:	7c 01       	movw	r14, r24
    367e:	bd a5       	ldd	r27, Y+45	; 0x2d
    3680:	6b 2f       	mov	r22, r27
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3698:	2d 89       	ldd	r18, Y+21	; 0x15
    369a:	3e 89       	ldd	r19, Y+22	; 0x16
    369c:	4f 89       	ldd	r20, Y+23	; 0x17
    369e:	58 8d       	ldd	r21, Y+24	; 0x18
    36a0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    36a4:	9b 01       	movw	r18, r22
    36a6:	ac 01       	movw	r20, r24
    36a8:	c7 01       	movw	r24, r14
    36aa:	b6 01       	movw	r22, r12
    36ac:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    36b0:	9b 01       	movw	r18, r22
    36b2:	ac 01       	movw	r20, r24
    36b4:	6f a9       	ldd	r22, Y+55	; 0x37
    36b6:	78 ad       	ldd	r23, Y+56	; 0x38
    36b8:	89 ad       	ldd	r24, Y+57	; 0x39
    36ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    36bc:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    36c0:	6f ab       	std	Y+55, r22	; 0x37
    36c2:	78 af       	std	Y+56, r23	; 0x38
    36c4:	89 af       	std	Y+57, r24	; 0x39
    36c6:	9a af       	std	Y+58, r25	; 0x3a
    36c8:	32 c0       	rjmp	.+100    	; 0x372e <igrf+0xc4c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    36ca:	a3 01       	movw	r20, r6
    36cc:	92 01       	movw	r18, r4
    36ce:	69 81       	ldd	r22, Y+1	; 0x01
    36d0:	7a 81       	ldd	r23, Y+2	; 0x02
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	9c 81       	ldd	r25, Y+4	; 0x04
    36d6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    36da:	4b 01       	movw	r8, r22
    36dc:	5c 01       	movw	r10, r24
    36de:	a7 01       	movw	r20, r14
    36e0:	96 01       	movw	r18, r12
    36e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    36e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    36e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e8:	98 89       	ldd	r25, Y+16	; 0x10
    36ea:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    36ee:	9b 01       	movw	r18, r22
    36f0:	ac 01       	movw	r20, r24
    36f2:	c5 01       	movw	r24, r10
    36f4:	b4 01       	movw	r22, r8
    36f6:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    36fa:	9b 01       	movw	r18, r22
    36fc:	ac 01       	movw	r20, r24
    36fe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3700:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3702:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3704:	98 a1       	ldd	r25, Y+32	; 0x20
    3706:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    370a:	29 8d       	ldd	r18, Y+25	; 0x19
    370c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    370e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3710:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3712:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3716:	9b 01       	movw	r18, r22
    3718:	ac 01       	movw	r20, r24
    371a:	6f a9       	ldd	r22, Y+55	; 0x37
    371c:	78 ad       	ldd	r23, Y+56	; 0x38
    371e:	89 ad       	ldd	r24, Y+57	; 0x39
    3720:	9a ad       	ldd	r25, Y+58	; 0x3a
    3722:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3726:	6f ab       	std	Y+55, r22	; 0x37
    3728:	78 af       	std	Y+56, r23	; 0x38
    372a:	89 af       	std	Y+57, r24	; 0x39
    372c:	9a af       	std	Y+58, r25	; 0x3a
        
      l += 2;
    372e:	e9 89       	ldd	r30, Y+17	; 0x11
    3730:	ee 5f       	subi	r30, 0xFE	; 254
    3732:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    3734:	23 94       	inc	r2
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    3736:	33 94       	inc	r3
    3738:	fe a9       	ldd	r31, Y+54	; 0x36
    373a:	f3 15       	cp	r31, r3
    373c:	08 f0       	brcs	.+2      	; 0x3740 <igrf+0xc5e>
    373e:	24 cc       	rjmp	.-1976   	; 0x2f88 <igrf+0x4a6>
    3740:	0c c0       	rjmp	.+24     	; 0x375a <igrf+0xc78>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    3742:	1d a2       	std	Y+37, r1	; 0x25
    3744:	1e a2       	std	Y+38, r1	; 0x26
    3746:	1f a2       	std	Y+39, r1	; 0x27
    3748:	18 a6       	std	Y+40, r1	; 0x28
    374a:	1f aa       	std	Y+55, r1	; 0x37
    374c:	18 ae       	std	Y+56, r1	; 0x38
    374e:	19 ae       	std	Y+57, r1	; 0x39
    3750:	1a ae       	std	Y+58, r1	; 0x3a
    3752:	19 a2       	std	Y+33, r1	; 0x21
    3754:	1a a2       	std	Y+34, r1	; 0x22
    3756:	1b a2       	std	Y+35, r1	; 0x23
    3758:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    375a:	23 96       	adiw	r28, 0x03	; 3
    375c:	2c ad       	ldd	r18, Y+60	; 0x3c
    375e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3760:	4e ad       	ldd	r20, Y+62	; 0x3e
    3762:	5f ad       	ldd	r21, Y+63	; 0x3f
    3764:	23 97       	sbiw	r28, 0x03	; 3
    3766:	6d a1       	ldd	r22, Y+37	; 0x25
    3768:	7e a1       	ldd	r23, Y+38	; 0x26
    376a:	8f a1       	ldd	r24, Y+39	; 0x27
    376c:	98 a5       	ldd	r25, Y+40	; 0x28
    376e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3772:	6b 01       	movw	r12, r22
    3774:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    3776:	23 96       	adiw	r28, 0x03	; 3
    3778:	2c ad       	ldd	r18, Y+60	; 0x3c
    377a:	3d ad       	ldd	r19, Y+61	; 0x3d
    377c:	4e ad       	ldd	r20, Y+62	; 0x3e
    377e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3780:	23 97       	sbiw	r28, 0x03	; 3
    3782:	69 a1       	ldd	r22, Y+33	; 0x21
    3784:	7a a1       	ldd	r23, Y+34	; 0x22
    3786:	8b a1       	ldd	r24, Y+35	; 0x23
    3788:	9c a1       	ldd	r25, Y+36	; 0x24
    378a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    378e:	4b 01       	movw	r8, r22
    3790:	5c 01       	movw	r10, r24
    3792:	27 96       	adiw	r28, 0x07	; 7
    3794:	2c ad       	ldd	r18, Y+60	; 0x3c
    3796:	3d ad       	ldd	r19, Y+61	; 0x3d
    3798:	4e ad       	ldd	r20, Y+62	; 0x3e
    379a:	5f ad       	ldd	r21, Y+63	; 0x3f
    379c:	27 97       	sbiw	r28, 0x07	; 7
    379e:	6d a1       	ldd	r22, Y+37	; 0x25
    37a0:	7e a1       	ldd	r23, Y+38	; 0x26
    37a2:	8f a1       	ldd	r24, Y+39	; 0x27
    37a4:	98 a5       	ldd	r25, Y+40	; 0x28
    37a6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    37aa:	9b 01       	movw	r18, r22
    37ac:	ac 01       	movw	r20, r24
    37ae:	c5 01       	movw	r24, r10
    37b0:	b4 01       	movw	r22, r8
    37b2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    37b6:	29 96       	adiw	r28, 0x09	; 9
    37b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    37ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    37bc:	29 97       	sbiw	r28, 0x09	; 9
    37be:	6d 93       	st	X+, r22
    37c0:	7d 93       	st	X+, r23
    37c2:	8d 93       	st	X+, r24
    37c4:	9c 93       	st	X, r25
    37c6:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    37c8:	8f a9       	ldd	r24, Y+55	; 0x37
    37ca:	98 ad       	ldd	r25, Y+56	; 0x38
    37cc:	a9 ad       	ldd	r26, Y+57	; 0x39
    37ce:	ba ad       	ldd	r27, Y+58	; 0x3a
    37d0:	29 96       	adiw	r28, 0x09	; 9
    37d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    37d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    37d6:	29 97       	sbiw	r28, 0x09	; 9
    37d8:	84 83       	std	Z+4, r24	; 0x04
    37da:	95 83       	std	Z+5, r25	; 0x05
    37dc:	a6 83       	std	Z+6, r26	; 0x06
    37de:	b7 83       	std	Z+7, r27	; 0x07
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    37e0:	29 a1       	ldd	r18, Y+33	; 0x21
    37e2:	3a a1       	ldd	r19, Y+34	; 0x22
    37e4:	4b a1       	ldd	r20, Y+35	; 0x23
    37e6:	5c a1       	ldd	r21, Y+36	; 0x24
    37e8:	27 96       	adiw	r28, 0x07	; 7
    37ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    37ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    37ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    37f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    37f2:	27 97       	sbiw	r28, 0x07	; 7
    37f4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	c7 01       	movw	r24, r14
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    3804:	29 96       	adiw	r28, 0x09	; 9
    3806:	ae ad       	ldd	r26, Y+62	; 0x3e
    3808:	bf ad       	ldd	r27, Y+63	; 0x3f
    380a:	29 97       	sbiw	r28, 0x09	; 9
    380c:	18 96       	adiw	r26, 0x08	; 8
    380e:	6d 93       	st	X+, r22
    3810:	7d 93       	st	X+, r23
    3812:	8d 93       	st	X+, r24
    3814:	9c 93       	st	X, r25
    3816:	1b 97       	sbiw	r26, 0x0b	; 11
     
}
    3818:	c8 5b       	subi	r28, 0xB8	; 184
    381a:	df 4f       	sbci	r29, 0xFF	; 255
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	df 91       	pop	r29
    3828:	cf 91       	pop	r28
    382a:	1f 91       	pop	r17
    382c:	0f 91       	pop	r16
    382e:	ff 90       	pop	r15
    3830:	ef 90       	pop	r14
    3832:	df 90       	pop	r13
    3834:	cf 90       	pop	r12
    3836:	bf 90       	pop	r11
    3838:	af 90       	pop	r10
    383a:	9f 90       	pop	r9
    383c:	8f 90       	pop	r8
    383e:	7f 90       	pop	r7
    3840:	6f 90       	pop	r6
    3842:	5f 90       	pop	r5
    3844:	4f 90       	pop	r4
    3846:	3f 90       	pop	r3
    3848:	2f 90       	pop	r2
    384a:	08 95       	ret

0000384c <init_UART_MM>:
#include "uart.h"
uint8_t mag_count = 0;
uint8_t mag_data[7];
volatile static int16_t x, y, z;
void init_UART_MM(void )
{
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29

  UCSR1A = 0;
    3850:	cb e9       	ldi	r28, 0x9B	; 155
    3852:	d0 e0       	ldi	r29, 0x00	; 0
    3854:	18 82       	st	Y, r1
  UCSR1B = 0;
    3856:	aa e9       	ldi	r26, 0x9A	; 154
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	1c 92       	st	X, r1
  UCSR1C = 0;
    385c:	ed e9       	ldi	r30, 0x9D	; 157
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    3862:	88 81       	ld	r24, Y
    3864:	82 60       	ori	r24, 0x02	; 2
    3866:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    3868:	8c 91       	ld	r24, X
    386a:	88 69       	ori	r24, 0x98	; 152
    386c:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |=_BV(USBS1) | _BV(UCSZ11) | _BV(UCSZ10);
    386e:	80 81       	ld	r24, Z
    3870:	8e 60       	ori	r24, 0x0E	; 14
    3872:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    3874:	87 e6       	ldi	r24, 0x67	; 103
    3876:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  UBRR1H = 0;
    387a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
}
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	08 95       	ret

00003884 <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    3884:	8f 92       	push	r8
    3886:	9f 92       	push	r9
    3888:	af 92       	push	r10
    388a:	bf 92       	push	r11
    388c:	cf 92       	push	r12
    388e:	df 92       	push	r13
    3890:	ef 92       	push	r14
    3892:	ff 92       	push	r15
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
  uint8_t tmp;
  
  ///Send the poll command
 // send_MM_cmd("*00P\r");
  uint8_t c= 80;
  init_UART0();
    389c:	0e 94 9e 2c 	call	0x593c	; 0x593c <init_UART0>
  transmit_UART0(c);
    38a0:	80 e5       	ldi	r24, 0x50	; 80
    38a2:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
  //receive_UART0();
  xp = ((int16_t)receive_UART0()) << 8;
    38a6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38aa:	c8 2e       	mov	r12, r24
    38ac:	d1 2c       	mov	r13, r1
    38ae:	dc 2c       	mov	r13, r12
    38b0:	cc 24       	eor	r12, r12
  uint8_t xp1_sen = xp>>8;
  xp &= 0xFF00;
  xp |= (int16_t)receive_UART0();
    38b2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38b6:	76 01       	movw	r14, r12
    38b8:	e8 2a       	or	r14, r24
  uint8_t xp2_sen = xp;
  
  yp = ((int16_t)receive_UART0()) << 8;
    38ba:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38be:	08 2f       	mov	r16, r24
    38c0:	10 e0       	ldi	r17, 0x00	; 0
    38c2:	10 2f       	mov	r17, r16
    38c4:	00 27       	eor	r16, r16
  uint8_t yp1_sen = yp>>8;
  yp &= 0xFF00;
  yp |= (int16_t)receive_UART0();
    38c6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38ca:	58 01       	movw	r10, r16
    38cc:	a8 2a       	or	r10, r24
  uint8_t yp2_sen = yp;
  
  zp = ((int16_t)receive_UART0()) << 8;
    38ce:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38d2:	c8 2f       	mov	r28, r24
    38d4:	d0 e0       	ldi	r29, 0x00	; 0
    38d6:	dc 2f       	mov	r29, r28
    38d8:	cc 27       	eor	r28, r28
  uint8_t zp1_sen = zp>>8;
  zp &= 0xFF00;
  zp |= (int16_t)receive_UART0();
    38da:	0e 94 b3 2c 	call	0x5966	; 0x5966 <receive_UART0>
    38de:	4e 01       	movw	r8, r28
    38e0:	88 2a       	or	r8, r24
  uint8_t zp2_sen = zp;
  
  transmit_UART0(xp1_sen);
    38e2:	8d 2d       	mov	r24, r13
    38e4:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    38e8:	8f ec       	ldi	r24, 0xCF	; 207
    38ea:	97 e0       	ldi	r25, 0x07	; 7
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <poll_MM1+0x68>
    38f0:	00 c0       	rjmp	.+0      	; 0x38f2 <poll_MM1+0x6e>
    38f2:	00 00       	nop
  _delay_ms(1);
  transmit_UART0(xp2_sen);
    38f4:	8e 2d       	mov	r24, r14
    38f6:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    38fa:	8f ec       	ldi	r24, 0xCF	; 207
    38fc:	97 e0       	ldi	r25, 0x07	; 7
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <poll_MM1+0x7a>
    3902:	00 c0       	rjmp	.+0      	; 0x3904 <poll_MM1+0x80>
    3904:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(yp1_sen);
    3906:	81 2f       	mov	r24, r17
    3908:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    390c:	8f ec       	ldi	r24, 0xCF	; 207
    390e:	97 e0       	ldi	r25, 0x07	; 7
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <poll_MM1+0x8c>
    3914:	00 c0       	rjmp	.+0      	; 0x3916 <poll_MM1+0x92>
    3916:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(yp2_sen);
    3918:	8a 2d       	mov	r24, r10
    391a:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    391e:	8f ec       	ldi	r24, 0xCF	; 207
    3920:	97 e0       	ldi	r25, 0x07	; 7
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	f1 f7       	brne	.-4      	; 0x3922 <poll_MM1+0x9e>
    3926:	00 c0       	rjmp	.+0      	; 0x3928 <poll_MM1+0xa4>
    3928:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(zp1_sen);
    392a:	8d 2f       	mov	r24, r29
    392c:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
    3930:	8f ec       	ldi	r24, 0xCF	; 207
    3932:	97 e0       	ldi	r25, 0x07	; 7
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <poll_MM1+0xb0>
    3938:	00 c0       	rjmp	.+0      	; 0x393a <poll_MM1+0xb6>
    393a:	00 00       	nop
   _delay_ms(1);
  transmit_UART0(zp2_sen);
    393c:	88 2d       	mov	r24, r8
    393e:	0e 94 af 2c 	call	0x595e	; 0x595e <transmit_UART0>
  
  //receive_MM();
  

  ///Convert the readings to Gauss
  Current_state.mm.B_x = ((float) xp) / 15000;
    3942:	b7 01       	movw	r22, r14
    3944:	ff 0c       	add	r15, r15
    3946:	88 0b       	sbc	r24, r24
    3948:	99 0b       	sbc	r25, r25
    394a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e6       	ldi	r19, 0x60	; 96
    3952:	4a e6       	ldi	r20, 0x6A	; 106
    3954:	56 e4       	ldi	r21, 0x46	; 70
    3956:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    395a:	60 93 00 05 	sts	0x0500, r22	; 0x800500 <Current_state+0x55>
    395e:	70 93 01 05 	sts	0x0501, r23	; 0x800501 <Current_state+0x56>
    3962:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <Current_state+0x57>
    3966:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <Current_state+0x58>
  Current_state.mm.B_y = ((float) yp) / 15000;
    396a:	b5 01       	movw	r22, r10
    396c:	bb 0c       	add	r11, r11
    396e:	88 0b       	sbc	r24, r24
    3970:	99 0b       	sbc	r25, r25
    3972:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e6       	ldi	r19, 0x60	; 96
    397a:	4a e6       	ldi	r20, 0x6A	; 106
    397c:	56 e4       	ldi	r21, 0x46	; 70
    397e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3982:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <Current_state+0x59>
    3986:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <Current_state+0x5a>
    398a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Current_state+0x5b>
    398e:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <Current_state+0x5c>
  Current_state.mm.B_z = ((float) zp) / 15000;
    3992:	b4 01       	movw	r22, r8
    3994:	99 0c       	add	r9, r9
    3996:	88 0b       	sbc	r24, r24
    3998:	99 0b       	sbc	r25, r25
    399a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e6       	ldi	r19, 0x60	; 96
    39a2:	4a e6       	ldi	r20, 0x6A	; 106
    39a4:	56 e4       	ldi	r21, 0x46	; 70
    39a6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    39aa:	60 93 08 05 	sts	0x0508, r22	; 0x800508 <Current_state+0x5d>
    39ae:	70 93 09 05 	sts	0x0509, r23	; 0x800509 <Current_state+0x5e>
    39b2:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <Current_state+0x5f>
    39b6:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <Current_state+0x60>
}
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	ff 90       	pop	r15
    39c4:	ef 90       	pop	r14
    39c6:	df 90       	pop	r13
    39c8:	cf 90       	pop	r12
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	08 95       	ret

000039d4 <__vector_30>:

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
    39d4:	1f 92       	push	r1
    39d6:	0f 92       	push	r0
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	0f 92       	push	r0
    39dc:	11 24       	eor	r1, r1
    39de:	0b b6       	in	r0, 0x3b	; 59
    39e0:	0f 92       	push	r0
    39e2:	2f 93       	push	r18
    39e4:	3f 93       	push	r19
    39e6:	4f 93       	push	r20
    39e8:	5f 93       	push	r21
    39ea:	6f 93       	push	r22
    39ec:	7f 93       	push	r23
    39ee:	8f 93       	push	r24
    39f0:	9f 93       	push	r25
    39f2:	af 93       	push	r26
    39f4:	bf 93       	push	r27
    39f6:	ef 93       	push	r30
    39f8:	ff 93       	push	r31
	
	mag_data[mag_count] = UDR1;
    39fa:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <mag_count>
    39fe:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    3a02:	e8 2f       	mov	r30, r24
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	e8 56       	subi	r30, 0x68	; 104
    3a08:	fb 4f       	sbci	r31, 0xFB	; 251
    3a0a:	90 83       	st	Z, r25
	mag_count++;
    3a0c:	8f 5f       	subi	r24, 0xFF	; 255
	if (mag_count == 7)
    3a0e:	87 30       	cpi	r24, 0x07	; 7
    3a10:	19 f0       	breq	.+6      	; 0x3a18 <__vector_30+0x44>

ISR(USART1_RX_vect)//ISR for Magmeter UART
{
	
	mag_data[mag_count] = UDR1;
	mag_count++;
    3a12:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <mag_count>
    3a16:	9d c0       	rjmp	.+314    	; 0x3b52 <__vector_30+0x17e>
	if (mag_count == 7)
	{
		mag_count = 0;
    3a18:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <mag_count>
		x = ((int16_t)mag_data[0])<<8;
    3a1c:	e8 e9       	ldi	r30, 0x98	; 152
    3a1e:	f4 e0       	ldi	r31, 0x04	; 4
    3a20:	80 81       	ld	r24, Z
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	98 2f       	mov	r25, r24
    3a26:	88 27       	eor	r24, r24
    3a28:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a2c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x &= 0xFF00;
    3a30:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3a34:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3a38:	88 27       	eor	r24, r24
    3a3a:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a3e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		x |= (int16_t)mag_data[1];
    3a42:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <x>
    3a46:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <x+0x1>
    3a4a:	21 81       	ldd	r18, Z+1	; 0x01
    3a4c:	82 2b       	or	r24, r18
    3a4e:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <x+0x1>
    3a52:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <x>
		
		
		y = ((int16_t)mag_data[2]) << 8;
    3a56:	82 81       	ldd	r24, Z+2	; 0x02
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	98 2f       	mov	r25, r24
    3a5c:	88 27       	eor	r24, r24
    3a5e:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a62:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y &= 0xFF00;
    3a66:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3a6a:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3a6e:	88 27       	eor	r24, r24
    3a70:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a74:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		y |= (int16_t)mag_data[3];
    3a78:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <y>
    3a7c:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <y+0x1>
    3a80:	23 81       	ldd	r18, Z+3	; 0x03
    3a82:	82 2b       	or	r24, r18
    3a84:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <y+0x1>
    3a88:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <y>
		
		z = ((int16_t)mag_data[4]) << 8;
    3a8c:	84 81       	ldd	r24, Z+4	; 0x04
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	98 2f       	mov	r25, r24
    3a92:	88 27       	eor	r24, r24
    3a94:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3a98:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z &= 0xFF00;
    3a9c:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3aa0:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3aa4:	88 27       	eor	r24, r24
    3aa6:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3aaa:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		z |= (int16_t)mag_data[5];
    3aae:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <z>
    3ab2:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <z+0x1>
    3ab6:	25 81       	ldd	r18, Z+5	; 0x05
    3ab8:	82 2b       	or	r24, r18
    3aba:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <z+0x1>
    3abe:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <z>
		
		///Convert the readings to Gauss
		Current_state.mm.B_x = ((float) x) / 15000;
    3ac2:	60 91 09 04 	lds	r22, 0x0409	; 0x800409 <x>
    3ac6:	70 91 0a 04 	lds	r23, 0x040A	; 0x80040a <x+0x1>
    3aca:	07 2e       	mov	r0, r23
    3acc:	00 0c       	add	r0, r0
    3ace:	88 0b       	sbc	r24, r24
    3ad0:	99 0b       	sbc	r25, r25
    3ad2:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e6       	ldi	r19, 0x60	; 96
    3ada:	4a e6       	ldi	r20, 0x6A	; 106
    3adc:	56 e4       	ldi	r21, 0x46	; 70
    3ade:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3ae2:	60 93 00 05 	sts	0x0500, r22	; 0x800500 <Current_state+0x55>
    3ae6:	70 93 01 05 	sts	0x0501, r23	; 0x800501 <Current_state+0x56>
    3aea:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <Current_state+0x57>
    3aee:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <Current_state+0x58>
		Current_state.mm.B_y = ((float) y) / 15000;
    3af2:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <y>
    3af6:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <y+0x1>
    3afa:	07 2e       	mov	r0, r23
    3afc:	00 0c       	add	r0, r0
    3afe:	88 0b       	sbc	r24, r24
    3b00:	99 0b       	sbc	r25, r25
    3b02:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e6       	ldi	r19, 0x60	; 96
    3b0a:	4a e6       	ldi	r20, 0x6A	; 106
    3b0c:	56 e4       	ldi	r21, 0x46	; 70
    3b0e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3b12:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <Current_state+0x59>
    3b16:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <Current_state+0x5a>
    3b1a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Current_state+0x5b>
    3b1e:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <Current_state+0x5c>
		Current_state.mm.B_z = ((float) z) / 15000;
    3b22:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <z>
    3b26:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <z+0x1>
    3b2a:	07 2e       	mov	r0, r23
    3b2c:	00 0c       	add	r0, r0
    3b2e:	88 0b       	sbc	r24, r24
    3b30:	99 0b       	sbc	r25, r25
    3b32:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e6       	ldi	r19, 0x60	; 96
    3b3a:	4a e6       	ldi	r20, 0x6A	; 106
    3b3c:	56 e4       	ldi	r21, 0x46	; 70
    3b3e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    3b42:	60 93 08 05 	sts	0x0508, r22	; 0x800508 <Current_state+0x5d>
    3b46:	70 93 09 05 	sts	0x0509, r23	; 0x800509 <Current_state+0x5e>
    3b4a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <Current_state+0x5f>
    3b4e:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <Current_state+0x60>
	}
}
    3b52:	ff 91       	pop	r31
    3b54:	ef 91       	pop	r30
    3b56:	bf 91       	pop	r27
    3b58:	af 91       	pop	r26
    3b5a:	9f 91       	pop	r25
    3b5c:	8f 91       	pop	r24
    3b5e:	7f 91       	pop	r23
    3b60:	6f 91       	pop	r22
    3b62:	5f 91       	pop	r21
    3b64:	4f 91       	pop	r20
    3b66:	3f 91       	pop	r19
    3b68:	2f 91       	pop	r18
    3b6a:	0f 90       	pop	r0
    3b6c:	0b be       	out	0x3b, r0	; 59
    3b6e:	0f 90       	pop	r0
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	0f 90       	pop	r0
    3b74:	1f 90       	pop	r1
    3b76:	18 95       	reti

00003b78 <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3b78:	dc 01       	movw	r26, r24
    3b7a:	fb 01       	movw	r30, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3b7c:	4d 91       	ld	r20, X+
    3b7e:	5d 91       	ld	r21, X+
    3b80:	6d 91       	ld	r22, X+
    3b82:	7c 91       	ld	r23, X
    3b84:	13 97       	sbiw	r26, 0x03	; 3
    3b86:	40 83       	st	Z, r20
    3b88:	51 83       	std	Z+1, r21	; 0x01
    3b8a:	62 83       	std	Z+2, r22	; 0x02
    3b8c:	73 83       	std	Z+3, r23	; 0x03
    3b8e:	14 96       	adiw	r26, 0x04	; 4
    3b90:	4d 91       	ld	r20, X+
    3b92:	5d 91       	ld	r21, X+
    3b94:	6d 91       	ld	r22, X+
    3b96:	7c 91       	ld	r23, X
    3b98:	17 97       	sbiw	r26, 0x07	; 7
    3b9a:	44 83       	std	Z+4, r20	; 0x04
    3b9c:	55 83       	std	Z+5, r21	; 0x05
    3b9e:	66 83       	std	Z+6, r22	; 0x06
    3ba0:	77 83       	std	Z+7, r23	; 0x07
    3ba2:	18 96       	adiw	r26, 0x08	; 8
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9d 91       	ld	r25, X+
    3ba8:	0d 90       	ld	r0, X+
    3baa:	bc 91       	ld	r27, X
    3bac:	a0 2d       	mov	r26, r0
    3bae:	80 87       	std	Z+8, r24	; 0x08
    3bb0:	91 87       	std	Z+9, r25	; 0x09
    3bb2:	a2 87       	std	Z+10, r26	; 0x0a
    3bb4:	b3 87       	std	Z+11, r27	; 0x0b
    3bb6:	08 95       	ret

00003bb8 <copy_quaternion>:
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3bb8:	fc 01       	movw	r30, r24
    3bba:	a6 2f       	mov	r26, r22
    3bbc:	b7 2f       	mov	r27, r23
    3bbe:	40 96       	adiw	r24, 0x10	; 16
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    3bc0:	41 91       	ld	r20, Z+
    3bc2:	51 91       	ld	r21, Z+
    3bc4:	61 91       	ld	r22, Z+
    3bc6:	71 91       	ld	r23, Z+
    3bc8:	4d 93       	st	X+, r20
    3bca:	5d 93       	st	X+, r21
    3bcc:	6d 93       	st	X+, r22
    3bce:	7d 93       	st	X+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3bd0:	e8 17       	cp	r30, r24
    3bd2:	f9 07       	cpc	r31, r25
    3bd4:	a9 f7       	brne	.-22     	; 0x3bc0 <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3bd6:	08 95       	ret

00003bd8 <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3bd8:	4f 92       	push	r4
    3bda:	5f 92       	push	r5
    3bdc:	6f 92       	push	r6
    3bde:	7f 92       	push	r7
    3be0:	8f 92       	push	r8
    3be2:	9f 92       	push	r9
    3be4:	af 92       	push	r10
    3be6:	bf 92       	push	r11
    3be8:	cf 92       	push	r12
    3bea:	df 92       	push	r13
    3bec:	ef 92       	push	r14
    3bee:	ff 92       	push	r15
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <vector_norm+0x1e>
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <vector_norm+0x20>
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3bfe:	80 80       	ld	r8, Z
    3c00:	91 80       	ldd	r9, Z+1	; 0x01
    3c02:	a2 80       	ldd	r10, Z+2	; 0x02
    3c04:	b3 80       	ldd	r11, Z+3	; 0x03
    3c06:	c4 80       	ldd	r12, Z+4	; 0x04
    3c08:	d5 80       	ldd	r13, Z+5	; 0x05
    3c0a:	e6 80       	ldd	r14, Z+6	; 0x06
    3c0c:	f7 80       	ldd	r15, Z+7	; 0x07
    3c0e:	40 84       	ldd	r4, Z+8	; 0x08
    3c10:	51 84       	ldd	r5, Z+9	; 0x09
    3c12:	62 84       	ldd	r6, Z+10	; 0x0a
    3c14:	73 84       	ldd	r7, Z+11	; 0x0b
    3c16:	a5 01       	movw	r20, r10
    3c18:	94 01       	movw	r18, r8
    3c1a:	c5 01       	movw	r24, r10
    3c1c:	b4 01       	movw	r22, r8
    3c1e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3c22:	69 83       	std	Y+1, r22	; 0x01
    3c24:	7a 83       	std	Y+2, r23	; 0x02
    3c26:	8b 83       	std	Y+3, r24	; 0x03
    3c28:	9c 83       	std	Y+4, r25	; 0x04
    3c2a:	a7 01       	movw	r20, r14
    3c2c:	96 01       	movw	r18, r12
    3c2e:	c7 01       	movw	r24, r14
    3c30:	b6 01       	movw	r22, r12
    3c32:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3c36:	9b 01       	movw	r18, r22
    3c38:	ac 01       	movw	r20, r24
    3c3a:	69 81       	ldd	r22, Y+1	; 0x01
    3c3c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c40:	9c 81       	ldd	r25, Y+4	; 0x04
    3c42:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3c46:	69 83       	std	Y+1, r22	; 0x01
    3c48:	7a 83       	std	Y+2, r23	; 0x02
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	a5 01       	movw	r20, r10
    3c50:	94 01       	movw	r18, r8
    3c52:	c5 01       	movw	r24, r10
    3c54:	b4 01       	movw	r22, r8
    3c56:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3c5a:	4b 01       	movw	r8, r22
    3c5c:	5c 01       	movw	r10, r24
    3c5e:	a7 01       	movw	r20, r14
    3c60:	96 01       	movw	r18, r12
    3c62:	c7 01       	movw	r24, r14
    3c64:	b6 01       	movw	r22, r12
    3c66:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3c6a:	9b 01       	movw	r18, r22
    3c6c:	ac 01       	movw	r20, r24
    3c6e:	c5 01       	movw	r24, r10
    3c70:	b4 01       	movw	r22, r8
    3c72:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3c76:	6b 01       	movw	r12, r22
    3c78:	7c 01       	movw	r14, r24
    3c7a:	a3 01       	movw	r20, r6
    3c7c:	92 01       	movw	r18, r4
    3c7e:	c3 01       	movw	r24, r6
    3c80:	b2 01       	movw	r22, r4
    3c82:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3c86:	9b 01       	movw	r18, r22
    3c88:	ac 01       	movw	r20, r24
    3c8a:	c7 01       	movw	r24, r14
    3c8c:	b6 01       	movw	r22, r12
    3c8e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3c92:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
}
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	df 91       	pop	r29
    3ca0:	cf 91       	pop	r28
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	df 90       	pop	r13
    3ca8:	cf 90       	pop	r12
    3caa:	bf 90       	pop	r11
    3cac:	af 90       	pop	r10
    3cae:	9f 90       	pop	r9
    3cb0:	8f 90       	pop	r8
    3cb2:	7f 90       	pop	r7
    3cb4:	6f 90       	pop	r6
    3cb6:	5f 90       	pop	r5
    3cb8:	4f 90       	pop	r4
    3cba:	08 95       	ret

00003cbc <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3cbc:	4f 92       	push	r4
    3cbe:	5f 92       	push	r5
    3cc0:	6f 92       	push	r6
    3cc2:	7f 92       	push	r7
    3cc4:	8f 92       	push	r8
    3cc6:	9f 92       	push	r9
    3cc8:	af 92       	push	r10
    3cca:	bf 92       	push	r11
    3ccc:	cf 92       	push	r12
    3cce:	df 92       	push	r13
    3cd0:	ef 92       	push	r14
    3cd2:	ff 92       	push	r15
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	28 97       	sbiw	r28, 0x08	; 8
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	9c 01       	movw	r18, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3cea:	dc 01       	movw	r26, r24
    3cec:	8d 90       	ld	r8, X+
    3cee:	9d 90       	ld	r9, X+
    3cf0:	ad 90       	ld	r10, X+
    3cf2:	bc 90       	ld	r11, X
    3cf4:	13 97       	sbiw	r26, 0x03	; 3
    3cf6:	14 96       	adiw	r26, 0x04	; 4
    3cf8:	cd 90       	ld	r12, X+
    3cfa:	dd 90       	ld	r13, X+
    3cfc:	ed 90       	ld	r14, X+
    3cfe:	fc 90       	ld	r15, X
    3d00:	17 97       	sbiw	r26, 0x07	; 7
    3d02:	18 96       	adiw	r26, 0x08	; 8
    3d04:	8d 91       	ld	r24, X+
    3d06:	9d 91       	ld	r25, X+
    3d08:	0d 90       	ld	r0, X+
    3d0a:	bc 91       	ld	r27, X
    3d0c:	a0 2d       	mov	r26, r0
    3d0e:	8d 83       	std	Y+5, r24	; 0x05
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	af 83       	std	Y+7, r26	; 0x07
    3d14:	b8 87       	std	Y+8, r27	; 0x08
    3d16:	f9 01       	movw	r30, r18
    3d18:	44 84       	ldd	r4, Z+12	; 0x0c
    3d1a:	55 84       	ldd	r5, Z+13	; 0x0d
    3d1c:	66 84       	ldd	r6, Z+14	; 0x0e
    3d1e:	77 84       	ldd	r7, Z+15	; 0x0f
    3d20:	a5 01       	movw	r20, r10
    3d22:	94 01       	movw	r18, r8
    3d24:	c5 01       	movw	r24, r10
    3d26:	b4 01       	movw	r22, r8
    3d28:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3d2c:	69 83       	std	Y+1, r22	; 0x01
    3d2e:	7a 83       	std	Y+2, r23	; 0x02
    3d30:	8b 83       	std	Y+3, r24	; 0x03
    3d32:	9c 83       	std	Y+4, r25	; 0x04
    3d34:	a7 01       	movw	r20, r14
    3d36:	96 01       	movw	r18, r12
    3d38:	c7 01       	movw	r24, r14
    3d3a:	b6 01       	movw	r22, r12
    3d3c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3d40:	9b 01       	movw	r18, r22
    3d42:	ac 01       	movw	r20, r24
    3d44:	69 81       	ldd	r22, Y+1	; 0x01
    3d46:	7a 81       	ldd	r23, Y+2	; 0x02
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3d50:	69 83       	std	Y+1, r22	; 0x01
    3d52:	7a 83       	std	Y+2, r23	; 0x02
    3d54:	8b 83       	std	Y+3, r24	; 0x03
    3d56:	9c 83       	std	Y+4, r25	; 0x04
    3d58:	2d 81       	ldd	r18, Y+5	; 0x05
    3d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    3d5c:	4f 81       	ldd	r20, Y+7	; 0x07
    3d5e:	58 85       	ldd	r21, Y+8	; 0x08
    3d60:	ca 01       	movw	r24, r20
    3d62:	b9 01       	movw	r22, r18
    3d64:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3d68:	9b 01       	movw	r18, r22
    3d6a:	ac 01       	movw	r20, r24
    3d6c:	69 81       	ldd	r22, Y+1	; 0x01
    3d6e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3d78:	69 83       	std	Y+1, r22	; 0x01
    3d7a:	7a 83       	std	Y+2, r23	; 0x02
    3d7c:	8b 83       	std	Y+3, r24	; 0x03
    3d7e:	9c 83       	std	Y+4, r25	; 0x04
    3d80:	a5 01       	movw	r20, r10
    3d82:	94 01       	movw	r18, r8
    3d84:	c5 01       	movw	r24, r10
    3d86:	b4 01       	movw	r22, r8
    3d88:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3d8c:	4b 01       	movw	r8, r22
    3d8e:	5c 01       	movw	r10, r24
    3d90:	a7 01       	movw	r20, r14
    3d92:	96 01       	movw	r18, r12
    3d94:	c7 01       	movw	r24, r14
    3d96:	b6 01       	movw	r22, r12
    3d98:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3d9c:	9b 01       	movw	r18, r22
    3d9e:	ac 01       	movw	r20, r24
    3da0:	c5 01       	movw	r24, r10
    3da2:	b4 01       	movw	r22, r8
    3da4:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3da8:	6b 01       	movw	r12, r22
    3daa:	7c 01       	movw	r14, r24
    3dac:	2d 81       	ldd	r18, Y+5	; 0x05
    3dae:	3e 81       	ldd	r19, Y+6	; 0x06
    3db0:	4f 81       	ldd	r20, Y+7	; 0x07
    3db2:	58 85       	ldd	r21, Y+8	; 0x08
    3db4:	ca 01       	movw	r24, r20
    3db6:	b9 01       	movw	r22, r18
    3db8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3dbc:	9b 01       	movw	r18, r22
    3dbe:	ac 01       	movw	r20, r24
    3dc0:	c7 01       	movw	r24, r14
    3dc2:	b6 01       	movw	r22, r12
    3dc4:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3dc8:	6b 01       	movw	r12, r22
    3dca:	7c 01       	movw	r14, r24
    3dcc:	a3 01       	movw	r20, r6
    3dce:	92 01       	movw	r18, r4
    3dd0:	c3 01       	movw	r24, r6
    3dd2:	b2 01       	movw	r22, r4
    3dd4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3dd8:	9b 01       	movw	r18, r22
    3dda:	ac 01       	movw	r20, r24
    3ddc:	c7 01       	movw	r24, r14
    3dde:	b6 01       	movw	r22, r12
    3de0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3de4:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
}
    3de8:	28 96       	adiw	r28, 0x08	; 8
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	ff 90       	pop	r15
    3dfa:	ef 90       	pop	r14
    3dfc:	df 90       	pop	r13
    3dfe:	cf 90       	pop	r12
    3e00:	bf 90       	pop	r11
    3e02:	af 90       	pop	r10
    3e04:	9f 90       	pop	r9
    3e06:	8f 90       	pop	r8
    3e08:	7f 90       	pop	r7
    3e0a:	6f 90       	pop	r6
    3e0c:	5f 90       	pop	r5
    3e0e:	4f 90       	pop	r4
    3e10:	08 95       	ret

00003e12 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3e12:	cf 92       	push	r12
    3e14:	df 92       	push	r13
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	ec 01       	movw	r28, r24
    3e24:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3e26:	fb 01       	movw	r30, r22
    3e28:	20 81       	ld	r18, Z
    3e2a:	31 81       	ldd	r19, Z+1	; 0x01
    3e2c:	42 81       	ldd	r20, Z+2	; 0x02
    3e2e:	53 81       	ldd	r21, Z+3	; 0x03
    3e30:	68 81       	ld	r22, Y
    3e32:	79 81       	ldd	r23, Y+1	; 0x01
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	9b 81       	ldd	r25, Y+3	; 0x03
    3e38:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3e3c:	6b 01       	movw	r12, r22
    3e3e:	7c 01       	movw	r14, r24
    3e40:	f8 01       	movw	r30, r16
    3e42:	24 81       	ldd	r18, Z+4	; 0x04
    3e44:	35 81       	ldd	r19, Z+5	; 0x05
    3e46:	46 81       	ldd	r20, Z+6	; 0x06
    3e48:	57 81       	ldd	r21, Z+7	; 0x07
    3e4a:	6c 81       	ldd	r22, Y+4	; 0x04
    3e4c:	7d 81       	ldd	r23, Y+5	; 0x05
    3e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e50:	9f 81       	ldd	r25, Y+7	; 0x07
    3e52:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3e56:	9b 01       	movw	r18, r22
    3e58:	ac 01       	movw	r20, r24
    3e5a:	c7 01       	movw	r24, r14
    3e5c:	b6 01       	movw	r22, r12
    3e5e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3e62:	6b 01       	movw	r12, r22
    3e64:	7c 01       	movw	r14, r24
    3e66:	f8 01       	movw	r30, r16
    3e68:	20 85       	ldd	r18, Z+8	; 0x08
    3e6a:	31 85       	ldd	r19, Z+9	; 0x09
    3e6c:	42 85       	ldd	r20, Z+10	; 0x0a
    3e6e:	53 85       	ldd	r21, Z+11	; 0x0b
    3e70:	68 85       	ldd	r22, Y+8	; 0x08
    3e72:	79 85       	ldd	r23, Y+9	; 0x09
    3e74:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e76:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e78:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3e7c:	9b 01       	movw	r18, r22
    3e7e:	ac 01       	movw	r20, r24
    3e80:	c7 01       	movw	r24, r14
    3e82:	b6 01       	movw	r22, r12
    3e84:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
}
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	df 90       	pop	r13
    3e96:	cf 90       	pop	r12
    3e98:	08 95       	ret

00003e9a <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3e9a:	cf 92       	push	r12
    3e9c:	df 92       	push	r13
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	ec 01       	movw	r28, r24
    3eac:	e6 2e       	mov	r14, r22
    3eae:	f7 2e       	mov	r15, r23
    3eb0:	04 2f       	mov	r16, r20
    3eb2:	15 2f       	mov	r17, r21
    3eb4:	6c 01       	movw	r12, r24
    3eb6:	2c e0       	ldi	r18, 0x0C	; 12
    3eb8:	c2 0e       	add	r12, r18
    3eba:	d1 1c       	adc	r13, r1
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_res[i] = v_a[i] + v_b[i];
    3ebc:	69 91       	ld	r22, Y+
    3ebe:	79 91       	ld	r23, Y+
    3ec0:	89 91       	ld	r24, Y+
    3ec2:	99 91       	ld	r25, Y+
    3ec4:	f7 01       	movw	r30, r14
    3ec6:	21 91       	ld	r18, Z+
    3ec8:	31 91       	ld	r19, Z+
    3eca:	41 91       	ld	r20, Z+
    3ecc:	51 91       	ld	r21, Z+
    3ece:	7f 01       	movw	r14, r30
    3ed0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	61 93       	st	Z+, r22
    3ed8:	71 93       	st	Z+, r23
    3eda:	81 93       	st	Z+, r24
    3edc:	91 93       	st	Z+, r25
    3ede:	8f 01       	movw	r16, r30
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3ee0:	cc 15       	cp	r28, r12
    3ee2:	dd 05       	cpc	r29, r13
    3ee4:	59 f7       	brne	.-42     	; 0x3ebc <add_vectors+0x22>
    v_res[i] = v_a[i] + v_b[i];
}
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	ff 90       	pop	r15
    3ef0:	ef 90       	pop	r14
    3ef2:	df 90       	pop	r13
    3ef4:	cf 90       	pop	r12
    3ef6:	08 95       	ret

00003ef8 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3ef8:	4f 92       	push	r4
    3efa:	5f 92       	push	r5
    3efc:	6f 92       	push	r6
    3efe:	7f 92       	push	r7
    3f00:	8f 92       	push	r8
    3f02:	9f 92       	push	r9
    3f04:	af 92       	push	r10
    3f06:	bf 92       	push	r11
    3f08:	cf 92       	push	r12
    3f0a:	df 92       	push	r13
    3f0c:	ef 92       	push	r14
    3f0e:	ff 92       	push	r15
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	6a 01       	movw	r12, r20
    3f1a:	86 2e       	mov	r8, r22
    3f1c:	97 2e       	mov	r9, r23
    3f1e:	3a 01       	movw	r6, r20
    3f20:	2c e0       	ldi	r18, 0x0C	; 12
    3f22:	62 0e       	add	r6, r18
    3f24:	71 1c       	adc	r7, r1
    3f26:	48 2e       	mov	r4, r24
    3f28:	59 2e       	mov	r5, r25
    3f2a:	5c 01       	movw	r10, r24
    3f2c:	ec e0       	ldi	r30, 0x0C	; 12
    3f2e:	ae 0e       	add	r10, r30
    3f30:	b1 1c       	adc	r11, r1
    3f32:	76 01       	movw	r14, r12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3f34:	f6 01       	movw	r30, r12
    3f36:	10 82       	st	Z, r1
    3f38:	11 82       	std	Z+1, r1	; 0x01
    3f3a:	12 82       	std	Z+2, r1	; 0x02
    3f3c:	13 82       	std	Z+3, r1	; 0x03
    3f3e:	c4 2d       	mov	r28, r4
    3f40:	d5 2d       	mov	r29, r5
    3f42:	84 01       	movw	r16, r8
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    3f44:	69 91       	ld	r22, Y+
    3f46:	79 91       	ld	r23, Y+
    3f48:	89 91       	ld	r24, Y+
    3f4a:	99 91       	ld	r25, Y+
    3f4c:	f8 01       	movw	r30, r16
    3f4e:	20 81       	ld	r18, Z
    3f50:	31 81       	ldd	r19, Z+1	; 0x01
    3f52:	42 81       	ldd	r20, Z+2	; 0x02
    3f54:	53 81       	ldd	r21, Z+3	; 0x03
    3f56:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3f5a:	9b 01       	movw	r18, r22
    3f5c:	ac 01       	movw	r20, r24
    3f5e:	f7 01       	movw	r30, r14
    3f60:	60 81       	ld	r22, Z
    3f62:	71 81       	ldd	r23, Z+1	; 0x01
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	93 81       	ldd	r25, Z+3	; 0x03
    3f68:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    3f6c:	f7 01       	movw	r30, r14
    3f6e:	60 83       	st	Z, r22
    3f70:	71 83       	std	Z+1, r23	; 0x01
    3f72:	82 83       	std	Z+2, r24	; 0x02
    3f74:	93 83       	std	Z+3, r25	; 0x03
    3f76:	04 5f       	subi	r16, 0xF4	; 244
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3f7a:	ca 15       	cp	r28, r10
    3f7c:	db 05       	cpc	r29, r11
    3f7e:	11 f7       	brne	.-60     	; 0x3f44 <vector_into_matrix+0x4c>
    3f80:	f4 e0       	ldi	r31, 0x04	; 4
    3f82:	cf 0e       	add	r12, r31
    3f84:	d1 1c       	adc	r13, r1
    3f86:	24 e0       	ldi	r18, 0x04	; 4
    3f88:	82 0e       	add	r8, r18
    3f8a:	91 1c       	adc	r9, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3f8c:	c6 14       	cp	r12, r6
    3f8e:	d7 04       	cpc	r13, r7
    3f90:	81 f6       	brne	.-96     	; 0x3f32 <vector_into_matrix+0x3a>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	df 90       	pop	r13
    3fa0:	cf 90       	pop	r12
    3fa2:	bf 90       	pop	r11
    3fa4:	af 90       	pop	r10
    3fa6:	9f 90       	pop	r9
    3fa8:	8f 90       	pop	r8
    3faa:	7f 90       	pop	r7
    3fac:	6f 90       	pop	r6
    3fae:	5f 90       	pop	r5
    3fb0:	4f 90       	pop	r4
    3fb2:	08 95       	ret

00003fb4 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3fb4:	8f 92       	push	r8
    3fb6:	9f 92       	push	r9
    3fb8:	af 92       	push	r10
    3fba:	bf 92       	push	r11
    3fbc:	ef 92       	push	r14
    3fbe:	ff 92       	push	r15
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
    3fc8:	ec 01       	movw	r28, r24
    3fca:	8b 01       	movw	r16, r22
    3fcc:	7a 01       	movw	r14, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3fce:	fb 01       	movw	r30, r22
    3fd0:	20 85       	ldd	r18, Z+8	; 0x08
    3fd2:	31 85       	ldd	r19, Z+9	; 0x09
    3fd4:	42 85       	ldd	r20, Z+10	; 0x0a
    3fd6:	53 85       	ldd	r21, Z+11	; 0x0b
    3fd8:	6c 81       	ldd	r22, Y+4	; 0x04
    3fda:	7d 81       	ldd	r23, Y+5	; 0x05
    3fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    3fde:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3fe4:	4b 01       	movw	r8, r22
    3fe6:	5c 01       	movw	r10, r24
    3fe8:	f8 01       	movw	r30, r16
    3fea:	24 81       	ldd	r18, Z+4	; 0x04
    3fec:	35 81       	ldd	r19, Z+5	; 0x05
    3fee:	46 81       	ldd	r20, Z+6	; 0x06
    3ff0:	57 81       	ldd	r21, Z+7	; 0x07
    3ff2:	68 85       	ldd	r22, Y+8	; 0x08
    3ff4:	79 85       	ldd	r23, Y+9	; 0x09
    3ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ffa:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    3ffe:	9b 01       	movw	r18, r22
    4000:	ac 01       	movw	r20, r24
    4002:	c5 01       	movw	r24, r10
    4004:	b4 01       	movw	r22, r8
    4006:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    400a:	f7 01       	movw	r30, r14
    400c:	60 83       	st	Z, r22
    400e:	71 83       	std	Z+1, r23	; 0x01
    4010:	82 83       	std	Z+2, r24	; 0x02
    4012:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    4014:	f8 01       	movw	r30, r16
    4016:	20 81       	ld	r18, Z
    4018:	31 81       	ldd	r19, Z+1	; 0x01
    401a:	42 81       	ldd	r20, Z+2	; 0x02
    401c:	53 81       	ldd	r21, Z+3	; 0x03
    401e:	68 85       	ldd	r22, Y+8	; 0x08
    4020:	79 85       	ldd	r23, Y+9	; 0x09
    4022:	8a 85       	ldd	r24, Y+10	; 0x0a
    4024:	9b 85       	ldd	r25, Y+11	; 0x0b
    4026:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    402a:	4b 01       	movw	r8, r22
    402c:	5c 01       	movw	r10, r24
    402e:	f8 01       	movw	r30, r16
    4030:	20 85       	ldd	r18, Z+8	; 0x08
    4032:	31 85       	ldd	r19, Z+9	; 0x09
    4034:	42 85       	ldd	r20, Z+10	; 0x0a
    4036:	53 85       	ldd	r21, Z+11	; 0x0b
    4038:	68 81       	ld	r22, Y
    403a:	79 81       	ldd	r23, Y+1	; 0x01
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	9b 81       	ldd	r25, Y+3	; 0x03
    4040:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4044:	9b 01       	movw	r18, r22
    4046:	ac 01       	movw	r20, r24
    4048:	c5 01       	movw	r24, r10
    404a:	b4 01       	movw	r22, r8
    404c:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    4050:	f7 01       	movw	r30, r14
    4052:	64 83       	std	Z+4, r22	; 0x04
    4054:	75 83       	std	Z+5, r23	; 0x05
    4056:	86 83       	std	Z+6, r24	; 0x06
    4058:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    405a:	f8 01       	movw	r30, r16
    405c:	24 81       	ldd	r18, Z+4	; 0x04
    405e:	35 81       	ldd	r19, Z+5	; 0x05
    4060:	46 81       	ldd	r20, Z+6	; 0x06
    4062:	57 81       	ldd	r21, Z+7	; 0x07
    4064:	68 81       	ld	r22, Y
    4066:	79 81       	ldd	r23, Y+1	; 0x01
    4068:	8a 81       	ldd	r24, Y+2	; 0x02
    406a:	9b 81       	ldd	r25, Y+3	; 0x03
    406c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4070:	4b 01       	movw	r8, r22
    4072:	5c 01       	movw	r10, r24
    4074:	f8 01       	movw	r30, r16
    4076:	20 81       	ld	r18, Z
    4078:	31 81       	ldd	r19, Z+1	; 0x01
    407a:	42 81       	ldd	r20, Z+2	; 0x02
    407c:	53 81       	ldd	r21, Z+3	; 0x03
    407e:	6c 81       	ldd	r22, Y+4	; 0x04
    4080:	7d 81       	ldd	r23, Y+5	; 0x05
    4082:	8e 81       	ldd	r24, Y+6	; 0x06
    4084:	9f 81       	ldd	r25, Y+7	; 0x07
    4086:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    408a:	9b 01       	movw	r18, r22
    408c:	ac 01       	movw	r20, r24
    408e:	c5 01       	movw	r24, r10
    4090:	b4 01       	movw	r22, r8
    4092:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    4096:	f7 01       	movw	r30, r14
    4098:	60 87       	std	Z+8, r22	; 0x08
    409a:	71 87       	std	Z+9, r23	; 0x09
    409c:	82 87       	std	Z+10, r24	; 0x0a
    409e:	93 87       	std	Z+11, r25	; 0x0b
}
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	1f 91       	pop	r17
    40a6:	0f 91       	pop	r16
    40a8:	ff 90       	pop	r15
    40aa:	ef 90       	pop	r14
    40ac:	bf 90       	pop	r11
    40ae:	af 90       	pop	r10
    40b0:	9f 90       	pop	r9
    40b2:	8f 90       	pop	r8
    40b4:	08 95       	ret

000040b6 <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    40b6:	cf 92       	push	r12
    40b8:	df 92       	push	r13
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	ec 01       	movw	r28, r24
    40c4:	6a 01       	movw	r12, r20
    40c6:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    40c8:	9a 01       	movw	r18, r20
    40ca:	ab 01       	movw	r20, r22
    40cc:	68 81       	ld	r22, Y
    40ce:	79 81       	ldd	r23, Y+1	; 0x01
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    40d8:	68 83       	st	Y, r22
    40da:	79 83       	std	Y+1, r23	; 0x01
    40dc:	8a 83       	std	Y+2, r24	; 0x02
    40de:	9b 83       	std	Y+3, r25	; 0x03
    40e0:	a7 01       	movw	r20, r14
    40e2:	96 01       	movw	r18, r12
    40e4:	6c 81       	ldd	r22, Y+4	; 0x04
    40e6:	7d 81       	ldd	r23, Y+5	; 0x05
    40e8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ea:	9f 81       	ldd	r25, Y+7	; 0x07
    40ec:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    40f0:	6c 83       	std	Y+4, r22	; 0x04
    40f2:	7d 83       	std	Y+5, r23	; 0x05
    40f4:	8e 83       	std	Y+6, r24	; 0x06
    40f6:	9f 83       	std	Y+7, r25	; 0x07
    40f8:	a7 01       	movw	r20, r14
    40fa:	96 01       	movw	r18, r12
    40fc:	68 85       	ldd	r22, Y+8	; 0x08
    40fe:	79 85       	ldd	r23, Y+9	; 0x09
    4100:	8a 85       	ldd	r24, Y+10	; 0x0a
    4102:	9b 85       	ldd	r25, Y+11	; 0x0b
    4104:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4108:	68 87       	std	Y+8, r22	; 0x08
    410a:	79 87       	std	Y+9, r23	; 0x09
    410c:	8a 87       	std	Y+10, r24	; 0x0a
    410e:	9b 87       	std	Y+11, r25	; 0x0b
}
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	ff 90       	pop	r15
    4116:	ef 90       	pop	r14
    4118:	df 90       	pop	r13
    411a:	cf 90       	pop	r12
    411c:	08 95       	ret

0000411e <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    411e:	cf 92       	push	r12
    4120:	df 92       	push	r13
    4122:	ef 92       	push	r14
    4124:	ff 92       	push	r15
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
    412a:	cf 93       	push	r28
    412c:	df 93       	push	r29
    412e:	6a 01       	movw	r12, r20
    4130:	7b 01       	movw	r14, r22
    4132:	ec 01       	movw	r28, r24
    4134:	8c 01       	movw	r16, r24
    4136:	00 5f       	subi	r16, 0xF0	; 240
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i;
  for(i = 0; i < 4; i++)
    q[i] = q[i] * s;
    413a:	a7 01       	movw	r20, r14
    413c:	96 01       	movw	r18, r12
    413e:	68 81       	ld	r22, Y
    4140:	79 81       	ldd	r23, Y+1	; 0x01
    4142:	8a 81       	ldd	r24, Y+2	; 0x02
    4144:	9b 81       	ldd	r25, Y+3	; 0x03
    4146:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    414a:	69 93       	st	Y+, r22
    414c:	79 93       	st	Y+, r23
    414e:	89 93       	st	Y+, r24
    4150:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    4152:	c0 17       	cp	r28, r16
    4154:	d1 07       	cpc	r29, r17
    4156:	89 f7       	brne	.-30     	; 0x413a <scalar_into_quaternion+0x1c>
    q[i] = q[i] * s;
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	ff 90       	pop	r15
    4162:	ef 90       	pop	r14
    4164:	df 90       	pop	r13
    4166:	cf 90       	pop	r12
    4168:	08 95       	ret

0000416a <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    416a:	cf 92       	push	r12
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    4178:	2f dd       	rcall	.-1442   	; 0x3bd8 <vector_norm>
    417a:	6b 01       	movw	r12, r22
    417c:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    417e:	9b 01       	movw	r18, r22
    4180:	ac 01       	movw	r20, r24
    4182:	68 81       	ld	r22, Y
    4184:	79 81       	ldd	r23, Y+1	; 0x01
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	9b 81       	ldd	r25, Y+3	; 0x03
    418a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    418e:	68 83       	st	Y, r22
    4190:	79 83       	std	Y+1, r23	; 0x01
    4192:	8a 83       	std	Y+2, r24	; 0x02
    4194:	9b 83       	std	Y+3, r25	; 0x03
    4196:	a7 01       	movw	r20, r14
    4198:	96 01       	movw	r18, r12
    419a:	6c 81       	ldd	r22, Y+4	; 0x04
    419c:	7d 81       	ldd	r23, Y+5	; 0x05
    419e:	8e 81       	ldd	r24, Y+6	; 0x06
    41a0:	9f 81       	ldd	r25, Y+7	; 0x07
    41a2:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    41a6:	6c 83       	std	Y+4, r22	; 0x04
    41a8:	7d 83       	std	Y+5, r23	; 0x05
    41aa:	8e 83       	std	Y+6, r24	; 0x06
    41ac:	9f 83       	std	Y+7, r25	; 0x07
    41ae:	a7 01       	movw	r20, r14
    41b0:	96 01       	movw	r18, r12
    41b2:	68 85       	ldd	r22, Y+8	; 0x08
    41b4:	79 85       	ldd	r23, Y+9	; 0x09
    41b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    41b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    41ba:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    41be:	68 87       	std	Y+8, r22	; 0x08
    41c0:	79 87       	std	Y+9, r23	; 0x09
    41c2:	8a 87       	std	Y+10, r24	; 0x0a
    41c4:	9b 87       	std	Y+11, r25	; 0x0b
}
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	ff 90       	pop	r15
    41cc:	ef 90       	pop	r14
    41ce:	df 90       	pop	r13
    41d0:	cf 90       	pop	r12
    41d2:	08 95       	ret

000041d4 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    41d4:	cf 92       	push	r12
    41d6:	df 92       	push	r13
    41d8:	ef 92       	push	r14
    41da:	ff 92       	push	r15
    41dc:	0f 93       	push	r16
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	8c 01       	movw	r16, r24
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    41e6:	6a dd       	rcall	.-1324   	; 0x3cbc <quaternion_norm>
    41e8:	6b 01       	movw	r12, r22
    41ea:	7c 01       	movw	r14, r24
    41ec:	e8 01       	movw	r28, r16
    41ee:	00 5f       	subi	r16, 0xF0	; 240
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
  
  for(i = 0; i < 4; i++)
    q[i] = q[i] / norm;
    41f2:	a7 01       	movw	r20, r14
    41f4:	96 01       	movw	r18, r12
    41f6:	68 81       	ld	r22, Y
    41f8:	79 81       	ldd	r23, Y+1	; 0x01
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	9b 81       	ldd	r25, Y+3	; 0x03
    41fe:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4202:	69 93       	st	Y+, r22
    4204:	79 93       	st	Y+, r23
    4206:	89 93       	st	Y+, r24
    4208:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    420a:	c0 17       	cp	r28, r16
    420c:	d1 07       	cpc	r29, r17
    420e:	89 f7       	brne	.-30     	; 0x41f2 <convert_unit_quaternion+0x1e>
    q[i] = q[i] / norm;
}
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	ff 90       	pop	r15
    421a:	ef 90       	pop	r14
    421c:	df 90       	pop	r13
    421e:	cf 90       	pop	r12
    4220:	08 95       	ret

00004222 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    4222:	57 9a       	sbi	0x0a, 7	; 10
    4224:	08 95       	ret

00004226 <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS1();// make this poll_ss()
    4226:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <poll_SS1>
    422a:	08 95       	ret

0000422c <read_MM>:
void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
 // poll_MM(); //for uart 1
  poll_MM1();// for uart0
    422c:	2b cb       	rjmp	.-2474   	; 0x3884 <poll_MM1>
    422e:	08 95       	ret

00004230 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    4230:	84 b3       	in	r24, 0x14	; 20
    4232:	88 63       	ori	r24, 0x38	; 56
    4234:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    4236:	82 b1       	in	r24, 0x02	; 2
    4238:	88 63       	ori	r24, 0x38	; 56
    423a:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    423c:	ab e8       	ldi	r26, 0x8B	; 139
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	1c 92       	st	X, r1
  TCCR3B = 0;
    4242:	ea e8       	ldi	r30, 0x8A	; 138
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	10 82       	st	Z, r1
  TCCR3C = 0;
    4248:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    424c:	8c 91       	ld	r24, X
    424e:	8a 6a       	ori	r24, 0xAA	; 170
    4250:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    4252:	80 81       	ld	r24, Z
    4254:	81 61       	ori	r24, 0x11	; 17
    4256:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    4258:	8f ef       	ldi	r24, 0xFF	; 255
    425a:	9f ef       	ldi	r25, 0xFF	; 255
    425c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    4260:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3A = 0x0000;
    4264:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    4268:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = 0x0000;
    426c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4270:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = 0x0000;
    4274:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    4278:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    427c:	85 b3       	in	r24, 0x15	; 21
    427e:	87 7c       	andi	r24, 0xC7	; 199
    4280:	85 bb       	out	0x15, r24	; 21
    4282:	08 95       	ret

00004284 <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4284:	85 b3       	in	r24, 0x15	; 21
    4286:	87 7c       	andi	r24, 0xC7	; 199
    4288:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    428a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <Current_state+0x6e>
    428e:	88 23       	and	r24, r24
    4290:	11 f0       	breq	.+4      	; 0x4296 <set_PWM+0x12>
   PORTC |= _BV(PC5);
    4292:	ad 9a       	sbi	0x15, 5	; 21
    4294:	01 c0       	rjmp	.+2      	; 0x4298 <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    4296:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    4298:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <Current_state+0x6f>
    429c:	88 23       	and	r24, r24
    429e:	11 f0       	breq	.+4      	; 0x42a4 <set_PWM+0x20>
   PORTC |= _BV(PC4);
    42a0:	ac 9a       	sbi	0x15, 4	; 21
    42a2:	01 c0       	rjmp	.+2      	; 0x42a6 <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    42a4:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    42a6:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <Current_state+0x70>
    42aa:	88 23       	and	r24, r24
    42ac:	11 f0       	breq	.+4      	; 0x42b2 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    42ae:	ab 9a       	sbi	0x15, 3	; 21
    42b0:	01 c0       	rjmp	.+2      	; 0x42b4 <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    42b2:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    42b4:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <Current_state+0x68>
    42b8:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <Current_state+0x69>
    42bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    42c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = Current_state.pwm.y;
    42c4:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <Current_state+0x6a>
    42c8:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <Current_state+0x6b>
    42cc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    42d0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = Current_state.pwm.z;
    42d4:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <Current_state+0x6c>
    42d8:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <Current_state+0x6d>
    42dc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    42e0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    42e4:	08 95       	ret

000042e6 <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    42e6:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <Current_state+0x69>
    42ea:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <Current_state+0x68>
  Current_state.pwm.y = 0;
    42ee:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <Current_state+0x6b>
    42f2:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <Current_state+0x6a>
  Current_state.pwm.z = 0;
    42f6:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <Current_state+0x6d>
    42fa:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <Current_state+0x6c>
  Current_state.pwm.x_dir = 0;
    42fe:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Current_state+0x6e>
  Current_state.pwm.y_dir = 0;
    4302:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <Current_state+0x6f>
  Current_state.pwm.z_dir = 0;
    4306:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <Current_state+0x70>
  set_PWM();
    430a:	bc cf       	rjmp	.-136    	; 0x4284 <set_PWM>
    430c:	08 95       	ret

0000430e <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    431a:	cb ea       	ldi	r28, 0xAB	; 171
    431c:	d4 e0       	ldi	r29, 0x04	; 4
    431e:	18 aa       	std	Y+48, r1	; 0x30
    4320:	1f a6       	std	Y+47, r1	; 0x2f
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    4322:	68 81       	ld	r22, Y
    4324:	79 81       	ldd	r23, Y+1	; 0x01
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	9b 81       	ldd	r25, Y+3	; 0x03
    432a:	08 e1       	ldi	r16, 0x18	; 24
    432c:	14 e0       	ldi	r17, 0x04	; 4
    432e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	48 ec       	ldi	r20, 0xC8	; 200
    4338:	52 e4       	ldi	r21, 0x42	; 66
    433a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    433e:	d8 01       	movw	r26, r16
    4340:	6d 93       	st	X+, r22
    4342:	7d 93       	st	X+, r23
    4344:	8d 93       	st	X+, r24
    4346:	9c 93       	st	X, r25
    4348:	13 97       	sbiw	r26, 0x03	; 3
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    434a:	6c 81       	ldd	r22, Y+4	; 0x04
    434c:	7d 81       	ldd	r23, Y+5	; 0x05
    434e:	8e 81       	ldd	r24, Y+6	; 0x06
    4350:	9f 81       	ldd	r25, Y+7	; 0x07
    4352:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	48 ec       	ldi	r20, 0xC8	; 200
    435c:	52 e4       	ldi	r21, 0x42	; 66
    435e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4362:	f8 01       	movw	r30, r16
    4364:	64 83       	std	Z+4, r22	; 0x04
    4366:	75 83       	std	Z+5, r23	; 0x05
    4368:	86 83       	std	Z+6, r24	; 0x06
    436a:	97 83       	std	Z+7, r25	; 0x07
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    436c:	68 85       	ldd	r22, Y+8	; 0x08
    436e:	79 85       	ldd	r23, Y+9	; 0x09
    4370:	8a 85       	ldd	r24, Y+10	; 0x0a
    4372:	9b 85       	ldd	r25, Y+11	; 0x0b
    4374:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	48 ec       	ldi	r20, 0xC8	; 200
    437e:	52 e4       	ldi	r21, 0x42	; 66
    4380:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4384:	d8 01       	movw	r26, r16
    4386:	18 96       	adiw	r26, 0x08	; 8
    4388:	6d 93       	st	X+, r22
    438a:	7d 93       	st	X+, r23
    438c:	8d 93       	st	X+, r24
    438e:	9c 93       	st	X, r25
    4390:	1b 97       	sbiw	r26, 0x0b	; 11
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    4392:	6c 85       	ldd	r22, Y+12	; 0x0c
    4394:	7d 85       	ldd	r23, Y+13	; 0x0d
    4396:	8e 85       	ldd	r24, Y+14	; 0x0e
    4398:	9f 85       	ldd	r25, Y+15	; 0x0f
    439a:	0f 2e       	mov	r0, r31
    439c:	fc e0       	ldi	r31, 0x0C	; 12
    439e:	ef 2e       	mov	r14, r31
    43a0:	f4 e0       	ldi	r31, 0x04	; 4
    43a2:	ff 2e       	mov	r15, r31
    43a4:	f0 2d       	mov	r31, r0
    43a6:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a e7       	ldi	r20, 0x7A	; 122
    43b0:	54 e4       	ldi	r21, 0x44	; 68
    43b2:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    43b6:	f7 01       	movw	r30, r14
    43b8:	60 83       	st	Z, r22
    43ba:	71 83       	std	Z+1, r23	; 0x01
    43bc:	82 83       	std	Z+2, r24	; 0x02
    43be:	93 83       	std	Z+3, r25	; 0x03
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    43c0:	68 89       	ldd	r22, Y+16	; 0x10
    43c2:	79 89       	ldd	r23, Y+17	; 0x11
    43c4:	8a 89       	ldd	r24, Y+18	; 0x12
    43c6:	9b 89       	ldd	r25, Y+19	; 0x13
    43c8:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	4a e7       	ldi	r20, 0x7A	; 122
    43d2:	54 e4       	ldi	r21, 0x44	; 68
    43d4:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    43d8:	d7 01       	movw	r26, r14
    43da:	14 96       	adiw	r26, 0x04	; 4
    43dc:	6d 93       	st	X+, r22
    43de:	7d 93       	st	X+, r23
    43e0:	8d 93       	st	X+, r24
    43e2:	9c 93       	st	X, r25
    43e4:	17 97       	sbiw	r26, 0x07	; 7
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    43e6:	6c 89       	ldd	r22, Y+20	; 0x14
    43e8:	7d 89       	ldd	r23, Y+21	; 0x15
    43ea:	8e 89       	ldd	r24, Y+22	; 0x16
    43ec:	9f 89       	ldd	r25, Y+23	; 0x17
    43ee:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	4a e7       	ldi	r20, 0x7A	; 122
    43f8:	54 e4       	ldi	r21, 0x44	; 68
    43fa:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    43fe:	f7 01       	movw	r30, r14
    4400:	60 87       	std	Z+8, r22	; 0x08
    4402:	71 87       	std	Z+9, r23	; 0x09
    4404:	82 87       	std	Z+10, r24	; 0x0a
    4406:	93 87       	std	Z+11, r25	; 0x0b
   
  get_seconds_since_equinox();//check
    4408:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    440c:	e4 e3       	ldi	r30, 0x34	; 52
    440e:	f4 e0       	ldi	r31, 0x04	; 4
    4410:	d8 01       	movw	r26, r16
    4412:	4d 91       	ld	r20, X+
    4414:	5d 91       	ld	r21, X+
    4416:	6d 91       	ld	r22, X+
    4418:	7c 91       	ld	r23, X
    441a:	13 97       	sbiw	r26, 0x03	; 3
    441c:	40 83       	st	Z, r20
    441e:	51 83       	std	Z+1, r21	; 0x01
    4420:	62 83       	std	Z+2, r22	; 0x02
    4422:	73 83       	std	Z+3, r23	; 0x03
  r_ecef_ash[1] = v_r_ecef[1];
    4424:	14 96       	adiw	r26, 0x04	; 4
    4426:	4d 91       	ld	r20, X+
    4428:	5d 91       	ld	r21, X+
    442a:	6d 91       	ld	r22, X+
    442c:	7c 91       	ld	r23, X
    442e:	17 97       	sbiw	r26, 0x07	; 7
    4430:	44 83       	std	Z+4, r20	; 0x04
    4432:	55 83       	std	Z+5, r21	; 0x05
    4434:	66 83       	std	Z+6, r22	; 0x06
    4436:	77 83       	std	Z+7, r23	; 0x07
  r_ecef_ash[2] = v_r_ecef[2];
    4438:	18 96       	adiw	r26, 0x08	; 8
    443a:	4d 91       	ld	r20, X+
    443c:	5d 91       	ld	r21, X+
    443e:	6d 91       	ld	r22, X+
    4440:	7c 91       	ld	r23, X
    4442:	1b 97       	sbiw	r26, 0x0b	; 11
    4444:	40 87       	std	Z+8, r20	; 0x08
    4446:	51 87       	std	Z+9, r21	; 0x09
    4448:	62 87       	std	Z+10, r22	; 0x0a
    444a:	73 87       	std	Z+11, r23	; 0x0b
  ecef2eci(v_r_ecef, v_r);
    444c:	60 e4       	ldi	r22, 0x40	; 64
    444e:	74 e0       	ldi	r23, 0x04	; 4
    4450:	c8 01       	movw	r24, r16
    4452:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    4456:	68 e2       	ldi	r22, 0x28	; 40
    4458:	74 e0       	ldi	r23, 0x04	; 4
    445a:	c7 01       	movw	r24, r14
    445c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4460:	68 8d       	ldd	r22, Y+24	; 0x18
    4462:	79 8d       	ldd	r23, Y+25	; 0x19
    4464:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4466:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4468:	0f e9       	ldi	r16, 0x9F	; 159
    446a:	14 e0       	ldi	r17, 0x04	; 4
    446c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    4470:	20 e8       	ldi	r18, 0x80	; 128
    4472:	36 e9       	ldi	r19, 0x96	; 150
    4474:	48 e1       	ldi	r20, 0x18	; 24
    4476:	5b e4       	ldi	r21, 0x4B	; 75
    4478:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    447c:	25 e3       	ldi	r18, 0x35	; 53
    447e:	3a ef       	ldi	r19, 0xFA	; 250
    4480:	4e e8       	ldi	r20, 0x8E	; 142
    4482:	5c e3       	ldi	r21, 0x3C	; 60
    4484:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4488:	f8 01       	movw	r30, r16
    448a:	60 83       	st	Z, r22
    448c:	71 83       	std	Z+1, r23	; 0x01
    448e:	82 83       	std	Z+2, r24	; 0x02
    4490:	93 83       	std	Z+3, r25	; 0x03
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    4492:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4494:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4496:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4498:	9f 8d       	ldd	r25, Y+31	; 0x1f
    449a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__floatsisf>
    449e:	20 e8       	ldi	r18, 0x80	; 128
    44a0:	36 e9       	ldi	r19, 0x96	; 150
    44a2:	48 e1       	ldi	r20, 0x18	; 24
    44a4:	5b e4       	ldi	r21, 0x4B	; 75
    44a6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    44aa:	25 e3       	ldi	r18, 0x35	; 53
    44ac:	3a ef       	ldi	r19, 0xFA	; 250
    44ae:	4e e8       	ldi	r20, 0x8E	; 142
    44b0:	5c e3       	ldi	r21, 0x3C	; 60
    44b2:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    44b6:	d8 01       	movw	r26, r16
    44b8:	14 96       	adiw	r26, 0x04	; 4
    44ba:	6d 93       	st	X+, r22
    44bc:	7d 93       	st	X+, r23
    44be:	8d 93       	st	X+, r24
    44c0:	9c 93       	st	X, r25
    44c2:	17 97       	sbiw	r26, 0x07	; 7
  
  GPS_done = 0;
    44c4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <GPS_done>
}
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	ff 90       	pop	r15
    44d2:	ef 90       	pop	r14
    44d4:	08 95       	ret

000044d6 <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    44d6:	2f 92       	push	r2
    44d8:	3f 92       	push	r3
    44da:	4f 92       	push	r4
    44dc:	5f 92       	push	r5
    44de:	6f 92       	push	r6
    44e0:	7f 92       	push	r7
    44e2:	8f 92       	push	r8
    44e4:	9f 92       	push	r9
    44e6:	af 92       	push	r10
    44e8:	bf 92       	push	r11
    44ea:	cf 92       	push	r12
    44ec:	df 92       	push	r13
    44ee:	ef 92       	push	r14
    44f0:	ff 92       	push	r15
    44f2:	0f 93       	push	r16
    44f4:	1f 93       	push	r17
    44f6:	cf 93       	push	r28
    44f8:	df 93       	push	r29
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	64 97       	sbiw	r28, 0x14	; 20
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	1c 01       	movw	r2, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    450c:	84 e3       	ldi	r24, 0x34	; 52
    450e:	94 e0       	ldi	r25, 0x04	; 4
    4510:	63 db       	rcall	.-2362   	; 0x3bd8 <vector_norm>
    4512:	2b 01       	movw	r4, r22
    4514:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    4516:	9b 01       	movw	r18, r22
    4518:	ac 01       	movw	r20, r24
    451a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    451e:	9b 01       	movw	r18, r22
    4520:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    4522:	61 eb       	ldi	r22, 0xB1	; 177
    4524:	7a e1       	ldi	r23, 0x1A	; 26
    4526:	86 e7       	ldi	r24, 0x76	; 118
    4528:	91 e5       	ldi	r25, 0x51	; 81
    452a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    452e:	6d 87       	std	Y+13, r22	; 0x0d
    4530:	7e 87       	std	Y+14, r23	; 0x0e
    4532:	8f 87       	std	Y+15, r24	; 0x0f
    4534:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e4       	ldi	r20, 0x40	; 64
    453c:	50 e4       	ldi	r21, 0x40	; 64
    453e:	c3 01       	movw	r24, r6
    4540:	b2 01       	movw	r22, r4
    4542:	0e 94 5e 34 	call	0x68bc	; 0x68bc <pow>
    4546:	6b 01       	movw	r12, r22
    4548:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e8       	ldi	r20, 0x80	; 128
    4550:	50 e4       	ldi	r21, 0x40	; 64
    4552:	c3 01       	movw	r24, r6
    4554:	b2 01       	movw	r22, r4
    4556:	0e 94 5e 34 	call	0x68bc	; 0x68bc <pow>
    455a:	2b 01       	movw	r4, r22
    455c:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    455e:	04 e3       	ldi	r16, 0x34	; 52
    4560:	14 e0       	ldi	r17, 0x04	; 4
    4562:	f8 01       	movw	r30, r16
    4564:	80 84       	ldd	r8, Z+8	; 0x08
    4566:	91 84       	ldd	r9, Z+9	; 0x09
    4568:	a2 84       	ldd	r10, Z+10	; 0x0a
    456a:	b3 84       	ldd	r11, Z+11	; 0x0b
    456c:	a5 01       	movw	r20, r10
    456e:	94 01       	movw	r18, r8
    4570:	c5 01       	movw	r24, r10
    4572:	b4 01       	movw	r22, r8
    4574:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4578:	28 e9       	ldi	r18, 0x98	; 152
    457a:	38 e0       	ldi	r19, 0x08	; 8
    457c:	45 e0       	ldi	r20, 0x05	; 5
    457e:	5c e3       	ldi	r21, 0x3C	; 60
    4580:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4584:	2a ec       	ldi	r18, 0xCA	; 202
    4586:	3e ef       	ldi	r19, 0xFE	; 254
    4588:	43 e1       	ldi	r20, 0x13	; 19
    458a:	56 e5       	ldi	r21, 0x56	; 86
    458c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4590:	a3 01       	movw	r20, r6
    4592:	92 01       	movw	r18, r4
    4594:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4598:	69 8b       	std	Y+17, r22	; 0x11
    459a:	7a 8b       	std	Y+18, r23	; 0x12
    459c:	8b 8b       	std	Y+19, r24	; 0x13
    459e:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e8       	ldi	r20, 0x80	; 128
    45a6:	5f e3       	ldi	r21, 0x3F	; 63
    45a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    45aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    45ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ae:	98 89       	ldd	r25, Y+16	; 0x10
    45b0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    45b4:	29 89       	ldd	r18, Y+17	; 0x11
    45b6:	3a 89       	ldd	r19, Y+18	; 0x12
    45b8:	4b 89       	ldd	r20, Y+19	; 0x13
    45ba:	5c 89       	ldd	r21, Y+20	; 0x14
    45bc:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    45c0:	2b 01       	movw	r4, r22
    45c2:	3c 01       	movw	r6, r24
    45c4:	21 ef       	ldi	r18, 0xF1	; 241
    45c6:	39 e4       	ldi	r19, 0x49	; 73
    45c8:	45 eb       	ldi	r20, 0xB5	; 181
    45ca:	57 ed       	ldi	r21, 0xD7	; 215
    45cc:	f8 01       	movw	r30, r16
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    45da:	a3 01       	movw	r20, r6
    45dc:	92 01       	movw	r18, r4
    45de:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    45e2:	a7 01       	movw	r20, r14
    45e4:	96 01       	movw	r18, r12
    45e6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    45ea:	69 83       	std	Y+1, r22	; 0x01
    45ec:	7a 83       	std	Y+2, r23	; 0x02
    45ee:	8b 83       	std	Y+3, r24	; 0x03
    45f0:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    45f2:	21 ef       	ldi	r18, 0xF1	; 241
    45f4:	39 e4       	ldi	r19, 0x49	; 73
    45f6:	45 eb       	ldi	r20, 0xB5	; 181
    45f8:	57 ed       	ldi	r21, 0xD7	; 215
    45fa:	f8 01       	movw	r30, r16
    45fc:	64 81       	ldd	r22, Z+4	; 0x04
    45fe:	75 81       	ldd	r23, Z+5	; 0x05
    4600:	86 81       	ldd	r24, Z+6	; 0x06
    4602:	97 81       	ldd	r25, Z+7	; 0x07
    4604:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4608:	9b 01       	movw	r18, r22
    460a:	ac 01       	movw	r20, r24
    460c:	c3 01       	movw	r24, r6
    460e:	b2 01       	movw	r22, r4
    4610:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4614:	a7 01       	movw	r20, r14
    4616:	96 01       	movw	r18, r12
    4618:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    461c:	6d 83       	std	Y+5, r22	; 0x05
    461e:	7e 83       	std	Y+6, r23	; 0x06
    4620:	8f 83       	std	Y+7, r24	; 0x07
    4622:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    4624:	21 ef       	ldi	r18, 0xF1	; 241
    4626:	39 e4       	ldi	r19, 0x49	; 73
    4628:	45 eb       	ldi	r20, 0xB5	; 181
    462a:	57 ed       	ldi	r21, 0xD7	; 215
    462c:	c5 01       	movw	r24, r10
    462e:	b4 01       	movw	r22, r8
    4630:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4634:	2b 01       	movw	r4, r22
    4636:	3c 01       	movw	r6, r24
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e4       	ldi	r20, 0x40	; 64
    463e:	50 e4       	ldi	r21, 0x40	; 64
    4640:	6d 85       	ldd	r22, Y+13	; 0x0d
    4642:	7e 85       	ldd	r23, Y+14	; 0x0e
    4644:	8f 85       	ldd	r24, Y+15	; 0x0f
    4646:	98 89       	ldd	r25, Y+16	; 0x10
    4648:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e8       	ldi	r20, 0x80	; 128
    4652:	5f e3       	ldi	r21, 0x3F	; 63
    4654:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4658:	29 89       	ldd	r18, Y+17	; 0x11
    465a:	3a 89       	ldd	r19, Y+18	; 0x12
    465c:	4b 89       	ldd	r20, Y+19	; 0x13
    465e:	5c 89       	ldd	r21, Y+20	; 0x14
    4660:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    4664:	9b 01       	movw	r18, r22
    4666:	ac 01       	movw	r20, r24
    4668:	c3 01       	movw	r24, r6
    466a:	b2 01       	movw	r22, r4
    466c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4670:	a7 01       	movw	r20, r14
    4672:	96 01       	movw	r18, r12
    4674:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4678:	69 87       	std	Y+9, r22	; 0x09
    467a:	7a 87       	std	Y+10, r23	; 0x0a
    467c:	8b 87       	std	Y+11, r24	; 0x0b
    467e:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    4680:	b1 01       	movw	r22, r2
    4682:	ce 01       	movw	r24, r28
    4684:	01 96       	adiw	r24, 0x01	; 1
    4686:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    468a:	64 96       	adiw	r28, 0x14	; 20
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	f8 94       	cli
    4690:	de bf       	out	0x3e, r29	; 62
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	cd bf       	out	0x3d, r28	; 61
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	ff 90       	pop	r15
    46a0:	ef 90       	pop	r14
    46a2:	df 90       	pop	r13
    46a4:	cf 90       	pop	r12
    46a6:	bf 90       	pop	r11
    46a8:	af 90       	pop	r10
    46aa:	9f 90       	pop	r9
    46ac:	8f 90       	pop	r8
    46ae:	7f 90       	pop	r7
    46b0:	6f 90       	pop	r6
    46b2:	5f 90       	pop	r5
    46b4:	4f 90       	pop	r4
    46b6:	3f 90       	pop	r3
    46b8:	2f 90       	pop	r2
    46ba:	08 95       	ret

000046bc <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    46bc:	7f 92       	push	r7
    46be:	8f 92       	push	r8
    46c0:	9f 92       	push	r9
    46c2:	af 92       	push	r10
    46c4:	bf 92       	push	r11
    46c6:	cf 92       	push	r12
    46c8:	df 92       	push	r13
    46ca:	ef 92       	push	r14
    46cc:	ff 92       	push	r15
    46ce:	0f 93       	push	r16
    46d0:	1f 93       	push	r17
    46d2:	cf 93       	push	r28
    46d4:	df 93       	push	r29
    46d6:	cd b7       	in	r28, 0x3d	; 61
    46d8:	de b7       	in	r29, 0x3e	; 62
    46da:	68 97       	sbiw	r28, 0x18	; 24
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	f8 94       	cli
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	cd bf       	out	0x3d, r28	; 61
    46e6:	0f 2e       	mov	r0, r31
    46e8:	fa e0       	ldi	r31, 0x0A	; 10
    46ea:	7f 2e       	mov	r7, r31
    46ec:	f0 2d       	mov	r31, r0
    46ee:	0f 2e       	mov	r0, r31
    46f0:	f4 e3       	ldi	r31, 0x34	; 52
    46f2:	cf 2e       	mov	r12, r31
    46f4:	f4 e0       	ldi	r31, 0x04	; 4
    46f6:	df 2e       	mov	r13, r31
    46f8:	f0 2d       	mov	r31, r0
    46fa:	0f 2e       	mov	r0, r31
    46fc:	f0 e4       	ldi	r31, 0x40	; 64
    46fe:	af 2e       	mov	r10, r31
    4700:	f4 e0       	ldi	r31, 0x04	; 4
    4702:	bf 2e       	mov	r11, r31
    4704:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    4706:	ce 01       	movw	r24, r28
    4708:	01 96       	adiw	r24, 0x01	; 1
    470a:	e5 de       	rcall	.-566    	; 0x44d6 <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    470c:	be 01       	movw	r22, r28
    470e:	63 5f       	subi	r22, 0xF3	; 243
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	88 e2       	ldi	r24, 0x28	; 40
    4714:	94 e0       	ldi	r25, 0x04	; 4
    4716:	30 da       	rcall	.-2976   	; 0x3b78 <copy_vector>
    4718:	ce 01       	movw	r24, r28
    471a:	01 96       	adiw	r24, 0x01	; 1
    471c:	4c 01       	movw	r8, r24
    471e:	0f 2e       	mov	r0, r31
    4720:	f8 e2       	ldi	r31, 0x28	; 40
    4722:	ef 2e       	mov	r14, r31
    4724:	f4 e0       	ldi	r31, 0x04	; 4
    4726:	ff 2e       	mov	r15, r31
    4728:	f0 2d       	mov	r31, r0
    472a:	87 01       	movw	r16, r14
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    472c:	f4 01       	movw	r30, r8
    472e:	61 91       	ld	r22, Z+
    4730:	71 91       	ld	r23, Z+
    4732:	81 91       	ld	r24, Z+
    4734:	91 91       	ld	r25, Z+
    4736:	4f 01       	movw	r8, r30
    4738:	2d ec       	ldi	r18, 0xCD	; 205
    473a:	3c ec       	ldi	r19, 0xCC	; 204
    473c:	4c e4       	ldi	r20, 0x4C	; 76
    473e:	5e e3       	ldi	r21, 0x3E	; 62
    4740:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4744:	9b 01       	movw	r18, r22
    4746:	ac 01       	movw	r20, r24
    4748:	f8 01       	movw	r30, r16
    474a:	60 81       	ld	r22, Z
    474c:	71 81       	ldd	r23, Z+1	; 0x01
    474e:	82 81       	ldd	r24, Z+2	; 0x02
    4750:	93 81       	ldd	r25, Z+3	; 0x03
    4752:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4756:	f8 01       	movw	r30, r16
    4758:	61 93       	st	Z+, r22
    475a:	71 93       	st	Z+, r23
    475c:	81 93       	st	Z+, r24
    475e:	91 93       	st	Z+, r25
    4760:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    4762:	ec 15       	cp	r30, r12
    4764:	fd 05       	cpc	r31, r13
    4766:	11 f7       	brne	.-60     	; 0x472c <sgp_orbit_propagator+0x70>
    4768:	ce 01       	movw	r24, r28
    476a:	0d 96       	adiw	r24, 0x0d	; 13
    476c:	4c 01       	movw	r8, r24
    476e:	85 01       	movw	r16, r10
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4770:	f7 01       	movw	r30, r14
    4772:	61 91       	ld	r22, Z+
    4774:	71 91       	ld	r23, Z+
    4776:	81 91       	ld	r24, Z+
    4778:	91 91       	ld	r25, Z+
    477a:	7f 01       	movw	r14, r30
    477c:	f4 01       	movw	r30, r8
    477e:	21 91       	ld	r18, Z+
    4780:	31 91       	ld	r19, Z+
    4782:	41 91       	ld	r20, Z+
    4784:	51 91       	ld	r21, Z+
    4786:	4f 01       	movw	r8, r30
    4788:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	5f e3       	ldi	r21, 0x3F	; 63
    4794:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4798:	2d ec       	ldi	r18, 0xCD	; 205
    479a:	3c ec       	ldi	r19, 0xCC	; 204
    479c:	4c e4       	ldi	r20, 0x4C	; 76
    479e:	5e e3       	ldi	r21, 0x3E	; 62
    47a0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    47a4:	9b 01       	movw	r18, r22
    47a6:	ac 01       	movw	r20, r24
    47a8:	f8 01       	movw	r30, r16
    47aa:	60 81       	ld	r22, Z
    47ac:	71 81       	ldd	r23, Z+1	; 0x01
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	93 81       	ldd	r25, Z+3	; 0x03
    47b2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    47b6:	f8 01       	movw	r30, r16
    47b8:	61 93       	st	Z+, r22
    47ba:	71 93       	st	Z+, r23
    47bc:	81 93       	st	Z+, r24
    47be:	91 93       	st	Z+, r25
    47c0:	8f 01       	movw	r16, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    47c2:	ec 14       	cp	r14, r12
    47c4:	fd 04       	cpc	r15, r13
    47c6:	a1 f6       	brne	.-88     	; 0x4770 <sgp_orbit_propagator+0xb4>
    47c8:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    47ca:	71 10       	cpse	r7, r1
    47cc:	9c cf       	rjmp	.-200    	; 0x4706 <sgp_orbit_propagator+0x4a>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    47ce:	68 96       	adiw	r28, 0x18	; 24
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	df 90       	pop	r13
    47e8:	cf 90       	pop	r12
    47ea:	bf 90       	pop	r11
    47ec:	af 90       	pop	r10
    47ee:	9f 90       	pop	r9
    47f0:	8f 90       	pop	r8
    47f2:	7f 90       	pop	r7
    47f4:	08 95       	ret

000047f6 <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    47f6:	4f 92       	push	r4
    47f8:	5f 92       	push	r5
    47fa:	6f 92       	push	r6
    47fc:	7f 92       	push	r7
    47fe:	8f 92       	push	r8
    4800:	9f 92       	push	r9
    4802:	af 92       	push	r10
    4804:	bf 92       	push	r11
    4806:	cf 92       	push	r12
    4808:	df 92       	push	r13
    480a:	ef 92       	push	r14
    480c:	ff 92       	push	r15
    480e:	0f 93       	push	r16
    4810:	1f 93       	push	r17
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	cd b7       	in	r28, 0x3d	; 61
    4818:	de b7       	in	r29, 0x3e	; 62
    481a:	2c 97       	sbiw	r28, 0x0c	; 12
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	f8 94       	cli
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	cd bf       	out	0x3d, r28	; 61
    4826:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    4828:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <seconds_since_equinox>
    482c:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <seconds_since_equinox+0x1>
    4830:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <seconds_since_equinox+0x2>
    4834:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <seconds_since_equinox+0x3>
    4838:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <seconds_since_equinox+0x4>
    483c:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <seconds_since_equinox+0x5>
    4840:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <seconds_since_equinox+0x6>
    4844:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <seconds_since_equinox+0x7>
    4848:	0e 94 b3 32 	call	0x6566	; 0x6566 <__floatundisf>
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	30 ec       	ldi	r19, 0xC0	; 192
    4850:	48 ea       	ldi	r20, 0xA8	; 168
    4852:	57 e4       	ldi	r21, 0x47	; 71
    4854:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    4858:	2b ed       	ldi	r18, 0xDB	; 219
    485a:	3f e0       	ldi	r19, 0x0F	; 15
    485c:	49 ec       	ldi	r20, 0xC9	; 201
    485e:	50 e4       	ldi	r21, 0x40	; 64
    4860:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4864:	21 ed       	ldi	r18, 0xD1	; 209
    4866:	30 ea       	ldi	r19, 0xA0	; 160
    4868:	46 eb       	ldi	r20, 0xB6	; 182
    486a:	53 e4       	ldi	r21, 0x43	; 67
    486c:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4870:	4b 01       	movw	r8, r22
    4872:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    4874:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    4878:	20 e9       	ldi	r18, 0x90	; 144
    487a:	3e e2       	ldi	r19, 0x2E	; 46
    487c:	4c ec       	ldi	r20, 0xCC	; 204
    487e:	5e e3       	ldi	r21, 0x3E	; 62
    4880:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4884:	0e 94 5d 31 	call	0x62ba	; 0x62ba <asin>
    4888:	6b 01       	movw	r12, r22
    488a:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    488c:	c5 01       	movw	r24, r10
    488e:	b4 01       	movw	r22, r8
    4890:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    4894:	2b 01       	movw	r4, r22
    4896:	3c 01       	movw	r6, r24
    4898:	c7 01       	movw	r24, r14
    489a:	b6 01       	movw	r22, r12
    489c:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    48a0:	4b 01       	movw	r8, r22
    48a2:	5c 01       	movw	r10, r24
    48a4:	9b 01       	movw	r18, r22
    48a6:	ac 01       	movw	r20, r24
    48a8:	c3 01       	movw	r24, r6
    48aa:	b2 01       	movw	r22, r4
    48ac:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    48b0:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <acos>
    48b4:	2b 01       	movw	r4, r22
    48b6:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	a9 01       	movw	r20, r18
    48be:	c7 01       	movw	r24, r14
    48c0:	b6 01       	movw	r22, r12
    48c2:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    48c6:	88 23       	and	r24, r24
    48c8:	54 f4       	brge	.+20     	; 0x48de <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    48ca:	a3 01       	movw	r20, r6
    48cc:	92 01       	movw	r18, r4
    48ce:	6b ed       	ldi	r22, 0xDB	; 219
    48d0:	7f e0       	ldi	r23, 0x0F	; 15
    48d2:	89 ec       	ldi	r24, 0xC9	; 201
    48d4:	90 e4       	ldi	r25, 0x40	; 64
    48d6:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    48da:	2b 01       	movw	r4, r22
    48dc:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    48de:	c3 01       	movw	r24, r6
    48e0:	b2 01       	movw	r22, r4
    48e2:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    48e6:	9b 01       	movw	r18, r22
    48e8:	ac 01       	movw	r20, r24
    48ea:	c5 01       	movw	r24, r10
    48ec:	b4 01       	movw	r22, r8
    48ee:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    48f2:	69 83       	std	Y+1, r22	; 0x01
    48f4:	7a 83       	std	Y+2, r23	; 0x02
    48f6:	8b 83       	std	Y+3, r24	; 0x03
    48f8:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    48fa:	c3 01       	movw	r24, r6
    48fc:	b2 01       	movw	r22, r4
    48fe:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	c5 01       	movw	r24, r10
    4908:	b4 01       	movw	r22, r8
    490a:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    490e:	6d 83       	std	Y+5, r22	; 0x05
    4910:	7e 83       	std	Y+6, r23	; 0x06
    4912:	8f 83       	std	Y+7, r24	; 0x07
    4914:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    4916:	c7 01       	movw	r24, r14
    4918:	b6 01       	movw	r22, r12
    491a:	0e 94 aa 34 	call	0x6954	; 0x6954 <sin>
    491e:	69 87       	std	Y+9, r22	; 0x09
    4920:	7a 87       	std	Y+10, r23	; 0x0a
    4922:	8b 87       	std	Y+11, r24	; 0x0b
    4924:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    4926:	2d ec       	ldi	r18, 0xCD	; 205
    4928:	3c ec       	ldi	r19, 0xCC	; 204
    492a:	4c ec       	ldi	r20, 0xCC	; 204
    492c:	5d e3       	ldi	r21, 0x3D	; 61
    492e:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <frtm>
    4932:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <frtm+0x1>
    4936:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <frtm+0x2>
    493a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <frtm+0x3>
    493e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4942:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <frtm>
    4946:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <frtm+0x1>
    494a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <frtm+0x2>
    494e:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <frtm+0x3>
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    4952:	98 01       	movw	r18, r16
    4954:	ae 01       	movw	r20, r28
    4956:	4f 5f       	subi	r20, 0xFF	; 255
    4958:	5f 4f       	sbci	r21, 0xFF	; 255
    495a:	68 e2       	ldi	r22, 0x28	; 40
    495c:	74 e0       	ldi	r23, 0x04	; 4
    495e:	80 e4       	ldi	r24, 0x40	; 64
    4960:	94 e0       	ldi	r25, 0x04	; 4
    4962:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    4966:	2c 96       	adiw	r28, 0x0c	; 12
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	cd bf       	out	0x3d, r28	; 61
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	ff 90       	pop	r15
    497c:	ef 90       	pop	r14
    497e:	df 90       	pop	r13
    4980:	cf 90       	pop	r12
    4982:	bf 90       	pop	r11
    4984:	af 90       	pop	r10
    4986:	9f 90       	pop	r9
    4988:	8f 90       	pop	r8
    498a:	7f 90       	pop	r7
    498c:	6f 90       	pop	r6
    498e:	5f 90       	pop	r5
    4990:	4f 90       	pop	r4
    4992:	08 95       	ret

00004994 <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    4994:	8f 92       	push	r8
    4996:	9f 92       	push	r9
    4998:	af 92       	push	r10
    499a:	bf 92       	push	r11
    499c:	ef 92       	push	r14
    499e:	ff 92       	push	r15
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	e0 97       	sbiw	r28, 0x30	; 48
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	de bf       	out	0x3e, r29	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	cd bf       	out	0x3d, r28	; 61
    49b8:	7c 01       	movw	r14, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    49ba:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <seconds_since_pivot>
    49be:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <seconds_since_pivot+0x1>
    49c2:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <seconds_since_pivot+0x2>
    49c6:	50 91 8b 04 	lds	r21, 0x048B	; 0x80048b <seconds_since_pivot+0x3>
    49ca:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <seconds_since_pivot+0x4>
    49ce:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <seconds_since_pivot+0x5>
    49d2:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <seconds_since_pivot+0x6>
    49d6:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <seconds_since_pivot+0x7>
    49da:	0e 94 b3 32 	call	0x6566	; 0x6566 <__floatundisf>
    49de:	20 ec       	ldi	r18, 0xC0	; 192
    49e0:	39 e9       	ldi	r19, 0x99	; 153
    49e2:	40 ef       	ldi	r20, 0xF0	; 240
    49e4:	5b e4       	ldi	r21, 0x4B	; 75
    49e6:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	4c ef       	ldi	r20, 0xFC	; 252
    49f0:	54 e4       	ldi	r21, 0x44	; 68
    49f2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    49f6:	4b 01       	movw	r8, r22
    49f8:	5c 01       	movw	r10, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    49fa:	be 01       	movw	r22, r28
    49fc:	6f 5f       	subi	r22, 0xFF	; 255
    49fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4a00:	80 e4       	ldi	r24, 0x40	; 64
    4a02:	94 e0       	ldi	r25, 0x04	; 4
    4a04:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    4a08:	be 01       	movw	r22, r28
    4a0a:	63 5f       	subi	r22, 0xF3	; 243
    4a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0e:	ce 01       	movw	r24, r28
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	0e 94 43 10 	call	0x2086	; 0x2086 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    4a16:	6f e9       	ldi	r22, 0x9F	; 159
    4a18:	74 e0       	ldi	r23, 0x04	; 4
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	0d 96       	adiw	r24, 0x0d	; 13
    4a1e:	ac d8       	rcall	.-3752   	; 0x3b78 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4a20:	8e 01       	movw	r16, r28
    4a22:	07 5e       	subi	r16, 0xE7	; 231
    4a24:	1f 4f       	sbci	r17, 0xFF	; 255
    4a26:	28 e0       	ldi	r18, 0x08	; 8
    4a28:	b5 01       	movw	r22, r10
    4a2a:	a4 01       	movw	r20, r8
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	0d 96       	adiw	r24, 0x0d	; 13
    4a30:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    4a34:	ae 01       	movw	r20, r28
    4a36:	4f 5f       	subi	r20, 0xFF	; 255
    4a38:	5f 4f       	sbci	r21, 0xFF	; 255
    4a3a:	be 01       	movw	r22, r28
    4a3c:	63 5f       	subi	r22, 0xF3	; 243
    4a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a40:	c8 01       	movw	r24, r16
    4a42:	0e 94 cd 11 	call	0x239a	; 0x239a <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    4a46:	be 01       	movw	r22, r28
    4a48:	6b 5d       	subi	r22, 0xDB	; 219
    4a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	01 96       	adiw	r24, 0x01	; 1
    4a50:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    4a54:	97 01       	movw	r18, r14
    4a56:	ae 01       	movw	r20, r28
    4a58:	4b 5d       	subi	r20, 0xDB	; 219
    4a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5c:	68 e2       	ldi	r22, 0x28	; 40
    4a5e:	74 e0       	ldi	r23, 0x04	; 4
    4a60:	80 e4       	ldi	r24, 0x40	; 64
    4a62:	94 e0       	ldi	r25, 0x04	; 4
    4a64:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    4a68:	e0 96       	adiw	r28, 0x30	; 48
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	f8 94       	cli
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	df 91       	pop	r29
    4a76:	cf 91       	pop	r28
    4a78:	1f 91       	pop	r17
    4a7a:	0f 91       	pop	r16
    4a7c:	ff 90       	pop	r15
    4a7e:	ef 90       	pop	r14
    4a80:	bf 90       	pop	r11
    4a82:	af 90       	pop	r10
    4a84:	9f 90       	pop	r9
    4a86:	8f 90       	pop	r8
    4a88:	08 95       	ret

00004a8a <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4a8a:	ef 92       	push	r14
    4a8c:	ff 92       	push	r15
    4a8e:	1f 93       	push	r17
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	c8 ee       	ldi	r28, 0xE8	; 232
    4a96:	d4 e0       	ldi	r29, 0x04	; 4
    4a98:	0f 2e       	mov	r0, r31
    4a9a:	f0 e0       	ldi	r31, 0x00	; 0
    4a9c:	ef 2e       	mov	r14, r31
    4a9e:	f5 e0       	ldi	r31, 0x05	; 5
    4aa0:	ff 2e       	mov	r15, r31
    4aa2:	f0 2d       	mov	r31, r0
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    4aa4:	10 e0       	ldi	r17, 0x00	; 0
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4aa6:	69 91       	ld	r22, Y+
    4aa8:	79 91       	ld	r23, Y+
    4aaa:	89 91       	ld	r24, Y+
    4aac:	99 91       	ld	r25, Y+
    4aae:	27 e2       	ldi	r18, 0x27	; 39
    4ab0:	31 e3       	ldi	r19, 0x31	; 49
    4ab2:	48 ec       	ldi	r20, 0xC8	; 200
    4ab4:	5e e3       	ldi	r21, 0x3E	; 62
    4ab6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    4aba:	88 23       	and	r24, r24
    4abc:	0c f4       	brge	.+2      	; 0x4ac0 <light_cal+0x36>
		  num_dark_sensors++;
    4abe:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    4ac0:	ce 15       	cp	r28, r14
    4ac2:	df 05       	cpc	r29, r15
    4ac4:	81 f7       	brne	.-32     	; 0x4aa6 <light_cal+0x1c>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	16 30       	cpi	r17, 0x06	; 6
    4aca:	09 f4       	brne	.+2      	; 0x4ace <light_cal+0x44>
    4acc:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	1f 91       	pop	r17
    4ad4:	ff 90       	pop	r15
    4ad6:	ef 90       	pop	r14
    4ad8:	08 95       	ret

00004ada <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    4ada:	2f 92       	push	r2
    4adc:	3f 92       	push	r3
    4ade:	4f 92       	push	r4
    4ae0:	5f 92       	push	r5
    4ae2:	6f 92       	push	r6
    4ae4:	7f 92       	push	r7
    4ae6:	8f 92       	push	r8
    4ae8:	9f 92       	push	r9
    4aea:	af 92       	push	r10
    4aec:	bf 92       	push	r11
    4aee:	cf 92       	push	r12
    4af0:	df 92       	push	r13
    4af2:	ef 92       	push	r14
    4af4:	ff 92       	push	r15
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	cb 57       	subi	r28, 0x7B	; 123
    4b04:	d1 09       	sbc	r29, r1
    4b06:	0f b6       	in	r0, 0x3f	; 63
    4b08:	f8 94       	cli
    4b0a:	de bf       	out	0x3e, r29	; 62
    4b0c:	0f be       	out	0x3f, r0	; 63
    4b0e:	cd bf       	out	0x3d, r28	; 61
    4b10:	af 96       	adiw	r28, 0x2f	; 47
    4b12:	9f af       	std	Y+63, r25	; 0x3f
    4b14:	8e af       	std	Y+62, r24	; 0x3e
    4b16:	af 97       	sbiw	r28, 0x2f	; 47
    4b18:	e5 96       	adiw	r28, 0x35	; 53
    4b1a:	7f af       	std	Y+63, r23	; 0x3f
    4b1c:	6e af       	std	Y+62, r22	; 0x3e
    4b1e:	e5 97       	sbiw	r28, 0x35	; 53
    4b20:	e3 96       	adiw	r28, 0x33	; 51
    4b22:	5f af       	std	Y+63, r21	; 0x3f
    4b24:	4e af       	std	Y+62, r20	; 0x3e
    4b26:	e3 97       	sbiw	r28, 0x33	; 51
    4b28:	79 01       	movw	r14, r18
    4b2a:	08 ee       	ldi	r16, 0xE8	; 232
    4b2c:	14 e0       	ldi	r17, 0x04	; 4
    4b2e:	0f 2e       	mov	r0, r31
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	cf 2e       	mov	r12, r31
    4b34:	f5 e0       	ldi	r31, 0x05	; 5
    4b36:	df 2e       	mov	r13, r31
    4b38:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4b3a:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4b3c:	f8 01       	movw	r30, r16
    4b3e:	61 91       	ld	r22, Z+
    4b40:	71 91       	ld	r23, Z+
    4b42:	81 91       	ld	r24, Z+
    4b44:	91 91       	ld	r25, Z+
    4b46:	8f 01       	movw	r16, r30
    4b48:	27 e2       	ldi	r18, 0x27	; 39
    4b4a:	31 e3       	ldi	r19, 0x31	; 49
    4b4c:	48 ec       	ldi	r20, 0xC8	; 200
    4b4e:	5e e3       	ldi	r21, 0x3E	; 62
    4b50:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    4b54:	88 23       	and	r24, r24
    4b56:	0c f4       	brge	.+2      	; 0x4b5a <quest+0x80>
      num_dark_sensors++;
    4b58:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    4b5a:	0c 15       	cp	r16, r12
    4b5c:	1d 05       	cpc	r17, r13
    4b5e:	71 f7       	brne	.-36     	; 0x4b3c <quest+0x62>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4b60:	f1 e0       	ldi	r31, 0x01	; 1
    4b62:	e8 96       	adiw	r28, 0x38	; 56
    4b64:	ff af       	std	Y+63, r31	; 0x3f
    4b66:	e8 97       	sbiw	r28, 0x38	; 56
    4b68:	26 e0       	ldi	r18, 0x06	; 6
    4b6a:	b2 12       	cpse	r11, r18
    4b6c:	03 c0       	rjmp	.+6      	; 0x4b74 <quest+0x9a>
    4b6e:	e8 96       	adiw	r28, 0x38	; 56
    4b70:	1f ae       	std	Y+63, r1	; 0x3f
    4b72:	e8 97       	sbiw	r28, 0x38	; 56
    light = 0;
  
  if(light)
    4b74:	e8 96       	adiw	r28, 0x38	; 56
    4b76:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b78:	e8 97       	sbiw	r28, 0x38	; 56
    4b7a:	88 23       	and	r24, r24
    4b7c:	09 f4       	brne	.+2      	; 0x4b80 <quest+0xa6>
    4b7e:	11 c3       	rjmp	.+1570   	; 0x51a2 <quest+0x6c8>
  {
    if(!*p_w_ctrl)
    4b80:	f7 01       	movw	r30, r14
    4b82:	80 81       	ld	r24, Z
    4b84:	81 11       	cpse	r24, r1
    4b86:	0f c0       	rjmp	.+30     	; 0x4ba6 <quest+0xcc>
    {
      time_since_light += FRAME_TIME;
    4b88:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <time_since_light.2042>
    4b8c:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <time_since_light.2042+0x1>
    4b90:	02 96       	adiw	r24, 0x02	; 2
    4b92:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <time_since_light.2042+0x1>
    4b96:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <time_since_light.2042>
      if(time_since_light == 300)
    4b9a:	8c 32       	cpi	r24, 0x2C	; 44
    4b9c:	91 40       	sbci	r25, 0x01	; 1
    4b9e:	19 f4       	brne	.+6      	; 0x4ba6 <quest+0xcc>
        *p_w_ctrl = 1;
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	f7 01       	movw	r30, r14
    4ba4:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4ba6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <light_prev.2043>
    4baa:	81 11       	cpse	r24, r1
    4bac:	13 c3       	rjmp	.+1574   	; 0x51d4 <quest+0x6fa>
    {
      *p_w_ctrl = 0;
    4bae:	f7 01       	movw	r30, r14
    4bb0:	10 82       	st	Z, r1
      time_since_light = 0;
    4bb2:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <time_since_light.2042+0x1>
    4bb6:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <time_since_light.2042>
    4bba:	0c c3       	rjmp	.+1560   	; 0x51d4 <quest+0x6fa>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4bbc:	89 86       	std	Y+9, r8	; 0x09
    4bbe:	9a 86       	std	Y+10, r9	; 0x0a
    4bc0:	ab 86       	std	Y+11, r10	; 0x0b
    4bc2:	bc 86       	std	Y+12, r11	; 0x0c
    4bc4:	08 c0       	rjmp	.+16     	; 0x4bd6 <quest+0xfc>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4bc6:	f7 fa       	bst	r15, 7
    4bc8:	f0 94       	com	r15
    4bca:	f7 f8       	bld	r15, 7
    4bcc:	f0 94       	com	r15
    4bce:	c9 86       	std	Y+9, r12	; 0x09
    4bd0:	da 86       	std	Y+10, r13	; 0x0a
    4bd2:	eb 86       	std	Y+11, r14	; 0x0b
    4bd4:	fc 86       	std	Y+12, r15	; 0x0c
    4bd6:	8e 01       	movw	r16, r28
    4bd8:	0f 5f       	subi	r16, 0xFF	; 255
    4bda:	1f 4f       	sbci	r17, 0xFF	; 255
    4bdc:	1e 01       	movw	r2, r28
    4bde:	fd e0       	ldi	r31, 0x0D	; 13
    4be0:	2f 0e       	add	r2, r31
    4be2:	31 1c       	adc	r3, r1

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4be4:	f8 01       	movw	r30, r16
    4be6:	c0 80       	ld	r12, Z
    4be8:	d1 80       	ldd	r13, Z+1	; 0x01
    4bea:	e2 80       	ldd	r14, Z+2	; 0x02
    4bec:	f3 80       	ldd	r15, Z+3	; 0x03
    4bee:	46 01       	movw	r8, r12
    4bf0:	57 01       	movw	r10, r14
    4bf2:	e8 94       	clt
    4bf4:	b7 f8       	bld	r11, 7
    4bf6:	26 e6       	ldi	r18, 0x66	; 102
    4bf8:	36 e6       	ldi	r19, 0x66	; 102
    4bfa:	46 e8       	ldi	r20, 0x86	; 134
    4bfc:	5f e3       	ldi	r21, 0x3F	; 63
    4bfe:	c5 01       	movw	r24, r10
    4c00:	b4 01       	movw	r22, r8
    4c02:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    4c06:	21 ec       	ldi	r18, 0xC1	; 193
    4c08:	3a ec       	ldi	r19, 0xCA	; 202
    4c0a:	41 ec       	ldi	r20, 0xC1	; 193
    4c0c:	5f e3       	ldi	r21, 0x3F	; 63
    4c0e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    4c12:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <acos>
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	44 e3       	ldi	r20, 0x34	; 52
    4c1c:	53 e4       	ldi	r21, 0x43	; 67
    4c1e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4c22:	20 ed       	ldi	r18, 0xD0	; 208
    4c24:	3f e0       	ldi	r19, 0x0F	; 15
    4c26:	49 e4       	ldi	r20, 0x49	; 73
    4c28:	50 e4       	ldi	r21, 0x40	; 64
    4c2a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    4c2e:	26 e6       	ldi	r18, 0x66	; 102
    4c30:	36 e6       	ldi	r19, 0x66	; 102
    4c32:	4e e1       	ldi	r20, 0x1E	; 30
    4c34:	51 e4       	ldi	r21, 0x41	; 65
    4c36:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4c3a:	23 e3       	ldi	r18, 0x33	; 51
    4c3c:	33 e3       	ldi	r19, 0x33	; 51
    4c3e:	43 ed       	ldi	r20, 0xD3	; 211
    4c40:	5f e3       	ldi	r21, 0x3F	; 63
    4c42:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4c46:	20 ed       	ldi	r18, 0xD0	; 208
    4c48:	3f e0       	ldi	r19, 0x0F	; 15
    4c4a:	49 e4       	ldi	r20, 0x49	; 73
    4c4c:	50 e4       	ldi	r21, 0x40	; 64
    4c4e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	44 e3       	ldi	r20, 0x34	; 52
    4c58:	53 e4       	ldi	r21, 0x43	; 67
    4c5a:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4c5e:	2b 01       	movw	r4, r22
    4c60:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	a9 01       	movw	r20, r18
    4c68:	c7 01       	movw	r24, r14
    4c6a:	b6 01       	movw	r22, r12
    4c6c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__cmpsf2>
    4c70:	88 23       	and	r24, r24
    4c72:	c1 f0       	breq	.+48     	; 0x4ca4 <quest+0x1ca>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4c74:	c3 01       	movw	r24, r6
    4c76:	b2 01       	movw	r22, r4
    4c78:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    4c7c:	2b 01       	movw	r4, r22
    4c7e:	3c 01       	movw	r6, r24
    4c80:	a7 01       	movw	r20, r14
    4c82:	96 01       	movw	r18, r12
    4c84:	c5 01       	movw	r24, r10
    4c86:	b4 01       	movw	r22, r8
    4c88:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4c8c:	9b 01       	movw	r18, r22
    4c8e:	ac 01       	movw	r20, r24
    4c90:	c3 01       	movw	r24, r6
    4c92:	b2 01       	movw	r22, r4
    4c94:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4c98:	f8 01       	movw	r30, r16
    4c9a:	60 83       	st	Z, r22
    4c9c:	71 83       	std	Z+1, r23	; 0x01
    4c9e:	82 83       	std	Z+2, r24	; 0x02
    4ca0:	93 83       	std	Z+3, r25	; 0x03
    4ca2:	09 c0       	rjmp	.+18     	; 0x4cb6 <quest+0x1dc>
		else
		v_sun_m[i] = cos(angle);
    4ca4:	c3 01       	movw	r24, r6
    4ca6:	b2 01       	movw	r22, r4
    4ca8:	0e 94 da 31 	call	0x63b4	; 0x63b4 <cos>
    4cac:	f8 01       	movw	r30, r16
    4cae:	60 83       	st	Z, r22
    4cb0:	71 83       	std	Z+1, r23	; 0x01
    4cb2:	82 83       	std	Z+2, r24	; 0x02
    4cb4:	93 83       	std	Z+3, r25	; 0x03
    4cb6:	0c 5f       	subi	r16, 0xFC	; 252
    4cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4cba:	02 15       	cp	r16, r2
    4cbc:	13 05       	cpc	r17, r3
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <quest+0x1e8>
    4cc0:	91 cf       	rjmp	.-222    	; 0x4be4 <quest+0x10a>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	01 96       	adiw	r24, 0x01	; 1
    4cc6:	51 da       	rcall	.-2910   	; 0x416a <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4cc8:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <Current_state+0x55>
    4ccc:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <Current_state+0x56>
    4cd0:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <Current_state+0x57>
    4cd4:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <Current_state+0x58>
    4cd8:	8d 8b       	std	Y+21, r24	; 0x15
    4cda:	9e 8b       	std	Y+22, r25	; 0x16
    4cdc:	af 8b       	std	Y+23, r26	; 0x17
    4cde:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4ce0:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <Current_state+0x59>
    4ce4:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <Current_state+0x5a>
    4ce8:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <Current_state+0x5b>
    4cec:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <Current_state+0x5c>
    4cf0:	b0 58       	subi	r27, 0x80	; 128
    4cf2:	89 8b       	std	Y+17, r24	; 0x11
    4cf4:	9a 8b       	std	Y+18, r25	; 0x12
    4cf6:	ab 8b       	std	Y+19, r26	; 0x13
    4cf8:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4cfa:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <Current_state+0x5d>
    4cfe:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <Current_state+0x5e>
    4d02:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <Current_state+0x5f>
    4d06:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <Current_state+0x60>
    4d0a:	8d 87       	std	Y+13, r24	; 0x0d
    4d0c:	9e 87       	std	Y+14, r25	; 0x0e
    4d0e:	af 87       	std	Y+15, r26	; 0x0f
    4d10:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4d12:	ae 01       	movw	r20, r28
    4d14:	47 5e       	subi	r20, 0xE7	; 231
    4d16:	5f 4f       	sbci	r21, 0xFF	; 255
    4d18:	be 01       	movw	r22, r28
    4d1a:	6f 5f       	subi	r22, 0xFF	; 255
    4d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d1e:	ce 01       	movw	r24, r28
    4d20:	0d 96       	adiw	r24, 0x0d	; 13
    4d22:	48 d9       	rcall	.-3440   	; 0x3fb4 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4d24:	ce 01       	movw	r24, r28
    4d26:	49 96       	adiw	r24, 0x19	; 25
    4d28:	20 da       	rcall	.-3008   	; 0x416a <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4d2a:	ae 01       	movw	r20, r28
    4d2c:	4b 5d       	subi	r20, 0xDB	; 219
    4d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d30:	e5 96       	adiw	r28, 0x35	; 53
    4d32:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d34:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d36:	e5 97       	sbiw	r28, 0x35	; 53
    4d38:	af 96       	adiw	r28, 0x2f	; 47
    4d3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d3e:	af 97       	sbiw	r28, 0x2f	; 47
    4d40:	39 d9       	rcall	.-3470   	; 0x3fb4 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4d42:	ce 01       	movw	r24, r28
    4d44:	85 96       	adiw	r24, 0x25	; 37
    4d46:	11 da       	rcall	.-3038   	; 0x416a <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4d48:	be 01       	movw	r22, r28
    4d4a:	6b 5d       	subi	r22, 0xDB	; 219
    4d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4e:	ce 01       	movw	r24, r28
    4d50:	49 96       	adiw	r24, 0x19	; 25
    4d52:	5f d8       	rcall	.-3906   	; 0x3e12 <vector_dot_product>
    4d54:	6b 01       	movw	r12, r22
    4d56:	7c 01       	movw	r14, r24
    4d58:	af 96       	adiw	r28, 0x2f	; 47
    4d5a:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d5e:	af 97       	sbiw	r28, 0x2f	; 47
    4d60:	ce 01       	movw	r24, r28
    4d62:	0d 96       	adiw	r24, 0x0d	; 13
    4d64:	56 d8       	rcall	.-3924   	; 0x3e12 <vector_dot_product>
    4d66:	4b 01       	movw	r8, r22
    4d68:	5c 01       	movw	r10, r24
    4d6a:	e5 96       	adiw	r28, 0x35	; 53
    4d6c:	6e ad       	ldd	r22, Y+62	; 0x3e
    4d6e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4d70:	e5 97       	sbiw	r28, 0x35	; 53
    4d72:	ce 01       	movw	r24, r28
    4d74:	01 96       	adiw	r24, 0x01	; 1
    4d76:	4d d8       	rcall	.-3942   	; 0x3e12 <vector_dot_product>
    4d78:	2b 01       	movw	r4, r22
    4d7a:	3c 01       	movw	r6, r24
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	40 e8       	ldi	r20, 0x80	; 128
    4d82:	5f e3       	ldi	r21, 0x3F	; 63
    4d84:	c7 01       	movw	r24, r14
    4d86:	b6 01       	movw	r22, r12
    4d88:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4d8c:	6b 01       	movw	r12, r22
    4d8e:	7c 01       	movw	r14, r24
    4d90:	26 e6       	ldi	r18, 0x66	; 102
    4d92:	36 e6       	ldi	r19, 0x66	; 102
    4d94:	46 e6       	ldi	r20, 0x66	; 102
    4d96:	5f e3       	ldi	r21, 0x3F	; 63
    4d98:	c5 01       	movw	r24, r10
    4d9a:	b4 01       	movw	r22, r8
    4d9c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4da0:	4b 01       	movw	r8, r22
    4da2:	5c 01       	movw	r10, r24
    4da4:	20 ed       	ldi	r18, 0xD0	; 208
    4da6:	3c ec       	ldi	r19, 0xCC	; 204
    4da8:	4c ec       	ldi	r20, 0xCC	; 204
    4daa:	5d e3       	ldi	r21, 0x3D	; 61
    4dac:	c3 01       	movw	r24, r6
    4dae:	b2 01       	movw	r22, r4
    4db0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4db4:	9b 01       	movw	r18, r22
    4db6:	ac 01       	movw	r20, r24
    4db8:	c5 01       	movw	r24, r10
    4dba:	b4 01       	movw	r22, r8
    4dbc:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	ac 01       	movw	r20, r24
    4dc4:	c7 01       	movw	r24, r14
    4dc6:	b6 01       	movw	r22, r12
    4dc8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4dcc:	4b 01       	movw	r8, r22
    4dce:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4dd0:	ae 01       	movw	r20, r28
    4dd2:	47 5b       	subi	r20, 0xB7	; 183
    4dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd6:	af 96       	adiw	r28, 0x2f	; 47
    4dd8:	6e ad       	ldd	r22, Y+62	; 0x3e
    4dda:	7f ad       	ldd	r23, Y+63	; 0x3f
    4ddc:	af 97       	sbiw	r28, 0x2f	; 47
    4dde:	ce 01       	movw	r24, r28
    4de0:	0d 96       	adiw	r24, 0x0d	; 13
    4de2:	e8 d8       	rcall	.-3632   	; 0x3fb4 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4de4:	ae 01       	movw	r20, r28
    4de6:	4b 5a       	subi	r20, 0xAB	; 171
    4de8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dea:	e5 96       	adiw	r28, 0x35	; 53
    4dec:	6e ad       	ldd	r22, Y+62	; 0x3e
    4dee:	7f ad       	ldd	r23, Y+63	; 0x3f
    4df0:	e5 97       	sbiw	r28, 0x35	; 53
    4df2:	ce 01       	movw	r24, r28
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	de d8       	rcall	.-3652   	; 0x3fb4 <vector_cross_product>
    4df8:	ce 01       	movw	r24, r28
    4dfa:	87 5b       	subi	r24, 0xB7	; 183
    4dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfe:	7c 01       	movw	r14, r24
    4e00:	8e 01       	movw	r16, r28
    4e02:	0b 5a       	subi	r16, 0xAB	; 171
    4e04:	1f 4f       	sbci	r17, 0xFF	; 255
    4e06:	68 01       	movw	r12, r16
    4e08:	9c e0       	ldi	r25, 0x0C	; 12
    4e0a:	c9 0e       	add	r12, r25
    4e0c:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4e0e:	f7 01       	movw	r30, r14
    4e10:	61 91       	ld	r22, Z+
    4e12:	71 91       	ld	r23, Z+
    4e14:	81 91       	ld	r24, Z+
    4e16:	91 91       	ld	r25, Z+
    4e18:	7f 01       	movw	r14, r30
    4e1a:	26 e6       	ldi	r18, 0x66	; 102
    4e1c:	36 e6       	ldi	r19, 0x66	; 102
    4e1e:	46 e6       	ldi	r20, 0x66	; 102
    4e20:	5f e3       	ldi	r21, 0x3F	; 63
    4e22:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4e26:	2b 01       	movw	r4, r22
    4e28:	3c 01       	movw	r6, r24
    4e2a:	20 ed       	ldi	r18, 0xD0	; 208
    4e2c:	3c ec       	ldi	r19, 0xCC	; 204
    4e2e:	4c ec       	ldi	r20, 0xCC	; 204
    4e30:	5d e3       	ldi	r21, 0x3D	; 61
    4e32:	f8 01       	movw	r30, r16
    4e34:	60 81       	ld	r22, Z
    4e36:	71 81       	ldd	r23, Z+1	; 0x01
    4e38:	82 81       	ldd	r24, Z+2	; 0x02
    4e3a:	93 81       	ldd	r25, Z+3	; 0x03
    4e3c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	c3 01       	movw	r24, r6
    4e46:	b2 01       	movw	r22, r4
    4e48:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4e4c:	f8 01       	movw	r30, r16
    4e4e:	61 93       	st	Z+, r22
    4e50:	71 93       	st	Z+, r23
    4e52:	81 93       	st	Z+, r24
    4e54:	91 93       	st	Z+, r25
    4e56:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4e58:	ec 15       	cp	r30, r12
    4e5a:	fd 05       	cpc	r31, r13
    4e5c:	c1 f6       	brne	.-80     	; 0x4e0e <quest+0x334>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4e5e:	ae 01       	movw	r20, r28
    4e60:	4f 5c       	subi	r20, 0xCF	; 207
    4e62:	5f 4f       	sbci	r21, 0xFF	; 255
    4e64:	be 01       	movw	r22, r28
    4e66:	6b 5d       	subi	r22, 0xDB	; 219
    4e68:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	49 96       	adiw	r24, 0x19	; 25
    4e6e:	a2 d8       	rcall	.-3772   	; 0x3fb4 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4e70:	be 01       	movw	r22, r28
    4e72:	6b 5a       	subi	r22, 0xAB	; 171
    4e74:	7f 4f       	sbci	r23, 0xFF	; 255
    4e76:	ce 01       	movw	r24, r28
    4e78:	c1 96       	adiw	r24, 0x31	; 49
    4e7a:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    4e7e:	a5 01       	movw	r20, r10
    4e80:	94 01       	movw	r18, r8
    4e82:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4e86:	6b 01       	movw	r12, r22
    4e88:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4e8a:	ae 01       	movw	r20, r28
    4e8c:	43 5c       	subi	r20, 0xC3	; 195
    4e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e90:	be 01       	movw	r22, r28
    4e92:	6b 5d       	subi	r22, 0xDB	; 219
    4e94:	7f 4f       	sbci	r23, 0xFF	; 255
    4e96:	ce 01       	movw	r24, r28
    4e98:	49 96       	adiw	r24, 0x19	; 25
    4e9a:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4e9e:	be 01       	movw	r22, r28
    4ea0:	6b 5a       	subi	r22, 0xAB	; 171
    4ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea4:	ce 01       	movw	r24, r28
    4ea6:	cd 96       	adiw	r24, 0x3d	; 61
    4ea8:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    4eac:	e1 96       	adiw	r28, 0x31	; 49
    4eae:	6c af       	std	Y+60, r22	; 0x3c
    4eb0:	7d af       	std	Y+61, r23	; 0x3d
    4eb2:	8e af       	std	Y+62, r24	; 0x3e
    4eb4:	9f af       	std	Y+63, r25	; 0x3f
    4eb6:	e1 97       	sbiw	r28, 0x31	; 49
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4eb8:	a7 01       	movw	r20, r14
    4eba:	96 01       	movw	r18, r12
    4ebc:	c7 01       	movw	r24, r14
    4ebe:	b6 01       	movw	r22, r12
    4ec0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4ec4:	4b 01       	movw	r8, r22
    4ec6:	5c 01       	movw	r10, r24
    4ec8:	e1 96       	adiw	r28, 0x31	; 49
    4eca:	2c ad       	ldd	r18, Y+60	; 0x3c
    4ecc:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ece:	4e ad       	ldd	r20, Y+62	; 0x3e
    4ed0:	5f ad       	ldd	r21, Y+63	; 0x3f
    4ed2:	e1 97       	sbiw	r28, 0x31	; 49
    4ed4:	ca 01       	movw	r24, r20
    4ed6:	b9 01       	movw	r22, r18
    4ed8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4edc:	2b 01       	movw	r4, r22
    4ede:	3c 01       	movw	r6, r24
    4ee0:	a3 01       	movw	r20, r6
    4ee2:	92 01       	movw	r18, r4
    4ee4:	c5 01       	movw	r24, r10
    4ee6:	b4 01       	movw	r22, r8
    4ee8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4eec:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    4ef0:	4b 01       	movw	r8, r22
    4ef2:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	a9 01       	movw	r20, r18
    4efa:	c7 01       	movw	r24, r14
    4efc:	b6 01       	movw	r22, r12
    4efe:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    4f02:	18 16       	cp	r1, r24
    4f04:	0c f0       	brlt	.+2      	; 0x4f08 <quest+0x42e>
    4f06:	90 c0       	rjmp	.+288    	; 0x5028 <quest+0x54e>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4f08:	a7 01       	movw	r20, r14
    4f0a:	96 01       	movw	r18, r12
    4f0c:	c5 01       	movw	r24, r10
    4f0e:	b4 01       	movw	r22, r8
    4f10:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4f14:	e7 96       	adiw	r28, 0x37	; 55
    4f16:	6c af       	std	Y+60, r22	; 0x3c
    4f18:	7d af       	std	Y+61, r23	; 0x3d
    4f1a:	8e af       	std	Y+62, r24	; 0x3e
    4f1c:	9f af       	std	Y+63, r25	; 0x3f
    4f1e:	e7 97       	sbiw	r28, 0x37	; 55
    4f20:	a5 01       	movw	r20, r10
    4f22:	94 01       	movw	r18, r8
    4f24:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4f28:	4b 01       	movw	r8, r22
    4f2a:	5c 01       	movw	r10, r24
    4f2c:	be 01       	movw	r22, r28
    4f2e:	6b 5d       	subi	r22, 0xDB	; 219
    4f30:	7f 4f       	sbci	r23, 0xFF	; 255
    4f32:	ce 01       	movw	r24, r28
    4f34:	49 96       	adiw	r24, 0x19	; 25
    4f36:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    4f3a:	2b 01       	movw	r4, r22
    4f3c:	3c 01       	movw	r6, r24
    4f3e:	20 e0       	ldi	r18, 0x00	; 0
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	40 e8       	ldi	r20, 0x80	; 128
    4f44:	5f e3       	ldi	r21, 0x3F	; 63
    4f46:	c3 01       	movw	r24, r6
    4f48:	b2 01       	movw	r22, r4
    4f4a:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4f4e:	9b 01       	movw	r18, r22
    4f50:	ac 01       	movw	r20, r24
    4f52:	c5 01       	movw	r24, r10
    4f54:	b4 01       	movw	r22, r8
    4f56:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4f5a:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    4f5e:	9b 01       	movw	r18, r22
    4f60:	ac 01       	movw	r20, r24
    4f62:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4f66:	9b 01       	movw	r18, r22
    4f68:	ac 01       	movw	r20, r24
    4f6a:	60 e0       	ldi	r22, 0x00	; 0
    4f6c:	70 e0       	ldi	r23, 0x00	; 0
    4f6e:	80 e8       	ldi	r24, 0x80	; 128
    4f70:	9f e3       	ldi	r25, 0x3F	; 63
    4f72:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    4f76:	ec 96       	adiw	r28, 0x3c	; 60
    4f78:	6c af       	std	Y+60, r22	; 0x3c
    4f7a:	7d af       	std	Y+61, r23	; 0x3d
    4f7c:	8e af       	std	Y+62, r24	; 0x3e
    4f7e:	9f af       	std	Y+63, r25	; 0x3f
    4f80:	ec 97       	sbiw	r28, 0x3c	; 60
    4f82:	8e 01       	movw	r16, r28
    4f84:	0f 5c       	subi	r16, 0xCF	; 207
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	1e 01       	movw	r2, r28
    4f8a:	fd e3       	ldi	r31, 0x3D	; 61
    4f8c:	2f 0e       	add	r2, r31
    4f8e:	31 1c       	adc	r3, r1
    4f90:	6e 01       	movw	r12, r28
    4f92:	21 e6       	ldi	r18, 0x61	; 97
    4f94:	c2 0e       	add	r12, r18
    4f96:	d1 1c       	adc	r13, r1
    4f98:	71 01       	movw	r14, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	21 91       	ld	r18, Z+
    4f9e:	31 91       	ld	r19, Z+
    4fa0:	41 91       	ld	r20, Z+
    4fa2:	51 91       	ld	r21, Z+
    4fa4:	8f 01       	movw	r16, r30
    4fa6:	f1 01       	movw	r30, r2
    4fa8:	41 90       	ld	r4, Z+
    4faa:	51 90       	ld	r5, Z+
    4fac:	61 90       	ld	r6, Z+
    4fae:	71 90       	ld	r7, Z+
    4fb0:	1f 01       	movw	r2, r30
    4fb2:	e7 96       	adiw	r28, 0x37	; 55
    4fb4:	6c ad       	ldd	r22, Y+60	; 0x3c
    4fb6:	7d ad       	ldd	r23, Y+61	; 0x3d
    4fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fba:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fbc:	e7 97       	sbiw	r28, 0x37	; 55
    4fbe:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4fc2:	4b 01       	movw	r8, r22
    4fc4:	5c 01       	movw	r10, r24
    4fc6:	e1 96       	adiw	r28, 0x31	; 49
    4fc8:	2c ad       	ldd	r18, Y+60	; 0x3c
    4fca:	3d ad       	ldd	r19, Y+61	; 0x3d
    4fcc:	4e ad       	ldd	r20, Y+62	; 0x3e
    4fce:	5f ad       	ldd	r21, Y+63	; 0x3f
    4fd0:	e1 97       	sbiw	r28, 0x31	; 49
    4fd2:	c3 01       	movw	r24, r6
    4fd4:	b2 01       	movw	r22, r4
    4fd6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    4fda:	9b 01       	movw	r18, r22
    4fdc:	ac 01       	movw	r20, r24
    4fde:	c5 01       	movw	r24, r10
    4fe0:	b4 01       	movw	r22, r8
    4fe2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    4fe6:	f6 01       	movw	r30, r12
    4fe8:	61 93       	st	Z+, r22
    4fea:	71 93       	st	Z+, r23
    4fec:	81 93       	st	Z+, r24
    4fee:	91 93       	st	Z+, r25
    4ff0:	6f 01       	movw	r12, r30
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4ff2:	0e 15       	cp	r16, r14
    4ff4:	1f 05       	cpc	r17, r15
    4ff6:	89 f6       	brne	.-94     	; 0x4f9a <quest+0x4c0>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4ff8:	be 01       	movw	r22, r28
    4ffa:	6b 5d       	subi	r22, 0xDB	; 219
    4ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ffe:	ce 01       	movw	r24, r28
    5000:	49 96       	adiw	r24, 0x19	; 25
    5002:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	40 e8       	ldi	r20, 0x80	; 128
    500c:	5f e3       	ldi	r21, 0x3F	; 63
    500e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    5012:	9b 01       	movw	r18, r22
    5014:	ac 01       	movw	r20, r24
    5016:	e7 96       	adiw	r28, 0x37	; 55
    5018:	6c ad       	ldd	r22, Y+60	; 0x3c
    501a:	7d ad       	ldd	r23, Y+61	; 0x3d
    501c:	8e ad       	ldd	r24, Y+62	; 0x3e
    501e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5020:	e7 97       	sbiw	r28, 0x37	; 55
    5022:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    5026:	8d c0       	rjmp	.+282    	; 0x5142 <quest+0x668>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    5028:	a7 01       	movw	r20, r14
    502a:	96 01       	movw	r18, r12
    502c:	c5 01       	movw	r24, r10
    502e:	b4 01       	movw	r22, r8
    5030:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__subsf3>
    5034:	e7 96       	adiw	r28, 0x37	; 55
    5036:	6c af       	std	Y+60, r22	; 0x3c
    5038:	7d af       	std	Y+61, r23	; 0x3d
    503a:	8e af       	std	Y+62, r24	; 0x3e
    503c:	9f af       	std	Y+63, r25	; 0x3f
    503e:	e7 97       	sbiw	r28, 0x37	; 55
    5040:	a5 01       	movw	r20, r10
    5042:	94 01       	movw	r18, r8
    5044:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    5048:	6b 01       	movw	r12, r22
    504a:	7c 01       	movw	r14, r24
    504c:	be 01       	movw	r22, r28
    504e:	6b 5d       	subi	r22, 0xDB	; 219
    5050:	7f 4f       	sbci	r23, 0xFF	; 255
    5052:	ce 01       	movw	r24, r28
    5054:	49 96       	adiw	r24, 0x19	; 25
    5056:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    505a:	4b 01       	movw	r8, r22
    505c:	5c 01       	movw	r10, r24
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	40 e8       	ldi	r20, 0x80	; 128
    5064:	5f e3       	ldi	r21, 0x3F	; 63
    5066:	c5 01       	movw	r24, r10
    5068:	b4 01       	movw	r22, r8
    506a:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    506e:	9b 01       	movw	r18, r22
    5070:	ac 01       	movw	r20, r24
    5072:	c7 01       	movw	r24, r14
    5074:	b6 01       	movw	r22, r12
    5076:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    507a:	0e 94 b4 34 	call	0x6968	; 0x6968 <sqrt>
    507e:	9b 01       	movw	r18, r22
    5080:	ac 01       	movw	r20, r24
    5082:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    5086:	9b 01       	movw	r18, r22
    5088:	ac 01       	movw	r20, r24
    508a:	60 e0       	ldi	r22, 0x00	; 0
    508c:	70 e0       	ldi	r23, 0x00	; 0
    508e:	80 e8       	ldi	r24, 0x80	; 128
    5090:	9f e3       	ldi	r25, 0x3F	; 63
    5092:	0e 94 dd 31 	call	0x63ba	; 0x63ba <__divsf3>
    5096:	ec 96       	adiw	r28, 0x3c	; 60
    5098:	6c af       	std	Y+60, r22	; 0x3c
    509a:	7d af       	std	Y+61, r23	; 0x3d
    509c:	8e af       	std	Y+62, r24	; 0x3e
    509e:	9f af       	std	Y+63, r25	; 0x3f
    50a0:	ec 97       	sbiw	r28, 0x3c	; 60
    50a2:	8e 01       	movw	r16, r28
    50a4:	0f 5c       	subi	r16, 0xCF	; 207
    50a6:	1f 4f       	sbci	r17, 0xFF	; 255
    50a8:	1e 01       	movw	r2, r28
    50aa:	fd e3       	ldi	r31, 0x3D	; 61
    50ac:	2f 0e       	add	r2, r31
    50ae:	31 1c       	adc	r3, r1
    50b0:	2e 01       	movw	r4, r28
    50b2:	21 e6       	ldi	r18, 0x61	; 97
    50b4:	42 0e       	add	r4, r18
    50b6:	51 1c       	adc	r5, r1
    50b8:	31 01       	movw	r6, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    50ba:	f8 01       	movw	r30, r16
    50bc:	61 91       	ld	r22, Z+
    50be:	71 91       	ld	r23, Z+
    50c0:	81 91       	ld	r24, Z+
    50c2:	91 91       	ld	r25, Z+
    50c4:	8f 01       	movw	r16, r30
    50c6:	f1 01       	movw	r30, r2
    50c8:	81 90       	ld	r8, Z+
    50ca:	91 90       	ld	r9, Z+
    50cc:	a1 90       	ld	r10, Z+
    50ce:	b1 90       	ld	r11, Z+
    50d0:	1f 01       	movw	r2, r30
    50d2:	e1 96       	adiw	r28, 0x31	; 49
    50d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    50d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    50d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    50da:	5f ad       	ldd	r21, Y+63	; 0x3f
    50dc:	e1 97       	sbiw	r28, 0x31	; 49
    50de:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    50e2:	6b 01       	movw	r12, r22
    50e4:	7c 01       	movw	r14, r24
    50e6:	a5 01       	movw	r20, r10
    50e8:	94 01       	movw	r18, r8
    50ea:	e7 96       	adiw	r28, 0x37	; 55
    50ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    50ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    50f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    50f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    50f4:	e7 97       	sbiw	r28, 0x37	; 55
    50f6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    50fa:	9b 01       	movw	r18, r22
    50fc:	ac 01       	movw	r20, r24
    50fe:	c7 01       	movw	r24, r14
    5100:	b6 01       	movw	r22, r12
    5102:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    5106:	f2 01       	movw	r30, r4
    5108:	61 93       	st	Z+, r22
    510a:	71 93       	st	Z+, r23
    510c:	81 93       	st	Z+, r24
    510e:	91 93       	st	Z+, r25
    5110:	2f 01       	movw	r4, r30
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    5112:	06 15       	cp	r16, r6
    5114:	17 05       	cpc	r17, r7
    5116:	89 f6       	brne	.-94     	; 0x50ba <quest+0x5e0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    5118:	be 01       	movw	r22, r28
    511a:	6b 5d       	subi	r22, 0xDB	; 219
    511c:	7f 4f       	sbci	r23, 0xFF	; 255
    511e:	ce 01       	movw	r24, r28
    5120:	49 96       	adiw	r24, 0x19	; 25
    5122:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vector_dot_product>
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e8       	ldi	r20, 0x80	; 128
    512c:	5f e3       	ldi	r21, 0x3F	; 63
    512e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <__addsf3>
    5132:	e1 96       	adiw	r28, 0x31	; 49
    5134:	2c ad       	ldd	r18, Y+60	; 0x3c
    5136:	3d ad       	ldd	r19, Y+61	; 0x3d
    5138:	4e ad       	ldd	r20, Y+62	; 0x3e
    513a:	5f ad       	ldd	r21, Y+63	; 0x3f
    513c:	e1 97       	sbiw	r28, 0x31	; 49
    513e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    5142:	a5 96       	adiw	r28, 0x25	; 37
    5144:	0c ad       	ldd	r16, Y+60	; 0x3c
    5146:	1d ad       	ldd	r17, Y+61	; 0x3d
    5148:	2e ad       	ldd	r18, Y+62	; 0x3e
    514a:	3f ad       	ldd	r19, Y+63	; 0x3f
    514c:	a5 97       	sbiw	r28, 0x25	; 37
    514e:	e3 96       	adiw	r28, 0x33	; 51
    5150:	ee ad       	ldd	r30, Y+62	; 0x3e
    5152:	ff ad       	ldd	r31, Y+63	; 0x3f
    5154:	e3 97       	sbiw	r28, 0x33	; 51
    5156:	00 83       	st	Z, r16
    5158:	11 83       	std	Z+1, r17	; 0x01
    515a:	22 83       	std	Z+2, r18	; 0x02
    515c:	33 83       	std	Z+3, r19	; 0x03
    515e:	a9 96       	adiw	r28, 0x29	; 41
    5160:	0c ad       	ldd	r16, Y+60	; 0x3c
    5162:	1d ad       	ldd	r17, Y+61	; 0x3d
    5164:	2e ad       	ldd	r18, Y+62	; 0x3e
    5166:	3f ad       	ldd	r19, Y+63	; 0x3f
    5168:	a9 97       	sbiw	r28, 0x29	; 41
    516a:	04 83       	std	Z+4, r16	; 0x04
    516c:	15 83       	std	Z+5, r17	; 0x05
    516e:	26 83       	std	Z+6, r18	; 0x06
    5170:	37 83       	std	Z+7, r19	; 0x07
    5172:	ad 96       	adiw	r28, 0x2d	; 45
    5174:	0c ad       	ldd	r16, Y+60	; 0x3c
    5176:	1d ad       	ldd	r17, Y+61	; 0x3d
    5178:	2e ad       	ldd	r18, Y+62	; 0x3e
    517a:	3f ad       	ldd	r19, Y+63	; 0x3f
    517c:	ad 97       	sbiw	r28, 0x2d	; 45
    517e:	00 87       	std	Z+8, r16	; 0x08
    5180:	11 87       	std	Z+9, r17	; 0x09
    5182:	22 87       	std	Z+10, r18	; 0x0a
    5184:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    5186:	64 87       	std	Z+12, r22	; 0x0c
    5188:	75 87       	std	Z+13, r23	; 0x0d
    518a:	86 87       	std	Z+14, r24	; 0x0e
    518c:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    518e:	ec 96       	adiw	r28, 0x3c	; 60
    5190:	4c ad       	ldd	r20, Y+60	; 0x3c
    5192:	5d ad       	ldd	r21, Y+61	; 0x3d
    5194:	6e ad       	ldd	r22, Y+62	; 0x3e
    5196:	7f ad       	ldd	r23, Y+63	; 0x3f
    5198:	ec 97       	sbiw	r28, 0x3c	; 60
    519a:	cf 01       	movw	r24, r30
    519c:	0e 94 8f 20 	call	0x411e	; 0x411e <scalar_into_quaternion>
    51a0:	7d c0       	rjmp	.+250    	; 0x529c <quest+0x7c2>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    51a2:	e3 96       	adiw	r28, 0x33	; 51
    51a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    51a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    51a8:	e3 97       	sbiw	r28, 0x33	; 51
    51aa:	10 82       	st	Z, r1
    51ac:	11 82       	std	Z+1, r1	; 0x01
    51ae:	12 82       	std	Z+2, r1	; 0x02
    51b0:	13 82       	std	Z+3, r1	; 0x03
    51b2:	14 82       	std	Z+4, r1	; 0x04
    51b4:	15 82       	std	Z+5, r1	; 0x05
    51b6:	16 82       	std	Z+6, r1	; 0x06
    51b8:	17 82       	std	Z+7, r1	; 0x07
    51ba:	10 86       	std	Z+8, r1	; 0x08
    51bc:	11 86       	std	Z+9, r1	; 0x09
    51be:	12 86       	std	Z+10, r1	; 0x0a
    51c0:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    51c2:	80 e0       	ldi	r24, 0x00	; 0
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	a0 e8       	ldi	r26, 0x80	; 128
    51c8:	bf e3       	ldi	r27, 0x3F	; 63
    51ca:	84 87       	std	Z+12, r24	; 0x0c
    51cc:	95 87       	std	Z+13, r25	; 0x0d
    51ce:	a6 87       	std	Z+14, r26	; 0x0e
    51d0:	b7 87       	std	Z+15, r27	; 0x0f
    51d2:	64 c0       	rjmp	.+200    	; 0x529c <quest+0x7c2>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    51d4:	80 90 e8 04 	lds	r8, 0x04E8	; 0x8004e8 <Current_state+0x3d>
    51d8:	90 90 e9 04 	lds	r9, 0x04E9	; 0x8004e9 <Current_state+0x3e>
    51dc:	a0 90 ea 04 	lds	r10, 0x04EA	; 0x8004ea <Current_state+0x3f>
    51e0:	b0 90 eb 04 	lds	r11, 0x04EB	; 0x8004eb <Current_state+0x40>
    51e4:	c0 90 ec 04 	lds	r12, 0x04EC	; 0x8004ec <Current_state+0x41>
    51e8:	d0 90 ed 04 	lds	r13, 0x04ED	; 0x8004ed <Current_state+0x42>
    51ec:	e0 90 ee 04 	lds	r14, 0x04EE	; 0x8004ee <Current_state+0x43>
    51f0:	f0 90 ef 04 	lds	r15, 0x04EF	; 0x8004ef <Current_state+0x44>
    51f4:	a7 01       	movw	r20, r14
    51f6:	96 01       	movw	r18, r12
    51f8:	c5 01       	movw	r24, r10
    51fa:	b4 01       	movw	r22, r8
    51fc:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    5200:	18 16       	cp	r1, r24
    5202:	4c f0       	brlt	.+18     	; 0x5216 <quest+0x73c>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5204:	f7 fa       	bst	r15, 7
    5206:	f0 94       	com	r15
    5208:	f7 f8       	bld	r15, 7
    520a:	f0 94       	com	r15
    520c:	c9 82       	std	Y+1, r12	; 0x01
    520e:	da 82       	std	Y+2, r13	; 0x02
    5210:	eb 82       	std	Y+3, r14	; 0x03
    5212:	fc 82       	std	Y+4, r15	; 0x04
    5214:	04 c0       	rjmp	.+8      	; 0x521e <quest+0x744>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    5216:	89 82       	std	Y+1, r8	; 0x01
    5218:	9a 82       	std	Y+2, r9	; 0x02
    521a:	ab 82       	std	Y+3, r10	; 0x03
    521c:	bc 82       	std	Y+4, r11	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    521e:	80 90 f0 04 	lds	r8, 0x04F0	; 0x8004f0 <Current_state+0x45>
    5222:	90 90 f1 04 	lds	r9, 0x04F1	; 0x8004f1 <Current_state+0x46>
    5226:	a0 90 f2 04 	lds	r10, 0x04F2	; 0x8004f2 <Current_state+0x47>
    522a:	b0 90 f3 04 	lds	r11, 0x04F3	; 0x8004f3 <Current_state+0x48>
    522e:	c0 90 f4 04 	lds	r12, 0x04F4	; 0x8004f4 <Current_state+0x49>
    5232:	d0 90 f5 04 	lds	r13, 0x04F5	; 0x8004f5 <Current_state+0x4a>
    5236:	e0 90 f6 04 	lds	r14, 0x04F6	; 0x8004f6 <Current_state+0x4b>
    523a:	f0 90 f7 04 	lds	r15, 0x04F7	; 0x8004f7 <Current_state+0x4c>
    523e:	a7 01       	movw	r20, r14
    5240:	96 01       	movw	r18, r12
    5242:	c5 01       	movw	r24, r10
    5244:	b4 01       	movw	r22, r8
    5246:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    524a:	18 16       	cp	r1, r24
    524c:	4c f0       	brlt	.+18     	; 0x5260 <quest+0x786>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    524e:	f7 fa       	bst	r15, 7
    5250:	f0 94       	com	r15
    5252:	f7 f8       	bld	r15, 7
    5254:	f0 94       	com	r15
    5256:	cd 82       	std	Y+5, r12	; 0x05
    5258:	de 82       	std	Y+6, r13	; 0x06
    525a:	ef 82       	std	Y+7, r14	; 0x07
    525c:	f8 86       	std	Y+8, r15	; 0x08
    525e:	04 c0       	rjmp	.+8      	; 0x5268 <quest+0x78e>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    5260:	8d 82       	std	Y+5, r8	; 0x05
    5262:	9e 82       	std	Y+6, r9	; 0x06
    5264:	af 82       	std	Y+7, r10	; 0x07
    5266:	b8 86       	std	Y+8, r11	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5268:	80 90 f8 04 	lds	r8, 0x04F8	; 0x8004f8 <Current_state+0x4d>
    526c:	90 90 f9 04 	lds	r9, 0x04F9	; 0x8004f9 <Current_state+0x4e>
    5270:	a0 90 fa 04 	lds	r10, 0x04FA	; 0x8004fa <Current_state+0x4f>
    5274:	b0 90 fb 04 	lds	r11, 0x04FB	; 0x8004fb <Current_state+0x50>
    5278:	c0 90 fc 04 	lds	r12, 0x04FC	; 0x8004fc <Current_state+0x51>
    527c:	d0 90 fd 04 	lds	r13, 0x04FD	; 0x8004fd <Current_state+0x52>
    5280:	e0 90 fe 04 	lds	r14, 0x04FE	; 0x8004fe <Current_state+0x53>
    5284:	f0 90 ff 04 	lds	r15, 0x04FF	; 0x8004ff <Current_state+0x54>
    5288:	a7 01       	movw	r20, r14
    528a:	96 01       	movw	r18, r12
    528c:	c5 01       	movw	r24, r10
    528e:	b4 01       	movw	r22, r8
    5290:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__gesf2>
    5294:	18 16       	cp	r1, r24
    5296:	0c f4       	brge	.+2      	; 0x529a <quest+0x7c0>
    5298:	91 cc       	rjmp	.-1758   	; 0x4bbc <quest+0xe2>
    529a:	95 cc       	rjmp	.-1750   	; 0x4bc6 <quest+0xec>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    529c:	e8 96       	adiw	r28, 0x38	; 56
    529e:	ff ad       	ldd	r31, Y+63	; 0x3f
    52a0:	e8 97       	sbiw	r28, 0x38	; 56
    52a2:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <light_prev.2043>
 
  return light;
   
}
    52a6:	8f 2f       	mov	r24, r31
    52a8:	c5 58       	subi	r28, 0x85	; 133
    52aa:	df 4f       	sbci	r29, 0xFF	; 255
    52ac:	0f b6       	in	r0, 0x3f	; 63
    52ae:	f8 94       	cli
    52b0:	de bf       	out	0x3e, r29	; 62
    52b2:	0f be       	out	0x3f, r0	; 63
    52b4:	cd bf       	out	0x3d, r28	; 61
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	1f 91       	pop	r17
    52bc:	0f 91       	pop	r16
    52be:	ff 90       	pop	r15
    52c0:	ef 90       	pop	r14
    52c2:	df 90       	pop	r13
    52c4:	cf 90       	pop	r12
    52c6:	bf 90       	pop	r11
    52c8:	af 90       	pop	r10
    52ca:	9f 90       	pop	r9
    52cc:	8f 90       	pop	r8
    52ce:	7f 90       	pop	r7
    52d0:	6f 90       	pop	r6
    52d2:	5f 90       	pop	r5
    52d4:	4f 90       	pop	r4
    52d6:	3f 90       	pop	r3
    52d8:	2f 90       	pop	r2
    52da:	08 95       	ret

000052dc <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    52dc:	2f 92       	push	r2
    52de:	3f 92       	push	r3
    52e0:	4f 92       	push	r4
    52e2:	5f 92       	push	r5
    52e4:	6f 92       	push	r6
    52e6:	7f 92       	push	r7
    52e8:	8f 92       	push	r8
    52ea:	9f 92       	push	r9
    52ec:	af 92       	push	r10
    52ee:	bf 92       	push	r11
    52f0:	cf 92       	push	r12
    52f2:	df 92       	push	r13
    52f4:	ef 92       	push	r14
    52f6:	ff 92       	push	r15
    52f8:	0f 93       	push	r16
    52fa:	1f 93       	push	r17
    52fc:	cf 93       	push	r28
    52fe:	df 93       	push	r29
    5300:	cd b7       	in	r28, 0x3d	; 61
    5302:	de b7       	in	r29, 0x3e	; 62
    5304:	c6 5c       	subi	r28, 0xC6	; 198
    5306:	d1 09       	sbc	r29, r1
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	de bf       	out	0x3e, r29	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	cd bf       	out	0x3d, r28	; 61
    5312:	cd 53       	subi	r28, 0x3D	; 61
    5314:	df 4f       	sbci	r29, 0xFF	; 255
    5316:	88 83       	st	Y, r24
    5318:	c3 5c       	subi	r28, 0xC3	; 195
    531a:	d0 40       	sbci	r29, 0x00	; 0
    531c:	cc 53       	subi	r28, 0x3C	; 60
    531e:	df 4f       	sbci	r29, 0xFF	; 255
    5320:	98 83       	st	Y, r25
    5322:	c4 5c       	subi	r28, 0xC4	; 196
    5324:	d0 40       	sbci	r29, 0x00	; 0
    5326:	cb 53       	subi	r28, 0x3B	; 59
    5328:	df 4f       	sbci	r29, 0xFF	; 255
    532a:	68 83       	st	Y, r22
    532c:	c5 5c       	subi	r28, 0xC5	; 197
    532e:	d0 40       	sbci	r29, 0x00	; 0
    5330:	ca 53       	subi	r28, 0x3A	; 58
    5332:	df 4f       	sbci	r29, 0xFF	; 255
    5334:	78 83       	st	Y, r23
    5336:	c6 5c       	subi	r28, 0xC6	; 198
    5338:	d0 40       	sbci	r29, 0x00	; 0
    533a:	28 2e       	mov	r2, r24
    533c:	39 2e       	mov	r3, r25
    533e:	0a e5       	ldi	r16, 0x5A	; 90
    5340:	14 e0       	ldi	r17, 0x04	; 4
    5342:	ce 01       	movw	r24, r28
    5344:	01 96       	adiw	r24, 0x01	; 1
    5346:	7c 01       	movw	r14, r24
    5348:	de 01       	movw	r26, r28
    534a:	51 96       	adiw	r26, 0x11	; 17
    534c:	cb 54       	subi	r28, 0x4B	; 75
    534e:	df 4f       	sbci	r29, 0xFF	; 255
    5350:	b9 83       	std	Y+1, r27	; 0x01
    5352:	a8 83       	st	Y, r26
    5354:	c5 5b       	subi	r28, 0xB5	; 181
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	0f 2e       	mov	r0, r31
    535a:	fa e6       	ldi	r31, 0x6A	; 106
    535c:	cf 2e       	mov	r12, r31
    535e:	f4 e0       	ldi	r31, 0x04	; 4
    5360:	df 2e       	mov	r13, r31
    5362:	f0 2d       	mov	r31, r0
    5364:	cf 54       	subi	r28, 0x4F	; 79
    5366:	df 4f       	sbci	r29, 0xFF	; 255
    5368:	b9 83       	std	Y+1, r27	; 0x01
    536a:	a8 83       	st	Y, r26
    536c:	c1 5b       	subi	r28, 0xB1	; 177
    536e:	d0 40       	sbci	r29, 0x00	; 0
    5370:	c7 54       	subi	r28, 0x47	; 71
    5372:	df 4f       	sbci	r29, 0xFF	; 255
    5374:	99 83       	std	Y+1, r25	; 0x01
    5376:	88 83       	st	Y, r24
    5378:	c9 5b       	subi	r28, 0xB9	; 185
    537a:	d0 40       	sbci	r29, 0x00	; 0
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    537c:	f1 01       	movw	r30, r2
    537e:	81 90       	ld	r8, Z+
    5380:	91 90       	ld	r9, Z+
    5382:	a1 90       	ld	r10, Z+
    5384:	b1 90       	ld	r11, Z+
    5386:	1f 01       	movw	r2, r30
    5388:	d8 01       	movw	r26, r16
    538a:	4d 90       	ld	r4, X+
    538c:	5d 90       	ld	r5, X+
    538e:	6d 90       	ld	r6, X+
    5390:	7d 90       	ld	r7, X+
    5392:	8d 01       	movw	r16, r26
    5394:	a3 01       	movw	r20, r6
    5396:	92 01       	movw	r18, r4
    5398:	c5 01       	movw	r24, r10
    539a:	b4 01       	movw	r22, r8
    539c:	29 d7       	rcall	.+3666   	; 0x61f0 <__subsf3>
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	5f e3       	ldi	r21, 0x3F	; 63
    53a6:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    53aa:	f7 01       	movw	r30, r14
    53ac:	61 93       	st	Z+, r22
    53ae:	71 93       	st	Z+, r23
    53b0:	81 93       	st	Z+, r24
    53b2:	91 93       	st	Z+, r25
    53b4:	7f 01       	movw	r14, r30
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    53b6:	a3 01       	movw	r20, r6
    53b8:	92 01       	movw	r18, r4
    53ba:	c5 01       	movw	r24, r10
    53bc:	b4 01       	movw	r22, r8
    53be:	19 d7       	rcall	.+3634   	; 0x61f2 <__addsf3>
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e0       	ldi	r20, 0x00	; 0
    53c6:	5f e3       	ldi	r21, 0x3F	; 63
    53c8:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    53cc:	cf 54       	subi	r28, 0x4F	; 79
    53ce:	df 4f       	sbci	r29, 0xFF	; 255
    53d0:	a8 81       	ld	r26, Y
    53d2:	b9 81       	ldd	r27, Y+1	; 0x01
    53d4:	c1 5b       	subi	r28, 0xB1	; 177
    53d6:	d0 40       	sbci	r29, 0x00	; 0
    53d8:	6d 93       	st	X+, r22
    53da:	7d 93       	st	X+, r23
    53dc:	8d 93       	st	X+, r24
    53de:	9d 93       	st	X+, r25
    53e0:	cf 54       	subi	r28, 0x4F	; 79
    53e2:	df 4f       	sbci	r29, 0xFF	; 255
    53e4:	b9 83       	std	Y+1, r27	; 0x01
    53e6:	a8 83       	st	Y, r26
    53e8:	c1 5b       	subi	r28, 0xB1	; 177
    53ea:	d0 40       	sbci	r29, 0x00	; 0
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    53ec:	0c 15       	cp	r16, r12
    53ee:	1d 05       	cpc	r17, r13
    53f0:	29 f6       	brne	.-118    	; 0x537c <omega_estimation+0xa0>
    53f2:	c7 54       	subi	r28, 0x47	; 71
    53f4:	df 4f       	sbci	r29, 0xFF	; 255
    53f6:	e8 80       	ld	r14, Y
    53f8:	f9 80       	ldd	r15, Y+1	; 0x01
    53fa:	c9 5b       	subi	r28, 0xB9	; 185
    53fc:	d0 40       	sbci	r29, 0x00	; 0
    53fe:	de 01       	movw	r26, r28
    5400:	9d 96       	adiw	r26, 0x2d	; 45
    5402:	8e 01       	movw	r16, r28
    5404:	0f 5d       	subi	r16, 0xDF	; 223
    5406:	1f 4f       	sbci	r17, 0xFF	; 255
    5408:	ce 01       	movw	r24, r28
    540a:	0d 96       	adiw	r24, 0x0d	; 13
    540c:	bd 01       	movw	r22, r26
    540e:	98 01       	movw	r18, r16
    5410:	f7 01       	movw	r30, r14
    5412:	cb 54       	subi	r28, 0x4B	; 75
    5414:	df 4f       	sbci	r29, 0xFF	; 255
    5416:	48 81       	ld	r20, Y
    5418:	59 81       	ldd	r21, Y+1	; 0x01
    541a:	c5 5b       	subi	r28, 0xB5	; 181
    541c:	d0 40       	sbci	r29, 0x00	; 0
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    541e:	c1 90       	ld	r12, Z+
    5420:	d1 90       	ld	r13, Z+
    5422:	e1 90       	ld	r14, Z+
    5424:	f1 90       	ld	r15, Z+
    5426:	db 01       	movw	r26, r22
    5428:	cd 92       	st	X+, r12
    542a:	dd 92       	st	X+, r13
    542c:	ed 92       	st	X+, r14
    542e:	fd 92       	st	X+, r15
    5430:	bd 01       	movw	r22, r26
    e[i] = q[i];
    5432:	da 01       	movw	r26, r20
    5434:	cd 90       	ld	r12, X+
    5436:	dd 90       	ld	r13, X+
    5438:	ed 90       	ld	r14, X+
    543a:	fd 90       	ld	r15, X+
    543c:	ad 01       	movw	r20, r26
    543e:	d9 01       	movw	r26, r18
    5440:	cd 92       	st	X+, r12
    5442:	dd 92       	st	X+, r13
    5444:	ed 92       	st	X+, r14
    5446:	fd 92       	st	X+, r15
    5448:	9d 01       	movw	r18, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    544a:	e8 17       	cp	r30, r24
    544c:	f9 07       	cpc	r31, r25
    544e:	39 f7       	brne	.-50     	; 0x541e <omega_estimation+0x142>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    5450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5452:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5454:	af 8d       	ldd	r26, Y+31	; 0x1f
    5456:	b8 a1       	ldd	r27, Y+32	; 0x20
    5458:	c7 54       	subi	r28, 0x47	; 71
    545a:	df 4f       	sbci	r29, 0xFF	; 255
    545c:	88 83       	st	Y, r24
    545e:	99 83       	std	Y+1, r25	; 0x01
    5460:	aa 83       	std	Y+2, r26	; 0x02
    5462:	bb 83       	std	Y+3, r27	; 0x03
    5464:	c9 5b       	subi	r28, 0xB9	; 185
    5466:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5468:	ad 96       	adiw	r28, 0x2d	; 45
    546a:	1c ae       	std	Y+60, r1	; 0x3c
    546c:	1d ae       	std	Y+61, r1	; 0x3d
    546e:	1e ae       	std	Y+62, r1	; 0x3e
    5470:	1f ae       	std	Y+63, r1	; 0x3f
    5472:	ad 97       	sbiw	r28, 0x2d	; 45
    5474:	c9 a4       	ldd	r12, Y+41	; 0x29
    5476:	da a4       	ldd	r13, Y+42	; 0x2a
    5478:	eb a4       	ldd	r14, Y+43	; 0x2b
    547a:	fc a4       	ldd	r15, Y+44	; 0x2c
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e0       	ldi	r20, 0x00	; 0
    5482:	50 ec       	ldi	r21, 0xC0	; 192
    5484:	c7 01       	movw	r24, r14
    5486:	b6 01       	movw	r22, r12
    5488:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    548c:	e1 96       	adiw	r28, 0x31	; 49
    548e:	6c af       	std	Y+60, r22	; 0x3c
    5490:	7d af       	std	Y+61, r23	; 0x3d
    5492:	8e af       	std	Y+62, r24	; 0x3e
    5494:	9f af       	std	Y+63, r25	; 0x3f
    5496:	e1 97       	sbiw	r28, 0x31	; 49
    5498:	8d a0       	ldd	r8, Y+37	; 0x25
    549a:	9e a0       	ldd	r9, Y+38	; 0x26
    549c:	af a0       	ldd	r10, Y+39	; 0x27
    549e:	b8 a4       	ldd	r11, Y+40	; 0x28
    54a0:	a5 01       	movw	r20, r10
    54a2:	94 01       	movw	r18, r8
    54a4:	c5 01       	movw	r24, r10
    54a6:	b4 01       	movw	r22, r8
    54a8:	a4 d6       	rcall	.+3400   	; 0x61f2 <__addsf3>
    54aa:	e5 96       	adiw	r28, 0x35	; 53
    54ac:	6c af       	std	Y+60, r22	; 0x3c
    54ae:	7d af       	std	Y+61, r23	; 0x3d
    54b0:	8e af       	std	Y+62, r24	; 0x3e
    54b2:	9f af       	std	Y+63, r25	; 0x3f
    54b4:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    54b6:	a7 01       	movw	r20, r14
    54b8:	96 01       	movw	r18, r12
    54ba:	c7 01       	movw	r24, r14
    54bc:	b6 01       	movw	r22, r12
    54be:	99 d6       	rcall	.+3378   	; 0x61f2 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    54c0:	e9 96       	adiw	r28, 0x39	; 57
    54c2:	6c af       	std	Y+60, r22	; 0x3c
    54c4:	7d af       	std	Y+61, r23	; 0x3d
    54c6:	8e af       	std	Y+62, r24	; 0x3e
    54c8:	9f af       	std	Y+63, r25	; 0x3f
    54ca:	e9 97       	sbiw	r28, 0x39	; 57
    54cc:	ed 96       	adiw	r28, 0x3d	; 61
    54ce:	1c ae       	std	Y+60, r1	; 0x3c
    54d0:	1d ae       	std	Y+61, r1	; 0x3d
    54d2:	1e ae       	std	Y+62, r1	; 0x3e
    54d4:	1f ae       	std	Y+63, r1	; 0x3f
    54d6:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    54d8:	c9 a0       	ldd	r12, Y+33	; 0x21
    54da:	da a0       	ldd	r13, Y+34	; 0x22
    54dc:	eb a0       	ldd	r14, Y+35	; 0x23
    54de:	fc a0       	ldd	r15, Y+36	; 0x24
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	40 e0       	ldi	r20, 0x00	; 0
    54e6:	50 ec       	ldi	r21, 0xC0	; 192
    54e8:	c7 01       	movw	r24, r14
    54ea:	b6 01       	movw	r22, r12
    54ec:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    54f0:	c3 58       	subi	r28, 0x83	; 131
    54f2:	df 4f       	sbci	r29, 0xFF	; 255
    54f4:	68 83       	st	Y, r22
    54f6:	79 83       	std	Y+1, r23	; 0x01
    54f8:	8a 83       	std	Y+2, r24	; 0x02
    54fa:	9b 83       	std	Y+3, r25	; 0x03
    54fc:	cd 57       	subi	r28, 0x7D	; 125
    54fe:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	40 e0       	ldi	r20, 0x00	; 0
    5506:	50 ec       	ldi	r21, 0xC0	; 192
    5508:	c5 01       	movw	r24, r10
    550a:	b4 01       	movw	r22, r8
    550c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5510:	cf 57       	subi	r28, 0x7F	; 127
    5512:	df 4f       	sbci	r29, 0xFF	; 255
    5514:	68 83       	st	Y, r22
    5516:	79 83       	std	Y+1, r23	; 0x01
    5518:	8a 83       	std	Y+2, r24	; 0x02
    551a:	9b 83       	std	Y+3, r25	; 0x03
    551c:	c1 58       	subi	r28, 0x81	; 129
    551e:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5520:	a7 01       	movw	r20, r14
    5522:	96 01       	movw	r18, r12
    5524:	c7 01       	movw	r24, r14
    5526:	b6 01       	movw	r22, r12
    5528:	64 d6       	rcall	.+3272   	; 0x61f2 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    552a:	cb 57       	subi	r28, 0x7B	; 123
    552c:	df 4f       	sbci	r29, 0xFF	; 255
    552e:	68 83       	st	Y, r22
    5530:	79 83       	std	Y+1, r23	; 0x01
    5532:	8a 83       	std	Y+2, r24	; 0x02
    5534:	9b 83       	std	Y+3, r25	; 0x03
    5536:	c5 58       	subi	r28, 0x85	; 133
    5538:	d0 40       	sbci	r29, 0x00	; 0
    553a:	c7 57       	subi	r28, 0x77	; 119
    553c:	df 4f       	sbci	r29, 0xFF	; 255
    553e:	18 82       	st	Y, r1
    5540:	19 82       	std	Y+1, r1	; 0x01
    5542:	1a 82       	std	Y+2, r1	; 0x02
    5544:	1b 82       	std	Y+3, r1	; 0x03
    5546:	c9 58       	subi	r28, 0x89	; 137
    5548:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    554a:	c7 54       	subi	r28, 0x47	; 71
    554c:	df 4f       	sbci	r29, 0xFF	; 255
    554e:	28 81       	ld	r18, Y
    5550:	39 81       	ldd	r19, Y+1	; 0x01
    5552:	4a 81       	ldd	r20, Y+2	; 0x02
    5554:	5b 81       	ldd	r21, Y+3	; 0x03
    5556:	c9 5b       	subi	r28, 0xB9	; 185
    5558:	d0 40       	sbci	r29, 0x00	; 0
    555a:	ca 01       	movw	r24, r20
    555c:	b9 01       	movw	r22, r18
    555e:	49 d6       	rcall	.+3218   	; 0x61f2 <__addsf3>
    5560:	c3 57       	subi	r28, 0x73	; 115
    5562:	df 4f       	sbci	r29, 0xFF	; 255
    5564:	68 83       	st	Y, r22
    5566:	79 83       	std	Y+1, r23	; 0x01
    5568:	8a 83       	std	Y+2, r24	; 0x02
    556a:	9b 83       	std	Y+3, r25	; 0x03
    556c:	cd 58       	subi	r28, 0x8D	; 141
    556e:	d0 40       	sbci	r29, 0x00	; 0
    5570:	cf 56       	subi	r28, 0x6F	; 111
    5572:	df 4f       	sbci	r29, 0xFF	; 255
    5574:	18 82       	st	Y, r1
    5576:	19 82       	std	Y+1, r1	; 0x01
    5578:	1a 82       	std	Y+2, r1	; 0x02
    557a:	1b 82       	std	Y+3, r1	; 0x03
    557c:	c1 59       	subi	r28, 0x91	; 145
    557e:	d0 40       	sbci	r29, 0x00	; 0
    5580:	cb 56       	subi	r28, 0x6B	; 107
    5582:	df 4f       	sbci	r29, 0xFF	; 255
    5584:	18 82       	st	Y, r1
    5586:	19 82       	std	Y+1, r1	; 0x01
    5588:	1a 82       	std	Y+2, r1	; 0x02
    558a:	1b 82       	std	Y+3, r1	; 0x03
    558c:	c5 59       	subi	r28, 0x95	; 149
    558e:	d0 40       	sbci	r29, 0x00	; 0
    5590:	c7 56       	subi	r28, 0x67	; 103
    5592:	df 4f       	sbci	r29, 0xFF	; 255
    5594:	18 82       	st	Y, r1
    5596:	19 82       	std	Y+1, r1	; 0x01
    5598:	1a 82       	std	Y+2, r1	; 0x02
    559a:	1b 82       	std	Y+3, r1	; 0x03
    559c:	c9 59       	subi	r28, 0x99	; 153
    559e:	d0 40       	sbci	r29, 0x00	; 0
    55a0:	c3 56       	subi	r28, 0x63	; 99
    55a2:	df 4f       	sbci	r29, 0xFF	; 255
    55a4:	68 83       	st	Y, r22
    55a6:	79 83       	std	Y+1, r23	; 0x01
    55a8:	8a 83       	std	Y+2, r24	; 0x02
    55aa:	9b 83       	std	Y+3, r25	; 0x03
    55ac:	cd 59       	subi	r28, 0x9D	; 157
    55ae:	d0 40       	sbci	r29, 0x00	; 0
    55b0:	cf 55       	subi	r28, 0x5F	; 95
    55b2:	df 4f       	sbci	r29, 0xFF	; 255
    55b4:	18 82       	st	Y, r1
    55b6:	19 82       	std	Y+1, r1	; 0x01
    55b8:	1a 82       	std	Y+2, r1	; 0x02
    55ba:	1b 82       	std	Y+3, r1	; 0x03
    55bc:	c1 5a       	subi	r28, 0xA1	; 161
    55be:	d0 40       	sbci	r29, 0x00	; 0
    55c0:	cb 55       	subi	r28, 0x5B	; 91
    55c2:	df 4f       	sbci	r29, 0xFF	; 255
    55c4:	18 82       	st	Y, r1
    55c6:	19 82       	std	Y+1, r1	; 0x01
    55c8:	1a 82       	std	Y+2, r1	; 0x02
    55ca:	1b 82       	std	Y+3, r1	; 0x03
    55cc:	c5 5a       	subi	r28, 0xA5	; 165
    55ce:	d0 40       	sbci	r29, 0x00	; 0
    55d0:	c7 55       	subi	r28, 0x57	; 87
    55d2:	df 4f       	sbci	r29, 0xFF	; 255
    55d4:	18 82       	st	Y, r1
    55d6:	19 82       	std	Y+1, r1	; 0x01
    55d8:	1a 82       	std	Y+2, r1	; 0x02
    55da:	1b 82       	std	Y+3, r1	; 0x03
    55dc:	c9 5a       	subi	r28, 0xA9	; 169
    55de:	d0 40       	sbci	r29, 0x00	; 0
    55e0:	c3 55       	subi	r28, 0x53	; 83
    55e2:	df 4f       	sbci	r29, 0xFF	; 255
    55e4:	68 83       	st	Y, r22
    55e6:	79 83       	std	Y+1, r23	; 0x01
    55e8:	8a 83       	std	Y+2, r24	; 0x02
    55ea:	9b 83       	std	Y+3, r25	; 0x03
    55ec:	cd 5a       	subi	r28, 0xAD	; 173
    55ee:	d0 40       	sbci	r29, 0x00	; 0
    55f0:	3e 01       	movw	r6, r28
    55f2:	95 e4       	ldi	r25, 0x45	; 69
    55f4:	69 0e       	add	r6, r25
    55f6:	71 1c       	adc	r7, r1
    55f8:	c3 54       	subi	r28, 0x43	; 67
    55fa:	df 4f       	sbci	r29, 0xFF	; 255
    55fc:	19 83       	std	Y+1, r17	; 0x01
    55fe:	08 83       	st	Y, r16
    5600:	cd 5b       	subi	r28, 0xBD	; 189
    5602:	d0 40       	sbci	r29, 0x00	; 0
    5604:	81 2c       	mov	r8, r1
    5606:	91 2c       	mov	r9, r1
    5608:	5e 01       	movw	r10, r28
    560a:	ad e2       	ldi	r26, 0x2D	; 45
    560c:	aa 0e       	add	r10, r26
    560e:	b1 1c       	adc	r11, r1
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    5610:	cf 53       	subi	r28, 0x3F	; 63
    5612:	df 4f       	sbci	r29, 0xFF	; 255
    5614:	08 83       	st	Y, r16
    5616:	c1 5c       	subi	r28, 0xC1	; 193
    5618:	d0 40       	sbci	r29, 0x00	; 0
    561a:	ce 53       	subi	r28, 0x3E	; 62
    561c:	df 4f       	sbci	r29, 0xFF	; 255
    561e:	18 83       	st	Y, r17
    5620:	c2 5c       	subi	r28, 0xC2	; 194
    5622:	d0 40       	sbci	r29, 0x00	; 0
    5624:	59 c0       	rjmp	.+178    	; 0x56d8 <omega_estimation+0x3fc>
    5626:	f1 01       	movw	r30, r2
    5628:	61 91       	ld	r22, Z+
    562a:	71 91       	ld	r23, Z+
    562c:	81 91       	ld	r24, Z+
    562e:	91 91       	ld	r25, Z+
    5630:	1f 01       	movw	r2, r30
    5632:	d6 01       	movw	r26, r12
    5634:	2d 91       	ld	r18, X+
    5636:	3d 91       	ld	r19, X+
    5638:	4d 91       	ld	r20, X+
    563a:	5d 91       	ld	r21, X+
    563c:	6d 01       	movw	r12, r26
    563e:	f2 01       	movw	r30, r4
    5640:	61 90       	ld	r6, Z+
    5642:	71 90       	ld	r7, Z+
    5644:	81 90       	ld	r8, Z+
    5646:	91 90       	ld	r9, Z+
    5648:	2f 01       	movw	r4, r30
    564a:	d2 d5       	rcall	.+2980   	; 0x61f0 <__subsf3>
    564c:	cf 54       	subi	r28, 0x4F	; 79
    564e:	df 4f       	sbci	r29, 0xFF	; 255
    5650:	68 83       	st	Y, r22
    5652:	79 83       	std	Y+1, r23	; 0x01
    5654:	8a 83       	std	Y+2, r24	; 0x02
    5656:	9b 83       	std	Y+3, r25	; 0x03
    5658:	c1 5b       	subi	r28, 0xB1	; 177
    565a:	d0 40       	sbci	r29, 0x00	; 0
    565c:	a4 01       	movw	r20, r8
    565e:	93 01       	movw	r18, r6
    5660:	cb 54       	subi	r28, 0x4B	; 75
    5662:	df 4f       	sbci	r29, 0xFF	; 255
    5664:	68 81       	ld	r22, Y
    5666:	79 81       	ldd	r23, Y+1	; 0x01
    5668:	8a 81       	ldd	r24, Y+2	; 0x02
    566a:	9b 81       	ldd	r25, Y+3	; 0x03
    566c:	c5 5b       	subi	r28, 0xB5	; 181
    566e:	d0 40       	sbci	r29, 0x00	; 0
    5670:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    5674:	c7 54       	subi	r28, 0x47	; 71
    5676:	df 4f       	sbci	r29, 0xFF	; 255
    5678:	28 81       	ld	r18, Y
    567a:	39 81       	ldd	r19, Y+1	; 0x01
    567c:	4a 81       	ldd	r20, Y+2	; 0x02
    567e:	5b 81       	ldd	r21, Y+3	; 0x03
    5680:	c9 5b       	subi	r28, 0xB9	; 185
    5682:	d0 40       	sbci	r29, 0x00	; 0
    5684:	9a d6       	rcall	.+3380   	; 0x63ba <__divsf3>
    5686:	9b 01       	movw	r18, r22
    5688:	ac 01       	movw	r20, r24
    568a:	cf 54       	subi	r28, 0x4F	; 79
    568c:	df 4f       	sbci	r29, 0xFF	; 255
    568e:	68 81       	ld	r22, Y
    5690:	79 81       	ldd	r23, Y+1	; 0x01
    5692:	8a 81       	ldd	r24, Y+2	; 0x02
    5694:	9b 81       	ldd	r25, Y+3	; 0x03
    5696:	c1 5b       	subi	r28, 0xB1	; 177
    5698:	d0 40       	sbci	r29, 0x00	; 0
    569a:	ab d5       	rcall	.+2902   	; 0x61f2 <__addsf3>
    569c:	d8 01       	movw	r26, r16
    569e:	6d 93       	st	X+, r22
    56a0:	7d 93       	st	X+, r23
    56a2:	8d 93       	st	X+, r24
    56a4:	9c 93       	st	X, r25
    56a6:	13 97       	sbiw	r26, 0x03	; 3
    56a8:	04 5f       	subi	r16, 0xF4	; 244
    56aa:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    56ac:	4a 14       	cp	r4, r10
    56ae:	5b 04       	cpc	r5, r11
    56b0:	09 f0       	breq	.+2      	; 0x56b4 <omega_estimation+0x3d8>
    56b2:	b9 cf       	rjmp	.-142    	; 0x5626 <omega_estimation+0x34a>
    56b4:	47 01       	movw	r8, r14
    56b6:	c1 54       	subi	r28, 0x41	; 65
    56b8:	df 4f       	sbci	r29, 0xFF	; 255
    56ba:	68 80       	ld	r6, Y
    56bc:	79 80       	ldd	r7, Y+1	; 0x01
    56be:	cf 5b       	subi	r28, 0xBF	; 191
    56c0:	d0 40       	sbci	r29, 0x00	; 0
    56c2:	bc e0       	ldi	r27, 0x0C	; 12
    56c4:	8b 0e       	add	r8, r27
    56c6:	91 1c       	adc	r9, r1
    56c8:	e4 e0       	ldi	r30, 0x04	; 4
    56ca:	6e 0e       	add	r6, r30
    56cc:	71 1c       	adc	r7, r1
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    56ce:	f4 e2       	ldi	r31, 0x24	; 36
    56d0:	8f 16       	cp	r8, r31
    56d2:	91 04       	cpc	r9, r1
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <omega_estimation+0x3fc>
    56d6:	40 c0       	rjmp	.+128    	; 0x5758 <omega_estimation+0x47c>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    56d8:	c3 54       	subi	r28, 0x43	; 67
    56da:	df 4f       	sbci	r29, 0xFF	; 255
    56dc:	a8 81       	ld	r26, Y
    56de:	b9 81       	ldd	r27, Y+1	; 0x01
    56e0:	cd 5b       	subi	r28, 0xBD	; 189
    56e2:	d0 40       	sbci	r29, 0x00	; 0
    56e4:	6d 91       	ld	r22, X+
    56e6:	7d 91       	ld	r23, X+
    56e8:	8d 91       	ld	r24, X+
    56ea:	9d 91       	ld	r25, X+
    56ec:	c3 54       	subi	r28, 0x43	; 67
    56ee:	df 4f       	sbci	r29, 0xFF	; 255
    56f0:	b9 83       	std	Y+1, r27	; 0x01
    56f2:	a8 83       	st	Y, r26
    56f4:	cd 5b       	subi	r28, 0xBD	; 189
    56f6:	d0 40       	sbci	r29, 0x00	; 0
    56f8:	9b 01       	movw	r18, r22
    56fa:	ac 01       	movw	r20, r24
    56fc:	7a d5       	rcall	.+2804   	; 0x61f2 <__addsf3>
    56fe:	cb 54       	subi	r28, 0x4B	; 75
    5700:	df 4f       	sbci	r29, 0xFF	; 255
    5702:	68 83       	st	Y, r22
    5704:	79 83       	std	Y+1, r23	; 0x01
    5706:	8a 83       	std	Y+2, r24	; 0x02
    5708:	9b 83       	std	Y+3, r25	; 0x03
    570a:	c5 5b       	subi	r28, 0xB5	; 181
    570c:	d0 40       	sbci	r29, 0x00	; 0
    570e:	0f 2e       	mov	r0, r31
    5710:	fd e8       	ldi	r31, 0x8D	; 141
    5712:	2f 2e       	mov	r2, r31
    5714:	31 2c       	mov	r3, r1
    5716:	f0 2d       	mov	r31, r0
    5718:	2c 0e       	add	r2, r28
    571a:	3d 1e       	adc	r3, r29
    571c:	28 0c       	add	r2, r8
    571e:	39 1c       	adc	r3, r9
    5720:	0f 2e       	mov	r0, r31
    5722:	f9 e6       	ldi	r31, 0x69	; 105
    5724:	cf 2e       	mov	r12, r31
    5726:	d1 2c       	mov	r13, r1
    5728:	f0 2d       	mov	r31, r0
    572a:	cc 0e       	add	r12, r28
    572c:	dd 1e       	adc	r13, r29
    572e:	c8 0c       	add	r12, r8
    5730:	d9 1c       	adc	r13, r9
    5732:	83 01       	movw	r16, r6
    5734:	cf 53       	subi	r28, 0x3F	; 63
    5736:	df 4f       	sbci	r29, 0xFF	; 255
    5738:	48 80       	ld	r4, Y
    573a:	c1 5c       	subi	r28, 0xC1	; 193
    573c:	d0 40       	sbci	r29, 0x00	; 0
    573e:	ce 53       	subi	r28, 0x3E	; 62
    5740:	df 4f       	sbci	r29, 0xFF	; 255
    5742:	58 80       	ld	r5, Y
    5744:	c2 5c       	subi	r28, 0xC2	; 194
    5746:	d0 40       	sbci	r29, 0x00	; 0
    5748:	74 01       	movw	r14, r8
    574a:	c1 54       	subi	r28, 0x41	; 65
    574c:	df 4f       	sbci	r29, 0xFF	; 255
    574e:	79 82       	std	Y+1, r7	; 0x01
    5750:	68 82       	st	Y, r6
    5752:	cf 5b       	subi	r28, 0xBF	; 191
    5754:	d0 40       	sbci	r29, 0x00	; 0
    5756:	67 cf       	rjmp	.-306    	; 0x5626 <omega_estimation+0x34a>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    5758:	ae 01       	movw	r20, r28
    575a:	47 5c       	subi	r20, 0xC7	; 199
    575c:	5f 4f       	sbci	r21, 0xFF	; 255
    575e:	be 01       	movw	r22, r28
    5760:	6b 5b       	subi	r22, 0xBB	; 187
    5762:	7f 4f       	sbci	r23, 0xFF	; 255
    5764:	ce 01       	movw	r24, r28
    5766:	8d 96       	adiw	r24, 0x2d	; 45
    5768:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vector_into_matrix>
    576c:	8e 01       	movw	r16, r28
    576e:	07 5c       	subi	r16, 0xC7	; 199
    5770:	1f 4f       	sbci	r17, 0xFF	; 255
    5772:	0f 2e       	mov	r0, r31
    5774:	fe e4       	ldi	r31, 0x4E	; 78
    5776:	cf 2e       	mov	r12, r31
    5778:	f4 e0       	ldi	r31, 0x04	; 4
    577a:	df 2e       	mov	r13, r31
    577c:	f0 2d       	mov	r31, r0
    577e:	cb 53       	subi	r28, 0x3B	; 59
    5780:	df 4f       	sbci	r29, 0xFF	; 255
    5782:	28 80       	ld	r2, Y
    5784:	c5 5c       	subi	r28, 0xC5	; 197
    5786:	d0 40       	sbci	r29, 0x00	; 0
    5788:	ca 53       	subi	r28, 0x3A	; 58
    578a:	df 4f       	sbci	r29, 0xFF	; 255
    578c:	38 80       	ld	r3, Y
    578e:	c6 5c       	subi	r28, 0xC6	; 198
    5790:	d0 40       	sbci	r29, 0x00	; 0
    5792:	78 01       	movw	r14, r16
    5794:	bc e0       	ldi	r27, 0x0C	; 12
    5796:	eb 0e       	add	r14, r27
    5798:	f1 1c       	adc	r15, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    579a:	f8 01       	movw	r30, r16
    579c:	61 91       	ld	r22, Z+
    579e:	71 91       	ld	r23, Z+
    57a0:	81 91       	ld	r24, Z+
    57a2:	91 91       	ld	r25, Z+
    57a4:	8f 01       	movw	r16, r30
    57a6:	d6 01       	movw	r26, r12
    57a8:	4d 90       	ld	r4, X+
    57aa:	5d 90       	ld	r5, X+
    57ac:	6d 90       	ld	r6, X+
    57ae:	7d 90       	ld	r7, X+
    57b0:	6d 01       	movw	r12, r26
    57b2:	28 e0       	ldi	r18, 0x08	; 8
    57b4:	31 e2       	ldi	r19, 0x21	; 33
    57b6:	44 e0       	ldi	r20, 0x04	; 4
    57b8:	5d e3       	ldi	r21, 0x3D	; 61
    57ba:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    57be:	4b 01       	movw	r8, r22
    57c0:	5c 01       	movw	r10, r24
    57c2:	20 ef       	ldi	r18, 0xF0	; 240
    57c4:	3d eb       	ldi	r19, 0xBD	; 189
    57c6:	47 e7       	ldi	r20, 0x77	; 119
    57c8:	5f e3       	ldi	r21, 0x3F	; 63
    57ca:	c3 01       	movw	r24, r6
    57cc:	b2 01       	movw	r22, r4
    57ce:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__mulsf3>
    57d2:	9b 01       	movw	r18, r22
    57d4:	ac 01       	movw	r20, r24
    57d6:	c5 01       	movw	r24, r10
    57d8:	b4 01       	movw	r22, r8
    57da:	0b d5       	rcall	.+2582   	; 0x61f2 <__addsf3>
    57dc:	f1 01       	movw	r30, r2
    57de:	61 93       	st	Z+, r22
    57e0:	71 93       	st	Z+, r23
    57e2:	81 93       	st	Z+, r24
    57e4:	91 93       	st	Z+, r25
    57e6:	1f 01       	movw	r2, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    57e8:	0e 15       	cp	r16, r14
    57ea:	1f 05       	cpc	r17, r15
    57ec:	b1 f6       	brne	.-84     	; 0x579a <omega_estimation+0x4be>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    57ee:	6a e5       	ldi	r22, 0x5A	; 90
    57f0:	74 e0       	ldi	r23, 0x04	; 4
    57f2:	cd 53       	subi	r28, 0x3D	; 61
    57f4:	df 4f       	sbci	r29, 0xFF	; 255
    57f6:	88 81       	ld	r24, Y
    57f8:	c3 5c       	subi	r28, 0xC3	; 195
    57fa:	d0 40       	sbci	r29, 0x00	; 0
    57fc:	cc 53       	subi	r28, 0x3C	; 60
    57fe:	df 4f       	sbci	r29, 0xFF	; 255
    5800:	98 81       	ld	r25, Y
    5802:	c4 5c       	subi	r28, 0xC4	; 196
    5804:	d0 40       	sbci	r29, 0x00	; 0
    5806:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    580a:	6e e4       	ldi	r22, 0x4E	; 78
    580c:	74 e0       	ldi	r23, 0x04	; 4
    580e:	cb 53       	subi	r28, 0x3B	; 59
    5810:	df 4f       	sbci	r29, 0xFF	; 255
    5812:	88 81       	ld	r24, Y
    5814:	c5 5c       	subi	r28, 0xC5	; 197
    5816:	d0 40       	sbci	r29, 0x00	; 0
    5818:	ca 53       	subi	r28, 0x3A	; 58
    581a:	df 4f       	sbci	r29, 0xFF	; 255
    581c:	98 81       	ld	r25, Y
    581e:	c6 5c       	subi	r28, 0xC6	; 198
    5820:	d0 40       	sbci	r29, 0x00	; 0
    5822:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    5826:	ca 53       	subi	r28, 0x3A	; 58
    5828:	df 4f       	sbci	r29, 0xFF	; 255
    582a:	0f b6       	in	r0, 0x3f	; 63
    582c:	f8 94       	cli
    582e:	de bf       	out	0x3e, r29	; 62
    5830:	0f be       	out	0x3f, r0	; 63
    5832:	cd bf       	out	0x3d, r28	; 61
    5834:	df 91       	pop	r29
    5836:	cf 91       	pop	r28
    5838:	1f 91       	pop	r17
    583a:	0f 91       	pop	r16
    583c:	ff 90       	pop	r15
    583e:	ef 90       	pop	r14
    5840:	df 90       	pop	r13
    5842:	cf 90       	pop	r12
    5844:	bf 90       	pop	r11
    5846:	af 90       	pop	r10
    5848:	9f 90       	pop	r9
    584a:	8f 90       	pop	r8
    584c:	7f 90       	pop	r7
    584e:	6f 90       	pop	r6
    5850:	5f 90       	pop	r5
    5852:	4f 90       	pop	r4
    5854:	3f 90       	pop	r3
    5856:	2f 90       	pop	r2
    5858:	08 95       	ret

0000585a <init_SPI>:
}

void init_SPI(void)
{
	///Set MOSI and SCK output, all others input
	DDRB = 0;
    585a:	17 ba       	out	0x17, r1	; 23
	DDRB = _BV(SPICLK) | _BV(SPIDO);
    585c:	86 e0       	ldi	r24, 0x06	; 6
    585e:	87 bb       	out	0x17, r24	; 23
	
	
	DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5860:	87 b3       	in	r24, 0x17	; 23
    5862:	81 63       	ori	r24, 0x31	; 49
    5864:	87 bb       	out	0x17, r24	; 23
	///Switch off all devices
	PORT_CS |= _BV(CC1020) | _BV(ADC_S);
    5866:	88 b3       	in	r24, 0x18	; 24
    5868:	80 63       	ori	r24, 0x30	; 48
    586a:	88 bb       	out	0x18, r24	; 24
	
	PORTB&= ~(1<<PB0);
    586c:	c0 98       	cbi	0x18, 0	; 24
	///Enable SPI, Master, set clock rate
	///@todo Check frequency
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);
    586e:	8f e5       	ldi	r24, 0x5F	; 95
    5870:	8d b9       	out	0x0d, r24	; 13
    5872:	08 95       	ret

00005874 <poll_SS1>:
}

// for oils purpose
	
void poll_SS1(void)
{
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	00 e0       	ldi	r16, 0x00	; 0
    587e:	10 e0       	ldi	r17, 0x00	; 0
  //transmit_UART0(c);
 
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    5880:	72 d0       	rcall	.+228    	; 0x5966 <receive_UART0>
    5882:	e8 01       	movw	r28, r16
    5884:	cc 0f       	add	r28, r28
    5886:	dd 1f       	adc	r29, r29
    5888:	c5 55       	subi	r28, 0x55	; 85
    588a:	db 4f       	sbci	r29, 0xFB	; 251
    588c:	9a ab       	std	Y+50, r25	; 0x32
    588e:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    5890:	89 a9       	ldd	r24, Y+49	; 0x31
    5892:	9a a9       	ldd	r25, Y+50	; 0x32
    5894:	98 2f       	mov	r25, r24
    5896:	88 27       	eor	r24, r24
    5898:	9a ab       	std	Y+50, r25	; 0x32
    589a:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] &= 0xFF00;
    589c:	89 a9       	ldd	r24, Y+49	; 0x31
    589e:	9a a9       	ldd	r25, Y+50	; 0x32
    58a0:	88 27       	eor	r24, r24
    58a2:	9a ab       	std	Y+50, r25	; 0x32
    58a4:	89 ab       	std	Y+49, r24	; 0x31
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    58a6:	5f d0       	rcall	.+190    	; 0x5966 <receive_UART0>
    58a8:	29 a9       	ldd	r18, Y+49	; 0x31
    58aa:	3a a9       	ldd	r19, Y+50	; 0x32
    58ac:	82 2b       	or	r24, r18
    58ae:	93 2b       	or	r25, r19
    58b0:	9a ab       	std	Y+50, r25	; 0x32
    58b2:	89 ab       	std	Y+49, r24	; 0x31
    58b4:	0f 5f       	subi	r16, 0xFF	; 255
    58b6:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
 
  while(channel <= 5)
    58b8:	06 30       	cpi	r16, 0x06	; 6
    58ba:	11 05       	cpc	r17, r1
    58bc:	09 f7       	brne	.-62     	; 0x5880 <poll_SS1+0xc>
    58be:	c0 e0       	ldi	r28, 0x00	; 0
    58c0:	d0 e0       	ldi	r29, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i])*3.3/1024.0);
    58c2:	fe 01       	movw	r30, r28
    58c4:	ee 0f       	add	r30, r30
    58c6:	ff 1f       	adc	r31, r31
    58c8:	e5 55       	subi	r30, 0x55	; 85
    58ca:	fb 4f       	sbci	r31, 0xFB	; 251
    58cc:	61 a9       	ldd	r22, Z+49	; 0x31
    58ce:	72 a9       	ldd	r23, Z+50	; 0x32
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	0b d6       	rcall	.+3094   	; 0x64ec <__floatunsisf>
    58d6:	23 e3       	ldi	r18, 0x33	; 51
    58d8:	33 e3       	ldi	r19, 0x33	; 51
    58da:	43 e5       	ldi	r20, 0x53	; 83
    58dc:	50 e4       	ldi	r21, 0x40	; 64
    58de:	8b d7       	rcall	.+3862   	; 0x67f6 <__mulsf3>
    58e0:	20 e0       	ldi	r18, 0x00	; 0
    58e2:	30 e0       	ldi	r19, 0x00	; 0
    58e4:	40 e8       	ldi	r20, 0x80	; 128
    58e6:	5a e3       	ldi	r21, 0x3A	; 58
    58e8:	86 d7       	rcall	.+3852   	; 0x67f6 <__mulsf3>
    58ea:	fe 01       	movw	r30, r28
    58ec:	ee 0f       	add	r30, r30
    58ee:	ff 1f       	adc	r31, r31
    58f0:	ee 0f       	add	r30, r30
    58f2:	ff 1f       	adc	r31, r31
    58f4:	e9 54       	subi	r30, 0x49	; 73
    58f6:	fb 4f       	sbci	r31, 0xFB	; 251
    58f8:	61 ab       	std	Z+49, r22	; 0x31
    58fa:	72 ab       	std	Z+50, r23	; 0x32
    58fc:	83 ab       	std	Z+51, r24	; 0x33
    58fe:	94 ab       	std	Z+52, r25	; 0x34
    Current_state.ss.reading[channel] &= 0xFF00;
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    5900:	21 96       	adiw	r28, 0x01	; 1
    5902:	c6 30       	cpi	r28, 0x06	; 6
    5904:	d1 05       	cpc	r29, r1
    5906:	e9 f6       	brne	.-70     	; 0x58c2 <poll_SS1+0x4e>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
    5908:	df 91       	pop	r29
    590a:	cf 91       	pop	r28
    590c:	1f 91       	pop	r17
    590e:	0f 91       	pop	r16
    5910:	08 95       	ret

00005912 <timer_reset_two_sec>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    5912:	86 b7       	in	r24, 0x36	; 54
    5914:	80 61       	ori	r24, 0x10	; 16
    5916:	86 bf       	out	0x36, r24	; 54
    5918:	1e bc       	out	0x2e, r1	; 46
    591a:	1d bc       	out	0x2d, r1	; 45
    591c:	1c bc       	out	0x2c, r1	; 44
    591e:	88 e0       	ldi	r24, 0x08	; 8
    5920:	9d e3       	ldi	r25, 0x3D	; 61
    5922:	9b bd       	out	0x2b, r25	; 43
    5924:	8a bd       	out	0x2a, r24	; 42
    5926:	1f bc       	out	0x2f, r1	; 47
    5928:	85 e0       	ldi	r24, 0x05	; 5
    592a:	8e bd       	out	0x2e, r24	; 46
    592c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5930:	08 95       	ret

00005932 <timer_wait_reset>:
  wdt_enable(time);
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5932:	06 b6       	in	r0, 0x36	; 54
    5934:	04 fe       	sbrs	r0, 4
    5936:	fd cf       	rjmp	.-6      	; 0x5932 <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    5938:	ec cf       	rjmp	.-40     	; 0x5912 <timer_reset_two_sec>
    593a:	08 95       	ret

0000593c <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    593c:	1b b8       	out	0x0b, r1	; 11
    593e:	1a b8       	out	0x0a, r1	; 10
    5940:	e5 e9       	ldi	r30, 0x95	; 149
    5942:	f0 e0       	ldi	r31, 0x00	; 0
    5944:	10 82       	st	Z, r1
    5946:	59 9a       	sbi	0x0b, 1	; 11
    5948:	8a b1       	in	r24, 0x0a	; 10
    594a:	88 61       	ori	r24, 0x18	; 24
    594c:	8a b9       	out	0x0a, r24	; 10
    594e:	80 81       	ld	r24, Z
    5950:	8e 60       	ori	r24, 0x0E	; 14
    5952:	80 83       	st	Z, r24
    5954:	87 e6       	ldi	r24, 0x67	; 103
    5956:	89 b9       	out	0x09, r24	; 9
    5958:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    595c:	08 95       	ret

0000595e <transmit_UART0>:
    595e:	5d 9b       	sbis	0x0b, 5	; 11
    5960:	fe cf       	rjmp	.-4      	; 0x595e <transmit_UART0>
    5962:	8c b9       	out	0x0c, r24	; 12
    5964:	08 95       	ret

00005966 <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    5966:	5f 9b       	sbis	0x0b, 7	; 11
    5968:	fe cf       	rjmp	.-4      	; 0x5966 <receive_UART0>
  return UDR0;
    596a:	8c b1       	in	r24, 0x0c	; 12
}
    596c:	08 95       	ret

0000596e <timer1_init>:
void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
    596e:	8e b5       	in	r24, 0x2e	; 46
    5970:	81 60       	ori	r24, 0x01	; 1
    5972:	8e bd       	out	0x2e, r24	; 46
    5974:	1d bc       	out	0x2d, r1	; 45
    5976:	1c bc       	out	0x2c, r1	; 44
    5978:	87 b7       	in	r24, 0x37	; 55
    597a:	84 60       	ori	r24, 0x04	; 4
    597c:	87 bf       	out	0x37, r24	; 55
    597e:	78 94       	sei
    5980:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <tot_overflow>
    5984:	08 95       	ret

00005986 <__vector_14>:
    5986:	1f 92       	push	r1
    5988:	0f 92       	push	r0
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	0f 92       	push	r0
    598e:	11 24       	eor	r1, r1
    5990:	8f 93       	push	r24
    5992:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <tot_overflow>
    5996:	8f 5f       	subi	r24, 0xFF	; 255
    5998:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <tot_overflow>
    599c:	8f 91       	pop	r24
    599e:	0f 90       	pop	r0
    59a0:	0f be       	out	0x3f, r0	; 63
    59a2:	0f 90       	pop	r0
    59a4:	1f 90       	pop	r1
    59a6:	18 95       	reti

000059a8 <TWI_init_master>:
    59a8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    59ac:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    59b0:	8c e0       	ldi	r24, 0x0C	; 12
    59b2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    59b6:	08 95       	ret

000059b8 <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    59b8:	e6 e2       	ldi	r30, 0x26	; 38
    59ba:	f5 e0       	ldi	r31, 0x05	; 5
    59bc:	2d e2       	ldi	r18, 0x2D	; 45
    59be:	35 e0       	ldi	r19, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    59c0:	9f ef       	ldi	r25, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    59c2:	81 91       	ld	r24, Z+
    59c4:	8f b9       	out	0x0f, r24	; 15
		 while(!(SPSR & (1<<SPIF) ));
    59c6:	77 9b       	sbis	0x0e, 7	; 14
    59c8:	fe cf       	rjmp	.-4      	; 0x59c6 <SendHM+0xe>
		 PORTA = 0xFF;
    59ca:	9b bb       	out	0x1b, r25	; 27
    59cc:	af ec       	ldi	r26, 0xCF	; 207
    59ce:	b7 e0       	ldi	r27, 0x07	; 7
    59d0:	11 97       	sbiw	r26, 0x01	; 1
    59d2:	f1 f7       	brne	.-4      	; 0x59d0 <SendHM+0x18>
    59d4:	00 c0       	rjmp	.+0      	; 0x59d6 <SendHM+0x1e>
    59d6:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    59d8:	e2 17       	cp	r30, r18
    59da:	f3 07       	cpc	r31, r19
    59dc:	91 f7       	brne	.-28     	; 0x59c2 <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    59de:	08 95       	ret

000059e0 <main>:


int main(void){
    59e0:	cf 93       	push	r28
    59e2:	df 93       	push	r29
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
    59e8:	68 97       	sbiw	r28, 0x18	; 24
    59ea:	0f b6       	in	r0, 0x3f	; 63
    59ec:	f8 94       	cli
    59ee:	de bf       	out	0x3e, r29	; 62
    59f0:	0f be       	out	0x3f, r0	; 63
    59f2:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    59f4:	32 df       	rcall	.-412    	; 0x585a <init_SPI>
  init_UART0();
    59f6:	a2 df       	rcall	.-188    	; 0x593c <init_UART0>
  init_UART_MM();
    59f8:	0e 94 26 1c 	call	0x384c	; 0x384c <init_UART_MM>
  configure_torquer();
    59fc:	0e 94 18 21 	call	0x4230	; 0x4230 <configure_torquer>
  DDRA=0xF0;
    5a00:	80 ef       	ldi	r24, 0xF0	; 240
    5a02:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5a04:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <Current_state+0x2d>
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    5a08:	87 b3       	in	r24, 0x17	; 23
    5a0a:	81 62       	ori	r24, 0x21	; 33
    5a0c:	87 bb       	out	0x17, r24	; 23
    5a0e:	2f ef       	ldi	r18, 0xFF	; 255
    5a10:	83 ed       	ldi	r24, 0xD3	; 211
    5a12:	90 e3       	ldi	r25, 0x30	; 48
    5a14:	21 50       	subi	r18, 0x01	; 1
    5a16:	80 40       	sbci	r24, 0x00	; 0
    5a18:	90 40       	sbci	r25, 0x00	; 0
    5a1a:	e1 f7       	brne	.-8      	; 0x5a14 <main+0x34>
    5a1c:	00 c0       	rjmp	.+0      	; 0x5a1e <main+0x3e>
    5a1e:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5a20:	80 ed       	ldi	r24, 0xD0	; 208
    5a22:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5a24:	c1 df       	rcall	.-126    	; 0x59a8 <TWI_init_master>
    5a26:	af ef       	ldi	r26, 0xFF	; 255
    5a28:	b1 e1       	ldi	r27, 0x11	; 17
    5a2a:	ea e7       	ldi	r30, 0x7A	; 122
    5a2c:	a1 50       	subi	r26, 0x01	; 1
    5a2e:	b0 40       	sbci	r27, 0x00	; 0
    5a30:	e0 40       	sbci	r30, 0x00	; 0
    5a32:	e1 f7       	brne	.-8      	; 0x5a2c <main+0x4c>
    5a34:	00 c0       	rjmp	.+0      	; 0x5a36 <main+0x56>
    5a36:	00 00       	nop
  //transmit_string_UART0("Code");
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    5a38:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    5a3a:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <Time>
    5a3e:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <Time+0x1>
    5a42:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <Time+0x2>
    5a46:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Time+0x3>
    5a4a:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <Time+0x4>
    5a4e:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <Time+0x5>
    5a52:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <Time+0x6>
    5a56:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <Time+0x7>
  //transmit_UART0(42);
      /**
      * * * * Task 1: Control codes
       * @ref control
       */
	receive_UART0();	 
    5a5a:	85 df       	rcall	.-246    	; 0x5966 <receive_UART0>
  PORTB |= (1<<PB5); //Set slave select of ADC =1
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5a5c:	0f 2e       	mov	r0, r31
    5a5e:	fb ea       	ldi	r31, 0xAB	; 171
    5a60:	2f 2e       	mov	r2, r31
    5a62:	f4 e0       	ldi	r31, 0x04	; 4
    5a64:	3f 2e       	mov	r3, r31
    5a66:	f0 2d       	mov	r31, r0
G4 = (uint8_t)((Current_state.gps.lon)>>8);
G5 = Current_state.gps.seconds;
G6 = Current_state.gps.minutes;
G7 = Current_state.gps.hours;
G8 = Current_state.gps.date;
G9 = (uint8_t)(q_o[0]*127);
    5a68:	04 e7       	ldi	r16, 0x74	; 116
    5a6a:	14 e0       	ldi	r17, 0x04	; 4
	receive_UART0();	 
	  
  while (1)
  {
	  /////////////////////
	  timer1_init();
    5a6c:	80 df       	rcall	.-256    	; 0x596e <timer1_init>
	  uint16_t counter_value=TCNT1;
    5a6e:	8c b5       	in	r24, 0x2c	; 44
    5a70:	9d b5       	in	r25, 0x2d	; 45
	  uint8_t overflow=tot_overflow;
    5a72:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <tot_overflow>
	  ///////////////////
	  timer_reset_two_sec();
    5a76:	4d df       	rcall	.-358    	; 0x5912 <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5a78:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5a7c:	84 30       	cpi	r24, 0x04	; 4
    5a7e:	31 f4       	brne	.+12     	; 0x5a8c <main+0xac>
    5a80:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5a84:	8c 64       	ori	r24, 0x4C	; 76
    5a86:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5a8a:	07 c0       	rjmp	.+14     	; 0x5a9a <main+0xba>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5a8c:	81 30       	cpi	r24, 0x01	; 1
    5a8e:	29 f4       	brne	.+10     	; 0x5a9a <main+0xba>
    5a90:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5a94:	8c 6c       	ori	r24, 0xCC	; 204
    5a96:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5a9a:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5a9c:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5a9e:	d1 01       	movw	r26, r2
    5aa0:	9e 96       	adiw	r26, 0x2e	; 46
    5aa2:	8c 91       	ld	r24, X
    5aa4:	9e 97       	sbiw	r26, 0x2e	; 46
    5aa6:	82 30       	cpi	r24, 0x02	; 2
    5aa8:	51 f4       	brne	.+20     	; 0x5abe <main+0xde>
    5aaa:	9d 96       	adiw	r26, 0x2d	; 45
    5aac:	8c 91       	ld	r24, X
    5aae:	81 11       	cpse	r24, r1
    5ab0:	06 c0       	rjmp	.+12     	; 0x5abe <main+0xde>
	{write_data |= (1<<5);}
    5ab2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5ab6:	80 62       	ori	r24, 0x20	; 32
    5ab8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5abc:	05 c0       	rjmp	.+10     	; 0x5ac8 <main+0xe8>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5abe:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5ac2:	8f 7d       	andi	r24, 0xDF	; 223
    5ac4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5ac8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    5acc:	81 30       	cpi	r24, 0x01	; 1
    5ace:	49 f4       	brne	.+18     	; 0x5ae2 <main+0x102>
    5ad0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <light_main>
    5ad4:	81 11       	cpse	r24, r1
    5ad6:	05 c0       	rjmp	.+10     	; 0x5ae2 <main+0x102>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5ad8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5adc:	8b 79       	andi	r24, 0x9B	; 155
    5ade:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
    5ae2:	ef e1       	ldi	r30, 0x1F	; 31
    5ae4:	fe e4       	ldi	r31, 0x4E	; 78
    5ae6:	31 97       	sbiw	r30, 0x01	; 1
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <main+0x106>
    5aea:	00 c0       	rjmp	.+0      	; 0x5aec <main+0x10c>
    5aec:	00 00       	nop
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5aee:	d1 01       	movw	r26, r2
    5af0:	58 96       	adiw	r26, 0x18	; 24
    5af2:	8d 91       	ld	r24, X+
    5af4:	9d 91       	ld	r25, X+
    5af6:	0d 90       	ld	r0, X+
    5af8:	bc 91       	ld	r27, X
    5afa:	a0 2d       	mov	r26, r0
    5afc:	89 83       	std	Y+1, r24	; 0x01
    5afe:	9a 83       	std	Y+2, r25	; 0x02
    5b00:	ab 83       	std	Y+3, r26	; 0x03
    5b02:	bc 83       	std	Y+4, r27	; 0x04
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5b04:	f1 01       	movw	r30, r2
    5b06:	40 8c       	ldd	r4, Z+24	; 0x18
    5b08:	51 8c       	ldd	r5, Z+25	; 0x19
    5b0a:	62 8c       	ldd	r6, Z+26	; 0x1a
    5b0c:	73 8c       	ldd	r7, Z+27	; 0x1b
G3 = (uint8_t)Current_state.gps.lon;
    5b0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b10:	95 8d       	ldd	r25, Z+29	; 0x1d
    5b12:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5b14:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5b16:	8d 83       	std	Y+5, r24	; 0x05
    5b18:	9e 83       	std	Y+6, r25	; 0x06
    5b1a:	af 83       	std	Y+7, r26	; 0x07
    5b1c:	b8 87       	std	Y+8, r27	; 0x08
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5b1e:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b20:	95 8d       	ldd	r25, Z+29	; 0x1d
    5b22:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5b24:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5b26:	89 87       	std	Y+9, r24	; 0x09
    5b28:	9a 87       	std	Y+10, r25	; 0x0a
    5b2a:	ab 87       	std	Y+11, r26	; 0x0b
    5b2c:	bc 87       	std	Y+12, r27	; 0x0c
G5 = Current_state.gps.seconds;
    5b2e:	96 a0       	ldd	r9, Z+38	; 0x26
G6 = Current_state.gps.minutes;
    5b30:	a5 a0       	ldd	r10, Z+37	; 0x25
G7 = Current_state.gps.hours;
    5b32:	b4 a0       	ldd	r11, Z+36	; 0x24
G8 = Current_state.gps.date;
    5b34:	c7 a0       	ldd	r12, Z+39	; 0x27
G9 = (uint8_t)(q_o[0]*127);
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	4e ef       	ldi	r20, 0xFE	; 254
    5b3c:	52 e4       	ldi	r21, 0x42	; 66
    5b3e:	d8 01       	movw	r26, r16
    5b40:	6d 91       	ld	r22, X+
    5b42:	7d 91       	ld	r23, X+
    5b44:	8d 91       	ld	r24, X+
    5b46:	9c 91       	ld	r25, X
    5b48:	56 d6       	rcall	.+3244   	; 0x67f6 <__mulsf3>
    5b4a:	a4 d4       	rcall	.+2376   	; 0x6494 <__fixunssfsi>
    5b4c:	d6 2e       	mov	r13, r22
G10 = (uint8_t)(q_o[1]*127);
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	30 e0       	ldi	r19, 0x00	; 0
    5b52:	4e ef       	ldi	r20, 0xFE	; 254
    5b54:	52 e4       	ldi	r21, 0x42	; 66
    5b56:	f8 01       	movw	r30, r16
    5b58:	64 81       	ldd	r22, Z+4	; 0x04
    5b5a:	75 81       	ldd	r23, Z+5	; 0x05
    5b5c:	86 81       	ldd	r24, Z+6	; 0x06
    5b5e:	97 81       	ldd	r25, Z+7	; 0x07
    5b60:	4a d6       	rcall	.+3220   	; 0x67f6 <__mulsf3>
    5b62:	98 d4       	rcall	.+2352   	; 0x6494 <__fixunssfsi>
    5b64:	e6 2e       	mov	r14, r22
G11 = (uint8_t)(q_o[2]*127);
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	4e ef       	ldi	r20, 0xFE	; 254
    5b6c:	52 e4       	ldi	r21, 0x42	; 66
    5b6e:	d8 01       	movw	r26, r16
    5b70:	18 96       	adiw	r26, 0x08	; 8
    5b72:	6d 91       	ld	r22, X+
    5b74:	7d 91       	ld	r23, X+
    5b76:	8d 91       	ld	r24, X+
    5b78:	9c 91       	ld	r25, X
    5b7a:	1b 97       	sbiw	r26, 0x0b	; 11
    5b7c:	3c d6       	rcall	.+3192   	; 0x67f6 <__mulsf3>
    5b7e:	8a d4       	rcall	.+2324   	; 0x6494 <__fixunssfsi>
    5b80:	f6 2e       	mov	r15, r22
G12 = (uint8_t)(q_o[3]*127);
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	4e ef       	ldi	r20, 0xFE	; 254
    5b88:	52 e4       	ldi	r21, 0x42	; 66
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	64 85       	ldd	r22, Z+12	; 0x0c
    5b8e:	75 85       	ldd	r23, Z+13	; 0x0d
    5b90:	86 85       	ldd	r24, Z+14	; 0x0e
    5b92:	97 85       	ldd	r25, Z+15	; 0x0f
    5b94:	30 d6       	rcall	.+3168   	; 0x67f6 <__mulsf3>
    5b96:	7e d4       	rcall	.+2300   	; 0x6494 <__fixunssfsi>
}
wdt_disable();*/
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5b98:	e9 81       	ldd	r30, Y+1	; 0x01
    5b9a:	a4 e1       	ldi	r26, 0x14	; 20
    5b9c:	b1 e0       	ldi	r27, 0x01	; 1
    5b9e:	ec 93       	st	X, r30
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5ba0:	50 92 15 01 	sts	0x0115, r5	; 0x800115 <GPS_Data+0x1>
G3 = (uint8_t)Current_state.gps.lon;
    5ba4:	fd 81       	ldd	r31, Y+5	; 0x05
    5ba6:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <GPS_Data+0x2>
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5baa:	2a 85       	ldd	r18, Y+10	; 0x0a
    5bac:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <GPS_Data+0x3>

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    5bb0:	90 92 18 01 	sts	0x0118, r9	; 0x800118 <GPS_Data+0x4>
GPS_Data[5] = G6;
    5bb4:	a0 92 19 01 	sts	0x0119, r10	; 0x800119 <GPS_Data+0x5>
GPS_Data[6] = G7;
    5bb8:	b0 92 1a 01 	sts	0x011A, r11	; 0x80011a <GPS_Data+0x6>
GPS_Data[7] = G8;
    5bbc:	c0 92 1b 01 	sts	0x011B, r12	; 0x80011b <GPS_Data+0x7>
GPS_Data[8] = G9;
    5bc0:	d0 92 1c 01 	sts	0x011C, r13	; 0x80011c <GPS_Data+0x8>
GPS_Data[9] = G10;
    5bc4:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <GPS_Data+0x9>
GPS_Data[10] = G11;
    5bc8:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <GPS_Data+0xa>
GPS_Data[11] = G12;
    5bcc:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <GPS_Data+0xb>
//////////////////////////////////////////

///////////////////////////////////////
if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5bd0:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <flag_india>
    5bd4:	81 30       	cpi	r24, 0x01	; 1
    5bd6:	29 f0       	breq	.+10     	; 0x5be2 <main+0x202>
    5bd8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <flag_france>
    5bdc:	81 30       	cpi	r24, 0x01	; 1
    5bde:	09 f0       	breq	.+2      	; 0x5be2 <main+0x202>
    5be0:	4d c0       	rjmp	.+154    	; 0x5c7c <main+0x29c>
{
	
	if(FirstTimeOuter ==0)
    5be2:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <FirstTimeOuter>
    5be6:	81 11       	cpse	r24, r1
    5be8:	0e c0       	rjmp	.+28     	; 0x5c06 <main+0x226>
	{
		
	FirstTimeInner = 0;
    5bea:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeNormal = 0;
    5bee:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5bf2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5bf6:	8d 7f       	andi	r24, 0xFD	; 253
    5bf8:	80 61       	ori	r24, 0x10	; 16
    5bfa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 1;
    5bfe:	81 e0       	ldi	r24, 0x01	; 1
    5c00:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    5c04:	35 c0       	rjmp	.+106    	; 0x5c70 <main+0x290>
	}
	else if(FirstTimeOuter == 1)
    5c06:	81 30       	cpi	r24, 0x01	; 1
    5c08:	e1 f4       	brne	.+56     	; 0x5c42 <main+0x262>
	{
		
		if(countu ==0)
    5c0a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5c0e:	81 11       	cpse	r24, r1
    5c10:	14 c0       	rjmp	.+40     	; 0x5c3a <main+0x25a>
    5c12:	83 e0       	ldi	r24, 0x03	; 3
    5c14:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5c16:	a1 eb       	ldi	r26, 0xB1	; 177
    5c18:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5c1a:	77 9b       	sbis	0x0e, 7	; 14
    5c1c:	fe cf       	rjmp	.-4      	; 0x5c1a <main+0x23a>
			PORTA = 0xFF;
    5c1e:	bf ef       	ldi	r27, 0xFF	; 255
    5c20:	bb bb       	out	0x1b, r27	; 27
    5c22:	ef ec       	ldi	r30, 0xCF	; 207
    5c24:	f7 e0       	ldi	r31, 0x07	; 7
    5c26:	31 97       	sbiw	r30, 0x01	; 1
    5c28:	f1 f7       	brne	.-4      	; 0x5c26 <main+0x246>
    5c2a:	00 c0       	rjmp	.+0      	; 0x5c2c <main+0x24c>
    5c2c:	00 00       	nop
    5c2e:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5c30:	91 f7       	brne	.-28     	; 0x5c16 <main+0x236>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5c32:	82 e0       	ldi	r24, 0x02	; 2
    5c34:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FirstTimeOuter>
    5c38:	1b c0       	rjmp	.+54     	; 0x5c70 <main+0x290>
		}
		else if(countu == 1)
    5c3a:	81 30       	cpi	r24, 0x01	; 1
    5c3c:	c9 f4       	brne	.+50     	; 0x5c70 <main+0x290>
		{
			
			SendHM();
    5c3e:	bc de       	rcall	.-648    	; 0x59b8 <SendHM>
    5c40:	17 c0       	rjmp	.+46     	; 0x5c70 <main+0x290>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5c42:	ba de       	rcall	.-652    	; 0x59b8 <SendHM>
		if(countu ==0)
    5c44:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5c48:	81 11       	cpse	r24, r1
    5c4a:	12 c0       	rjmp	.+36     	; 0x5c70 <main+0x290>
    5c4c:	e4 e1       	ldi	r30, 0x14	; 20
    5c4e:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5c50:	81 91       	ld	r24, Z+
    5c52:	8f b9       	out	0x0f, r24	; 15
				while(!(SPSR & (1<<SPIF) ));
    5c54:	77 9b       	sbis	0x0e, 7	; 14
    5c56:	fe cf       	rjmp	.-4      	; 0x5c54 <main+0x274>
				PORTA = 0xFF;
    5c58:	2f ef       	ldi	r18, 0xFF	; 255
    5c5a:	2b bb       	out	0x1b, r18	; 27
    5c5c:	8f ec       	ldi	r24, 0xCF	; 207
    5c5e:	97 e0       	ldi	r25, 0x07	; 7
    5c60:	01 97       	sbiw	r24, 0x01	; 1
    5c62:	f1 f7       	brne	.-4      	; 0x5c60 <main+0x280>
    5c64:	00 c0       	rjmp	.+0      	; 0x5c66 <main+0x286>
    5c66:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5c68:	91 e0       	ldi	r25, 0x01	; 1
    5c6a:	e0 32       	cpi	r30, 0x20	; 32
    5c6c:	f9 07       	cpc	r31, r25
    5c6e:	81 f7       	brne	.-32     	; 0x5c50 <main+0x270>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5c70:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5c74:	8e 5f       	subi	r24, 0xFE	; 254
    5c76:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    5c7a:	94 c0       	rjmp	.+296    	; 0x5da4 <main+0x3c4>
}
else if(flag_mumbai ==1) //Check for Circles
    5c7c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <flag_mumbai>
    5c80:	81 30       	cpi	r24, 0x01	; 1
    5c82:	09 f0       	breq	.+2      	; 0x5c86 <main+0x2a6>
    5c84:	4d c0       	rjmp	.+154    	; 0x5d20 <main+0x340>
{
	
	if(FirstTimeInner ==0)
    5c86:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <FirstTimeInner>
    5c8a:	81 11       	cpse	r24, r1
    5c8c:	0e c0       	rjmp	.+28     	; 0x5caa <main+0x2ca>
	{
		
		FirstTimeOuter = 0;
    5c8e:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
		FirstTimeNormal = 0;
    5c92:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <FirstTimeNormal>
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5c96:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5c9a:	8d 7f       	andi	r24, 0xFD	; 253
    5c9c:	80 61       	ori	r24, 0x10	; 16
    5c9e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		FirstTimeInner = 1;
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    5ca8:	35 c0       	rjmp	.+106    	; 0x5d14 <main+0x334>
		
	}
	else if(FirstTimeInner == 1)
    5caa:	81 30       	cpi	r24, 0x01	; 1
    5cac:	e1 f4       	brne	.+56     	; 0x5ce6 <main+0x306>
	{
		
		if(countu ==0)
    5cae:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5cb2:	81 11       	cpse	r24, r1
    5cb4:	14 c0       	rjmp	.+40     	; 0x5cde <main+0x2fe>
    5cb6:	83 e0       	ldi	r24, 0x03	; 3
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5cba:	a1 ef       	ldi	r26, 0xF1	; 241
    5cbc:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5cbe:	77 9b       	sbis	0x0e, 7	; 14
    5cc0:	fe cf       	rjmp	.-4      	; 0x5cbe <main+0x2de>
			PORTA = 0xFF;
    5cc2:	bf ef       	ldi	r27, 0xFF	; 255
    5cc4:	bb bb       	out	0x1b, r27	; 27
    5cc6:	ef ec       	ldi	r30, 0xCF	; 207
    5cc8:	f7 e0       	ldi	r31, 0x07	; 7
    5cca:	31 97       	sbiw	r30, 0x01	; 1
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <main+0x2ea>
    5cce:	00 c0       	rjmp	.+0      	; 0x5cd0 <main+0x2f0>
    5cd0:	00 00       	nop
    5cd2:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5cd4:	91 f7       	brne	.-28     	; 0x5cba <main+0x2da>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5cd6:	82 e0       	ldi	r24, 0x02	; 2
    5cd8:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <FirstTimeInner>
    5cdc:	1b c0       	rjmp	.+54     	; 0x5d14 <main+0x334>
		}
		
		else if(countu == 1)
    5cde:	81 30       	cpi	r24, 0x01	; 1
    5ce0:	c9 f4       	brne	.+50     	; 0x5d14 <main+0x334>
		{
			
			SendHM();
    5ce2:	6a de       	rcall	.-812    	; 0x59b8 <SendHM>
    5ce4:	17 c0       	rjmp	.+46     	; 0x5d14 <main+0x334>
		
	}
	else
	{
		
		SendHM();
    5ce6:	68 de       	rcall	.-816    	; 0x59b8 <SendHM>
		if(countu ==0)
    5ce8:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <countu>
    5cec:	81 11       	cpse	r24, r1
    5cee:	12 c0       	rjmp	.+36     	; 0x5d14 <main+0x334>
    5cf0:	e4 e1       	ldi	r30, 0x14	; 20
    5cf2:	f1 e0       	ldi	r31, 0x01	; 1
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5cf4:	81 91       	ld	r24, Z+
    5cf6:	8f b9       	out	0x0f, r24	; 15
			while(!(SPSR & (1<<SPIF) ));
    5cf8:	77 9b       	sbis	0x0e, 7	; 14
    5cfa:	fe cf       	rjmp	.-4      	; 0x5cf8 <main+0x318>
			PORTA = 0xFF;
    5cfc:	2f ef       	ldi	r18, 0xFF	; 255
    5cfe:	2b bb       	out	0x1b, r18	; 27
    5d00:	8f ec       	ldi	r24, 0xCF	; 207
    5d02:	97 e0       	ldi	r25, 0x07	; 7
    5d04:	01 97       	sbiw	r24, 0x01	; 1
    5d06:	f1 f7       	brne	.-4      	; 0x5d04 <main+0x324>
    5d08:	00 c0       	rjmp	.+0      	; 0x5d0a <main+0x32a>
    5d0a:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5d0c:	91 e0       	ldi	r25, 0x01	; 1
    5d0e:	e0 32       	cpi	r30, 0x20	; 32
    5d10:	f9 07       	cpc	r31, r25
    5d12:	81 f7       	brne	.-32     	; 0x5cf4 <main+0x314>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5d14:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5d18:	8e 5f       	subi	r24, 0xFE	; 254
    5d1a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <countd>
    5d1e:	42 c0       	rjmp	.+132    	; 0x5da4 <main+0x3c4>
}
else
{

	countd = 0;
    5d20:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu = 0;
    5d24:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	if(FirstTimeNormal == 0)
    5d28:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <FirstTimeNormal>
    5d2c:	81 11       	cpse	r24, r1
    5d2e:	13 c0       	rjmp	.+38     	; 0x5d56 <main+0x376>
    5d30:	83 e0       	ldi	r24, 0x03	; 3
    5d32:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5d34:	a1 ed       	ldi	r26, 0xD1	; 209
    5d36:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d38:	77 9b       	sbis	0x0e, 7	; 14
    5d3a:	fe cf       	rjmp	.-4      	; 0x5d38 <main+0x358>
			PORTA = 0xFF;
    5d3c:	bf ef       	ldi	r27, 0xFF	; 255
    5d3e:	bb bb       	out	0x1b, r27	; 27
    5d40:	ef ec       	ldi	r30, 0xCF	; 207
    5d42:	f7 e0       	ldi	r31, 0x07	; 7
    5d44:	31 97       	sbiw	r30, 0x01	; 1
    5d46:	f1 f7       	brne	.-4      	; 0x5d44 <main+0x364>
    5d48:	00 c0       	rjmp	.+0      	; 0x5d4a <main+0x36a>
    5d4a:	00 00       	nop
    5d4c:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5d4e:	91 f7       	brne	.-28     	; 0x5d34 <main+0x354>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <FirstTimeNormal>
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5d56:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <UniversalCycles>
    5d5a:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <UniversalCycles+0x1>
    5d5e:	9a 01       	movw	r18, r20
    5d60:	ad ec       	ldi	r26, 0xCD	; 205
    5d62:	bc ec       	ldi	r27, 0xCC	; 204
    5d64:	52 d7       	rcall	.+3748   	; 0x6c0a <__umulhisi3>
    5d66:	96 95       	lsr	r25
    5d68:	87 95       	ror	r24
    5d6a:	96 95       	lsr	r25
    5d6c:	87 95       	ror	r24
    5d6e:	96 95       	lsr	r25
    5d70:	87 95       	ror	r24
    5d72:	9c 01       	movw	r18, r24
    5d74:	22 0f       	add	r18, r18
    5d76:	33 1f       	adc	r19, r19
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	88 0f       	add	r24, r24
    5d7e:	99 1f       	adc	r25, r25
    5d80:	88 0f       	add	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	82 0f       	add	r24, r18
    5d86:	93 1f       	adc	r25, r19
    5d88:	48 17       	cp	r20, r24
    5d8a:	59 07       	cpc	r21, r25
    5d8c:	09 f4       	brne	.+2      	; 0x5d90 <main+0x3b0>
    5d8e:	14 de       	rcall	.-984    	; 0x59b8 <SendHM>
	write_data &= ~(1<<4);
    5d90:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5d94:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5d96:	82 60       	ori	r24, 0x02	; 2
    5d98:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeInner = 0;
    5d9c:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
	FirstTimeOuter = 0;
    5da0:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
}

if ((countd >120)&&(countd <=150))
    5da4:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <countd>
    5da8:	87 e8       	ldi	r24, 0x87	; 135
    5daa:	89 0f       	add	r24, r25
    5dac:	8e 31       	cpi	r24, 0x1E	; 30
    5dae:	d8 f4       	brcc	.+54     	; 0x5de6 <main+0x406>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5db0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5db4:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5db6:	82 60       	ori	r24, 0x02	; 2
    5db8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	if (countd == 122)
    5dbc:	9a 37       	cpi	r25, 0x7A	; 122
    5dbe:	81 f4       	brne	.+32     	; 0x5de0 <main+0x400>
    5dc0:	83 e0       	ldi	r24, 0x03	; 3
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5dc4:	f1 ed       	ldi	r31, 0xD1	; 209
    5dc6:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1<<SPIF) ));
    5dc8:	77 9b       	sbis	0x0e, 7	; 14
    5dca:	fe cf       	rjmp	.-4      	; 0x5dc8 <main+0x3e8>
		PORTA = 0xFF;
    5dcc:	2f ef       	ldi	r18, 0xFF	; 255
    5dce:	2b bb       	out	0x1b, r18	; 27
    5dd0:	af ec       	ldi	r26, 0xCF	; 207
    5dd2:	b7 e0       	ldi	r27, 0x07	; 7
    5dd4:	11 97       	sbiw	r26, 0x01	; 1
    5dd6:	f1 f7       	brne	.-4      	; 0x5dd4 <main+0x3f4>
    5dd8:	00 c0       	rjmp	.+0      	; 0x5dda <main+0x3fa>
    5dda:	00 00       	nop
    5ddc:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5dde:	91 f7       	brne	.-28     	; 0x5dc4 <main+0x3e4>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5de0:	81 e0       	ldi	r24, 0x01	; 1
    5de2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <countu>
}
if (countd >150)
    5de6:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <countd>
    5dea:	87 39       	cpi	r24, 0x97	; 151
    5dec:	70 f0       	brcs	.+28     	; 0x5e0a <main+0x42a>
{

	countd=0;
    5dee:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <countd>
	countu=0;
    5df2:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <countu>
	write_data &= ~(1<<1); 
    5df6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5dfa:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5dfc:	80 61       	ori	r24, 0x10	; 16
    5dfe:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
	FirstTimeOuter = 0;
    5e02:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FirstTimeOuter>
	FirstTimeInner = 0;
    5e06:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <FirstTimeInner>
		
}

	
		PORTB |= (1<<PB0);
    5e0a:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5e0c:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    5e0e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5e12:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5e16:	89 2b       	or	r24, r25
    5e18:	79 f4       	brne	.+30     	; 0x5e38 <main+0x458>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5e1a:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <HM_Data+0x6>
    5e1e:	88 23       	and	r24, r24
    5e20:	4c f1       	brlt	.+82     	; 0x5e74 <main+0x494>
	     	{
		     	counter1 = 1;
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    5e2a:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
		     	write_data &= ~(1<<7);
    5e2e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5e32:	8f 77       	andi	r24, 0x7F	; 127
    5e34:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5e38:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5e3c:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5e40:	9c 01       	movw	r18, r24
    5e42:	21 50       	subi	r18, 0x01	; 1
    5e44:	31 09       	sbc	r19, r1
    5e46:	26 30       	cpi	r18, 0x06	; 6
    5e48:	31 05       	cpc	r19, r1
    5e4a:	28 f4       	brcc	.+10     	; 0x5e56 <main+0x476>
     	{
	     	counter1 = counter1+1;
    5e4c:	01 96       	adiw	r24, 0x01	; 1
    5e4e:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <counter1+0x1>
    5e52:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <counter1>
     	}
     	
     	if(counter1 == 7)
    5e56:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <counter1>
    5e5a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <counter1+0x1>
    5e5e:	07 97       	sbiw	r24, 0x07	; 7
    5e60:	49 f4       	brne	.+18     	; 0x5e74 <main+0x494>
     	{
	     	counter1 = 0;
    5e62:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <counter1+0x1>
    5e66:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <counter1>
	     	write_data |= (1<<7);
    5e6a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <write_data>
    5e6e:	80 68       	ori	r24, 0x80	; 128
    5e70:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <write_data>
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5e74:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <HM_Data+0x6>
    5e78:	85 fd       	sbrc	r24, 5
    5e7a:	04 c0       	rjmp	.+8      	; 0x5e84 <main+0x4a4>
			 {
				Current_state.gps.gps_OC = 1;
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	f1 01       	movw	r30, r2
    5e80:	85 a7       	std	Z+45, r24	; 0x2d
    5e82:	03 c0       	rjmp	.+6      	; 0x5e8a <main+0x4aa>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5e84:	d1 01       	movw	r26, r2
    5e86:	9d 96       	adiw	r26, 0x2d	; 45
    5e88:	1c 92       	st	X, r1
			}


	//wdt_enable(WDTO_2S);
	//wdt_reset();
	control();
    5e8a:	0e 94 3c 08 	call	0x1078	; 0x1078 <control>
	//for (int i = 0; i<7;i++)
	//{
	//	transmit_UART0(HM_Data[i]);
	//}
	
	light_main = light_cal();	
    5e8e:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <light_cal>
    5e92:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <light_main>
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    5e96:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <HM_Data+0x6>
    5e9a:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    5e9c:	0e 94 73 21 	call	0x42e6	; 0x42e6 <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    5ea0:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <Time>
    5ea4:	30 91 1f 05 	lds	r19, 0x051F	; 0x80051f <Time+0x1>
    5ea8:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <Time+0x2>
    5eac:	50 91 21 05 	lds	r21, 0x0521	; 0x800521 <Time+0x3>
    5eb0:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <Time+0x4>
    5eb4:	70 91 23 05 	lds	r23, 0x0523	; 0x800523 <Time+0x5>
    5eb8:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <Time+0x6>
    5ebc:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <Time+0x7>
    5ec0:	a2 e0       	ldi	r26, 0x02	; 2
    5ec2:	d4 d6       	rcall	.+3496   	; 0x6c6c <__adddi3_s8>
    5ec4:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <Time>
    5ec8:	30 93 1f 05 	sts	0x051F, r19	; 0x80051f <Time+0x1>
    5ecc:	40 93 20 05 	sts	0x0520, r20	; 0x800520 <Time+0x2>
    5ed0:	50 93 21 05 	sts	0x0521, r21	; 0x800521 <Time+0x3>
    5ed4:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <Time+0x4>
    5ed8:	70 93 23 05 	sts	0x0523, r23	; 0x800523 <Time+0x5>
    5edc:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <Time+0x6>
    5ee0:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <Time+0x7>
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    5ee4:	f1 01       	movw	r30, r2
    5ee6:	60 8d       	ldd	r22, Z+24	; 0x18
    5ee8:	71 8d       	ldd	r23, Z+25	; 0x19
    5eea:	82 8d       	ldd	r24, Z+26	; 0x1a
    5eec:	93 8d       	ldd	r25, Z+27	; 0x1b
    5eee:	00 d3       	rcall	.+1536   	; 0x64f0 <__floatsisf>
    5ef0:	20 e0       	ldi	r18, 0x00	; 0
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	48 ec       	ldi	r20, 0xC8	; 200
    5ef6:	52 e4       	ldi	r21, 0x42	; 66
    5ef8:	60 d2       	rcall	.+1216   	; 0x63ba <__divsf3>
    5efa:	29 e9       	ldi	r18, 0x99	; 153
    5efc:	3a ea       	ldi	r19, 0xAA	; 170
    5efe:	44 eb       	ldi	r20, 0xB4	; 180
    5f00:	51 e4       	ldi	r21, 0x41	; 65
    5f02:	76 d1       	rcall	.+748    	; 0x61f0 <__subsf3>
    5f04:	69 87       	std	Y+9, r22	; 0x09
    5f06:	7a 87       	std	Y+10, r23	; 0x0a
    5f08:	8b 87       	std	Y+11, r24	; 0x0b
    5f0a:	9c 87       	std	Y+12, r25	; 0x0c
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    5f0c:	d1 01       	movw	r26, r2
    5f0e:	5c 96       	adiw	r26, 0x1c	; 28
    5f10:	6d 91       	ld	r22, X+
    5f12:	7d 91       	ld	r23, X+
    5f14:	8d 91       	ld	r24, X+
    5f16:	9c 91       	ld	r25, X
    5f18:	5f 97       	sbiw	r26, 0x1f	; 31
    5f1a:	ea d2       	rcall	.+1492   	; 0x64f0 <__floatsisf>
    5f1c:	20 e0       	ldi	r18, 0x00	; 0
    5f1e:	30 e0       	ldi	r19, 0x00	; 0
    5f20:	48 ec       	ldi	r20, 0xC8	; 200
    5f22:	52 e4       	ldi	r21, 0x42	; 66
    5f24:	4a d2       	rcall	.+1172   	; 0x63ba <__divsf3>
    5f26:	20 e8       	ldi	r18, 0x80	; 128
    5f28:	38 e8       	ldi	r19, 0x88	; 136
    5f2a:	45 ea       	ldi	r20, 0xA5	; 165
    5f2c:	52 e4       	ldi	r21, 0x42	; 66
    5f2e:	60 d1       	rcall	.+704    	; 0x61f0 <__subsf3>
    5f30:	6d 87       	std	Y+13, r22	; 0x0d
    5f32:	7e 87       	std	Y+14, r23	; 0x0e
    5f34:	8f 87       	std	Y+15, r24	; 0x0f
    5f36:	98 8b       	std	Y+16, r25	; 0x10
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    5f38:	f1 01       	movw	r30, r2
    5f3a:	60 8d       	ldd	r22, Z+24	; 0x18
    5f3c:	71 8d       	ldd	r23, Z+25	; 0x19
    5f3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f40:	93 8d       	ldd	r25, Z+27	; 0x1b
    5f42:	d6 d2       	rcall	.+1452   	; 0x64f0 <__floatsisf>
    5f44:	20 e0       	ldi	r18, 0x00	; 0
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	48 ec       	ldi	r20, 0xC8	; 200
    5f4a:	52 e4       	ldi	r21, 0x42	; 66
    5f4c:	36 d2       	rcall	.+1132   	; 0x63ba <__divsf3>
    5f4e:	28 ed       	ldi	r18, 0xD8	; 216
    5f50:	3f e0       	ldi	r19, 0x0F	; 15
    5f52:	49 e4       	ldi	r20, 0x49	; 73
    5f54:	50 e4       	ldi	r21, 0x40	; 64
    5f56:	4f d4       	rcall	.+2206   	; 0x67f6 <__mulsf3>
    5f58:	20 e0       	ldi	r18, 0x00	; 0
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	44 e3       	ldi	r20, 0x34	; 52
    5f5e:	53 e4       	ldi	r21, 0x43	; 67
    5f60:	2c d2       	rcall	.+1112   	; 0x63ba <__divsf3>
    5f62:	6d 8b       	std	Y+21, r22	; 0x15
    5f64:	7e 8b       	std	Y+22, r23	; 0x16
    5f66:	8f 8b       	std	Y+23, r24	; 0x17
    5f68:	98 8f       	std	Y+24, r25	; 0x18
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    5f6a:	d1 01       	movw	r26, r2
    5f6c:	58 96       	adiw	r26, 0x18	; 24
    5f6e:	8d 90       	ld	r8, X+
    5f70:	9d 90       	ld	r9, X+
    5f72:	ad 90       	ld	r10, X+
    5f74:	bc 90       	ld	r11, X
    5f76:	5b 97       	sbiw	r26, 0x1b	; 27
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    5f78:	5c 96       	adiw	r26, 0x1c	; 28
    5f7a:	cd 90       	ld	r12, X+
    5f7c:	dd 90       	ld	r13, X+
    5f7e:	ed 90       	ld	r14, X+
    5f80:	fc 90       	ld	r15, X
    5f82:	5f 97       	sbiw	r26, 0x1f	; 31
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    5f84:	58 96       	adiw	r26, 0x18	; 24
    5f86:	4d 90       	ld	r4, X+
    5f88:	5d 90       	ld	r5, X+
    5f8a:	6d 90       	ld	r6, X+
    5f8c:	7c 90       	ld	r7, X
    5f8e:	5b 97       	sbiw	r26, 0x1b	; 27
// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    5f90:	58 96       	adiw	r26, 0x18	; 24
    5f92:	6d 91       	ld	r22, X+
    5f94:	7d 91       	ld	r23, X+
    5f96:	8d 91       	ld	r24, X+
    5f98:	9c 91       	ld	r25, X
    5f9a:	5b 97       	sbiw	r26, 0x1b	; 27
    5f9c:	a9 d2       	rcall	.+1362   	; 0x64f0 <__floatsisf>
    5f9e:	20 e0       	ldi	r18, 0x00	; 0
    5fa0:	30 e0       	ldi	r19, 0x00	; 0
    5fa2:	48 ec       	ldi	r20, 0xC8	; 200
    5fa4:	52 e4       	ldi	r21, 0x42	; 66
    5fa6:	09 d2       	rcall	.+1042   	; 0x63ba <__divsf3>
    5fa8:	26 ea       	ldi	r18, 0xA6	; 166
    5faa:	3b e9       	ldi	r19, 0x9B	; 155
    5fac:	48 e9       	ldi	r20, 0x98	; 152
    5fae:	51 e4       	ldi	r21, 0x41	; 65
    5fb0:	1f d1       	rcall	.+574    	; 0x61f0 <__subsf3>
    5fb2:	69 83       	std	Y+1, r22	; 0x01
    5fb4:	7a 83       	std	Y+2, r23	; 0x02
    5fb6:	8b 83       	std	Y+3, r24	; 0x03
    5fb8:	9c 83       	std	Y+4, r25	; 0x04
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    5fba:	f1 01       	movw	r30, r2
    5fbc:	64 8d       	ldd	r22, Z+28	; 0x1c
    5fbe:	75 8d       	ldd	r23, Z+29	; 0x1d
    5fc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    5fc2:	97 8d       	ldd	r25, Z+31	; 0x1f
    5fc4:	95 d2       	rcall	.+1322   	; 0x64f0 <__floatsisf>
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	48 ec       	ldi	r20, 0xC8	; 200
    5fcc:	52 e4       	ldi	r21, 0x42	; 66
    5fce:	f5 d1       	rcall	.+1002   	; 0x63ba <__divsf3>
    5fd0:	26 e0       	ldi	r18, 0x06	; 6
    5fd2:	31 ec       	ldi	r19, 0xC1	; 193
    5fd4:	41 e9       	ldi	r20, 0x91	; 145
    5fd6:	52 e4       	ldi	r21, 0x42	; 66
    5fd8:	0b d1       	rcall	.+534    	; 0x61f0 <__subsf3>
    5fda:	6d 83       	std	Y+5, r22	; 0x05
    5fdc:	7e 83       	std	Y+6, r23	; 0x06
    5fde:	8f 83       	std	Y+7, r24	; 0x07
    5fe0:	98 87       	std	Y+8, r25	; 0x08
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    5fe2:	d1 01       	movw	r26, r2
    5fe4:	58 96       	adiw	r26, 0x18	; 24
    5fe6:	6d 91       	ld	r22, X+
    5fe8:	7d 91       	ld	r23, X+
    5fea:	8d 91       	ld	r24, X+
    5fec:	9c 91       	ld	r25, X
    5fee:	5b 97       	sbiw	r26, 0x1b	; 27
    5ff0:	7f d2       	rcall	.+1278   	; 0x64f0 <__floatsisf>
    5ff2:	20 e0       	ldi	r18, 0x00	; 0
    5ff4:	30 e0       	ldi	r19, 0x00	; 0
    5ff6:	48 ec       	ldi	r20, 0xC8	; 200
    5ff8:	52 e4       	ldi	r21, 0x42	; 66
    5ffa:	df d1       	rcall	.+958    	; 0x63ba <__divsf3>
    5ffc:	28 ed       	ldi	r18, 0xD8	; 216
    5ffe:	3f e0       	ldi	r19, 0x0F	; 15
    6000:	49 e4       	ldi	r20, 0x49	; 73
    6002:	50 e4       	ldi	r21, 0x40	; 64
    6004:	f8 d3       	rcall	.+2032   	; 0x67f6 <__mulsf3>
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	44 e3       	ldi	r20, 0x34	; 52
    600c:	53 e4       	ldi	r21, 0x43	; 67
    600e:	d5 d1       	rcall	.+938    	; 0x63ba <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    6010:	d1 d1       	rcall	.+930    	; 0x63b4 <cos>
    6012:	69 8b       	std	Y+17, r22	; 0x11
    6014:	7a 8b       	std	Y+18, r23	; 0x12
    6016:	8b 8b       	std	Y+19, r24	; 0x13
    6018:	9c 8b       	std	Y+20, r25	; 0x14
    601a:	29 81       	ldd	r18, Y+1	; 0x01
    601c:	3a 81       	ldd	r19, Y+2	; 0x02
    601e:	4b 81       	ldd	r20, Y+3	; 0x03
    6020:	5c 81       	ldd	r21, Y+4	; 0x04
    6022:	ca 01       	movw	r24, r20
    6024:	b9 01       	movw	r22, r18
    6026:	e7 d3       	rcall	.+1998   	; 0x67f6 <__mulsf3>
    6028:	69 83       	std	Y+1, r22	; 0x01
    602a:	7a 83       	std	Y+2, r23	; 0x02
    602c:	8b 83       	std	Y+3, r24	; 0x03
    602e:	9c 83       	std	Y+4, r25	; 0x04
    6030:	2d 81       	ldd	r18, Y+5	; 0x05
    6032:	3e 81       	ldd	r19, Y+6	; 0x06
    6034:	4f 81       	ldd	r20, Y+7	; 0x07
    6036:	58 85       	ldd	r21, Y+8	; 0x08
    6038:	69 89       	ldd	r22, Y+17	; 0x11
    603a:	7a 89       	ldd	r23, Y+18	; 0x12
    603c:	8b 89       	ldd	r24, Y+19	; 0x13
    603e:	9c 89       	ldd	r25, Y+20	; 0x14
    6040:	da d3       	rcall	.+1972   	; 0x67f6 <__mulsf3>
    6042:	2d 81       	ldd	r18, Y+5	; 0x05
    6044:	3e 81       	ldd	r19, Y+6	; 0x06
    6046:	4f 81       	ldd	r20, Y+7	; 0x07
    6048:	58 85       	ldd	r21, Y+8	; 0x08
    604a:	d5 d3       	rcall	.+1962   	; 0x67f6 <__mulsf3>
    604c:	9b 01       	movw	r18, r22
    604e:	ac 01       	movw	r20, r24
    6050:	69 81       	ldd	r22, Y+1	; 0x01
    6052:	7a 81       	ldd	r23, Y+2	; 0x02
    6054:	8b 81       	ldd	r24, Y+3	; 0x03
    6056:	9c 81       	ldd	r25, Y+4	; 0x04
    6058:	cc d0       	rcall	.+408    	; 0x61f2 <__addsf3>
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	48 ec       	ldi	r20, 0xC8	; 200
    6060:	52 e4       	ldi	r21, 0x42	; 66
    6062:	a4 d1       	rcall	.+840    	; 0x63ac <__cmpsf2>
    6064:	88 23       	and	r24, r24
    6066:	64 f4       	brge	.+24     	; 0x6080 <main+0x6a0>
    6068:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    606c:	81 30       	cpi	r24, 0x01	; 1
    606e:	09 f0       	breq	.+2      	; 0x6072 <main+0x692>
    6070:	43 c0       	rjmp	.+134    	; 0x60f8 <main+0x718>
		{
			flag_mumbai = 1;
    6072:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <flag_mumbai>
			flag_india = 0;
    6076:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
			flag_france = 0;
    607a:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    607e:	9b c0       	rjmp	.+310    	; 0x61b6 <main+0x7d6>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    6080:	6d 89       	ldd	r22, Y+21	; 0x15
    6082:	7e 89       	ldd	r23, Y+22	; 0x16
    6084:	8f 89       	ldd	r24, Y+23	; 0x17
    6086:	98 8d       	ldd	r25, Y+24	; 0x18
    6088:	95 d1       	rcall	.+810    	; 0x63b4 <cos>
    608a:	69 83       	std	Y+1, r22	; 0x01
    608c:	7a 83       	std	Y+2, r23	; 0x02
    608e:	8b 83       	std	Y+3, r24	; 0x03
    6090:	9c 83       	std	Y+4, r25	; 0x04
    6092:	29 85       	ldd	r18, Y+9	; 0x09
    6094:	3a 85       	ldd	r19, Y+10	; 0x0a
    6096:	4b 85       	ldd	r20, Y+11	; 0x0b
    6098:	5c 85       	ldd	r21, Y+12	; 0x0c
    609a:	ca 01       	movw	r24, r20
    609c:	b9 01       	movw	r22, r18
    609e:	ab d3       	rcall	.+1878   	; 0x67f6 <__mulsf3>
    60a0:	6d 83       	std	Y+5, r22	; 0x05
    60a2:	7e 83       	std	Y+6, r23	; 0x06
    60a4:	8f 83       	std	Y+7, r24	; 0x07
    60a6:	98 87       	std	Y+8, r25	; 0x08
    60a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    60aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    60ac:	4f 85       	ldd	r20, Y+15	; 0x0f
    60ae:	58 89       	ldd	r21, Y+16	; 0x10
    60b0:	69 81       	ldd	r22, Y+1	; 0x01
    60b2:	7a 81       	ldd	r23, Y+2	; 0x02
    60b4:	8b 81       	ldd	r24, Y+3	; 0x03
    60b6:	9c 81       	ldd	r25, Y+4	; 0x04
    60b8:	9e d3       	rcall	.+1852   	; 0x67f6 <__mulsf3>
    60ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    60bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    60be:	4f 85       	ldd	r20, Y+15	; 0x0f
    60c0:	58 89       	ldd	r21, Y+16	; 0x10
    60c2:	99 d3       	rcall	.+1842   	; 0x67f6 <__mulsf3>
    60c4:	9b 01       	movw	r18, r22
    60c6:	ac 01       	movw	r20, r24
    60c8:	6d 81       	ldd	r22, Y+5	; 0x05
    60ca:	7e 81       	ldd	r23, Y+6	; 0x06
    60cc:	8f 81       	ldd	r24, Y+7	; 0x07
    60ce:	98 85       	ldd	r25, Y+8	; 0x08
    60d0:	90 d0       	rcall	.+288    	; 0x61f2 <__addsf3>
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e4       	ldi	r19, 0x40	; 64
    60d6:	4c e1       	ldi	r20, 0x1C	; 28
    60d8:	54 e4       	ldi	r21, 0x44	; 68
    60da:	68 d1       	rcall	.+720    	; 0x63ac <__cmpsf2>
    60dc:	88 23       	and	r24, r24
    60de:	64 f4       	brge	.+24     	; 0x60f8 <main+0x718>
    60e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    60e4:	81 30       	cpi	r24, 0x01	; 1
    60e6:	09 f0       	breq	.+2      	; 0x60ea <main+0x70a>
    60e8:	60 c0       	rjmp	.+192    	; 0x61aa <main+0x7ca>
	  {
      flag_mumbai = 0;
    60ea:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_india = 1;
    60ee:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <flag_india>
	  flag_france = 0;
    60f2:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
    60f6:	5f c0       	rjmp	.+190    	; 0x61b6 <main+0x7d6>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    60f8:	c7 01       	movw	r24, r14
    60fa:	b6 01       	movw	r22, r12
    60fc:	f9 d1       	rcall	.+1010   	; 0x64f0 <__floatsisf>
    60fe:	20 e0       	ldi	r18, 0x00	; 0
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	48 ec       	ldi	r20, 0xC8	; 200
    6104:	52 e4       	ldi	r21, 0x42	; 66
    6106:	59 d1       	rcall	.+690    	; 0x63ba <__divsf3>
    6108:	28 eb       	ldi	r18, 0xB8	; 184
    610a:	3e e1       	ldi	r19, 0x1E	; 30
    610c:	45 e1       	ldi	r20, 0x15	; 21
    610e:	50 e4       	ldi	r21, 0x40	; 64
    6110:	6f d0       	rcall	.+222    	; 0x61f0 <__subsf3>
    6112:	6b 01       	movw	r12, r22
    6114:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    6116:	c5 01       	movw	r24, r10
    6118:	b4 01       	movw	r22, r8
    611a:	ea d1       	rcall	.+980    	; 0x64f0 <__floatsisf>
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	48 ec       	ldi	r20, 0xC8	; 200
    6122:	52 e4       	ldi	r21, 0x42	; 66
    6124:	4a d1       	rcall	.+660    	; 0x63ba <__divsf3>
    6126:	23 e3       	ldi	r18, 0x33	; 51
    6128:	33 e3       	ldi	r19, 0x33	; 51
    612a:	43 e4       	ldi	r20, 0x43	; 67
    612c:	52 e4       	ldi	r21, 0x42	; 66
    612e:	60 d0       	rcall	.+192    	; 0x61f0 <__subsf3>
    6130:	4b 01       	movw	r8, r22
    6132:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6134:	c3 01       	movw	r24, r6
    6136:	b2 01       	movw	r22, r4
    6138:	db d1       	rcall	.+950    	; 0x64f0 <__floatsisf>
    613a:	20 e0       	ldi	r18, 0x00	; 0
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	48 ec       	ldi	r20, 0xC8	; 200
    6140:	52 e4       	ldi	r21, 0x42	; 66
    6142:	3b d1       	rcall	.+630    	; 0x63ba <__divsf3>
    6144:	28 ed       	ldi	r18, 0xD8	; 216
    6146:	3f e0       	ldi	r19, 0x0F	; 15
    6148:	49 e4       	ldi	r20, 0x49	; 73
    614a:	50 e4       	ldi	r21, 0x40	; 64
    614c:	54 d3       	rcall	.+1704   	; 0x67f6 <__mulsf3>
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	30 e0       	ldi	r19, 0x00	; 0
    6152:	44 e3       	ldi	r20, 0x34	; 52
    6154:	53 e4       	ldi	r21, 0x43	; 67
    6156:	31 d1       	rcall	.+610    	; 0x63ba <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    6158:	2d d1       	rcall	.+602    	; 0x63b4 <cos>
    615a:	2b 01       	movw	r4, r22
    615c:	3c 01       	movw	r6, r24
    615e:	a5 01       	movw	r20, r10
    6160:	94 01       	movw	r18, r8
    6162:	c5 01       	movw	r24, r10
    6164:	b4 01       	movw	r22, r8
    6166:	47 d3       	rcall	.+1678   	; 0x67f6 <__mulsf3>
    6168:	4b 01       	movw	r8, r22
    616a:	5c 01       	movw	r10, r24
    616c:	a7 01       	movw	r20, r14
    616e:	96 01       	movw	r18, r12
    6170:	c3 01       	movw	r24, r6
    6172:	b2 01       	movw	r22, r4
    6174:	40 d3       	rcall	.+1664   	; 0x67f6 <__mulsf3>
    6176:	a7 01       	movw	r20, r14
    6178:	96 01       	movw	r18, r12
    617a:	3d d3       	rcall	.+1658   	; 0x67f6 <__mulsf3>
    617c:	9b 01       	movw	r18, r22
    617e:	ac 01       	movw	r20, r24
    6180:	c5 01       	movw	r24, r10
    6182:	b4 01       	movw	r22, r8
    6184:	36 d0       	rcall	.+108    	; 0x61f2 <__addsf3>
    6186:	20 e0       	ldi	r18, 0x00	; 0
    6188:	30 e0       	ldi	r19, 0x00	; 0
    618a:	48 ec       	ldi	r20, 0xC8	; 200
    618c:	52 e4       	ldi	r21, 0x42	; 66
    618e:	0e d1       	rcall	.+540    	; 0x63ac <__cmpsf2>
    6190:	88 23       	and	r24, r24
    6192:	5c f4       	brge	.+22     	; 0x61aa <main+0x7ca>
    6194:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Mode>
    6198:	81 30       	cpi	r24, 0x01	; 1
    619a:	39 f4       	brne	.+14     	; 0x61aa <main+0x7ca>
      {
	  flag_mumbai = 0;
    619c:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
      flag_france = 1;
    61a0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <flag_france>
	  flag_india = 0;
    61a4:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
    61a8:	06 c0       	rjmp	.+12     	; 0x61b6 <main+0x7d6>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    61aa:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <flag_france>
	  flag_india = 0;
    61ae:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <flag_india>
	  flag_mumbai = 0;
    61b2:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <flag_mumbai>
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    61b6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UniversalCycles>
    61ba:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UniversalCycles+0x1>
    61be:	01 96       	adiw	r24, 0x01	; 1
    61c0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <UniversalCycles+0x1>
    61c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <UniversalCycles>
    //}
	//////////////////////////////////
	overflow=tot_overflow-overflow;
    61c8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <tot_overflow>
	counter_value = TCNT1 + (65535-counter_value);
    61cc:	8c b5       	in	r24, 0x2c	; 44
    61ce:	9d b5       	in	r25, 0x2d	; 45
	//transmit_UART0((uint8_t)(net_time>>8));
	//transmit_UART0((uint8_t)(net_time>>16));
	//transmit_UART0((uint8_t)(net_time>>24));
	//transmit_UART0('\r');
	//////////////////////////////////
	timer_wait_reset();
    61d0:	b0 db       	rcall	.-2208   	; 0x5932 <timer_wait_reset>
	//wdt_disable();
  }
    61d2:	4c cc       	rjmp	.-1896   	; 0x5a6c <main+0x8c>

000061d4 <acos>:
    61d4:	9f 93       	push	r25
    61d6:	9f 77       	andi	r25, 0x7F	; 127
    61d8:	04 d2       	rcall	.+1032   	; 0x65e2 <__fp_arccos>
    61da:	0f 90       	pop	r0
    61dc:	00 20       	and	r0, r0
    61de:	3a f4       	brpl	.+14     	; 0x61ee <acos+0x1a>
    61e0:	90 58       	subi	r25, 0x80	; 128
    61e2:	a2 ea       	ldi	r26, 0xA2	; 162
    61e4:	2a ed       	ldi	r18, 0xDA	; 218
    61e6:	3f e0       	ldi	r19, 0x0F	; 15
    61e8:	49 e4       	ldi	r20, 0x49	; 73
    61ea:	50 e4       	ldi	r21, 0x40	; 64
    61ec:	13 d0       	rcall	.+38     	; 0x6214 <__addsf3x>
    61ee:	ad c2       	rjmp	.+1370   	; 0x674a <__fp_round>

000061f0 <__subsf3>:
    61f0:	50 58       	subi	r21, 0x80	; 128

000061f2 <__addsf3>:
    61f2:	bb 27       	eor	r27, r27
    61f4:	aa 27       	eor	r26, r26
    61f6:	0e d0       	rcall	.+28     	; 0x6214 <__addsf3x>
    61f8:	a8 c2       	rjmp	.+1360   	; 0x674a <__fp_round>
    61fa:	71 d2       	rcall	.+1250   	; 0x66de <__fp_pscA>
    61fc:	30 f0       	brcs	.+12     	; 0x620a <__addsf3+0x18>
    61fe:	76 d2       	rcall	.+1260   	; 0x66ec <__fp_pscB>
    6200:	20 f0       	brcs	.+8      	; 0x620a <__addsf3+0x18>
    6202:	31 f4       	brne	.+12     	; 0x6210 <__addsf3+0x1e>
    6204:	9f 3f       	cpi	r25, 0xFF	; 255
    6206:	11 f4       	brne	.+4      	; 0x620c <__addsf3+0x1a>
    6208:	1e f4       	brtc	.+6      	; 0x6210 <__addsf3+0x1e>
    620a:	30 c2       	rjmp	.+1120   	; 0x666c <__fp_nan>
    620c:	0e f4       	brtc	.+2      	; 0x6210 <__addsf3+0x1e>
    620e:	e0 95       	com	r30
    6210:	e7 fb       	bst	r30, 7
    6212:	26 c2       	rjmp	.+1100   	; 0x6660 <__fp_inf>

00006214 <__addsf3x>:
    6214:	e9 2f       	mov	r30, r25
    6216:	bb d2       	rcall	.+1398   	; 0x678e <__fp_split3>
    6218:	80 f3       	brcs	.-32     	; 0x61fa <__addsf3+0x8>
    621a:	ba 17       	cp	r27, r26
    621c:	62 07       	cpc	r22, r18
    621e:	73 07       	cpc	r23, r19
    6220:	84 07       	cpc	r24, r20
    6222:	95 07       	cpc	r25, r21
    6224:	18 f0       	brcs	.+6      	; 0x622c <__addsf3x+0x18>
    6226:	71 f4       	brne	.+28     	; 0x6244 <__addsf3x+0x30>
    6228:	9e f5       	brtc	.+102    	; 0x6290 <__addsf3x+0x7c>
    622a:	d3 c2       	rjmp	.+1446   	; 0x67d2 <__fp_zero>
    622c:	0e f4       	brtc	.+2      	; 0x6230 <__addsf3x+0x1c>
    622e:	e0 95       	com	r30
    6230:	0b 2e       	mov	r0, r27
    6232:	ba 2f       	mov	r27, r26
    6234:	a0 2d       	mov	r26, r0
    6236:	0b 01       	movw	r0, r22
    6238:	b9 01       	movw	r22, r18
    623a:	90 01       	movw	r18, r0
    623c:	0c 01       	movw	r0, r24
    623e:	ca 01       	movw	r24, r20
    6240:	a0 01       	movw	r20, r0
    6242:	11 24       	eor	r1, r1
    6244:	ff 27       	eor	r31, r31
    6246:	59 1b       	sub	r21, r25
    6248:	99 f0       	breq	.+38     	; 0x6270 <__addsf3x+0x5c>
    624a:	59 3f       	cpi	r21, 0xF9	; 249
    624c:	50 f4       	brcc	.+20     	; 0x6262 <__addsf3x+0x4e>
    624e:	50 3e       	cpi	r21, 0xE0	; 224
    6250:	68 f1       	brcs	.+90     	; 0x62ac <__addsf3x+0x98>
    6252:	1a 16       	cp	r1, r26
    6254:	f0 40       	sbci	r31, 0x00	; 0
    6256:	a2 2f       	mov	r26, r18
    6258:	23 2f       	mov	r18, r19
    625a:	34 2f       	mov	r19, r20
    625c:	44 27       	eor	r20, r20
    625e:	58 5f       	subi	r21, 0xF8	; 248
    6260:	f3 cf       	rjmp	.-26     	; 0x6248 <__addsf3x+0x34>
    6262:	46 95       	lsr	r20
    6264:	37 95       	ror	r19
    6266:	27 95       	ror	r18
    6268:	a7 95       	ror	r26
    626a:	f0 40       	sbci	r31, 0x00	; 0
    626c:	53 95       	inc	r21
    626e:	c9 f7       	brne	.-14     	; 0x6262 <__addsf3x+0x4e>
    6270:	7e f4       	brtc	.+30     	; 0x6290 <__addsf3x+0x7c>
    6272:	1f 16       	cp	r1, r31
    6274:	ba 0b       	sbc	r27, r26
    6276:	62 0b       	sbc	r22, r18
    6278:	73 0b       	sbc	r23, r19
    627a:	84 0b       	sbc	r24, r20
    627c:	ba f0       	brmi	.+46     	; 0x62ac <__addsf3x+0x98>
    627e:	91 50       	subi	r25, 0x01	; 1
    6280:	a1 f0       	breq	.+40     	; 0x62aa <__addsf3x+0x96>
    6282:	ff 0f       	add	r31, r31
    6284:	bb 1f       	adc	r27, r27
    6286:	66 1f       	adc	r22, r22
    6288:	77 1f       	adc	r23, r23
    628a:	88 1f       	adc	r24, r24
    628c:	c2 f7       	brpl	.-16     	; 0x627e <__addsf3x+0x6a>
    628e:	0e c0       	rjmp	.+28     	; 0x62ac <__addsf3x+0x98>
    6290:	ba 0f       	add	r27, r26
    6292:	62 1f       	adc	r22, r18
    6294:	73 1f       	adc	r23, r19
    6296:	84 1f       	adc	r24, r20
    6298:	48 f4       	brcc	.+18     	; 0x62ac <__addsf3x+0x98>
    629a:	87 95       	ror	r24
    629c:	77 95       	ror	r23
    629e:	67 95       	ror	r22
    62a0:	b7 95       	ror	r27
    62a2:	f7 95       	ror	r31
    62a4:	9e 3f       	cpi	r25, 0xFE	; 254
    62a6:	08 f0       	brcs	.+2      	; 0x62aa <__addsf3x+0x96>
    62a8:	b3 cf       	rjmp	.-154    	; 0x6210 <__addsf3+0x1e>
    62aa:	93 95       	inc	r25
    62ac:	88 0f       	add	r24, r24
    62ae:	08 f0       	brcs	.+2      	; 0x62b2 <__addsf3x+0x9e>
    62b0:	99 27       	eor	r25, r25
    62b2:	ee 0f       	add	r30, r30
    62b4:	97 95       	ror	r25
    62b6:	87 95       	ror	r24
    62b8:	08 95       	ret

000062ba <asin>:
    62ba:	9f 93       	push	r25
    62bc:	9f 77       	andi	r25, 0x7F	; 127
    62be:	ee e3       	ldi	r30, 0x3E	; 62
    62c0:	89 37       	cpi	r24, 0x79	; 121
    62c2:	9e 07       	cpc	r25, r30
    62c4:	20 f4       	brcc	.+8      	; 0x62ce <asin+0x14>
    62c6:	e2 ea       	ldi	r30, 0xA2	; 162
    62c8:	f0 e0       	ldi	r31, 0x00	; 0
    62ca:	f8 d1       	rcall	.+1008   	; 0x66bc <__fp_powsodd>
    62cc:	09 c0       	rjmp	.+18     	; 0x62e0 <asin+0x26>
    62ce:	89 d1       	rcall	.+786    	; 0x65e2 <__fp_arccos>
    62d0:	90 58       	subi	r25, 0x80	; 128
    62d2:	a2 ea       	ldi	r26, 0xA2	; 162
    62d4:	2a ed       	ldi	r18, 0xDA	; 218
    62d6:	3f e0       	ldi	r19, 0x0F	; 15
    62d8:	49 ec       	ldi	r20, 0xC9	; 201
    62da:	5f e3       	ldi	r21, 0x3F	; 63
    62dc:	9b df       	rcall	.-202    	; 0x6214 <__addsf3x>
    62de:	35 d2       	rcall	.+1130   	; 0x674a <__fp_round>
    62e0:	0f 90       	pop	r0
    62e2:	07 fc       	sbrc	r0, 7
    62e4:	90 58       	subi	r25, 0x80	; 128
    62e6:	08 95       	ret
    62e8:	fa d1       	rcall	.+1012   	; 0x66de <__fp_pscA>
    62ea:	58 f0       	brcs	.+22     	; 0x6302 <asin+0x48>
    62ec:	80 e8       	ldi	r24, 0x80	; 128
    62ee:	91 e0       	ldi	r25, 0x01	; 1
    62f0:	09 f4       	brne	.+2      	; 0x62f4 <asin+0x3a>
    62f2:	9e ef       	ldi	r25, 0xFE	; 254
    62f4:	fb d1       	rcall	.+1014   	; 0x66ec <__fp_pscB>
    62f6:	28 f0       	brcs	.+10     	; 0x6302 <asin+0x48>
    62f8:	40 e8       	ldi	r20, 0x80	; 128
    62fa:	51 e0       	ldi	r21, 0x01	; 1
    62fc:	59 f4       	brne	.+22     	; 0x6314 <atan2+0xe>
    62fe:	5e ef       	ldi	r21, 0xFE	; 254
    6300:	09 c0       	rjmp	.+18     	; 0x6314 <atan2+0xe>
    6302:	b4 c1       	rjmp	.+872    	; 0x666c <__fp_nan>
    6304:	66 c2       	rjmp	.+1228   	; 0x67d2 <__fp_zero>

00006306 <atan2>:
    6306:	e9 2f       	mov	r30, r25
    6308:	e0 78       	andi	r30, 0x80	; 128
    630a:	41 d2       	rcall	.+1154   	; 0x678e <__fp_split3>
    630c:	68 f3       	brcs	.-38     	; 0x62e8 <asin+0x2e>
    630e:	09 2e       	mov	r0, r25
    6310:	05 2a       	or	r0, r21
    6312:	c1 f3       	breq	.-16     	; 0x6304 <asin+0x4a>
    6314:	26 17       	cp	r18, r22
    6316:	37 07       	cpc	r19, r23
    6318:	48 07       	cpc	r20, r24
    631a:	59 07       	cpc	r21, r25
    631c:	38 f0       	brcs	.+14     	; 0x632c <atan2+0x26>
    631e:	0e 2e       	mov	r0, r30
    6320:	07 f8       	bld	r0, 7
    6322:	e0 25       	eor	r30, r0
    6324:	69 f0       	breq	.+26     	; 0x6340 <atan2+0x3a>
    6326:	e0 25       	eor	r30, r0
    6328:	e0 64       	ori	r30, 0x40	; 64
    632a:	0a c0       	rjmp	.+20     	; 0x6340 <atan2+0x3a>
    632c:	ef 63       	ori	r30, 0x3F	; 63
    632e:	07 f8       	bld	r0, 7
    6330:	00 94       	com	r0
    6332:	07 fa       	bst	r0, 7
    6334:	db 01       	movw	r26, r22
    6336:	b9 01       	movw	r22, r18
    6338:	9d 01       	movw	r18, r26
    633a:	dc 01       	movw	r26, r24
    633c:	ca 01       	movw	r24, r20
    633e:	ad 01       	movw	r20, r26
    6340:	ef 93       	push	r30
    6342:	4a d0       	rcall	.+148    	; 0x63d8 <__divsf3_pse>
    6344:	02 d2       	rcall	.+1028   	; 0x674a <__fp_round>
    6346:	0a d0       	rcall	.+20     	; 0x635c <atan>
    6348:	5f 91       	pop	r21
    634a:	55 23       	and	r21, r21
    634c:	31 f0       	breq	.+12     	; 0x635a <atan2+0x54>
    634e:	2b ed       	ldi	r18, 0xDB	; 219
    6350:	3f e0       	ldi	r19, 0x0F	; 15
    6352:	49 e4       	ldi	r20, 0x49	; 73
    6354:	50 fd       	sbrc	r21, 0
    6356:	49 ec       	ldi	r20, 0xC9	; 201
    6358:	4c cf       	rjmp	.-360    	; 0x61f2 <__addsf3>
    635a:	08 95       	ret

0000635c <atan>:
    635c:	df 93       	push	r29
    635e:	dd 27       	eor	r29, r29
    6360:	b9 2f       	mov	r27, r25
    6362:	bf 77       	andi	r27, 0x7F	; 127
    6364:	40 e8       	ldi	r20, 0x80	; 128
    6366:	5f e3       	ldi	r21, 0x3F	; 63
    6368:	16 16       	cp	r1, r22
    636a:	17 06       	cpc	r1, r23
    636c:	48 07       	cpc	r20, r24
    636e:	5b 07       	cpc	r21, r27
    6370:	10 f4       	brcc	.+4      	; 0x6376 <atan+0x1a>
    6372:	d9 2f       	mov	r29, r25
    6374:	39 d2       	rcall	.+1138   	; 0x67e8 <inverse>
    6376:	9f 93       	push	r25
    6378:	8f 93       	push	r24
    637a:	7f 93       	push	r23
    637c:	6f 93       	push	r22
    637e:	32 d3       	rcall	.+1636   	; 0x69e4 <square>
    6380:	e6 eb       	ldi	r30, 0xB6	; 182
    6382:	f0 e0       	ldi	r31, 0x00	; 0
    6384:	76 d1       	rcall	.+748    	; 0x6672 <__fp_powser>
    6386:	e1 d1       	rcall	.+962    	; 0x674a <__fp_round>
    6388:	2f 91       	pop	r18
    638a:	3f 91       	pop	r19
    638c:	4f 91       	pop	r20
    638e:	5f 91       	pop	r21
    6390:	3e d2       	rcall	.+1148   	; 0x680e <__mulsf3x>
    6392:	dd 23       	and	r29, r29
    6394:	49 f0       	breq	.+18     	; 0x63a8 <atan+0x4c>
    6396:	90 58       	subi	r25, 0x80	; 128
    6398:	a2 ea       	ldi	r26, 0xA2	; 162
    639a:	2a ed       	ldi	r18, 0xDA	; 218
    639c:	3f e0       	ldi	r19, 0x0F	; 15
    639e:	49 ec       	ldi	r20, 0xC9	; 201
    63a0:	5f e3       	ldi	r21, 0x3F	; 63
    63a2:	d0 78       	andi	r29, 0x80	; 128
    63a4:	5d 27       	eor	r21, r29
    63a6:	36 df       	rcall	.-404    	; 0x6214 <__addsf3x>
    63a8:	df 91       	pop	r29
    63aa:	cf c1       	rjmp	.+926    	; 0x674a <__fp_round>

000063ac <__cmpsf2>:
    63ac:	35 d1       	rcall	.+618    	; 0x6618 <__fp_cmp>
    63ae:	08 f4       	brcc	.+2      	; 0x63b2 <__cmpsf2+0x6>
    63b0:	81 e0       	ldi	r24, 0x01	; 1
    63b2:	08 95       	ret

000063b4 <cos>:
    63b4:	a3 d1       	rcall	.+838    	; 0x66fc <__fp_rempio2>
    63b6:	e3 95       	inc	r30
    63b8:	d9 c1       	rjmp	.+946    	; 0x676c <__fp_sinus>

000063ba <__divsf3>:
    63ba:	0c d0       	rcall	.+24     	; 0x63d4 <__divsf3x>
    63bc:	c6 c1       	rjmp	.+908    	; 0x674a <__fp_round>
    63be:	96 d1       	rcall	.+812    	; 0x66ec <__fp_pscB>
    63c0:	40 f0       	brcs	.+16     	; 0x63d2 <__divsf3+0x18>
    63c2:	8d d1       	rcall	.+794    	; 0x66de <__fp_pscA>
    63c4:	30 f0       	brcs	.+12     	; 0x63d2 <__divsf3+0x18>
    63c6:	21 f4       	brne	.+8      	; 0x63d0 <__divsf3+0x16>
    63c8:	5f 3f       	cpi	r21, 0xFF	; 255
    63ca:	19 f0       	breq	.+6      	; 0x63d2 <__divsf3+0x18>
    63cc:	49 c1       	rjmp	.+658    	; 0x6660 <__fp_inf>
    63ce:	51 11       	cpse	r21, r1
    63d0:	01 c2       	rjmp	.+1026   	; 0x67d4 <__fp_szero>
    63d2:	4c c1       	rjmp	.+664    	; 0x666c <__fp_nan>

000063d4 <__divsf3x>:
    63d4:	dc d1       	rcall	.+952    	; 0x678e <__fp_split3>
    63d6:	98 f3       	brcs	.-26     	; 0x63be <__divsf3+0x4>

000063d8 <__divsf3_pse>:
    63d8:	99 23       	and	r25, r25
    63da:	c9 f3       	breq	.-14     	; 0x63ce <__divsf3+0x14>
    63dc:	55 23       	and	r21, r21
    63de:	b1 f3       	breq	.-20     	; 0x63cc <__divsf3+0x12>
    63e0:	95 1b       	sub	r25, r21
    63e2:	55 0b       	sbc	r21, r21
    63e4:	bb 27       	eor	r27, r27
    63e6:	aa 27       	eor	r26, r26
    63e8:	62 17       	cp	r22, r18
    63ea:	73 07       	cpc	r23, r19
    63ec:	84 07       	cpc	r24, r20
    63ee:	38 f0       	brcs	.+14     	; 0x63fe <__divsf3_pse+0x26>
    63f0:	9f 5f       	subi	r25, 0xFF	; 255
    63f2:	5f 4f       	sbci	r21, 0xFF	; 255
    63f4:	22 0f       	add	r18, r18
    63f6:	33 1f       	adc	r19, r19
    63f8:	44 1f       	adc	r20, r20
    63fa:	aa 1f       	adc	r26, r26
    63fc:	a9 f3       	breq	.-22     	; 0x63e8 <__divsf3_pse+0x10>
    63fe:	33 d0       	rcall	.+102    	; 0x6466 <__divsf3_pse+0x8e>
    6400:	0e 2e       	mov	r0, r30
    6402:	3a f0       	brmi	.+14     	; 0x6412 <__divsf3_pse+0x3a>
    6404:	e0 e8       	ldi	r30, 0x80	; 128
    6406:	30 d0       	rcall	.+96     	; 0x6468 <__divsf3_pse+0x90>
    6408:	91 50       	subi	r25, 0x01	; 1
    640a:	50 40       	sbci	r21, 0x00	; 0
    640c:	e6 95       	lsr	r30
    640e:	00 1c       	adc	r0, r0
    6410:	ca f7       	brpl	.-14     	; 0x6404 <__divsf3_pse+0x2c>
    6412:	29 d0       	rcall	.+82     	; 0x6466 <__divsf3_pse+0x8e>
    6414:	fe 2f       	mov	r31, r30
    6416:	27 d0       	rcall	.+78     	; 0x6466 <__divsf3_pse+0x8e>
    6418:	66 0f       	add	r22, r22
    641a:	77 1f       	adc	r23, r23
    641c:	88 1f       	adc	r24, r24
    641e:	bb 1f       	adc	r27, r27
    6420:	26 17       	cp	r18, r22
    6422:	37 07       	cpc	r19, r23
    6424:	48 07       	cpc	r20, r24
    6426:	ab 07       	cpc	r26, r27
    6428:	b0 e8       	ldi	r27, 0x80	; 128
    642a:	09 f0       	breq	.+2      	; 0x642e <__divsf3_pse+0x56>
    642c:	bb 0b       	sbc	r27, r27
    642e:	80 2d       	mov	r24, r0
    6430:	bf 01       	movw	r22, r30
    6432:	ff 27       	eor	r31, r31
    6434:	93 58       	subi	r25, 0x83	; 131
    6436:	5f 4f       	sbci	r21, 0xFF	; 255
    6438:	2a f0       	brmi	.+10     	; 0x6444 <__divsf3_pse+0x6c>
    643a:	9e 3f       	cpi	r25, 0xFE	; 254
    643c:	51 05       	cpc	r21, r1
    643e:	68 f0       	brcs	.+26     	; 0x645a <__divsf3_pse+0x82>
    6440:	0f c1       	rjmp	.+542    	; 0x6660 <__fp_inf>
    6442:	c8 c1       	rjmp	.+912    	; 0x67d4 <__fp_szero>
    6444:	5f 3f       	cpi	r21, 0xFF	; 255
    6446:	ec f3       	brlt	.-6      	; 0x6442 <__divsf3_pse+0x6a>
    6448:	98 3e       	cpi	r25, 0xE8	; 232
    644a:	dc f3       	brlt	.-10     	; 0x6442 <__divsf3_pse+0x6a>
    644c:	86 95       	lsr	r24
    644e:	77 95       	ror	r23
    6450:	67 95       	ror	r22
    6452:	b7 95       	ror	r27
    6454:	f7 95       	ror	r31
    6456:	9f 5f       	subi	r25, 0xFF	; 255
    6458:	c9 f7       	brne	.-14     	; 0x644c <__divsf3_pse+0x74>
    645a:	88 0f       	add	r24, r24
    645c:	91 1d       	adc	r25, r1
    645e:	96 95       	lsr	r25
    6460:	87 95       	ror	r24
    6462:	97 f9       	bld	r25, 7
    6464:	08 95       	ret
    6466:	e1 e0       	ldi	r30, 0x01	; 1
    6468:	66 0f       	add	r22, r22
    646a:	77 1f       	adc	r23, r23
    646c:	88 1f       	adc	r24, r24
    646e:	bb 1f       	adc	r27, r27
    6470:	62 17       	cp	r22, r18
    6472:	73 07       	cpc	r23, r19
    6474:	84 07       	cpc	r24, r20
    6476:	ba 07       	cpc	r27, r26
    6478:	20 f0       	brcs	.+8      	; 0x6482 <__divsf3_pse+0xaa>
    647a:	62 1b       	sub	r22, r18
    647c:	73 0b       	sbc	r23, r19
    647e:	84 0b       	sbc	r24, r20
    6480:	ba 0b       	sbc	r27, r26
    6482:	ee 1f       	adc	r30, r30
    6484:	88 f7       	brcc	.-30     	; 0x6468 <__divsf3_pse+0x90>
    6486:	e0 95       	com	r30
    6488:	08 95       	ret

0000648a <__fixsfsi>:
    648a:	04 d0       	rcall	.+8      	; 0x6494 <__fixunssfsi>
    648c:	68 94       	set
    648e:	b1 11       	cpse	r27, r1
    6490:	a1 c1       	rjmp	.+834    	; 0x67d4 <__fp_szero>
    6492:	08 95       	ret

00006494 <__fixunssfsi>:
    6494:	84 d1       	rcall	.+776    	; 0x679e <__fp_splitA>
    6496:	88 f0       	brcs	.+34     	; 0x64ba <__fixunssfsi+0x26>
    6498:	9f 57       	subi	r25, 0x7F	; 127
    649a:	90 f0       	brcs	.+36     	; 0x64c0 <__fixunssfsi+0x2c>
    649c:	b9 2f       	mov	r27, r25
    649e:	99 27       	eor	r25, r25
    64a0:	b7 51       	subi	r27, 0x17	; 23
    64a2:	a0 f0       	brcs	.+40     	; 0x64cc <__fixunssfsi+0x38>
    64a4:	d1 f0       	breq	.+52     	; 0x64da <__fixunssfsi+0x46>
    64a6:	66 0f       	add	r22, r22
    64a8:	77 1f       	adc	r23, r23
    64aa:	88 1f       	adc	r24, r24
    64ac:	99 1f       	adc	r25, r25
    64ae:	1a f0       	brmi	.+6      	; 0x64b6 <__fixunssfsi+0x22>
    64b0:	ba 95       	dec	r27
    64b2:	c9 f7       	brne	.-14     	; 0x64a6 <__fixunssfsi+0x12>
    64b4:	12 c0       	rjmp	.+36     	; 0x64da <__fixunssfsi+0x46>
    64b6:	b1 30       	cpi	r27, 0x01	; 1
    64b8:	81 f0       	breq	.+32     	; 0x64da <__fixunssfsi+0x46>
    64ba:	8b d1       	rcall	.+790    	; 0x67d2 <__fp_zero>
    64bc:	b1 e0       	ldi	r27, 0x01	; 1
    64be:	08 95       	ret
    64c0:	88 c1       	rjmp	.+784    	; 0x67d2 <__fp_zero>
    64c2:	67 2f       	mov	r22, r23
    64c4:	78 2f       	mov	r23, r24
    64c6:	88 27       	eor	r24, r24
    64c8:	b8 5f       	subi	r27, 0xF8	; 248
    64ca:	39 f0       	breq	.+14     	; 0x64da <__fixunssfsi+0x46>
    64cc:	b9 3f       	cpi	r27, 0xF9	; 249
    64ce:	cc f3       	brlt	.-14     	; 0x64c2 <__fixunssfsi+0x2e>
    64d0:	86 95       	lsr	r24
    64d2:	77 95       	ror	r23
    64d4:	67 95       	ror	r22
    64d6:	b3 95       	inc	r27
    64d8:	d9 f7       	brne	.-10     	; 0x64d0 <__fixunssfsi+0x3c>
    64da:	3e f4       	brtc	.+14     	; 0x64ea <__fixunssfsi+0x56>
    64dc:	90 95       	com	r25
    64de:	80 95       	com	r24
    64e0:	70 95       	com	r23
    64e2:	61 95       	neg	r22
    64e4:	7f 4f       	sbci	r23, 0xFF	; 255
    64e6:	8f 4f       	sbci	r24, 0xFF	; 255
    64e8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ea:	08 95       	ret

000064ec <__floatunsisf>:
    64ec:	e8 94       	clt
    64ee:	09 c0       	rjmp	.+18     	; 0x6502 <__floatsisf+0x12>

000064f0 <__floatsisf>:
    64f0:	97 fb       	bst	r25, 7
    64f2:	3e f4       	brtc	.+14     	; 0x6502 <__floatsisf+0x12>
    64f4:	90 95       	com	r25
    64f6:	80 95       	com	r24
    64f8:	70 95       	com	r23
    64fa:	61 95       	neg	r22
    64fc:	7f 4f       	sbci	r23, 0xFF	; 255
    64fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6500:	9f 4f       	sbci	r25, 0xFF	; 255
    6502:	99 23       	and	r25, r25
    6504:	a9 f0       	breq	.+42     	; 0x6530 <__floatsisf+0x40>
    6506:	f9 2f       	mov	r31, r25
    6508:	96 e9       	ldi	r25, 0x96	; 150
    650a:	bb 27       	eor	r27, r27
    650c:	93 95       	inc	r25
    650e:	f6 95       	lsr	r31
    6510:	87 95       	ror	r24
    6512:	77 95       	ror	r23
    6514:	67 95       	ror	r22
    6516:	b7 95       	ror	r27
    6518:	f1 11       	cpse	r31, r1
    651a:	f8 cf       	rjmp	.-16     	; 0x650c <__floatsisf+0x1c>
    651c:	fa f4       	brpl	.+62     	; 0x655c <__floatsisf+0x6c>
    651e:	bb 0f       	add	r27, r27
    6520:	11 f4       	brne	.+4      	; 0x6526 <__floatsisf+0x36>
    6522:	60 ff       	sbrs	r22, 0
    6524:	1b c0       	rjmp	.+54     	; 0x655c <__floatsisf+0x6c>
    6526:	6f 5f       	subi	r22, 0xFF	; 255
    6528:	7f 4f       	sbci	r23, 0xFF	; 255
    652a:	8f 4f       	sbci	r24, 0xFF	; 255
    652c:	9f 4f       	sbci	r25, 0xFF	; 255
    652e:	16 c0       	rjmp	.+44     	; 0x655c <__floatsisf+0x6c>
    6530:	88 23       	and	r24, r24
    6532:	11 f0       	breq	.+4      	; 0x6538 <__floatsisf+0x48>
    6534:	96 e9       	ldi	r25, 0x96	; 150
    6536:	11 c0       	rjmp	.+34     	; 0x655a <__floatsisf+0x6a>
    6538:	77 23       	and	r23, r23
    653a:	21 f0       	breq	.+8      	; 0x6544 <__floatsisf+0x54>
    653c:	9e e8       	ldi	r25, 0x8E	; 142
    653e:	87 2f       	mov	r24, r23
    6540:	76 2f       	mov	r23, r22
    6542:	05 c0       	rjmp	.+10     	; 0x654e <__floatsisf+0x5e>
    6544:	66 23       	and	r22, r22
    6546:	71 f0       	breq	.+28     	; 0x6564 <__floatsisf+0x74>
    6548:	96 e8       	ldi	r25, 0x86	; 134
    654a:	86 2f       	mov	r24, r22
    654c:	70 e0       	ldi	r23, 0x00	; 0
    654e:	60 e0       	ldi	r22, 0x00	; 0
    6550:	2a f0       	brmi	.+10     	; 0x655c <__floatsisf+0x6c>
    6552:	9a 95       	dec	r25
    6554:	66 0f       	add	r22, r22
    6556:	77 1f       	adc	r23, r23
    6558:	88 1f       	adc	r24, r24
    655a:	da f7       	brpl	.-10     	; 0x6552 <__floatsisf+0x62>
    655c:	88 0f       	add	r24, r24
    655e:	96 95       	lsr	r25
    6560:	87 95       	ror	r24
    6562:	97 f9       	bld	r25, 7
    6564:	08 95       	ret

00006566 <__floatundisf>:
    6566:	e8 94       	clt

00006568 <__fp_di2sf>:
    6568:	f9 2f       	mov	r31, r25
    656a:	96 eb       	ldi	r25, 0xB6	; 182
    656c:	ff 23       	and	r31, r31
    656e:	81 f0       	breq	.+32     	; 0x6590 <__fp_di2sf+0x28>
    6570:	12 16       	cp	r1, r18
    6572:	13 06       	cpc	r1, r19
    6574:	14 06       	cpc	r1, r20
    6576:	44 0b       	sbc	r20, r20
    6578:	93 95       	inc	r25
    657a:	f6 95       	lsr	r31
    657c:	87 95       	ror	r24
    657e:	77 95       	ror	r23
    6580:	67 95       	ror	r22
    6582:	57 95       	ror	r21
    6584:	40 40       	sbci	r20, 0x00	; 0
    6586:	ff 23       	and	r31, r31
    6588:	b9 f7       	brne	.-18     	; 0x6578 <__fp_di2sf+0x10>
    658a:	1b c0       	rjmp	.+54     	; 0x65c2 <__fp_di2sf+0x5a>
    658c:	99 27       	eor	r25, r25
    658e:	08 95       	ret
    6590:	88 23       	and	r24, r24
    6592:	51 f4       	brne	.+20     	; 0x65a8 <__fp_di2sf+0x40>
    6594:	98 50       	subi	r25, 0x08	; 8
    6596:	d2 f7       	brpl	.-12     	; 0x658c <__fp_di2sf+0x24>
    6598:	87 2b       	or	r24, r23
    659a:	76 2f       	mov	r23, r22
    659c:	65 2f       	mov	r22, r21
    659e:	54 2f       	mov	r21, r20
    65a0:	43 2f       	mov	r20, r19
    65a2:	32 2f       	mov	r19, r18
    65a4:	20 e0       	ldi	r18, 0x00	; 0
    65a6:	b1 f3       	breq	.-20     	; 0x6594 <__fp_di2sf+0x2c>
    65a8:	12 16       	cp	r1, r18
    65aa:	13 06       	cpc	r1, r19
    65ac:	14 06       	cpc	r1, r20
    65ae:	44 0b       	sbc	r20, r20
    65b0:	88 23       	and	r24, r24
    65b2:	3a f0       	brmi	.+14     	; 0x65c2 <__fp_di2sf+0x5a>
    65b4:	9a 95       	dec	r25
    65b6:	44 0f       	add	r20, r20
    65b8:	55 1f       	adc	r21, r21
    65ba:	66 1f       	adc	r22, r22
    65bc:	77 1f       	adc	r23, r23
    65be:	88 1f       	adc	r24, r24
    65c0:	ca f7       	brpl	.-14     	; 0x65b4 <__fp_di2sf+0x4c>
    65c2:	55 23       	and	r21, r21
    65c4:	4a f4       	brpl	.+18     	; 0x65d8 <__fp_di2sf+0x70>
    65c6:	44 0f       	add	r20, r20
    65c8:	55 1f       	adc	r21, r21
    65ca:	11 f4       	brne	.+4      	; 0x65d0 <__fp_di2sf+0x68>
    65cc:	60 ff       	sbrs	r22, 0
    65ce:	04 c0       	rjmp	.+8      	; 0x65d8 <__fp_di2sf+0x70>
    65d0:	6f 5f       	subi	r22, 0xFF	; 255
    65d2:	7f 4f       	sbci	r23, 0xFF	; 255
    65d4:	8f 4f       	sbci	r24, 0xFF	; 255
    65d6:	9f 4f       	sbci	r25, 0xFF	; 255
    65d8:	88 0f       	add	r24, r24
    65da:	96 95       	lsr	r25
    65dc:	87 95       	ror	r24
    65de:	97 f9       	bld	r25, 7
    65e0:	08 95       	ret

000065e2 <__fp_arccos>:
    65e2:	df 93       	push	r29
    65e4:	cf 93       	push	r28
    65e6:	1f 93       	push	r17
    65e8:	0f 93       	push	r16
    65ea:	8b 01       	movw	r16, r22
    65ec:	ec 01       	movw	r28, r24
    65ee:	e3 ee       	ldi	r30, 0xE3	; 227
    65f0:	f0 e0       	ldi	r31, 0x00	; 0
    65f2:	3f d0       	rcall	.+126    	; 0x6672 <__fp_powser>
    65f4:	aa d0       	rcall	.+340    	; 0x674a <__fp_round>
    65f6:	98 01       	movw	r18, r16
    65f8:	ae 01       	movw	r20, r28
    65fa:	8b 01       	movw	r16, r22
    65fc:	ec 01       	movw	r28, r24
    65fe:	60 e0       	ldi	r22, 0x00	; 0
    6600:	70 e0       	ldi	r23, 0x00	; 0
    6602:	80 e8       	ldi	r24, 0x80	; 128
    6604:	9f e3       	ldi	r25, 0x3F	; 63
    6606:	f4 dd       	rcall	.-1048   	; 0x61f0 <__subsf3>
    6608:	af d1       	rcall	.+862    	; 0x6968 <sqrt>
    660a:	98 01       	movw	r18, r16
    660c:	ae 01       	movw	r20, r28
    660e:	0f 91       	pop	r16
    6610:	1f 91       	pop	r17
    6612:	cf 91       	pop	r28
    6614:	df 91       	pop	r29
    6616:	fb c0       	rjmp	.+502    	; 0x680e <__mulsf3x>

00006618 <__fp_cmp>:
    6618:	99 0f       	add	r25, r25
    661a:	00 08       	sbc	r0, r0
    661c:	55 0f       	add	r21, r21
    661e:	aa 0b       	sbc	r26, r26
    6620:	e0 e8       	ldi	r30, 0x80	; 128
    6622:	fe ef       	ldi	r31, 0xFE	; 254
    6624:	16 16       	cp	r1, r22
    6626:	17 06       	cpc	r1, r23
    6628:	e8 07       	cpc	r30, r24
    662a:	f9 07       	cpc	r31, r25
    662c:	c0 f0       	brcs	.+48     	; 0x665e <__fp_cmp+0x46>
    662e:	12 16       	cp	r1, r18
    6630:	13 06       	cpc	r1, r19
    6632:	e4 07       	cpc	r30, r20
    6634:	f5 07       	cpc	r31, r21
    6636:	98 f0       	brcs	.+38     	; 0x665e <__fp_cmp+0x46>
    6638:	62 1b       	sub	r22, r18
    663a:	73 0b       	sbc	r23, r19
    663c:	84 0b       	sbc	r24, r20
    663e:	95 0b       	sbc	r25, r21
    6640:	39 f4       	brne	.+14     	; 0x6650 <__fp_cmp+0x38>
    6642:	0a 26       	eor	r0, r26
    6644:	61 f0       	breq	.+24     	; 0x665e <__fp_cmp+0x46>
    6646:	23 2b       	or	r18, r19
    6648:	24 2b       	or	r18, r20
    664a:	25 2b       	or	r18, r21
    664c:	21 f4       	brne	.+8      	; 0x6656 <__fp_cmp+0x3e>
    664e:	08 95       	ret
    6650:	0a 26       	eor	r0, r26
    6652:	09 f4       	brne	.+2      	; 0x6656 <__fp_cmp+0x3e>
    6654:	a1 40       	sbci	r26, 0x01	; 1
    6656:	a6 95       	lsr	r26
    6658:	8f ef       	ldi	r24, 0xFF	; 255
    665a:	81 1d       	adc	r24, r1
    665c:	81 1d       	adc	r24, r1
    665e:	08 95       	ret

00006660 <__fp_inf>:
    6660:	97 f9       	bld	r25, 7
    6662:	9f 67       	ori	r25, 0x7F	; 127
    6664:	80 e8       	ldi	r24, 0x80	; 128
    6666:	70 e0       	ldi	r23, 0x00	; 0
    6668:	60 e0       	ldi	r22, 0x00	; 0
    666a:	08 95       	ret

0000666c <__fp_nan>:
    666c:	9f ef       	ldi	r25, 0xFF	; 255
    666e:	80 ec       	ldi	r24, 0xC0	; 192
    6670:	08 95       	ret

00006672 <__fp_powser>:
    6672:	df 93       	push	r29
    6674:	cf 93       	push	r28
    6676:	1f 93       	push	r17
    6678:	0f 93       	push	r16
    667a:	ff 92       	push	r15
    667c:	ef 92       	push	r14
    667e:	df 92       	push	r13
    6680:	7b 01       	movw	r14, r22
    6682:	8c 01       	movw	r16, r24
    6684:	68 94       	set
    6686:	05 c0       	rjmp	.+10     	; 0x6692 <__fp_powser+0x20>
    6688:	da 2e       	mov	r13, r26
    668a:	ef 01       	movw	r28, r30
    668c:	c0 d0       	rcall	.+384    	; 0x680e <__mulsf3x>
    668e:	fe 01       	movw	r30, r28
    6690:	e8 94       	clt
    6692:	a5 91       	lpm	r26, Z+
    6694:	25 91       	lpm	r18, Z+
    6696:	35 91       	lpm	r19, Z+
    6698:	45 91       	lpm	r20, Z+
    669a:	55 91       	lpm	r21, Z+
    669c:	ae f3       	brts	.-22     	; 0x6688 <__fp_powser+0x16>
    669e:	ef 01       	movw	r28, r30
    66a0:	b9 dd       	rcall	.-1166   	; 0x6214 <__addsf3x>
    66a2:	fe 01       	movw	r30, r28
    66a4:	97 01       	movw	r18, r14
    66a6:	a8 01       	movw	r20, r16
    66a8:	da 94       	dec	r13
    66aa:	79 f7       	brne	.-34     	; 0x668a <__fp_powser+0x18>
    66ac:	df 90       	pop	r13
    66ae:	ef 90       	pop	r14
    66b0:	ff 90       	pop	r15
    66b2:	0f 91       	pop	r16
    66b4:	1f 91       	pop	r17
    66b6:	cf 91       	pop	r28
    66b8:	df 91       	pop	r29
    66ba:	08 95       	ret

000066bc <__fp_powsodd>:
    66bc:	9f 93       	push	r25
    66be:	8f 93       	push	r24
    66c0:	7f 93       	push	r23
    66c2:	6f 93       	push	r22
    66c4:	ff 93       	push	r31
    66c6:	ef 93       	push	r30
    66c8:	9b 01       	movw	r18, r22
    66ca:	ac 01       	movw	r20, r24
    66cc:	94 d0       	rcall	.+296    	; 0x67f6 <__mulsf3>
    66ce:	ef 91       	pop	r30
    66d0:	ff 91       	pop	r31
    66d2:	cf df       	rcall	.-98     	; 0x6672 <__fp_powser>
    66d4:	2f 91       	pop	r18
    66d6:	3f 91       	pop	r19
    66d8:	4f 91       	pop	r20
    66da:	5f 91       	pop	r21
    66dc:	8c c0       	rjmp	.+280    	; 0x67f6 <__mulsf3>

000066de <__fp_pscA>:
    66de:	00 24       	eor	r0, r0
    66e0:	0a 94       	dec	r0
    66e2:	16 16       	cp	r1, r22
    66e4:	17 06       	cpc	r1, r23
    66e6:	18 06       	cpc	r1, r24
    66e8:	09 06       	cpc	r0, r25
    66ea:	08 95       	ret

000066ec <__fp_pscB>:
    66ec:	00 24       	eor	r0, r0
    66ee:	0a 94       	dec	r0
    66f0:	12 16       	cp	r1, r18
    66f2:	13 06       	cpc	r1, r19
    66f4:	14 06       	cpc	r1, r20
    66f6:	05 06       	cpc	r0, r21
    66f8:	08 95       	ret
    66fa:	b8 cf       	rjmp	.-144    	; 0x666c <__fp_nan>

000066fc <__fp_rempio2>:
    66fc:	50 d0       	rcall	.+160    	; 0x679e <__fp_splitA>
    66fe:	e8 f3       	brcs	.-6      	; 0x66fa <__fp_pscB+0xe>
    6700:	e8 94       	clt
    6702:	e0 e0       	ldi	r30, 0x00	; 0
    6704:	bb 27       	eor	r27, r27
    6706:	9f 57       	subi	r25, 0x7F	; 127
    6708:	f0 f0       	brcs	.+60     	; 0x6746 <__fp_rempio2+0x4a>
    670a:	2a ed       	ldi	r18, 0xDA	; 218
    670c:	3f e0       	ldi	r19, 0x0F	; 15
    670e:	49 ec       	ldi	r20, 0xC9	; 201
    6710:	06 c0       	rjmp	.+12     	; 0x671e <__fp_rempio2+0x22>
    6712:	ee 0f       	add	r30, r30
    6714:	bb 0f       	add	r27, r27
    6716:	66 1f       	adc	r22, r22
    6718:	77 1f       	adc	r23, r23
    671a:	88 1f       	adc	r24, r24
    671c:	28 f0       	brcs	.+10     	; 0x6728 <__fp_rempio2+0x2c>
    671e:	b2 3a       	cpi	r27, 0xA2	; 162
    6720:	62 07       	cpc	r22, r18
    6722:	73 07       	cpc	r23, r19
    6724:	84 07       	cpc	r24, r20
    6726:	28 f0       	brcs	.+10     	; 0x6732 <__fp_rempio2+0x36>
    6728:	b2 5a       	subi	r27, 0xA2	; 162
    672a:	62 0b       	sbc	r22, r18
    672c:	73 0b       	sbc	r23, r19
    672e:	84 0b       	sbc	r24, r20
    6730:	e3 95       	inc	r30
    6732:	9a 95       	dec	r25
    6734:	72 f7       	brpl	.-36     	; 0x6712 <__fp_rempio2+0x16>
    6736:	80 38       	cpi	r24, 0x80	; 128
    6738:	30 f4       	brcc	.+12     	; 0x6746 <__fp_rempio2+0x4a>
    673a:	9a 95       	dec	r25
    673c:	bb 0f       	add	r27, r27
    673e:	66 1f       	adc	r22, r22
    6740:	77 1f       	adc	r23, r23
    6742:	88 1f       	adc	r24, r24
    6744:	d2 f7       	brpl	.-12     	; 0x673a <__fp_rempio2+0x3e>
    6746:	90 48       	sbci	r25, 0x80	; 128
    6748:	83 c1       	rjmp	.+774    	; 0x6a50 <__fp_mpack_finite>

0000674a <__fp_round>:
    674a:	09 2e       	mov	r0, r25
    674c:	03 94       	inc	r0
    674e:	00 0c       	add	r0, r0
    6750:	11 f4       	brne	.+4      	; 0x6756 <__fp_round+0xc>
    6752:	88 23       	and	r24, r24
    6754:	52 f0       	brmi	.+20     	; 0x676a <__fp_round+0x20>
    6756:	bb 0f       	add	r27, r27
    6758:	40 f4       	brcc	.+16     	; 0x676a <__fp_round+0x20>
    675a:	bf 2b       	or	r27, r31
    675c:	11 f4       	brne	.+4      	; 0x6762 <__fp_round+0x18>
    675e:	60 ff       	sbrs	r22, 0
    6760:	04 c0       	rjmp	.+8      	; 0x676a <__fp_round+0x20>
    6762:	6f 5f       	subi	r22, 0xFF	; 255
    6764:	7f 4f       	sbci	r23, 0xFF	; 255
    6766:	8f 4f       	sbci	r24, 0xFF	; 255
    6768:	9f 4f       	sbci	r25, 0xFF	; 255
    676a:	08 95       	ret

0000676c <__fp_sinus>:
    676c:	ef 93       	push	r30
    676e:	e0 ff       	sbrs	r30, 0
    6770:	06 c0       	rjmp	.+12     	; 0x677e <__fp_sinus+0x12>
    6772:	a2 ea       	ldi	r26, 0xA2	; 162
    6774:	2a ed       	ldi	r18, 0xDA	; 218
    6776:	3f e0       	ldi	r19, 0x0F	; 15
    6778:	49 ec       	ldi	r20, 0xC9	; 201
    677a:	5f eb       	ldi	r21, 0xBF	; 191
    677c:	4b dd       	rcall	.-1386   	; 0x6214 <__addsf3x>
    677e:	e5 df       	rcall	.-54     	; 0x674a <__fp_round>
    6780:	0f 90       	pop	r0
    6782:	03 94       	inc	r0
    6784:	01 fc       	sbrc	r0, 1
    6786:	90 58       	subi	r25, 0x80	; 128
    6788:	eb e0       	ldi	r30, 0x0B	; 11
    678a:	f1 e0       	ldi	r31, 0x01	; 1
    678c:	97 cf       	rjmp	.-210    	; 0x66bc <__fp_powsodd>

0000678e <__fp_split3>:
    678e:	57 fd       	sbrc	r21, 7
    6790:	90 58       	subi	r25, 0x80	; 128
    6792:	44 0f       	add	r20, r20
    6794:	55 1f       	adc	r21, r21
    6796:	59 f0       	breq	.+22     	; 0x67ae <__fp_splitA+0x10>
    6798:	5f 3f       	cpi	r21, 0xFF	; 255
    679a:	71 f0       	breq	.+28     	; 0x67b8 <__fp_splitA+0x1a>
    679c:	47 95       	ror	r20

0000679e <__fp_splitA>:
    679e:	88 0f       	add	r24, r24
    67a0:	97 fb       	bst	r25, 7
    67a2:	99 1f       	adc	r25, r25
    67a4:	61 f0       	breq	.+24     	; 0x67be <__fp_splitA+0x20>
    67a6:	9f 3f       	cpi	r25, 0xFF	; 255
    67a8:	79 f0       	breq	.+30     	; 0x67c8 <__fp_splitA+0x2a>
    67aa:	87 95       	ror	r24
    67ac:	08 95       	ret
    67ae:	12 16       	cp	r1, r18
    67b0:	13 06       	cpc	r1, r19
    67b2:	14 06       	cpc	r1, r20
    67b4:	55 1f       	adc	r21, r21
    67b6:	f2 cf       	rjmp	.-28     	; 0x679c <__fp_split3+0xe>
    67b8:	46 95       	lsr	r20
    67ba:	f1 df       	rcall	.-30     	; 0x679e <__fp_splitA>
    67bc:	08 c0       	rjmp	.+16     	; 0x67ce <__fp_splitA+0x30>
    67be:	16 16       	cp	r1, r22
    67c0:	17 06       	cpc	r1, r23
    67c2:	18 06       	cpc	r1, r24
    67c4:	99 1f       	adc	r25, r25
    67c6:	f1 cf       	rjmp	.-30     	; 0x67aa <__fp_splitA+0xc>
    67c8:	86 95       	lsr	r24
    67ca:	71 05       	cpc	r23, r1
    67cc:	61 05       	cpc	r22, r1
    67ce:	08 94       	sec
    67d0:	08 95       	ret

000067d2 <__fp_zero>:
    67d2:	e8 94       	clt

000067d4 <__fp_szero>:
    67d4:	bb 27       	eor	r27, r27
    67d6:	66 27       	eor	r22, r22
    67d8:	77 27       	eor	r23, r23
    67da:	cb 01       	movw	r24, r22
    67dc:	97 f9       	bld	r25, 7
    67de:	08 95       	ret

000067e0 <__gesf2>:
    67e0:	1b df       	rcall	.-458    	; 0x6618 <__fp_cmp>
    67e2:	08 f4       	brcc	.+2      	; 0x67e6 <__gesf2+0x6>
    67e4:	8f ef       	ldi	r24, 0xFF	; 255
    67e6:	08 95       	ret

000067e8 <inverse>:
    67e8:	9b 01       	movw	r18, r22
    67ea:	ac 01       	movw	r20, r24
    67ec:	60 e0       	ldi	r22, 0x00	; 0
    67ee:	70 e0       	ldi	r23, 0x00	; 0
    67f0:	80 e8       	ldi	r24, 0x80	; 128
    67f2:	9f e3       	ldi	r25, 0x3F	; 63
    67f4:	e2 cd       	rjmp	.-1084   	; 0x63ba <__divsf3>

000067f6 <__mulsf3>:
    67f6:	0b d0       	rcall	.+22     	; 0x680e <__mulsf3x>
    67f8:	a8 cf       	rjmp	.-176    	; 0x674a <__fp_round>
    67fa:	71 df       	rcall	.-286    	; 0x66de <__fp_pscA>
    67fc:	28 f0       	brcs	.+10     	; 0x6808 <__mulsf3+0x12>
    67fe:	76 df       	rcall	.-276    	; 0x66ec <__fp_pscB>
    6800:	18 f0       	brcs	.+6      	; 0x6808 <__mulsf3+0x12>
    6802:	95 23       	and	r25, r21
    6804:	09 f0       	breq	.+2      	; 0x6808 <__mulsf3+0x12>
    6806:	2c cf       	rjmp	.-424    	; 0x6660 <__fp_inf>
    6808:	31 cf       	rjmp	.-414    	; 0x666c <__fp_nan>
    680a:	11 24       	eor	r1, r1
    680c:	e3 cf       	rjmp	.-58     	; 0x67d4 <__fp_szero>

0000680e <__mulsf3x>:
    680e:	bf df       	rcall	.-130    	; 0x678e <__fp_split3>
    6810:	a0 f3       	brcs	.-24     	; 0x67fa <__mulsf3+0x4>

00006812 <__mulsf3_pse>:
    6812:	95 9f       	mul	r25, r21
    6814:	d1 f3       	breq	.-12     	; 0x680a <__mulsf3+0x14>
    6816:	95 0f       	add	r25, r21
    6818:	50 e0       	ldi	r21, 0x00	; 0
    681a:	55 1f       	adc	r21, r21
    681c:	62 9f       	mul	r22, r18
    681e:	f0 01       	movw	r30, r0
    6820:	72 9f       	mul	r23, r18
    6822:	bb 27       	eor	r27, r27
    6824:	f0 0d       	add	r31, r0
    6826:	b1 1d       	adc	r27, r1
    6828:	63 9f       	mul	r22, r19
    682a:	aa 27       	eor	r26, r26
    682c:	f0 0d       	add	r31, r0
    682e:	b1 1d       	adc	r27, r1
    6830:	aa 1f       	adc	r26, r26
    6832:	64 9f       	mul	r22, r20
    6834:	66 27       	eor	r22, r22
    6836:	b0 0d       	add	r27, r0
    6838:	a1 1d       	adc	r26, r1
    683a:	66 1f       	adc	r22, r22
    683c:	82 9f       	mul	r24, r18
    683e:	22 27       	eor	r18, r18
    6840:	b0 0d       	add	r27, r0
    6842:	a1 1d       	adc	r26, r1
    6844:	62 1f       	adc	r22, r18
    6846:	73 9f       	mul	r23, r19
    6848:	b0 0d       	add	r27, r0
    684a:	a1 1d       	adc	r26, r1
    684c:	62 1f       	adc	r22, r18
    684e:	83 9f       	mul	r24, r19
    6850:	a0 0d       	add	r26, r0
    6852:	61 1d       	adc	r22, r1
    6854:	22 1f       	adc	r18, r18
    6856:	74 9f       	mul	r23, r20
    6858:	33 27       	eor	r19, r19
    685a:	a0 0d       	add	r26, r0
    685c:	61 1d       	adc	r22, r1
    685e:	23 1f       	adc	r18, r19
    6860:	84 9f       	mul	r24, r20
    6862:	60 0d       	add	r22, r0
    6864:	21 1d       	adc	r18, r1
    6866:	82 2f       	mov	r24, r18
    6868:	76 2f       	mov	r23, r22
    686a:	6a 2f       	mov	r22, r26
    686c:	11 24       	eor	r1, r1
    686e:	9f 57       	subi	r25, 0x7F	; 127
    6870:	50 40       	sbci	r21, 0x00	; 0
    6872:	8a f0       	brmi	.+34     	; 0x6896 <__mulsf3_pse+0x84>
    6874:	e1 f0       	breq	.+56     	; 0x68ae <__mulsf3_pse+0x9c>
    6876:	88 23       	and	r24, r24
    6878:	4a f0       	brmi	.+18     	; 0x688c <__mulsf3_pse+0x7a>
    687a:	ee 0f       	add	r30, r30
    687c:	ff 1f       	adc	r31, r31
    687e:	bb 1f       	adc	r27, r27
    6880:	66 1f       	adc	r22, r22
    6882:	77 1f       	adc	r23, r23
    6884:	88 1f       	adc	r24, r24
    6886:	91 50       	subi	r25, 0x01	; 1
    6888:	50 40       	sbci	r21, 0x00	; 0
    688a:	a9 f7       	brne	.-22     	; 0x6876 <__mulsf3_pse+0x64>
    688c:	9e 3f       	cpi	r25, 0xFE	; 254
    688e:	51 05       	cpc	r21, r1
    6890:	70 f0       	brcs	.+28     	; 0x68ae <__mulsf3_pse+0x9c>
    6892:	e6 ce       	rjmp	.-564    	; 0x6660 <__fp_inf>
    6894:	9f cf       	rjmp	.-194    	; 0x67d4 <__fp_szero>
    6896:	5f 3f       	cpi	r21, 0xFF	; 255
    6898:	ec f3       	brlt	.-6      	; 0x6894 <__mulsf3_pse+0x82>
    689a:	98 3e       	cpi	r25, 0xE8	; 232
    689c:	dc f3       	brlt	.-10     	; 0x6894 <__mulsf3_pse+0x82>
    689e:	86 95       	lsr	r24
    68a0:	77 95       	ror	r23
    68a2:	67 95       	ror	r22
    68a4:	b7 95       	ror	r27
    68a6:	f7 95       	ror	r31
    68a8:	e7 95       	ror	r30
    68aa:	9f 5f       	subi	r25, 0xFF	; 255
    68ac:	c1 f7       	brne	.-16     	; 0x689e <__mulsf3_pse+0x8c>
    68ae:	fe 2b       	or	r31, r30
    68b0:	88 0f       	add	r24, r24
    68b2:	91 1d       	adc	r25, r1
    68b4:	96 95       	lsr	r25
    68b6:	87 95       	ror	r24
    68b8:	97 f9       	bld	r25, 7
    68ba:	08 95       	ret

000068bc <pow>:
    68bc:	fa 01       	movw	r30, r20
    68be:	ee 0f       	add	r30, r30
    68c0:	ff 1f       	adc	r31, r31
    68c2:	30 96       	adiw	r30, 0x00	; 0
    68c4:	21 05       	cpc	r18, r1
    68c6:	31 05       	cpc	r19, r1
    68c8:	99 f1       	breq	.+102    	; 0x6930 <pow+0x74>
    68ca:	61 15       	cp	r22, r1
    68cc:	71 05       	cpc	r23, r1
    68ce:	61 f4       	brne	.+24     	; 0x68e8 <pow+0x2c>
    68d0:	80 38       	cpi	r24, 0x80	; 128
    68d2:	bf e3       	ldi	r27, 0x3F	; 63
    68d4:	9b 07       	cpc	r25, r27
    68d6:	49 f1       	breq	.+82     	; 0x692a <pow+0x6e>
    68d8:	68 94       	set
    68da:	90 38       	cpi	r25, 0x80	; 128
    68dc:	81 05       	cpc	r24, r1
    68de:	61 f0       	breq	.+24     	; 0x68f8 <pow+0x3c>
    68e0:	80 38       	cpi	r24, 0x80	; 128
    68e2:	bf ef       	ldi	r27, 0xFF	; 255
    68e4:	9b 07       	cpc	r25, r27
    68e6:	41 f0       	breq	.+16     	; 0x68f8 <pow+0x3c>
    68e8:	99 23       	and	r25, r25
    68ea:	42 f5       	brpl	.+80     	; 0x693c <pow+0x80>
    68ec:	ff 3f       	cpi	r31, 0xFF	; 255
    68ee:	e1 05       	cpc	r30, r1
    68f0:	31 05       	cpc	r19, r1
    68f2:	21 05       	cpc	r18, r1
    68f4:	11 f1       	breq	.+68     	; 0x693a <pow+0x7e>
    68f6:	e8 94       	clt
    68f8:	08 94       	sec
    68fa:	e7 95       	ror	r30
    68fc:	d9 01       	movw	r26, r18
    68fe:	aa 23       	and	r26, r26
    6900:	29 f4       	brne	.+10     	; 0x690c <pow+0x50>
    6902:	ab 2f       	mov	r26, r27
    6904:	be 2f       	mov	r27, r30
    6906:	f8 5f       	subi	r31, 0xF8	; 248
    6908:	d0 f3       	brcs	.-12     	; 0x68fe <pow+0x42>
    690a:	10 c0       	rjmp	.+32     	; 0x692c <pow+0x70>
    690c:	ff 5f       	subi	r31, 0xFF	; 255
    690e:	70 f4       	brcc	.+28     	; 0x692c <pow+0x70>
    6910:	a6 95       	lsr	r26
    6912:	e0 f7       	brcc	.-8      	; 0x690c <pow+0x50>
    6914:	f7 39       	cpi	r31, 0x97	; 151
    6916:	50 f0       	brcs	.+20     	; 0x692c <pow+0x70>
    6918:	19 f0       	breq	.+6      	; 0x6920 <pow+0x64>
    691a:	ff 3a       	cpi	r31, 0xAF	; 175
    691c:	38 f4       	brcc	.+14     	; 0x692c <pow+0x70>
    691e:	9f 77       	andi	r25, 0x7F	; 127
    6920:	9f 93       	push	r25
    6922:	0c d0       	rcall	.+24     	; 0x693c <pow+0x80>
    6924:	0f 90       	pop	r0
    6926:	07 fc       	sbrc	r0, 7
    6928:	90 58       	subi	r25, 0x80	; 128
    692a:	08 95       	ret
    692c:	3e f0       	brts	.+14     	; 0x693c <pow+0x80>
    692e:	9e ce       	rjmp	.-708    	; 0x666c <__fp_nan>
    6930:	60 e0       	ldi	r22, 0x00	; 0
    6932:	70 e0       	ldi	r23, 0x00	; 0
    6934:	80 e8       	ldi	r24, 0x80	; 128
    6936:	9f e3       	ldi	r25, 0x3F	; 63
    6938:	08 95       	ret
    693a:	4f e7       	ldi	r20, 0x7F	; 127
    693c:	9f 77       	andi	r25, 0x7F	; 127
    693e:	5f 93       	push	r21
    6940:	4f 93       	push	r20
    6942:	3f 93       	push	r19
    6944:	2f 93       	push	r18
    6946:	d2 d0       	rcall	.+420    	; 0x6aec <log>
    6948:	2f 91       	pop	r18
    694a:	3f 91       	pop	r19
    694c:	4f 91       	pop	r20
    694e:	5f 91       	pop	r21
    6950:	52 df       	rcall	.-348    	; 0x67f6 <__mulsf3>
    6952:	50 c0       	rjmp	.+160    	; 0x69f4 <exp>

00006954 <sin>:
    6954:	9f 93       	push	r25
    6956:	d2 de       	rcall	.-604    	; 0x66fc <__fp_rempio2>
    6958:	0f 90       	pop	r0
    695a:	07 fc       	sbrc	r0, 7
    695c:	ee 5f       	subi	r30, 0xFE	; 254
    695e:	06 cf       	rjmp	.-500    	; 0x676c <__fp_sinus>
    6960:	11 f4       	brne	.+4      	; 0x6966 <sin+0x12>
    6962:	0e f4       	brtc	.+2      	; 0x6966 <sin+0x12>
    6964:	83 ce       	rjmp	.-762    	; 0x666c <__fp_nan>
    6966:	72 c0       	rjmp	.+228    	; 0x6a4c <__fp_mpack>

00006968 <sqrt>:
    6968:	1a df       	rcall	.-460    	; 0x679e <__fp_splitA>
    696a:	d0 f3       	brcs	.-12     	; 0x6960 <sin+0xc>
    696c:	99 23       	and	r25, r25
    696e:	d9 f3       	breq	.-10     	; 0x6966 <sin+0x12>
    6970:	ce f3       	brts	.-14     	; 0x6964 <sin+0x10>
    6972:	9f 57       	subi	r25, 0x7F	; 127
    6974:	55 0b       	sbc	r21, r21
    6976:	87 ff       	sbrs	r24, 7
    6978:	77 d0       	rcall	.+238    	; 0x6a68 <__fp_norm2>
    697a:	00 24       	eor	r0, r0
    697c:	a0 e6       	ldi	r26, 0x60	; 96
    697e:	40 ea       	ldi	r20, 0xA0	; 160
    6980:	90 01       	movw	r18, r0
    6982:	80 58       	subi	r24, 0x80	; 128
    6984:	56 95       	lsr	r21
    6986:	97 95       	ror	r25
    6988:	28 f4       	brcc	.+10     	; 0x6994 <sqrt+0x2c>
    698a:	80 5c       	subi	r24, 0xC0	; 192
    698c:	66 0f       	add	r22, r22
    698e:	77 1f       	adc	r23, r23
    6990:	88 1f       	adc	r24, r24
    6992:	20 f0       	brcs	.+8      	; 0x699c <sqrt+0x34>
    6994:	26 17       	cp	r18, r22
    6996:	37 07       	cpc	r19, r23
    6998:	48 07       	cpc	r20, r24
    699a:	30 f4       	brcc	.+12     	; 0x69a8 <sqrt+0x40>
    699c:	62 1b       	sub	r22, r18
    699e:	73 0b       	sbc	r23, r19
    69a0:	84 0b       	sbc	r24, r20
    69a2:	20 29       	or	r18, r0
    69a4:	31 29       	or	r19, r1
    69a6:	4a 2b       	or	r20, r26
    69a8:	a6 95       	lsr	r26
    69aa:	17 94       	ror	r1
    69ac:	07 94       	ror	r0
    69ae:	20 25       	eor	r18, r0
    69b0:	31 25       	eor	r19, r1
    69b2:	4a 27       	eor	r20, r26
    69b4:	58 f7       	brcc	.-42     	; 0x698c <sqrt+0x24>
    69b6:	66 0f       	add	r22, r22
    69b8:	77 1f       	adc	r23, r23
    69ba:	88 1f       	adc	r24, r24
    69bc:	20 f0       	brcs	.+8      	; 0x69c6 <sqrt+0x5e>
    69be:	26 17       	cp	r18, r22
    69c0:	37 07       	cpc	r19, r23
    69c2:	48 07       	cpc	r20, r24
    69c4:	30 f4       	brcc	.+12     	; 0x69d2 <sqrt+0x6a>
    69c6:	62 0b       	sbc	r22, r18
    69c8:	73 0b       	sbc	r23, r19
    69ca:	84 0b       	sbc	r24, r20
    69cc:	20 0d       	add	r18, r0
    69ce:	31 1d       	adc	r19, r1
    69d0:	41 1d       	adc	r20, r1
    69d2:	a0 95       	com	r26
    69d4:	81 f7       	brne	.-32     	; 0x69b6 <sqrt+0x4e>
    69d6:	b9 01       	movw	r22, r18
    69d8:	84 2f       	mov	r24, r20
    69da:	91 58       	subi	r25, 0x81	; 129
    69dc:	88 0f       	add	r24, r24
    69de:	96 95       	lsr	r25
    69e0:	87 95       	ror	r24
    69e2:	08 95       	ret

000069e4 <square>:
    69e4:	9b 01       	movw	r18, r22
    69e6:	ac 01       	movw	r20, r24
    69e8:	06 cf       	rjmp	.-500    	; 0x67f6 <__mulsf3>
    69ea:	19 f4       	brne	.+6      	; 0x69f2 <square+0xe>
    69ec:	0e f0       	brts	.+2      	; 0x69f0 <square+0xc>
    69ee:	38 ce       	rjmp	.-912    	; 0x6660 <__fp_inf>
    69f0:	f0 ce       	rjmp	.-544    	; 0x67d2 <__fp_zero>
    69f2:	3c ce       	rjmp	.-904    	; 0x666c <__fp_nan>

000069f4 <exp>:
    69f4:	d4 de       	rcall	.-600    	; 0x679e <__fp_splitA>
    69f6:	c8 f3       	brcs	.-14     	; 0x69ea <square+0x6>
    69f8:	96 38       	cpi	r25, 0x86	; 134
    69fa:	c0 f7       	brcc	.-16     	; 0x69ec <square+0x8>
    69fc:	07 f8       	bld	r0, 7
    69fe:	0f 92       	push	r0
    6a00:	e8 94       	clt
    6a02:	2b e3       	ldi	r18, 0x3B	; 59
    6a04:	3a ea       	ldi	r19, 0xAA	; 170
    6a06:	48 eb       	ldi	r20, 0xB8	; 184
    6a08:	5f e7       	ldi	r21, 0x7F	; 127
    6a0a:	03 df       	rcall	.-506    	; 0x6812 <__mulsf3_pse>
    6a0c:	0f 92       	push	r0
    6a0e:	0f 92       	push	r0
    6a10:	0f 92       	push	r0
    6a12:	4d b7       	in	r20, 0x3d	; 61
    6a14:	5e b7       	in	r21, 0x3e	; 62
    6a16:	0f 92       	push	r0
    6a18:	a9 d0       	rcall	.+338    	; 0x6b6c <modf>
    6a1a:	e9 e2       	ldi	r30, 0x29	; 41
    6a1c:	f1 e0       	ldi	r31, 0x01	; 1
    6a1e:	29 de       	rcall	.-942    	; 0x6672 <__fp_powser>
    6a20:	4f 91       	pop	r20
    6a22:	5f 91       	pop	r21
    6a24:	ef 91       	pop	r30
    6a26:	ff 91       	pop	r31
    6a28:	e5 95       	asr	r30
    6a2a:	ee 1f       	adc	r30, r30
    6a2c:	ff 1f       	adc	r31, r31
    6a2e:	49 f0       	breq	.+18     	; 0x6a42 <exp+0x4e>
    6a30:	fe 57       	subi	r31, 0x7E	; 126
    6a32:	e0 68       	ori	r30, 0x80	; 128
    6a34:	44 27       	eor	r20, r20
    6a36:	ee 0f       	add	r30, r30
    6a38:	44 1f       	adc	r20, r20
    6a3a:	fa 95       	dec	r31
    6a3c:	e1 f7       	brne	.-8      	; 0x6a36 <exp+0x42>
    6a3e:	41 95       	neg	r20
    6a40:	55 0b       	sbc	r21, r21
    6a42:	1b d0       	rcall	.+54     	; 0x6a7a <ldexp>
    6a44:	0f 90       	pop	r0
    6a46:	07 fe       	sbrs	r0, 7
    6a48:	cf ce       	rjmp	.-610    	; 0x67e8 <inverse>
    6a4a:	08 95       	ret

00006a4c <__fp_mpack>:
    6a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    6a4e:	31 f0       	breq	.+12     	; 0x6a5c <__fp_mpack_finite+0xc>

00006a50 <__fp_mpack_finite>:
    6a50:	91 50       	subi	r25, 0x01	; 1
    6a52:	20 f4       	brcc	.+8      	; 0x6a5c <__fp_mpack_finite+0xc>
    6a54:	87 95       	ror	r24
    6a56:	77 95       	ror	r23
    6a58:	67 95       	ror	r22
    6a5a:	b7 95       	ror	r27
    6a5c:	88 0f       	add	r24, r24
    6a5e:	91 1d       	adc	r25, r1
    6a60:	96 95       	lsr	r25
    6a62:	87 95       	ror	r24
    6a64:	97 f9       	bld	r25, 7
    6a66:	08 95       	ret

00006a68 <__fp_norm2>:
    6a68:	91 50       	subi	r25, 0x01	; 1
    6a6a:	50 40       	sbci	r21, 0x00	; 0
    6a6c:	66 0f       	add	r22, r22
    6a6e:	77 1f       	adc	r23, r23
    6a70:	88 1f       	adc	r24, r24
    6a72:	d2 f7       	brpl	.-12     	; 0x6a68 <__fp_norm2>
    6a74:	08 95       	ret
    6a76:	f4 cd       	rjmp	.-1048   	; 0x6660 <__fp_inf>
    6a78:	e9 cf       	rjmp	.-46     	; 0x6a4c <__fp_mpack>

00006a7a <ldexp>:
    6a7a:	91 de       	rcall	.-734    	; 0x679e <__fp_splitA>
    6a7c:	e8 f3       	brcs	.-6      	; 0x6a78 <__fp_norm2+0x10>
    6a7e:	99 23       	and	r25, r25
    6a80:	d9 f3       	breq	.-10     	; 0x6a78 <__fp_norm2+0x10>
    6a82:	94 0f       	add	r25, r20
    6a84:	51 1d       	adc	r21, r1
    6a86:	bb f3       	brvs	.-18     	; 0x6a76 <__fp_norm2+0xe>
    6a88:	91 50       	subi	r25, 0x01	; 1
    6a8a:	50 40       	sbci	r21, 0x00	; 0
    6a8c:	94 f0       	brlt	.+36     	; 0x6ab2 <ldexp+0x38>
    6a8e:	59 f0       	breq	.+22     	; 0x6aa6 <ldexp+0x2c>
    6a90:	88 23       	and	r24, r24
    6a92:	32 f0       	brmi	.+12     	; 0x6aa0 <ldexp+0x26>
    6a94:	66 0f       	add	r22, r22
    6a96:	77 1f       	adc	r23, r23
    6a98:	88 1f       	adc	r24, r24
    6a9a:	91 50       	subi	r25, 0x01	; 1
    6a9c:	50 40       	sbci	r21, 0x00	; 0
    6a9e:	c1 f7       	brne	.-16     	; 0x6a90 <ldexp+0x16>
    6aa0:	9e 3f       	cpi	r25, 0xFE	; 254
    6aa2:	51 05       	cpc	r21, r1
    6aa4:	44 f7       	brge	.-48     	; 0x6a76 <__fp_norm2+0xe>
    6aa6:	88 0f       	add	r24, r24
    6aa8:	91 1d       	adc	r25, r1
    6aaa:	96 95       	lsr	r25
    6aac:	87 95       	ror	r24
    6aae:	97 f9       	bld	r25, 7
    6ab0:	08 95       	ret
    6ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    6ab4:	ac f0       	brlt	.+42     	; 0x6ae0 <ldexp+0x66>
    6ab6:	98 3e       	cpi	r25, 0xE8	; 232
    6ab8:	9c f0       	brlt	.+38     	; 0x6ae0 <ldexp+0x66>
    6aba:	bb 27       	eor	r27, r27
    6abc:	86 95       	lsr	r24
    6abe:	77 95       	ror	r23
    6ac0:	67 95       	ror	r22
    6ac2:	b7 95       	ror	r27
    6ac4:	08 f4       	brcc	.+2      	; 0x6ac8 <ldexp+0x4e>
    6ac6:	b1 60       	ori	r27, 0x01	; 1
    6ac8:	93 95       	inc	r25
    6aca:	c1 f7       	brne	.-16     	; 0x6abc <ldexp+0x42>
    6acc:	bb 0f       	add	r27, r27
    6ace:	58 f7       	brcc	.-42     	; 0x6aa6 <ldexp+0x2c>
    6ad0:	11 f4       	brne	.+4      	; 0x6ad6 <ldexp+0x5c>
    6ad2:	60 ff       	sbrs	r22, 0
    6ad4:	e8 cf       	rjmp	.-48     	; 0x6aa6 <ldexp+0x2c>
    6ad6:	6f 5f       	subi	r22, 0xFF	; 255
    6ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    6ada:	8f 4f       	sbci	r24, 0xFF	; 255
    6adc:	9f 4f       	sbci	r25, 0xFF	; 255
    6ade:	e3 cf       	rjmp	.-58     	; 0x6aa6 <ldexp+0x2c>
    6ae0:	79 ce       	rjmp	.-782    	; 0x67d4 <__fp_szero>
    6ae2:	0e f0       	brts	.+2      	; 0x6ae6 <ldexp+0x6c>
    6ae4:	b3 cf       	rjmp	.-154    	; 0x6a4c <__fp_mpack>
    6ae6:	c2 cd       	rjmp	.-1148   	; 0x666c <__fp_nan>
    6ae8:	68 94       	set
    6aea:	ba cd       	rjmp	.-1164   	; 0x6660 <__fp_inf>

00006aec <log>:
    6aec:	58 de       	rcall	.-848    	; 0x679e <__fp_splitA>
    6aee:	c8 f3       	brcs	.-14     	; 0x6ae2 <ldexp+0x68>
    6af0:	99 23       	and	r25, r25
    6af2:	d1 f3       	breq	.-12     	; 0x6ae8 <ldexp+0x6e>
    6af4:	c6 f3       	brts	.-16     	; 0x6ae6 <ldexp+0x6c>
    6af6:	df 93       	push	r29
    6af8:	cf 93       	push	r28
    6afa:	1f 93       	push	r17
    6afc:	0f 93       	push	r16
    6afe:	ff 92       	push	r15
    6b00:	c9 2f       	mov	r28, r25
    6b02:	dd 27       	eor	r29, r29
    6b04:	88 23       	and	r24, r24
    6b06:	2a f0       	brmi	.+10     	; 0x6b12 <log+0x26>
    6b08:	21 97       	sbiw	r28, 0x01	; 1
    6b0a:	66 0f       	add	r22, r22
    6b0c:	77 1f       	adc	r23, r23
    6b0e:	88 1f       	adc	r24, r24
    6b10:	da f7       	brpl	.-10     	; 0x6b08 <log+0x1c>
    6b12:	20 e0       	ldi	r18, 0x00	; 0
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	40 e8       	ldi	r20, 0x80	; 128
    6b18:	5f eb       	ldi	r21, 0xBF	; 191
    6b1a:	9f e3       	ldi	r25, 0x3F	; 63
    6b1c:	88 39       	cpi	r24, 0x98	; 152
    6b1e:	20 f0       	brcs	.+8      	; 0x6b28 <log+0x3c>
    6b20:	80 3e       	cpi	r24, 0xE0	; 224
    6b22:	30 f0       	brcs	.+12     	; 0x6b30 <log+0x44>
    6b24:	21 96       	adiw	r28, 0x01	; 1
    6b26:	8f 77       	andi	r24, 0x7F	; 127
    6b28:	64 db       	rcall	.-2360   	; 0x61f2 <__addsf3>
    6b2a:	e1 e5       	ldi	r30, 0x51	; 81
    6b2c:	f1 e0       	ldi	r31, 0x01	; 1
    6b2e:	03 c0       	rjmp	.+6      	; 0x6b36 <log+0x4a>
    6b30:	60 db       	rcall	.-2368   	; 0x61f2 <__addsf3>
    6b32:	ee e7       	ldi	r30, 0x7E	; 126
    6b34:	f1 e0       	ldi	r31, 0x01	; 1
    6b36:	9d dd       	rcall	.-1222   	; 0x6672 <__fp_powser>
    6b38:	8b 01       	movw	r16, r22
    6b3a:	be 01       	movw	r22, r28
    6b3c:	ec 01       	movw	r28, r24
    6b3e:	fb 2e       	mov	r15, r27
    6b40:	6f 57       	subi	r22, 0x7F	; 127
    6b42:	71 09       	sbc	r23, r1
    6b44:	75 95       	asr	r23
    6b46:	77 1f       	adc	r23, r23
    6b48:	88 0b       	sbc	r24, r24
    6b4a:	99 0b       	sbc	r25, r25
    6b4c:	d1 dc       	rcall	.-1630   	; 0x64f0 <__floatsisf>
    6b4e:	28 e1       	ldi	r18, 0x18	; 24
    6b50:	32 e7       	ldi	r19, 0x72	; 114
    6b52:	41 e3       	ldi	r20, 0x31	; 49
    6b54:	5f e3       	ldi	r21, 0x3F	; 63
    6b56:	5b de       	rcall	.-842    	; 0x680e <__mulsf3x>
    6b58:	af 2d       	mov	r26, r15
    6b5a:	98 01       	movw	r18, r16
    6b5c:	ae 01       	movw	r20, r28
    6b5e:	ff 90       	pop	r15
    6b60:	0f 91       	pop	r16
    6b62:	1f 91       	pop	r17
    6b64:	cf 91       	pop	r28
    6b66:	df 91       	pop	r29
    6b68:	55 db       	rcall	.-2390   	; 0x6214 <__addsf3x>
    6b6a:	ef cd       	rjmp	.-1058   	; 0x674a <__fp_round>

00006b6c <modf>:
    6b6c:	fa 01       	movw	r30, r20
    6b6e:	dc 01       	movw	r26, r24
    6b70:	aa 0f       	add	r26, r26
    6b72:	bb 1f       	adc	r27, r27
    6b74:	9b 01       	movw	r18, r22
    6b76:	ac 01       	movw	r20, r24
    6b78:	bf 57       	subi	r27, 0x7F	; 127
    6b7a:	28 f4       	brcc	.+10     	; 0x6b86 <modf+0x1a>
    6b7c:	22 27       	eor	r18, r18
    6b7e:	33 27       	eor	r19, r19
    6b80:	44 27       	eor	r20, r20
    6b82:	50 78       	andi	r21, 0x80	; 128
    6b84:	1f c0       	rjmp	.+62     	; 0x6bc4 <modf+0x58>
    6b86:	b7 51       	subi	r27, 0x17	; 23
    6b88:	88 f4       	brcc	.+34     	; 0x6bac <modf+0x40>
    6b8a:	ab 2f       	mov	r26, r27
    6b8c:	00 24       	eor	r0, r0
    6b8e:	46 95       	lsr	r20
    6b90:	37 95       	ror	r19
    6b92:	27 95       	ror	r18
    6b94:	01 1c       	adc	r0, r1
    6b96:	a3 95       	inc	r26
    6b98:	d2 f3       	brmi	.-12     	; 0x6b8e <modf+0x22>
    6b9a:	00 20       	and	r0, r0
    6b9c:	69 f0       	breq	.+26     	; 0x6bb8 <modf+0x4c>
    6b9e:	22 0f       	add	r18, r18
    6ba0:	33 1f       	adc	r19, r19
    6ba2:	44 1f       	adc	r20, r20
    6ba4:	b3 95       	inc	r27
    6ba6:	da f3       	brmi	.-10     	; 0x6b9e <modf+0x32>
    6ba8:	0d d0       	rcall	.+26     	; 0x6bc4 <modf+0x58>
    6baa:	22 cb       	rjmp	.-2492   	; 0x61f0 <__subsf3>
    6bac:	61 30       	cpi	r22, 0x01	; 1
    6bae:	71 05       	cpc	r23, r1
    6bb0:	a0 e8       	ldi	r26, 0x80	; 128
    6bb2:	8a 07       	cpc	r24, r26
    6bb4:	b9 46       	sbci	r27, 0x69	; 105
    6bb6:	30 f4       	brcc	.+12     	; 0x6bc4 <modf+0x58>
    6bb8:	9b 01       	movw	r18, r22
    6bba:	ac 01       	movw	r20, r24
    6bbc:	66 27       	eor	r22, r22
    6bbe:	77 27       	eor	r23, r23
    6bc0:	88 27       	eor	r24, r24
    6bc2:	90 78       	andi	r25, 0x80	; 128
    6bc4:	30 96       	adiw	r30, 0x00	; 0
    6bc6:	21 f0       	breq	.+8      	; 0x6bd0 <modf+0x64>
    6bc8:	20 83       	st	Z, r18
    6bca:	31 83       	std	Z+1, r19	; 0x01
    6bcc:	42 83       	std	Z+2, r20	; 0x02
    6bce:	53 83       	std	Z+3, r21	; 0x03
    6bd0:	08 95       	ret

00006bd2 <__divmodhi4>:
    6bd2:	97 fb       	bst	r25, 7
    6bd4:	07 2e       	mov	r0, r23
    6bd6:	16 f4       	brtc	.+4      	; 0x6bdc <__divmodhi4+0xa>
    6bd8:	00 94       	com	r0
    6bda:	06 d0       	rcall	.+12     	; 0x6be8 <__divmodhi4_neg1>
    6bdc:	77 fd       	sbrc	r23, 7
    6bde:	08 d0       	rcall	.+16     	; 0x6bf0 <__divmodhi4_neg2>
    6be0:	63 d0       	rcall	.+198    	; 0x6ca8 <__udivmodhi4>
    6be2:	07 fc       	sbrc	r0, 7
    6be4:	05 d0       	rcall	.+10     	; 0x6bf0 <__divmodhi4_neg2>
    6be6:	3e f4       	brtc	.+14     	; 0x6bf6 <__divmodhi4_exit>

00006be8 <__divmodhi4_neg1>:
    6be8:	90 95       	com	r25
    6bea:	81 95       	neg	r24
    6bec:	9f 4f       	sbci	r25, 0xFF	; 255
    6bee:	08 95       	ret

00006bf0 <__divmodhi4_neg2>:
    6bf0:	70 95       	com	r23
    6bf2:	61 95       	neg	r22
    6bf4:	7f 4f       	sbci	r23, 0xFF	; 255

00006bf6 <__divmodhi4_exit>:
    6bf6:	08 95       	ret

00006bf8 <__tablejump2__>:
    6bf8:	ee 0f       	add	r30, r30
    6bfa:	ff 1f       	adc	r31, r31
    6bfc:	00 24       	eor	r0, r0
    6bfe:	00 1c       	adc	r0, r0
    6c00:	0b be       	out	0x3b, r0	; 59
    6c02:	07 90       	elpm	r0, Z+
    6c04:	f6 91       	elpm	r31, Z
    6c06:	e0 2d       	mov	r30, r0
    6c08:	09 94       	ijmp

00006c0a <__umulhisi3>:
    6c0a:	a2 9f       	mul	r26, r18
    6c0c:	b0 01       	movw	r22, r0
    6c0e:	b3 9f       	mul	r27, r19
    6c10:	c0 01       	movw	r24, r0
    6c12:	a3 9f       	mul	r26, r19
    6c14:	70 0d       	add	r23, r0
    6c16:	81 1d       	adc	r24, r1
    6c18:	11 24       	eor	r1, r1
    6c1a:	91 1d       	adc	r25, r1
    6c1c:	b2 9f       	mul	r27, r18
    6c1e:	70 0d       	add	r23, r0
    6c20:	81 1d       	adc	r24, r1
    6c22:	11 24       	eor	r1, r1
    6c24:	91 1d       	adc	r25, r1
    6c26:	08 95       	ret

00006c28 <__ashldi3>:
    6c28:	0f 93       	push	r16
    6c2a:	08 30       	cpi	r16, 0x08	; 8
    6c2c:	90 f0       	brcs	.+36     	; 0x6c52 <__ashldi3+0x2a>
    6c2e:	98 2f       	mov	r25, r24
    6c30:	87 2f       	mov	r24, r23
    6c32:	76 2f       	mov	r23, r22
    6c34:	65 2f       	mov	r22, r21
    6c36:	54 2f       	mov	r21, r20
    6c38:	43 2f       	mov	r20, r19
    6c3a:	32 2f       	mov	r19, r18
    6c3c:	22 27       	eor	r18, r18
    6c3e:	08 50       	subi	r16, 0x08	; 8
    6c40:	f4 cf       	rjmp	.-24     	; 0x6c2a <__ashldi3+0x2>
    6c42:	22 0f       	add	r18, r18
    6c44:	33 1f       	adc	r19, r19
    6c46:	44 1f       	adc	r20, r20
    6c48:	55 1f       	adc	r21, r21
    6c4a:	66 1f       	adc	r22, r22
    6c4c:	77 1f       	adc	r23, r23
    6c4e:	88 1f       	adc	r24, r24
    6c50:	99 1f       	adc	r25, r25
    6c52:	0a 95       	dec	r16
    6c54:	b2 f7       	brpl	.-20     	; 0x6c42 <__ashldi3+0x1a>
    6c56:	0f 91       	pop	r16
    6c58:	08 95       	ret

00006c5a <__adddi3>:
    6c5a:	2a 0d       	add	r18, r10
    6c5c:	3b 1d       	adc	r19, r11
    6c5e:	4c 1d       	adc	r20, r12
    6c60:	5d 1d       	adc	r21, r13
    6c62:	6e 1d       	adc	r22, r14
    6c64:	7f 1d       	adc	r23, r15
    6c66:	80 1f       	adc	r24, r16
    6c68:	91 1f       	adc	r25, r17
    6c6a:	08 95       	ret

00006c6c <__adddi3_s8>:
    6c6c:	00 24       	eor	r0, r0
    6c6e:	a7 fd       	sbrc	r26, 7
    6c70:	00 94       	com	r0
    6c72:	2a 0f       	add	r18, r26
    6c74:	30 1d       	adc	r19, r0
    6c76:	40 1d       	adc	r20, r0
    6c78:	50 1d       	adc	r21, r0
    6c7a:	60 1d       	adc	r22, r0
    6c7c:	70 1d       	adc	r23, r0
    6c7e:	80 1d       	adc	r24, r0
    6c80:	90 1d       	adc	r25, r0
    6c82:	08 95       	ret

00006c84 <__subdi3>:
    6c84:	2a 19       	sub	r18, r10
    6c86:	3b 09       	sbc	r19, r11
    6c88:	4c 09       	sbc	r20, r12
    6c8a:	5d 09       	sbc	r21, r13
    6c8c:	6e 09       	sbc	r22, r14
    6c8e:	7f 09       	sbc	r23, r15
    6c90:	80 0b       	sbc	r24, r16
    6c92:	91 0b       	sbc	r25, r17
    6c94:	08 95       	ret

00006c96 <__cmpdi2>:
    6c96:	2a 15       	cp	r18, r10
    6c98:	3b 05       	cpc	r19, r11
    6c9a:	4c 05       	cpc	r20, r12
    6c9c:	5d 05       	cpc	r21, r13
    6c9e:	6e 05       	cpc	r22, r14
    6ca0:	7f 05       	cpc	r23, r15
    6ca2:	80 07       	cpc	r24, r16
    6ca4:	91 07       	cpc	r25, r17
    6ca6:	08 95       	ret

00006ca8 <__udivmodhi4>:
    6ca8:	aa 1b       	sub	r26, r26
    6caa:	bb 1b       	sub	r27, r27
    6cac:	51 e1       	ldi	r21, 0x11	; 17
    6cae:	07 c0       	rjmp	.+14     	; 0x6cbe <__udivmodhi4_ep>

00006cb0 <__udivmodhi4_loop>:
    6cb0:	aa 1f       	adc	r26, r26
    6cb2:	bb 1f       	adc	r27, r27
    6cb4:	a6 17       	cp	r26, r22
    6cb6:	b7 07       	cpc	r27, r23
    6cb8:	10 f0       	brcs	.+4      	; 0x6cbe <__udivmodhi4_ep>
    6cba:	a6 1b       	sub	r26, r22
    6cbc:	b7 0b       	sbc	r27, r23

00006cbe <__udivmodhi4_ep>:
    6cbe:	88 1f       	adc	r24, r24
    6cc0:	99 1f       	adc	r25, r25
    6cc2:	5a 95       	dec	r21
    6cc4:	a9 f7       	brne	.-22     	; 0x6cb0 <__udivmodhi4_loop>
    6cc6:	80 95       	com	r24
    6cc8:	90 95       	com	r25
    6cca:	bc 01       	movw	r22, r24
    6ccc:	cd 01       	movw	r24, r26
    6cce:	08 95       	ret

00006cd0 <_exit>:
    6cd0:	f8 94       	cli

00006cd2 <__stop_program>:
    6cd2:	ff cf       	rjmp	.-2      	; 0x6cd2 <__stop_program>
