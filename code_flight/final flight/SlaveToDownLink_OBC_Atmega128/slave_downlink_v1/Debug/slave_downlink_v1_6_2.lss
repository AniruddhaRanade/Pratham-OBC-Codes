
slave_downlink_v1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001198  0000122c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800124  00800124  00001250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018c4  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064c  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013c7  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000494  00000000  00000000  000046f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ad  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b66  00000000  00000000  00005439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00006f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
       6:	00 00       	nop
       8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
       a:	00 00       	nop
       c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c4       	rjmp	.+2436   	; 0x9ca <__vector_17>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	85 08       	sbc	r8, r5

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d0 e1       	ldi	r29, 0x10	; 16
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e8 e9       	ldi	r30, 0x98	; 152
      a2:	f1 e1       	ldi	r31, 0x11	; 17
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0b bf       	out	0x3b, r16	; 59
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
      aa:	07 90       	elpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a4 32       	cpi	r26, 0x24	; 36
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a4 e2       	ldi	r26, 0x24	; 36
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a6 36       	cpi	r26, 0x66	; 102
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	ce e8       	ldi	r28, 0x8E	; 142
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	00 e0       	ldi	r16, 0x00	; 0
      cc:	06 c0       	rjmp	.+12     	; 0xda <__do_global_ctors+0x16>
      ce:	22 97       	sbiw	r28, 0x02	; 2
      d0:	01 09       	sbc	r16, r1
      d2:	fe 01       	movw	r30, r28
      d4:	0b bf       	out	0x3b, r16	; 59
      d6:	0e 94 a9 08 	call	0x1152	; 0x1152 <__tablejump_elpm__>
      da:	cc 38       	cpi	r28, 0x8C	; 140
      dc:	d1 07       	cpc	r29, r17
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	08 07       	cpc	r16, r24
      e2:	a9 f7       	brne	.-22     	; 0xce <__do_global_ctors+0xa>
      e4:	76 d5       	rcall	.+2796   	; 0xbd2 <main>
      e6:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z14init_SPI_slavev>:
}

void error(void)
{

  exit(0);
      ec:	87 b3       	in	r24, 0x17	; 23
      ee:	80 7f       	andi	r24, 0xF0	; 240
      f0:	87 bb       	out	0x17, r24	; 23
      f2:	bb 9a       	sbi	0x17, 3	; 23
      f4:	8c ec       	ldi	r24, 0xCC	; 204
      f6:	8d b9       	out	0x0d, r24	; 13
      f8:	08 95       	ret

000000fa <_Z5crc16Phh>:
      fa:	7f ef       	ldi	r23, 0xFF	; 255
      fc:	76 0f       	add	r23, r22
      fe:	66 23       	and	r22, r22
     100:	19 f1       	breq	.+70     	; 0x148 <_Z5crc16Phh+0x4e>
     102:	e8 2f       	mov	r30, r24
     104:	f9 2f       	mov	r31, r25
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	9f ef       	ldi	r25, 0xFF	; 255
     10a:	21 91       	ld	r18, Z+
     10c:	29 27       	eor	r18, r25
     10e:	32 2f       	mov	r19, r18
     110:	32 95       	swap	r19
     112:	3f 70       	andi	r19, 0x0F	; 15
     114:	23 27       	eor	r18, r19
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	98 2f       	mov	r25, r24
     11a:	88 27       	eor	r24, r24
     11c:	82 27       	eor	r24, r18
     11e:	93 27       	eor	r25, r19
     120:	a9 01       	movw	r20, r18
     122:	54 2f       	mov	r21, r20
     124:	44 27       	eor	r20, r20
     126:	52 95       	swap	r21
     128:	50 7f       	andi	r21, 0xF0	; 240
     12a:	84 27       	eor	r24, r20
     12c:	95 27       	eor	r25, r21
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	22 95       	swap	r18
     134:	32 95       	swap	r19
     136:	30 7f       	andi	r19, 0xF0	; 240
     138:	32 27       	eor	r19, r18
     13a:	20 7f       	andi	r18, 0xF0	; 240
     13c:	32 27       	eor	r19, r18
     13e:	82 27       	eor	r24, r18
     140:	93 27       	eor	r25, r19
     142:	71 50       	subi	r23, 0x01	; 1
     144:	10 f7       	brcc	.-60     	; 0x10a <_Z5crc16Phh+0x10>
     146:	08 95       	ret
     148:	8f ef       	ldi	r24, 0xFF	; 255
     14a:	9f ef       	ldi	r25, 0xFF	; 255
     14c:	08 95       	ret

0000014e <_Z25make_ax25_frame_from_dataPhS_>:
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	c0 55       	subi	r28, 0x50	; 80
     164:	d1 09       	sbc	r29, r1
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	7c 01       	movw	r14, r24
     172:	8e e7       	ldi	r24, 0x7E	; 126
     174:	f7 01       	movw	r30, r14
     176:	81 93       	st	Z+, r24
     178:	6f 01       	movw	r12, r30
     17a:	86 e0       	ldi	r24, 0x06	; 6
     17c:	e9 e0       	ldi	r30, 0x09	; 9
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	9e 01       	movw	r18, r28
     182:	2f 5f       	subi	r18, 0xFF	; 255
     184:	3f 4f       	sbci	r19, 0xFF	; 255
     186:	d9 01       	movw	r26, r18
     188:	01 90       	ld	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	8a 95       	dec	r24
     18e:	e1 f7       	brne	.-8      	; 0x188 <_Z25make_ax25_frame_from_dataPhS_+0x3a>
     190:	52 2f       	mov	r21, r18
     192:	43 2f       	mov	r20, r19
     194:	f6 01       	movw	r30, r12
     196:	ce 01       	movw	r24, r28
     198:	07 96       	adiw	r24, 0x07	; 7
     19a:	d9 01       	movw	r26, r18
     19c:	2d 91       	ld	r18, X+
     19e:	21 93       	st	Z+, r18
     1a0:	a8 17       	cp	r26, r24
     1a2:	b9 07       	cpc	r27, r25
     1a4:	d9 f7       	brne	.-10     	; 0x19c <_Z25make_ax25_frame_from_dataPhS_+0x4e>
     1a6:	20 e6       	ldi	r18, 0x60	; 96
     1a8:	f7 01       	movw	r30, r14
     1aa:	27 83       	std	Z+7, r18	; 0x07
     1ac:	26 e0       	ldi	r18, 0x06	; 6
     1ae:	e0 e1       	ldi	r30, 0x10	; 16
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	de 01       	movw	r26, r28
     1b4:	11 96       	adiw	r26, 0x01	; 1
     1b6:	01 90       	ld	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	2a 95       	dec	r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <_Z25make_ax25_frame_from_dataPhS_+0x68>
     1be:	d7 01       	movw	r26, r14
     1c0:	18 96       	adiw	r26, 0x08	; 8
     1c2:	e5 2f       	mov	r30, r21
     1c4:	f4 2f       	mov	r31, r20
     1c6:	21 91       	ld	r18, Z+
     1c8:	2d 93       	st	X+, r18
     1ca:	e8 17       	cp	r30, r24
     1cc:	f9 07       	cpc	r31, r25
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <_Z25make_ax25_frame_from_dataPhS_+0x78>
     1d0:	28 e6       	ldi	r18, 0x68	; 104
     1d2:	f7 01       	movw	r30, r14
     1d4:	26 87       	std	Z+14, r18	; 0x0e
     1d6:	26 e0       	ldi	r18, 0x06	; 6
     1d8:	e7 e1       	ldi	r30, 0x17	; 23
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	de 01       	movw	r26, r28
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	01 90       	ld	r0, Z+
     1e2:	0d 92       	st	X+, r0
     1e4:	2a 95       	dec	r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <_Z25make_ax25_frame_from_dataPhS_+0x92>
     1e8:	d7 01       	movw	r26, r14
     1ea:	1f 96       	adiw	r26, 0x0f	; 15
     1ec:	e5 2f       	mov	r30, r21
     1ee:	f4 2f       	mov	r31, r20
     1f0:	21 91       	ld	r18, Z+
     1f2:	2d 93       	st	X+, r18
     1f4:	e8 17       	cp	r30, r24
     1f6:	f9 07       	cpc	r31, r25
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <_Z25make_ax25_frame_from_dataPhS_+0xa2>
     1fa:	81 e6       	ldi	r24, 0x61	; 97
     1fc:	f7 01       	movw	r30, r14
     1fe:	85 8b       	std	Z+21, r24	; 0x15
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	86 8b       	std	Z+22, r24	; 0x16
     204:	80 ef       	ldi	r24, 0xF0	; 240
     206:	87 8b       	std	Z+23, r24	; 0x17
     208:	40 91 07 01 	lds	r20, 0x0107
     20c:	50 91 08 01 	lds	r21, 0x0108
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	b6 d7       	rcall	.+3948   	; 0x1182 <memcpy>
     216:	00 91 07 01 	lds	r16, 0x0107
     21a:	10 91 08 01 	lds	r17, 0x0108
     21e:	10 16       	cp	r1, r16
     220:	11 06       	cpc	r1, r17
     222:	c4 f4       	brge	.+48     	; 0x254 <_Z25make_ax25_frame_from_dataPhS_+0x106>
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	f7 01       	movw	r30, r14
     22c:	e2 0f       	add	r30, r18
     22e:	f3 1f       	adc	r31, r19
     230:	a1 e0       	ldi	r26, 0x01	; 1
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	ac 0f       	add	r26, r28
     236:	bd 1f       	adc	r27, r29
     238:	a2 0f       	add	r26, r18
     23a:	b3 1f       	adc	r27, r19
     23c:	9c 91       	ld	r25, X
     23e:	90 8f       	std	Z+24, r25	; 0x18
     240:	8f 5f       	subi	r24, 0xFF	; 255
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	00 91 07 01 	lds	r16, 0x0107
     24a:	10 91 08 01 	lds	r17, 0x0108
     24e:	20 17       	cp	r18, r16
     250:	31 07       	cpc	r19, r17
     252:	5c f3       	brlt	.-42     	; 0x22a <_Z25make_ax25_frame_from_dataPhS_+0xdc>
     254:	18 e1       	ldi	r17, 0x18	; 24
     256:	10 0f       	add	r17, r16
     258:	67 e1       	ldi	r22, 0x17	; 23
     25a:	60 0f       	add	r22, r16
     25c:	c6 01       	movw	r24, r12
     25e:	4d df       	rcall	.-358    	; 0xfa <_Z5crc16Phh>
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	9a 83       	std	Y+2, r25	; 0x02
     264:	f7 01       	movw	r30, r14
     266:	e1 0f       	add	r30, r17
     268:	f1 1d       	adc	r31, r1
     26a:	80 83       	st	Z, r24
     26c:	91 83       	std	Z+1, r25	; 0x01
     26e:	06 5e       	subi	r16, 0xE6	; 230
     270:	f7 01       	movw	r30, r14
     272:	e0 0f       	add	r30, r16
     274:	f1 1d       	adc	r31, r1
     276:	8e e7       	ldi	r24, 0x7E	; 126
     278:	80 83       	st	Z, r24
     27a:	c0 5b       	subi	r28, 0xB0	; 176
     27c:	df 4f       	sbci	r29, 0xFF	; 255
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	df 90       	pop	r13
     296:	cf 90       	pop	r12
     298:	08 95       	ret

0000029a <_Z10init_UART0v>:
     29a:	1b b8       	out	0x0b, r1	; 11
     29c:	1a b8       	out	0x0a, r1	; 10
     29e:	e5 e9       	ldi	r30, 0x95	; 149
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	10 82       	st	Z, r1
     2a4:	59 9a       	sbi	0x0b, 1	; 11
     2a6:	8a b1       	in	r24, 0x0a	; 10
     2a8:	88 61       	ori	r24, 0x18	; 24
     2aa:	8a b9       	out	0x0a, r24	; 10
     2ac:	80 81       	ld	r24, Z
     2ae:	8e 60       	ori	r24, 0x0E	; 14
     2b0:	80 83       	st	Z, r24
     2b2:	87 e6       	ldi	r24, 0x67	; 103
     2b4:	89 b9       	out	0x09, r24	; 9
     2b6:	10 92 90 00 	sts	0x0090, r1
     2ba:	08 95       	ret

000002bc <_Z10init_UART1v>:
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cb e9       	ldi	r28, 0x9B	; 155
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	18 82       	st	Y, r1
     2c6:	aa e9       	ldi	r26, 0x9A	; 154
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	1c 92       	st	X, r1
     2cc:	ed e9       	ldi	r30, 0x9D	; 157
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	10 82       	st	Z, r1
     2d2:	88 81       	ld	r24, Y
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	88 83       	st	Y, r24
     2d8:	8c 91       	ld	r24, X
     2da:	80 61       	ori	r24, 0x10	; 16
     2dc:	8c 93       	st	X, r24
     2de:	80 81       	ld	r24, Z
     2e0:	8e 60       	ori	r24, 0x0E	; 14
     2e2:	80 83       	st	Z, r24
     2e4:	87 e6       	ldi	r24, 0x67	; 103
     2e6:	80 93 99 00 	sts	0x0099, r24
     2ea:	10 92 98 00 	sts	0x0098, r1
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <_Z14transmit_UART1c>:
     2f4:	eb e9       	ldi	r30, 0x9B	; 155
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	90 81       	ld	r25, Z
     2fa:	95 ff       	sbrs	r25, 5
     2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <_Z14transmit_UART1c+0x4>
     2fe:	80 93 9c 00 	sts	0x009C, r24
     302:	08 95       	ret

00000304 <_Z14transmit_UART0c>:
     304:	5d 9b       	sbis	0x0b, 5	; 11
     306:	fe cf       	rjmp	.-4      	; 0x304 <_Z14transmit_UART0c>
     308:	8c b9       	out	0x0c, r24	; 12
     30a:	08 95       	ret

0000030c <_Z21transmit_string_UART0Pc>:
     30c:	fc 01       	movw	r30, r24
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	5d 9b       	sbis	0x0b, 5	; 11
     314:	fe cf       	rjmp	.-4      	; 0x312 <_Z21transmit_string_UART0Pc+0x6>
     316:	81 91       	ld	r24, Z+
     318:	8c b9       	out	0x0c, r24	; 12
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	28 30       	cpi	r18, 0x08	; 8
     320:	31 05       	cpc	r19, r1
     322:	b9 f7       	brne	.-18     	; 0x312 <_Z21transmit_string_UART0Pc+0x6>
     324:	08 95       	ret

00000326 <_Z22eeprom_read_bytes_partmiPh>:
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	61 15       	cp	r22, r1
     33c:	71 05       	cpc	r23, r1
     33e:	11 e0       	ldi	r17, 0x01	; 1
     340:	81 07       	cpc	r24, r17
     342:	91 05       	cpc	r25, r1
     344:	38 f0       	brcs	.+14     	; 0x354 <_Z22eeprom_read_bytes_partmiPh+0x2e>
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	e0 91 06 01 	lds	r30, 0x0106
     34c:	e8 60       	ori	r30, 0x08	; 8
     34e:	e0 93 06 01 	sts	0x0106, r30
     352:	05 c0       	rjmp	.+10     	; 0x35e <_Z22eeprom_read_bytes_partmiPh+0x38>
     354:	e0 91 06 01 	lds	r30, 0x0106
     358:	e7 7f       	andi	r30, 0xF7	; 247
     35a:	e0 93 06 01 	sts	0x0106, r30
     35e:	f0 90 06 01 	lds	r15, 0x0106
     362:	b7 2e       	mov	r11, r23
     364:	0f 2e       	mov	r0, r31
     366:	f8 ec       	ldi	r31, 0xC8	; 200
     368:	cf 2e       	mov	r12, r31
     36a:	f0 2d       	mov	r31, r0
     36c:	e4 e7       	ldi	r30, 0x74	; 116
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	0f 2e       	mov	r0, r31
     372:	f4 ea       	ldi	r31, 0xA4	; 164
     374:	df 2e       	mov	r13, r31
     376:	f0 2d       	mov	r31, r0
     378:	a1 e7       	ldi	r26, 0x71	; 113
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	0d 2d       	mov	r16, r13
     37e:	c3 e7       	ldi	r28, 0x73	; 115
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	1f 2d       	mov	r17, r15
     384:	11 60       	ori	r17, 0x01	; 1
     386:	a1 2e       	mov	r10, r17
     388:	03 c0       	rjmp	.+6      	; 0x390 <_Z22eeprom_read_bytes_partmiPh+0x6a>
     38a:	ca 94       	dec	r12
     38c:	09 f4       	brne	.+2      	; 0x390 <_Z22eeprom_read_bytes_partmiPh+0x6a>
     38e:	ba c0       	rjmp	.+372    	; 0x504 <_Z22eeprom_read_bytes_partmiPh+0x1de>
     390:	0f 2e       	mov	r0, r31
     392:	f4 e8       	ldi	r31, 0x84	; 132
     394:	ef 2e       	mov	r14, r31
     396:	f0 2d       	mov	r31, r0
     398:	00 83       	st	Z, r16
     39a:	10 81       	ld	r17, Z
     39c:	11 23       	and	r17, r17
     39e:	ec f7       	brge	.-6      	; 0x39a <_Z22eeprom_read_bytes_partmiPh+0x74>
     3a0:	1c 91       	ld	r17, X
     3a2:	18 7f       	andi	r17, 0xF8	; 248
     3a4:	10 93 65 01 	sts	0x0165, r17
     3a8:	10 31       	cpi	r17, 0x10	; 16
     3aa:	29 f0       	breq	.+10     	; 0x3b6 <_Z22eeprom_read_bytes_partmiPh+0x90>
     3ac:	18 33       	cpi	r17, 0x38	; 56
     3ae:	a1 f3       	breq	.-24     	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     3b0:	18 30       	cpi	r17, 0x08	; 8
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <_Z22eeprom_read_bytes_partmiPh+0x90>
     3b4:	aa c0       	rjmp	.+340    	; 0x50a <_Z22eeprom_read_bytes_partmiPh+0x1e4>
     3b6:	f8 82       	st	Y, r15
     3b8:	e0 82       	st	Z, r14
     3ba:	10 81       	ld	r17, Z
     3bc:	11 23       	and	r17, r17
     3be:	ec f7       	brge	.-6      	; 0x3ba <_Z22eeprom_read_bytes_partmiPh+0x94>
     3c0:	1c 91       	ld	r17, X
     3c2:	18 7f       	andi	r17, 0xF8	; 248
     3c4:	10 93 65 01 	sts	0x0165, r17
     3c8:	10 32       	cpi	r17, 0x20	; 32
     3ca:	f9 f2       	breq	.-66     	; 0x38a <_Z22eeprom_read_bytes_partmiPh+0x64>
     3cc:	18 33       	cpi	r17, 0x38	; 56
     3ce:	21 f3       	breq	.-56     	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     3d0:	18 31       	cpi	r17, 0x18	; 24
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <_Z22eeprom_read_bytes_partmiPh+0xb0>
     3d4:	7d c0       	rjmp	.+250    	; 0x4d0 <_Z22eeprom_read_bytes_partmiPh+0x1aa>
     3d6:	b8 82       	st	Y, r11
     3d8:	e0 82       	st	Z, r14
     3da:	10 81       	ld	r17, Z
     3dc:	11 23       	and	r17, r17
     3de:	ec f7       	brge	.-6      	; 0x3da <_Z22eeprom_read_bytes_partmiPh+0xb4>
     3e0:	1c 91       	ld	r17, X
     3e2:	18 7f       	andi	r17, 0xF8	; 248
     3e4:	10 93 65 01 	sts	0x0165, r17
     3e8:	10 33       	cpi	r17, 0x30	; 48
     3ea:	b1 f2       	breq	.-84     	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     3ec:	18 33       	cpi	r17, 0x38	; 56
     3ee:	a1 f2       	breq	.-88     	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     3f0:	18 32       	cpi	r17, 0x28	; 40
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <_Z22eeprom_read_bytes_partmiPh+0xd0>
     3f4:	70 c0       	rjmp	.+224    	; 0x4d6 <_Z22eeprom_read_bytes_partmiPh+0x1b0>
     3f6:	68 83       	st	Y, r22
     3f8:	e0 82       	st	Z, r14
     3fa:	10 81       	ld	r17, Z
     3fc:	11 23       	and	r17, r17
     3fe:	ec f7       	brge	.-6      	; 0x3fa <_Z22eeprom_read_bytes_partmiPh+0xd4>
     400:	1c 91       	ld	r17, X
     402:	18 7f       	andi	r17, 0xF8	; 248
     404:	10 93 65 01 	sts	0x0165, r17
     408:	10 33       	cpi	r17, 0x30	; 48
     40a:	31 f0       	breq	.+12     	; 0x418 <_Z22eeprom_read_bytes_partmiPh+0xf2>
     40c:	18 33       	cpi	r17, 0x38	; 56
     40e:	21 f2       	breq	.-120    	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     410:	18 32       	cpi	r17, 0x28	; 40
     412:	09 f0       	breq	.+2      	; 0x416 <_Z22eeprom_read_bytes_partmiPh+0xf0>
     414:	63 c0       	rjmp	.+198    	; 0x4dc <_Z22eeprom_read_bytes_partmiPh+0x1b6>
     416:	03 c0       	rjmp	.+6      	; 0x41e <_Z22eeprom_read_bytes_partmiPh+0xf8>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	6d c0       	rjmp	.+218    	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     41e:	d0 82       	st	Z, r13
     420:	10 81       	ld	r17, Z
     422:	11 23       	and	r17, r17
     424:	ec f7       	brge	.-6      	; 0x420 <_Z22eeprom_read_bytes_partmiPh+0xfa>
     426:	1c 91       	ld	r17, X
     428:	18 7f       	andi	r17, 0xF8	; 248
     42a:	10 93 65 01 	sts	0x0165, r17
     42e:	10 31       	cpi	r17, 0x10	; 16
     430:	31 f0       	breq	.+12     	; 0x43e <_Z22eeprom_read_bytes_partmiPh+0x118>
     432:	18 33       	cpi	r17, 0x38	; 56
     434:	09 f4       	brne	.+2      	; 0x438 <_Z22eeprom_read_bytes_partmiPh+0x112>
     436:	b0 cf       	rjmp	.-160    	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     438:	18 30       	cpi	r17, 0x08	; 8
     43a:	09 f0       	breq	.+2      	; 0x43e <_Z22eeprom_read_bytes_partmiPh+0x118>
     43c:	52 c0       	rjmp	.+164    	; 0x4e2 <_Z22eeprom_read_bytes_partmiPh+0x1bc>
     43e:	a8 82       	st	Y, r10
     440:	e0 82       	st	Z, r14
     442:	10 81       	ld	r17, Z
     444:	11 23       	and	r17, r17
     446:	ec f7       	brge	.-6      	; 0x442 <_Z22eeprom_read_bytes_partmiPh+0x11c>
     448:	1c 91       	ld	r17, X
     44a:	18 7f       	andi	r17, 0xF8	; 248
     44c:	10 93 65 01 	sts	0x0165, r17
     450:	10 34       	cpi	r17, 0x40	; 64
     452:	49 f0       	breq	.+18     	; 0x466 <_Z22eeprom_read_bytes_partmiPh+0x140>
     454:	18 34       	cpi	r17, 0x48	; 72
     456:	21 f0       	breq	.+8      	; 0x460 <_Z22eeprom_read_bytes_partmiPh+0x13a>
     458:	18 33       	cpi	r17, 0x38	; 56
     45a:	09 f0       	breq	.+2      	; 0x45e <_Z22eeprom_read_bytes_partmiPh+0x138>
     45c:	45 c0       	rjmp	.+138    	; 0x4e8 <_Z22eeprom_read_bytes_partmiPh+0x1c2>
     45e:	9c cf       	rjmp	.-200    	; 0x398 <_Z22eeprom_read_bytes_partmiPh+0x72>
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	49 c0       	rjmp	.+146    	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     466:	14 16       	cp	r1, r20
     468:	15 06       	cpc	r1, r21
     46a:	0c f0       	brlt	.+2      	; 0x46e <_Z22eeprom_read_bytes_partmiPh+0x148>
     46c:	40 c0       	rjmp	.+128    	; 0x4ee <_Z22eeprom_read_bytes_partmiPh+0x1c8>
     46e:	82 2f       	mov	r24, r18
     470:	93 2f       	mov	r25, r19
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	04 ec       	ldi	r16, 0xC4	; 196
     478:	0f 2e       	mov	r0, r31
     47a:	f4 e8       	ldi	r31, 0x84	; 132
     47c:	ff 2e       	mov	r15, r31
     47e:	f0 2d       	mov	r31, r0
     480:	a4 e7       	ldi	r26, 0x74	; 116
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	61 e7       	ldi	r22, 0x71	; 113
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	0f 2e       	mov	r0, r31
     48a:	f3 e7       	ldi	r31, 0x73	; 115
     48c:	cf 2e       	mov	r12, r31
     48e:	d1 2c       	mov	r13, r1
     490:	f0 2d       	mov	r31, r0
     492:	fc 01       	movw	r30, r24
     494:	41 30       	cpi	r20, 0x01	; 1
     496:	51 05       	cpc	r21, r1
     498:	09 f4       	brne	.+2      	; 0x49c <_Z22eeprom_read_bytes_partmiPh+0x176>
     49a:	0f 2d       	mov	r16, r15
     49c:	0c 93       	st	X, r16
     49e:	1c 91       	ld	r17, X
     4a0:	11 23       	and	r17, r17
     4a2:	ec f7       	brge	.-6      	; 0x49e <_Z22eeprom_read_bytes_partmiPh+0x178>
     4a4:	eb 01       	movw	r28, r22
     4a6:	18 81       	ld	r17, Y
     4a8:	18 7f       	andi	r17, 0xF8	; 248
     4aa:	10 93 65 01 	sts	0x0165, r17
     4ae:	10 35       	cpi	r17, 0x50	; 80
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <_Z22eeprom_read_bytes_partmiPh+0x192>
     4b2:	18 35       	cpi	r17, 0x58	; 88
     4b4:	69 f1       	breq	.+90     	; 0x510 <_Z22eeprom_read_bytes_partmiPh+0x1ea>
     4b6:	1e c0       	rjmp	.+60     	; 0x4f4 <_Z22eeprom_read_bytes_partmiPh+0x1ce>
     4b8:	e6 01       	movw	r28, r12
     4ba:	18 81       	ld	r17, Y
     4bc:	10 83       	st	Z, r17
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	41 50       	subi	r20, 0x01	; 1
     4c6:	51 09       	sbc	r21, r1
     4c8:	41 15       	cp	r20, r1
     4ca:	51 05       	cpc	r21, r1
     4cc:	11 f7       	brne	.-60     	; 0x492 <_Z22eeprom_read_bytes_partmiPh+0x16c>
     4ce:	14 c0       	rjmp	.+40     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4d0:	2f ef       	ldi	r18, 0xFF	; 255
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	11 c0       	rjmp	.+34     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	3f ef       	ldi	r19, 0xFF	; 255
     4da:	0e c0       	rjmp	.+28     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	3f ef       	ldi	r19, 0xFF	; 255
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	3f ef       	ldi	r19, 0xFF	; 255
     4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4e8:	2f ef       	ldi	r18, 0xFF	; 255
     4ea:	3f ef       	ldi	r19, 0xFF	; 255
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	3f ef       	ldi	r19, 0xFF	; 255
     4f8:	84 e9       	ldi	r24, 0x94	; 148
     4fa:	80 93 74 00 	sts	0x0074, r24
     4fe:	82 2f       	mov	r24, r18
     500:	93 2f       	mov	r25, r19
     502:	0c c0       	rjmp	.+24     	; 0x51c <_Z22eeprom_read_bytes_partmiPh+0x1f6>
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	9f ef       	ldi	r25, 0xFF	; 255
     508:	09 c0       	rjmp	.+18     	; 0x51c <_Z22eeprom_read_bytes_partmiPh+0x1f6>
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	06 c0       	rjmp	.+12     	; 0x51c <_Z22eeprom_read_bytes_partmiPh+0x1f6>
     510:	80 91 73 00 	lds	r24, 0x0073
     514:	80 83       	st	Z, r24
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	ee cf       	rjmp	.-36     	; 0x4f8 <_Z22eeprom_read_bytes_partmiPh+0x1d2>
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	bf 90       	pop	r11
     52e:	af 90       	pop	r10
     530:	08 95       	ret

00000532 <_Z17eeprom_read_bytesmiPh>:
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ea 01       	movw	r28, r20
     544:	89 01       	movw	r16, r18
     546:	61 15       	cp	r22, r1
     548:	71 05       	cpc	r23, r1
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	82 07       	cpc	r24, r18
     54e:	91 05       	cpc	r25, r1
     550:	10 f5       	brcc	.+68     	; 0x596 <_Z17eeprom_read_bytesmiPh+0x64>
     552:	6a 01       	movw	r12, r20
     554:	ee 24       	eor	r14, r14
     556:	d7 fc       	sbrc	r13, 7
     558:	e0 94       	com	r14
     55a:	fe 2c       	mov	r15, r14
     55c:	c6 0e       	add	r12, r22
     55e:	d7 1e       	adc	r13, r23
     560:	e8 1e       	adc	r14, r24
     562:	f9 1e       	adc	r15, r25
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	c2 16       	cp	r12, r18
     568:	d1 04       	cpc	r13, r1
     56a:	e2 06       	cpc	r14, r18
     56c:	f1 04       	cpc	r15, r1
     56e:	98 f0       	brcs	.+38     	; 0x596 <_Z17eeprom_read_bytesmiPh+0x64>
     570:	ee 24       	eor	r14, r14
     572:	ff 24       	eor	r15, r15
     574:	e6 1a       	sub	r14, r22
     576:	f7 0a       	sbc	r15, r23
     578:	98 01       	movw	r18, r16
     57a:	a7 01       	movw	r20, r14
     57c:	d4 de       	rcall	.-600    	; 0x326 <_Z22eeprom_read_bytes_partmiPh>
     57e:	98 01       	movw	r18, r16
     580:	2e 0d       	add	r18, r14
     582:	3f 1d       	adc	r19, r15
     584:	ae 01       	movw	r20, r28
     586:	4e 19       	sub	r20, r14
     588:	5f 09       	sbc	r21, r15
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c9 de       	rcall	.-622    	; 0x326 <_Z22eeprom_read_bytes_partmiPh>
     594:	03 c0       	rjmp	.+6      	; 0x59c <_Z17eeprom_read_bytesmiPh+0x6a>
     596:	98 01       	movw	r18, r16
     598:	ae 01       	movw	r20, r28
     59a:	c5 de       	rcall	.-630    	; 0x326 <_Z22eeprom_read_bytes_partmiPh>
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	08 95       	ret

000005ae <_Z17eeprom_write_pagemiPh>:
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	b2 2e       	mov	r11, r18
     5c4:	a3 2e       	mov	r10, r19
     5c6:	61 15       	cp	r22, r1
     5c8:	71 05       	cpc	r23, r1
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	82 07       	cpc	r24, r18
     5ce:	91 05       	cpc	r25, r1
     5d0:	38 f0       	brcs	.+14     	; 0x5e0 <_Z17eeprom_write_pagemiPh+0x32>
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	20 91 06 01 	lds	r18, 0x0106
     5d8:	28 60       	ori	r18, 0x08	; 8
     5da:	20 93 06 01 	sts	0x0106, r18
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <_Z17eeprom_write_pagemiPh+0x3c>
     5e0:	20 91 06 01 	lds	r18, 0x0106
     5e4:	27 7f       	andi	r18, 0xF7	; 247
     5e6:	20 93 06 01 	sts	0x0106, r18
     5ea:	6a 01       	movw	r12, r20
     5ec:	ee 24       	eor	r14, r14
     5ee:	d7 fc       	sbrc	r13, 7
     5f0:	e0 94       	com	r14
     5f2:	fe 2c       	mov	r15, r14
     5f4:	c6 0e       	add	r12, r22
     5f6:	d7 1e       	adc	r13, r23
     5f8:	e8 1e       	adc	r14, r24
     5fa:	f9 1e       	adc	r15, r25
     5fc:	8b 01       	movw	r16, r22
     5fe:	9c 01       	movw	r18, r24
     600:	0f 67       	ori	r16, 0x7F	; 127
     602:	c0 16       	cp	r12, r16
     604:	d1 06       	cpc	r13, r17
     606:	e2 06       	cpc	r14, r18
     608:	f3 06       	cpc	r15, r19
     60a:	18 f4       	brcc	.+6      	; 0x612 <_Z17eeprom_write_pagemiPh+0x64>
     60c:	46 0f       	add	r20, r22
     60e:	57 1f       	adc	r21, r23
     610:	04 c0       	rjmp	.+8      	; 0x61a <_Z17eeprom_write_pagemiPh+0x6c>
     612:	ab 01       	movw	r20, r22
     614:	4f 67       	ori	r20, 0x7F	; 127
     616:	4f 5f       	subi	r20, 0xFF	; 255
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	00 91 06 01 	lds	r16, 0x0106
     61e:	e7 2e       	mov	r14, r23
     620:	0f 2e       	mov	r0, r31
     622:	f8 ec       	ldi	r31, 0xC8	; 200
     624:	ff 2e       	mov	r15, r31
     626:	f0 2d       	mov	r31, r0
     628:	e4 e7       	ldi	r30, 0x74	; 116
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	a1 e7       	ldi	r26, 0x71	; 113
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	34 ea       	ldi	r19, 0xA4	; 164
     632:	c3 e7       	ldi	r28, 0x73	; 115
     634:	d0 e0       	ldi	r29, 0x00	; 0
     636:	14 e8       	ldi	r17, 0x84	; 132
     638:	03 c0       	rjmp	.+6      	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     63a:	fa 94       	dec	r15
     63c:	09 f4       	brne	.+2      	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     63e:	7d c0       	rjmp	.+250    	; 0x73a <_Z17eeprom_write_pagemiPh+0x18c>
     640:	30 83       	st	Z, r19
     642:	20 81       	ld	r18, Z
     644:	22 23       	and	r18, r18
     646:	ec f7       	brge	.-6      	; 0x642 <_Z17eeprom_write_pagemiPh+0x94>
     648:	2c 91       	ld	r18, X
     64a:	28 7f       	andi	r18, 0xF8	; 248
     64c:	20 93 65 01 	sts	0x0165, r18
     650:	20 31       	cpi	r18, 0x10	; 16
     652:	29 f0       	breq	.+10     	; 0x65e <_Z17eeprom_write_pagemiPh+0xb0>
     654:	28 33       	cpi	r18, 0x38	; 56
     656:	a1 f3       	breq	.-24     	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     658:	28 30       	cpi	r18, 0x08	; 8
     65a:	09 f0       	breq	.+2      	; 0x65e <_Z17eeprom_write_pagemiPh+0xb0>
     65c:	71 c0       	rjmp	.+226    	; 0x740 <_Z17eeprom_write_pagemiPh+0x192>
     65e:	08 83       	st	Y, r16
     660:	10 83       	st	Z, r17
     662:	20 81       	ld	r18, Z
     664:	22 23       	and	r18, r18
     666:	ec f7       	brge	.-6      	; 0x662 <_Z17eeprom_write_pagemiPh+0xb4>
     668:	2c 91       	ld	r18, X
     66a:	28 7f       	andi	r18, 0xF8	; 248
     66c:	20 93 65 01 	sts	0x0165, r18
     670:	20 32       	cpi	r18, 0x20	; 32
     672:	19 f3       	breq	.-58     	; 0x63a <_Z17eeprom_write_pagemiPh+0x8c>
     674:	28 33       	cpi	r18, 0x38	; 56
     676:	21 f3       	breq	.-56     	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     678:	28 31       	cpi	r18, 0x18	; 24
     67a:	09 f0       	breq	.+2      	; 0x67e <_Z17eeprom_write_pagemiPh+0xd0>
     67c:	4a c0       	rjmp	.+148    	; 0x712 <_Z17eeprom_write_pagemiPh+0x164>
     67e:	e8 82       	st	Y, r14
     680:	10 83       	st	Z, r17
     682:	20 81       	ld	r18, Z
     684:	22 23       	and	r18, r18
     686:	ec f7       	brge	.-6      	; 0x682 <_Z17eeprom_write_pagemiPh+0xd4>
     688:	2c 91       	ld	r18, X
     68a:	28 7f       	andi	r18, 0xF8	; 248
     68c:	20 93 65 01 	sts	0x0165, r18
     690:	20 33       	cpi	r18, 0x30	; 48
     692:	29 f0       	breq	.+10     	; 0x69e <_Z17eeprom_write_pagemiPh+0xf0>
     694:	28 33       	cpi	r18, 0x38	; 56
     696:	a1 f2       	breq	.-88     	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     698:	28 32       	cpi	r18, 0x28	; 40
     69a:	f1 f5       	brne	.+124    	; 0x718 <_Z17eeprom_write_pagemiPh+0x16a>
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <_Z17eeprom_write_pagemiPh+0xf6>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	45 c0       	rjmp	.+138    	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     6a4:	68 83       	st	Y, r22
     6a6:	10 83       	st	Z, r17
     6a8:	20 81       	ld	r18, Z
     6aa:	22 23       	and	r18, r18
     6ac:	ec f7       	brge	.-6      	; 0x6a8 <_Z17eeprom_write_pagemiPh+0xfa>
     6ae:	2c 91       	ld	r18, X
     6b0:	28 7f       	andi	r18, 0xF8	; 248
     6b2:	20 93 65 01 	sts	0x0165, r18
     6b6:	20 33       	cpi	r18, 0x30	; 48
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <_Z17eeprom_write_pagemiPh+0x116>
     6ba:	28 33       	cpi	r18, 0x38	; 56
     6bc:	09 f2       	breq	.-126    	; 0x640 <_Z17eeprom_write_pagemiPh+0x92>
     6be:	28 32       	cpi	r18, 0x28	; 40
     6c0:	71 f5       	brne	.+92     	; 0x71e <_Z17eeprom_write_pagemiPh+0x170>
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <_Z17eeprom_write_pagemiPh+0x11c>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	32 c0       	rjmp	.+100    	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     6ca:	46 1b       	sub	r20, r22
     6cc:	57 0b       	sbc	r21, r23
     6ce:	14 16       	cp	r1, r20
     6d0:	15 06       	cpc	r1, r21
     6d2:	44 f5       	brge	.+80     	; 0x724 <_Z17eeprom_write_pagemiPh+0x176>
     6d4:	ab 2d       	mov	r26, r11
     6d6:	ba 2d       	mov	r27, r10
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	83 e7       	ldi	r24, 0x73	; 115
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	e4 e7       	ldi	r30, 0x74	; 116
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	74 e8       	ldi	r23, 0x84	; 132
     6e6:	01 e7       	ldi	r16, 0x71	; 113
     6e8:	10 e0       	ldi	r17, 0x00	; 0
     6ea:	6d 91       	ld	r22, X+
     6ec:	ec 01       	movw	r28, r24
     6ee:	68 83       	st	Y, r22
     6f0:	70 83       	st	Z, r23
     6f2:	60 81       	ld	r22, Z
     6f4:	66 23       	and	r22, r22
     6f6:	ec f7       	brge	.-6      	; 0x6f2 <_Z17eeprom_write_pagemiPh+0x144>
     6f8:	e8 01       	movw	r28, r16
     6fa:	68 81       	ld	r22, Y
     6fc:	68 7f       	andi	r22, 0xF8	; 248
     6fe:	60 93 65 01 	sts	0x0165, r22
     702:	68 32       	cpi	r22, 0x28	; 40
     704:	91 f4       	brne	.+36     	; 0x72a <_Z17eeprom_write_pagemiPh+0x17c>
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	42 17       	cp	r20, r18
     70c:	53 07       	cpc	r21, r19
     70e:	69 f7       	brne	.-38     	; 0x6ea <_Z17eeprom_write_pagemiPh+0x13c>
     710:	0e c0       	rjmp	.+28     	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	3f ef       	ldi	r19, 0xFF	; 255
     716:	0b c0       	rjmp	.+22     	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	08 c0       	rjmp	.+16     	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	3f ef       	ldi	r19, 0xFF	; 255
     722:	05 c0       	rjmp	.+10     	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	02 c0       	rjmp	.+4      	; 0x72e <_Z17eeprom_write_pagemiPh+0x180>
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	3f ef       	ldi	r19, 0xFF	; 255
     72e:	84 e9       	ldi	r24, 0x94	; 148
     730:	80 93 74 00 	sts	0x0074, r24
     734:	82 2f       	mov	r24, r18
     736:	93 2f       	mov	r25, r19
     738:	05 c0       	rjmp	.+10     	; 0x744 <_Z17eeprom_write_pagemiPh+0x196>
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	9f ef       	ldi	r25, 0xFF	; 255
     73e:	02 c0       	rjmp	.+4      	; 0x744 <_Z17eeprom_write_pagemiPh+0x196>
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	08 95       	ret

0000075a <_Z18eeprom_write_bytesmiPh>:
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	6b 01       	movw	r12, r22
     770:	7c 01       	movw	r14, r24
     772:	ea 01       	movw	r28, r20
     774:	89 01       	movw	r16, r18
     776:	a1 2c       	mov	r10, r1
     778:	b1 2c       	mov	r11, r1
     77a:	98 01       	movw	r18, r16
     77c:	ae 01       	movw	r20, r28
     77e:	c7 01       	movw	r24, r14
     780:	b6 01       	movw	r22, r12
     782:	15 df       	rcall	.-470    	; 0x5ae <_Z17eeprom_write_pagemiPh>
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	92 07       	cpc	r25, r18
     78a:	99 f0       	breq	.+38     	; 0x7b2 <_Z18eeprom_write_bytesmiPh+0x58>
     78c:	ac 01       	movw	r20, r24
     78e:	66 27       	eor	r22, r22
     790:	57 fd       	sbrc	r21, 7
     792:	60 95       	com	r22
     794:	76 2f       	mov	r23, r22
     796:	c4 0e       	add	r12, r20
     798:	d5 1e       	adc	r13, r21
     79a:	e6 1e       	adc	r14, r22
     79c:	f7 1e       	adc	r15, r23
     79e:	c8 1b       	sub	r28, r24
     7a0:	d9 0b       	sbc	r29, r25
     7a2:	08 0f       	add	r16, r24
     7a4:	19 1f       	adc	r17, r25
     7a6:	a8 0e       	add	r10, r24
     7a8:	b9 1e       	adc	r11, r25
     7aa:	1c 16       	cp	r1, r28
     7ac:	1d 06       	cpc	r1, r29
     7ae:	2c f3       	brlt	.-54     	; 0x77a <_Z18eeprom_write_bytesmiPh+0x20>
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <_Z18eeprom_write_bytesmiPh+0x5e>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_Z18eeprom_write_bytesmiPh+0x62>
     7b8:	8a 2d       	mov	r24, r10
     7ba:	9b 2d       	mov	r25, r11
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	08 95       	ret

000007d2 <_Z11ADC_Converti>:
}


uint8_t ADC_Convert( int channel)// ADC Initialization and Conversion combined in one function. Channel in switch case corresponds to the HM_Data number. See the assigned numbers on top
{
	switch(channel)
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	c1 f0       	breq	.+48     	; 0x808 <_Z11ADC_Converti+0x36>
     7d8:	1c f4       	brge	.+6      	; 0x7e0 <_Z11ADC_Converti+0xe>
     7da:	89 2b       	or	r24, r25
     7dc:	39 f0       	breq	.+14     	; 0x7ec <_Z11ADC_Converti+0x1a>
     7de:	3e c0       	rjmp	.+124    	; 0x85c <_Z11ADC_Converti+0x8a>
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	f9 f0       	breq	.+62     	; 0x824 <_Z11ADC_Converti+0x52>
     7e6:	03 97       	sbiw	r24, 0x03	; 3
     7e8:	59 f1       	breq	.+86     	; 0x840 <_Z11ADC_Converti+0x6e>
     7ea:	38 c0       	rjmp	.+112    	; 0x85c <_Z11ADC_Converti+0x8a>
	{
		case 0: ADMUX = 0x60; // v1- Battery Voltage by 3
     7ec:	80 e6       	ldi	r24, 0x60	; 96
     7ee:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
     7f0:	85 ec       	ldi	r24, 0xC5	; 197
     7f2:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f4:	8f e1       	ldi	r24, 0x1F	; 31
     7f6:	9e e4       	ldi	r25, 0x4E	; 78
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <_Z11ADC_Converti+0x26>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <_Z11ADC_Converti+0x2c>
     7fe:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
     800:	36 99       	sbic	0x06, 6	; 6
     802:	fe cf       	rjmp	.-4      	; 0x800 <_Z11ADC_Converti+0x2e>
		return ADCH;
     804:	85 b1       	in	r24, 0x05	; 5
     806:	08 95       	ret
		break;
		
		case 1:	ADMUX = 0x61;//v3 - OBC Voltage by 2
     808:	81 e6       	ldi	r24, 0x61	; 97
     80a:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
     80c:	85 ec       	ldi	r24, 0xC5	; 197
     80e:	86 b9       	out	0x06, r24	; 6
     810:	8f e1       	ldi	r24, 0x1F	; 31
     812:	9e e4       	ldi	r25, 0x4E	; 78
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <_Z11ADC_Converti+0x42>
     818:	00 c0       	rjmp	.+0      	; 0x81a <_Z11ADC_Converti+0x48>
     81a:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
     81c:	36 99       	sbic	0x06, 6	; 6
     81e:	fe cf       	rjmp	.-4      	; 0x81c <_Z11ADC_Converti+0x4a>
		return ADCH;
     820:	85 b1       	in	r24, 0x05	; 5
     822:	08 95       	ret
		break;
		
		case 2: ADMUX = 0x62;//v2 - Downlink voltage by 2
     824:	82 e6       	ldi	r24, 0x62	; 98
     826:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
     828:	85 ec       	ldi	r24, 0xC5	; 197
     82a:	86 b9       	out	0x06, r24	; 6
     82c:	8f e1       	ldi	r24, 0x1F	; 31
     82e:	9e e4       	ldi	r25, 0x4E	; 78
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <_Z11ADC_Converti+0x5e>
     834:	00 c0       	rjmp	.+0      	; 0x836 <_Z11ADC_Converti+0x64>
     836:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
     838:	36 99       	sbic	0x06, 6	; 6
     83a:	fe cf       	rjmp	.-4      	; 0x838 <_Z11ADC_Converti+0x66>
		return ADCH;
     83c:	85 b1       	in	r24, 0x05	; 5
     83e:	08 95       	ret
		break;
		
		case 3: ADMUX = 0x63;//i1 - Panel current
     840:	83 e6       	ldi	r24, 0x63	; 99
     842:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
     844:	85 ec       	ldi	r24, 0xC5	; 197
     846:	86 b9       	out	0x06, r24	; 6
     848:	8f e1       	ldi	r24, 0x1F	; 31
     84a:	9e e4       	ldi	r25, 0x4E	; 78
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <_Z11ADC_Converti+0x7a>
     850:	00 c0       	rjmp	.+0      	; 0x852 <_Z11ADC_Converti+0x80>
     852:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
     854:	36 99       	sbic	0x06, 6	; 6
     856:	fe cf       	rjmp	.-4      	; 0x854 <_Z11ADC_Converti+0x82>
		return ADCH;
     858:	85 b1       	in	r24, 0x05	; 5
     85a:	08 95       	ret
		break;
	}
}
     85c:	08 95       	ret

0000085e <_Z21write_frame_to_eepromPhi>:




void write_frame_to_eeprom(uint8_t *frame, int size)
{
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	eb 01       	movw	r28, r22
  static uint8_t start = 0;
  
  //if((write_addr == read_addr) && start)
    //read_addr += FRAME_SIZE;
    
  eeprom_write_bytes(write_addr, size,frame); //FRAME_SIZE replaced by 8
     86c:	c0 90 35 01 	lds	r12, 0x0135
     870:	d0 90 36 01 	lds	r13, 0x0136
     874:	e0 90 37 01 	lds	r14, 0x0137
     878:	f0 90 38 01 	lds	r15, 0x0138
     87c:	9c 01       	movw	r18, r24
     87e:	ab 01       	movw	r20, r22
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	6a df       	rcall	.-300    	; 0x75a <_Z18eeprom_write_bytesmiPh>
  write_addr += size;
     886:	ae 01       	movw	r20, r28
     888:	66 27       	eor	r22, r22
     88a:	57 fd       	sbrc	r21, 7
     88c:	60 95       	com	r22
     88e:	76 2f       	mov	r23, r22
     890:	c4 0e       	add	r12, r20
     892:	d5 1e       	adc	r13, r21
     894:	e6 1e       	adc	r14, r22
     896:	f7 1e       	adc	r15, r23
     898:	c0 92 35 01 	sts	0x0135, r12
     89c:	d0 92 36 01 	sts	0x0136, r13
     8a0:	e0 92 37 01 	sts	0x0137, r14
     8a4:	f0 92 38 01 	sts	0x0138, r15
  
  if(write_addr == Last_Write)
     8a8:	80 91 25 01 	lds	r24, 0x0125
     8ac:	90 91 26 01 	lds	r25, 0x0126
     8b0:	aa 27       	eor	r26, r26
     8b2:	97 fd       	sbrc	r25, 7
     8b4:	a0 95       	com	r26
     8b6:	ba 2f       	mov	r27, r26
     8b8:	c8 16       	cp	r12, r24
     8ba:	d9 06       	cpc	r13, r25
     8bc:	ea 06       	cpc	r14, r26
     8be:	fb 06       	cpc	r15, r27
     8c0:	41 f4       	brne	.+16     	; 0x8d2 <_Z21write_frame_to_eepromPhi+0x74>
    write_addr = 0;
     8c2:	10 92 35 01 	sts	0x0135, r1
     8c6:	10 92 36 01 	sts	0x0136, r1
     8ca:	10 92 37 01 	sts	0x0137, r1
     8ce:	10 92 38 01 	sts	0x0138, r1
  
  start = 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 24 01 	sts	0x0124, r24
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <_Z22read_frame_from_eepromPh>:

void read_frame_from_eeprom(uint8_t *frame)
{
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
	if (JustDownlink == 2) //Position the read pointer when first Read command is called after Downlink turned ON
     8ee:	20 91 2d 01 	lds	r18, 0x012D
     8f2:	30 91 2e 01 	lds	r19, 0x012E
     8f6:	22 30       	cpi	r18, 0x02	; 2
     8f8:	31 05       	cpc	r19, r1
     8fa:	11 f5       	brne	.+68     	; 0x940 <_Z22read_frame_from_eepromPh+0x5a>
	{
		read_addr = write_addr;
     8fc:	40 91 35 01 	lds	r20, 0x0135
     900:	50 91 36 01 	lds	r21, 0x0136
     904:	60 91 37 01 	lds	r22, 0x0137
     908:	70 91 38 01 	lds	r23, 0x0138
		JustDownlink = 3;
     90c:	23 e0       	ldi	r18, 0x03	; 3
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	30 93 2e 01 	sts	0x012E, r19
     914:	20 93 2d 01 	sts	0x012D, r18
		read_addr -= Datasize2; //Read pointer goes back 22 steps to read forward
     918:	c0 90 00 01 	lds	r12, 0x0100
     91c:	d0 90 01 01 	lds	r13, 0x0101
     920:	ee 24       	eor	r14, r14
     922:	d7 fc       	sbrc	r13, 7
     924:	e0 94       	com	r14
     926:	fe 2c       	mov	r15, r14
     928:	4c 19       	sub	r20, r12
     92a:	5d 09       	sbc	r21, r13
     92c:	6e 09       	sbc	r22, r14
     92e:	7f 09       	sbc	r23, r15
     930:	40 93 39 01 	sts	0x0139, r20
     934:	50 93 3a 01 	sts	0x013A, r21
     938:	60 93 3b 01 	sts	0x013B, r22
     93c:	70 93 3c 01 	sts	0x013C, r23
	}
	
	eeprom_read_bytes(read_addr, Datasize2, frame); //FRAME_SIZE replaced by 40
     940:	c0 90 39 01 	lds	r12, 0x0139
     944:	d0 90 3a 01 	lds	r13, 0x013A
     948:	e0 90 3b 01 	lds	r14, 0x013B
     94c:	f0 90 3c 01 	lds	r15, 0x013C
     950:	40 91 00 01 	lds	r20, 0x0100
     954:	50 91 01 01 	lds	r21, 0x0101
     958:	9c 01       	movw	r18, r24
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	e9 dd       	rcall	.-1070   	; 0x532 <_Z17eeprom_read_bytesmiPh>
	if(read_addr == 0)
     960:	cd 28       	or	r12, r13
     962:	ce 28       	or	r12, r14
     964:	cf 28       	or	r12, r15
     966:	81 f4       	brne	.+32     	; 0x988 <_Z22read_frame_from_eepromPh+0xa2>
	{
	read_addr = Last_Write;
     968:	80 91 25 01 	lds	r24, 0x0125
     96c:	90 91 26 01 	lds	r25, 0x0126
     970:	aa 27       	eor	r26, r26
     972:	97 fd       	sbrc	r25, 7
     974:	a0 95       	com	r26
     976:	ba 2f       	mov	r27, r26
     978:	80 93 39 01 	sts	0x0139, r24
     97c:	90 93 3a 01 	sts	0x013A, r25
     980:	a0 93 3b 01 	sts	0x013B, r26
     984:	b0 93 3c 01 	sts	0x013C, r27
	//read_addr -= Datasize2;
	}
	
	read_addr -= Datasize2;//Position the read pointer for the next read operation
     988:	40 91 00 01 	lds	r20, 0x0100
     98c:	50 91 01 01 	lds	r21, 0x0101
     990:	66 27       	eor	r22, r22
     992:	57 fd       	sbrc	r21, 7
     994:	60 95       	com	r22
     996:	76 2f       	mov	r23, r22
     998:	80 91 39 01 	lds	r24, 0x0139
     99c:	90 91 3a 01 	lds	r25, 0x013A
     9a0:	a0 91 3b 01 	lds	r26, 0x013B
     9a4:	b0 91 3c 01 	lds	r27, 0x013C
     9a8:	84 1b       	sub	r24, r20
     9aa:	95 0b       	sbc	r25, r21
     9ac:	a6 0b       	sbc	r26, r22
     9ae:	b7 0b       	sbc	r27, r23
     9b0:	80 93 39 01 	sts	0x0139, r24
     9b4:	90 93 3a 01 	sts	0x013A, r25
     9b8:	a0 93 3b 01 	sts	0x013B, r26
     9bc:	b0 93 3c 01 	sts	0x013C, r27
	
	
	//if(read_addr + Datasize2 > MAX_ADDR)
	//read_addr = 0;
}
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	08 95       	ret

000009ca <__vector_17>:
/** @brief Main functionP
 *  @todo Complete slave coding
 */

ISR(SPI_STC_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	uint8_t dummy = SPDR;
     9e4:	8f b1       	in	r24, 0x0f	; 15
	//transmit_UART0(dummy);
	message[t] = dummy;
     9e6:	e0 91 3d 01 	lds	r30, 0x013D
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	ee 5a       	subi	r30, 0xAE	; 174
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
	if(JustDownlink ==1){JustDownlink=2;}
     9f2:	80 91 2d 01 	lds	r24, 0x012D
     9f6:	90 91 2e 01 	lds	r25, 0x012E
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	31 f4       	brne	.+12     	; 0xa0a <__vector_17+0x40>
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	90 93 2e 01 	sts	0x012E, r25
     a06:	80 93 2d 01 	sts	0x012D, r24
	if(JustDownlinkOuter ==1){JustDownlinkOuter=2;}	
     a0a:	80 91 2b 01 	lds	r24, 0x012B
     a0e:	90 91 2c 01 	lds	r25, 0x012C
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	31 f4       	brne	.+12     	; 0xa22 <__vector_17+0x58>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 2c 01 	sts	0x012C, r25
     a1e:	80 93 2b 01 	sts	0x012B, r24
	if((message[0] == 0xF1)&&(message[1] == 0xF1)&&(message[2] == 0xF1))
     a22:	80 91 52 01 	lds	r24, 0x0152
     a26:	81 3f       	cpi	r24, 0xF1	; 241
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_17+0x62>
     a2a:	4e c0       	rjmp	.+156    	; 0xac8 <__vector_17+0xfe>
     a2c:	80 91 53 01 	lds	r24, 0x0153
     a30:	81 3f       	cpi	r24, 0xF1	; 241
     a32:	09 f0       	breq	.+2      	; 0xa36 <__vector_17+0x6c>
     a34:	49 c0       	rjmp	.+146    	; 0xac8 <__vector_17+0xfe>
     a36:	80 91 54 01 	lds	r24, 0x0154
     a3a:	81 3f       	cpi	r24, 0xF1	; 241
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_17+0x76>
     a3e:	44 c0       	rjmp	.+136    	; 0xac8 <__vector_17+0xfe>
     a40:	48 c0       	rjmp	.+144    	; 0xad2 <__vector_17+0x108>
		bytesToRead = 19;
		JustDownlink = 1;
		JustDownlinkOuter = 0;
		for(int i =0; i<19; i++)
		{
			message[i] = 0;
     a42:	fc 01       	movw	r30, r24
     a44:	ee 5a       	subi	r30, 0xAE	; 174
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	10 82       	st	Z, r1
		uplink = 0;
		downlink_outer = 0;
		bytesToRead = 19;
		JustDownlink = 1;
		JustDownlinkOuter = 0;
		for(int i =0; i<19; i++)
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	83 31       	cpi	r24, 0x13	; 19
     a4e:	91 05       	cpc	r25, r1
     a50:	c1 f7       	brne	.-16     	; 0xa42 <__vector_17+0x78>
		{
			message[i] = 0;
		}
		t = 0;
     a52:	10 92 3d 01 	sts	0x013D, r1
     a56:	b0 c0       	rjmp	.+352    	; 0xbb8 <__vector_17+0x1ee>
	}
	else if((message[0] == 0xB1)&&(message[1] == 0xB1)&&(message[2] == 0xB1))
     a58:	80 91 53 01 	lds	r24, 0x0153
     a5c:	81 3b       	cpi	r24, 0xB1	; 177
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__vector_17+0x98>
     a60:	5b c0       	rjmp	.+182    	; 0xb18 <__vector_17+0x14e>
     a62:	80 91 54 01 	lds	r24, 0x0154
     a66:	81 3b       	cpi	r24, 0xB1	; 177
     a68:	09 f0       	breq	.+2      	; 0xa6c <__vector_17+0xa2>
     a6a:	56 c0       	rjmp	.+172    	; 0xb18 <__vector_17+0x14e>
     a6c:	5a c0       	rjmp	.+180    	; 0xb22 <__vector_17+0x158>
		JustDownlinkOuter = 1;
		bytesToRead = 19;
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
		{
			message[i] = 0;
     a6e:	fc 01       	movw	r30, r24
     a70:	ee 5a       	subi	r30, 0xAE	; 174
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	10 82       	st	Z, r1
		uplink = 0;
		JustDownlink=0;
		JustDownlinkOuter = 1;
		bytesToRead = 19;
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	83 31       	cpi	r24, 0x13	; 19
     a7a:	91 05       	cpc	r25, r1
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <__vector_17+0xa4>
		{
			message[i] = 0;
		}
		t = 0;
     a7e:	10 92 3d 01 	sts	0x013D, r1
     a82:	9a c0       	rjmp	.+308    	; 0xbb8 <__vector_17+0x1ee>
		
	}
	else if((message[0] == 0xD1)&&(message[1] == 0xD1)&&(message[2] == 0xD1))
     a84:	80 91 53 01 	lds	r24, 0x0153
     a88:	81 3d       	cpi	r24, 0xD1	; 209
     a8a:	09 f0       	breq	.+2      	; 0xa8e <__vector_17+0xc4>
     a8c:	6d c0       	rjmp	.+218    	; 0xb68 <__vector_17+0x19e>
     a8e:	80 91 54 01 	lds	r24, 0x0154
     a92:	81 3d       	cpi	r24, 0xD1	; 209
     a94:	09 f0       	breq	.+2      	; 0xa98 <__vector_17+0xce>
     a96:	68 c0       	rjmp	.+208    	; 0xb68 <__vector_17+0x19e>
     a98:	74 c0       	rjmp	.+232    	; 0xb82 <__vector_17+0x1b8>
		downlink_outer = 0;
		bytesToRead = 7;
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
		{
			message[i] = 0;
     a9a:	fc 01       	movw	r30, r24
     a9c:	ee 5a       	subi	r30, 0xAE	; 174
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	10 82       	st	Z, r1
		downlink = 0;
		uplink = 0;
		downlink_outer = 0;
		bytesToRead = 7;
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	83 31       	cpi	r24, 0x13	; 19
     aa6:	91 05       	cpc	r25, r1
     aa8:	c1 f7       	brne	.-16     	; 0xa9a <__vector_17+0xd0>
		{
			message[i] = 0;
		}
		t = 0;
     aaa:	10 92 3d 01 	sts	0x013D, r1
     aae:	84 c0       	rjmp	.+264    	; 0xbb8 <__vector_17+0x1ee>
		
	}
	else if( t>=(bytesToRead-1)) {
		//message[t] = dummy;
			t=0;
     ab0:	10 92 3d 01 	sts	0x013D, r1
			end = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 3e 01 	sts	0x013E, r24
     aba:	7e c0       	rjmp	.+252    	; 0xbb8 <__vector_17+0x1ee>
			 //transmit_UART0('}');
		}else {
			t++;
     abc:	80 91 3d 01 	lds	r24, 0x013D
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	80 93 3d 01 	sts	0x013D, r24
     ac6:	78 c0       	rjmp	.+240    	; 0xbb8 <__vector_17+0x1ee>
		{
			message[i] = 0;
		}
		t = 0;
	}
	else if((message[0] == 0xB1)&&(message[1] == 0xB1)&&(message[2] == 0xB1))
     ac8:	80 91 52 01 	lds	r24, 0x0152
     acc:	81 3b       	cpi	r24, 0xB1	; 177
     ace:	21 f5       	brne	.+72     	; 0xb18 <__vector_17+0x14e>
     ad0:	c3 cf       	rjmp	.-122    	; 0xa58 <__vector_17+0x8e>
	message[t] = dummy;
	if(JustDownlink ==1){JustDownlink=2;}
	if(JustDownlinkOuter ==1){JustDownlinkOuter=2;}	
	if((message[0] == 0xF1)&&(message[1] == 0xF1)&&(message[2] == 0xF1))
	{
		normal = 0;
     ad2:	10 92 05 01 	sts	0x0105, r1
     ad6:	10 92 04 01 	sts	0x0104, r1
		downlink = 1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 34 01 	sts	0x0134, r25
     ae2:	80 93 33 01 	sts	0x0133, r24
		uplink = 0;
     ae6:	10 92 32 01 	sts	0x0132, r1
     aea:	10 92 31 01 	sts	0x0131, r1
		downlink_outer = 0;
     aee:	10 92 30 01 	sts	0x0130, r1
     af2:	10 92 2f 01 	sts	0x012F, r1
		bytesToRead = 19;
     af6:	23 e1       	ldi	r18, 0x13	; 19
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	30 93 03 01 	sts	0x0103, r19
     afe:	20 93 02 01 	sts	0x0102, r18
		JustDownlink = 1;
     b02:	90 93 2e 01 	sts	0x012E, r25
     b06:	80 93 2d 01 	sts	0x012D, r24
		JustDownlinkOuter = 0;
     b0a:	10 92 2c 01 	sts	0x012C, r1
     b0e:	10 92 2b 01 	sts	0x012B, r1
		for(int i =0; i<19; i++)
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	95 cf       	rjmp	.-214    	; 0xa42 <__vector_17+0x78>
			message[i] = 0;
		}
		t = 0;
		
	}
	else if((message[0] == 0xD1)&&(message[1] == 0xD1)&&(message[2] == 0xD1))
     b18:	80 91 52 01 	lds	r24, 0x0152
     b1c:	81 3d       	cpi	r24, 0xD1	; 209
     b1e:	21 f5       	brne	.+72     	; 0xb68 <__vector_17+0x19e>
     b20:	b1 cf       	rjmp	.-158    	; 0xa84 <__vector_17+0xba>
		}
		t = 0;
	}
	else if((message[0] == 0xB1)&&(message[1] == 0xB1)&&(message[2] == 0xB1))
	{
		normal = 0;
     b22:	10 92 05 01 	sts	0x0105, r1
     b26:	10 92 04 01 	sts	0x0104, r1
		downlink = 0;
     b2a:	10 92 34 01 	sts	0x0134, r1
     b2e:	10 92 33 01 	sts	0x0133, r1
		downlink_outer = 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 30 01 	sts	0x0130, r25
     b3a:	80 93 2f 01 	sts	0x012F, r24
		uplink = 0;
     b3e:	10 92 32 01 	sts	0x0132, r1
     b42:	10 92 31 01 	sts	0x0131, r1
		JustDownlink=0;
     b46:	10 92 2e 01 	sts	0x012E, r1
     b4a:	10 92 2d 01 	sts	0x012D, r1
		JustDownlinkOuter = 1;
     b4e:	90 93 2c 01 	sts	0x012C, r25
     b52:	80 93 2b 01 	sts	0x012B, r24
		bytesToRead = 19;
     b56:	83 e1       	ldi	r24, 0x13	; 19
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	90 93 03 01 	sts	0x0103, r25
     b5e:	80 93 02 01 	sts	0x0102, r24
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	83 cf       	rjmp	.-250    	; 0xa6e <__vector_17+0xa4>
			message[i] = 0;
		}
		t = 0;
		
	}
	else if( t>=(bytesToRead-1)) {
     b68:	20 91 3d 01 	lds	r18, 0x013D
     b6c:	80 91 02 01 	lds	r24, 0x0102
     b70:	90 91 03 01 	lds	r25, 0x0103
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	28 17       	cp	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <__vector_17+0x1b6>
     b7e:	9e cf       	rjmp	.-196    	; 0xabc <__vector_17+0xf2>
     b80:	97 cf       	rjmp	.-210    	; 0xab0 <__vector_17+0xe6>
		t = 0;
		
	}
	else if((message[0] == 0xD1)&&(message[1] == 0xD1)&&(message[2] == 0xD1))
	{
		normal = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 05 01 	sts	0x0105, r25
     b8a:	80 93 04 01 	sts	0x0104, r24
		downlink = 0;
     b8e:	10 92 34 01 	sts	0x0134, r1
     b92:	10 92 33 01 	sts	0x0133, r1
		uplink = 0;
     b96:	10 92 32 01 	sts	0x0132, r1
     b9a:	10 92 31 01 	sts	0x0131, r1
		downlink_outer = 0;
     b9e:	10 92 30 01 	sts	0x0130, r1
     ba2:	10 92 2f 01 	sts	0x012F, r1
		bytesToRead = 7;
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 03 01 	sts	0x0103, r25
     bae:	80 93 02 01 	sts	0x0102, r24
		//UCSR1B&= ~(1<<TXEN1);
		for(int i =0; i<19; i++)
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	71 cf       	rjmp	.-286    	; 0xa9a <__vector_17+0xd0>
			process = 1;
		}
		t++;
	}
	*/
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0b be       	out	0x3b, r0	; 59
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <main>:




int main(void) {
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	ca 52       	subi	r28, 0x2A	; 42
     bdc:	d1 40       	sbci	r29, 0x01	; 1
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
	uint8_t transmission = 0, command;
	uint16_t crc, recv_crc;
	char* data;
	DDRA=0x0F;
     be8:	8f e0       	ldi	r24, 0x0F	; 15
     bea:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
     bec:	8b bb       	out	0x1b, r24	; 27
	DDRF = 0x00;
     bee:	10 92 61 00 	sts	0x0061, r1
	 uint8_t frame[256];
	init_UART0();
     bf2:	53 db       	rcall	.-2394   	; 0x29a <_Z10init_UART0v>
	init_UART1();
     bf4:	63 db       	rcall	.-2362   	; 0x2bc <_Z10init_UART1v>
	//transmit_string_UART0("ini");
	//inituart();
	transmit_string_UART0("Slave");
     bf6:	8e e1       	ldi	r24, 0x1E	; 30
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	88 db       	rcall	.-2288   	; 0x30c <_Z21transmit_string_UART0Pc>
	///Disable Watchdog Timer
	wdt_disable();
     bfc:	88 e1       	ldi	r24, 0x18	; 24
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	81 bd       	out	0x21, r24	; 33
     c04:	11 bc       	out	0x21, r1	; 33
     c06:	0f be       	out	0x3f, r0	; 63
	///Enable Global Interrupts
	init_SPI_slave();
     c08:	71 da       	rcall	.-2846   	; 0xec <_Z14init_SPI_slavev>
	//ioinit();
	sei();
     c0a:	78 94       	sei
	///Initialise SPI as slave
	
	char rx_eeprom[Datasize2];
     c0c:	80 91 00 01 	lds	r24, 0x0100
     c10:	90 91 01 01 	lds	r25, 0x0101
     c14:	2d b7       	in	r18, 0x3d	; 61
     c16:	3e b7       	in	r19, 0x3e	; 62
     c18:	28 1b       	sub	r18, r24
     c1a:	39 0b       	sbc	r19, r25
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	3e bf       	out	0x3e, r19	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	2d bf       	out	0x3d, r18	; 61
     c26:	ed b7       	in	r30, 0x3d	; 61
     c28:	fe b7       	in	r31, 0x3e	; 62
     c2a:	31 96       	adiw	r30, 0x01	; 1
     c2c:	1f 01       	movw	r2, r30
	char rx_eeprom2[Datasize2];
     c2e:	28 1b       	sub	r18, r24
     c30:	39 0b       	sbc	r19, r25
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	3e bf       	out	0x3e, r19	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	2d bf       	out	0x3d, r18	; 61
     c3c:	8d b7       	in	r24, 0x3d	; 61
     c3e:	9e b7       	in	r25, 0x3e	; 62
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	2c 01       	movw	r4, r24
	char rx[34];
	uint8_t ADC_Result;
	uint8_t Temperature[4];
	PORTA=0x0A;
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	8b bb       	out	0x1b, r24	; 27
	//int counter = 1;		
	while(1)
	{
			UCSR1B &= ~(1<<TXEN1);//UART1 is for downlink only. Enabling it unneccasarily may lead to unexpected powering of Downlink
     c48:	0f 2e       	mov	r0, r31
     c4a:	fa e9       	ldi	r31, 0x9A	; 154
     c4c:	cf 2e       	mov	r12, r31
     c4e:	d1 2c       	mov	r13, r1
     c50:	f0 2d       	mov	r31, r0
     c52:	0f 2e       	mov	r0, r31
     c54:	f2 e5       	ldi	r31, 0x52	; 82
     c56:	ef 2e       	mov	r14, r31
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	ff 2e       	mov	r15, r31
     c5c:	f0 2d       	mov	r31, r0
     c5e:	e1 e0       	ldi	r30, 0x01	; 1
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	ec 0f       	add	r30, r28
     c64:	fd 1f       	adc	r31, r29
     c66:	3c 96       	adiw	r30, 0x0c	; 12
     c68:	c9 5d       	subi	r28, 0xD9	; 217
     c6a:	de 4f       	sbci	r29, 0xFE	; 254
     c6c:	f9 83       	std	Y+1, r31	; 0x01
     c6e:	e8 83       	st	Y, r30
     c70:	c7 52       	subi	r28, 0x27	; 39
     c72:	d1 40       	sbci	r29, 0x01	; 1
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	31 e0       	ldi	r19, 0x01	; 1
     c78:	2c 0f       	add	r18, r28
     c7a:	3d 1f       	adc	r19, r29
     c7c:	28 5e       	subi	r18, 0xE8	; 232
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	c7 5d       	subi	r28, 0xD7	; 215
     c82:	de 4f       	sbci	r29, 0xFE	; 254
     c84:	39 83       	std	Y+1, r19	; 0x01
     c86:	28 83       	st	Y, r18
     c88:	c9 52       	subi	r28, 0x29	; 41
     c8a:	d1 40       	sbci	r29, 0x01	; 1
     c8c:	66 24       	eor	r6, r6
     c8e:	63 94       	inc	r6
     c90:	76 2c       	mov	r7, r6
     c92:	6c 0e       	add	r6, r28
     c94:	7d 1e       	adc	r7, r29
     c96:	31 e2       	ldi	r19, 0x21	; 33
     c98:	63 0e       	add	r6, r19
     c9a:	71 1c       	adc	r7, r1
     c9c:	aa 24       	eor	r10, r10
     c9e:	a3 94       	inc	r10
     ca0:	ba 2c       	mov	r11, r10
     ca2:	ac 0e       	add	r10, r28
     ca4:	bd 1e       	adc	r11, r29
     ca6:	82 e2       	ldi	r24, 0x22	; 34
     ca8:	a8 0e       	add	r10, r24
     caa:	b1 1c       	adc	r11, r1
     cac:	f6 01       	movw	r30, r12
     cae:	80 81       	ld	r24, Z
     cb0:	87 7f       	andi	r24, 0xF7	; 247
     cb2:	80 83       	st	Z, r24
			UCSR0B |= _BV(TXEN0);
     cb4:	53 9a       	sbi	0x0a, 3	; 10
			//transmit_UART0('t');
			ADC_Result = ADC_Convert(0);
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	8b dd       	rcall	.-1258   	; 0x7d2 <_Z11ADC_Converti>
     cbc:	18 2f       	mov	r17, r24
			if(end == 1){transmit_UART0('a');}
     cbe:	80 91 3e 01 	lds	r24, 0x013E
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	11 f4       	brne	.+4      	; 0xcca <main+0xf8>
     cc6:	81 e6       	ldi	r24, 0x61	; 97
     cc8:	1d db       	rcall	.-2502   	; 0x304 <_Z14transmit_UART0c>
			Temperature[0] = ADC_Result;//*3.3/256; Verify this
     cca:	cd 5d       	subi	r28, 0xDD	; 221
     ccc:	de 4f       	sbci	r29, 0xFE	; 254
     cce:	18 83       	st	Y, r17
     cd0:	c3 52       	subi	r28, 0x23	; 35
     cd2:	d1 40       	sbci	r29, 0x01	; 1
			if(end == 1){transmit_UART0('b');}
     cd4:	80 91 3e 01 	lds	r24, 0x013E
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	11 f4       	brne	.+4      	; 0xce0 <main+0x10e>
     cdc:	82 e6       	ldi	r24, 0x62	; 98
     cde:	12 db       	rcall	.-2524   	; 0x304 <_Z14transmit_UART0c>
			if(end == 1){transmit_UART0(Temperature[0]);}//USARTWriteChar(HM_Data[i]);
     ce0:	80 91 3e 01 	lds	r24, 0x013E
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <main+0x122>
     ce8:	cd 5d       	subi	r28, 0xDD	; 221
     cea:	de 4f       	sbci	r29, 0xFE	; 254
     cec:	88 81       	ld	r24, Y
     cee:	c3 52       	subi	r28, 0x23	; 35
     cf0:	d1 40       	sbci	r29, 0x01	; 1
     cf2:	08 db       	rcall	.-2544   	; 0x304 <_Z14transmit_UART0c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf4:	87 ec       	ldi	r24, 0xC7	; 199
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <main+0x126>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <main+0x12c>
     cfe:	00 00       	nop
			_delay_us(100);
		
		    ADC_Result = ADC_Convert(1);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	66 dd       	rcall	.-1332   	; 0x7d2 <_Z11ADC_Converti>
     d06:	18 2f       	mov	r17, r24
			if(end == 1){transmit_UART0('c');}
     d08:	80 91 3e 01 	lds	r24, 0x013E
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <main+0x142>
     d10:	83 e6       	ldi	r24, 0x63	; 99
     d12:	f8 da       	rcall	.-2576   	; 0x304 <_Z14transmit_UART0c>
			Temperature[1] = ADC_Result;//*3.3/256; Verify this
     d14:	cc 5d       	subi	r28, 0xDC	; 220
     d16:	de 4f       	sbci	r29, 0xFE	; 254
     d18:	18 83       	st	Y, r17
     d1a:	c4 52       	subi	r28, 0x24	; 36
     d1c:	d1 40       	sbci	r29, 0x01	; 1
			if(end == 1){transmit_UART0('d');}
     d1e:	80 91 3e 01 	lds	r24, 0x013E
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	11 f4       	brne	.+4      	; 0xd2a <main+0x158>
     d26:	84 e6       	ldi	r24, 0x64	; 100
     d28:	ed da       	rcall	.-2598   	; 0x304 <_Z14transmit_UART0c>
			if(end == 1){transmit_UART0(Temperature[1]);}//USARTWriteChar(HM_Data[i]);
     d2a:	80 91 3e 01 	lds	r24, 0x013E
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	31 f4       	brne	.+12     	; 0xd3e <main+0x16c>
     d32:	cc 5d       	subi	r28, 0xDC	; 220
     d34:	de 4f       	sbci	r29, 0xFE	; 254
     d36:	88 81       	ld	r24, Y
     d38:	c4 52       	subi	r28, 0x24	; 36
     d3a:	d1 40       	sbci	r29, 0x01	; 1
     d3c:	e3 da       	rcall	.-2618   	; 0x304 <_Z14transmit_UART0c>
     d3e:	e7 ec       	ldi	r30, 0xC7	; 199
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x170>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <main+0x176>
     d48:	00 00       	nop
			_delay_us(100);
			
			ADC_Result = ADC_Convert(2);
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	41 dd       	rcall	.-1406   	; 0x7d2 <_Z11ADC_Converti>
     d50:	18 2f       	mov	r17, r24
			if(end == 1){transmit_UART0('e');}
     d52:	80 91 3e 01 	lds	r24, 0x013E
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	11 f4       	brne	.+4      	; 0xd5e <main+0x18c>
     d5a:	85 e6       	ldi	r24, 0x65	; 101
     d5c:	d3 da       	rcall	.-2650   	; 0x304 <_Z14transmit_UART0c>
			Temperature[2] = ADC_Result;//*3.3/256; Verify this
     d5e:	cb 5d       	subi	r28, 0xDB	; 219
     d60:	de 4f       	sbci	r29, 0xFE	; 254
     d62:	18 83       	st	Y, r17
     d64:	c5 52       	subi	r28, 0x25	; 37
     d66:	d1 40       	sbci	r29, 0x01	; 1
			if(end == 1){transmit_UART0('f');}
     d68:	80 91 3e 01 	lds	r24, 0x013E
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	11 f4       	brne	.+4      	; 0xd74 <main+0x1a2>
     d70:	86 e6       	ldi	r24, 0x66	; 102
     d72:	c8 da       	rcall	.-2672   	; 0x304 <_Z14transmit_UART0c>
			if(end == 1){transmit_UART0(Temperature[2]);}//USARTWriteChar(HM_Data[i]);
     d74:	80 91 3e 01 	lds	r24, 0x013E
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	31 f4       	brne	.+12     	; 0xd88 <main+0x1b6>
     d7c:	cb 5d       	subi	r28, 0xDB	; 219
     d7e:	de 4f       	sbci	r29, 0xFE	; 254
     d80:	88 81       	ld	r24, Y
     d82:	c5 52       	subi	r28, 0x25	; 37
     d84:	d1 40       	sbci	r29, 0x01	; 1
     d86:	be da       	rcall	.-2692   	; 0x304 <_Z14transmit_UART0c>
     d88:	87 ec       	ldi	r24, 0xC7	; 199
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <main+0x1ba>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <main+0x1c0>
     d92:	00 00       	nop
			_delay_us(100);
			
			ADC_Result = ADC_Convert(3);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	1c dd       	rcall	.-1480   	; 0x7d2 <_Z11ADC_Converti>
     d9a:	18 2f       	mov	r17, r24
			if(end == 1){transmit_UART0('g');}
     d9c:	80 91 3e 01 	lds	r24, 0x013E
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	11 f4       	brne	.+4      	; 0xda8 <main+0x1d6>
     da4:	87 e6       	ldi	r24, 0x67	; 103
     da6:	ae da       	rcall	.-2724   	; 0x304 <_Z14transmit_UART0c>
			Temperature[3] = ADC_Result;//*3.3/256; Verify this
     da8:	ca 5d       	subi	r28, 0xDA	; 218
     daa:	de 4f       	sbci	r29, 0xFE	; 254
     dac:	18 83       	st	Y, r17
     dae:	c6 52       	subi	r28, 0x26	; 38
     db0:	d1 40       	sbci	r29, 0x01	; 1
			if(end == 1){transmit_UART0('h');}
     db2:	80 91 3e 01 	lds	r24, 0x013E
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	11 f4       	brne	.+4      	; 0xdbe <main+0x1ec>
     dba:	88 e6       	ldi	r24, 0x68	; 104
     dbc:	a3 da       	rcall	.-2746   	; 0x304 <_Z14transmit_UART0c>
			if(end == 1){transmit_UART0(Temperature[3]);}//USARTWriteChar(HM_Data[i]);
     dbe:	80 91 3e 01 	lds	r24, 0x013E
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	31 f4       	brne	.+12     	; 0xdd2 <main+0x200>
     dc6:	ca 5d       	subi	r28, 0xDA	; 218
     dc8:	de 4f       	sbci	r29, 0xFE	; 254
     dca:	88 81       	ld	r24, Y
     dcc:	c6 52       	subi	r28, 0x26	; 38
     dce:	d1 40       	sbci	r29, 0x01	; 1
     dd0:	99 da       	rcall	.-2766   	; 0x304 <_Z14transmit_UART0c>
     dd2:	e7 ec       	ldi	r30, 0xC7	; 199
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x204>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <main+0x20a>
     ddc:	00 00       	nop
			_delay_us(100);
			UCSR0B&= ~(1<<TXEN0);
     dde:	53 98       	cbi	0x0a, 3	; 10
			
		if(normal==1) //Normal mode
     de0:	80 91 04 01 	lds	r24, 0x0104
     de4:	90 91 05 01 	lds	r25, 0x0105
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	39 f5       	brne	.+78     	; 0xe3a <main+0x268>
		{	
		if (end == 1) {
     dec:	80 91 3e 01 	lds	r24, 0x013E
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	09 f0       	breq	.+2      	; 0xdf6 <main+0x224>
     df4:	5b cf       	rjmp	.-330    	; 0xcac <main+0xda>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df6:	ff ef       	ldi	r31, 0xFF	; 255
     df8:	23 ec       	ldi	r18, 0xC3	; 195
     dfa:	39 e0       	ldi	r19, 0x09	; 9
     dfc:	f1 50       	subi	r31, 0x01	; 1
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	e1 f7       	brne	.-8      	; 0xdfc <main+0x22a>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <main+0x234>
     e06:	00 00       	nop
			//transmit_UART0('l');
			//transmit_UART0('m');
			//transmit_string_UART0("normal");	
		//transmit_string_UART0((char *)message);
		_delay_ms(400); 
		cli();	
     e08:	f8 94       	cli
		write_frame_to_eeprom((uint8_t*)message, 7);
     e0a:	67 e0       	ldi	r22, 0x07	; 7
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	82 e5       	ldi	r24, 0x52	; 82
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	25 dd       	rcall	.-1462   	; 0x85e <_Z21write_frame_to_eepromPhi>
		sei();
     e14:	78 94       	sei
		write_frame_to_eeprom((uint8_t*)Temperature, 4);
     e16:	64 e0       	ldi	r22, 0x04	; 4
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	ce 01       	movw	r24, r28
     e1c:	8d 5d       	subi	r24, 0xDD	; 221
     e1e:	9e 4f       	sbci	r25, 0xFE	; 254
     e20:	1e dd       	rcall	.-1476   	; 0x85e <_Z21write_frame_to_eepromPhi>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	94 e3       	ldi	r25, 0x34	; 52
     e26:	ec e0       	ldi	r30, 0x0C	; 12
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	90 40       	sbci	r25, 0x00	; 0
     e2c:	e0 40       	sbci	r30, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <main+0x256>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <main+0x260>
     e32:	00 00       	nop
		_delay_ms(500);
		end = 0;
     e34:	10 92 3e 01 	sts	0x013E, r1
     e38:	39 cf       	rjmp	.-398    	; 0xcac <main+0xda>
		}
		}
		else if(downlink == 1)
     e3a:	80 91 33 01 	lds	r24, 0x0133
     e3e:	90 91 34 01 	lds	r25, 0x0134
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <main+0x276>
     e46:	bd c0       	rjmp	.+378    	; 0xfc2 <main+0x3f0>
		{
		//_delay_ms(50);
		while(JustDownlink ==1);	
     e48:	80 91 2d 01 	lds	r24, 0x012D
     e4c:	90 91 2e 01 	lds	r25, 0x012E
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	d1 f3       	breq	.-12     	; 0xe48 <main+0x276>
		if(end==1){
     e54:	80 91 3e 01 	lds	r24, 0x013E
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	49 f5       	brne	.+82     	; 0xeae <main+0x2dc>
			cli();
     e5c:	f8 94       	cli
     e5e:	ef e3       	ldi	r30, 0x3F	; 63
     e60:	f1 e0       	ldi	r31, 0x01	; 1
			for(int k = 0; k<7; k++){message2[k] = message[k];}
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	dc 01       	movw	r26, r24
     e68:	ae 5a       	subi	r26, 0xAE	; 174
     e6a:	be 4f       	sbci	r27, 0xFE	; 254
     e6c:	2c 91       	ld	r18, X
     e6e:	21 93       	st	Z+, r18
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	91 05       	cpc	r25, r1
     e76:	b9 f7       	brne	.-18     	; 0xe66 <main+0x294>
     e78:	e6 e4       	ldi	r30, 0x46	; 70
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	87 e0       	ldi	r24, 0x07	; 7
     e7e:	90 e0       	ldi	r25, 0x00	; 0
			for(int k = 7; k<19; k++){message1[k-7] = message[k];}
     e80:	dc 01       	movw	r26, r24
     e82:	ae 5a       	subi	r26, 0xAE	; 174
     e84:	be 4f       	sbci	r27, 0xFE	; 254
     e86:	2c 91       	ld	r18, X
     e88:	21 93       	st	Z+, r18
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	83 31       	cpi	r24, 0x13	; 19
     e8e:	91 05       	cpc	r25, r1
     e90:	b9 f7       	brne	.-18     	; 0xe80 <main+0x2ae>
				sei();
     e92:	78 94       	sei
			write_frame_to_eeprom((uint8_t*)message2, 7);
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	8f e3       	ldi	r24, 0x3F	; 63
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	e0 dc       	rcall	.-1600   	; 0x85e <_Z21write_frame_to_eepromPhi>
			write_frame_to_eeprom((uint8_t*)Temperature, 4);
     e9e:	64 e0       	ldi	r22, 0x04	; 4
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	8d 5d       	subi	r24, 0xDD	; 221
     ea6:	9e 4f       	sbci	r25, 0xFE	; 254
     ea8:	da dc       	rcall	.-1612   	; 0x85e <_Z21write_frame_to_eepromPhi>
				end =0;}
     eaa:	10 92 3e 01 	sts	0x013E, r1
			//transmit_string_UART0("Downlink");
		read_frame_from_eeprom((uint8_t*)rx_eeprom);
     eae:	c1 01       	movw	r24, r2
     eb0:	1a dd       	rcall	.-1484   	; 0x8e6 <_Z22read_frame_from_eepromPh>
		read_frame_from_eeprom((uint8_t*)rx_eeprom2);
     eb2:	c2 01       	movw	r24, r4
     eb4:	18 dd       	rcall	.-1488   	; 0x8e6 <_Z22read_frame_from_eepromPh>
		//read_frame_from_eeprom((uint8_t*)rx2);
		//rx[8]='\0';
		//_delay_ms(300);
		//transmit_string_UART0((char*)rx);
		for(int j = 0; j<Datasize2; j++)
     eb6:	80 91 00 01 	lds	r24, 0x0100
     eba:	90 91 01 01 	lds	r25, 0x0101
     ebe:	18 16       	cp	r1, r24
     ec0:	19 06       	cpc	r1, r25
     ec2:	6c f4       	brge	.+26     	; 0xede <main+0x30c>
     ec4:	d1 01       	movw	r26, r2
     ec6:	fe 01       	movw	r30, r28
     ec8:	ef 5f       	subi	r30, 0xFF	; 255
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
		{
			rx[j] = rx_eeprom[j];
     ed0:	4d 91       	ld	r20, X+
     ed2:	41 93       	st	Z+, r20
		read_frame_from_eeprom((uint8_t*)rx_eeprom2);
		//read_frame_from_eeprom((uint8_t*)rx2);
		//rx[8]='\0';
		//_delay_ms(300);
		//transmit_string_UART0((char*)rx);
		for(int j = 0; j<Datasize2; j++)
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	28 17       	cp	r18, r24
     eda:	39 07       	cpc	r19, r25
     edc:	cc f3       	brlt	.-14     	; 0xed0 <main+0x2fe>
		{
			rx[j] = rx_eeprom[j];
		}
		
		for(int j = Datasize2; j<2*Datasize2; j++)
     ede:	ac 01       	movw	r20, r24
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	84 17       	cp	r24, r20
     ee6:	95 07       	cpc	r25, r21
     ee8:	8c f4       	brge	.+34     	; 0xf0c <main+0x33a>
     eea:	f2 01       	movw	r30, r4
     eec:	a1 e0       	ldi	r26, 0x01	; 1
     eee:	b1 e0       	ldi	r27, 0x01	; 1
     ef0:	ac 0f       	add	r26, r28
     ef2:	bd 1f       	adc	r27, r29
     ef4:	a8 0f       	add	r26, r24
     ef6:	b9 1f       	adc	r27, r25
     ef8:	9a 01       	movw	r18, r20
     efa:	28 1b       	sub	r18, r24
     efc:	39 0b       	sbc	r19, r25
     efe:	24 0d       	add	r18, r4
     f00:	35 1d       	adc	r19, r5
		{
			rx[j] = rx_eeprom2[j-Datasize2];
     f02:	61 91       	ld	r22, Z+
     f04:	6d 93       	st	X+, r22
		for(int j = 0; j<Datasize2; j++)
		{
			rx[j] = rx_eeprom[j];
		}
		
		for(int j = Datasize2; j<2*Datasize2; j++)
     f06:	e2 17       	cp	r30, r18
     f08:	f3 07       	cpc	r31, r19
     f0a:	d9 f7       	brne	.-10     	; 0xf02 <main+0x330>
		{
			rx[j] = rx_eeprom2[j-Datasize2];
		}
		
		for(int j= 2*Datasize2; j<34; j++)
     f0c:	42 32       	cpi	r20, 0x22	; 34
     f0e:	51 05       	cpc	r21, r1
     f10:	94 f4       	brge	.+36     	; 0xf36 <main+0x364>
		{
			rx[j] = message1[j-2*Datasize2];
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	da 01       	movw	r26, r20
     f18:	a8 1b       	sub	r26, r24
     f1a:	b9 0b       	sbc	r27, r25
     f1c:	aa 5b       	subi	r26, 0xBA	; 186
     f1e:	be 4f       	sbci	r27, 0xFE	; 254
     f20:	e1 e0       	ldi	r30, 0x01	; 1
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	ec 0f       	add	r30, r28
     f26:	fd 1f       	adc	r31, r29
     f28:	e4 0f       	add	r30, r20
     f2a:	f5 1f       	adc	r31, r21
     f2c:	8d 91       	ld	r24, X+
     f2e:	81 93       	st	Z+, r24
		for(int j = Datasize2; j<2*Datasize2; j++)
		{
			rx[j] = rx_eeprom2[j-Datasize2];
		}
		
		for(int j= 2*Datasize2; j<34; j++)
     f30:	ea 15       	cp	r30, r10
     f32:	fb 05       	cpc	r31, r11
     f34:	d9 f7       	brne	.-10     	; 0xf2c <main+0x35a>
		{
			rx[j] = message1[j-2*Datasize2];
		}
		
		make_ax25_frame_from_data(frame, (uint8_t *)rx);
     f36:	be 01       	movw	r22, r28
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7e 4f       	sbci	r23, 0xFE	; 254
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	06 d9       	rcall	.-3572   	; 0x14e <_Z25make_ax25_frame_from_dataPhS_>
		
		
		UCSR1B |=(1<<TXEN1);
     f42:	f6 01       	movw	r30, r12
     f44:	80 81       	ld	r24, Z
     f46:	88 60       	ori	r24, 0x08	; 8
     f48:	80 83       	st	Z, r24
     f4a:	8f e1       	ldi	r24, 0x1F	; 31
     f4c:	9e e4       	ldi	r25, 0x4E	; 78
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <main+0x37c>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <main+0x382>
     f54:	00 00       	nop
		_delay_ms(10);
		for(int i =0; i<(27+2*Datasize2+12); i= i+1)
     f56:	80 91 00 01 	lds	r24, 0x0100
     f5a:	90 91 01 01 	lds	r25, 0x0101
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	87 96       	adiw	r24, 0x27	; 39
     f64:	18 16       	cp	r1, r24
     f66:	19 06       	cpc	r1, r25
     f68:	ac f4       	brge	.+42     	; 0xf94 <main+0x3c2>
     f6a:	fe 01       	movw	r30, r28
     f6c:	31 96       	adiw	r30, 0x01	; 1
     f6e:	4f 01       	movw	r8, r30
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
		{
			transmit_UART1(frame[i]);	
     f74:	f4 01       	movw	r30, r8
     f76:	81 91       	ld	r24, Z+
     f78:	4f 01       	movw	r8, r30
     f7a:	bc d9       	rcall	.-3208   	; 0x2f4 <_Z14transmit_UART1c>
		make_ax25_frame_from_data(frame, (uint8_t *)rx);
		
		
		UCSR1B |=(1<<TXEN1);
		_delay_ms(10);
		for(int i =0; i<(27+2*Datasize2+12); i= i+1)
     f7c:	0f 5f       	subi	r16, 0xFF	; 255
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	80 91 00 01 	lds	r24, 0x0100
     f84:	90 91 01 01 	lds	r25, 0x0101
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	87 96       	adiw	r24, 0x27	; 39
     f8e:	08 17       	cp	r16, r24
     f90:	19 07       	cpc	r17, r25
     f92:	84 f3       	brlt	.-32     	; 0xf74 <main+0x3a2>
		{
			transmit_UART1(frame[i]);	
		}
		UCSR1B&= ~(1<<TXEN1);
     f94:	f6 01       	movw	r30, r12
     f96:	80 81       	ld	r24, Z
     f98:	87 7f       	andi	r24, 0xF7	; 247
     f9a:	80 83       	st	Z, r24
		
		read_addr_dummy = (uint8_t)read_addr;//Remove from final
		read_addr_dummy = (uint8_t)write_addr;//Remove from final
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	80 81       	ld	r24, Z
     fa2:	80 93 28 01 	sts	0x0128, r24
		
		transmit_UART0(read_addr_dummy);//Remove from final
     fa6:	ae d9       	rcall	.-3236   	; 0x304 <_Z14transmit_UART0c>
		transmit_UART0(write_addr_dummy);//Remove from final
     fa8:	80 91 27 01 	lds	r24, 0x0127
     fac:	ab d9       	rcall	.-3242   	; 0x304 <_Z14transmit_UART0c>
     fae:	ff ef       	ldi	r31, 0xFF	; 255
     fb0:	21 ee       	ldi	r18, 0xE1	; 225
     fb2:	34 e0       	ldi	r19, 0x04	; 4
     fb4:	f1 50       	subi	r31, 0x01	; 1
     fb6:	20 40       	sbci	r18, 0x00	; 0
     fb8:	30 40       	sbci	r19, 0x00	; 0
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <main+0x3e2>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <main+0x3ec>
     fbe:	00 00       	nop
     fc0:	75 ce       	rjmp	.-790    	; 0xcac <main+0xda>
		_delay_ms(200);
		}
		//else if(uplink == 1){_delay_ms(900);}
		
		
		else if(downlink_outer == 1)
     fc2:	80 91 2f 01 	lds	r24, 0x012F
     fc6:	90 91 30 01 	lds	r25, 0x0130
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <main+0x3fe>
     fce:	6e ce       	rjmp	.-804    	; 0xcac <main+0xda>
		{
			while(JustDownlinkOuter ==1);
     fd0:	80 91 2b 01 	lds	r24, 0x012B
     fd4:	90 91 2c 01 	lds	r25, 0x012C
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	d1 f3       	breq	.-12     	; 0xfd0 <main+0x3fe>
			if(end==1){
     fdc:	80 91 3e 01 	lds	r24, 0x013E
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <main+0x414>
     fe4:	8c c0       	rjmp	.+280    	; 0x10fe <main+0x52c>
				cli();
     fe6:	f8 94       	cli
     fe8:	ef e3       	ldi	r30, 0x3F	; 63
     fea:	f1 e0       	ldi	r31, 0x01	; 1
				for(int k = 0; k<7; k++){message2[k] = message[k];}
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	dc 01       	movw	r26, r24
     ff2:	ae 5a       	subi	r26, 0xAE	; 174
     ff4:	be 4f       	sbci	r27, 0xFE	; 254
     ff6:	2c 91       	ld	r18, X
     ff8:	21 93       	st	Z+, r18
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	87 30       	cpi	r24, 0x07	; 7
     ffe:	91 05       	cpc	r25, r1
    1000:	b9 f7       	brne	.-18     	; 0xff0 <main+0x41e>
    1002:	e6 e4       	ldi	r30, 0x46	; 70
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	90 e0       	ldi	r25, 0x00	; 0
				for(int k = 7; k<19; k++){message1[k-7] = message[k];}
    100a:	dc 01       	movw	r26, r24
    100c:	ae 5a       	subi	r26, 0xAE	; 174
    100e:	be 4f       	sbci	r27, 0xFE	; 254
    1010:	2c 91       	ld	r18, X
    1012:	21 93       	st	Z+, r18
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	83 31       	cpi	r24, 0x13	; 19
    1018:	91 05       	cpc	r25, r1
    101a:	b9 f7       	brne	.-18     	; 0x100a <main+0x438>
					sei();
    101c:	78 94       	sei
				write_frame_to_eeprom((uint8_t*)message2, 7);
    101e:	67 e0       	ldi	r22, 0x07	; 7
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	8f e3       	ldi	r24, 0x3F	; 63
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	1b dc       	rcall	.-1994   	; 0x85e <_Z21write_frame_to_eepromPhi>
				write_frame_to_eeprom((uint8_t*)Temperature, 4);
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	ce 01       	movw	r24, r28
    102e:	8d 5d       	subi	r24, 0xDD	; 221
    1030:	9e 4f       	sbci	r25, 0xFE	; 254
    1032:	15 dc       	rcall	.-2006   	; 0x85e <_Z21write_frame_to_eepromPhi>
			end =0;}
    1034:	10 92 3e 01 	sts	0x013E, r1
    1038:	62 c0       	rjmp	.+196    	; 0x10fe <main+0x52c>
			//read_frame_from_eeprom((uint8_t*)rx_eeprom);

			
			for(int j= 0; j<12; j++)
			{
				rx[j] = message1[j];
    103a:	81 91       	ld	r24, Z+
    103c:	8d 93       	st	X+, r24
			end =0;}
			
			//read_frame_from_eeprom((uint8_t*)rx_eeprom);

			
			for(int j= 0; j<12; j++)
    103e:	ee 15       	cp	r30, r14
    1040:	ff 05       	cpc	r31, r15
    1042:	d9 f7       	brne	.-10     	; 0x103a <main+0x468>
    1044:	c9 5d       	subi	r28, 0xD9	; 217
    1046:	de 4f       	sbci	r29, 0xFE	; 254
    1048:	a8 81       	ld	r26, Y
    104a:	b9 81       	ldd	r27, Y+1	; 0x01
    104c:	c7 52       	subi	r28, 0x27	; 39
    104e:	d1 40       	sbci	r29, 0x01	; 1
    1050:	e6 e4       	ldi	r30, 0x46	; 70
    1052:	f1 e0       	ldi	r31, 0x01	; 1
				rx[j] = message1[j];
			}
			
			for (int j = 12; j<24; j++)
			{
				rx[j] = message1[j-12];
    1054:	81 91       	ld	r24, Z+
    1056:	8d 93       	st	X+, r24
			for(int j= 0; j<12; j++)
			{
				rx[j] = message1[j];
			}
			
			for (int j = 12; j<24; j++)
    1058:	ee 15       	cp	r30, r14
    105a:	ff 05       	cpc	r31, r15
    105c:	d9 f7       	brne	.-10     	; 0x1054 <main+0x482>
    105e:	c7 5d       	subi	r28, 0xD7	; 215
    1060:	de 4f       	sbci	r29, 0xFE	; 254
    1062:	e8 81       	ld	r30, Y
    1064:	f9 81       	ldd	r31, Y+1	; 0x01
    1066:	c9 52       	subi	r28, 0x29	; 41
    1068:	d1 40       	sbci	r29, 0x01	; 1
				rx[j] = message1[j-12];
			}
			
			for(int j = 24; j< 33; j++)
			{
			rx[j] = 0;
    106a:	11 92       	st	Z+, r1
			for (int j = 12; j<24; j++)
			{
				rx[j] = message1[j-12];
			}
			
			for(int j = 24; j< 33; j++)
    106c:	e6 15       	cp	r30, r6
    106e:	f7 05       	cpc	r31, r7
    1070:	e1 f7       	brne	.-8      	; 0x106a <main+0x498>
			{
			rx[j] = 0;
			}			
			
			make_ax25_frame_from_data(frame, (uint8_t *)rx);
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7e 4f       	sbci	r23, 0xFE	; 254
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	68 d8       	rcall	.-3888   	; 0x14e <_Z25make_ax25_frame_from_dataPhS_>
			
			
			UCSR1B |=(1<<TXEN1);
    107e:	f6 01       	movw	r30, r12
    1080:	80 81       	ld	r24, Z
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	80 83       	st	Z, r24
    1086:	8f e1       	ldi	r24, 0x1F	; 31
    1088:	9e e4       	ldi	r25, 0x4E	; 78
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <main+0x4b8>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <main+0x4be>
    1090:	00 00       	nop
			_delay_ms(10);
			for(int i =0; i<(27+2*Datasize2+12); i= i+1)
    1092:	80 91 00 01 	lds	r24, 0x0100
    1096:	90 91 01 01 	lds	r25, 0x0101
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	87 96       	adiw	r24, 0x27	; 39
    10a0:	18 16       	cp	r1, r24
    10a2:	19 06       	cpc	r1, r25
    10a4:	ac f4       	brge	.+42     	; 0x10d0 <main+0x4fe>
    10a6:	fe 01       	movw	r30, r28
    10a8:	31 96       	adiw	r30, 0x01	; 1
    10aa:	4f 01       	movw	r8, r30
    10ac:	00 e0       	ldi	r16, 0x00	; 0
    10ae:	10 e0       	ldi	r17, 0x00	; 0
			{
				transmit_UART1(frame[i]);
    10b0:	f4 01       	movw	r30, r8
    10b2:	81 91       	ld	r24, Z+
    10b4:	4f 01       	movw	r8, r30
    10b6:	1e d9       	rcall	.-3524   	; 0x2f4 <_Z14transmit_UART1c>
			make_ax25_frame_from_data(frame, (uint8_t *)rx);
			
			
			UCSR1B |=(1<<TXEN1);
			_delay_ms(10);
			for(int i =0; i<(27+2*Datasize2+12); i= i+1)
    10b8:	0f 5f       	subi	r16, 0xFF	; 255
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	80 91 00 01 	lds	r24, 0x0100
    10c0:	90 91 01 01 	lds	r25, 0x0101
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	87 96       	adiw	r24, 0x27	; 39
    10ca:	08 17       	cp	r16, r24
    10cc:	19 07       	cpc	r17, r25
    10ce:	84 f3       	brlt	.-32     	; 0x10b0 <main+0x4de>
			{
				transmit_UART1(frame[i]);
			}
			UCSR1B&= ~(1<<TXEN1);
    10d0:	f6 01       	movw	r30, r12
    10d2:	80 81       	ld	r24, Z
    10d4:	87 7f       	andi	r24, 0xF7	; 247
    10d6:	80 83       	st	Z, r24
			read_addr_dummy = (uint8_t)read_addr;//Remove from final
			read_addr_dummy = (uint8_t)write_addr;//Remove from final
    10d8:	e5 e3       	ldi	r30, 0x35	; 53
    10da:	f1 e0       	ldi	r31, 0x01	; 1
    10dc:	80 81       	ld	r24, Z
    10de:	80 93 28 01 	sts	0x0128, r24
			
			transmit_UART0(read_addr_dummy);//Remove from final
    10e2:	10 d9       	rcall	.-3552   	; 0x304 <_Z14transmit_UART0c>
			transmit_UART0(write_addr_dummy);//Remove from final
    10e4:	80 91 27 01 	lds	r24, 0x0127
    10e8:	0d d9       	rcall	.-3558   	; 0x304 <_Z14transmit_UART0c>
    10ea:	ff ef       	ldi	r31, 0xFF	; 255
    10ec:	21 ee       	ldi	r18, 0xE1	; 225
    10ee:	34 e0       	ldi	r19, 0x04	; 4
    10f0:	f1 50       	subi	r31, 0x01	; 1
    10f2:	20 40       	sbci	r18, 0x00	; 0
    10f4:	30 40       	sbci	r19, 0x00	; 0
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <main+0x51e>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <main+0x528>
    10fa:	00 00       	nop
    10fc:	d7 cd       	rjmp	.-1106   	; 0xcac <main+0xda>
    10fe:	de 01       	movw	r26, r28
    1100:	af 5f       	subi	r26, 0xFF	; 255
    1102:	be 4f       	sbci	r27, 0xFE	; 254
		else if(downlink_outer == 1)
		{
			while(JustDownlinkOuter ==1);
			if(end==1){
				cli();
				for(int k = 0; k<7; k++){message2[k] = message[k];}
    1104:	e6 e4       	ldi	r30, 0x46	; 70
    1106:	f1 e0       	ldi	r31, 0x01	; 1
    1108:	98 cf       	rjmp	.-208    	; 0x103a <main+0x468>

0000110a <_GLOBAL__sub_I__Z14init_SPI_slavev>:
int Datasize = 7;
int Datasize2 = 11;
int max_addr = 131072;
uint8_t read_addr_dummy;
uint8_t write_addr_dummy;
int Last_Write = max_addr - (max_addr)%(Datasize2);
    110a:	20 91 29 01 	lds	r18, 0x0129
    110e:	30 91 2a 01 	lds	r19, 0x012A
    1112:	60 91 00 01 	lds	r22, 0x0100
    1116:	70 91 01 01 	lds	r23, 0x0101
    111a:	c9 01       	movw	r24, r18
    111c:	07 d0       	rcall	.+14     	; 0x112c <__divmodhi4>
    111e:	28 1b       	sub	r18, r24
    1120:	39 0b       	sbc	r19, r25
    1122:	30 93 26 01 	sts	0x0126, r19
    1126:	20 93 25 01 	sts	0x0125, r18
    112a:	08 95       	ret

0000112c <__divmodhi4>:
    112c:	97 fb       	bst	r25, 7
    112e:	07 2e       	mov	r0, r23
    1130:	16 f4       	brtc	.+4      	; 0x1136 <__divmodhi4+0xa>
    1132:	00 94       	com	r0
    1134:	06 d0       	rcall	.+12     	; 0x1142 <__divmodhi4_neg1>
    1136:	77 fd       	sbrc	r23, 7
    1138:	08 d0       	rcall	.+16     	; 0x114a <__divmodhi4_neg2>
    113a:	0f d0       	rcall	.+30     	; 0x115a <__udivmodhi4>
    113c:	07 fc       	sbrc	r0, 7
    113e:	05 d0       	rcall	.+10     	; 0x114a <__divmodhi4_neg2>
    1140:	3e f4       	brtc	.+14     	; 0x1150 <__divmodhi4_exit>

00001142 <__divmodhi4_neg1>:
    1142:	90 95       	com	r25
    1144:	81 95       	neg	r24
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__divmodhi4_neg2>:
    114a:	70 95       	com	r23
    114c:	61 95       	neg	r22
    114e:	7f 4f       	sbci	r23, 0xFF	; 255

00001150 <__divmodhi4_exit>:
    1150:	08 95       	ret

00001152 <__tablejump_elpm__>:
    1152:	07 90       	elpm	r0, Z+
    1154:	f6 91       	elpm	r31, Z
    1156:	e0 2d       	mov	r30, r0
    1158:	09 94       	ijmp

0000115a <__udivmodhi4>:
    115a:	aa 1b       	sub	r26, r26
    115c:	bb 1b       	sub	r27, r27
    115e:	51 e1       	ldi	r21, 0x11	; 17
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <__udivmodhi4_ep>

00001162 <__udivmodhi4_loop>:
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	a6 17       	cp	r26, r22
    1168:	b7 07       	cpc	r27, r23
    116a:	10 f0       	brcs	.+4      	; 0x1170 <__udivmodhi4_ep>
    116c:	a6 1b       	sub	r26, r22
    116e:	b7 0b       	sbc	r27, r23

00001170 <__udivmodhi4_ep>:
    1170:	88 1f       	adc	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	5a 95       	dec	r21
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__udivmodhi4_loop>
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	08 95       	ret

00001182 <memcpy>:
    1182:	fb 01       	movw	r30, r22
    1184:	dc 01       	movw	r26, r24
    1186:	02 c0       	rjmp	.+4      	; 0x118c <memcpy+0xa>
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	41 50       	subi	r20, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	d8 f7       	brcc	.-10     	; 0x1188 <memcpy+0x6>
    1192:	08 95       	ret

00001194 <_exit>:
    1194:	f8 94       	cli

00001196 <__stop_program>:
    1196:	ff cf       	rjmp	.-2      	; 0x1196 <__stop_program>
