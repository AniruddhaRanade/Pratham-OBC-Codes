
hSlave_MasterSPItest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  0080016c  0080016c  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018da  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8b  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000931  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000641  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000043a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_17>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  c6:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
  d0:	26 2f       	mov	r18, r22
  d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
  d8:	38 2f       	mov	r19, r24
  da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
  dc:	32 17       	cp	r19, r18
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <calculate_crc_16>:

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
  fa:	66 23       	and	r22, r22
  fc:	91 f0       	breq	.+36     	; 0x122 <calculate_crc_16+0x30>
  fe:	ec 01       	movw	r28, r24
 100:	61 50       	subi	r22, 0x01	; 1
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	08 0f       	add	r16, r24
 10c:	19 1f       	adc	r17, r25
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
    crc = update_crc_16(data[i], crc);
 112:	bc 01       	movw	r22, r24
 114:	89 91       	ld	r24, Y+
 116:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	c9 f7       	brne	.-14     	; 0x112 <calculate_crc_16+0x20>
 120:	02 c0       	rjmp	.+4      	; 0x126 <calculate_crc_16+0x34>
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9f ef       	ldi	r25, 0xFF	; 255
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
    
  return ~crc;
}
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	c8 57       	subi	r28, 0x78	; 120
 13e:	d1 09       	sbc	r29, r1
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 14e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	39 e6       	ldi	r19, 0x69	; 105
 154:	98 e1       	ldi	r25, 0x18	; 24
 156:	21 50       	subi	r18, 0x01	; 1
 158:	30 40       	sbci	r19, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x22>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x2c>
 160:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 162:	1b ba       	out	0x1b, r1	; 27
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	39 e6       	ldi	r19, 0x69	; 105
 168:	98 e1       	ldi	r25, 0x18	; 24
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x36>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x40>
 174:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
 176:	8b bb       	out	0x1b, r24	; 27
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	39 e6       	ldi	r19, 0x69	; 105
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	30 40       	sbci	r19, 0x00	; 0
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x4a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x54>
 188:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 18a:	1b ba       	out	0x1b, r1	; 27
 18c:	9f ef       	ldi	r25, 0xFF	; 255
 18e:	29 e6       	ldi	r18, 0x69	; 105
 190:	38 e1       	ldi	r19, 0x18	; 24
 192:	91 50       	subi	r25, 0x01	; 1
 194:	20 40       	sbci	r18, 0x00	; 0
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x5e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x68>
 19c:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 19e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_UART0>
	
	transmit_UART0('\r');
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('\r');
 1a8:	8d e0       	ldi	r24, 0x0D	; 13
 1aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('H');
 1ae:	88 e4       	ldi	r24, 0x48	; 72
 1b0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('e');
 1b4:	85 e6       	ldi	r24, 0x65	; 101
 1b6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('l');
 1ba:	8c e6       	ldi	r24, 0x6C	; 108
 1bc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('l');
 1c0:	8c e6       	ldi	r24, 0x6C	; 108
 1c2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('o');
 1c6:	8f e6       	ldi	r24, 0x6F	; 111
 1c8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	e3 e4       	ldi	r30, 0x43	; 67
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	de 01       	movw	r26, r28
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	8a 95       	dec	r24
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0xa2>
	transmit_string_UART0(array);
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	0e 94 08 02 	call	0x410	; 0x410 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
 1e6:	85 e2       	ldi	r24, 0x25	; 37
 1e8:	e0 e0       	ldi	r30, 0x00	; 0
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	de 01       	movw	r26, r28
 1ee:	99 96       	adiw	r26, 0x29	; 41
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	8a 95       	dec	r24
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xbc>
	sprintf(array2,"\rData received from Master :\t");
 1f8:	8e e1       	ldi	r24, 0x1E	; 30
 1fa:	e5 e2       	ldi	r30, 0x25	; 37
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	de 01       	movw	r26, r28
 200:	af 5a       	subi	r26, 0xAF	; 175
 202:	bf 4f       	sbci	r27, 0xFF	; 255
 204:	01 90       	ld	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	8a 95       	dec	r24
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0xd0>
		
/************************************************************/
	uint8_t command;
	uint16_t crc, recv_crc;
	///Initialise SPI as slave
	init_SPI_slave();
 20c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <init_SPI_slave>
	
	///Enable Global Interrupts
	sei();
 210:	78 94       	sei
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 212:	0a e0       	ldi	r16, 0x0A	; 10
	_delay_ms(500);
	PORTA = 0x05;
 214:	15 e0       	ldi	r17, 0x05	; 5
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 216:	e0 2e       	mov	r14, r16
	_delay_ms(500);
	PORTA = 0x05;
 218:	f1 2e       	mov	r15, r17
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 21a:	eb ba       	out	0x1b, r14	; 27
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	94 e3       	ldi	r25, 0x34	; 52
 220:	2c e0       	ldi	r18, 0x0C	; 12
 222:	81 50       	subi	r24, 0x01	; 1
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0xee>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0xf8>
 22c:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 22e:	fb ba       	out	0x1b, r15	; 27
 230:	3f ef       	ldi	r19, 0xFF	; 255
 232:	84 e3       	ldi	r24, 0x34	; 52
 234:	9c e0       	ldi	r25, 0x0C	; 12
 236:	31 50       	subi	r19, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x102>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x10c>
 240:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('\r');
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('H');
 24e:	88 e4       	ldi	r24, 0x48	; 72
 250:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	transmit_UART0('i');
 254:	89 e6       	ldi	r24, 0x69	; 105
 256:	0e 94 f6 01 	call	0x3ec	; 0x3ec <transmit_UART0>
	
	transmit_string_UART0(array1);
 25a:	ce 01       	movw	r24, r28
 25c:	89 96       	adiw	r24, 0x29	; 41
 25e:	0e 94 08 02 	call	0x410	; 0x410 <transmit_string_UART0>
	transmit_string_UART0(array2);
 262:	ce 01       	movw	r24, r28
 264:	8f 5a       	subi	r24, 0xAF	; 175
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	0e 94 08 02 	call	0x410	; 0x410 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 26c:	0b bb       	out	0x1b, r16	; 27
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	34 e3       	ldi	r19, 0x34	; 52
 272:	8c e0       	ldi	r24, 0x0C	; 12
 274:	21 50       	subi	r18, 0x01	; 1
 276:	30 40       	sbci	r19, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x140>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x14a>
 27e:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 280:	1b bb       	out	0x1b, r17	; 27
 282:	9f ef       	ldi	r25, 0xFF	; 255
 284:	24 e3       	ldi	r18, 0x34	; 52
 286:	3c e0       	ldi	r19, 0x0C	; 12
 288:	91 50       	subi	r25, 0x01	; 1
 28a:	20 40       	sbci	r18, 0x00	; 0
 28c:	30 40       	sbci	r19, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x154>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x15e>
 292:	00 00       	nop
	_delay_ms(500);
	
	if(process)
 294:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 298:	88 23       	and	r24, r24
 29a:	09 f4       	brne	.+2      	; 0x29e <main+0x16a>
 29c:	be cf       	rjmp	.-132    	; 0x21a <main+0xe6>
    {
      crc = calculate_crc_16((uint8_t *)message, t - (end_spi + sizeof(uint16_t)));
 29e:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <t>
 2a2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <end_spi>
 2a6:	62 50       	subi	r22, 0x02	; 2
 2a8:	68 1b       	sub	r22, r24
 2aa:	80 e7       	ldi	r24, 0x70	; 112
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
 2b2:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <t>
 2b6:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <end_spi>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	32 97       	sbiw	r30, 0x02	; 2
 2be:	e2 1b       	sub	r30, r18
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e0 59       	subi	r30, 0x90	; 144
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
      if(crc == recv_crc)
 2c6:	20 81       	ld	r18, Z
 2c8:	31 81       	ldd	r19, Z+1	; 0x01
 2ca:	82 17       	cp	r24, r18
 2cc:	93 07       	cpc	r25, r19
 2ce:	89 f4       	brne	.+34     	; 0x2f2 <main+0x1be>
      {
        command = message[0];
 2d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <message>
        if(command == BEGIN_TX_COMM)
 2d4:	8a 35       	cpi	r24, 0x5A	; 90
 2d6:	41 f4       	brne	.+16     	; 0x2e8 <main+0x1b4>
        {
          send_preflight((char *)message + 2, message[1]);
 2d8:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <message+0x1>
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	82 e7       	ldi	r24, 0x72	; 114
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <send_preflight>
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <main+0x1be>
        }
        else if(command == END_TX)
 2e8:	83 33       	cpi	r24, 0x33	; 51
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <main+0x1be>
        {
          SPI_transfer(ACK);
 2ec:	82 e9       	ldi	r24, 0x92	; 146
 2ee:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SPI_transfer>
        }
      }
      end_spi = 0;
 2f2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <end_spi>
      start_spi = 0;
 2f6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <start_spi>
      t = 0;
 2fa:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <t>
      process = 0;
 2fe:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
 302:	8b cf       	rjmp	.-234    	; 0x21a <main+0xe6>

00000304 <__vector_17>:

/**
 * @brief Interrupt service routine for SPI
 */
ISR(SPI_STC_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0b b6       	in	r0, 0x3b	; 59
 310:	0f 92       	push	r0
 312:	8f 93       	push	r24
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
  spi = SPDR;
 318:	8f b1       	in	r24, 0x0f	; 15
 31a:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <spi>
  
  if((!process) && (start_spi >= N_END_SPI))
 31e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 322:	81 11       	cpse	r24, r1
 324:	2b c0       	rjmp	.+86     	; 0x37c <__vector_17+0x78>
 326:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <start_spi>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	38 f1       	brcs	.+78     	; 0x37c <__vector_17+0x78>
  {
    message[t] = spi;
 32e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <t>
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <spi>
 338:	e0 59       	subi	r30, 0x90	; 144
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	80 83       	st	Z, r24
    
    if(message[t] == END_SPI)
 33e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <t>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	e0 59       	subi	r30, 0x90	; 144
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	80 81       	ld	r24, Z
 34a:	8a 3a       	cpi	r24, 0xAA	; 170
 34c:	31 f4       	brne	.+12     	; 0x35a <__vector_17+0x56>
      end_spi++;
 34e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <end_spi>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <end_spi>
 358:	05 c0       	rjmp	.+10     	; 0x364 <__vector_17+0x60>
    else if(end_spi)
 35a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <end_spi>
 35e:	81 11       	cpse	r24, r1
      end_spi = 0;
 360:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <end_spi>
      
    if(end_spi == N_END_SPI)
 364:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <end_spi>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	19 f4       	brne	.+6      	; 0x372 <__vector_17+0x6e>
      process = 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
    t++;
 372:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
  }
  
  if(spi == START_SPI)
 37c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <spi>
 380:	87 3e       	cpi	r24, 0xE7	; 231
 382:	31 f4       	brne	.+12     	; 0x390 <__vector_17+0x8c>
    start_spi++;
 384:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <start_spi>
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <start_spi>
 38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_17+0x98>
  else if(start_spi < N_END_SPI)
 390:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <start_spi>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	10 f4       	brcc	.+4      	; 0x39c <__vector_17+0x98>
    start_spi = 0;
 398:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <start_spi>
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0b be       	out	0x3b, r0	; 59
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <init_SPI_slave>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 3b0:	87 b3       	in	r24, 0x17	; 23
 3b2:	80 7f       	andi	r24, 0xF0	; 240
 3b4:	87 bb       	out	0x17, r24	; 23
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	8d b9       	out	0x0d, r24	; 13
 3be:	08 95       	ret

000003c0 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 3c0:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 3c2:	77 9b       	sbis	0x0e, 7	; 14
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 3c6:	8f b1       	in	r24, 0x0f	; 15
}
 3c8:	08 95       	ret

000003ca <init_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
  return UDR0;
}
 3ca:	1b b8       	out	0x0b, r1	; 11
 3cc:	1a b8       	out	0x0a, r1	; 10
 3ce:	e5 e9       	ldi	r30, 0x95	; 149
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	10 82       	st	Z, r1
 3d4:	59 9a       	sbi	0x0b, 1	; 11
 3d6:	8a b1       	in	r24, 0x0a	; 10
 3d8:	88 61       	ori	r24, 0x18	; 24
 3da:	8a b9       	out	0x0a, r24	; 10
 3dc:	80 81       	ld	r24, Z
 3de:	8e 60       	ori	r24, 0x0E	; 14
 3e0:	80 83       	st	Z, r24
 3e2:	87 e6       	ldi	r24, 0x67	; 103
 3e4:	89 b9       	out	0x09, r24	; 9
 3e6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 3ea:	08 95       	ret

000003ec <transmit_UART0>:
 3ec:	5d 9b       	sbis	0x0b, 5	; 11
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <transmit_UART0>
 3f0:	8c b9       	out	0x0c, r24	; 12
 3f2:	08 95       	ret

000003f4 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 3f4:	61 15       	cp	r22, r1
 3f6:	71 05       	cpc	r23, r1
 3f8:	51 f0       	breq	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fa:	fc 01       	movw	r30, r24
 3fc:	68 0f       	add	r22, r24
 3fe:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 400:	5d 9b       	sbis	0x0b, 5	; 11
 402:	fe cf       	rjmp	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
    ///* Start transmission
    UDR0 = data[i];
 404:	91 91       	ld	r25, Z+
 406:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 408:	e6 17       	cp	r30, r22
 40a:	f7 07       	cpc	r31, r23
 40c:	c9 f7       	brne	.-14     	; 0x400 <__LOCK_REGION_LENGTH__>
 40e:	08 95       	ret

00000410 <transmit_string_UART0>:
    i++;
  }
}

void transmit_string_UART0(char *buffer)
{
 410:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 412:	90 81       	ld	r25, Z
 414:	99 23       	and	r25, r25
 416:	39 f0       	breq	.+14     	; 0x426 <transmit_string_UART0+0x16>
 418:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 41a:	5d 9b       	sbis	0x0b, 5	; 11
 41c:	fe cf       	rjmp	.-4      	; 0x41a <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 41e:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 420:	91 91       	ld	r25, Z+
 422:	91 11       	cpse	r25, r1
 424:	fa cf       	rjmp	.-12     	; 0x41a <transmit_string_UART0+0xa>
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
