
hSlave_CCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00000f18  00000fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  008002b2  008002b2  0000115e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c35  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001153  00000000  00000000  00003fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108c  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  000061b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000898  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121e  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000080ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 3b       	cpi	r26, 0xB2	; 178
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 eb       	ldi	r26, 0xB2	; 178
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 39       	cpi	r26, 0x9A	; 154
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 34 03 	call	0x668	; 0x668 <main>
  c6:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
  d0:	26 2f       	mov	r18, r22
  d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
  d8:	38 2f       	mov	r19, r24
  da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
  dc:	32 17       	cp	r19, r18
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <calculate_crc_16>:

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
  fa:	66 23       	and	r22, r22
  fc:	91 f0       	breq	.+36     	; 0x122 <calculate_crc_16+0x30>
  fe:	ec 01       	movw	r28, r24
 100:	61 50       	subi	r22, 0x01	; 1
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	08 0f       	add	r16, r24
 10c:	19 1f       	adc	r17, r25
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
    crc = update_crc_16(data[i], crc);
 112:	bc 01       	movw	r22, r24
 114:	89 91       	ld	r24, Y+
 116:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	c9 f7       	brne	.-14     	; 0x112 <calculate_crc_16+0x20>
 120:	02 c0       	rjmp	.+4      	; 0x126 <calculate_crc_16+0x34>
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9f ef       	ldi	r25, 0xFF	; 255
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
    
  return ~crc;
}
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <make_ax25_frame_from_data>:
 */ 

#include "ax25.h"

void make_ax25_frame_from_data(uint8_t *frame, uint8_t *data)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	2a 97       	sbiw	r28, 0x0a	; 10
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	8c 01       	movw	r16, r24
  uint8_t i, buf[10], size = 0;
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
 152:	8e e7       	ldi	r24, 0x7E	; 126
 154:	d8 01       	movw	r26, r16
 156:	8d 93       	st	X+, r24
 158:	ad 01       	movw	r20, r26
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	de 01       	movw	r26, r28
 162:	11 96       	adiw	r26, 0x01	; 1
 164:	01 90       	ld	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	8a 95       	dec	r24
 16a:	e1 f7       	brne	.-8      	; 0x164 <make_ax25_frame_from_data+0x30>
 16c:	9e 01       	movw	r18, r28
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	fa 01       	movw	r30, r20
 174:	78 01       	movw	r14, r16
 176:	b7 e0       	ldi	r27, 0x07	; 7
 178:	eb 0e       	add	r14, r27
 17a:	f1 1c       	adc	r15, r1
 17c:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 17e:	9d 91       	ld	r25, X+
 180:	99 0f       	add	r25, r25
 182:	91 93       	st	Z+, r25
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 184:	ee 15       	cp	r30, r14
 186:	ff 05       	cpc	r31, r15
 188:	d1 f7       	brne	.-12     	; 0x17e <make_ax25_frame_from_data+0x4a>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	f8 01       	movw	r30, r16
 18e:	87 83       	std	Z+7, r24	; 0x07
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	e7 e0       	ldi	r30, 0x07	; 7
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <make_ax25_frame_from_data+0x66>
 1a2:	f8 01       	movw	r30, r16
 1a4:	38 96       	adiw	r30, 0x08	; 8
 1a6:	78 01       	movw	r14, r16
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	e8 0e       	add	r14, r24
 1ac:	f1 1c       	adc	r15, r1
 1ae:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1b0:	9d 91       	ld	r25, X+
 1b2:	99 0f       	add	r25, r25
 1b4:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1b6:	ee 15       	cp	r30, r14
 1b8:	ff 05       	cpc	r31, r15
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <make_ax25_frame_from_data+0x7c>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
 1bc:	88 e6       	ldi	r24, 0x68	; 104
 1be:	d8 01       	movw	r26, r16
 1c0:	1e 96       	adiw	r26, 0x0e	; 14
 1c2:	8c 93       	st	X, r24
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	ee e0       	ldi	r30, 0x0E	; 14
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	de 01       	movw	r26, r28
 1cc:	11 96       	adiw	r26, 0x01	; 1
 1ce:	01 90       	ld	r0, Z+
 1d0:	0d 92       	st	X+, r0
 1d2:	8a 95       	dec	r24
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <make_ax25_frame_from_data+0x9a>
 1d6:	f8 01       	movw	r30, r16
 1d8:	3f 96       	adiw	r30, 0x0f	; 15
 1da:	78 01       	movw	r14, r16
 1dc:	b5 e1       	ldi	r27, 0x15	; 21
 1de:	eb 0e       	add	r14, r27
 1e0:	f1 1c       	adc	r15, r1
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1e2:	d9 01       	movw	r26, r18
 1e4:	9d 91       	ld	r25, X+
 1e6:	9d 01       	movw	r18, r26
 1e8:	99 0f       	add	r25, r25
 1ea:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1ec:	ee 15       	cp	r30, r14
 1ee:	ff 05       	cpc	r31, r15
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <make_ax25_frame_from_data+0xae>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	f8 01       	movw	r30, r16
 1f6:	85 8b       	std	Z+21, r24	; 0x15
  
  frame[size++] = AX_CONTROL;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	86 8b       	std	Z+22, r24	; 0x16
  frame[size++] = AX_PID;
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	87 8b       	std	Z+23, r24	; 0x17
  
  memcpy(frame + size, data, HM_SIZE);
 200:	d8 01       	movw	r26, r16
 202:	58 96       	adiw	r26, 0x18	; 24
 204:	87 e0       	ldi	r24, 0x07	; 7
 206:	fb 01       	movw	r30, r22
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <make_ax25_frame_from_data+0xd4>
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
 210:	6e e1       	ldi	r22, 0x1E	; 30
 212:	ca 01       	movw	r24, r20
 214:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
  
  memcpy(frame + size, &crc, 2);
 218:	d8 01       	movw	r26, r16
 21a:	90 96       	adiw	r26, 0x20	; 32
 21c:	9c 93       	st	X, r25
 21e:	8e 93       	st	-X, r24
 220:	5f 97       	sbiw	r26, 0x1f	; 31
  size += 2;
  
  frame[size] = AX_FLAG;
 222:	8e e7       	ldi	r24, 0x7E	; 126
 224:	91 96       	adiw	r26, 0x21	; 33
 226:	8c 93       	st	X, r24
  
}
 228:	2a 96       	adiw	r28, 0x0a	; 10
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <cc1020_init_dio>:
int init_CC1020_RX (void)
{  
	cbi(DDR_TRX, DIO);
	WakeUpCC1020ToRX(RXANALOG);													
	return SetupCC1020RX(RXANALOG,PA_POWER);
}
 242:	a6 98       	cbi	0x14, 6	; 20
 244:	a7 9a       	sbi	0x14, 7	; 20
 246:	af 9a       	sbi	0x15, 7	; 21
 248:	08 95       	ret

0000024a <WriteToCC1020Register>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	c8 2f       	mov	r28, r24
 250:	d6 2f       	mov	r29, r22
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 1d 04 	call	0x83a	; 0x83a <init_SPI_trans>
 258:	8c 2f       	mov	r24, r28
 25a:	88 0f       	add	r24, r24
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	0e 94 2a 04 	call	0x854	; 0x854 <SPI_transfer>
 262:	8d 2f       	mov	r24, r29
 264:	0e 94 2a 04 	call	0x854	; 0x854 <SPI_transfer>
 268:	0e 94 2f 04 	call	0x85e	; 0x85e <end_SPI>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <ReadFromCC1020Register>:
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 1d 04 	call	0x83a	; 0x83a <init_SPI_trans>
 27c:	8c 2f       	mov	r24, r28
 27e:	88 0f       	add	r24, r24
 280:	0e 94 2a 04 	call	0x854	; 0x854 <SPI_transfer>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	0e 94 2a 04 	call	0x854	; 0x854 <SPI_transfer>
 28a:	c8 2f       	mov	r28, r24
 28c:	0e 94 2f 04 	call	0x85e	; 0x85e <end_SPI>
 290:	8c 2f       	mov	r24, r28
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <SetupCC1020PD>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	6f e1       	ldi	r22, 0x1F	; 31
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 2a8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
 2ac:	1f 92       	push	r1
 2ae:	8f 93       	push	r24
 2b0:	85 e1       	ldi	r24, 0x15	; 21
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	c5 e3       	ldi	r28, 0x35	; 53
 2ba:	d3 e0       	ldi	r29, 0x03	; 3
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	0e 94 b3 04 	call	0x966	; 0x966 <sprintf>
 2c4:	09 90       	ld	r0, Y+
 2c6:	00 20       	and	r0, r0
 2c8:	e9 f7       	brne	.-6      	; 0x2c4 <SetupCC1020PD+0x2e>
 2ca:	21 97       	sbiw	r28, 0x01	; 1
 2cc:	be 01       	movw	r22, r28
 2ce:	65 53       	subi	r22, 0x35	; 53
 2d0:	73 40       	sbci	r23, 0x03	; 3
 2d2:	85 e3       	ldi	r24, 0x35	; 53
 2d4:	93 e0       	ldi	r25, 0x03	; 3
 2d6:	0e 94 82 04 	call	0x904	; 0x904 <send_preflight>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	8c e1       	ldi	r24, 0x1C	; 28
 2de:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <ResetCC1020>:
 2f4:	6e e0       	ldi	r22, 0x0E	; 14
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 2fc:	6f e1       	ldi	r22, 0x1F	; 31
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 304:	08 95       	ret

00000306 <SetupCC1020Allregisters>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	07 e8       	ldi	r16, 0x87	; 135
 30e:	11 e0       	ldi	r17, 0x01	; 1
 310:	c1 e0       	ldi	r28, 0x01	; 1
 312:	f8 01       	movw	r30, r16
 314:	61 91       	ld	r22, Z+
 316:	8f 01       	movw	r16, r30
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 31e:	cf 5f       	subi	r28, 0xFF	; 255
 320:	c1 32       	cpi	r28, 0x21	; 33
 322:	b9 f7       	brne	.-18     	; 0x312 <SetupCC1020Allregisters+0xc>
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <WakeUpCC1020ToRX>:
 32c:	cf 93       	push	r28
 32e:	c8 2f       	mov	r28, r24
 330:	6b e1       	ldi	r22, 0x1B	; 27
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 338:	6c 2f       	mov	r22, r28
 33a:	87 e1       	ldi	r24, 0x17	; 23
 33c:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 340:	8f e6       	ldi	r24, 0x6F	; 111
 342:	97 e1       	ldi	r25, 0x17	; 23
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <WakeUpCC1020ToRX+0x18>
 348:	00 c0       	rjmp	.+0      	; 0x34a <WakeUpCC1020ToRX+0x1e>
 34a:	00 00       	nop
 34c:	69 e1       	ldi	r22, 0x19	; 25
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 354:	8b e2       	ldi	r24, 0x2B	; 43
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <WakeUpCC1020ToRX+0x2c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <WakeUpCC1020ToRX+0x32>
 35e:	00 00       	nop
 360:	61 e1       	ldi	r22, 0x11	; 17
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <WakeUpCC1020ToTX>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	c8 2f       	mov	r28, r24
 372:	6b ed       	ldi	r22, 0xDB	; 219
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 37a:	6c 2f       	mov	r22, r28
 37c:	87 e1       	ldi	r24, 0x17	; 23
 37e:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 382:	8f e6       	ldi	r24, 0x6F	; 111
 384:	97 e1       	ldi	r25, 0x17	; 23
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <WakeUpCC1020ToTX+0x1a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <WakeUpCC1020ToTX+0x20>
 38c:	00 00       	nop
 38e:	69 ed       	ldi	r22, 0xD9	; 217
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 396:	8b e2       	ldi	r24, 0x2B	; 43
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <WakeUpCC1020ToTX+0x2e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <WakeUpCC1020ToTX+0x34>
 3a0:	00 00       	nop
 3a2:	61 ed       	ldi	r22, 0xD1	; 209
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 3b0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
 3b4:	1f 92       	push	r1
 3b6:	8f 93       	push	r24
 3b8:	85 e1       	ldi	r24, 0x15	; 21
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	9f 93       	push	r25
 3be:	8f 93       	push	r24
 3c0:	c5 e3       	ldi	r28, 0x35	; 53
 3c2:	d3 e0       	ldi	r29, 0x03	; 3
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	0e 94 b3 04 	call	0x966	; 0x966 <sprintf>
 3cc:	09 90       	ld	r0, Y+
 3ce:	00 20       	and	r0, r0
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <WakeUpCC1020ToTX+0x60>
 3d2:	21 97       	sbiw	r28, 0x01	; 1
 3d4:	be 01       	movw	r22, r28
 3d6:	65 53       	subi	r22, 0x35	; 53
 3d8:	73 40       	sbci	r23, 0x03	; 3
 3da:	85 e3       	ldi	r24, 0x35	; 53
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	0e 94 82 04 	call	0x904	; 0x904 <send_preflight>
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <CalibrateCC1020>:
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	d8 2e       	mov	r13, r24
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	8c e1       	ldi	r24, 0x1C	; 28
 408:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 40c:	04 e0       	ldi	r16, 0x04	; 4
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	0f 2e       	mov	r0, r31
 412:	ff e1       	ldi	r31, 0x1F	; 31
 414:	ef 2e       	mov	r14, r31
 416:	f0 2d       	mov	r31, r0
 418:	f1 2c       	mov	r15, r1
 41a:	64 eb       	ldi	r22, 0xB4	; 180
 41c:	8b e1       	ldi	r24, 0x1B	; 27
 41e:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 422:	87 ec       	ldi	r24, 0xC7	; 199
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	ce 2d       	mov	r28, r14
 430:	df 2d       	mov	r29, r15
 432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 434:	8f ec       	ldi	r24, 0xCF	; 207
 436:	97 e0       	ldi	r25, 0x07	; 7
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	80 e4       	ldi	r24, 0x40	; 64
 442:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 446:	88 23       	and	r24, r24
 448:	64 f0       	brlt	.+24     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 44a:	21 97       	sbiw	r28, 0x01	; 1
 44c:	99 f7       	brne	.-26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 44e:	ce 2d       	mov	r28, r14
 450:	df 2d       	mov	r29, r15
 452:	09 c0       	rjmp	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 454:	8f ec       	ldi	r24, 0xCF	; 207
 456:	97 e0       	ldi	r25, 0x07	; 7
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	ce 2d       	mov	r28, r14
 464:	df 2d       	mov	r29, r15
 466:	80 e4       	ldi	r24, 0x40	; 64
 468:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 46c:	84 fd       	sbrc	r24, 4
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	21 97       	sbiw	r28, 0x01	; 1
 472:	81 f7       	brne	.-32     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 474:	80 e4       	ldi	r24, 0x40	; 64
 476:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 47a:	84 fd       	sbrc	r24, 4
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	01 50       	subi	r16, 0x01	; 1
 480:	11 09       	sbc	r17, r1
 482:	59 f6       	brne	.-106    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 484:	6d 2d       	mov	r22, r13
 486:	8c e1       	ldi	r24, 0x1C	; 28
 488:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
 48c:	80 e4       	ldi	r24, 0x40	; 64
 48e:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 492:	82 95       	swap	r24
 494:	81 70       	andi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	08 95       	ret

000004a8 <init_CC1020>:
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	6e 97       	sbiw	r28, 0x1e	; 30
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 1d 04 	call	0x83a	; 0x83a <init_SPI_trans>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	84 e3       	ldi	r24, 0x34	; 52
 4ca:	9c e0       	ldi	r25, 0x0C	; 12
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <init_CC1020+0x24>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <init_CC1020+0x2e>
 4d6:	00 00       	nop
 4d8:	0e 94 4b 01 	call	0x296	; 0x296 <SetupCC1020PD>
 4dc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ResetCC1020>
 4e0:	0e 94 83 01 	call	0x306	; 0x306 <SetupCC1020Allregisters>
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	84 e3       	ldi	r24, 0x34	; 52
 4e8:	9c e0       	ldi	r25, 0x0C	; 12
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <init_CC1020+0x42>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <init_CC1020+0x4c>
 4f4:	00 00       	nop
 4f6:	87 e4       	ldi	r24, 0x47	; 71
 4f8:	0e 94 96 01 	call	0x32c	; 0x32c <WakeUpCC1020ToRX>
 4fc:	80 ef       	ldi	r24, 0xF0	; 240
 4fe:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CalibrateCC1020>
 502:	89 2b       	or	r24, r25
 504:	29 f0       	breq	.+10     	; 0x510 <init_CC1020+0x68>
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
 50e:	04 c0       	rjmp	.+8      	; 0x518 <init_CC1020+0x70>
 510:	84 e3       	ldi	r24, 0x34	; 52
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
 518:	2f ef       	ldi	r18, 0xFF	; 255
 51a:	84 e3       	ldi	r24, 0x34	; 52
 51c:	9c e0       	ldi	r25, 0x0C	; 12
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <init_CC1020+0x76>
 526:	00 c0       	rjmp	.+0      	; 0x528 <init_CC1020+0x80>
 528:	00 00       	nop
 52a:	87 e4       	ldi	r24, 0x47	; 71
 52c:	0e 94 b6 01 	call	0x36c	; 0x36c <WakeUpCC1020ToTX>
 530:	80 ef       	ldi	r24, 0xF0	; 240
 532:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CalibrateCC1020>
 536:	89 2b       	or	r24, r25
 538:	29 f0       	breq	.+10     	; 0x544 <init_CC1020+0x9c>
 53a:	8b e4       	ldi	r24, 0x4B	; 75
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
 542:	04 c0       	rjmp	.+8      	; 0x54c <init_CC1020+0xa4>
 544:	81 e6       	ldi	r24, 0x61	; 97
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 552:	1f 92       	push	r1
 554:	8f 93       	push	r24
 556:	88 e7       	ldi	r24, 0x78	; 120
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	9f 93       	push	r25
 55c:	8f 93       	push	r24
 55e:	8e 01       	movw	r16, r28
 560:	0f 5f       	subi	r16, 0xFF	; 255
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	1f 93       	push	r17
 566:	0f 93       	push	r16
 568:	0e 94 b3 04 	call	0x966	; 0x966 <sprintf>
 56c:	c8 01       	movw	r24, r16
 56e:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	6e 96       	adiw	r28, 0x1e	; 30
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <SetupCC1020TX>:
/*  This routine puts the CC1020 into TX mode (from RX). When switching to  */
/*  TX from PD, use WakeupCC1020ToTX first                                  */
/****************************************************************************/

char SetupCC1020TX(char TXANALOG1, char PA_POWER1)
{
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	c8 2f       	mov	r28, r24
 59c:	16 2f       	mov	r17, r22
  int TimeOutCounter;
  int lock_status;

  // Turn off PA to avoid frequency splatter
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	8c e1       	ldi	r24, 0x1C	; 28
 5a2:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,TXANALOG1);
 5a6:	6c 2f       	mov	r22, r28
 5a8:	87 e1       	ldi	r24, 0x17	; 23
 5aa:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>

  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage
 5ae:	61 ec       	ldi	r22, 0xC1	; 193
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
 5b6:	cf e1       	ldi	r28, 0x1F	; 31
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <SetupCC1020TX+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5bc:	8f ec       	ldi	r24, 0xCF	; 207
 5be:	97 e0       	ldi	r25, 0x07	; 7
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <SetupCC1020TX+0x2c>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <SetupCC1020TX+0x32>
 5c6:	00 00       	nop
 5c8:	80 e4       	ldi	r24, 0x40	; 64
 5ca:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 5ce:	84 fd       	sbrc	r24, 4
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <SetupCC1020TX+0x42>
 5d2:	21 97       	sbiw	r28, 0x01	; 1
 5d4:	99 f7       	brne	.-26     	; 0x5bc <SetupCC1020TX+0x28>
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
 5d6:	80 e4       	ldi	r24, 0x40	; 64
 5d8:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 5dc:	84 fd       	sbrc	r24, 4
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <SetupCC1020TX+0x5c>
    lock_status = TRUE;
    
  else	// if PLL is not locked then Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
 5e0:	81 2f       	mov	r24, r17
 5e2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CalibrateCC1020>
 5e6:	c1 e0       	ldi	r28, 0x01	; 1
 5e8:	89 2b       	or	r24, r25
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <SetupCC1020TX+0x5e>
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <SetupCC1020TX+0x5e>
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
    lock_status = TRUE;
 5f0:	c1 e0       	ldi	r28, 0x01	; 1
    else
      lock_status = FALSE;
  }

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER,PA_POWER1);
 5f2:	61 2f       	mov	r22, r17
 5f4:	8c e1       	ldi	r24, 0x1C	; 28
 5f6:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>

  // Turn OFF DCLK_CS (Carrier Sense Squelch) in TX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE) & (~0x10));
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 600:	68 2f       	mov	r22, r24
 602:	6f 7e       	andi	r22, 0xEF	; 239
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>
  
  // Configure LOCK pin to continuous lock status. Active low indicates PLL in lock
  WriteToCC1020Register(CC1020_LOCK,0x20);
 60a:	60 e2       	ldi	r22, 0x20	; 32
 60c:	85 e1       	ldi	r24, 0x15	; 21
 60e:	0e 94 25 01 	call	0x24a	; 0x24a <WriteToCC1020Register>

  // Return LOCK status to application
  return (lock_status);
}
 612:	8c 2f       	mov	r24, r28
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	08 95       	ret

0000061c <init_CC1020_TX>:
	transmit_string_UART0(buff);
}	
	
int init_CC1020_TX (void)
{  
	sbi(DDR_TRX, DIO);
 61c:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORT_TRX, DIO);
 61e:	af 9a       	sbi	0x15, 7	; 21
	WakeUpCC1020ToTX(TXANALOG);													
 620:	87 e4       	ldi	r24, 0x47	; 71
 622:	0e 94 b6 01 	call	0x36c	; 0x36c <WakeUpCC1020ToTX>
	return SetupCC1020TX(TXANALOG,PA_POWER);
 626:	60 ef       	ldi	r22, 0xF0	; 240
 628:	87 e4       	ldi	r24, 0x47	; 71
 62a:	0e 94 ca 02 	call	0x594	; 0x594 <SetupCC1020TX>
}
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	08 95       	ret

00000632 <DumpCC1020Regs>:
/*				Main ends									*/
/************************************************************/

// Dumps the values of all the registers of the CC1000 to the screen
void DumpCC1020Regs(void)
{
 632:	cf 93       	push	r28
	unsigned char RegCounter;

	transmit_string_UART0("Register dump:\n\r\n\r");
 634:	87 ea       	ldi	r24, 0xA7	; 167
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
	for(RegCounter=0x00; RegCounter<=0x20; RegCounter++)
 63c:	c0 e0       	ldi	r28, 0x00	; 0
    {	transmit_string_UART0("\rAddr. ");
 63e:	8a eb       	ldi	r24, 0xBA	; 186
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
		transmit_ASCII_UART0(RegCounter);
 646:	8c 2f       	mov	r24, r28
 648:	0e 94 9c 04 	call	0x938	; 0x938 <transmit_ASCII_UART0>
		transmit_string_UART0(" : ");
 64c:	82 ec       	ldi	r24, 0xC2	; 194
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
		transmit_ASCII_UART0(ReadFromCC1020Register(RegCounter));
 654:	8c 2f       	mov	r24, r28
 656:	0e 94 39 01 	call	0x272	; 0x272 <ReadFromCC1020Register>
 65a:	0e 94 9c 04 	call	0x938	; 0x938 <transmit_ASCII_UART0>
void DumpCC1020Regs(void)
{
	unsigned char RegCounter;

	transmit_string_UART0("Register dump:\n\r\n\r");
	for(RegCounter=0x00; RegCounter<=0x20; RegCounter++)
 65e:	cf 5f       	subi	r28, 0xFF	; 255
 660:	c1 32       	cpi	r28, 0x21	; 33
 662:	69 f7       	brne	.-38     	; 0x63e <DumpCC1020Regs+0xc>
    {	transmit_string_UART0("\rAddr. ");
		transmit_ASCII_UART0(RegCounter);
		transmit_string_UART0(" : ");
		transmit_ASCII_UART0(ReadFromCC1020Register(RegCounter));
	}
}
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	c0 54       	subi	r28, 0x40	; 64
 67a:	d1 40       	sbci	r29, 0x01	; 1
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	2f ef       	ldi	r18, 0xFF	; 255
 688:	89 e6       	ldi	r24, 0x69	; 105
 68a:	98 e1       	ldi	r25, 0x18	; 24
 68c:	21 50       	subi	r18, 0x01	; 1
 68e:	80 40       	sbci	r24, 0x00	; 0
 690:	90 40       	sbci	r25, 0x00	; 0
 692:	e1 f7       	brne	.-8      	; 0x68c <main+0x24>
 694:	00 c0       	rjmp	.+0      	; 0x696 <main+0x2e>
 696:	00 00       	nop
	char array1[40];
	char array2[40];
	
	_delay_ms(1000);
 
 	init_UART0();
 698:	0e 94 6d 04 	call	0x8da	; 0x8da <init_UART0>
	
	transmit_UART0('\r');
 69c:	8d e0       	ldi	r24, 0x0D	; 13
 69e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('\r');
 6a2:	8d e0       	ldi	r24, 0x0D	; 13
 6a4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('H');
 6a8:	88 e4       	ldi	r24, 0x48	; 72
 6aa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('e');
 6ae:	85 e6       	ldi	r24, 0x65	; 101
 6b0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('l');
 6b4:	8c e6       	ldi	r24, 0x6C	; 108
 6b6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('l');
 6ba:	8c e6       	ldi	r24, 0x6C	; 108
 6bc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('o');
 6c0:	8f e6       	ldi	r24, 0x6F	; 111
 6c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 6c6:	88 e2       	ldi	r24, 0x28	; 40
 6c8:	e9 e8       	ldi	r30, 0x89	; 137
 6ca:	f2 e0       	ldi	r31, 0x02	; 2
 6cc:	de 01       	movw	r26, r28
 6ce:	11 96       	adiw	r26, 0x01	; 1
 6d0:	01 90       	ld	r0, Z+
 6d2:	0d 92       	st	X+, r0
 6d4:	8a 95       	dec	r24
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x68>
	transmit_string_UART0(array);
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
	
	sprintf(array,"\tThis is HUSSAIN's OBC-Slave code...");
 6e0:	85 e2       	ldi	r24, 0x25	; 37
 6e2:	e6 ec       	ldi	r30, 0xC6	; 198
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	de 01       	movw	r26, r28
 6e8:	11 96       	adiw	r26, 0x01	; 1
 6ea:	01 90       	ld	r0, Z+
 6ec:	0d 92       	st	X+, r0
 6ee:	8a 95       	dec	r24
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <main+0x82>
	sprintf(array2,"\rWireless Communication Using CC1020\r");
 6f2:	86 e2       	ldi	r24, 0x26	; 38
 6f4:	eb ee       	ldi	r30, 0xEB	; 235
 6f6:	f1 e0       	ldi	r31, 0x01	; 1
 6f8:	de 01       	movw	r26, r28
 6fa:	af 5a       	subi	r26, 0xAF	; 175
 6fc:	bf 4f       	sbci	r27, 0xFF	; 255
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	8a 95       	dec	r24
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x96>
		
/************************************************************/

	uint8_t frame[100], buf[100], x;

	init_SPI();
 706:	0e 94 15 04 	call	0x82a	; 0x82a <init_SPI>
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	89 e6       	ldi	r24, 0x69	; 105
 70e:	98 e1       	ldi	r25, 0x18	; 24
 710:	21 50       	subi	r18, 0x01	; 1
 712:	80 40       	sbci	r24, 0x00	; 0
 714:	90 40       	sbci	r25, 0x00	; 0
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0xa8>
 718:	00 c0       	rjmp	.+0      	; 0x71a <main+0xb2>
 71a:	00 00       	nop
	//init_SPI_trans(CC1020);  
	_delay_ms(1000);
   
	cc1020_init_dio();
 71c:	0e 94 21 01 	call	0x242	; 0x242 <cc1020_init_dio>
	init_CC1020();
 720:	0e 94 54 02 	call	0x4a8	; 0x4a8 <init_CC1020>
	
	DumpCC1020Regs();
 724:	0e 94 19 03 	call	0x632	; 0x632 <DumpCC1020Regs>
  
	#ifdef CC1020_TX

/**********		Start Transmission		**********/
	sprintf(frame, "Hello World");
 728:	8c e0       	ldi	r24, 0x0C	; 12
 72a:	e1 e1       	ldi	r30, 0x11	; 17
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	de 01       	movw	r26, r28
 730:	a7 58       	subi	r26, 0x87	; 135
 732:	bf 4f       	sbci	r27, 0xFF	; 255
 734:	01 90       	ld	r0, Z+
 736:	0d 92       	st	X+, r0
 738:	8a 95       	dec	r24
 73a:	e1 f7       	brne	.-8      	; 0x734 <main+0xcc>
	sprintf(buf, "Number");
 73c:	87 e0       	ldi	r24, 0x07	; 7
 73e:	ed e1       	ldi	r30, 0x1D	; 29
 740:	f2 e0       	ldi	r31, 0x02	; 2
 742:	de 01       	movw	r26, r28
 744:	a3 52       	subi	r26, 0x23	; 35
 746:	bf 4f       	sbci	r27, 0xFF	; 255
 748:	01 90       	ld	r0, Z+
 74a:	0d 92       	st	X+, r0
 74c:	8a 95       	dec	r24
 74e:	e1 f7       	brne	.-8      	; 0x748 <main+0xe0>
	sprintf(TXBUFFER, "HelloWorld ImPRATHAM");
 750:	85 e1       	ldi	r24, 0x15	; 21
 752:	e4 e2       	ldi	r30, 0x24	; 36
 754:	f2 e0       	ldi	r31, 0x02	; 2
 756:	a9 e1       	ldi	r26, 0x19	; 25
 758:	b3 e0       	ldi	r27, 0x03	; 3
 75a:	01 90       	ld	r0, Z+
 75c:	0d 92       	st	X+, r0
 75e:	8a 95       	dec	r24
 760:	e1 f7       	brne	.-8      	; 0x75a <main+0xf2>

/************************************************************/
	x = init_CC1020_TX();
	
	if(x)
	{	sprintf(array1, "%d Done:\tPLL Locked\tTransmitting..\r\n", x);
 762:	0f 2e       	mov	r0, r31
 764:	f9 e3       	ldi	r31, 0x39	; 57
 766:	ef 2e       	mov	r14, r31
 768:	f2 e0       	ldi	r31, 0x02	; 2
 76a:	ff 2e       	mov	r15, r31
 76c:	f0 2d       	mov	r31, r0
 76e:	8e 01       	movw	r16, r28
 770:	07 5d       	subi	r16, 0xD7	; 215
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	2f ef       	ldi	r18, 0xFF	; 255
 776:	89 e6       	ldi	r24, 0x69	; 105
 778:	98 e1       	ldi	r25, 0x18	; 24
 77a:	21 50       	subi	r18, 0x01	; 1
 77c:	80 40       	sbci	r24, 0x00	; 0
 77e:	90 40       	sbci	r25, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <main+0x112>
 782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x11c>
 784:	00 00       	nop
	//sbi(PORT_PA, PA_EN);		//Enable PA
	
	while(1){
	_delay_ms(1000);
	
	transmit_UART0('\r');
 786:	8d e0       	ldi	r24, 0x0D	; 13
 788:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('\r');
 78c:	8d e0       	ldi	r24, 0x0D	; 13
 78e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('H');
 792:	88 e4       	ldi	r24, 0x48	; 72
 794:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	transmit_UART0('i');
 798:	89 e6       	ldi	r24, 0x69	; 105
 79a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
	
	transmit_string_UART0(array);
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
	transmit_string_UART0(array2);
 7a6:	ce 01       	movw	r24, r28
 7a8:	8f 5a       	subi	r24, 0xAF	; 175
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>

/************************************************************/
	x = init_CC1020_TX();
 7b0:	0e 94 0e 03 	call	0x61c	; 0x61c <init_CC1020_TX>
	
	if(x)
 7b4:	88 23       	and	r24, r24
 7b6:	29 f1       	breq	.+74     	; 0x802 <main+0x19a>
	{	sprintf(array1, "%d Done:\tPLL Locked\tTransmitting..\r\n", x);
 7b8:	99 27       	eor	r25, r25
 7ba:	9f 93       	push	r25
 7bc:	8f 93       	push	r24
 7be:	ff 92       	push	r15
 7c0:	ef 92       	push	r14
 7c2:	1f 93       	push	r17
 7c4:	0f 93       	push	r16
 7c6:	0e 94 b3 04 	call	0x966	; 0x966 <sprintf>
			transmit_string_UART0(array1);
 7ca:	c8 01       	movw	r24, r16
 7cc:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
	else
	{	transmit_string_UART0("\tPLL Lock Failed\r\n");
		break;	
	}
		
	make_ax25_frame_from_data(frame, buf);
 7d0:	be 01       	movw	r22, r28
 7d2:	63 52       	subi	r22, 0x23	; 35
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	ce 01       	movw	r24, r28
 7d8:	87 58       	subi	r24, 0x87	; 135
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	0e 94 9a 00 	call	0x134	; 0x134 <make_ax25_frame_from_data>
	//cc1020_transmit_packet(frame,FRAME_SIZE);
	
	cc1020_transmit_rf_packet(TXBUFFER);
 7e0:	89 e1       	ldi	r24, 0x19	; 25
 7e2:	93 e0       	ldi	r25, 0x03	; 3
 7e4:	0e 94 4b 04 	call	0x896	; 0x896 <cc1020_transmit_rf_packet>
	
	//if(x)
	//{
	//	sprintf((char *)frame,"\rTransmission complete; No. of bytes send = \t%d\r", x);
		transmit_string_UART0("\rTransmission complete\r");
 7e8:	8e e5       	ldi	r24, 0x5E	; 94
 7ea:	92 e0       	ldi	r25, 0x02	; 2
 7ec:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>
	//	transmit_string_UART0(frame);
	//}
	SetupCC1020PD();  // configure in PD and stop Transmission
 7f0:	0e 94 4b 01 	call	0x296	; 0x296 <SetupCC1020PD>
	}	
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	b9 cf       	rjmp	.-142    	; 0x774 <main+0x10c>
	if(x)
	{	sprintf(array1, "%d Done:\tPLL Locked\tTransmitting..\r\n", x);
			transmit_string_UART0(array1);
	}
	else
	{	transmit_string_UART0("\tPLL Lock Failed\r\n");
 802:	86 e7       	ldi	r24, 0x76	; 118
 804:	92 e0       	ldi	r25, 0x02	; 2
 806:	0e 94 90 04 	call	0x920	; 0x920 <transmit_string_UART0>

/**********		End of Reception		**********/
	#endif

	return 0;
}
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	c0 5c       	subi	r28, 0xC0	; 192
 810:	de 4f       	sbci	r29, 0xFE	; 254
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	08 95       	ret

0000082a <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 82a:	bb 98       	cbi	0x17, 3	; 23
 82c:	86 e0       	ldi	r24, 0x06	; 6
 82e:	87 bb       	out	0x17, r24	; 23
 830:	b8 9a       	sbi	0x17, 0	; 23
 832:	c0 9a       	sbi	0x18, 0	; 24
 834:	83 e5       	ldi	r24, 0x53	; 83
 836:	8d b9       	out	0x0d, r24	; 13
 838:	08 95       	ret

0000083a <init_SPI_trans>:
 83a:	c0 9a       	sbi	0x18, 0	; 24
 83c:	98 b3       	in	r25, 0x18	; 24
 83e:	21 e0       	ldi	r18, 0x01	; 1
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	02 c0       	rjmp	.+4      	; 0x848 <init_SPI_trans+0xe>
 844:	22 0f       	add	r18, r18
 846:	33 1f       	adc	r19, r19
 848:	8a 95       	dec	r24
 84a:	e2 f7       	brpl	.-8      	; 0x844 <init_SPI_trans+0xa>
 84c:	20 95       	com	r18
 84e:	29 23       	and	r18, r25
 850:	28 bb       	out	0x18, r18	; 24
 852:	08 95       	ret

00000854 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 854:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 856:	77 9b       	sbis	0x0e, 7	; 14
 858:	fe cf       	rjmp	.-4      	; 0x856 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 85a:	8f b1       	in	r24, 0x0f	; 15
}
 85c:	08 95       	ret

0000085e <end_SPI>:

void end_SPI(void)
{
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= (1<<SLAVE)| (1<<CC1020);	
 85e:	c0 9a       	sbi	0x18, 0	; 24
 860:	08 95       	ret

00000862 <cc1020_transmit_rf_char>:


/************************************************************************/
/************************************************************************/
char cc1020_transmit_rf_char(uint8_t trans_data)
{
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	c8 2f       	mov	r28, r24
 86a:	08 e0       	ldi	r16, 0x08	; 8
 86c:	10 e0       	ldi	r17, 0x00	; 0
	int BitCounter;
	char tempData;
	tempData = trans_data;
	for (BitCounter = 0; BitCounter < 8; BitCounter++)
	{
		while (!(PIN_TRX & (1 << DCLK)));	// put new data on falling edge of DCLK
 86e:	9e 9b       	sbis	0x13, 6	; 19
 870:	fe cf       	rjmp	.-4      	; 0x86e <cc1020_transmit_rf_char+0xc>
		while (PIN_TRX & (1 << DCLK));			// since by then it is stable
 872:	9e 99       	sbic	0x13, 6	; 19
 874:	fe cf       	rjmp	.-4      	; 0x872 <cc1020_transmit_rf_char+0x10>

			
		if (( tempData & 0x80)==0 )	
 876:	cc 23       	and	r28, r28
 878:	14 f0       	brlt	.+4      	; 0x87e <cc1020_transmit_rf_char+0x1c>
			cbi(PORT_TRX, DIO); // DIO=0
 87a:	af 98       	cbi	0x15, 7	; 21
 87c:	01 c0       	rjmp	.+2      	; 0x880 <cc1020_transmit_rf_char+0x1e>
		else 
			sbi(PORT_TRX, DIO); //	DIO=1
 87e:	af 9a       	sbi	0x15, 7	; 21
		
		tempData = tempData<<1;		
 880:	cc 0f       	add	r28, r28
		transmit_ASCII_UART0(tempData);
 882:	8c 2f       	mov	r24, r28
 884:	0e 94 9c 04 	call	0x938	; 0x938 <transmit_ASCII_UART0>
 888:	01 50       	subi	r16, 0x01	; 1
 88a:	11 09       	sbc	r17, r1
char cc1020_transmit_rf_char(uint8_t trans_data)
{
	int BitCounter;
	char tempData;
	tempData = trans_data;
	for (BitCounter = 0; BitCounter < 8; BitCounter++)
 88c:	81 f7       	brne	.-32     	; 0x86e <cc1020_transmit_rf_char+0xc>
			sbi(PORT_TRX, DIO); //	DIO=1
		
		tempData = tempData<<1;		
		transmit_ASCII_UART0(tempData);
	}// end for loop
}
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	08 95       	ret

00000896 <cc1020_transmit_rf_packet>:

void cc1020_transmit_rf_packet(uint8_t *trans_buffer) 
{
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	8c 01       	movw	r16, r24
	short i;

	cc1020_transmit_rf_char(0xFF);
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
	cc1020_transmit_rf_char(0xFF);
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
	cc1020_transmit_rf_char(0xFE);
 8ac:	8e ef       	ldi	r24, 0xFE	; 254
 8ae:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
	cc1020_transmit_rf_char(rf_lock1);
 8b2:	87 e7       	ldi	r24, 0x77	; 119
 8b4:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
	cc1020_transmit_rf_char(rf_lock2);
 8b8:	88 e7       	ldi	r24, 0x78	; 120
 8ba:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
 8be:	e8 01       	movw	r28, r16
 8c0:	0c 5e       	subi	r16, 0xEC	; 236
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
//	msg_len = packet.data_pack.common_header.msg_len;
//	for (i=0; i<msg_len ; i++ )	{
	for (i=0; i<20 ; i++ )	
	{
		cc1020_transmit_rf_char(trans_buffer[i]);
 8c4:	89 91       	ld	r24, Y+
 8c6:	0e 94 31 04 	call	0x862	; 0x862 <cc1020_transmit_rf_char>
	cc1020_transmit_rf_char(0xFE);
	cc1020_transmit_rf_char(rf_lock1);
	cc1020_transmit_rf_char(rf_lock2);
//	msg_len = packet.data_pack.common_header.msg_len;
//	for (i=0; i<msg_len ; i++ )	{
	for (i=0; i<20 ; i++ )	
 8ca:	c0 17       	cp	r28, r16
 8cc:	d1 07       	cpc	r29, r17
 8ce:	d1 f7       	brne	.-12     	; 0x8c4 <cc1020_transmit_rf_packet+0x2e>
	{
		cc1020_transmit_rf_char(trans_buffer[i]);
	}
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	08 95       	ret

000008da <init_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
  return UDR0;
}
 8da:	1b b8       	out	0x0b, r1	; 11
 8dc:	1a b8       	out	0x0a, r1	; 10
 8de:	e5 e9       	ldi	r30, 0x95	; 149
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	10 82       	st	Z, r1
 8e4:	59 9a       	sbi	0x0b, 1	; 11
 8e6:	8a b1       	in	r24, 0x0a	; 10
 8e8:	88 61       	ori	r24, 0x18	; 24
 8ea:	8a b9       	out	0x0a, r24	; 10
 8ec:	80 81       	ld	r24, Z
 8ee:	8e 60       	ori	r24, 0x0E	; 14
 8f0:	80 83       	st	Z, r24
 8f2:	87 e6       	ldi	r24, 0x67	; 103
 8f4:	89 b9       	out	0x09, r24	; 9
 8f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 8fa:	08 95       	ret

000008fc <transmit_UART0>:
 8fc:	5d 9b       	sbis	0x0b, 5	; 11
 8fe:	fe cf       	rjmp	.-4      	; 0x8fc <transmit_UART0>
 900:	8c b9       	out	0x0c, r24	; 12
 902:	08 95       	ret

00000904 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 904:	61 15       	cp	r22, r1
 906:	71 05       	cpc	r23, r1
 908:	51 f0       	breq	.+20     	; 0x91e <send_preflight+0x1a>
 90a:	fc 01       	movw	r30, r24
 90c:	68 0f       	add	r22, r24
 90e:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 910:	5d 9b       	sbis	0x0b, 5	; 11
 912:	fe cf       	rjmp	.-4      	; 0x910 <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
 914:	91 91       	ld	r25, Z+
 916:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 918:	e6 17       	cp	r30, r22
 91a:	f7 07       	cpc	r31, r23
 91c:	c9 f7       	brne	.-14     	; 0x910 <send_preflight+0xc>
 91e:	08 95       	ret

00000920 <transmit_string_UART0>:
    i++;
  }
}

void transmit_string_UART0(char *buffer)
{
 920:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 922:	90 81       	ld	r25, Z
 924:	99 23       	and	r25, r25
 926:	39 f0       	breq	.+14     	; 0x936 <transmit_string_UART0+0x16>
 928:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 92a:	5d 9b       	sbis	0x0b, 5	; 11
 92c:	fe cf       	rjmp	.-4      	; 0x92a <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 92e:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 930:	91 91       	ld	r25, Z+
 932:	91 11       	cpse	r25, r1
 934:	fa cf       	rjmp	.-12     	; 0x92a <transmit_string_UART0+0xa>
 936:	08 95       	ret

00000938 <transmit_ASCII_UART0>:
		i++;	
	}
}

void transmit_ASCII_UART0(char data)
{
 938:	cf 93       	push	r28
 93a:	c8 2f       	mov	r28, r24
	char temp;
	temp = ((data & 0xF0) >> 4) ;
 93c:	82 95       	swap	r24
 93e:	8f 70       	andi	r24, 0x0F	; 15
	if ( temp < 0x0A )	temp = temp + 0x30;
 940:	8a 30       	cpi	r24, 0x0A	; 10
 942:	10 f4       	brcc	.+4      	; 0x948 <transmit_ASCII_UART0+0x10>
 944:	80 5d       	subi	r24, 0xD0	; 208
 946:	01 c0       	rjmp	.+2      	; 0x94a <transmit_ASCII_UART0+0x12>
	else				temp = temp + 0x57;
 948:	89 5a       	subi	r24, 0xA9	; 169
	transmit_UART0(temp);
 94a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>

	temp = (data & 0x0F);
 94e:	cf 70       	andi	r28, 0x0F	; 15
	if ( temp < 0x0A )	temp = temp + 0x30;
 950:	ca 30       	cpi	r28, 0x0A	; 10
 952:	18 f4       	brcc	.+6      	; 0x95a <transmit_ASCII_UART0+0x22>
 954:	80 e3       	ldi	r24, 0x30	; 48
 956:	8c 0f       	add	r24, r28
 958:	02 c0       	rjmp	.+4      	; 0x95e <transmit_ASCII_UART0+0x26>
	else				temp = temp + 0x57;
 95a:	87 e5       	ldi	r24, 0x57	; 87
 95c:	8c 0f       	add	r24, r28
	transmit_UART0(temp);
 95e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <transmit_UART0>
}
 962:	cf 91       	pop	r28
 964:	08 95       	ret

00000966 <sprintf>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	2e 97       	sbiw	r28, 0x0e	; 14
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	0d 89       	ldd	r16, Y+21	; 0x15
 980:	1e 89       	ldd	r17, Y+22	; 0x16
 982:	86 e0       	ldi	r24, 0x06	; 6
 984:	8c 83       	std	Y+4, r24	; 0x04
 986:	1a 83       	std	Y+2, r17	; 0x02
 988:	09 83       	std	Y+1, r16	; 0x01
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f e7       	ldi	r25, 0x7F	; 127
 98e:	9e 83       	std	Y+6, r25	; 0x06
 990:	8d 83       	std	Y+5, r24	; 0x05
 992:	ae 01       	movw	r20, r28
 994:	47 5e       	subi	r20, 0xE7	; 231
 996:	5f 4f       	sbci	r21, 0xFF	; 255
 998:	6f 89       	ldd	r22, Y+23	; 0x17
 99a:	78 8d       	ldd	r23, Y+24	; 0x18
 99c:	ce 01       	movw	r24, r28
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vfprintf>
 9a4:	2f 81       	ldd	r18, Y+7	; 0x07
 9a6:	38 85       	ldd	r19, Y+8	; 0x08
 9a8:	f8 01       	movw	r30, r16
 9aa:	e2 0f       	add	r30, r18
 9ac:	f3 1f       	adc	r31, r19
 9ae:	10 82       	st	Z, r1
 9b0:	2e 96       	adiw	r28, 0x0e	; 14
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	08 95       	ret

000009c6 <vfprintf>:
 9c6:	2f 92       	push	r2
 9c8:	3f 92       	push	r3
 9ca:	4f 92       	push	r4
 9cc:	5f 92       	push	r5
 9ce:	6f 92       	push	r6
 9d0:	7f 92       	push	r7
 9d2:	8f 92       	push	r8
 9d4:	9f 92       	push	r9
 9d6:	af 92       	push	r10
 9d8:	bf 92       	push	r11
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	2c 97       	sbiw	r28, 0x0c	; 12
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	7c 01       	movw	r14, r24
 9fc:	6b 01       	movw	r12, r22
 9fe:	8a 01       	movw	r16, r20
 a00:	fc 01       	movw	r30, r24
 a02:	17 82       	std	Z+7, r1	; 0x07
 a04:	16 82       	std	Z+6, r1	; 0x06
 a06:	83 81       	ldd	r24, Z+3	; 0x03
 a08:	81 ff       	sbrs	r24, 1
 a0a:	bd c1       	rjmp	.+890    	; 0xd86 <vfprintf+0x3c0>
 a0c:	ce 01       	movw	r24, r28
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	4c 01       	movw	r8, r24
 a12:	f7 01       	movw	r30, r14
 a14:	93 81       	ldd	r25, Z+3	; 0x03
 a16:	f6 01       	movw	r30, r12
 a18:	93 fd       	sbrc	r25, 3
 a1a:	85 91       	lpm	r24, Z+
 a1c:	93 ff       	sbrs	r25, 3
 a1e:	81 91       	ld	r24, Z+
 a20:	6f 01       	movw	r12, r30
 a22:	88 23       	and	r24, r24
 a24:	09 f4       	brne	.+2      	; 0xa28 <vfprintf+0x62>
 a26:	ab c1       	rjmp	.+854    	; 0xd7e <vfprintf+0x3b8>
 a28:	85 32       	cpi	r24, 0x25	; 37
 a2a:	39 f4       	brne	.+14     	; 0xa3a <vfprintf+0x74>
 a2c:	93 fd       	sbrc	r25, 3
 a2e:	85 91       	lpm	r24, Z+
 a30:	93 ff       	sbrs	r25, 3
 a32:	81 91       	ld	r24, Z+
 a34:	6f 01       	movw	r12, r30
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	29 f4       	brne	.+10     	; 0xa44 <vfprintf+0x7e>
 a3a:	b7 01       	movw	r22, r14
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 a42:	e7 cf       	rjmp	.-50     	; 0xa12 <vfprintf+0x4c>
 a44:	51 2c       	mov	r5, r1
 a46:	31 2c       	mov	r3, r1
 a48:	20 e0       	ldi	r18, 0x00	; 0
 a4a:	20 32       	cpi	r18, 0x20	; 32
 a4c:	a0 f4       	brcc	.+40     	; 0xa76 <vfprintf+0xb0>
 a4e:	8b 32       	cpi	r24, 0x2B	; 43
 a50:	69 f0       	breq	.+26     	; 0xa6c <vfprintf+0xa6>
 a52:	30 f4       	brcc	.+12     	; 0xa60 <vfprintf+0x9a>
 a54:	80 32       	cpi	r24, 0x20	; 32
 a56:	59 f0       	breq	.+22     	; 0xa6e <vfprintf+0xa8>
 a58:	83 32       	cpi	r24, 0x23	; 35
 a5a:	69 f4       	brne	.+26     	; 0xa76 <vfprintf+0xb0>
 a5c:	20 61       	ori	r18, 0x10	; 16
 a5e:	2c c0       	rjmp	.+88     	; 0xab8 <vfprintf+0xf2>
 a60:	8d 32       	cpi	r24, 0x2D	; 45
 a62:	39 f0       	breq	.+14     	; 0xa72 <vfprintf+0xac>
 a64:	80 33       	cpi	r24, 0x30	; 48
 a66:	39 f4       	brne	.+14     	; 0xa76 <vfprintf+0xb0>
 a68:	21 60       	ori	r18, 0x01	; 1
 a6a:	26 c0       	rjmp	.+76     	; 0xab8 <vfprintf+0xf2>
 a6c:	22 60       	ori	r18, 0x02	; 2
 a6e:	24 60       	ori	r18, 0x04	; 4
 a70:	23 c0       	rjmp	.+70     	; 0xab8 <vfprintf+0xf2>
 a72:	28 60       	ori	r18, 0x08	; 8
 a74:	21 c0       	rjmp	.+66     	; 0xab8 <vfprintf+0xf2>
 a76:	27 fd       	sbrc	r18, 7
 a78:	27 c0       	rjmp	.+78     	; 0xac8 <vfprintf+0x102>
 a7a:	30 ed       	ldi	r19, 0xD0	; 208
 a7c:	38 0f       	add	r19, r24
 a7e:	3a 30       	cpi	r19, 0x0A	; 10
 a80:	78 f4       	brcc	.+30     	; 0xaa0 <vfprintf+0xda>
 a82:	26 ff       	sbrs	r18, 6
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <vfprintf+0xcc>
 a86:	fa e0       	ldi	r31, 0x0A	; 10
 a88:	5f 9e       	mul	r5, r31
 a8a:	30 0d       	add	r19, r0
 a8c:	11 24       	eor	r1, r1
 a8e:	53 2e       	mov	r5, r19
 a90:	13 c0       	rjmp	.+38     	; 0xab8 <vfprintf+0xf2>
 a92:	8a e0       	ldi	r24, 0x0A	; 10
 a94:	38 9e       	mul	r3, r24
 a96:	30 0d       	add	r19, r0
 a98:	11 24       	eor	r1, r1
 a9a:	33 2e       	mov	r3, r19
 a9c:	20 62       	ori	r18, 0x20	; 32
 a9e:	0c c0       	rjmp	.+24     	; 0xab8 <vfprintf+0xf2>
 aa0:	8e 32       	cpi	r24, 0x2E	; 46
 aa2:	21 f4       	brne	.+8      	; 0xaac <vfprintf+0xe6>
 aa4:	26 fd       	sbrc	r18, 6
 aa6:	6b c1       	rjmp	.+726    	; 0xd7e <vfprintf+0x3b8>
 aa8:	20 64       	ori	r18, 0x40	; 64
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <vfprintf+0xf2>
 aac:	8c 36       	cpi	r24, 0x6C	; 108
 aae:	11 f4       	brne	.+4      	; 0xab4 <vfprintf+0xee>
 ab0:	20 68       	ori	r18, 0x80	; 128
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0xf2>
 ab4:	88 36       	cpi	r24, 0x68	; 104
 ab6:	41 f4       	brne	.+16     	; 0xac8 <vfprintf+0x102>
 ab8:	f6 01       	movw	r30, r12
 aba:	93 fd       	sbrc	r25, 3
 abc:	85 91       	lpm	r24, Z+
 abe:	93 ff       	sbrs	r25, 3
 ac0:	81 91       	ld	r24, Z+
 ac2:	6f 01       	movw	r12, r30
 ac4:	81 11       	cpse	r24, r1
 ac6:	c1 cf       	rjmp	.-126    	; 0xa4a <vfprintf+0x84>
 ac8:	98 2f       	mov	r25, r24
 aca:	9f 7d       	andi	r25, 0xDF	; 223
 acc:	95 54       	subi	r25, 0x45	; 69
 ace:	93 30       	cpi	r25, 0x03	; 3
 ad0:	28 f4       	brcc	.+10     	; 0xadc <vfprintf+0x116>
 ad2:	0c 5f       	subi	r16, 0xFC	; 252
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	ff e3       	ldi	r31, 0x3F	; 63
 ad8:	f9 83       	std	Y+1, r31	; 0x01
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <vfprintf+0x130>
 adc:	83 36       	cpi	r24, 0x63	; 99
 ade:	31 f0       	breq	.+12     	; 0xaec <vfprintf+0x126>
 ae0:	83 37       	cpi	r24, 0x73	; 115
 ae2:	71 f0       	breq	.+28     	; 0xb00 <vfprintf+0x13a>
 ae4:	83 35       	cpi	r24, 0x53	; 83
 ae6:	09 f0       	breq	.+2      	; 0xaea <vfprintf+0x124>
 ae8:	5b c0       	rjmp	.+182    	; 0xba0 <vfprintf+0x1da>
 aea:	22 c0       	rjmp	.+68     	; 0xb30 <vfprintf+0x16a>
 aec:	f8 01       	movw	r30, r16
 aee:	80 81       	ld	r24, Z
 af0:	89 83       	std	Y+1, r24	; 0x01
 af2:	0e 5f       	subi	r16, 0xFE	; 254
 af4:	1f 4f       	sbci	r17, 0xFF	; 255
 af6:	44 24       	eor	r4, r4
 af8:	43 94       	inc	r4
 afa:	51 2c       	mov	r5, r1
 afc:	54 01       	movw	r10, r8
 afe:	15 c0       	rjmp	.+42     	; 0xb2a <vfprintf+0x164>
 b00:	38 01       	movw	r6, r16
 b02:	f2 e0       	ldi	r31, 0x02	; 2
 b04:	6f 0e       	add	r6, r31
 b06:	71 1c       	adc	r7, r1
 b08:	f8 01       	movw	r30, r16
 b0a:	a0 80       	ld	r10, Z
 b0c:	b1 80       	ldd	r11, Z+1	; 0x01
 b0e:	26 ff       	sbrs	r18, 6
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <vfprintf+0x152>
 b12:	65 2d       	mov	r22, r5
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0x156>
 b18:	6f ef       	ldi	r22, 0xFF	; 255
 b1a:	7f ef       	ldi	r23, 0xFF	; 255
 b1c:	c5 01       	movw	r24, r10
 b1e:	2c 87       	std	Y+12, r18	; 0x0c
 b20:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <strnlen>
 b24:	2c 01       	movw	r4, r24
 b26:	83 01       	movw	r16, r6
 b28:	2c 85       	ldd	r18, Y+12	; 0x0c
 b2a:	2f 77       	andi	r18, 0x7F	; 127
 b2c:	22 2e       	mov	r2, r18
 b2e:	17 c0       	rjmp	.+46     	; 0xb5e <vfprintf+0x198>
 b30:	38 01       	movw	r6, r16
 b32:	f2 e0       	ldi	r31, 0x02	; 2
 b34:	6f 0e       	add	r6, r31
 b36:	71 1c       	adc	r7, r1
 b38:	f8 01       	movw	r30, r16
 b3a:	a0 80       	ld	r10, Z
 b3c:	b1 80       	ldd	r11, Z+1	; 0x01
 b3e:	26 ff       	sbrs	r18, 6
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <vfprintf+0x182>
 b42:	65 2d       	mov	r22, r5
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <vfprintf+0x186>
 b48:	6f ef       	ldi	r22, 0xFF	; 255
 b4a:	7f ef       	ldi	r23, 0xFF	; 255
 b4c:	c5 01       	movw	r24, r10
 b4e:	2c 87       	std	Y+12, r18	; 0x0c
 b50:	0e 94 de 06 	call	0xdbc	; 0xdbc <strnlen_P>
 b54:	2c 01       	movw	r4, r24
 b56:	2c 85       	ldd	r18, Y+12	; 0x0c
 b58:	20 68       	ori	r18, 0x80	; 128
 b5a:	22 2e       	mov	r2, r18
 b5c:	83 01       	movw	r16, r6
 b5e:	23 fc       	sbrc	r2, 3
 b60:	1b c0       	rjmp	.+54     	; 0xb98 <vfprintf+0x1d2>
 b62:	83 2d       	mov	r24, r3
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	48 16       	cp	r4, r24
 b68:	59 06       	cpc	r5, r25
 b6a:	b0 f4       	brcc	.+44     	; 0xb98 <vfprintf+0x1d2>
 b6c:	b7 01       	movw	r22, r14
 b6e:	80 e2       	ldi	r24, 0x20	; 32
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 b76:	3a 94       	dec	r3
 b78:	f4 cf       	rjmp	.-24     	; 0xb62 <vfprintf+0x19c>
 b7a:	f5 01       	movw	r30, r10
 b7c:	27 fc       	sbrc	r2, 7
 b7e:	85 91       	lpm	r24, Z+
 b80:	27 fe       	sbrs	r2, 7
 b82:	81 91       	ld	r24, Z+
 b84:	5f 01       	movw	r10, r30
 b86:	b7 01       	movw	r22, r14
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 b8e:	31 10       	cpse	r3, r1
 b90:	3a 94       	dec	r3
 b92:	f1 e0       	ldi	r31, 0x01	; 1
 b94:	4f 1a       	sub	r4, r31
 b96:	51 08       	sbc	r5, r1
 b98:	41 14       	cp	r4, r1
 b9a:	51 04       	cpc	r5, r1
 b9c:	71 f7       	brne	.-36     	; 0xb7a <vfprintf+0x1b4>
 b9e:	e5 c0       	rjmp	.+458    	; 0xd6a <vfprintf+0x3a4>
 ba0:	84 36       	cpi	r24, 0x64	; 100
 ba2:	11 f0       	breq	.+4      	; 0xba8 <vfprintf+0x1e2>
 ba4:	89 36       	cpi	r24, 0x69	; 105
 ba6:	39 f5       	brne	.+78     	; 0xbf6 <vfprintf+0x230>
 ba8:	f8 01       	movw	r30, r16
 baa:	27 ff       	sbrs	r18, 7
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <vfprintf+0x1f6>
 bae:	60 81       	ld	r22, Z
 bb0:	71 81       	ldd	r23, Z+1	; 0x01
 bb2:	82 81       	ldd	r24, Z+2	; 0x02
 bb4:	93 81       	ldd	r25, Z+3	; 0x03
 bb6:	0c 5f       	subi	r16, 0xFC	; 252
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	08 c0       	rjmp	.+16     	; 0xbcc <vfprintf+0x206>
 bbc:	60 81       	ld	r22, Z
 bbe:	71 81       	ldd	r23, Z+1	; 0x01
 bc0:	07 2e       	mov	r0, r23
 bc2:	00 0c       	add	r0, r0
 bc4:	88 0b       	sbc	r24, r24
 bc6:	99 0b       	sbc	r25, r25
 bc8:	0e 5f       	subi	r16, 0xFE	; 254
 bca:	1f 4f       	sbci	r17, 0xFF	; 255
 bcc:	2f 76       	andi	r18, 0x6F	; 111
 bce:	72 2e       	mov	r7, r18
 bd0:	97 ff       	sbrs	r25, 7
 bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <vfprintf+0x220>
 bd4:	90 95       	com	r25
 bd6:	80 95       	com	r24
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	20 68       	ori	r18, 0x80	; 128
 be4:	72 2e       	mov	r7, r18
 be6:	2a e0       	ldi	r18, 0x0A	; 10
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	a4 01       	movw	r20, r8
 bec:	0e 94 2c 07 	call	0xe58	; 0xe58 <__ultoa_invert>
 bf0:	a8 2e       	mov	r10, r24
 bf2:	a8 18       	sub	r10, r8
 bf4:	44 c0       	rjmp	.+136    	; 0xc7e <vfprintf+0x2b8>
 bf6:	85 37       	cpi	r24, 0x75	; 117
 bf8:	29 f4       	brne	.+10     	; 0xc04 <vfprintf+0x23e>
 bfa:	2f 7e       	andi	r18, 0xEF	; 239
 bfc:	b2 2e       	mov	r11, r18
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	25 c0       	rjmp	.+74     	; 0xc4e <vfprintf+0x288>
 c04:	f2 2f       	mov	r31, r18
 c06:	f9 7f       	andi	r31, 0xF9	; 249
 c08:	bf 2e       	mov	r11, r31
 c0a:	8f 36       	cpi	r24, 0x6F	; 111
 c0c:	c1 f0       	breq	.+48     	; 0xc3e <vfprintf+0x278>
 c0e:	18 f4       	brcc	.+6      	; 0xc16 <vfprintf+0x250>
 c10:	88 35       	cpi	r24, 0x58	; 88
 c12:	79 f0       	breq	.+30     	; 0xc32 <vfprintf+0x26c>
 c14:	b4 c0       	rjmp	.+360    	; 0xd7e <vfprintf+0x3b8>
 c16:	80 37       	cpi	r24, 0x70	; 112
 c18:	19 f0       	breq	.+6      	; 0xc20 <vfprintf+0x25a>
 c1a:	88 37       	cpi	r24, 0x78	; 120
 c1c:	21 f0       	breq	.+8      	; 0xc26 <vfprintf+0x260>
 c1e:	af c0       	rjmp	.+350    	; 0xd7e <vfprintf+0x3b8>
 c20:	2f 2f       	mov	r18, r31
 c22:	20 61       	ori	r18, 0x10	; 16
 c24:	b2 2e       	mov	r11, r18
 c26:	b4 fe       	sbrs	r11, 4
 c28:	0d c0       	rjmp	.+26     	; 0xc44 <vfprintf+0x27e>
 c2a:	8b 2d       	mov	r24, r11
 c2c:	84 60       	ori	r24, 0x04	; 4
 c2e:	b8 2e       	mov	r11, r24
 c30:	09 c0       	rjmp	.+18     	; 0xc44 <vfprintf+0x27e>
 c32:	24 ff       	sbrs	r18, 4
 c34:	0a c0       	rjmp	.+20     	; 0xc4a <vfprintf+0x284>
 c36:	9f 2f       	mov	r25, r31
 c38:	96 60       	ori	r25, 0x06	; 6
 c3a:	b9 2e       	mov	r11, r25
 c3c:	06 c0       	rjmp	.+12     	; 0xc4a <vfprintf+0x284>
 c3e:	28 e0       	ldi	r18, 0x08	; 8
 c40:	30 e0       	ldi	r19, 0x00	; 0
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <vfprintf+0x288>
 c44:	20 e1       	ldi	r18, 0x10	; 16
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x288>
 c4a:	20 e1       	ldi	r18, 0x10	; 16
 c4c:	32 e0       	ldi	r19, 0x02	; 2
 c4e:	f8 01       	movw	r30, r16
 c50:	b7 fe       	sbrs	r11, 7
 c52:	07 c0       	rjmp	.+14     	; 0xc62 <vfprintf+0x29c>
 c54:	60 81       	ld	r22, Z
 c56:	71 81       	ldd	r23, Z+1	; 0x01
 c58:	82 81       	ldd	r24, Z+2	; 0x02
 c5a:	93 81       	ldd	r25, Z+3	; 0x03
 c5c:	0c 5f       	subi	r16, 0xFC	; 252
 c5e:	1f 4f       	sbci	r17, 0xFF	; 255
 c60:	06 c0       	rjmp	.+12     	; 0xc6e <vfprintf+0x2a8>
 c62:	60 81       	ld	r22, Z
 c64:	71 81       	ldd	r23, Z+1	; 0x01
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	0e 5f       	subi	r16, 0xFE	; 254
 c6c:	1f 4f       	sbci	r17, 0xFF	; 255
 c6e:	a4 01       	movw	r20, r8
 c70:	0e 94 2c 07 	call	0xe58	; 0xe58 <__ultoa_invert>
 c74:	a8 2e       	mov	r10, r24
 c76:	a8 18       	sub	r10, r8
 c78:	fb 2d       	mov	r31, r11
 c7a:	ff 77       	andi	r31, 0x7F	; 127
 c7c:	7f 2e       	mov	r7, r31
 c7e:	76 fe       	sbrs	r7, 6
 c80:	0b c0       	rjmp	.+22     	; 0xc98 <vfprintf+0x2d2>
 c82:	37 2d       	mov	r19, r7
 c84:	3e 7f       	andi	r19, 0xFE	; 254
 c86:	a5 14       	cp	r10, r5
 c88:	50 f4       	brcc	.+20     	; 0xc9e <vfprintf+0x2d8>
 c8a:	74 fe       	sbrs	r7, 4
 c8c:	0a c0       	rjmp	.+20     	; 0xca2 <vfprintf+0x2dc>
 c8e:	72 fc       	sbrc	r7, 2
 c90:	08 c0       	rjmp	.+16     	; 0xca2 <vfprintf+0x2dc>
 c92:	37 2d       	mov	r19, r7
 c94:	3e 7e       	andi	r19, 0xEE	; 238
 c96:	05 c0       	rjmp	.+10     	; 0xca2 <vfprintf+0x2dc>
 c98:	ba 2c       	mov	r11, r10
 c9a:	37 2d       	mov	r19, r7
 c9c:	03 c0       	rjmp	.+6      	; 0xca4 <vfprintf+0x2de>
 c9e:	ba 2c       	mov	r11, r10
 ca0:	01 c0       	rjmp	.+2      	; 0xca4 <vfprintf+0x2de>
 ca2:	b5 2c       	mov	r11, r5
 ca4:	34 ff       	sbrs	r19, 4
 ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <vfprintf+0x2fc>
 ca8:	fe 01       	movw	r30, r28
 caa:	ea 0d       	add	r30, r10
 cac:	f1 1d       	adc	r31, r1
 cae:	80 81       	ld	r24, Z
 cb0:	80 33       	cpi	r24, 0x30	; 48
 cb2:	11 f4       	brne	.+4      	; 0xcb8 <vfprintf+0x2f2>
 cb4:	39 7e       	andi	r19, 0xE9	; 233
 cb6:	09 c0       	rjmp	.+18     	; 0xcca <vfprintf+0x304>
 cb8:	32 ff       	sbrs	r19, 2
 cba:	06 c0       	rjmp	.+12     	; 0xcc8 <vfprintf+0x302>
 cbc:	b3 94       	inc	r11
 cbe:	b3 94       	inc	r11
 cc0:	04 c0       	rjmp	.+8      	; 0xcca <vfprintf+0x304>
 cc2:	83 2f       	mov	r24, r19
 cc4:	86 78       	andi	r24, 0x86	; 134
 cc6:	09 f0       	breq	.+2      	; 0xcca <vfprintf+0x304>
 cc8:	b3 94       	inc	r11
 cca:	33 fd       	sbrc	r19, 3
 ccc:	13 c0       	rjmp	.+38     	; 0xcf4 <vfprintf+0x32e>
 cce:	30 ff       	sbrs	r19, 0
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x318>
 cd2:	5a 2c       	mov	r5, r10
 cd4:	b3 14       	cp	r11, r3
 cd6:	18 f4       	brcc	.+6      	; 0xcde <vfprintf+0x318>
 cd8:	53 0c       	add	r5, r3
 cda:	5b 18       	sub	r5, r11
 cdc:	b3 2c       	mov	r11, r3
 cde:	b3 14       	cp	r11, r3
 ce0:	68 f4       	brcc	.+26     	; 0xcfc <vfprintf+0x336>
 ce2:	b7 01       	movw	r22, r14
 ce4:	80 e2       	ldi	r24, 0x20	; 32
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	3c 87       	std	Y+12, r19	; 0x0c
 cea:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 cee:	b3 94       	inc	r11
 cf0:	3c 85       	ldd	r19, Y+12	; 0x0c
 cf2:	f5 cf       	rjmp	.-22     	; 0xcde <vfprintf+0x318>
 cf4:	b3 14       	cp	r11, r3
 cf6:	10 f4       	brcc	.+4      	; 0xcfc <vfprintf+0x336>
 cf8:	3b 18       	sub	r3, r11
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <vfprintf+0x338>
 cfc:	31 2c       	mov	r3, r1
 cfe:	34 ff       	sbrs	r19, 4
 d00:	12 c0       	rjmp	.+36     	; 0xd26 <vfprintf+0x360>
 d02:	b7 01       	movw	r22, r14
 d04:	80 e3       	ldi	r24, 0x30	; 48
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	3c 87       	std	Y+12, r19	; 0x0c
 d0a:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 d0e:	3c 85       	ldd	r19, Y+12	; 0x0c
 d10:	32 ff       	sbrs	r19, 2
 d12:	17 c0       	rjmp	.+46     	; 0xd42 <vfprintf+0x37c>
 d14:	31 fd       	sbrc	r19, 1
 d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x358>
 d18:	88 e7       	ldi	r24, 0x78	; 120
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x35c>
 d1e:	88 e5       	ldi	r24, 0x58	; 88
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	b7 01       	movw	r22, r14
 d24:	0c c0       	rjmp	.+24     	; 0xd3e <vfprintf+0x378>
 d26:	83 2f       	mov	r24, r19
 d28:	86 78       	andi	r24, 0x86	; 134
 d2a:	59 f0       	breq	.+22     	; 0xd42 <vfprintf+0x37c>
 d2c:	31 ff       	sbrs	r19, 1
 d2e:	02 c0       	rjmp	.+4      	; 0xd34 <vfprintf+0x36e>
 d30:	8b e2       	ldi	r24, 0x2B	; 43
 d32:	01 c0       	rjmp	.+2      	; 0xd36 <vfprintf+0x370>
 d34:	80 e2       	ldi	r24, 0x20	; 32
 d36:	37 fd       	sbrc	r19, 7
 d38:	8d e2       	ldi	r24, 0x2D	; 45
 d3a:	b7 01       	movw	r22, r14
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 d42:	a5 14       	cp	r10, r5
 d44:	38 f4       	brcc	.+14     	; 0xd54 <vfprintf+0x38e>
 d46:	b7 01       	movw	r22, r14
 d48:	80 e3       	ldi	r24, 0x30	; 48
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 d50:	5a 94       	dec	r5
 d52:	f7 cf       	rjmp	.-18     	; 0xd42 <vfprintf+0x37c>
 d54:	aa 94       	dec	r10
 d56:	f4 01       	movw	r30, r8
 d58:	ea 0d       	add	r30, r10
 d5a:	f1 1d       	adc	r31, r1
 d5c:	80 81       	ld	r24, Z
 d5e:	b7 01       	movw	r22, r14
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 d66:	a1 10       	cpse	r10, r1
 d68:	f5 cf       	rjmp	.-22     	; 0xd54 <vfprintf+0x38e>
 d6a:	33 20       	and	r3, r3
 d6c:	09 f4       	brne	.+2      	; 0xd70 <vfprintf+0x3aa>
 d6e:	51 ce       	rjmp	.-862    	; 0xa12 <vfprintf+0x4c>
 d70:	b7 01       	movw	r22, r14
 d72:	80 e2       	ldi	r24, 0x20	; 32
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	0e 94 f4 06 	call	0xde8	; 0xde8 <fputc>
 d7a:	3a 94       	dec	r3
 d7c:	f6 cf       	rjmp	.-20     	; 0xd6a <vfprintf+0x3a4>
 d7e:	f7 01       	movw	r30, r14
 d80:	86 81       	ldd	r24, Z+6	; 0x06
 d82:	97 81       	ldd	r25, Z+7	; 0x07
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x3c4>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	2c 96       	adiw	r28, 0x0c	; 12
 d8c:	0f b6       	in	r0, 0x3f	; 63
 d8e:	f8 94       	cli
 d90:	de bf       	out	0x3e, r29	; 62
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	cd bf       	out	0x3d, r28	; 61
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	1f 91       	pop	r17
 d9c:	0f 91       	pop	r16
 d9e:	ff 90       	pop	r15
 da0:	ef 90       	pop	r14
 da2:	df 90       	pop	r13
 da4:	cf 90       	pop	r12
 da6:	bf 90       	pop	r11
 da8:	af 90       	pop	r10
 daa:	9f 90       	pop	r9
 dac:	8f 90       	pop	r8
 dae:	7f 90       	pop	r7
 db0:	6f 90       	pop	r6
 db2:	5f 90       	pop	r5
 db4:	4f 90       	pop	r4
 db6:	3f 90       	pop	r3
 db8:	2f 90       	pop	r2
 dba:	08 95       	ret

00000dbc <strnlen_P>:
 dbc:	fc 01       	movw	r30, r24
 dbe:	05 90       	lpm	r0, Z+
 dc0:	61 50       	subi	r22, 0x01	; 1
 dc2:	70 40       	sbci	r23, 0x00	; 0
 dc4:	01 10       	cpse	r0, r1
 dc6:	d8 f7       	brcc	.-10     	; 0xdbe <strnlen_P+0x2>
 dc8:	80 95       	com	r24
 dca:	90 95       	com	r25
 dcc:	8e 0f       	add	r24, r30
 dce:	9f 1f       	adc	r25, r31
 dd0:	08 95       	ret

00000dd2 <strnlen>:
 dd2:	fc 01       	movw	r30, r24
 dd4:	61 50       	subi	r22, 0x01	; 1
 dd6:	70 40       	sbci	r23, 0x00	; 0
 dd8:	01 90       	ld	r0, Z+
 dda:	01 10       	cpse	r0, r1
 ddc:	d8 f7       	brcc	.-10     	; 0xdd4 <strnlen+0x2>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	8e 0f       	add	r24, r30
 de4:	9f 1f       	adc	r25, r31
 de6:	08 95       	ret

00000de8 <fputc>:
 de8:	0f 93       	push	r16
 dea:	1f 93       	push	r17
 dec:	cf 93       	push	r28
 dee:	df 93       	push	r29
 df0:	fb 01       	movw	r30, r22
 df2:	23 81       	ldd	r18, Z+3	; 0x03
 df4:	21 fd       	sbrc	r18, 1
 df6:	03 c0       	rjmp	.+6      	; 0xdfe <fputc+0x16>
 df8:	8f ef       	ldi	r24, 0xFF	; 255
 dfa:	9f ef       	ldi	r25, 0xFF	; 255
 dfc:	28 c0       	rjmp	.+80     	; 0xe4e <fputc+0x66>
 dfe:	22 ff       	sbrs	r18, 2
 e00:	16 c0       	rjmp	.+44     	; 0xe2e <fputc+0x46>
 e02:	46 81       	ldd	r20, Z+6	; 0x06
 e04:	57 81       	ldd	r21, Z+7	; 0x07
 e06:	24 81       	ldd	r18, Z+4	; 0x04
 e08:	35 81       	ldd	r19, Z+5	; 0x05
 e0a:	42 17       	cp	r20, r18
 e0c:	53 07       	cpc	r21, r19
 e0e:	44 f4       	brge	.+16     	; 0xe20 <fputc+0x38>
 e10:	a0 81       	ld	r26, Z
 e12:	b1 81       	ldd	r27, Z+1	; 0x01
 e14:	9d 01       	movw	r18, r26
 e16:	2f 5f       	subi	r18, 0xFF	; 255
 e18:	3f 4f       	sbci	r19, 0xFF	; 255
 e1a:	31 83       	std	Z+1, r19	; 0x01
 e1c:	20 83       	st	Z, r18
 e1e:	8c 93       	st	X, r24
 e20:	26 81       	ldd	r18, Z+6	; 0x06
 e22:	37 81       	ldd	r19, Z+7	; 0x07
 e24:	2f 5f       	subi	r18, 0xFF	; 255
 e26:	3f 4f       	sbci	r19, 0xFF	; 255
 e28:	37 83       	std	Z+7, r19	; 0x07
 e2a:	26 83       	std	Z+6, r18	; 0x06
 e2c:	10 c0       	rjmp	.+32     	; 0xe4e <fputc+0x66>
 e2e:	eb 01       	movw	r28, r22
 e30:	09 2f       	mov	r16, r25
 e32:	18 2f       	mov	r17, r24
 e34:	00 84       	ldd	r0, Z+8	; 0x08
 e36:	f1 85       	ldd	r31, Z+9	; 0x09
 e38:	e0 2d       	mov	r30, r0
 e3a:	09 95       	icall
 e3c:	89 2b       	or	r24, r25
 e3e:	e1 f6       	brne	.-72     	; 0xdf8 <fputc+0x10>
 e40:	8e 81       	ldd	r24, Y+6	; 0x06
 e42:	9f 81       	ldd	r25, Y+7	; 0x07
 e44:	01 96       	adiw	r24, 0x01	; 1
 e46:	9f 83       	std	Y+7, r25	; 0x07
 e48:	8e 83       	std	Y+6, r24	; 0x06
 e4a:	81 2f       	mov	r24, r17
 e4c:	90 2f       	mov	r25, r16
 e4e:	df 91       	pop	r29
 e50:	cf 91       	pop	r28
 e52:	1f 91       	pop	r17
 e54:	0f 91       	pop	r16
 e56:	08 95       	ret

00000e58 <__ultoa_invert>:
 e58:	fa 01       	movw	r30, r20
 e5a:	aa 27       	eor	r26, r26
 e5c:	28 30       	cpi	r18, 0x08	; 8
 e5e:	51 f1       	breq	.+84     	; 0xeb4 <__ultoa_invert+0x5c>
 e60:	20 31       	cpi	r18, 0x10	; 16
 e62:	81 f1       	breq	.+96     	; 0xec4 <__ultoa_invert+0x6c>
 e64:	e8 94       	clt
 e66:	6f 93       	push	r22
 e68:	6e 7f       	andi	r22, 0xFE	; 254
 e6a:	6e 5f       	subi	r22, 0xFE	; 254
 e6c:	7f 4f       	sbci	r23, 0xFF	; 255
 e6e:	8f 4f       	sbci	r24, 0xFF	; 255
 e70:	9f 4f       	sbci	r25, 0xFF	; 255
 e72:	af 4f       	sbci	r26, 0xFF	; 255
 e74:	b1 e0       	ldi	r27, 0x01	; 1
 e76:	3e d0       	rcall	.+124    	; 0xef4 <__ultoa_invert+0x9c>
 e78:	b4 e0       	ldi	r27, 0x04	; 4
 e7a:	3c d0       	rcall	.+120    	; 0xef4 <__ultoa_invert+0x9c>
 e7c:	67 0f       	add	r22, r23
 e7e:	78 1f       	adc	r23, r24
 e80:	89 1f       	adc	r24, r25
 e82:	9a 1f       	adc	r25, r26
 e84:	a1 1d       	adc	r26, r1
 e86:	68 0f       	add	r22, r24
 e88:	79 1f       	adc	r23, r25
 e8a:	8a 1f       	adc	r24, r26
 e8c:	91 1d       	adc	r25, r1
 e8e:	a1 1d       	adc	r26, r1
 e90:	6a 0f       	add	r22, r26
 e92:	71 1d       	adc	r23, r1
 e94:	81 1d       	adc	r24, r1
 e96:	91 1d       	adc	r25, r1
 e98:	a1 1d       	adc	r26, r1
 e9a:	20 d0       	rcall	.+64     	; 0xedc <__ultoa_invert+0x84>
 e9c:	09 f4       	brne	.+2      	; 0xea0 <__ultoa_invert+0x48>
 e9e:	68 94       	set
 ea0:	3f 91       	pop	r19
 ea2:	2a e0       	ldi	r18, 0x0A	; 10
 ea4:	26 9f       	mul	r18, r22
 ea6:	11 24       	eor	r1, r1
 ea8:	30 19       	sub	r19, r0
 eaa:	30 5d       	subi	r19, 0xD0	; 208
 eac:	31 93       	st	Z+, r19
 eae:	de f6       	brtc	.-74     	; 0xe66 <__ultoa_invert+0xe>
 eb0:	cf 01       	movw	r24, r30
 eb2:	08 95       	ret
 eb4:	46 2f       	mov	r20, r22
 eb6:	47 70       	andi	r20, 0x07	; 7
 eb8:	40 5d       	subi	r20, 0xD0	; 208
 eba:	41 93       	st	Z+, r20
 ebc:	b3 e0       	ldi	r27, 0x03	; 3
 ebe:	0f d0       	rcall	.+30     	; 0xede <__ultoa_invert+0x86>
 ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__ultoa_invert+0x5c>
 ec2:	f6 cf       	rjmp	.-20     	; 0xeb0 <__ultoa_invert+0x58>
 ec4:	46 2f       	mov	r20, r22
 ec6:	4f 70       	andi	r20, 0x0F	; 15
 ec8:	40 5d       	subi	r20, 0xD0	; 208
 eca:	4a 33       	cpi	r20, 0x3A	; 58
 ecc:	18 f0       	brcs	.+6      	; 0xed4 <__ultoa_invert+0x7c>
 ece:	49 5d       	subi	r20, 0xD9	; 217
 ed0:	31 fd       	sbrc	r19, 1
 ed2:	40 52       	subi	r20, 0x20	; 32
 ed4:	41 93       	st	Z+, r20
 ed6:	02 d0       	rcall	.+4      	; 0xedc <__ultoa_invert+0x84>
 ed8:	a9 f7       	brne	.-22     	; 0xec4 <__ultoa_invert+0x6c>
 eda:	ea cf       	rjmp	.-44     	; 0xeb0 <__ultoa_invert+0x58>
 edc:	b4 e0       	ldi	r27, 0x04	; 4
 ede:	a6 95       	lsr	r26
 ee0:	97 95       	ror	r25
 ee2:	87 95       	ror	r24
 ee4:	77 95       	ror	r23
 ee6:	67 95       	ror	r22
 ee8:	ba 95       	dec	r27
 eea:	c9 f7       	brne	.-14     	; 0xede <__ultoa_invert+0x86>
 eec:	00 97       	sbiw	r24, 0x00	; 0
 eee:	61 05       	cpc	r22, r1
 ef0:	71 05       	cpc	r23, r1
 ef2:	08 95       	ret
 ef4:	9b 01       	movw	r18, r22
 ef6:	ac 01       	movw	r20, r24
 ef8:	0a 2e       	mov	r0, r26
 efa:	06 94       	lsr	r0
 efc:	57 95       	ror	r21
 efe:	47 95       	ror	r20
 f00:	37 95       	ror	r19
 f02:	27 95       	ror	r18
 f04:	ba 95       	dec	r27
 f06:	c9 f7       	brne	.-14     	; 0xefa <__ultoa_invert+0xa2>
 f08:	62 0f       	add	r22, r18
 f0a:	73 1f       	adc	r23, r19
 f0c:	84 1f       	adc	r24, r20
 f0e:	95 1f       	adc	r25, r21
 f10:	a0 1d       	adc	r26, r0
 f12:	08 95       	ret

00000f14 <_exit>:
 f14:	f8 94       	cli

00000f16 <__stop_program>:
 f16:	ff cf       	rjmp	.-2      	; 0xf16 <__stop_program>
