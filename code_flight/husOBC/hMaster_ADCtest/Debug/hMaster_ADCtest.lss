
hMaster_ADCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800178  00800178  00000d6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002136  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4a  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcb  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00004cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000385  00000000  00000000  000056b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005a3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 e7       	ldi	r26, 0x78	; 120
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  c6:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
  ea:	8c b1       	in	r24, 0x0c	; 12
  ec:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
  f0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
  f4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
  f8:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
  fc:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 10c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 110:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 114:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  buffer &= 0xFFFFFF00;
 118:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 11c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 120:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 124:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 128:	88 27       	eor	r24, r24
 12a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 12e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 132:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 136:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  buffer |= (uint32_t) last_byte;
 13a:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <last_byte>
 13e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 142:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 146:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 14a:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 14e:	82 2b       	or	r24, r18
 150:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 154:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 158:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 15c:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 164:	8c 30       	cpi	r24, 0x0C	; 12
 166:	a0 f4       	brcc	.+40     	; 0x190 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 168:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
 16c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e2 58       	subi	r30, 0x82	; 130
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
 182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 186:	8c 30       	cpi	r24, 0x0C	; 12
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xc2>
      pos = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 190:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 194:	8c 30       	cpi	r24, 0x0C	; 12
 196:	a0 f4       	brcc	.+40     	; 0x1c0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 198:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
 19c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e6 57       	subi	r30, 0x76	; 118
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
    
    vel++;
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
 1b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0xf2>
      vel = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	c0 f4       	brcc	.+48     	; 0x1f8 <__vector_18+0x12a>
  {
    if(dop >= 2)
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
 1d4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e2 50       	subi	r30, 0x02	; 2
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 83       	st	Z, r24
      
    dop++;
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x12a>
      dop = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	c0 f4       	brcc	.+48     	; 0x230 <__vector_18+0x162>
  {
    if(geo >= 4)
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	40 f0       	brcs	.+16     	; 0x218 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 208:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
 20c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 56       	subi	r30, 0x6E	; 110
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
    
    geo++;
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
 222:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_18+0x162>
      geo = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	b8 f4       	brcc	.+46     	; 0x266 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 238:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
 23c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 55       	subi	r30, 0x5E	; 94
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
    
    time++;
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_18+0x198>
    {
      time = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 266:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 26a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 26e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 272:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 276:	8c 3a       	cpi	r24, 0xAC	; 172
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	af 43       	sbci	r26, 0x3F	; 63
 27c:	bf 43       	sbci	r27, 0x3F	; 63
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x1bc>
  {
    message_end = 0;
 280:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
    pos = 0;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
 288:	3f c0       	rjmp	.+126    	; 0x308 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 28a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 28e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 292:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 296:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	95 40       	sbci	r25, 0x05	; 5
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	19 f4       	brne	.+6      	; 0x2aa <__vector_18+0x1dc>
    vel = 0;
 2a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2aa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ae:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2b2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2b6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2ba:	8c 3a       	cpi	r24, 0xAC	; 172
 2bc:	9b 40       	sbci	r25, 0x0B	; 11
 2be:	af 43       	sbci	r26, 0x3F	; 63
 2c0:	bf 43       	sbci	r27, 0x3F	; 63
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__vector_18+0x1fc>
    dop = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ca:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ce:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2d2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2d6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2da:	8c 3a       	cpi	r24, 0xAC	; 172
 2dc:	9e 40       	sbci	r25, 0x0E	; 14
 2de:	af 43       	sbci	r26, 0x3F	; 63
 2e0:	bf 43       	sbci	r27, 0x3F	; 63
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_18+0x21c>
    geo = 0;
 2e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 2ea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2f2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2f6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2fa:	8c 3a       	cpi	r24, 0xAC	; 172
 2fc:	9f 40       	sbci	r25, 0x0F	; 15
 2fe:	af 43       	sbci	r26, 0x3F	; 63
 300:	bf 43       	sbci	r27, 0x3F	; 63
 302:	11 f4       	brne	.+4      	; 0x308 <__vector_18+0x23a>
    time = 0;
 304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 310:	84 3f       	cpi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	f0 f4       	brcc	.+60     	; 0x352 <__vector_18+0x284>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31e:	89 2b       	or	r24, r25
 320:	c1 f0       	breq	.+48     	; 0x352 <__vector_18+0x284>
 322:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
 326:	88 23       	and	r24, r24
 328:	a1 f0       	breq	.+40     	; 0x352 <__vector_18+0x284>
  {
    GPS_done = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 330:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
 33e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
    buffer = 0;
 342:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <buffer>
 346:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <buffer+0x1>
 34a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <buffer+0x2>
 34e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <buffer+0x3>
  }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	c0 5a       	subi	r28, 0xA0	; 160
 378:	d1 09       	sbc	r29, r1
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	
	DDRA = 0xF0;
 384:	80 ef       	ldi	r24, 0xF0	; 240
 386:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 388:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	39 e6       	ldi	r19, 0x69	; 105
 38e:	98 e1       	ldi	r25, 0x18	; 24
 390:	21 50       	subi	r18, 0x01	; 1
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x22>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x2c>
 39a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 39c:	1b ba       	out	0x1b, r1	; 27
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	39 e6       	ldi	r19, 0x69	; 105
 3a2:	98 e1       	ldi	r25, 0x18	; 24
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	30 40       	sbci	r19, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x36>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x40>
 3ae:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 3b0:	8b bb       	out	0x1b, r24	; 27
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	39 e6       	ldi	r19, 0x69	; 105
 3b6:	88 e1       	ldi	r24, 0x18	; 24
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	30 40       	sbci	r19, 0x00	; 0
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x4a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x54>
 3c2:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3c4:	1b ba       	out	0x1b, r1	; 27
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	29 e6       	ldi	r18, 0x69	; 105
 3ca:	38 e1       	ldi	r19, 0x18	; 24
 3cc:	91 50       	subi	r25, 0x01	; 1
 3ce:	20 40       	sbci	r18, 0x00	; 0
 3d0:	30 40       	sbci	r19, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x5e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x68>
 3d6:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3d8:	0e 94 35 03 	call	0x66a	; 0x66a <init_UART0>
  
	transmit_UART0('\r');
 3dc:	8d e0       	ldi	r24, 0x0D	; 13
 3de:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('\r');
 3e2:	8d e0       	ldi	r24, 0x0D	; 13
 3e4:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('H');
 3e8:	88 e4       	ldi	r24, 0x48	; 72
 3ea:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('e');
 3ee:	85 e6       	ldi	r24, 0x65	; 101
 3f0:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('l');
 3f4:	8c e6       	ldi	r24, 0x6C	; 108
 3f6:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('l');
 3fa:	8c e6       	ldi	r24, 0x6C	; 108
 3fc:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('o');
 400:	8f e6       	ldi	r24, 0x6F	; 111
 402:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 406:	88 e2       	ldi	r24, 0x28	; 40
 408:	e0 e5       	ldi	r30, 0x50	; 80
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	de 01       	movw	r26, r28
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	01 90       	ld	r0, Z+
 412:	0d 92       	st	X+, r0
 414:	8a 95       	dec	r24
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	transmit_string_UART0(array);
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 4a 03 	call	0x694	; 0x694 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 420:	86 e2       	ldi	r24, 0x26	; 38
 422:	e7 e0       	ldi	r30, 0x07	; 7
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	de 01       	movw	r26, r28
 428:	99 96       	adiw	r26, 0x29	; 41
 42a:	01 90       	ld	r0, Z+
 42c:	0d 92       	st	X+, r0
 42e:	8a 95       	dec	r24
 430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	sprintf(array2,"\rCurrent Sunsensor state is =\t");
 432:	8f e1       	ldi	r24, 0x1F	; 31
 434:	ed e2       	ldi	r30, 0x2D	; 45
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	de 01       	movw	r26, r28
 43a:	af 5a       	subi	r26, 0xAF	; 175
 43c:	bf 4f       	sbci	r27, 0xFF	; 255
 43e:	01 90       	ld	r0, Z+
 440:	0d 92       	st	X+, r0
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
/************************************************************/
	char buffer[40];
	double aa;
	int i;
	unsigned int bb;
	init_SPI();
 446:	0e 94 b6 02 	call	0x56c	; 0x56c <init_SPI>
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 44a:	0f 2e       	mov	r0, r31
 44c:	f0 ea       	ldi	r31, 0xA0	; 160
 44e:	8f 2e       	mov	r8, r31
 450:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x50;
 452:	0f 2e       	mov	r0, r31
 454:	f0 e5       	ldi	r31, 0x50	; 80
 456:	9f 2e       	mov	r9, r31
 458:	f0 2d       	mov	r31, r0
	
	///* * Reading Sunsensor
    read_SS();
	//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
	
	for(i=0;i<6;i++)
 45a:	61 2c       	mov	r6, r1
 45c:	71 2c       	mov	r7, r1
	{ 
		
		aa = Current_state.ss.reading[i];
		bb = aa;                                    //bb = (aa*4*100)/4096;
		sprintf(buffer, "%u\t", bb);
 45e:	0f 2e       	mov	r0, r31
 460:	fc e4       	ldi	r31, 0x4C	; 76
 462:	cf 2e       	mov	r12, r31
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	df 2e       	mov	r13, r31
 468:	f0 2d       	mov	r31, r0
 46a:	7e 01       	movw	r14, r28
 46c:	89 e7       	ldi	r24, 0x79	; 121
 46e:	e8 0e       	add	r14, r24
 470:	f1 1c       	adc	r15, r1
 472:	ae 2c       	mov	r10, r14
 474:	bf 2c       	mov	r11, r15
	unsigned int bb;
	init_SPI();
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 476:	8b ba       	out	0x1b, r8	; 27
 478:	9f ef       	ldi	r25, 0xFF	; 255
 47a:	24 e3       	ldi	r18, 0x34	; 52
 47c:	3c e0       	ldi	r19, 0x0C	; 12
 47e:	91 50       	subi	r25, 0x01	; 1
 480:	20 40       	sbci	r18, 0x00	; 0
 482:	30 40       	sbci	r19, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 48a:	9b ba       	out	0x1b, r9	; 27
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	94 e3       	ldi	r25, 0x34	; 52
 490:	2c e0       	ldi	r18, 0x0C	; 12
 492:	81 50       	subi	r24, 0x01	; 1
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	20 40       	sbci	r18, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 49e:	8d e0       	ldi	r24, 0x0D	; 13
 4a0:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('\r');
 4a4:	8d e0       	ldi	r24, 0x0D	; 13
 4a6:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('H');
 4aa:	88 e4       	ldi	r24, 0x48	; 72
 4ac:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	transmit_UART0('i');
 4b0:	89 e6       	ldi	r24, 0x69	; 105
 4b2:	0e 94 46 03 	call	0x68c	; 0x68c <transmit_UART0>
	
	transmit_string_UART0(array1);
 4b6:	ce 01       	movw	r24, r28
 4b8:	89 96       	adiw	r24, 0x29	; 41
 4ba:	0e 94 4a 03 	call	0x694	; 0x694 <transmit_string_UART0>
	transmit_string_UART0(array2);
 4be:	ce 01       	movw	r24, r28
 4c0:	8f 5a       	subi	r24, 0xAF	; 175
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	0e 94 4a 03 	call	0x694	; 0x694 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0xA0;
 4c8:	8b ba       	out	0x1b, r8	; 27
 4ca:	3f ef       	ldi	r19, 0xFF	; 255
 4cc:	84 e3       	ldi	r24, 0x34	; 52
 4ce:	9c e0       	ldi	r25, 0x0C	; 12
 4d0:	31 50       	subi	r19, 0x01	; 1
 4d2:	80 40       	sbci	r24, 0x00	; 0
 4d4:	90 40       	sbci	r25, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4da:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 4dc:	9b ba       	out	0x1b, r9	; 27
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	34 e3       	ldi	r19, 0x34	; 52
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	30 40       	sbci	r19, 0x00	; 0
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
	_delay_ms(500);
	
	///* * Reading Sunsensor
    read_SS();
 4f0:	0e 94 a3 02 	call	0x546	; 0x546 <read_SS>
	//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
	
	for(i=0;i<6;i++)
 4f4:	06 2d       	mov	r16, r6
 4f6:	17 2d       	mov	r17, r7
	{ 
		
		aa = Current_state.ss.reading[i];
 4f8:	f8 01       	movw	r30, r16
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	e5 55       	subi	r30, 0x55	; 85
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	85 a5       	ldd	r24, Z+45	; 0x2d
 504:	96 a5       	ldd	r25, Z+46	; 0x2e
		bb = aa;                                    //bb = (aa*4*100)/4096;
		sprintf(buffer, "%u\t", bb);
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	df 92       	push	r13
 50c:	cf 92       	push	r12
 50e:	ff 92       	push	r15
 510:	ef 92       	push	r14
 512:	0e 94 56 03 	call	0x6ac	; 0x6ac <sprintf>
		send_preflight( buffer, strlen(buffer));
 516:	f7 01       	movw	r30, r14
 518:	01 90       	ld	r0, Z+
 51a:	00 20       	and	r0, r0
 51c:	e9 f7       	brne	.-6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	bf 01       	movw	r22, r30
 522:	6e 19       	sub	r22, r14
 524:	7f 09       	sbc	r23, r15
 526:	8a 2d       	mov	r24, r10
 528:	9b 2d       	mov	r25, r11
 52a:	0e 94 a8 02 	call	0x550	; 0x550 <send_preflight>
	
	///* * Reading Sunsensor
    read_SS();
	//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
	
	for(i=0;i<6;i++)
 52e:	0f 5f       	subi	r16, 0xFF	; 255
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	06 30       	cpi	r16, 0x06	; 6
 540:	11 05       	cpc	r17, r1
 542:	d1 f6       	brne	.-76     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 544:	98 cf       	rjmp	.-208    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>

00000546 <read_SS>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM();
 546:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <configure_SS>
 54a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <poll_SS>
 54e:	08 95       	ret

00000550 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 550:	61 15       	cp	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	51 f0       	breq	.+20     	; 0x56a <send_preflight+0x1a>
 556:	fc 01       	movw	r30, r24
 558:	68 0f       	add	r22, r24
 55a:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 55c:	5d 9b       	sbis	0x0b, 5	; 11
 55e:	fe cf       	rjmp	.-4      	; 0x55c <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
 560:	91 91       	ld	r25, Z+
 562:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 564:	e6 17       	cp	r30, r22
 566:	f7 07       	cpc	r31, r23
 568:	c9 f7       	brne	.-14     	; 0x55c <send_preflight+0xc>
 56a:	08 95       	ret

0000056c <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 56c:	87 b3       	in	r24, 0x17	; 23
 56e:	80 7f       	andi	r24, 0xF0	; 240
 570:	87 bb       	out	0x17, r24	; 23
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	87 bb       	out	0x17, r24	; 23
 576:	87 b3       	in	r24, 0x17	; 23
 578:	81 63       	ori	r24, 0x31	; 49
 57a:	87 bb       	out	0x17, r24	; 23
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	81 63       	ori	r24, 0x31	; 49
 580:	88 bb       	out	0x18, r24	; 24
 582:	83 e5       	ldi	r24, 0x53	; 83
 584:	8d b9       	out	0x0d, r24	; 13
 586:	08 95       	ret

00000588 <init_SPI_trans>:
 588:	98 b3       	in	r25, 0x18	; 24
 58a:	91 63       	ori	r25, 0x31	; 49
 58c:	98 bb       	out	0x18, r25	; 24
 58e:	98 b3       	in	r25, 0x18	; 24
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <init_SPI_trans+0x12>
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <init_SPI_trans+0xe>
 59e:	20 95       	com	r18
 5a0:	29 23       	and	r18, r25
 5a2:	28 bb       	out	0x18, r18	; 24
 5a4:	08 95       	ret

000005a6 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 5a6:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 5a8:	77 9b       	sbis	0x0e, 7	; 14
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 5ac:	8f b1       	in	r24, 0x0f	; 15
}
 5ae:	08 95       	ret

000005b0 <end_SPI>:

void end_SPI(void)
{  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |=_BV(SLAVE)|_BV(CC1020)|_BV(ADC_S);
 5b0:	88 b3       	in	r24, 0x18	; 24
 5b2:	81 63       	ori	r24, 0x31	; 49
 5b4:	88 bb       	out	0x18, r24	; 24
 5b6:	08 95       	ret

000005b8 <configure_SS>:
#include "peripherals.h"

void configure_SS(void)
{
	///Set PD and Range pins as output
	sbi(DDRB, PB6);
 5b8:	be 9a       	sbi	0x17, 6	; 23
	sbi(DDRB, PB7);
 5ba:	bf 9a       	sbi	0x17, 7	; 23
  
	///Set PD high: power up the ADC IC
	sbi(PORTB, PB6);
 5bc:	c6 9a       	sbi	0x18, 6	; 24
	///Set Range high: Selecting range -> Range2
	sbi(PORTB, PB7);
 5be:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c0:	8a e1       	ldi	r24, 0x1A	; 26
 5c2:	8a 95       	dec	r24
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <configure_SS+0xa>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <configure_SS+0x10>
  
	_delay_us(10);
	///Configure GPIO pins - GPIO3 as PD and GPIO2 as Range input
	init_SPI_trans(ADC_S);
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	0e 94 c4 02 	call	0x588	; 0x588 <init_SPI_trans>
	SPI_transfer(0b01000001);// ankri bit 1
 5ce:	81 e4       	ldi	r24, 0x41	; 65
 5d0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transfer>
	SPI_transfer(0b00000000);
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transfer>
	end_SPI();
 5da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <end_SPI>
 5de:	8a e1       	ldi	r24, 0x1A	; 26
 5e0:	8a 95       	dec	r24
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <configure_SS+0x28>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <configure_SS+0x2e>
 5e6:	08 95       	ret

000005e8 <poll_SS>:
	_delay_us(10);
}

void poll_SS(void)
{
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
    SPI_transfer(0b00011000 | (channel >> 1));
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    end_SPI();
	_delay_us(1);
    */
    init_SPI_trans(ADC_S);
 5f4:	85 e0       	ldi	r24, 0x05	; 5
 5f6:	0e 94 c4 02 	call	0x588	; 0x588 <init_SPI_trans>
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
 5fa:	80 2f       	mov	r24, r16
 5fc:	86 95       	lsr	r24
 5fe:	88 61       	ori	r24, 0x18	; 24
 600:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transfer>
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	e8 01       	movw	r28, r16
 608:	cc 0f       	add	r28, r28
 60a:	dd 1f       	adc	r29, r29
 60c:	c5 55       	subi	r28, 0x55	; 85
 60e:	de 4f       	sbci	r29, 0xFE	; 254
 610:	9e a7       	std	Y+46, r25	; 0x2e
 612:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
 614:	8d a5       	ldd	r24, Y+45	; 0x2d
 616:	9e a5       	ldd	r25, Y+46	; 0x2e
 618:	98 2f       	mov	r25, r24
 61a:	88 27       	eor	r24, r24
 61c:	9e a7       	std	Y+46, r25	; 0x2e
 61e:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] &= 0x0F00;
 620:	8d a5       	ldd	r24, Y+45	; 0x2d
 622:	9e a5       	ldd	r25, Y+46	; 0x2e
 624:	88 27       	eor	r24, r24
 626:	9f 70       	andi	r25, 0x0F	; 15
 628:	9e a7       	std	Y+46, r25	; 0x2e
 62a:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x50);//0x40
 62c:	c8 01       	movw	r24, r16
 62e:	96 95       	lsr	r25
 630:	98 2f       	mov	r25, r24
 632:	88 27       	eor	r24, r24
 634:	97 95       	ror	r25
 636:	87 95       	ror	r24
 638:	80 65       	ori	r24, 0x50	; 80
 63a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transfer>
 63e:	2d a5       	ldd	r18, Y+45	; 0x2d
 640:	3e a5       	ldd	r19, Y+46	; 0x2e
 642:	28 2b       	or	r18, r24
 644:	3e a7       	std	Y+46, r19	; 0x2e
 646:	2d a7       	std	Y+45, r18	; 0x2d
    end_SPI();
 648:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <end_SPI>
 64c:	8a e1       	ldi	r24, 0x1A	; 26
 64e:	8a 95       	dec	r24
 650:	f1 f7       	brne	.-4      	; 0x64e <poll_SS+0x66>
 652:	00 c0       	rjmp	.+0      	; 0x654 <poll_SS+0x6c>
 654:	0f 5f       	subi	r16, 0xFF	; 255
 656:	1f 4f       	sbci	r17, 0xFF	; 255
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
 658:	06 30       	cpi	r16, 0x06	; 6
 65a:	11 05       	cpc	r17, r1
 65c:	59 f6       	brne	.-106    	; 0x5f4 <poll_SS+0xc>
    
   channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
 65e:	c6 98       	cbi	0x18, 6	; 24
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
 66a:	1b b8       	out	0x0b, r1	; 11
 66c:	1a b8       	out	0x0a, r1	; 10
 66e:	e5 e9       	ldi	r30, 0x95	; 149
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	10 82       	st	Z, r1
 674:	59 9a       	sbi	0x0b, 1	; 11
 676:	8a b1       	in	r24, 0x0a	; 10
 678:	88 61       	ori	r24, 0x18	; 24
 67a:	8a b9       	out	0x0a, r24	; 10
 67c:	80 81       	ld	r24, Z
 67e:	8e 60       	ori	r24, 0x0E	; 14
 680:	80 83       	st	Z, r24
 682:	87 e6       	ldi	r24, 0x67	; 103
 684:	89 b9       	out	0x09, r24	; 9
 686:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 68a:	08 95       	ret

0000068c <transmit_UART0>:
 68c:	5d 9b       	sbis	0x0b, 5	; 11
 68e:	fe cf       	rjmp	.-4      	; 0x68c <transmit_UART0>
 690:	8c b9       	out	0x0c, r24	; 12
 692:	08 95       	ret

00000694 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
 694:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 696:	90 81       	ld	r25, Z
 698:	99 23       	and	r25, r25
 69a:	39 f0       	breq	.+14     	; 0x6aa <transmit_string_UART0+0x16>
 69c:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 69e:	5d 9b       	sbis	0x0b, 5	; 11
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 6a2:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 6a4:	91 91       	ld	r25, Z+
 6a6:	91 11       	cpse	r25, r1
 6a8:	fa cf       	rjmp	.-12     	; 0x69e <transmit_string_UART0+0xa>
 6aa:	08 95       	ret

000006ac <sprintf>:
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	2e 97       	sbiw	r28, 0x0e	; 14
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	0d 89       	ldd	r16, Y+21	; 0x15
 6c6:	1e 89       	ldd	r17, Y+22	; 0x16
 6c8:	86 e0       	ldi	r24, 0x06	; 6
 6ca:	8c 83       	std	Y+4, r24	; 0x04
 6cc:	1a 83       	std	Y+2, r17	; 0x02
 6ce:	09 83       	std	Y+1, r16	; 0x01
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	9f e7       	ldi	r25, 0x7F	; 127
 6d4:	9e 83       	std	Y+6, r25	; 0x06
 6d6:	8d 83       	std	Y+5, r24	; 0x05
 6d8:	ae 01       	movw	r20, r28
 6da:	47 5e       	subi	r20, 0xE7	; 231
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255
 6de:	6f 89       	ldd	r22, Y+23	; 0x17
 6e0:	78 8d       	ldd	r23, Y+24	; 0x18
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 86 03 	call	0x70c	; 0x70c <vfprintf>
 6ea:	2f 81       	ldd	r18, Y+7	; 0x07
 6ec:	38 85       	ldd	r19, Y+8	; 0x08
 6ee:	f8 01       	movw	r30, r16
 6f0:	e2 0f       	add	r30, r18
 6f2:	f3 1f       	adc	r31, r19
 6f4:	10 82       	st	Z, r1
 6f6:	2e 96       	adiw	r28, 0x0e	; 14
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	08 95       	ret

0000070c <vfprintf>:
 70c:	2f 92       	push	r2
 70e:	3f 92       	push	r3
 710:	4f 92       	push	r4
 712:	5f 92       	push	r5
 714:	6f 92       	push	r6
 716:	7f 92       	push	r7
 718:	8f 92       	push	r8
 71a:	9f 92       	push	r9
 71c:	af 92       	push	r10
 71e:	bf 92       	push	r11
 720:	cf 92       	push	r12
 722:	df 92       	push	r13
 724:	ef 92       	push	r14
 726:	ff 92       	push	r15
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	2c 97       	sbiw	r28, 0x0c	; 12
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	7c 01       	movw	r14, r24
 742:	6b 01       	movw	r12, r22
 744:	8a 01       	movw	r16, r20
 746:	fc 01       	movw	r30, r24
 748:	17 82       	std	Z+7, r1	; 0x07
 74a:	16 82       	std	Z+6, r1	; 0x06
 74c:	83 81       	ldd	r24, Z+3	; 0x03
 74e:	81 ff       	sbrs	r24, 1
 750:	bd c1       	rjmp	.+890    	; 0xacc <vfprintf+0x3c0>
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	4c 01       	movw	r8, r24
 758:	f7 01       	movw	r30, r14
 75a:	93 81       	ldd	r25, Z+3	; 0x03
 75c:	f6 01       	movw	r30, r12
 75e:	93 fd       	sbrc	r25, 3
 760:	85 91       	lpm	r24, Z+
 762:	93 ff       	sbrs	r25, 3
 764:	81 91       	ld	r24, Z+
 766:	6f 01       	movw	r12, r30
 768:	88 23       	and	r24, r24
 76a:	09 f4       	brne	.+2      	; 0x76e <vfprintf+0x62>
 76c:	ab c1       	rjmp	.+854    	; 0xac4 <vfprintf+0x3b8>
 76e:	85 32       	cpi	r24, 0x25	; 37
 770:	39 f4       	brne	.+14     	; 0x780 <vfprintf+0x74>
 772:	93 fd       	sbrc	r25, 3
 774:	85 91       	lpm	r24, Z+
 776:	93 ff       	sbrs	r25, 3
 778:	81 91       	ld	r24, Z+
 77a:	6f 01       	movw	r12, r30
 77c:	85 32       	cpi	r24, 0x25	; 37
 77e:	29 f4       	brne	.+10     	; 0x78a <vfprintf+0x7e>
 780:	b7 01       	movw	r22, r14
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 788:	e7 cf       	rjmp	.-50     	; 0x758 <vfprintf+0x4c>
 78a:	51 2c       	mov	r5, r1
 78c:	31 2c       	mov	r3, r1
 78e:	20 e0       	ldi	r18, 0x00	; 0
 790:	20 32       	cpi	r18, 0x20	; 32
 792:	a0 f4       	brcc	.+40     	; 0x7bc <vfprintf+0xb0>
 794:	8b 32       	cpi	r24, 0x2B	; 43
 796:	69 f0       	breq	.+26     	; 0x7b2 <vfprintf+0xa6>
 798:	30 f4       	brcc	.+12     	; 0x7a6 <vfprintf+0x9a>
 79a:	80 32       	cpi	r24, 0x20	; 32
 79c:	59 f0       	breq	.+22     	; 0x7b4 <vfprintf+0xa8>
 79e:	83 32       	cpi	r24, 0x23	; 35
 7a0:	69 f4       	brne	.+26     	; 0x7bc <vfprintf+0xb0>
 7a2:	20 61       	ori	r18, 0x10	; 16
 7a4:	2c c0       	rjmp	.+88     	; 0x7fe <vfprintf+0xf2>
 7a6:	8d 32       	cpi	r24, 0x2D	; 45
 7a8:	39 f0       	breq	.+14     	; 0x7b8 <vfprintf+0xac>
 7aa:	80 33       	cpi	r24, 0x30	; 48
 7ac:	39 f4       	brne	.+14     	; 0x7bc <vfprintf+0xb0>
 7ae:	21 60       	ori	r18, 0x01	; 1
 7b0:	26 c0       	rjmp	.+76     	; 0x7fe <vfprintf+0xf2>
 7b2:	22 60       	ori	r18, 0x02	; 2
 7b4:	24 60       	ori	r18, 0x04	; 4
 7b6:	23 c0       	rjmp	.+70     	; 0x7fe <vfprintf+0xf2>
 7b8:	28 60       	ori	r18, 0x08	; 8
 7ba:	21 c0       	rjmp	.+66     	; 0x7fe <vfprintf+0xf2>
 7bc:	27 fd       	sbrc	r18, 7
 7be:	27 c0       	rjmp	.+78     	; 0x80e <vfprintf+0x102>
 7c0:	30 ed       	ldi	r19, 0xD0	; 208
 7c2:	38 0f       	add	r19, r24
 7c4:	3a 30       	cpi	r19, 0x0A	; 10
 7c6:	78 f4       	brcc	.+30     	; 0x7e6 <vfprintf+0xda>
 7c8:	26 ff       	sbrs	r18, 6
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0xcc>
 7cc:	fa e0       	ldi	r31, 0x0A	; 10
 7ce:	5f 9e       	mul	r5, r31
 7d0:	30 0d       	add	r19, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	53 2e       	mov	r5, r19
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <vfprintf+0xf2>
 7d8:	8a e0       	ldi	r24, 0x0A	; 10
 7da:	38 9e       	mul	r3, r24
 7dc:	30 0d       	add	r19, r0
 7de:	11 24       	eor	r1, r1
 7e0:	33 2e       	mov	r3, r19
 7e2:	20 62       	ori	r18, 0x20	; 32
 7e4:	0c c0       	rjmp	.+24     	; 0x7fe <vfprintf+0xf2>
 7e6:	8e 32       	cpi	r24, 0x2E	; 46
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <vfprintf+0xe6>
 7ea:	26 fd       	sbrc	r18, 6
 7ec:	6b c1       	rjmp	.+726    	; 0xac4 <vfprintf+0x3b8>
 7ee:	20 64       	ori	r18, 0x40	; 64
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0xf2>
 7f2:	8c 36       	cpi	r24, 0x6C	; 108
 7f4:	11 f4       	brne	.+4      	; 0x7fa <vfprintf+0xee>
 7f6:	20 68       	ori	r18, 0x80	; 128
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0xf2>
 7fa:	88 36       	cpi	r24, 0x68	; 104
 7fc:	41 f4       	brne	.+16     	; 0x80e <vfprintf+0x102>
 7fe:	f6 01       	movw	r30, r12
 800:	93 fd       	sbrc	r25, 3
 802:	85 91       	lpm	r24, Z+
 804:	93 ff       	sbrs	r25, 3
 806:	81 91       	ld	r24, Z+
 808:	6f 01       	movw	r12, r30
 80a:	81 11       	cpse	r24, r1
 80c:	c1 cf       	rjmp	.-126    	; 0x790 <vfprintf+0x84>
 80e:	98 2f       	mov	r25, r24
 810:	9f 7d       	andi	r25, 0xDF	; 223
 812:	95 54       	subi	r25, 0x45	; 69
 814:	93 30       	cpi	r25, 0x03	; 3
 816:	28 f4       	brcc	.+10     	; 0x822 <vfprintf+0x116>
 818:	0c 5f       	subi	r16, 0xFC	; 252
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	ff e3       	ldi	r31, 0x3F	; 63
 81e:	f9 83       	std	Y+1, r31	; 0x01
 820:	0d c0       	rjmp	.+26     	; 0x83c <vfprintf+0x130>
 822:	83 36       	cpi	r24, 0x63	; 99
 824:	31 f0       	breq	.+12     	; 0x832 <vfprintf+0x126>
 826:	83 37       	cpi	r24, 0x73	; 115
 828:	71 f0       	breq	.+28     	; 0x846 <vfprintf+0x13a>
 82a:	83 35       	cpi	r24, 0x53	; 83
 82c:	09 f0       	breq	.+2      	; 0x830 <vfprintf+0x124>
 82e:	5b c0       	rjmp	.+182    	; 0x8e6 <vfprintf+0x1da>
 830:	22 c0       	rjmp	.+68     	; 0x876 <vfprintf+0x16a>
 832:	f8 01       	movw	r30, r16
 834:	80 81       	ld	r24, Z
 836:	89 83       	std	Y+1, r24	; 0x01
 838:	0e 5f       	subi	r16, 0xFE	; 254
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	44 24       	eor	r4, r4
 83e:	43 94       	inc	r4
 840:	51 2c       	mov	r5, r1
 842:	54 01       	movw	r10, r8
 844:	15 c0       	rjmp	.+42     	; 0x870 <vfprintf+0x164>
 846:	38 01       	movw	r6, r16
 848:	f2 e0       	ldi	r31, 0x02	; 2
 84a:	6f 0e       	add	r6, r31
 84c:	71 1c       	adc	r7, r1
 84e:	f8 01       	movw	r30, r16
 850:	a0 80       	ld	r10, Z
 852:	b1 80       	ldd	r11, Z+1	; 0x01
 854:	26 ff       	sbrs	r18, 6
 856:	03 c0       	rjmp	.+6      	; 0x85e <vfprintf+0x152>
 858:	65 2d       	mov	r22, r5
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x156>
 85e:	6f ef       	ldi	r22, 0xFF	; 255
 860:	7f ef       	ldi	r23, 0xFF	; 255
 862:	c5 01       	movw	r24, r10
 864:	2c 87       	std	Y+12, r18	; 0x0c
 866:	0e 94 8c 05 	call	0xb18	; 0xb18 <strnlen>
 86a:	2c 01       	movw	r4, r24
 86c:	83 01       	movw	r16, r6
 86e:	2c 85       	ldd	r18, Y+12	; 0x0c
 870:	2f 77       	andi	r18, 0x7F	; 127
 872:	22 2e       	mov	r2, r18
 874:	17 c0       	rjmp	.+46     	; 0x8a4 <vfprintf+0x198>
 876:	38 01       	movw	r6, r16
 878:	f2 e0       	ldi	r31, 0x02	; 2
 87a:	6f 0e       	add	r6, r31
 87c:	71 1c       	adc	r7, r1
 87e:	f8 01       	movw	r30, r16
 880:	a0 80       	ld	r10, Z
 882:	b1 80       	ldd	r11, Z+1	; 0x01
 884:	26 ff       	sbrs	r18, 6
 886:	03 c0       	rjmp	.+6      	; 0x88e <vfprintf+0x182>
 888:	65 2d       	mov	r22, r5
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <vfprintf+0x186>
 88e:	6f ef       	ldi	r22, 0xFF	; 255
 890:	7f ef       	ldi	r23, 0xFF	; 255
 892:	c5 01       	movw	r24, r10
 894:	2c 87       	std	Y+12, r18	; 0x0c
 896:	0e 94 81 05 	call	0xb02	; 0xb02 <strnlen_P>
 89a:	2c 01       	movw	r4, r24
 89c:	2c 85       	ldd	r18, Y+12	; 0x0c
 89e:	20 68       	ori	r18, 0x80	; 128
 8a0:	22 2e       	mov	r2, r18
 8a2:	83 01       	movw	r16, r6
 8a4:	23 fc       	sbrc	r2, 3
 8a6:	1b c0       	rjmp	.+54     	; 0x8de <vfprintf+0x1d2>
 8a8:	83 2d       	mov	r24, r3
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	48 16       	cp	r4, r24
 8ae:	59 06       	cpc	r5, r25
 8b0:	b0 f4       	brcc	.+44     	; 0x8de <vfprintf+0x1d2>
 8b2:	b7 01       	movw	r22, r14
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 8bc:	3a 94       	dec	r3
 8be:	f4 cf       	rjmp	.-24     	; 0x8a8 <vfprintf+0x19c>
 8c0:	f5 01       	movw	r30, r10
 8c2:	27 fc       	sbrc	r2, 7
 8c4:	85 91       	lpm	r24, Z+
 8c6:	27 fe       	sbrs	r2, 7
 8c8:	81 91       	ld	r24, Z+
 8ca:	5f 01       	movw	r10, r30
 8cc:	b7 01       	movw	r22, r14
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 8d4:	31 10       	cpse	r3, r1
 8d6:	3a 94       	dec	r3
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	4f 1a       	sub	r4, r31
 8dc:	51 08       	sbc	r5, r1
 8de:	41 14       	cp	r4, r1
 8e0:	51 04       	cpc	r5, r1
 8e2:	71 f7       	brne	.-36     	; 0x8c0 <vfprintf+0x1b4>
 8e4:	e5 c0       	rjmp	.+458    	; 0xab0 <vfprintf+0x3a4>
 8e6:	84 36       	cpi	r24, 0x64	; 100
 8e8:	11 f0       	breq	.+4      	; 0x8ee <vfprintf+0x1e2>
 8ea:	89 36       	cpi	r24, 0x69	; 105
 8ec:	39 f5       	brne	.+78     	; 0x93c <vfprintf+0x230>
 8ee:	f8 01       	movw	r30, r16
 8f0:	27 ff       	sbrs	r18, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <vfprintf+0x1f6>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	0c 5f       	subi	r16, 0xFC	; 252
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	08 c0       	rjmp	.+16     	; 0x912 <vfprintf+0x206>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	07 2e       	mov	r0, r23
 908:	00 0c       	add	r0, r0
 90a:	88 0b       	sbc	r24, r24
 90c:	99 0b       	sbc	r25, r25
 90e:	0e 5f       	subi	r16, 0xFE	; 254
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	2f 76       	andi	r18, 0x6F	; 111
 914:	72 2e       	mov	r7, r18
 916:	97 ff       	sbrs	r25, 7
 918:	09 c0       	rjmp	.+18     	; 0x92c <vfprintf+0x220>
 91a:	90 95       	com	r25
 91c:	80 95       	com	r24
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	20 68       	ori	r18, 0x80	; 128
 92a:	72 2e       	mov	r7, r18
 92c:	2a e0       	ldi	r18, 0x0A	; 10
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	a4 01       	movw	r20, r8
 932:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 936:	a8 2e       	mov	r10, r24
 938:	a8 18       	sub	r10, r8
 93a:	44 c0       	rjmp	.+136    	; 0x9c4 <vfprintf+0x2b8>
 93c:	85 37       	cpi	r24, 0x75	; 117
 93e:	29 f4       	brne	.+10     	; 0x94a <vfprintf+0x23e>
 940:	2f 7e       	andi	r18, 0xEF	; 239
 942:	b2 2e       	mov	r11, r18
 944:	2a e0       	ldi	r18, 0x0A	; 10
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	25 c0       	rjmp	.+74     	; 0x994 <vfprintf+0x288>
 94a:	f2 2f       	mov	r31, r18
 94c:	f9 7f       	andi	r31, 0xF9	; 249
 94e:	bf 2e       	mov	r11, r31
 950:	8f 36       	cpi	r24, 0x6F	; 111
 952:	c1 f0       	breq	.+48     	; 0x984 <vfprintf+0x278>
 954:	18 f4       	brcc	.+6      	; 0x95c <vfprintf+0x250>
 956:	88 35       	cpi	r24, 0x58	; 88
 958:	79 f0       	breq	.+30     	; 0x978 <vfprintf+0x26c>
 95a:	b4 c0       	rjmp	.+360    	; 0xac4 <vfprintf+0x3b8>
 95c:	80 37       	cpi	r24, 0x70	; 112
 95e:	19 f0       	breq	.+6      	; 0x966 <vfprintf+0x25a>
 960:	88 37       	cpi	r24, 0x78	; 120
 962:	21 f0       	breq	.+8      	; 0x96c <vfprintf+0x260>
 964:	af c0       	rjmp	.+350    	; 0xac4 <vfprintf+0x3b8>
 966:	2f 2f       	mov	r18, r31
 968:	20 61       	ori	r18, 0x10	; 16
 96a:	b2 2e       	mov	r11, r18
 96c:	b4 fe       	sbrs	r11, 4
 96e:	0d c0       	rjmp	.+26     	; 0x98a <vfprintf+0x27e>
 970:	8b 2d       	mov	r24, r11
 972:	84 60       	ori	r24, 0x04	; 4
 974:	b8 2e       	mov	r11, r24
 976:	09 c0       	rjmp	.+18     	; 0x98a <vfprintf+0x27e>
 978:	24 ff       	sbrs	r18, 4
 97a:	0a c0       	rjmp	.+20     	; 0x990 <vfprintf+0x284>
 97c:	9f 2f       	mov	r25, r31
 97e:	96 60       	ori	r25, 0x06	; 6
 980:	b9 2e       	mov	r11, r25
 982:	06 c0       	rjmp	.+12     	; 0x990 <vfprintf+0x284>
 984:	28 e0       	ldi	r18, 0x08	; 8
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	05 c0       	rjmp	.+10     	; 0x994 <vfprintf+0x288>
 98a:	20 e1       	ldi	r18, 0x10	; 16
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	02 c0       	rjmp	.+4      	; 0x994 <vfprintf+0x288>
 990:	20 e1       	ldi	r18, 0x10	; 16
 992:	32 e0       	ldi	r19, 0x02	; 2
 994:	f8 01       	movw	r30, r16
 996:	b7 fe       	sbrs	r11, 7
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <vfprintf+0x29c>
 99a:	60 81       	ld	r22, Z
 99c:	71 81       	ldd	r23, Z+1	; 0x01
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	93 81       	ldd	r25, Z+3	; 0x03
 9a2:	0c 5f       	subi	r16, 0xFC	; 252
 9a4:	1f 4f       	sbci	r17, 0xFF	; 255
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0x2a8>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 5f       	subi	r16, 0xFE	; 254
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	a4 01       	movw	r20, r8
 9b6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 9ba:	a8 2e       	mov	r10, r24
 9bc:	a8 18       	sub	r10, r8
 9be:	fb 2d       	mov	r31, r11
 9c0:	ff 77       	andi	r31, 0x7F	; 127
 9c2:	7f 2e       	mov	r7, r31
 9c4:	76 fe       	sbrs	r7, 6
 9c6:	0b c0       	rjmp	.+22     	; 0x9de <vfprintf+0x2d2>
 9c8:	37 2d       	mov	r19, r7
 9ca:	3e 7f       	andi	r19, 0xFE	; 254
 9cc:	a5 14       	cp	r10, r5
 9ce:	50 f4       	brcc	.+20     	; 0x9e4 <vfprintf+0x2d8>
 9d0:	74 fe       	sbrs	r7, 4
 9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <vfprintf+0x2dc>
 9d4:	72 fc       	sbrc	r7, 2
 9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <vfprintf+0x2dc>
 9d8:	37 2d       	mov	r19, r7
 9da:	3e 7e       	andi	r19, 0xEE	; 238
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <vfprintf+0x2dc>
 9de:	ba 2c       	mov	r11, r10
 9e0:	37 2d       	mov	r19, r7
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <vfprintf+0x2de>
 9e4:	ba 2c       	mov	r11, r10
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <vfprintf+0x2de>
 9e8:	b5 2c       	mov	r11, r5
 9ea:	34 ff       	sbrs	r19, 4
 9ec:	0d c0       	rjmp	.+26     	; 0xa08 <vfprintf+0x2fc>
 9ee:	fe 01       	movw	r30, r28
 9f0:	ea 0d       	add	r30, r10
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	80 33       	cpi	r24, 0x30	; 48
 9f8:	11 f4       	brne	.+4      	; 0x9fe <vfprintf+0x2f2>
 9fa:	39 7e       	andi	r19, 0xE9	; 233
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <vfprintf+0x304>
 9fe:	32 ff       	sbrs	r19, 2
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <vfprintf+0x302>
 a02:	b3 94       	inc	r11
 a04:	b3 94       	inc	r11
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <vfprintf+0x304>
 a08:	83 2f       	mov	r24, r19
 a0a:	86 78       	andi	r24, 0x86	; 134
 a0c:	09 f0       	breq	.+2      	; 0xa10 <vfprintf+0x304>
 a0e:	b3 94       	inc	r11
 a10:	33 fd       	sbrc	r19, 3
 a12:	13 c0       	rjmp	.+38     	; 0xa3a <vfprintf+0x32e>
 a14:	30 ff       	sbrs	r19, 0
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <vfprintf+0x318>
 a18:	5a 2c       	mov	r5, r10
 a1a:	b3 14       	cp	r11, r3
 a1c:	18 f4       	brcc	.+6      	; 0xa24 <vfprintf+0x318>
 a1e:	53 0c       	add	r5, r3
 a20:	5b 18       	sub	r5, r11
 a22:	b3 2c       	mov	r11, r3
 a24:	b3 14       	cp	r11, r3
 a26:	68 f4       	brcc	.+26     	; 0xa42 <vfprintf+0x336>
 a28:	b7 01       	movw	r22, r14
 a2a:	80 e2       	ldi	r24, 0x20	; 32
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	3c 87       	std	Y+12, r19	; 0x0c
 a30:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 a34:	b3 94       	inc	r11
 a36:	3c 85       	ldd	r19, Y+12	; 0x0c
 a38:	f5 cf       	rjmp	.-22     	; 0xa24 <vfprintf+0x318>
 a3a:	b3 14       	cp	r11, r3
 a3c:	10 f4       	brcc	.+4      	; 0xa42 <vfprintf+0x336>
 a3e:	3b 18       	sub	r3, r11
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <vfprintf+0x338>
 a42:	31 2c       	mov	r3, r1
 a44:	34 ff       	sbrs	r19, 4
 a46:	12 c0       	rjmp	.+36     	; 0xa6c <vfprintf+0x360>
 a48:	b7 01       	movw	r22, r14
 a4a:	80 e3       	ldi	r24, 0x30	; 48
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	3c 87       	std	Y+12, r19	; 0x0c
 a50:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 a54:	3c 85       	ldd	r19, Y+12	; 0x0c
 a56:	32 ff       	sbrs	r19, 2
 a58:	17 c0       	rjmp	.+46     	; 0xa88 <vfprintf+0x37c>
 a5a:	31 fd       	sbrc	r19, 1
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <vfprintf+0x358>
 a5e:	88 e7       	ldi	r24, 0x78	; 120
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x35c>
 a64:	88 e5       	ldi	r24, 0x58	; 88
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	b7 01       	movw	r22, r14
 a6a:	0c c0       	rjmp	.+24     	; 0xa84 <vfprintf+0x378>
 a6c:	83 2f       	mov	r24, r19
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	59 f0       	breq	.+22     	; 0xa88 <vfprintf+0x37c>
 a72:	31 ff       	sbrs	r19, 1
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x36e>
 a76:	8b e2       	ldi	r24, 0x2B	; 43
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <vfprintf+0x370>
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	37 fd       	sbrc	r19, 7
 a7e:	8d e2       	ldi	r24, 0x2D	; 45
 a80:	b7 01       	movw	r22, r14
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 a88:	a5 14       	cp	r10, r5
 a8a:	38 f4       	brcc	.+14     	; 0xa9a <vfprintf+0x38e>
 a8c:	b7 01       	movw	r22, r14
 a8e:	80 e3       	ldi	r24, 0x30	; 48
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 a96:	5a 94       	dec	r5
 a98:	f7 cf       	rjmp	.-18     	; 0xa88 <vfprintf+0x37c>
 a9a:	aa 94       	dec	r10
 a9c:	f4 01       	movw	r30, r8
 a9e:	ea 0d       	add	r30, r10
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 81       	ld	r24, Z
 aa4:	b7 01       	movw	r22, r14
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 aac:	a1 10       	cpse	r10, r1
 aae:	f5 cf       	rjmp	.-22     	; 0xa9a <vfprintf+0x38e>
 ab0:	33 20       	and	r3, r3
 ab2:	09 f4       	brne	.+2      	; 0xab6 <vfprintf+0x3aa>
 ab4:	51 ce       	rjmp	.-862    	; 0x758 <vfprintf+0x4c>
 ab6:	b7 01       	movw	r22, r14
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 97 05 	call	0xb2e	; 0xb2e <fputc>
 ac0:	3a 94       	dec	r3
 ac2:	f6 cf       	rjmp	.-20     	; 0xab0 <vfprintf+0x3a4>
 ac4:	f7 01       	movw	r30, r14
 ac6:	86 81       	ldd	r24, Z+6	; 0x06
 ac8:	97 81       	ldd	r25, Z+7	; 0x07
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x3c4>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	2c 96       	adiw	r28, 0x0c	; 12
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	ff 90       	pop	r15
 ae6:	ef 90       	pop	r14
 ae8:	df 90       	pop	r13
 aea:	cf 90       	pop	r12
 aec:	bf 90       	pop	r11
 aee:	af 90       	pop	r10
 af0:	9f 90       	pop	r9
 af2:	8f 90       	pop	r8
 af4:	7f 90       	pop	r7
 af6:	6f 90       	pop	r6
 af8:	5f 90       	pop	r5
 afa:	4f 90       	pop	r4
 afc:	3f 90       	pop	r3
 afe:	2f 90       	pop	r2
 b00:	08 95       	ret

00000b02 <strnlen_P>:
 b02:	fc 01       	movw	r30, r24
 b04:	05 90       	lpm	r0, Z+
 b06:	61 50       	subi	r22, 0x01	; 1
 b08:	70 40       	sbci	r23, 0x00	; 0
 b0a:	01 10       	cpse	r0, r1
 b0c:	d8 f7       	brcc	.-10     	; 0xb04 <strnlen_P+0x2>
 b0e:	80 95       	com	r24
 b10:	90 95       	com	r25
 b12:	8e 0f       	add	r24, r30
 b14:	9f 1f       	adc	r25, r31
 b16:	08 95       	ret

00000b18 <strnlen>:
 b18:	fc 01       	movw	r30, r24
 b1a:	61 50       	subi	r22, 0x01	; 1
 b1c:	70 40       	sbci	r23, 0x00	; 0
 b1e:	01 90       	ld	r0, Z+
 b20:	01 10       	cpse	r0, r1
 b22:	d8 f7       	brcc	.-10     	; 0xb1a <strnlen+0x2>
 b24:	80 95       	com	r24
 b26:	90 95       	com	r25
 b28:	8e 0f       	add	r24, r30
 b2a:	9f 1f       	adc	r25, r31
 b2c:	08 95       	ret

00000b2e <fputc>:
 b2e:	0f 93       	push	r16
 b30:	1f 93       	push	r17
 b32:	cf 93       	push	r28
 b34:	df 93       	push	r29
 b36:	fb 01       	movw	r30, r22
 b38:	23 81       	ldd	r18, Z+3	; 0x03
 b3a:	21 fd       	sbrc	r18, 1
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <fputc+0x16>
 b3e:	8f ef       	ldi	r24, 0xFF	; 255
 b40:	9f ef       	ldi	r25, 0xFF	; 255
 b42:	28 c0       	rjmp	.+80     	; 0xb94 <fputc+0x66>
 b44:	22 ff       	sbrs	r18, 2
 b46:	16 c0       	rjmp	.+44     	; 0xb74 <fputc+0x46>
 b48:	46 81       	ldd	r20, Z+6	; 0x06
 b4a:	57 81       	ldd	r21, Z+7	; 0x07
 b4c:	24 81       	ldd	r18, Z+4	; 0x04
 b4e:	35 81       	ldd	r19, Z+5	; 0x05
 b50:	42 17       	cp	r20, r18
 b52:	53 07       	cpc	r21, r19
 b54:	44 f4       	brge	.+16     	; 0xb66 <fputc+0x38>
 b56:	a0 81       	ld	r26, Z
 b58:	b1 81       	ldd	r27, Z+1	; 0x01
 b5a:	9d 01       	movw	r18, r26
 b5c:	2f 5f       	subi	r18, 0xFF	; 255
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	31 83       	std	Z+1, r19	; 0x01
 b62:	20 83       	st	Z, r18
 b64:	8c 93       	st	X, r24
 b66:	26 81       	ldd	r18, Z+6	; 0x06
 b68:	37 81       	ldd	r19, Z+7	; 0x07
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	37 83       	std	Z+7, r19	; 0x07
 b70:	26 83       	std	Z+6, r18	; 0x06
 b72:	10 c0       	rjmp	.+32     	; 0xb94 <fputc+0x66>
 b74:	eb 01       	movw	r28, r22
 b76:	09 2f       	mov	r16, r25
 b78:	18 2f       	mov	r17, r24
 b7a:	00 84       	ldd	r0, Z+8	; 0x08
 b7c:	f1 85       	ldd	r31, Z+9	; 0x09
 b7e:	e0 2d       	mov	r30, r0
 b80:	09 95       	icall
 b82:	89 2b       	or	r24, r25
 b84:	e1 f6       	brne	.-72     	; 0xb3e <fputc+0x10>
 b86:	8e 81       	ldd	r24, Y+6	; 0x06
 b88:	9f 81       	ldd	r25, Y+7	; 0x07
 b8a:	01 96       	adiw	r24, 0x01	; 1
 b8c:	9f 83       	std	Y+7, r25	; 0x07
 b8e:	8e 83       	std	Y+6, r24	; 0x06
 b90:	81 2f       	mov	r24, r17
 b92:	90 2f       	mov	r25, r16
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	08 95       	ret

00000b9e <__ultoa_invert>:
 b9e:	fa 01       	movw	r30, r20
 ba0:	aa 27       	eor	r26, r26
 ba2:	28 30       	cpi	r18, 0x08	; 8
 ba4:	51 f1       	breq	.+84     	; 0xbfa <__ultoa_invert+0x5c>
 ba6:	20 31       	cpi	r18, 0x10	; 16
 ba8:	81 f1       	breq	.+96     	; 0xc0a <__ultoa_invert+0x6c>
 baa:	e8 94       	clt
 bac:	6f 93       	push	r22
 bae:	6e 7f       	andi	r22, 0xFE	; 254
 bb0:	6e 5f       	subi	r22, 0xFE	; 254
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	af 4f       	sbci	r26, 0xFF	; 255
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	3e d0       	rcall	.+124    	; 0xc3a <__ultoa_invert+0x9c>
 bbe:	b4 e0       	ldi	r27, 0x04	; 4
 bc0:	3c d0       	rcall	.+120    	; 0xc3a <__ultoa_invert+0x9c>
 bc2:	67 0f       	add	r22, r23
 bc4:	78 1f       	adc	r23, r24
 bc6:	89 1f       	adc	r24, r25
 bc8:	9a 1f       	adc	r25, r26
 bca:	a1 1d       	adc	r26, r1
 bcc:	68 0f       	add	r22, r24
 bce:	79 1f       	adc	r23, r25
 bd0:	8a 1f       	adc	r24, r26
 bd2:	91 1d       	adc	r25, r1
 bd4:	a1 1d       	adc	r26, r1
 bd6:	6a 0f       	add	r22, r26
 bd8:	71 1d       	adc	r23, r1
 bda:	81 1d       	adc	r24, r1
 bdc:	91 1d       	adc	r25, r1
 bde:	a1 1d       	adc	r26, r1
 be0:	20 d0       	rcall	.+64     	; 0xc22 <__ultoa_invert+0x84>
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__ultoa_invert+0x48>
 be4:	68 94       	set
 be6:	3f 91       	pop	r19
 be8:	2a e0       	ldi	r18, 0x0A	; 10
 bea:	26 9f       	mul	r18, r22
 bec:	11 24       	eor	r1, r1
 bee:	30 19       	sub	r19, r0
 bf0:	30 5d       	subi	r19, 0xD0	; 208
 bf2:	31 93       	st	Z+, r19
 bf4:	de f6       	brtc	.-74     	; 0xbac <__ultoa_invert+0xe>
 bf6:	cf 01       	movw	r24, r30
 bf8:	08 95       	ret
 bfa:	46 2f       	mov	r20, r22
 bfc:	47 70       	andi	r20, 0x07	; 7
 bfe:	40 5d       	subi	r20, 0xD0	; 208
 c00:	41 93       	st	Z+, r20
 c02:	b3 e0       	ldi	r27, 0x03	; 3
 c04:	0f d0       	rcall	.+30     	; 0xc24 <__ultoa_invert+0x86>
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0x5c>
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <__ultoa_invert+0x58>
 c0a:	46 2f       	mov	r20, r22
 c0c:	4f 70       	andi	r20, 0x0F	; 15
 c0e:	40 5d       	subi	r20, 0xD0	; 208
 c10:	4a 33       	cpi	r20, 0x3A	; 58
 c12:	18 f0       	brcs	.+6      	; 0xc1a <__ultoa_invert+0x7c>
 c14:	49 5d       	subi	r20, 0xD9	; 217
 c16:	31 fd       	sbrc	r19, 1
 c18:	40 52       	subi	r20, 0x20	; 32
 c1a:	41 93       	st	Z+, r20
 c1c:	02 d0       	rcall	.+4      	; 0xc22 <__ultoa_invert+0x84>
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__ultoa_invert+0x6c>
 c20:	ea cf       	rjmp	.-44     	; 0xbf6 <__ultoa_invert+0x58>
 c22:	b4 e0       	ldi	r27, 0x04	; 4
 c24:	a6 95       	lsr	r26
 c26:	97 95       	ror	r25
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0x86>
 c32:	00 97       	sbiw	r24, 0x00	; 0
 c34:	61 05       	cpc	r22, r1
 c36:	71 05       	cpc	r23, r1
 c38:	08 95       	ret
 c3a:	9b 01       	movw	r18, r22
 c3c:	ac 01       	movw	r20, r24
 c3e:	0a 2e       	mov	r0, r26
 c40:	06 94       	lsr	r0
 c42:	57 95       	ror	r21
 c44:	47 95       	ror	r20
 c46:	37 95       	ror	r19
 c48:	27 95       	ror	r18
 c4a:	ba 95       	dec	r27
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0xa2>
 c4e:	62 0f       	add	r22, r18
 c50:	73 1f       	adc	r23, r19
 c52:	84 1f       	adc	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	a0 1d       	adc	r26, r0
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
