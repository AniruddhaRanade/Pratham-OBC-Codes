
hMaster_Slave+CCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00001266  000012fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  0080026c  0080026c  00001466  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d01  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130e  00000000  00000000  00005421  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155c  00000000  00000000  0000672f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00007c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1f  00000000  00000000  000081c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001300  00000000  00000000  00008be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 36       	cpi	r26, 0x6C	; 108
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ac e6       	ldi	r26, 0x6C	; 108
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 36       	cpi	r26, 0x67	; 103
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bd 03 	call	0x77a	; 0x77a <main>
      c6:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
      ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
      d0:	26 2f       	mov	r18, r22
      d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
      d4:	76 95       	lsr	r23
      d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
      d8:	38 2f       	mov	r19, r24
      da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
      dc:	32 17       	cp	r19, r18
      de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
      e0:	28 e0       	ldi	r18, 0x08	; 8
      e2:	62 27       	eor	r22, r18
      e4:	24 e8       	ldi	r18, 0x84	; 132
      e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
      e8:	86 95       	lsr	r24
      ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
      ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
      ee:	cb 01       	movw	r24, r22
      f0:	08 95       	ret

000000f2 <WriteToCC1020Register>:
int init_CC1020_RX (void)
{  
	cbi(DDR_TRX, DIO);
	WakeUpCC1020ToRX(RXANALOG);													
	return SetupCC1020RX(RXANALOG,PA_POWER);
}
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	c8 2f       	mov	r28, r24
      f8:	d6 2f       	mov	r29, r22
      fa:	84 e0       	ldi	r24, 0x04	; 4
      fc:	0e 94 13 06 	call	0xc26	; 0xc26 <init_SPI_trans>
     100:	8c 2f       	mov	r24, r28
     102:	88 0f       	add	r24, r24
     104:	81 60       	ori	r24, 0x01	; 1
     106:	0e 94 30 06 	call	0xc60	; 0xc60 <SPI_transfer>
     10a:	8d 2f       	mov	r24, r29
     10c:	0e 94 30 06 	call	0xc60	; 0xc60 <SPI_transfer>
     110:	0e 94 35 06 	call	0xc6a	; 0xc6a <end_SPI>
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <ReadFromCC1020Register>:
     11a:	cf 93       	push	r28
     11c:	c8 2f       	mov	r28, r24
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	0e 94 13 06 	call	0xc26	; 0xc26 <init_SPI_trans>
     124:	8c 2f       	mov	r24, r28
     126:	88 0f       	add	r24, r24
     128:	0e 94 30 06 	call	0xc60	; 0xc60 <SPI_transfer>
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	0e 94 30 06 	call	0xc60	; 0xc60 <SPI_transfer>
     132:	c8 2f       	mov	r28, r24
     134:	0e 94 35 06 	call	0xc6a	; 0xc6a <end_SPI>
     138:	8c 2f       	mov	r24, r28
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <SetupCC1020PD>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	6f e1       	ldi	r22, 0x1F	; 31
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     150:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <x>
     154:	1f 92       	push	r1
     156:	8f 93       	push	r24
     158:	87 e0       	ldi	r24, 0x07	; 7
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	c6 e7       	ldi	r28, 0x76	; 118
     162:	d2 e0       	ldi	r29, 0x02	; 2
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
     16c:	09 90       	ld	r0, Y+
     16e:	00 20       	and	r0, r0
     170:	e9 f7       	brne	.-6      	; 0x16c <SetupCC1020PD+0x2e>
     172:	21 97       	sbiw	r28, 0x01	; 1
     174:	be 01       	movw	r22, r28
     176:	66 57       	subi	r22, 0x76	; 118
     178:	72 40       	sbci	r23, 0x02	; 2
     17a:	86 e7       	ldi	r24, 0x76	; 118
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_preflight>
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	8c e1       	ldi	r24, 0x1C	; 28
     186:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <ResetCC1020>:
     19c:	6e e0       	ldi	r22, 0x0E	; 14
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1a4:	6f e1       	ldi	r22, 0x1F	; 31
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1ac:	08 95       	ret

000001ae <SetupCC1020Allregisters>:
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	0a e7       	ldi	r16, 0x7A	; 122
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	c1 e0       	ldi	r28, 0x01	; 1
     1ba:	f8 01       	movw	r30, r16
     1bc:	61 91       	ld	r22, Z+
     1be:	8f 01       	movw	r16, r30
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1c6:	cf 5f       	subi	r28, 0xFF	; 255
     1c8:	c1 32       	cpi	r28, 0x21	; 33
     1ca:	b9 f7       	brne	.-18     	; 0x1ba <SetupCC1020Allregisters+0xc>
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	08 95       	ret

000001d4 <WakeUpCC1020ToRX>:
     1d4:	cf 93       	push	r28
     1d6:	c8 2f       	mov	r28, r24
     1d8:	6b e1       	ldi	r22, 0x1B	; 27
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1e0:	6c 2f       	mov	r22, r28
     1e2:	87 e1       	ldi	r24, 0x17	; 23
     1e4:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1e8:	8f e6       	ldi	r24, 0x6F	; 111
     1ea:	97 e1       	ldi	r25, 0x17	; 23
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <WakeUpCC1020ToRX+0x18>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <WakeUpCC1020ToRX+0x1e>
     1f2:	00 00       	nop
     1f4:	69 e1       	ldi	r22, 0x19	; 25
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1fc:	8b e2       	ldi	r24, 0x2B	; 43
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <WakeUpCC1020ToRX+0x2c>
     204:	00 c0       	rjmp	.+0      	; 0x206 <WakeUpCC1020ToRX+0x32>
     206:	00 00       	nop
     208:	61 e1       	ldi	r22, 0x11	; 17
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <WakeUpCC1020ToTX>:
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	c8 2f       	mov	r28, r24
     21a:	6b ed       	ldi	r22, 0xDB	; 219
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     222:	6c 2f       	mov	r22, r28
     224:	87 e1       	ldi	r24, 0x17	; 23
     226:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     22a:	8f e6       	ldi	r24, 0x6F	; 111
     22c:	97 e1       	ldi	r25, 0x17	; 23
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <WakeUpCC1020ToTX+0x1a>
     232:	00 c0       	rjmp	.+0      	; 0x234 <WakeUpCC1020ToTX+0x20>
     234:	00 00       	nop
     236:	69 ed       	ldi	r22, 0xD9	; 217
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     23e:	8b e2       	ldi	r24, 0x2B	; 43
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <WakeUpCC1020ToTX+0x2e>
     246:	00 c0       	rjmp	.+0      	; 0x248 <WakeUpCC1020ToTX+0x34>
     248:	00 00       	nop
     24a:	61 ed       	ldi	r22, 0xD1	; 209
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     258:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <x>
     25c:	1f 92       	push	r1
     25e:	8f 93       	push	r24
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	c6 e7       	ldi	r28, 0x76	; 118
     26a:	d2 e0       	ldi	r29, 0x02	; 2
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
     274:	09 90       	ld	r0, Y+
     276:	00 20       	and	r0, r0
     278:	e9 f7       	brne	.-6      	; 0x274 <WakeUpCC1020ToTX+0x60>
     27a:	21 97       	sbiw	r28, 0x01	; 1
     27c:	be 01       	movw	r22, r28
     27e:	66 57       	subi	r22, 0x76	; 118
     280:	72 40       	sbci	r23, 0x02	; 2
     282:	86 e7       	ldi	r24, 0x76	; 118
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0e 94 2c 05 	call	0xa58	; 0xa58 <send_preflight>
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <CalibrateCC1020>:
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	d8 2e       	mov	r13, r24
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	8c e1       	ldi	r24, 0x1C	; 28
     2b0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2b4:	04 e0       	ldi	r16, 0x04	; 4
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	ff e1       	ldi	r31, 0x1F	; 31
     2bc:	ef 2e       	mov	r14, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	f1 2c       	mov	r15, r1
     2c2:	64 eb       	ldi	r22, 0xB4	; 180
     2c4:	8b e1       	ldi	r24, 0x1B	; 27
     2c6:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2ca:	87 ec       	ldi	r24, 0xC7	; 199
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <CalibrateCC1020+0x32>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <CalibrateCC1020+0x38>
     2d4:	00 00       	nop
     2d6:	ce 2d       	mov	r28, r14
     2d8:	df 2d       	mov	r29, r15
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <CalibrateCC1020+0x4c>
     2dc:	8f ec       	ldi	r24, 0xCF	; 207
     2de:	97 e0       	ldi	r25, 0x07	; 7
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <CalibrateCC1020+0x44>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <CalibrateCC1020+0x4a>
     2e6:	00 00       	nop
     2e8:	80 e4       	ldi	r24, 0x40	; 64
     2ea:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     2ee:	88 23       	and	r24, r24
     2f0:	64 f0       	brlt	.+24     	; 0x30a <CalibrateCC1020+0x6e>
     2f2:	21 97       	sbiw	r28, 0x01	; 1
     2f4:	99 f7       	brne	.-26     	; 0x2dc <CalibrateCC1020+0x40>
     2f6:	ce 2d       	mov	r28, r14
     2f8:	df 2d       	mov	r29, r15
     2fa:	09 c0       	rjmp	.+18     	; 0x30e <CalibrateCC1020+0x72>
     2fc:	8f ec       	ldi	r24, 0xCF	; 207
     2fe:	97 e0       	ldi	r25, 0x07	; 7
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CalibrateCC1020+0x64>
     304:	00 c0       	rjmp	.+0      	; 0x306 <CalibrateCC1020+0x6a>
     306:	00 00       	nop
     308:	02 c0       	rjmp	.+4      	; 0x30e <CalibrateCC1020+0x72>
     30a:	ce 2d       	mov	r28, r14
     30c:	df 2d       	mov	r29, r15
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     314:	84 fd       	sbrc	r24, 4
     316:	02 c0       	rjmp	.+4      	; 0x31c <CalibrateCC1020+0x80>
     318:	21 97       	sbiw	r28, 0x01	; 1
     31a:	81 f7       	brne	.-32     	; 0x2fc <CalibrateCC1020+0x60>
     31c:	80 e4       	ldi	r24, 0x40	; 64
     31e:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     322:	84 fd       	sbrc	r24, 4
     324:	03 c0       	rjmp	.+6      	; 0x32c <CalibrateCC1020+0x90>
     326:	01 50       	subi	r16, 0x01	; 1
     328:	11 09       	sbc	r17, r1
     32a:	59 f6       	brne	.-106    	; 0x2c2 <CalibrateCC1020+0x26>
     32c:	6d 2d       	mov	r22, r13
     32e:	8c e1       	ldi	r24, 0x1C	; 28
     330:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     334:	80 e4       	ldi	r24, 0x40	; 64
     336:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     33a:	82 95       	swap	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	08 95       	ret

00000350 <init_CC1020>:
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	6e 97       	sbiw	r28, 0x1e	; 30
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 13 06 	call	0xc26	; 0xc26 <init_SPI_trans>
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	84 e3       	ldi	r24, 0x34	; 52
     372:	9c e0       	ldi	r25, 0x0C	; 12
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <init_CC1020+0x24>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <init_CC1020+0x2e>
     37e:	00 00       	nop
     380:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
     384:	0e 94 ce 00 	call	0x19c	; 0x19c <ResetCC1020>
     388:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SetupCC1020Allregisters>
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	84 e3       	ldi	r24, 0x34	; 52
     390:	9c e0       	ldi	r25, 0x0C	; 12
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <init_CC1020+0x42>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <init_CC1020+0x4c>
     39c:	00 00       	nop
     39e:	87 e4       	ldi	r24, 0x47	; 71
     3a0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <WakeUpCC1020ToRX>
     3a4:	80 ef       	ldi	r24, 0xF0	; 240
     3a6:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     3aa:	89 2b       	or	r24, r25
     3ac:	29 f0       	breq	.+10     	; 0x3b8 <init_CC1020+0x68>
     3ae:	83 e1       	ldi	r24, 0x13	; 19
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <init_CC1020+0x70>
     3b8:	87 e2       	ldi	r24, 0x27	; 39
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	84 e3       	ldi	r24, 0x34	; 52
     3c4:	9c e0       	ldi	r25, 0x0C	; 12
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <init_CC1020+0x76>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <init_CC1020+0x80>
     3d0:	00 00       	nop
     3d2:	87 e4       	ldi	r24, 0x47	; 71
     3d4:	0e 94 0a 01 	call	0x214	; 0x214 <WakeUpCC1020ToTX>
     3d8:	80 ef       	ldi	r24, 0xF0	; 240
     3da:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     3de:	89 2b       	or	r24, r25
     3e0:	29 f4       	brne	.+10     	; 0x3ec <init_CC1020+0x9c>
     3e2:	8e e3       	ldi	r24, 0x3E	; 62
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <init_CC1020+0xa4>
     3ec:	85 e5       	ldi	r24, 0x55	; 85
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	8b e6       	ldi	r24, 0x6B	; 107
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	1f 93       	push	r17
     40e:	0f 93       	push	r16
     410:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
     414:	c8 01       	movw	r24, r16
     416:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	6e 96       	adiw	r28, 0x1e	; 30
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <SetupCC1020TX>:
/*  This routine puts the CC1020 into TX mode (from RX). When switching to  */
/*  TX from PD, use WakeupCC1020ToTX first                                  */
/****************************************************************************/

char SetupCC1020TX(char TXANALOG1, char PA_POWER1)
{
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	c8 2f       	mov	r28, r24
     444:	16 2f       	mov	r17, r22
  int TimeOutCounter;
  int lock_status;

  // Turn off PA to avoid frequency splatter
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	8c e1       	ldi	r24, 0x1C	; 28
     44a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,TXANALOG1);
     44e:	6c 2f       	mov	r22, r28
     450:	87 e1       	ldi	r24, 0x17	; 23
     452:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage
     456:	61 ec       	ldi	r22, 0xC1	; 193
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     45e:	cf e1       	ldi	r28, 0x1F	; 31
     460:	d0 e0       	ldi	r29, 0x00	; 0
     462:	06 c0       	rjmp	.+12     	; 0x470 <SetupCC1020TX+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	8f ec       	ldi	r24, 0xCF	; 207
     466:	97 e0       	ldi	r25, 0x07	; 7
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <SetupCC1020TX+0x2c>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <SetupCC1020TX+0x32>
     46e:	00 00       	nop
     470:	80 e4       	ldi	r24, 0x40	; 64
     472:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     476:	84 fd       	sbrc	r24, 4
     478:	02 c0       	rjmp	.+4      	; 0x47e <SetupCC1020TX+0x42>
     47a:	21 97       	sbiw	r28, 0x01	; 1
     47c:	99 f7       	brne	.-26     	; 0x464 <SetupCC1020TX+0x28>
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     484:	84 fd       	sbrc	r24, 4
     486:	08 c0       	rjmp	.+16     	; 0x498 <SetupCC1020TX+0x5c>
    lock_status = TRUE;
    
  else	// if PLL is not locked then Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
     488:	81 2f       	mov	r24, r17
     48a:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     48e:	c1 e0       	ldi	r28, 0x01	; 1
     490:	89 2b       	or	r24, r25
     492:	19 f4       	brne	.+6      	; 0x49a <SetupCC1020TX+0x5e>
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	01 c0       	rjmp	.+2      	; 0x49a <SetupCC1020TX+0x5e>
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
    lock_status = TRUE;
     498:	c1 e0       	ldi	r28, 0x01	; 1
    else
      lock_status = FALSE;
  }

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER,PA_POWER1);
     49a:	61 2f       	mov	r22, r17
     49c:	8c e1       	ldi	r24, 0x1C	; 28
     49e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Turn OFF DCLK_CS (Carrier Sense Squelch) in TX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE) & (~0x10));
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     4a8:	68 2f       	mov	r22, r24
     4aa:	6f 7e       	andi	r22, 0xEF	; 239
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
  
  // Configure LOCK pin to continuous lock status. Active low indicates PLL in lock
  WriteToCC1020Register(CC1020_LOCK,0x20);
     4b2:	60 e2       	ldi	r22, 0x20	; 32
     4b4:	85 e1       	ldi	r24, 0x15	; 21
     4b6:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Return LOCK status to application
  return (lock_status);
}
     4ba:	8c 2f       	mov	r24, r28
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	08 95       	ret

000004c4 <init_CC1020_TX>:
	transmit_string_UART0(buff);
}	
	
int init_CC1020_TX (void)
{  
	sbi(DDR_TRX, DIO);
     4c4:	15 9a       	sbi	0x02, 5	; 2
	sbi(PORT_TRX, DIO);
     4c6:	1d 9a       	sbi	0x03, 5	; 3
	WakeUpCC1020ToTX(TXANALOG);													
     4c8:	87 e4       	ldi	r24, 0x47	; 71
     4ca:	0e 94 0a 01 	call	0x214	; 0x214 <WakeUpCC1020ToTX>
	return SetupCC1020TX(TXANALOG,PA_POWER);
     4ce:	60 ef       	ldi	r22, 0xF0	; 240
     4d0:	87 e4       	ldi	r24, 0x47	; 71
     4d2:	0e 94 1e 02 	call	0x43c	; 0x43c <SetupCC1020TX>
}
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret

000004da <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	2f 93       	push	r18
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
     4f6:	8c b1       	in	r24, 0x0c	; 12
     4f8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
     4fc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     500:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     504:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     508:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     50c:	ba 2f       	mov	r27, r26
     50e:	a9 2f       	mov	r26, r25
     510:	98 2f       	mov	r25, r24
     512:	88 27       	eor	r24, r24
     514:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <buffer>
     518:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <buffer+0x1>
     51c:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <buffer+0x2>
     520:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <buffer+0x3>
  buffer &= 0xFFFFFF00;
     524:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     528:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     52c:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     530:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     534:	88 27       	eor	r24, r24
     536:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <buffer>
     53a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <buffer+0x1>
     53e:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <buffer+0x2>
     542:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <buffer+0x3>
  buffer |= (uint32_t) last_byte;
     546:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <last_byte>
     54a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     54e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     552:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     556:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     55a:	82 2b       	or	r24, r18
     55c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <buffer>
     560:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <buffer+0x1>
     564:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <buffer+0x2>
     568:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
     56c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     570:	8c 30       	cpi	r24, 0x0C	; 12
     572:	a0 f4       	brcc	.+40     	; 0x59c <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
     574:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
     578:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <last_byte>
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	e5 52       	subi	r30, 0x25	; 37
     580:	fd 4f       	sbci	r31, 0xFD	; 253
     582:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
     584:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
     58e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     592:	8c 30       	cpi	r24, 0x0C	; 12
     594:	19 f4       	brne	.+6      	; 0x59c <__vector_18+0xc2>
      pos = 0xFF;
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
     59c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5a0:	8c 30       	cpi	r24, 0x0C	; 12
     5a2:	a0 f4       	brcc	.+40     	; 0x5cc <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
     5a4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
     5a8:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <last_byte>
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	e9 51       	subi	r30, 0x19	; 25
     5b0:	fd 4f       	sbci	r31, 0xFD	; 253
     5b2:	80 83       	st	Z, r24
    
    vel++;
     5b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
     5be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5c2:	8c 30       	cpi	r24, 0x0C	; 12
     5c4:	19 f4       	brne	.+6      	; 0x5cc <__vector_18+0xf2>
      vel = 0xFF;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
     5cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5d0:	84 30       	cpi	r24, 0x04	; 4
     5d2:	c0 f4       	brcc	.+48     	; 0x604 <__vector_18+0x12a>
  {
    if(dop >= 2)
     5d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
     5dc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
     5e0:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <last_byte>
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e2 50       	subi	r30, 0x02	; 2
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	80 83       	st	Z, r24
      
    dop++;
     5ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
     5f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	19 f4       	brne	.+6      	; 0x604 <__vector_18+0x12a>
      dop = 0xFF;
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
     604:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     608:	80 31       	cpi	r24, 0x10	; 16
     60a:	c0 f4       	brcc	.+48     	; 0x63c <__vector_18+0x162>
  {
    if(geo >= 4)
     60c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     610:	84 30       	cpi	r24, 0x04	; 4
     612:	40 f0       	brcs	.+16     	; 0x624 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
     614:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
     618:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <last_byte>
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	e1 51       	subi	r30, 0x11	; 17
     620:	fd 4f       	sbci	r31, 0xFD	; 253
     622:	80 83       	st	Z, r24
    
    geo++;
     624:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
     62e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     632:	80 31       	cpi	r24, 0x10	; 16
     634:	19 f4       	brne	.+6      	; 0x63c <__vector_18+0x162>
      geo = 0xFF;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
     63c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     640:	87 30       	cpi	r24, 0x07	; 7
     642:	b8 f4       	brcc	.+46     	; 0x672 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
     644:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
     648:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <last_byte>
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e1 50       	subi	r30, 0x01	; 1
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	80 83       	st	Z, r24
    
    time++;
     654:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
     65e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     662:	87 30       	cpi	r24, 0x07	; 7
     664:	31 f4       	brne	.+12     	; 0x672 <__vector_18+0x198>
    {
      time = 0xFF;
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
     672:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     676:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     67a:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     67e:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     682:	8c 3a       	cpi	r24, 0xAC	; 172
     684:	94 40       	sbci	r25, 0x04	; 4
     686:	af 43       	sbci	r26, 0x3F	; 63
     688:	bf 43       	sbci	r27, 0x3F	; 63
     68a:	29 f4       	brne	.+10     	; 0x696 <__vector_18+0x1bc>
  {
    message_end = 0;
     68c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
    pos = 0;
     690:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
     694:	3f c0       	rjmp	.+126    	; 0x714 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
     696:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     69a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     69e:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     6a2:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     6a6:	8c 3a       	cpi	r24, 0xAC	; 172
     6a8:	95 40       	sbci	r25, 0x05	; 5
     6aa:	af 43       	sbci	r26, 0x3F	; 63
     6ac:	bf 43       	sbci	r27, 0x3F	; 63
     6ae:	19 f4       	brne	.+6      	; 0x6b6 <__vector_18+0x1dc>
    vel = 0;
     6b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
     6b4:	2f c0       	rjmp	.+94     	; 0x714 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
     6b6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     6ba:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     6be:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     6c2:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     6c6:	8c 3a       	cpi	r24, 0xAC	; 172
     6c8:	9b 40       	sbci	r25, 0x0B	; 11
     6ca:	af 43       	sbci	r26, 0x3F	; 63
     6cc:	bf 43       	sbci	r27, 0x3F	; 63
     6ce:	19 f4       	brne	.+6      	; 0x6d6 <__vector_18+0x1fc>
    dop = 0;
     6d0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
     6d4:	1f c0       	rjmp	.+62     	; 0x714 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
     6d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     6da:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     6de:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     6e2:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     6e6:	8c 3a       	cpi	r24, 0xAC	; 172
     6e8:	9e 40       	sbci	r25, 0x0E	; 14
     6ea:	af 43       	sbci	r26, 0x3F	; 63
     6ec:	bf 43       	sbci	r27, 0x3F	; 63
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <__vector_18+0x21c>
    geo = 0;
     6f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
     6f4:	0f c0       	rjmp	.+30     	; 0x714 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
     6f6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <buffer>
     6fa:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <buffer+0x1>
     6fe:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <buffer+0x2>
     702:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <buffer+0x3>
     706:	8c 3a       	cpi	r24, 0xAC	; 172
     708:	9f 40       	sbci	r25, 0x0F	; 15
     70a:	af 43       	sbci	r26, 0x3F	; 63
     70c:	bf 43       	sbci	r27, 0x3F	; 63
     70e:	11 f4       	brne	.+4      	; 0x714 <__vector_18+0x23a>
    time = 0;
     710:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
     714:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     718:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     71c:	84 3f       	cpi	r24, 0xF4	; 244
     71e:	91 40       	sbci	r25, 0x01	; 1
     720:	f0 f4       	brcc	.+60     	; 0x75e <__vector_18+0x284>
     722:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     726:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72a:	89 2b       	or	r24, r25
     72c:	c1 f0       	breq	.+48     	; 0x75e <__vector_18+0x284>
     72e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
     732:	88 23       	and	r24, r24
     734:	a1 f0       	breq	.+40     	; 0x75e <__vector_18+0x284>
  {
    GPS_done = 1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
     73c:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	9f ef       	ldi	r25, 0xFF	; 255
     742:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     746:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
     74a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
    buffer = 0;
     74e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <buffer>
     752:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <buffer+0x1>
     756:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <buffer+0x2>
     75a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <buffer+0x3>
  }
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	2f 91       	pop	r18
     76c:	0f 90       	pop	r0
     76e:	0b be       	out	0x3b, r0	; 59
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
     77a:	7f 92       	push	r7
     77c:	8f 92       	push	r8
     77e:	9f 92       	push	r9
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	cc 5d       	subi	r28, 0xDC	; 220
     79a:	d1 09       	sbc	r29, r1
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	
	DDRA = 0xF0;
     7a6:	80 ef       	ldi	r24, 0xF0	; 240
     7a8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
     7aa:	8b bb       	out	0x1b, r24	; 27
     7ac:	2f ef       	ldi	r18, 0xFF	; 255
     7ae:	39 e6       	ldi	r19, 0x69	; 105
     7b0:	98 e1       	ldi	r25, 0x18	; 24
     7b2:	21 50       	subi	r18, 0x01	; 1
     7b4:	30 40       	sbci	r19, 0x00	; 0
     7b6:	90 40       	sbci	r25, 0x00	; 0
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x38>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x42>
     7bc:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     7be:	1b ba       	out	0x1b, r1	; 27
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	39 e6       	ldi	r19, 0x69	; 105
     7c4:	98 e1       	ldi	r25, 0x18	; 24
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	30 40       	sbci	r19, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x4c>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x56>
     7d0:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
     7d2:	8b bb       	out	0x1b, r24	; 27
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	39 e6       	ldi	r19, 0x69	; 105
     7d8:	88 e1       	ldi	r24, 0x18	; 24
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	80 40       	sbci	r24, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <main+0x60>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <main+0x6a>
     7e4:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     7e6:	1b ba       	out	0x1b, r1	; 27
     7e8:	9f ef       	ldi	r25, 0xFF	; 255
     7ea:	29 e6       	ldi	r18, 0x69	; 105
     7ec:	38 e1       	ldi	r19, 0x18	; 24
     7ee:	91 50       	subi	r25, 0x01	; 1
     7f0:	20 40       	sbci	r18, 0x00	; 0
     7f2:	30 40       	sbci	r19, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x74>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x7e>
     7f8:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
     7fa:	0e 94 39 06 	call	0xc72	; 0xc72 <init_UART0>
  
	transmit_UART0('\r');
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('\r');
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('H');
     80a:	88 e4       	ldi	r24, 0x48	; 72
     80c:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('e');
     810:	85 e6       	ldi	r24, 0x65	; 101
     812:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('l');
     816:	8c e6       	ldi	r24, 0x6C	; 108
     818:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('l');
     81c:	8c e6       	ldi	r24, 0x6C	; 108
     81e:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('o');
     822:	8f e6       	ldi	r24, 0x6F	; 111
     824:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
     828:	88 e2       	ldi	r24, 0x28	; 40
     82a:	e3 e4       	ldi	r30, 0x43	; 67
     82c:	f2 e0       	ldi	r31, 0x02	; 2
     82e:	de 01       	movw	r26, r28
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	01 90       	ld	r0, Z+
     834:	0d 92       	st	X+, r0
     836:	8a 95       	dec	r24
     838:	e1 f7       	brne	.-8      	; 0x832 <main+0xb8>
	transmit_string_UART0(array);
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>

	sprintf(array,"\tThis is HUSSAIN's OBC-Master code...");
     842:	86 e2       	ldi	r24, 0x26	; 38
     844:	ea e9       	ldi	r30, 0x9A	; 154
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	de 01       	movw	r26, r28
     84a:	11 96       	adiw	r26, 0x01	; 1
     84c:	01 90       	ld	r0, Z+
     84e:	0d 92       	st	X+, r0
     850:	8a 95       	dec	r24
     852:	e1 f7       	brne	.-8      	; 0x84c <main+0xd2>
	sprintf(array1,"\rCC configured and Data send to be transmitted :\t");
     854:	82 e3       	ldi	r24, 0x32	; 50
     856:	e0 ec       	ldi	r30, 0xC0	; 192
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	de 01       	movw	r26, r28
     85c:	99 96       	adiw	r26, 0x29	; 41
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	8a 95       	dec	r24
     864:	e1 f7       	brne	.-8      	; 0x85e <main+0xe4>
		
/************************************************************/
	
	uint8_t frame[100], buf[100], x;
	
	init_SPI();
     866:	0e 94 05 06 	call	0xc0a	; 0xc0a <init_SPI>
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	99 e6       	ldi	r25, 0x69	; 105
     86e:	28 e1       	ldi	r18, 0x18	; 24
     870:	81 50       	subi	r24, 0x01	; 1
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	20 40       	sbci	r18, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <main+0xf6>
     878:	00 c0       	rjmp	.+0      	; 0x87a <main+0x100>
     87a:	00 00       	nop
	_delay_ms(1000);
   
	init_CC1020();
     87c:	0e 94 a8 01 	call	0x350	; 0x350 <init_CC1020>
	
/************************************************************/
	while(1){
	PORTA = 0xA0;
     880:	0f 2e       	mov	r0, r31
     882:	f0 ea       	ldi	r31, 0xA0	; 160
     884:	af 2e       	mov	r10, r31
     886:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x50;
     888:	0f 2e       	mov	r0, r31
     88a:	f0 e5       	ldi	r31, 0x50	; 80
     88c:	bf 2e       	mov	r11, r31
     88e:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x50;
	_delay_ms(500);
	
	/**********		Start Transmission		**********/
	sprintf(frame, "Hello World");
     890:	0f 2e       	mov	r0, r31
     892:	fc e0       	ldi	r31, 0x0C	; 12
     894:	7f 2e       	mov	r7, r31
     896:	f0 2d       	mov	r31, r0
	x = init_CC1020_TX();
	
	if(x)
	{	sprintf(array2, "%d Done:\tPLL Locked\r\n", x);
     898:	0f 2e       	mov	r0, r31
     89a:	fe ef       	ldi	r31, 0xFE	; 254
     89c:	cf 2e       	mov	r12, r31
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	df 2e       	mov	r13, r31
     8a2:	f0 2d       	mov	r31, r0
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5a       	subi	r16, 0xAF	; 175
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
	
	slave_send (REAL_TIME, frame, FRAME_SIZE);
    _delay_ms(2000);
	
	///* Start transmission
	sprintf(array2,"\rCommand send to Slave :\t%d", BEGIN_TX_COMM);
     8aa:	0f 2e       	mov	r0, r31
     8ac:	fa e5       	ldi	r31, 0x5A	; 90
     8ae:	8f 2e       	mov	r8, r31
     8b0:	f0 2d       	mov	r31, r0
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f4 e1       	ldi	r31, 0x14	; 20
     8b6:	ef 2e       	mov	r14, r31
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	ff 2e       	mov	r15, r31
     8bc:	f0 2d       	mov	r31, r0
	transmit_string_UART0(array2);
	slave_send (BEGIN_TX_COMM, NULL, 0);
    _delay_ms(4000);
	
	///* Stop transmission
	sprintf(array2,"\rCommand send to Slave :\t%d", END_TX);
     8be:	0f 2e       	mov	r0, r31
     8c0:	f3 e3       	ldi	r31, 0x33	; 51
     8c2:	9f 2e       	mov	r9, r31
     8c4:	f0 2d       	mov	r31, r0
   
	init_CC1020();
	
/************************************************************/
	while(1){
	PORTA = 0xA0;
     8c6:	ab ba       	out	0x1b, r10	; 27
     8c8:	3f ef       	ldi	r19, 0xFF	; 255
     8ca:	84 e3       	ldi	r24, 0x34	; 52
     8cc:	9c e0       	ldi	r25, 0x0C	; 12
     8ce:	31 50       	subi	r19, 0x01	; 1
     8d0:	80 40       	sbci	r24, 0x00	; 0
     8d2:	90 40       	sbci	r25, 0x00	; 0
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <main+0x154>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <main+0x15e>
     8d8:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
     8da:	bb ba       	out	0x1b, r11	; 27
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	34 e3       	ldi	r19, 0x34	; 52
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	21 50       	subi	r18, 0x01	; 1
     8e4:	30 40       	sbci	r19, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0x168>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <main+0x172>
     8ec:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
     8ee:	8d e0       	ldi	r24, 0x0D	; 13
     8f0:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('\r');
     8f4:	8d e0       	ldi	r24, 0x0D	; 13
     8f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('H');
     8fa:	88 e4       	ldi	r24, 0x48	; 72
     8fc:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	transmit_UART0('i');
     900:	89 e6       	ldi	r24, 0x69	; 105
     902:	0e 94 4a 06 	call	0xc94	; 0xc94 <transmit_UART0>
	
	transmit_string_UART0(array);
     906:	ce 01       	movw	r24, r28
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0xA0;
     90e:	ab ba       	out	0x1b, r10	; 27
     910:	9f ef       	ldi	r25, 0xFF	; 255
     912:	24 e3       	ldi	r18, 0x34	; 52
     914:	3c e0       	ldi	r19, 0x0C	; 12
     916:	91 50       	subi	r25, 0x01	; 1
     918:	20 40       	sbci	r18, 0x00	; 0
     91a:	30 40       	sbci	r19, 0x00	; 0
     91c:	e1 f7       	brne	.-8      	; 0x916 <main+0x19c>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <main+0x1a6>
     920:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
     922:	bb ba       	out	0x1b, r11	; 27
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	94 e3       	ldi	r25, 0x34	; 52
     928:	2c e0       	ldi	r18, 0x0C	; 12
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	90 40       	sbci	r25, 0x00	; 0
     92e:	20 40       	sbci	r18, 0x00	; 0
     930:	e1 f7       	brne	.-8      	; 0x92a <main+0x1b0>
     932:	00 c0       	rjmp	.+0      	; 0x934 <main+0x1ba>
     934:	00 00       	nop
	_delay_ms(500);
	
	/**********		Start Transmission		**********/
	sprintf(frame, "Hello World");
     936:	e2 ef       	ldi	r30, 0xF2	; 242
     938:	f1 e0       	ldi	r31, 0x01	; 1
     93a:	de 01       	movw	r26, r28
     93c:	a7 58       	subi	r26, 0x87	; 135
     93e:	bf 4f       	sbci	r27, 0xFF	; 255
     940:	87 2d       	mov	r24, r7
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <main+0x1c8>
	x = init_CC1020_TX();
     94a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <init_CC1020_TX>
	
	if(x)
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <main+0x1da>
     952:	67 c0       	rjmp	.+206    	; 0xa22 <main+0x2a8>
	{	sprintf(array2, "%d Done:\tPLL Locked\r\n", x);
     954:	9c 01       	movw	r18, r24
     956:	33 27       	eor	r19, r19
     958:	3f 93       	push	r19
     95a:	2f 93       	push	r18
     95c:	df 92       	push	r13
     95e:	cf 92       	push	r12
     960:	1f 93       	push	r17
     962:	0f 93       	push	r16
     964:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
			transmit_string_UART0(array2);
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	else
	{	transmit_string_UART0("\tPLL Lock Failed\r\n");
		break;	
	}
	///Communication Task
	transmit_string_UART0(array1);
     96e:	ce 01       	movw	r24, r28
     970:	89 96       	adiw	r24, 0x29	; 41
     972:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	transmit_string_UART0(frame);
     976:	ce 01       	movw	r24, r28
     978:	87 58       	subi	r24, 0x87	; 135
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	
	slave_send (REAL_TIME, frame, FRAME_SIZE);
     980:	42 e2       	ldi	r20, 0x22	; 34
     982:	be 01       	movw	r22, r28
     984:	67 58       	subi	r22, 0x87	; 135
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	85 ed       	ldi	r24, 0xD5	; 213
     98a:	0e 94 3a 05 	call	0xa74	; 0xa74 <slave_send>
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	83 ed       	ldi	r24, 0xD3	; 211
     992:	90 e3       	ldi	r25, 0x30	; 48
     994:	31 50       	subi	r19, 0x01	; 1
     996:	80 40       	sbci	r24, 0x00	; 0
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <main+0x21a>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <main+0x224>
     99e:	00 00       	nop
    _delay_ms(2000);
	
	///* Start transmission
	sprintf(array2,"\rCommand send to Slave :\t%d", BEGIN_TX_COMM);
     9a0:	1f 92       	push	r1
     9a2:	8f 92       	push	r8
     9a4:	ff 92       	push	r15
     9a6:	ef 92       	push	r14
     9a8:	1f 93       	push	r17
     9aa:	0f 93       	push	r16
     9ac:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
	transmit_string_UART0(array2);
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	slave_send (BEGIN_TX_COMM, NULL, 0);
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	88 2d       	mov	r24, r8
     9be:	0e 94 3a 05 	call	0xa74	; 0xa74 <slave_send>
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	37 ea       	ldi	r19, 0xA7	; 167
     9c6:	81 e6       	ldi	r24, 0x61	; 97
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	30 40       	sbci	r19, 0x00	; 0
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <main+0x24e>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <main+0x258>
     9d2:	00 00       	nop
    _delay_ms(4000);
	
	///* Stop transmission
	sprintf(array2,"\rCommand send to Slave :\t%d", END_TX);
     9d4:	1f 92       	push	r1
     9d6:	9f 92       	push	r9
     9d8:	ff 92       	push	r15
     9da:	ef 92       	push	r14
     9dc:	1f 93       	push	r17
     9de:	0f 93       	push	r16
     9e0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <sprintf>
	transmit_string_UART0(array2);
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	slave_send (END_TX, NULL, 0);
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	89 2d       	mov	r24, r9
     9f2:	0e 94 3a 05 	call	0xa74	; 0xa74 <slave_send>
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
     9f8:	23 ed       	ldi	r18, 0xD3	; 211
     9fa:	30 e3       	ldi	r19, 0x30	; 48
     9fc:	91 50       	subi	r25, 0x01	; 1
     9fe:	20 40       	sbci	r18, 0x00	; 0
     a00:	30 40       	sbci	r19, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0x282>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x28c>
     a06:	00 00       	nop
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
    _delay_ms(2000);
	  
	///* Wait for Acknoledgement
	while(SPI_transfer(0xFF) != ACK);
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	0e 94 30 06 	call	0xc60	; 0xc60 <SPI_transfer>
     a18:	82 39       	cpi	r24, 0x92	; 146
     a1a:	d9 f7       	brne	.-10     	; 0xa12 <main+0x298>
    
	SetupCC1020PD();  // configure in PD and stop Transmission
     a1c:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
	  
/************************************************************/
	}
     a20:	52 cf       	rjmp	.-348    	; 0x8c6 <main+0x14c>
	if(x)
	{	sprintf(array2, "%d Done:\tPLL Locked\r\n", x);
			transmit_string_UART0(array2);
	}
	else
	{	transmit_string_UART0("\tPLL Lock Failed\r\n");
     a22:	80 e3       	ldi	r24, 0x30	; 48
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 4e 06 	call	0xc9c	; 0xc9c <transmit_string_UART0>
	SetupCC1020PD();  // configure in PD and stop Transmission
	  
/************************************************************/
	}
	return 0;
}
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	c4 52       	subi	r28, 0x24	; 36
     a30:	df 4f       	sbci	r29, 0xFF	; 255
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	7f 90       	pop	r7
     a56:	08 95       	ret

00000a58 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
     a58:	61 15       	cp	r22, r1
     a5a:	71 05       	cpc	r23, r1
     a5c:	51 f0       	breq	.+20     	; 0xa72 <send_preflight+0x1a>
     a5e:	fc 01       	movw	r30, r24
     a60:	68 0f       	add	r22, r24
     a62:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
     a64:	5d 9b       	sbis	0x0b, 5	; 11
     a66:	fe cf       	rjmp	.-4      	; 0xa64 <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
     a68:	91 91       	ld	r25, Z+
     a6a:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
     a6c:	e6 17       	cp	r30, r22
     a6e:	f7 07       	cpc	r31, r23
     a70:	c9 f7       	brne	.-14     	; 0xa64 <send_preflight+0xc>
     a72:	08 95       	ret

00000a74 <slave_send>:

#include "slave_comm.h"
#include "spi.h"
#include "ax25.h"

void slave_send (uint8_t command, char* data, uint8_t size){
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <slave_send+0x16>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <slave_send+0x18>
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	8d 83       	std	Y+5, r24	; 0x05
     a94:	6b 01       	movw	r12, r22
     a96:	f4 2e       	mov	r15, r20

  static uint32_t seq = 0;
  uint16_t crc = 0xFFFF;
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i, c, tsize = size;
     aa0:	4c 83       	std	Y+4, r20	; 0x04
  
  ///Initialize SPI
  init_SPI_trans (SLAVE);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 13 06 	call	0xc26	; 0xc26 <init_SPI_trans>
  
  ///* Start communication
  c = START_SPI;
     aa8:	87 ee       	ldi	r24, 0xE7	; 231
     aaa:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_START_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	ce 01       	movw	r24, r28
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	ce 01       	movw	r24, r28
     abe:	03 96       	adiw	r24, 0x03	; 3
     ac0:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
  
  ///* Notify the command
  SPI_send ((char *)&command,sizeof (uint8_t));
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	ce 01       	movw	r24, r28
     aca:	05 96       	adiw	r24, 0x05	; 5
     acc:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
  crc = update_crc_16(command, crc);
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8d 81       	ldd	r24, Y+5	; 0x05
     ad6:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	89 83       	std	Y+1, r24	; 0x01
  
  ///* Send size of data
  if((command == HM_DATA) ||(command == REAL_TIME))
     ade:	8d 81       	ldd	r24, Y+5	; 0x05
     ae0:	88 23       	and	r24, r24
     ae2:	11 f0       	breq	.+4      	; 0xae8 <slave_send+0x74>
     ae4:	85 3d       	cpi	r24, 0xD5	; 213
     ae6:	f1 f5       	brne	.+124    	; 0xb64 <slave_send+0xf0>
  {
    tsize += 4;
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	8c 5f       	subi	r24, 0xFC	; 252
     aec:	8c 83       	std	Y+4, r24	; 0x04
    SPI_send ((char *)&tsize,sizeof (uint8_t));
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	ce 01       	movw	r24, r28
     af4:	04 96       	adiw	r24, 0x04	; 4
     af6:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
    crc = update_crc_16(tsize, crc);
     afa:	69 81       	ldd	r22, Y+1	; 0x01
     afc:	7a 81       	ldd	r23, Y+2	; 0x02
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
     b04:	9a 83       	std	Y+2, r25	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
     b08:	64 e0       	ldi	r22, 0x04	; 4
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	82 e7       	ldi	r24, 0x72	; 114
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
     b14:	02 e7       	ldi	r16, 0x72	; 114
     b16:	12 e0       	ldi	r17, 0x02	; 2
     b18:	0f 2e       	mov	r0, r31
     b1a:	f6 e7       	ldi	r31, 0x76	; 118
     b1c:	af 2e       	mov	r10, r31
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	bf 2e       	mov	r11, r31
     b22:	f0 2d       	mov	r31, r0
    for(i = 0; i < sizeof(uint32_t); i++)
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
     b24:	69 81       	ldd	r22, Y+1	; 0x01
     b26:	7a 81       	ldd	r23, Y+2	; 0x02
     b28:	f8 01       	movw	r30, r16
     b2a:	81 91       	ld	r24, Z+
     b2c:	8f 01       	movw	r16, r30
     b2e:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	89 83       	std	Y+1, r24	; 0x01
    tsize += 4;
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    crc = update_crc_16(tsize, crc);
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    for(i = 0; i < sizeof(uint32_t); i++)
     b36:	0a 15       	cp	r16, r10
     b38:	1b 05       	cpc	r17, r11
     b3a:	a1 f7       	brne	.-24     	; 0xb24 <slave_send+0xb0>
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    seq++;
     b3c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <seq.2162>
     b40:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <seq.2162+0x1>
     b44:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <seq.2162+0x2>
     b48:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <seq.2162+0x3>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	a1 1d       	adc	r26, r1
     b50:	b1 1d       	adc	r27, r1
     b52:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <seq.2162>
     b56:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <seq.2162+0x1>
     b5a:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <seq.2162+0x2>
     b5e:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <seq.2162+0x3>
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <slave_send+0x10a>
  }
  else
  {
    SPI_send ((char *)&tsize,sizeof (uint8_t));
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	ce 01       	movw	r24, r28
     b6a:	04 96       	adiw	r24, 0x04	; 4
     b6c:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
    crc = update_crc_16(tsize, crc);
     b70:	69 81       	ldd	r22, Y+1	; 0x01
     b72:	7a 81       	ldd	r23, Y+2	; 0x02
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
     b7e:	6f 2d       	mov	r22, r15
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	c6 01       	movw	r24, r12
     b84:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
  for(i = 0; i < size; i++)
     b88:	ff 20       	and	r15, r15
     b8a:	a9 f0       	breq	.+42     	; 0xbb6 <slave_send+0x142>
     b8c:	86 01       	movw	r16, r12
     b8e:	fa 94       	dec	r15
     b90:	ef 2c       	mov	r14, r15
     b92:	f1 2c       	mov	r15, r1
     b94:	ff ef       	ldi	r31, 0xFF	; 255
     b96:	ef 1a       	sub	r14, r31
     b98:	ff 0a       	sbc	r15, r31
     b9a:	ec 0c       	add	r14, r12
     b9c:	fd 1c       	adc	r15, r13
    crc = update_crc_16(data[i], crc);
     b9e:	69 81       	ldd	r22, Y+1	; 0x01
     ba0:	7a 81       	ldd	r23, Y+2	; 0x02
     ba2:	f8 01       	movw	r30, r16
     ba4:	81 91       	ld	r24, Z+
     ba6:	8f 01       	movw	r16, r30
     ba8:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
    crc = update_crc_16(tsize, crc);
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
  for(i = 0; i < size; i++)
     bb0:	0e 15       	cp	r16, r14
     bb2:	1f 05       	cpc	r17, r15
     bb4:	a1 f7       	brne	.-24     	; 0xb9e <slave_send+0x12a>
    crc = update_crc_16(data[i], crc);
    
  ///* Send CRC
  crc = ~crc;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	80 95       	com	r24
     bbc:	90 95       	com	r25
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
  SPI_send ((char *)&crc, sizeof (uint16_t));
     bc2:	62 e0       	ldi	r22, 0x02	; 2
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
    
  ///* End communication
  c = END_SPI;
     bce:	8a ea       	ldi	r24, 0xAA	; 170
     bd0:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_END_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	ce 01       	movw	r24, r28
     bd8:	03 96       	adiw	r24, 0x03	; 3
     bda:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	ce 01       	movw	r24, r28
     be4:	03 96       	adiw	r24, 0x03	; 3
     be6:	0e 94 22 06 	call	0xc44	; 0xc44 <SPI_send>
      
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	08 95       	ret

00000c0a <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDR_SPI &= 0xF0;
     c0a:	87 b3       	in	r24, 0x17	; 23
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	87 bb       	out	0x17, r24	; 23
  DDR_SPI = _BV(SPICLK) | _BV(SPIDO);
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	87 bb       	out	0x17, r24	; 23
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
     c14:	87 b3       	in	r24, 0x17	; 23
     c16:	81 63       	ori	r24, 0x31	; 49
     c18:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
     c1a:	88 b3       	in	r24, 0x18	; 24
     c1c:	81 63       	ori	r24, 0x31	; 49
     c1e:	88 bb       	out	0x18, r24	; 24

  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
     c20:	83 e5       	ldi	r24, 0x53	; 83
     c22:	8d b9       	out	0x0d, r24	; 13
     c24:	08 95       	ret

00000c26 <init_SPI_trans>:
}

void init_SPI_trans(uint8_t CS_pin){
  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;
     c26:	98 b3       	in	r25, 0x18	; 24
     c28:	91 63       	ori	r25, 0x31	; 49
     c2a:	98 bb       	out	0x18, r25	; 24
  cbi (PORT_CS, CS_pin);
     c2c:	98 b3       	in	r25, 0x18	; 24
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <init_SPI_trans+0x12>
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	8a 95       	dec	r24
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <init_SPI_trans+0xe>
     c3c:	20 95       	com	r18
     c3e:	29 23       	and	r18, r25
     c40:	28 bb       	out	0x18, r18	; 24
     c42:	08 95       	ret

00000c44 <SPI_send>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
     c44:	61 15       	cp	r22, r1
     c46:	71 05       	cpc	r23, r1
     c48:	51 f0       	breq	.+20     	; 0xc5e <SPI_send+0x1a>
     c4a:	fc 01       	movw	r30, r24
     c4c:	68 0f       	add	r22, r24
     c4e:	79 1f       	adc	r23, r25
  {
	 ///* Send one char
    SPDR = str[i];
     c50:	91 91       	ld	r25, Z+
     c52:	9f b9       	out	0x0f, r25	; 15
	 ///* Wait for SPIF flag to be set (TX complete)
    while(!(SPSR & (1<<SPIF)));
     c54:	77 9b       	sbis	0x0e, 7	; 14
     c56:	fe cf       	rjmp	.-4      	; 0xc54 <SPI_send+0x10>

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
     c58:	e6 17       	cp	r30, r22
     c5a:	f7 07       	cpc	r31, r23
     c5c:	c9 f7       	brne	.-14     	; 0xc50 <SPI_send+0xc>
     c5e:	08 95       	ret

00000c60 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
     c60:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
     c62:	77 9b       	sbis	0x0e, 7	; 14
     c64:	fe cf       	rjmp	.-4      	; 0xc62 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
     c66:	8f b1       	in	r24, 0x0f	; 15
}
     c68:	08 95       	ret

00000c6a <end_SPI>:

void end_SPI(void)
{
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;	
     c6a:	88 b3       	in	r24, 0x18	; 24
     c6c:	81 63       	ori	r24, 0x31	; 49
     c6e:	88 bb       	out	0x18, r24	; 24
     c70:	08 95       	ret

00000c72 <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
     c72:	1b b8       	out	0x0b, r1	; 11
     c74:	1a b8       	out	0x0a, r1	; 10
     c76:	e5 e9       	ldi	r30, 0x95	; 149
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	10 82       	st	Z, r1
     c7c:	59 9a       	sbi	0x0b, 1	; 11
     c7e:	8a b1       	in	r24, 0x0a	; 10
     c80:	88 61       	ori	r24, 0x18	; 24
     c82:	8a b9       	out	0x0a, r24	; 10
     c84:	80 81       	ld	r24, Z
     c86:	8e 60       	ori	r24, 0x0E	; 14
     c88:	80 83       	st	Z, r24
     c8a:	87 e6       	ldi	r24, 0x67	; 103
     c8c:	89 b9       	out	0x09, r24	; 9
     c8e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     c92:	08 95       	ret

00000c94 <transmit_UART0>:
     c94:	5d 9b       	sbis	0x0b, 5	; 11
     c96:	fe cf       	rjmp	.-4      	; 0xc94 <transmit_UART0>
     c98:	8c b9       	out	0x0c, r24	; 12
     c9a:	08 95       	ret

00000c9c <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
     c9c:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     c9e:	90 81       	ld	r25, Z
     ca0:	99 23       	and	r25, r25
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <transmit_string_UART0+0x16>
     ca4:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
     ca6:	5d 9b       	sbis	0x0b, 5	; 11
     ca8:	fe cf       	rjmp	.-4      	; 0xca6 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
     caa:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     cac:	91 91       	ld	r25, Z+
     cae:	91 11       	cpse	r25, r1
     cb0:	fa cf       	rjmp	.-12     	; 0xca6 <transmit_string_UART0+0xa>
     cb2:	08 95       	ret

00000cb4 <sprintf>:
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	2e 97       	sbiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	0d 89       	ldd	r16, Y+21	; 0x15
     cce:	1e 89       	ldd	r17, Y+22	; 0x16
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	8c 83       	std	Y+4, r24	; 0x04
     cd4:	1a 83       	std	Y+2, r17	; 0x02
     cd6:	09 83       	std	Y+1, r16	; 0x01
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	9f e7       	ldi	r25, 0x7F	; 127
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	ae 01       	movw	r20, r28
     ce2:	47 5e       	subi	r20, 0xE7	; 231
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	6f 89       	ldd	r22, Y+23	; 0x17
     ce8:	78 8d       	ldd	r23, Y+24	; 0x18
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	0e 94 8a 06 	call	0xd14	; 0xd14 <vfprintf>
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	38 85       	ldd	r19, Y+8	; 0x08
     cf6:	f8 01       	movw	r30, r16
     cf8:	e2 0f       	add	r30, r18
     cfa:	f3 1f       	adc	r31, r19
     cfc:	10 82       	st	Z, r1
     cfe:	2e 96       	adiw	r28, 0x0e	; 14
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <vfprintf>:
     d14:	2f 92       	push	r2
     d16:	3f 92       	push	r3
     d18:	4f 92       	push	r4
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	2c 97       	sbiw	r28, 0x0c	; 12
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	7c 01       	movw	r14, r24
     d4a:	6b 01       	movw	r12, r22
     d4c:	8a 01       	movw	r16, r20
     d4e:	fc 01       	movw	r30, r24
     d50:	17 82       	std	Z+7, r1	; 0x07
     d52:	16 82       	std	Z+6, r1	; 0x06
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	81 ff       	sbrs	r24, 1
     d58:	bd c1       	rjmp	.+890    	; 0x10d4 <vfprintf+0x3c0>
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	4c 01       	movw	r8, r24
     d60:	f7 01       	movw	r30, r14
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	f6 01       	movw	r30, r12
     d66:	93 fd       	sbrc	r25, 3
     d68:	85 91       	lpm	r24, Z+
     d6a:	93 ff       	sbrs	r25, 3
     d6c:	81 91       	ld	r24, Z+
     d6e:	6f 01       	movw	r12, r30
     d70:	88 23       	and	r24, r24
     d72:	09 f4       	brne	.+2      	; 0xd76 <vfprintf+0x62>
     d74:	ab c1       	rjmp	.+854    	; 0x10cc <vfprintf+0x3b8>
     d76:	85 32       	cpi	r24, 0x25	; 37
     d78:	39 f4       	brne	.+14     	; 0xd88 <vfprintf+0x74>
     d7a:	93 fd       	sbrc	r25, 3
     d7c:	85 91       	lpm	r24, Z+
     d7e:	93 ff       	sbrs	r25, 3
     d80:	81 91       	ld	r24, Z+
     d82:	6f 01       	movw	r12, r30
     d84:	85 32       	cpi	r24, 0x25	; 37
     d86:	29 f4       	brne	.+10     	; 0xd92 <vfprintf+0x7e>
     d88:	b7 01       	movw	r22, r14
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
     d90:	e7 cf       	rjmp	.-50     	; 0xd60 <vfprintf+0x4c>
     d92:	51 2c       	mov	r5, r1
     d94:	31 2c       	mov	r3, r1
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	20 32       	cpi	r18, 0x20	; 32
     d9a:	a0 f4       	brcc	.+40     	; 0xdc4 <vfprintf+0xb0>
     d9c:	8b 32       	cpi	r24, 0x2B	; 43
     d9e:	69 f0       	breq	.+26     	; 0xdba <vfprintf+0xa6>
     da0:	30 f4       	brcc	.+12     	; 0xdae <vfprintf+0x9a>
     da2:	80 32       	cpi	r24, 0x20	; 32
     da4:	59 f0       	breq	.+22     	; 0xdbc <vfprintf+0xa8>
     da6:	83 32       	cpi	r24, 0x23	; 35
     da8:	69 f4       	brne	.+26     	; 0xdc4 <vfprintf+0xb0>
     daa:	20 61       	ori	r18, 0x10	; 16
     dac:	2c c0       	rjmp	.+88     	; 0xe06 <vfprintf+0xf2>
     dae:	8d 32       	cpi	r24, 0x2D	; 45
     db0:	39 f0       	breq	.+14     	; 0xdc0 <vfprintf+0xac>
     db2:	80 33       	cpi	r24, 0x30	; 48
     db4:	39 f4       	brne	.+14     	; 0xdc4 <vfprintf+0xb0>
     db6:	21 60       	ori	r18, 0x01	; 1
     db8:	26 c0       	rjmp	.+76     	; 0xe06 <vfprintf+0xf2>
     dba:	22 60       	ori	r18, 0x02	; 2
     dbc:	24 60       	ori	r18, 0x04	; 4
     dbe:	23 c0       	rjmp	.+70     	; 0xe06 <vfprintf+0xf2>
     dc0:	28 60       	ori	r18, 0x08	; 8
     dc2:	21 c0       	rjmp	.+66     	; 0xe06 <vfprintf+0xf2>
     dc4:	27 fd       	sbrc	r18, 7
     dc6:	27 c0       	rjmp	.+78     	; 0xe16 <vfprintf+0x102>
     dc8:	30 ed       	ldi	r19, 0xD0	; 208
     dca:	38 0f       	add	r19, r24
     dcc:	3a 30       	cpi	r19, 0x0A	; 10
     dce:	78 f4       	brcc	.+30     	; 0xdee <vfprintf+0xda>
     dd0:	26 ff       	sbrs	r18, 6
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <vfprintf+0xcc>
     dd4:	fa e0       	ldi	r31, 0x0A	; 10
     dd6:	5f 9e       	mul	r5, r31
     dd8:	30 0d       	add	r19, r0
     dda:	11 24       	eor	r1, r1
     ddc:	53 2e       	mov	r5, r19
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <vfprintf+0xf2>
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	38 9e       	mul	r3, r24
     de4:	30 0d       	add	r19, r0
     de6:	11 24       	eor	r1, r1
     de8:	33 2e       	mov	r3, r19
     dea:	20 62       	ori	r18, 0x20	; 32
     dec:	0c c0       	rjmp	.+24     	; 0xe06 <vfprintf+0xf2>
     dee:	8e 32       	cpi	r24, 0x2E	; 46
     df0:	21 f4       	brne	.+8      	; 0xdfa <vfprintf+0xe6>
     df2:	26 fd       	sbrc	r18, 6
     df4:	6b c1       	rjmp	.+726    	; 0x10cc <vfprintf+0x3b8>
     df6:	20 64       	ori	r18, 0x40	; 64
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <vfprintf+0xf2>
     dfa:	8c 36       	cpi	r24, 0x6C	; 108
     dfc:	11 f4       	brne	.+4      	; 0xe02 <vfprintf+0xee>
     dfe:	20 68       	ori	r18, 0x80	; 128
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <vfprintf+0xf2>
     e02:	88 36       	cpi	r24, 0x68	; 104
     e04:	41 f4       	brne	.+16     	; 0xe16 <vfprintf+0x102>
     e06:	f6 01       	movw	r30, r12
     e08:	93 fd       	sbrc	r25, 3
     e0a:	85 91       	lpm	r24, Z+
     e0c:	93 ff       	sbrs	r25, 3
     e0e:	81 91       	ld	r24, Z+
     e10:	6f 01       	movw	r12, r30
     e12:	81 11       	cpse	r24, r1
     e14:	c1 cf       	rjmp	.-126    	; 0xd98 <vfprintf+0x84>
     e16:	98 2f       	mov	r25, r24
     e18:	9f 7d       	andi	r25, 0xDF	; 223
     e1a:	95 54       	subi	r25, 0x45	; 69
     e1c:	93 30       	cpi	r25, 0x03	; 3
     e1e:	28 f4       	brcc	.+10     	; 0xe2a <vfprintf+0x116>
     e20:	0c 5f       	subi	r16, 0xFC	; 252
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	ff e3       	ldi	r31, 0x3F	; 63
     e26:	f9 83       	std	Y+1, r31	; 0x01
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <vfprintf+0x130>
     e2a:	83 36       	cpi	r24, 0x63	; 99
     e2c:	31 f0       	breq	.+12     	; 0xe3a <vfprintf+0x126>
     e2e:	83 37       	cpi	r24, 0x73	; 115
     e30:	71 f0       	breq	.+28     	; 0xe4e <vfprintf+0x13a>
     e32:	83 35       	cpi	r24, 0x53	; 83
     e34:	09 f0       	breq	.+2      	; 0xe38 <vfprintf+0x124>
     e36:	5b c0       	rjmp	.+182    	; 0xeee <vfprintf+0x1da>
     e38:	22 c0       	rjmp	.+68     	; 0xe7e <vfprintf+0x16a>
     e3a:	f8 01       	movw	r30, r16
     e3c:	80 81       	ld	r24, Z
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	0e 5f       	subi	r16, 0xFE	; 254
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	44 24       	eor	r4, r4
     e46:	43 94       	inc	r4
     e48:	51 2c       	mov	r5, r1
     e4a:	54 01       	movw	r10, r8
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <vfprintf+0x164>
     e4e:	38 01       	movw	r6, r16
     e50:	f2 e0       	ldi	r31, 0x02	; 2
     e52:	6f 0e       	add	r6, r31
     e54:	71 1c       	adc	r7, r1
     e56:	f8 01       	movw	r30, r16
     e58:	a0 80       	ld	r10, Z
     e5a:	b1 80       	ldd	r11, Z+1	; 0x01
     e5c:	26 ff       	sbrs	r18, 6
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <vfprintf+0x152>
     e60:	65 2d       	mov	r22, r5
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <vfprintf+0x156>
     e66:	6f ef       	ldi	r22, 0xFF	; 255
     e68:	7f ef       	ldi	r23, 0xFF	; 255
     e6a:	c5 01       	movw	r24, r10
     e6c:	2c 87       	std	Y+12, r18	; 0x0c
     e6e:	0e 94 90 08 	call	0x1120	; 0x1120 <strnlen>
     e72:	2c 01       	movw	r4, r24
     e74:	83 01       	movw	r16, r6
     e76:	2c 85       	ldd	r18, Y+12	; 0x0c
     e78:	2f 77       	andi	r18, 0x7F	; 127
     e7a:	22 2e       	mov	r2, r18
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <vfprintf+0x198>
     e7e:	38 01       	movw	r6, r16
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	6f 0e       	add	r6, r31
     e84:	71 1c       	adc	r7, r1
     e86:	f8 01       	movw	r30, r16
     e88:	a0 80       	ld	r10, Z
     e8a:	b1 80       	ldd	r11, Z+1	; 0x01
     e8c:	26 ff       	sbrs	r18, 6
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <vfprintf+0x182>
     e90:	65 2d       	mov	r22, r5
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x186>
     e96:	6f ef       	ldi	r22, 0xFF	; 255
     e98:	7f ef       	ldi	r23, 0xFF	; 255
     e9a:	c5 01       	movw	r24, r10
     e9c:	2c 87       	std	Y+12, r18	; 0x0c
     e9e:	0e 94 85 08 	call	0x110a	; 0x110a <strnlen_P>
     ea2:	2c 01       	movw	r4, r24
     ea4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea6:	20 68       	ori	r18, 0x80	; 128
     ea8:	22 2e       	mov	r2, r18
     eaa:	83 01       	movw	r16, r6
     eac:	23 fc       	sbrc	r2, 3
     eae:	1b c0       	rjmp	.+54     	; 0xee6 <vfprintf+0x1d2>
     eb0:	83 2d       	mov	r24, r3
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	48 16       	cp	r4, r24
     eb6:	59 06       	cpc	r5, r25
     eb8:	b0 f4       	brcc	.+44     	; 0xee6 <vfprintf+0x1d2>
     eba:	b7 01       	movw	r22, r14
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
     ec4:	3a 94       	dec	r3
     ec6:	f4 cf       	rjmp	.-24     	; 0xeb0 <vfprintf+0x19c>
     ec8:	f5 01       	movw	r30, r10
     eca:	27 fc       	sbrc	r2, 7
     ecc:	85 91       	lpm	r24, Z+
     ece:	27 fe       	sbrs	r2, 7
     ed0:	81 91       	ld	r24, Z+
     ed2:	5f 01       	movw	r10, r30
     ed4:	b7 01       	movw	r22, r14
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
     edc:	31 10       	cpse	r3, r1
     ede:	3a 94       	dec	r3
     ee0:	f1 e0       	ldi	r31, 0x01	; 1
     ee2:	4f 1a       	sub	r4, r31
     ee4:	51 08       	sbc	r5, r1
     ee6:	41 14       	cp	r4, r1
     ee8:	51 04       	cpc	r5, r1
     eea:	71 f7       	brne	.-36     	; 0xec8 <vfprintf+0x1b4>
     eec:	e5 c0       	rjmp	.+458    	; 0x10b8 <vfprintf+0x3a4>
     eee:	84 36       	cpi	r24, 0x64	; 100
     ef0:	11 f0       	breq	.+4      	; 0xef6 <vfprintf+0x1e2>
     ef2:	89 36       	cpi	r24, 0x69	; 105
     ef4:	39 f5       	brne	.+78     	; 0xf44 <vfprintf+0x230>
     ef6:	f8 01       	movw	r30, r16
     ef8:	27 ff       	sbrs	r18, 7
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <vfprintf+0x1f6>
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	0c 5f       	subi	r16, 0xFC	; 252
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <vfprintf+0x206>
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	07 2e       	mov	r0, r23
     f10:	00 0c       	add	r0, r0
     f12:	88 0b       	sbc	r24, r24
     f14:	99 0b       	sbc	r25, r25
     f16:	0e 5f       	subi	r16, 0xFE	; 254
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	2f 76       	andi	r18, 0x6F	; 111
     f1c:	72 2e       	mov	r7, r18
     f1e:	97 ff       	sbrs	r25, 7
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x220>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	20 68       	ori	r18, 0x80	; 128
     f32:	72 2e       	mov	r7, r18
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	a4 01       	movw	r20, r8
     f3a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__ultoa_invert>
     f3e:	a8 2e       	mov	r10, r24
     f40:	a8 18       	sub	r10, r8
     f42:	44 c0       	rjmp	.+136    	; 0xfcc <vfprintf+0x2b8>
     f44:	85 37       	cpi	r24, 0x75	; 117
     f46:	29 f4       	brne	.+10     	; 0xf52 <vfprintf+0x23e>
     f48:	2f 7e       	andi	r18, 0xEF	; 239
     f4a:	b2 2e       	mov	r11, r18
     f4c:	2a e0       	ldi	r18, 0x0A	; 10
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	25 c0       	rjmp	.+74     	; 0xf9c <vfprintf+0x288>
     f52:	f2 2f       	mov	r31, r18
     f54:	f9 7f       	andi	r31, 0xF9	; 249
     f56:	bf 2e       	mov	r11, r31
     f58:	8f 36       	cpi	r24, 0x6F	; 111
     f5a:	c1 f0       	breq	.+48     	; 0xf8c <vfprintf+0x278>
     f5c:	18 f4       	brcc	.+6      	; 0xf64 <vfprintf+0x250>
     f5e:	88 35       	cpi	r24, 0x58	; 88
     f60:	79 f0       	breq	.+30     	; 0xf80 <vfprintf+0x26c>
     f62:	b4 c0       	rjmp	.+360    	; 0x10cc <vfprintf+0x3b8>
     f64:	80 37       	cpi	r24, 0x70	; 112
     f66:	19 f0       	breq	.+6      	; 0xf6e <vfprintf+0x25a>
     f68:	88 37       	cpi	r24, 0x78	; 120
     f6a:	21 f0       	breq	.+8      	; 0xf74 <vfprintf+0x260>
     f6c:	af c0       	rjmp	.+350    	; 0x10cc <vfprintf+0x3b8>
     f6e:	2f 2f       	mov	r18, r31
     f70:	20 61       	ori	r18, 0x10	; 16
     f72:	b2 2e       	mov	r11, r18
     f74:	b4 fe       	sbrs	r11, 4
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <vfprintf+0x27e>
     f78:	8b 2d       	mov	r24, r11
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	b8 2e       	mov	r11, r24
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <vfprintf+0x27e>
     f80:	24 ff       	sbrs	r18, 4
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <vfprintf+0x284>
     f84:	9f 2f       	mov	r25, r31
     f86:	96 60       	ori	r25, 0x06	; 6
     f88:	b9 2e       	mov	r11, r25
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <vfprintf+0x284>
     f8c:	28 e0       	ldi	r18, 0x08	; 8
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <vfprintf+0x288>
     f92:	20 e1       	ldi	r18, 0x10	; 16
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x288>
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	32 e0       	ldi	r19, 0x02	; 2
     f9c:	f8 01       	movw	r30, r16
     f9e:	b7 fe       	sbrs	r11, 7
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <vfprintf+0x29c>
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0c 5f       	subi	r16, 0xFC	; 252
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <vfprintf+0x2a8>
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 5f       	subi	r16, 0xFE	; 254
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	a4 01       	movw	r20, r8
     fbe:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__ultoa_invert>
     fc2:	a8 2e       	mov	r10, r24
     fc4:	a8 18       	sub	r10, r8
     fc6:	fb 2d       	mov	r31, r11
     fc8:	ff 77       	andi	r31, 0x7F	; 127
     fca:	7f 2e       	mov	r7, r31
     fcc:	76 fe       	sbrs	r7, 6
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <vfprintf+0x2d2>
     fd0:	37 2d       	mov	r19, r7
     fd2:	3e 7f       	andi	r19, 0xFE	; 254
     fd4:	a5 14       	cp	r10, r5
     fd6:	50 f4       	brcc	.+20     	; 0xfec <vfprintf+0x2d8>
     fd8:	74 fe       	sbrs	r7, 4
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <vfprintf+0x2dc>
     fdc:	72 fc       	sbrc	r7, 2
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <vfprintf+0x2dc>
     fe0:	37 2d       	mov	r19, r7
     fe2:	3e 7e       	andi	r19, 0xEE	; 238
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <vfprintf+0x2dc>
     fe6:	ba 2c       	mov	r11, r10
     fe8:	37 2d       	mov	r19, r7
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vfprintf+0x2de>
     fec:	ba 2c       	mov	r11, r10
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <vfprintf+0x2de>
     ff0:	b5 2c       	mov	r11, r5
     ff2:	34 ff       	sbrs	r19, 4
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <vfprintf+0x2fc>
     ff6:	fe 01       	movw	r30, r28
     ff8:	ea 0d       	add	r30, r10
     ffa:	f1 1d       	adc	r31, r1
     ffc:	80 81       	ld	r24, Z
     ffe:	80 33       	cpi	r24, 0x30	; 48
    1000:	11 f4       	brne	.+4      	; 0x1006 <vfprintf+0x2f2>
    1002:	39 7e       	andi	r19, 0xE9	; 233
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <vfprintf+0x304>
    1006:	32 ff       	sbrs	r19, 2
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x302>
    100a:	b3 94       	inc	r11
    100c:	b3 94       	inc	r11
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <vfprintf+0x304>
    1010:	83 2f       	mov	r24, r19
    1012:	86 78       	andi	r24, 0x86	; 134
    1014:	09 f0       	breq	.+2      	; 0x1018 <vfprintf+0x304>
    1016:	b3 94       	inc	r11
    1018:	33 fd       	sbrc	r19, 3
    101a:	13 c0       	rjmp	.+38     	; 0x1042 <vfprintf+0x32e>
    101c:	30 ff       	sbrs	r19, 0
    101e:	06 c0       	rjmp	.+12     	; 0x102c <vfprintf+0x318>
    1020:	5a 2c       	mov	r5, r10
    1022:	b3 14       	cp	r11, r3
    1024:	18 f4       	brcc	.+6      	; 0x102c <vfprintf+0x318>
    1026:	53 0c       	add	r5, r3
    1028:	5b 18       	sub	r5, r11
    102a:	b3 2c       	mov	r11, r3
    102c:	b3 14       	cp	r11, r3
    102e:	68 f4       	brcc	.+26     	; 0x104a <vfprintf+0x336>
    1030:	b7 01       	movw	r22, r14
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	3c 87       	std	Y+12, r19	; 0x0c
    1038:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    103c:	b3 94       	inc	r11
    103e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1040:	f5 cf       	rjmp	.-22     	; 0x102c <vfprintf+0x318>
    1042:	b3 14       	cp	r11, r3
    1044:	10 f4       	brcc	.+4      	; 0x104a <vfprintf+0x336>
    1046:	3b 18       	sub	r3, r11
    1048:	01 c0       	rjmp	.+2      	; 0x104c <vfprintf+0x338>
    104a:	31 2c       	mov	r3, r1
    104c:	34 ff       	sbrs	r19, 4
    104e:	12 c0       	rjmp	.+36     	; 0x1074 <vfprintf+0x360>
    1050:	b7 01       	movw	r22, r14
    1052:	80 e3       	ldi	r24, 0x30	; 48
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	3c 87       	std	Y+12, r19	; 0x0c
    1058:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    105c:	3c 85       	ldd	r19, Y+12	; 0x0c
    105e:	32 ff       	sbrs	r19, 2
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <vfprintf+0x37c>
    1062:	31 fd       	sbrc	r19, 1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <vfprintf+0x358>
    1066:	88 e7       	ldi	r24, 0x78	; 120
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x35c>
    106c:	88 e5       	ldi	r24, 0x58	; 88
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b7 01       	movw	r22, r14
    1072:	0c c0       	rjmp	.+24     	; 0x108c <vfprintf+0x378>
    1074:	83 2f       	mov	r24, r19
    1076:	86 78       	andi	r24, 0x86	; 134
    1078:	59 f0       	breq	.+22     	; 0x1090 <vfprintf+0x37c>
    107a:	31 ff       	sbrs	r19, 1
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x36e>
    107e:	8b e2       	ldi	r24, 0x2B	; 43
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x370>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	37 fd       	sbrc	r19, 7
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	b7 01       	movw	r22, r14
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    1090:	a5 14       	cp	r10, r5
    1092:	38 f4       	brcc	.+14     	; 0x10a2 <vfprintf+0x38e>
    1094:	b7 01       	movw	r22, r14
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    109e:	5a 94       	dec	r5
    10a0:	f7 cf       	rjmp	.-18     	; 0x1090 <vfprintf+0x37c>
    10a2:	aa 94       	dec	r10
    10a4:	f4 01       	movw	r30, r8
    10a6:	ea 0d       	add	r30, r10
    10a8:	f1 1d       	adc	r31, r1
    10aa:	80 81       	ld	r24, Z
    10ac:	b7 01       	movw	r22, r14
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    10b4:	a1 10       	cpse	r10, r1
    10b6:	f5 cf       	rjmp	.-22     	; 0x10a2 <vfprintf+0x38e>
    10b8:	33 20       	and	r3, r3
    10ba:	09 f4       	brne	.+2      	; 0x10be <vfprintf+0x3aa>
    10bc:	51 ce       	rjmp	.-862    	; 0xd60 <vfprintf+0x4c>
    10be:	b7 01       	movw	r22, r14
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 9b 08 	call	0x1136	; 0x1136 <fputc>
    10c8:	3a 94       	dec	r3
    10ca:	f6 cf       	rjmp	.-20     	; 0x10b8 <vfprintf+0x3a4>
    10cc:	f7 01       	movw	r30, r14
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x3c4>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	2c 96       	adiw	r28, 0x0c	; 12
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	7f 90       	pop	r7
    10fe:	6f 90       	pop	r6
    1100:	5f 90       	pop	r5
    1102:	4f 90       	pop	r4
    1104:	3f 90       	pop	r3
    1106:	2f 90       	pop	r2
    1108:	08 95       	ret

0000110a <strnlen_P>:
    110a:	fc 01       	movw	r30, r24
    110c:	05 90       	lpm	r0, Z+
    110e:	61 50       	subi	r22, 0x01	; 1
    1110:	70 40       	sbci	r23, 0x00	; 0
    1112:	01 10       	cpse	r0, r1
    1114:	d8 f7       	brcc	.-10     	; 0x110c <strnlen_P+0x2>
    1116:	80 95       	com	r24
    1118:	90 95       	com	r25
    111a:	8e 0f       	add	r24, r30
    111c:	9f 1f       	adc	r25, r31
    111e:	08 95       	ret

00001120 <strnlen>:
    1120:	fc 01       	movw	r30, r24
    1122:	61 50       	subi	r22, 0x01	; 1
    1124:	70 40       	sbci	r23, 0x00	; 0
    1126:	01 90       	ld	r0, Z+
    1128:	01 10       	cpse	r0, r1
    112a:	d8 f7       	brcc	.-10     	; 0x1122 <strnlen+0x2>
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	08 95       	ret

00001136 <fputc>:
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	fb 01       	movw	r30, r22
    1140:	23 81       	ldd	r18, Z+3	; 0x03
    1142:	21 fd       	sbrc	r18, 1
    1144:	03 c0       	rjmp	.+6      	; 0x114c <fputc+0x16>
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	28 c0       	rjmp	.+80     	; 0x119c <fputc+0x66>
    114c:	22 ff       	sbrs	r18, 2
    114e:	16 c0       	rjmp	.+44     	; 0x117c <fputc+0x46>
    1150:	46 81       	ldd	r20, Z+6	; 0x06
    1152:	57 81       	ldd	r21, Z+7	; 0x07
    1154:	24 81       	ldd	r18, Z+4	; 0x04
    1156:	35 81       	ldd	r19, Z+5	; 0x05
    1158:	42 17       	cp	r20, r18
    115a:	53 07       	cpc	r21, r19
    115c:	44 f4       	brge	.+16     	; 0x116e <fputc+0x38>
    115e:	a0 81       	ld	r26, Z
    1160:	b1 81       	ldd	r27, Z+1	; 0x01
    1162:	9d 01       	movw	r18, r26
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	31 83       	std	Z+1, r19	; 0x01
    116a:	20 83       	st	Z, r18
    116c:	8c 93       	st	X, r24
    116e:	26 81       	ldd	r18, Z+6	; 0x06
    1170:	37 81       	ldd	r19, Z+7	; 0x07
    1172:	2f 5f       	subi	r18, 0xFF	; 255
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	37 83       	std	Z+7, r19	; 0x07
    1178:	26 83       	std	Z+6, r18	; 0x06
    117a:	10 c0       	rjmp	.+32     	; 0x119c <fputc+0x66>
    117c:	eb 01       	movw	r28, r22
    117e:	09 2f       	mov	r16, r25
    1180:	18 2f       	mov	r17, r24
    1182:	00 84       	ldd	r0, Z+8	; 0x08
    1184:	f1 85       	ldd	r31, Z+9	; 0x09
    1186:	e0 2d       	mov	r30, r0
    1188:	09 95       	icall
    118a:	89 2b       	or	r24, r25
    118c:	e1 f6       	brne	.-72     	; 0x1146 <fputc+0x10>
    118e:	8e 81       	ldd	r24, Y+6	; 0x06
    1190:	9f 81       	ldd	r25, Y+7	; 0x07
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	9f 83       	std	Y+7, r25	; 0x07
    1196:	8e 83       	std	Y+6, r24	; 0x06
    1198:	81 2f       	mov	r24, r17
    119a:	90 2f       	mov	r25, r16
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <__ultoa_invert>:
    11a6:	fa 01       	movw	r30, r20
    11a8:	aa 27       	eor	r26, r26
    11aa:	28 30       	cpi	r18, 0x08	; 8
    11ac:	51 f1       	breq	.+84     	; 0x1202 <__ultoa_invert+0x5c>
    11ae:	20 31       	cpi	r18, 0x10	; 16
    11b0:	81 f1       	breq	.+96     	; 0x1212 <__ultoa_invert+0x6c>
    11b2:	e8 94       	clt
    11b4:	6f 93       	push	r22
    11b6:	6e 7f       	andi	r22, 0xFE	; 254
    11b8:	6e 5f       	subi	r22, 0xFE	; 254
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	af 4f       	sbci	r26, 0xFF	; 255
    11c2:	b1 e0       	ldi	r27, 0x01	; 1
    11c4:	3e d0       	rcall	.+124    	; 0x1242 <__ultoa_invert+0x9c>
    11c6:	b4 e0       	ldi	r27, 0x04	; 4
    11c8:	3c d0       	rcall	.+120    	; 0x1242 <__ultoa_invert+0x9c>
    11ca:	67 0f       	add	r22, r23
    11cc:	78 1f       	adc	r23, r24
    11ce:	89 1f       	adc	r24, r25
    11d0:	9a 1f       	adc	r25, r26
    11d2:	a1 1d       	adc	r26, r1
    11d4:	68 0f       	add	r22, r24
    11d6:	79 1f       	adc	r23, r25
    11d8:	8a 1f       	adc	r24, r26
    11da:	91 1d       	adc	r25, r1
    11dc:	a1 1d       	adc	r26, r1
    11de:	6a 0f       	add	r22, r26
    11e0:	71 1d       	adc	r23, r1
    11e2:	81 1d       	adc	r24, r1
    11e4:	91 1d       	adc	r25, r1
    11e6:	a1 1d       	adc	r26, r1
    11e8:	20 d0       	rcall	.+64     	; 0x122a <__ultoa_invert+0x84>
    11ea:	09 f4       	brne	.+2      	; 0x11ee <__ultoa_invert+0x48>
    11ec:	68 94       	set
    11ee:	3f 91       	pop	r19
    11f0:	2a e0       	ldi	r18, 0x0A	; 10
    11f2:	26 9f       	mul	r18, r22
    11f4:	11 24       	eor	r1, r1
    11f6:	30 19       	sub	r19, r0
    11f8:	30 5d       	subi	r19, 0xD0	; 208
    11fa:	31 93       	st	Z+, r19
    11fc:	de f6       	brtc	.-74     	; 0x11b4 <__ultoa_invert+0xe>
    11fe:	cf 01       	movw	r24, r30
    1200:	08 95       	ret
    1202:	46 2f       	mov	r20, r22
    1204:	47 70       	andi	r20, 0x07	; 7
    1206:	40 5d       	subi	r20, 0xD0	; 208
    1208:	41 93       	st	Z+, r20
    120a:	b3 e0       	ldi	r27, 0x03	; 3
    120c:	0f d0       	rcall	.+30     	; 0x122c <__ultoa_invert+0x86>
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__ultoa_invert+0x5c>
    1210:	f6 cf       	rjmp	.-20     	; 0x11fe <__ultoa_invert+0x58>
    1212:	46 2f       	mov	r20, r22
    1214:	4f 70       	andi	r20, 0x0F	; 15
    1216:	40 5d       	subi	r20, 0xD0	; 208
    1218:	4a 33       	cpi	r20, 0x3A	; 58
    121a:	18 f0       	brcs	.+6      	; 0x1222 <__ultoa_invert+0x7c>
    121c:	49 5d       	subi	r20, 0xD9	; 217
    121e:	31 fd       	sbrc	r19, 1
    1220:	40 52       	subi	r20, 0x20	; 32
    1222:	41 93       	st	Z+, r20
    1224:	02 d0       	rcall	.+4      	; 0x122a <__ultoa_invert+0x84>
    1226:	a9 f7       	brne	.-22     	; 0x1212 <__ultoa_invert+0x6c>
    1228:	ea cf       	rjmp	.-44     	; 0x11fe <__ultoa_invert+0x58>
    122a:	b4 e0       	ldi	r27, 0x04	; 4
    122c:	a6 95       	lsr	r26
    122e:	97 95       	ror	r25
    1230:	87 95       	ror	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	ba 95       	dec	r27
    1238:	c9 f7       	brne	.-14     	; 0x122c <__ultoa_invert+0x86>
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	61 05       	cpc	r22, r1
    123e:	71 05       	cpc	r23, r1
    1240:	08 95       	ret
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	0a 2e       	mov	r0, r26
    1248:	06 94       	lsr	r0
    124a:	57 95       	ror	r21
    124c:	47 95       	ror	r20
    124e:	37 95       	ror	r19
    1250:	27 95       	ror	r18
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__ultoa_invert+0xa2>
    1256:	62 0f       	add	r22, r18
    1258:	73 1f       	adc	r23, r19
    125a:	84 1f       	adc	r24, r20
    125c:	95 1f       	adc	r25, r21
    125e:	a0 1d       	adc	r26, r0
    1260:	08 95       	ret

00001262 <_exit>:
    1262:	f8 94       	cli

00001264 <__stop_program>:
    1264:	ff cf       	rjmp	.-2      	; 0x1264 <__stop_program>
