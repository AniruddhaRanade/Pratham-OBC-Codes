
hMaster_uarttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000378  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd9  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097a  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d9  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e0  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 37       	cpi	r26, 0x70	; 112
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	c8 57       	subi	r28, 0x78	; 120
  c8:	d1 09       	sbc	r29, r1
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	char temp;
	
	DDRA = 0xF0;
  d4:	80 ef       	ldi	r24, 0xF0	; 240
  d6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
  d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	39 e6       	ldi	r19, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2c>
  ea:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
  ec:	1b ba       	out	0x1b, r1	; 27
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	39 e6       	ldi	r19, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x36>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x40>
  fe:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 100:	8b bb       	out	0x1b, r24	; 27
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	39 e6       	ldi	r19, 0x69	; 105
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x4a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x54>
 112:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 114:	1b ba       	out	0x1b, r1	; 27
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	29 e6       	ldi	r18, 0x69	; 105
 11a:	38 e1       	ldi	r19, 0x18	; 24
 11c:	91 50       	subi	r25, 0x01	; 1
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x5e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x68>
 126:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 128:	0e 94 53 01 	call	0x2a6	; 0x2a6 <init_UART0>
	init_UART1();
 12c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_UART1>
  
	transmit_UART0('\r');
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('\r');
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('H');
 13c:	88 e4       	ldi	r24, 0x48	; 72
 13e:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('e');
 142:	85 e6       	ldi	r24, 0x65	; 101
 144:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('l');
 148:	8c e6       	ldi	r24, 0x6C	; 108
 14a:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('l');
 14e:	8c e6       	ldi	r24, 0x6C	; 108
 150:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('o');
 154:	8f e6       	ldi	r24, 0x6F	; 111
 156:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	
	transmit_UART1('\r');
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('\r');
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('H');
 166:	88 e4       	ldi	r24, 0x48	; 72
 168:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('e');
 16c:	85 e6       	ldi	r24, 0x65	; 101
 16e:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('l');
 172:	8c e6       	ldi	r24, 0x6C	; 108
 174:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('l');
 178:	8c e6       	ldi	r24, 0x6C	; 108
 17a:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('o');
 17e:	8f e6       	ldi	r24, 0x6F	; 111
 180:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	e7 e4       	ldi	r30, 0x47	; 71
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	de 01       	movw	r26, r28
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	01 90       	ld	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	8a 95       	dec	r24
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0xd0>
	transmit_string_UART0(array);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 ae 01 	call	0x35c	; 0x35c <transmit_string_UART0>
	transmit_string_UART1(array);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 98 01 	call	0x330	; 0x330 <transmit_string_UART1>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 1a6:	86 e2       	ldi	r24, 0x26	; 38
 1a8:	e0 e0       	ldi	r30, 0x00	; 0
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	de 01       	movw	r26, r28
 1ae:	99 96       	adiw	r26, 0x29	; 41
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0xf2>
	sprintf(array2,"\rU r communicating through UART_");
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	e6 e2       	ldi	r30, 0x26	; 38
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	de 01       	movw	r26, r28
 1c0:	af 5a       	subi	r26, 0xAF	; 175
 1c2:	bf 4f       	sbci	r27, 0xFF	; 255
 1c4:	01 90       	ld	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	8a 95       	dec	r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x106>
		
/************************************************************/

	while(1){
	PORTA = 0xA0;
 1cc:	00 ea       	ldi	r16, 0xA0	; 160
	_delay_ms(500);
	PORTA = 0x50;
 1ce:	10 e5       	ldi	r17, 0x50	; 80
	sprintf(array2,"\rU r communicating through UART_");
		
/************************************************************/

	while(1){
	PORTA = 0xA0;
 1d0:	0b bb       	out	0x1b, r16	; 27
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	94 e3       	ldi	r25, 0x34	; 52
 1d6:	2c e0       	ldi	r18, 0x0C	; 12
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x11a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x124>
 1e2:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 1e4:	1b bb       	out	0x1b, r17	; 27
 1e6:	3f ef       	ldi	r19, 0xFF	; 255
 1e8:	84 e3       	ldi	r24, 0x34	; 52
 1ea:	9c e0       	ldi	r25, 0x0C	; 12
 1ec:	31 50       	subi	r19, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x12e>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x138>
 1f6:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART1('\r');
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('\r');
 1fe:	8d e0       	ldi	r24, 0x0D	; 13
 200:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('H');
 204:	88 e4       	ldi	r24, 0x48	; 72
 206:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1('i');
 20a:	89 e6       	ldi	r24, 0x69	; 105
 20c:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	
	transmit_string_UART1(array1);
 210:	ce 01       	movw	r24, r28
 212:	89 96       	adiw	r24, 0x29	; 41
 214:	0e 94 98 01 	call	0x330	; 0x330 <transmit_string_UART1>
	transmit_string_UART1(array2);
 218:	ce 01       	movw	r24, r28
 21a:	8f 5a       	subi	r24, 0xAF	; 175
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	0e 94 98 01 	call	0x330	; 0x330 <transmit_string_UART1>
	transmit_UART1('1');
 222:	81 e3       	ldi	r24, 0x31	; 49
 224:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	temp = receive_UART1();
 228:	0e 94 8c 01 	call	0x318	; 0x318 <receive_UART1>
 22c:	f8 2e       	mov	r15, r24
	transmit_UART1('\t');
 22e:	89 e0       	ldi	r24, 0x09	; 9
 230:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
	transmit_UART1(temp);
 234:	8f 2d       	mov	r24, r15
 236:	0e 94 80 01 	call	0x300	; 0x300 <transmit_UART1>
/************************************************************/
	PORTA = 0xA0;
 23a:	0b bb       	out	0x1b, r16	; 27
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	34 e3       	ldi	r19, 0x34	; 52
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	21 50       	subi	r18, 0x01	; 1
 244:	30 40       	sbci	r19, 0x00	; 0
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x184>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x18e>
 24c:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 24e:	1b bb       	out	0x1b, r17	; 27
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	24 e3       	ldi	r18, 0x34	; 52
 254:	3c e0       	ldi	r19, 0x0C	; 12
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x198>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x1a2>
 260:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 262:	8d e0       	ldi	r24, 0x0D	; 13
 264:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('\r');
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('H');
 26e:	88 e4       	ldi	r24, 0x48	; 72
 270:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0('i');
 274:	89 e6       	ldi	r24, 0x69	; 105
 276:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	
	transmit_string_UART0(array1);
 27a:	ce 01       	movw	r24, r28
 27c:	89 96       	adiw	r24, 0x29	; 41
 27e:	0e 94 ae 01 	call	0x35c	; 0x35c <transmit_string_UART0>
	transmit_string_UART0(array2);
 282:	ce 01       	movw	r24, r28
 284:	8f 5a       	subi	r24, 0xAF	; 175
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	0e 94 ae 01 	call	0x35c	; 0x35c <transmit_string_UART0>
	transmit_UART0('0');
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	temp = receive_UART0();
 292:	0e 94 94 01 	call	0x328	; 0x328 <receive_UART0>
 296:	f8 2e       	mov	r15, r24
	transmit_UART0('\t');
 298:	89 e0       	ldi	r24, 0x09	; 9
 29a:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>
	transmit_UART0(temp);
 29e:	8f 2d       	mov	r24, r15
 2a0:	0e 94 88 01 	call	0x310	; 0x310 <transmit_UART0>

/************************************************************/
	}
 2a4:	95 cf       	rjmp	.-214    	; 0x1d0 <main+0x112>

000002a6 <init_UART0>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 2a6:	1b b8       	out	0x0b, r1	; 11
 2a8:	1a b8       	out	0x0a, r1	; 10
 2aa:	e5 e9       	ldi	r30, 0x95	; 149
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	10 82       	st	Z, r1
 2b0:	59 9a       	sbi	0x0b, 1	; 11
 2b2:	8a b1       	in	r24, 0x0a	; 10
 2b4:	88 61       	ori	r24, 0x18	; 24
 2b6:	8a b9       	out	0x0a, r24	; 10
 2b8:	80 81       	ld	r24, Z
 2ba:	8e 60       	ori	r24, 0x0E	; 14
 2bc:	80 83       	st	Z, r24
 2be:	87 e6       	ldi	r24, 0x67	; 103
 2c0:	89 b9       	out	0x09, r24	; 9
 2c2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 2c6:	08 95       	ret

000002c8 <init_UART1>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cb e9       	ldi	r28, 0x9B	; 155
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	18 82       	st	Y, r1
 2d2:	aa e9       	ldi	r26, 0x9A	; 154
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	1c 92       	st	X, r1
 2d8:	ed e9       	ldi	r30, 0x9D	; 157
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	10 82       	st	Z, r1
 2de:	88 81       	ld	r24, Y
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	88 83       	st	Y, r24
 2e4:	8c 91       	ld	r24, X
 2e6:	88 61       	ori	r24, 0x18	; 24
 2e8:	8c 93       	st	X, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	8e 60       	ori	r24, 0x0E	; 14
 2ee:	80 83       	st	Z, r24
 2f0:	87 e6       	ldi	r24, 0x67	; 103
 2f2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 2f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <transmit_UART1>:
 300:	eb e9       	ldi	r30, 0x9B	; 155
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	95 ff       	sbrs	r25, 5
 308:	fd cf       	rjmp	.-6      	; 0x304 <transmit_UART1+0x4>
 30a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 30e:	08 95       	ret

00000310 <transmit_UART0>:
 310:	5d 9b       	sbis	0x0b, 5	; 11
 312:	fe cf       	rjmp	.-4      	; 0x310 <transmit_UART0>
 314:	8c b9       	out	0x0c, r24	; 12
 316:	08 95       	ret

00000318 <receive_UART1>:
 318:	eb e9       	ldi	r30, 0x9B	; 155
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 23       	and	r24, r24
 320:	ec f7       	brge	.-6      	; 0x31c <receive_UART1+0x4>
 322:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 326:	08 95       	ret

00000328 <receive_UART0>:
 328:	5f 9b       	sbis	0x0b, 7	; 11
 32a:	fe cf       	rjmp	.-4      	; 0x328 <receive_UART0>
 32c:	8c b1       	in	r24, 0x0c	; 12
 32e:	08 95       	ret

00000330 <transmit_string_UART1>:
    i++;
  }
}

void transmit_string_UART1(char *buffer)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 334:	fc 01       	movw	r30, r24
 336:	20 81       	ld	r18, Z
 338:	22 23       	and	r18, r18
 33a:	69 f0       	breq	.+26     	; 0x356 <transmit_string_UART1+0x26>
 33c:	dc 01       	movw	r26, r24
 33e:	11 96       	adiw	r26, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
 340:	eb e9       	ldi	r30, 0x9B	; 155
 342:	f0 e0       	ldi	r31, 0x00	; 0
    	///* Start transmission
    	UDR1 = buffer[i];
 344:	cc e9       	ldi	r28, 0x9C	; 156
 346:	d0 e0       	ldi	r29, 0x00	; 0
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
 348:	90 81       	ld	r25, Z
 34a:	95 ff       	sbrs	r25, 5
 34c:	fd cf       	rjmp	.-6      	; 0x348 <transmit_string_UART1+0x18>
    	///* Start transmission
    	UDR1 = buffer[i];
 34e:	28 83       	st	Y, r18

void transmit_string_UART1(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 350:	2d 91       	ld	r18, X+
 352:	21 11       	cpse	r18, r1
 354:	f9 cf       	rjmp	.-14     	; 0x348 <transmit_string_UART1+0x18>
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
 35c:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 35e:	90 81       	ld	r25, Z
 360:	99 23       	and	r25, r25
 362:	39 f0       	breq	.+14     	; 0x372 <transmit_string_UART0+0x16>
 364:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 366:	5d 9b       	sbis	0x0b, 5	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 36a:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 36c:	91 91       	ld	r25, Z+
 36e:	91 11       	cpse	r25, r1
 370:	fa cf       	rjmp	.-12     	; 0x366 <transmit_string_UART0+0xa>
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
