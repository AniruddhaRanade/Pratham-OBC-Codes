
hSlave_Preflighttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  0000134e  000013e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000134e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  00800206  00800206  000014e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035bc  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001358  00000000  00000000  00004d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175b  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  000077e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b2  00000000  00000000  00007db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd2  00000000  00000000  00008766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000a338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_17>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e4       	ldi	r30, 0x4E	; 78
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 31       	cpi	r26, 0x19	; 25
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 34 04 	call	0x868	; 0x868 <main>
      c6:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
      ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
      d0:	26 2f       	mov	r18, r22
      d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
      d4:	76 95       	lsr	r23
      d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
      d8:	38 2f       	mov	r19, r24
      da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
      dc:	32 17       	cp	r19, r18
      de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
      e0:	28 e0       	ldi	r18, 0x08	; 8
      e2:	62 27       	eor	r22, r18
      e4:	24 e8       	ldi	r18, 0x84	; 132
      e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
      e8:	86 95       	lsr	r24
      ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
      ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
      ee:	cb 01       	movw	r24, r22
      f0:	08 95       	ret

000000f2 <calculate_crc_16>:

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
      fa:	66 23       	and	r22, r22
      fc:	91 f0       	breq	.+36     	; 0x122 <calculate_crc_16+0x30>
      fe:	ec 01       	movw	r28, r24
     100:	61 50       	subi	r22, 0x01	; 1
     102:	06 2f       	mov	r16, r22
     104:	10 e0       	ldi	r17, 0x00	; 0
     106:	0f 5f       	subi	r16, 0xFF	; 255
     108:	1f 4f       	sbci	r17, 0xFF	; 255
     10a:	08 0f       	add	r16, r24
     10c:	19 1f       	adc	r17, r25
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	9f ef       	ldi	r25, 0xFF	; 255
    crc = update_crc_16(data[i], crc);
     112:	bc 01       	movw	r22, r24
     114:	89 91       	ld	r24, Y+
     116:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
     11a:	c0 17       	cp	r28, r16
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <calculate_crc_16+0x20>
     120:	02 c0       	rjmp	.+4      	; 0x126 <calculate_crc_16+0x34>
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	9f ef       	ldi	r25, 0xFF	; 255
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
    
  return ~crc;
}
     126:	80 95       	com	r24
     128:	90 95       	com	r25
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	08 95       	ret

00000134 <make_ax25_frame_from_data>:
 */ 

#include "ax25.h"

void make_ax25_frame_from_data(uint8_t *frame, uint8_t *data)
{
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	2a 97       	sbiw	r28, 0x0a	; 10
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	8c 01       	movw	r16, r24
  uint8_t i, buf[10], size = 0;
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
     152:	8e e7       	ldi	r24, 0x7E	; 126
     154:	d8 01       	movw	r26, r16
     156:	8d 93       	st	X+, r24
     158:	ad 01       	movw	r20, r26
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
     15a:	86 e0       	ldi	r24, 0x06	; 6
     15c:	e1 e0       	ldi	r30, 0x01	; 1
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	de 01       	movw	r26, r28
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	01 90       	ld	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	8a 95       	dec	r24
     16a:	e1 f7       	brne	.-8      	; 0x164 <make_ax25_frame_from_data+0x30>
     16c:	9e 01       	movw	r18, r28
     16e:	2f 5f       	subi	r18, 0xFF	; 255
     170:	3f 4f       	sbci	r19, 0xFF	; 255
     172:	fa 01       	movw	r30, r20
     174:	78 01       	movw	r14, r16
     176:	b7 e0       	ldi	r27, 0x07	; 7
     178:	eb 0e       	add	r14, r27
     17a:	f1 1c       	adc	r15, r1
     17c:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
     17e:	9d 91       	ld	r25, X+
     180:	99 0f       	add	r25, r25
     182:	91 93       	st	Z+, r25
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
     184:	ee 15       	cp	r30, r14
     186:	ff 05       	cpc	r31, r15
     188:	d1 f7       	brne	.-12     	; 0x17e <make_ax25_frame_from_data+0x4a>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
     18a:	80 e6       	ldi	r24, 0x60	; 96
     18c:	f8 01       	movw	r30, r16
     18e:	87 83       	std	Z+7, r24	; 0x07
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	e8 e0       	ldi	r30, 0x08	; 8
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	de 01       	movw	r26, r28
     198:	11 96       	adiw	r26, 0x01	; 1
     19a:	01 90       	ld	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	8a 95       	dec	r24
     1a0:	e1 f7       	brne	.-8      	; 0x19a <make_ax25_frame_from_data+0x66>
     1a2:	f8 01       	movw	r30, r16
     1a4:	38 96       	adiw	r30, 0x08	; 8
     1a6:	78 01       	movw	r14, r16
     1a8:	8e e0       	ldi	r24, 0x0E	; 14
     1aa:	e8 0e       	add	r14, r24
     1ac:	f1 1c       	adc	r15, r1
     1ae:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
     1b0:	9d 91       	ld	r25, X+
     1b2:	99 0f       	add	r25, r25
     1b4:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
     1b6:	ee 15       	cp	r30, r14
     1b8:	ff 05       	cpc	r31, r15
     1ba:	d1 f7       	brne	.-12     	; 0x1b0 <make_ax25_frame_from_data+0x7c>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
     1bc:	88 e6       	ldi	r24, 0x68	; 104
     1be:	d8 01       	movw	r26, r16
     1c0:	1e 96       	adiw	r26, 0x0e	; 14
     1c2:	8c 93       	st	X, r24
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	ef e0       	ldi	r30, 0x0F	; 15
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	de 01       	movw	r26, r28
     1cc:	11 96       	adiw	r26, 0x01	; 1
     1ce:	01 90       	ld	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	8a 95       	dec	r24
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <make_ax25_frame_from_data+0x9a>
     1d6:	f8 01       	movw	r30, r16
     1d8:	3f 96       	adiw	r30, 0x0f	; 15
     1da:	78 01       	movw	r14, r16
     1dc:	b5 e1       	ldi	r27, 0x15	; 21
     1de:	eb 0e       	add	r14, r27
     1e0:	f1 1c       	adc	r15, r1
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
     1e2:	d9 01       	movw	r26, r18
     1e4:	9d 91       	ld	r25, X+
     1e6:	9d 01       	movw	r18, r26
     1e8:	99 0f       	add	r25, r25
     1ea:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
     1ec:	ee 15       	cp	r30, r14
     1ee:	ff 05       	cpc	r31, r15
     1f0:	c1 f7       	brne	.-16     	; 0x1e2 <make_ax25_frame_from_data+0xae>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
     1f2:	81 e6       	ldi	r24, 0x61	; 97
     1f4:	f8 01       	movw	r30, r16
     1f6:	85 8b       	std	Z+21, r24	; 0x15
  
  frame[size++] = AX_CONTROL;
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	86 8b       	std	Z+22, r24	; 0x16
  frame[size++] = AX_PID;
     1fc:	80 ef       	ldi	r24, 0xF0	; 240
     1fe:	87 8b       	std	Z+23, r24	; 0x17
  
  memcpy(frame + size, data, HM_SIZE);
     200:	d8 01       	movw	r26, r16
     202:	58 96       	adiw	r26, 0x18	; 24
     204:	87 e0       	ldi	r24, 0x07	; 7
     206:	fb 01       	movw	r30, r22
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	8a 95       	dec	r24
     20e:	e1 f7       	brne	.-8      	; 0x208 <make_ax25_frame_from_data+0xd4>
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
     210:	6e e1       	ldi	r22, 0x1E	; 30
     212:	ca 01       	movw	r24, r20
     214:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
  
  memcpy(frame + size, &crc, 2);
     218:	d8 01       	movw	r26, r16
     21a:	90 96       	adiw	r26, 0x20	; 32
     21c:	9c 93       	st	X, r25
     21e:	8e 93       	st	-X, r24
     220:	5f 97       	sbiw	r26, 0x1f	; 31
  size += 2;
  
  frame[size] = AX_FLAG;
     222:	8e e7       	ldi	r24, 0x7E	; 126
     224:	91 96       	adiw	r26, 0x21	; 33
     226:	8c 93       	st	X, r24
  
}
     228:	2a 96       	adiw	r28, 0x0a	; 10
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	08 95       	ret

00000242 <ioinit>:
{

  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
#if defined(TWPS0)
  /* has prescaler (mega128 & newer) */
  TWSR = 0;
     242:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
#endif

#if F_CPU < 3600000UL
  TWBR = 10;			/* smallest TWBR value, see note [5] */
#else
  TWBR = (F_CPU / 100000UL - 16) / 2;
     246:	80 e2       	ldi	r24, 0x20	; 32
     248:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     24c:	08 95       	ret

0000024e <eeprom_read_bytes_part>:
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
     24e:	af 92       	push	r10
     250:	bf 92       	push	r11
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	6b 01       	movw	r12, r22
     264:	7c 01       	movw	r14, r24
  uint8_t sla, twcr, n = 0;
  int rv = 0;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
     266:	c1 14       	cp	r12, r1
     268:	d1 04       	cpc	r13, r1
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	e8 06       	cpc	r14, r24
     26e:	f1 04       	cpc	r15, r1
     270:	48 f0       	brcs	.+18     	; 0x284 <eeprom_read_bytes_part+0x36>
  {
    eeaddr -= HALF_ADDR;
     272:	c1 e0       	ldi	r28, 0x01	; 1
     274:	ec 1a       	sub	r14, r28
     276:	f1 08       	sbc	r15, r1
    eeprom_addr |= 0x08;
     278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     27c:	88 60       	ori	r24, 0x08	; 8
     27e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     282:	05 c0       	rjmp	.+10     	; 0x28e <eeprom_read_bytes_part+0x40>
  }
  else
  {
    eeprom_addr &= ~0x08;
     284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     288:	87 7f       	andi	r24, 0xF7	; 247
     28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  }
  
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
     28e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
     292:	bd 2c       	mov	r11, r13
     294:	08 ec       	ldi	r16, 0xC8	; 200
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     296:	e4 e7       	ldi	r30, 0x74	; 116
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	14 ea       	ldi	r17, 0xA4	; 164
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
     29c:	a1 e7       	ldi	r26, 0x71	; 113
     29e:	b0 e0       	ldi	r27, 0x00	; 0
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     2a0:	91 2f       	mov	r25, r17
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
     2a2:	c3 e7       	ldi	r28, 0x73	; 115
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
     2a6:	86 2f       	mov	r24, r22
     2a8:	81 60       	ori	r24, 0x01	; 1
     2aa:	a8 2e       	mov	r10, r24
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <eeprom_read_bytes_part+0x66>
     2ae:	01 50       	subi	r16, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <eeprom_read_bytes_part+0x66>
     2b2:	b2 c0       	rjmp	.+356    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     2b4:	74 e8       	ldi	r23, 0x84	; 132
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     2b6:	90 83       	st	Z, r25
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     2b8:	80 81       	ld	r24, Z
     2ba:	88 23       	and	r24, r24
     2bc:	ec f7       	brge	.-6      	; 0x2b8 <eeprom_read_bytes_part+0x6a>
  switch ((twst = TW_STATUS))
     2be:	8c 91       	ld	r24, X
     2c0:	88 7f       	andi	r24, 0xF8	; 248
     2c2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     2c6:	80 31       	cpi	r24, 0x10	; 16
     2c8:	29 f0       	breq	.+10     	; 0x2d4 <eeprom_read_bytes_part+0x86>
     2ca:	88 33       	cpi	r24, 0x38	; 56
     2cc:	a1 f3       	breq	.-24     	; 0x2b6 <eeprom_read_bytes_part+0x68>
     2ce:	88 30       	cpi	r24, 0x08	; 8
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <eeprom_read_bytes_part+0x86>
     2d2:	a5 c0       	rjmp	.+330    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
     2d4:	68 83       	st	Y, r22
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     2d6:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     2d8:	80 81       	ld	r24, Z
     2da:	88 23       	and	r24, r24
     2dc:	ec f7       	brge	.-6      	; 0x2d8 <eeprom_read_bytes_part+0x8a>
  switch ((twst = TW_STATUS))
     2de:	8c 91       	ld	r24, X
     2e0:	88 7f       	andi	r24, 0xF8	; 248
     2e2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     2e6:	80 32       	cpi	r24, 0x20	; 32
     2e8:	11 f3       	breq	.-60     	; 0x2ae <eeprom_read_bytes_part+0x60>
     2ea:	88 33       	cpi	r24, 0x38	; 56
     2ec:	21 f3       	breq	.-56     	; 0x2b6 <eeprom_read_bytes_part+0x68>
     2ee:	88 31       	cpi	r24, 0x18	; 24
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <eeprom_read_bytes_part+0xa6>
     2f2:	7a c0       	rjmp	.+244    	; 0x3e8 <eeprom_read_bytes_part+0x19a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
     2f4:	b8 82       	st	Y, r11
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     2f6:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     2f8:	80 81       	ld	r24, Z
     2fa:	88 23       	and	r24, r24
     2fc:	ec f7       	brge	.-6      	; 0x2f8 <eeprom_read_bytes_part+0xaa>
  switch ((twst = TW_STATUS))
     2fe:	8c 91       	ld	r24, X
     300:	88 7f       	andi	r24, 0xF8	; 248
     302:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     306:	80 33       	cpi	r24, 0x30	; 48
     308:	b1 f2       	breq	.-84     	; 0x2b6 <eeprom_read_bytes_part+0x68>
     30a:	88 33       	cpi	r24, 0x38	; 56
     30c:	a1 f2       	breq	.-88     	; 0x2b6 <eeprom_read_bytes_part+0x68>
     30e:	88 32       	cpi	r24, 0x28	; 40
     310:	09 f0       	breq	.+2      	; 0x314 <eeprom_read_bytes_part+0xc6>
     312:	6d c0       	rjmp	.+218    	; 0x3ee <eeprom_read_bytes_part+0x1a0>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
     314:	c8 82       	st	Y, r12
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     316:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	ec f7       	brge	.-6      	; 0x318 <eeprom_read_bytes_part+0xca>
  switch ((twst = TW_STATUS))
     31e:	8c 91       	ld	r24, X
     320:	88 7f       	andi	r24, 0xF8	; 248
     322:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     326:	80 33       	cpi	r24, 0x30	; 48
     328:	09 f4       	brne	.+2      	; 0x32c <eeprom_read_bytes_part+0xde>
     32a:	64 c0       	rjmp	.+200    	; 0x3f4 <eeprom_read_bytes_part+0x1a6>
     32c:	88 33       	cpi	r24, 0x38	; 56
     32e:	19 f2       	breq	.-122    	; 0x2b6 <eeprom_read_bytes_part+0x68>
     330:	88 32       	cpi	r24, 0x28	; 40
     332:	19 f0       	breq	.+6      	; 0x33a <eeprom_read_bytes_part+0xec>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	6b c0       	rjmp	.+214    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
     33a:	10 83       	st	Z, r17
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     33c:	80 81       	ld	r24, Z
     33e:	88 23       	and	r24, r24
     340:	ec f7       	brge	.-6      	; 0x33c <eeprom_read_bytes_part+0xee>
  switch ((twst = TW_STATUS))
     342:	8c 91       	ld	r24, X
     344:	88 7f       	andi	r24, 0xF8	; 248
     346:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     34a:	80 31       	cpi	r24, 0x10	; 16
     34c:	31 f0       	breq	.+12     	; 0x35a <eeprom_read_bytes_part+0x10c>
     34e:	88 33       	cpi	r24, 0x38	; 56
     350:	09 f4       	brne	.+2      	; 0x354 <eeprom_read_bytes_part+0x106>
     352:	b1 cf       	rjmp	.-158    	; 0x2b6 <eeprom_read_bytes_part+0x68>
     354:	88 30       	cpi	r24, 0x08	; 8
     356:	09 f0       	breq	.+2      	; 0x35a <eeprom_read_bytes_part+0x10c>
     358:	50 c0       	rjmp	.+160    	; 0x3fa <eeprom_read_bytes_part+0x1ac>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
     35a:	a8 82       	st	Y, r10
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     35c:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     35e:	80 81       	ld	r24, Z
     360:	88 23       	and	r24, r24
     362:	ec f7       	brge	.-6      	; 0x35e <eeprom_read_bytes_part+0x110>
  switch ((twst = TW_STATUS))
     364:	8c 91       	ld	r24, X
     366:	88 7f       	andi	r24, 0xF8	; 248
     368:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     36c:	80 34       	cpi	r24, 0x40	; 64
     36e:	49 f0       	breq	.+18     	; 0x382 <eeprom_read_bytes_part+0x134>
     370:	88 34       	cpi	r24, 0x48	; 72
     372:	09 f4       	brne	.+2      	; 0x376 <eeprom_read_bytes_part+0x128>
     374:	45 c0       	rjmp	.+138    	; 0x400 <__LOCK_REGION_LENGTH__>
     376:	88 33       	cpi	r24, 0x38	; 56
     378:	09 f4       	brne	.+2      	; 0x37c <eeprom_read_bytes_part+0x12e>
     37a:	9d cf       	rjmp	.-198    	; 0x2b6 <eeprom_read_bytes_part+0x68>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	9f ef       	ldi	r25, 0xFF	; 255
     380:	47 c0       	rjmp	.+142    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
     382:	14 16       	cp	r1, r20
     384:	15 06       	cpc	r1, r21
     386:	0c f0       	brlt	.+2      	; 0x38a <eeprom_read_bytes_part+0x13c>
     388:	3e c0       	rjmp	.+124    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     38a:	62 2f       	mov	r22, r18
     38c:	73 2f       	mov	r23, r19
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	34 ec       	ldi	r19, 0xC4	; 196
    {
      if (len == 1)
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
     394:	0f 2e       	mov	r0, r31
     396:	f4 e8       	ldi	r31, 0x84	; 132
     398:	ff 2e       	mov	r15, r31
     39a:	f0 2d       	mov	r31, r0
      TWCR = twcr;		/* clear int to start transmission */
     39c:	a4 e7       	ldi	r26, 0x74	; 116
     39e:	b0 e0       	ldi	r27, 0x00	; 0
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
     3a0:	01 e7       	ldi	r16, 0x71	; 113
     3a2:	10 e0       	ldi	r17, 0x00	; 0
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f3 e7       	ldi	r31, 0x73	; 115
     3a8:	cf 2e       	mov	r12, r31
     3aa:	d1 2c       	mov	r13, r1
     3ac:	f0 2d       	mov	r31, r0
     3ae:	fb 01       	movw	r30, r22
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
    {
      if (len == 1)
     3b0:	41 30       	cpi	r20, 0x01	; 1
     3b2:	51 05       	cpc	r21, r1
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <eeprom_read_bytes_part+0x16a>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
     3b6:	3f 2d       	mov	r19, r15
      TWCR = twcr;		/* clear int to start transmission */
     3b8:	3c 93       	st	X, r19
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     3ba:	2c 91       	ld	r18, X
     3bc:	22 23       	and	r18, r18
     3be:	ec f7       	brge	.-6      	; 0x3ba <eeprom_read_bytes_part+0x16c>
      switch ((twst = TW_STATUS))
     3c0:	e8 01       	movw	r28, r16
     3c2:	28 81       	ld	r18, Y
     3c4:	28 7f       	andi	r18, 0xF8	; 248
     3c6:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <twst>
     3ca:	20 35       	cpi	r18, 0x50	; 80
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <eeprom_read_bytes_part+0x186>
     3ce:	28 35       	cpi	r18, 0x58	; 88
     3d0:	49 f1       	breq	.+82     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3d2:	1c c0       	rjmp	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
     3d4:	e6 01       	movw	r28, r12
     3d6:	28 81       	ld	r18, Y
     3d8:	20 83       	st	Z, r18
     3da:	6f 5f       	subi	r22, 0xFF	; 255
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
	  rv++;
     3de:	01 96       	adiw	r24, 0x01	; 1

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
     3e0:	41 50       	subi	r20, 0x01	; 1
     3e2:	51 09       	sbc	r21, r1
     3e4:	21 f7       	brne	.-56     	; 0x3ae <eeprom_read_bytes_part+0x160>
     3e6:	14 c0       	rjmp	.+40     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	11 c0       	rjmp	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	0e c0       	rjmp	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	9f ef       	ldi	r25, 0xFF	; 255
     3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	9f ef       	ldi	r25, 0xFF	; 255
	  goto error;
	}
    }
 quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
     410:	24 e9       	ldi	r18, 0x94	; 148
     412:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  return rv;
     416:	0b c0       	rjmp	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
    return -1;
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	9f ef       	ldi	r25, 0xFF	; 255
     41c:	08 c0       	rjmp	.+16     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	9f ef       	ldi	r25, 0xFF	; 255
     422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
     424:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     428:	20 83       	st	Z, r18
	  rv++;
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	f1 cf       	rjmp	.-30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
  return rv;

 error:
  rv = -1;
  goto quit;
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	bf 90       	pop	r11
     440:	af 90       	pop	r10
     442:	08 95       	ret

00000444 <eeprom_read_bytes>:
  TWBR = (F_CPU / 100000UL - 16) / 2;
#endif
}

int eeprom_read_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ea 01       	movw	r28, r20
     456:	89 01       	movw	r16, r18
  if((eeaddr < HALF_ADDR) && ((eeaddr + len) > HALF_ADDR))
     458:	61 15       	cp	r22, r1
     45a:	71 05       	cpc	r23, r1
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	82 07       	cpc	r24, r18
     460:	91 05       	cpc	r25, r1
     462:	18 f5       	brcc	.+70     	; 0x4aa <eeprom_read_bytes+0x66>
     464:	6a 01       	movw	r12, r20
     466:	55 0f       	add	r21, r21
     468:	ee 08       	sbc	r14, r14
     46a:	ff 08       	sbc	r15, r15
     46c:	c6 0e       	add	r12, r22
     46e:	d7 1e       	adc	r13, r23
     470:	e8 1e       	adc	r14, r24
     472:	f9 1e       	adc	r15, r25
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	c2 16       	cp	r12, r18
     478:	d1 04       	cpc	r13, r1
     47a:	e2 06       	cpc	r14, r18
     47c:	f1 04       	cpc	r15, r1
     47e:	a8 f0       	brcs	.+42     	; 0x4aa <eeprom_read_bytes+0x66>
  {
    int first = HALF_ADDR - eeaddr;
     480:	ee 24       	eor	r14, r14
     482:	ff 24       	eor	r15, r15
     484:	e6 1a       	sub	r14, r22
     486:	f7 0a       	sbc	r15, r23
    eeprom_read_bytes_part(eeaddr, first, buf);
     488:	98 01       	movw	r18, r16
     48a:	a7 01       	movw	r20, r14
     48c:	0e 94 27 01 	call	0x24e	; 0x24e <eeprom_read_bytes_part>
    return eeprom_read_bytes_part(HALF_ADDR, len - first , buf + first);
     490:	98 01       	movw	r18, r16
     492:	2e 0d       	add	r18, r14
     494:	3f 1d       	adc	r19, r15
     496:	ae 01       	movw	r20, r28
     498:	4e 19       	sub	r20, r14
     49a:	5f 09       	sbc	r21, r15
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 27 01 	call	0x24e	; 0x24e <eeprom_read_bytes_part>
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <eeprom_read_bytes+0x6e>
  }
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
     4aa:	98 01       	movw	r18, r16
     4ac:	ae 01       	movw	r20, r28
     4ae:	0e 94 27 01 	call	0x24e	; 0x24e <eeprom_read_bytes_part>
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	08 95       	ret

000004c4 <eeprom_write_page>:
  rv = -1;
  goto quit;
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	6b 01       	movw	r12, r22
     4dc:	7c 01       	movw	r14, r24
  uint8_t sla, n = 0;
  int rv = 0;
  uint16_t endaddr;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
     4de:	c1 14       	cp	r12, r1
     4e0:	d1 04       	cpc	r13, r1
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	e6 06       	cpc	r14, r22
     4e6:	f1 04       	cpc	r15, r1
     4e8:	48 f0       	brcs	.+18     	; 0x4fc <eeprom_write_page+0x38>
  {
    eeaddr -= HALF_ADDR;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	e8 1a       	sub	r14, r24
     4ee:	f1 08       	sbc	r15, r1
    eeprom_addr |= 0x08;
     4f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4f4:	88 60       	ori	r24, 0x08	; 8
     4f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <eeprom_write_page+0x42>
  }
  else
    eeprom_addr &= ~0x08;
     4fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     500:	87 7f       	andi	r24, 0xF7	; 247
     502:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
     506:	ca 01       	movw	r24, r20
     508:	05 2e       	mov	r0, r21
     50a:	00 0c       	add	r0, r0
     50c:	aa 0b       	sbc	r26, r26
     50e:	bb 0b       	sbc	r27, r27
     510:	8c 0d       	add	r24, r12
     512:	9d 1d       	adc	r25, r13
     514:	ae 1d       	adc	r26, r14
     516:	bf 1d       	adc	r27, r15
     518:	46 01       	movw	r8, r12
     51a:	57 01       	movw	r10, r14
     51c:	cf e7       	ldi	r28, 0x7F	; 127
     51e:	8c 2a       	or	r8, r28
     520:	88 15       	cp	r24, r8
     522:	99 05       	cpc	r25, r9
     524:	aa 05       	cpc	r26, r10
     526:	bb 05       	cpc	r27, r11
     528:	18 f4       	brcc	.+6      	; 0x530 <eeprom_write_page+0x6c>
    endaddr = eeaddr + len;
     52a:	4c 0d       	add	r20, r12
     52c:	5d 1d       	adc	r21, r13
     52e:	04 c0       	rjmp	.+8      	; 0x538 <eeprom_write_page+0x74>
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
     530:	a6 01       	movw	r20, r12
     532:	4f 67       	ori	r20, 0x7F	; 127
     534:	4f 5f       	subi	r20, 0xFF	; 255
     536:	5f 4f       	sbci	r21, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
     538:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <__data_start>
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
     53c:	bd 2c       	mov	r11, r13
     53e:	18 ec       	ldi	r17, 0xC8	; 200
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     540:	e4 e7       	ldi	r30, 0x74	; 116
     542:	f0 e0       	ldi	r31, 0x00	; 0
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
     544:	a1 e7       	ldi	r26, 0x71	; 113
     546:	b0 e0       	ldi	r27, 0x00	; 0
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     548:	94 ea       	ldi	r25, 0xA4	; 164
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
     54a:	c3 e7       	ldi	r28, 0x73	; 115
     54c:	d0 e0       	ldi	r29, 0x00	; 0
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     54e:	64 e8       	ldi	r22, 0x84	; 132
     550:	03 c0       	rjmp	.+6      	; 0x558 <eeprom_write_page+0x94>
     552:	11 50       	subi	r17, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
     554:	09 f4       	brne	.+2      	; 0x558 <eeprom_write_page+0x94>
     556:	7f c0       	rjmp	.+254    	; 0x656 <eeprom_write_page+0x192>
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     558:	90 83       	st	Z, r25
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     55a:	80 81       	ld	r24, Z
     55c:	88 23       	and	r24, r24
     55e:	ec f7       	brge	.-6      	; 0x55a <eeprom_write_page+0x96>
  switch ((twst = TW_STATUS))
     560:	8c 91       	ld	r24, X
     562:	88 7f       	andi	r24, 0xF8	; 248
     564:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     568:	80 31       	cpi	r24, 0x10	; 16
     56a:	29 f0       	breq	.+10     	; 0x576 <eeprom_write_page+0xb2>
     56c:	88 33       	cpi	r24, 0x38	; 56
     56e:	a1 f3       	breq	.-24     	; 0x558 <eeprom_write_page+0x94>
     570:	88 30       	cpi	r24, 0x08	; 8
     572:	09 f0       	breq	.+2      	; 0x576 <eeprom_write_page+0xb2>
     574:	73 c0       	rjmp	.+230    	; 0x65c <eeprom_write_page+0x198>
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
     576:	78 83       	st	Y, r23
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     578:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     57a:	80 81       	ld	r24, Z
     57c:	88 23       	and	r24, r24
     57e:	ec f7       	brge	.-6      	; 0x57a <eeprom_write_page+0xb6>
  switch ((twst = TW_STATUS))
     580:	8c 91       	ld	r24, X
     582:	88 7f       	andi	r24, 0xF8	; 248
     584:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     588:	80 32       	cpi	r24, 0x20	; 32
     58a:	19 f3       	breq	.-58     	; 0x552 <eeprom_write_page+0x8e>
     58c:	88 33       	cpi	r24, 0x38	; 56
     58e:	21 f3       	breq	.-56     	; 0x558 <eeprom_write_page+0x94>
     590:	88 31       	cpi	r24, 0x18	; 24
     592:	09 f0       	breq	.+2      	; 0x596 <eeprom_write_page+0xd2>
     594:	4c c0       	rjmp	.+152    	; 0x62e <eeprom_write_page+0x16a>
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
     596:	b8 82       	st	Y, r11
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     598:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     59a:	80 81       	ld	r24, Z
     59c:	88 23       	and	r24, r24
     59e:	ec f7       	brge	.-6      	; 0x59a <eeprom_write_page+0xd6>
  switch ((twst = TW_STATUS))
     5a0:	8c 91       	ld	r24, X
     5a2:	88 7f       	andi	r24, 0xF8	; 248
     5a4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     5a8:	80 33       	cpi	r24, 0x30	; 48
     5aa:	09 f4       	brne	.+2      	; 0x5ae <eeprom_write_page+0xea>
     5ac:	43 c0       	rjmp	.+134    	; 0x634 <eeprom_write_page+0x170>
     5ae:	88 33       	cpi	r24, 0x38	; 56
     5b0:	99 f2       	breq	.-90     	; 0x558 <eeprom_write_page+0x94>
     5b2:	88 32       	cpi	r24, 0x28	; 40
     5b4:	19 f0       	breq	.+6      	; 0x5bc <eeprom_write_page+0xf8>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     5b6:	2f ef       	ldi	r18, 0xFF	; 255
     5b8:	3f ef       	ldi	r19, 0xFF	; 255
     5ba:	47 c0       	rjmp	.+142    	; 0x64a <eeprom_write_page+0x186>
    default:
      goto error;		/* must send stop condition */
    }


  TWDR = eeaddr;		/* low 8 bits of addr */
     5bc:	c8 82       	st	Y, r12
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     5be:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     5c0:	80 81       	ld	r24, Z
     5c2:	88 23       	and	r24, r24
     5c4:	ec f7       	brge	.-6      	; 0x5c0 <eeprom_write_page+0xfc>
  switch ((twst = TW_STATUS))
     5c6:	8c 91       	ld	r24, X
     5c8:	88 7f       	andi	r24, 0xF8	; 248
     5ca:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     5ce:	80 33       	cpi	r24, 0x30	; 48
     5d0:	a1 f1       	breq	.+104    	; 0x63a <eeprom_write_page+0x176>
     5d2:	88 33       	cpi	r24, 0x38	; 56
     5d4:	09 f2       	breq	.-126    	; 0x558 <eeprom_write_page+0x94>
     5d6:	88 32       	cpi	r24, 0x28	; 40
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <eeprom_write_page+0x11c>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	35 c0       	rjmp	.+106    	; 0x64a <eeprom_write_page+0x186>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
     5e0:	4c 19       	sub	r20, r12
     5e2:	5d 09       	sbc	r21, r13

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
     5e4:	14 16       	cp	r1, r20
     5e6:	15 06       	cpc	r1, r21
     5e8:	5c f5       	brge	.+86     	; 0x640 <eeprom_write_page+0x17c>
     5ea:	a2 2f       	mov	r26, r18
     5ec:	b3 2f       	mov	r27, r19
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
    {
      TWDR = *buf++;
     5f2:	63 e7       	ldi	r22, 0x73	; 115
     5f4:	70 e0       	ldi	r23, 0x00	; 0
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
     5f6:	e4 e7       	ldi	r30, 0x74	; 116
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	94 e8       	ldi	r25, 0x84	; 132
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f1 e7       	ldi	r31, 0x71	; 113
     600:	ef 2e       	mov	r14, r31
     602:	f1 2c       	mov	r15, r1
     604:	f0 2d       	mov	r31, r0
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
     606:	8d 91       	ld	r24, X+
     608:	eb 01       	movw	r28, r22
     60a:	88 83       	st	Y, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
     60c:	90 83       	st	Z, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	ec f7       	brge	.-6      	; 0x60e <eeprom_write_page+0x14a>
      switch ((twst = TW_STATUS))
     614:	e7 01       	movw	r28, r14
     616:	88 81       	ld	r24, Y
     618:	88 7f       	andi	r24, 0xF8	; 248
     61a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twst>
     61e:	88 32       	cpi	r24, 0x28	; 40
     620:	91 f4       	brne	.+36     	; 0x646 <eeprom_write_page+0x182>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
     622:	2f 5f       	subi	r18, 0xFF	; 255
     624:	3f 4f       	sbci	r19, 0xFF	; 255

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
     626:	42 17       	cp	r20, r18
     628:	53 07       	cpc	r21, r19
     62a:	69 f7       	brne	.-38     	; 0x606 <eeprom_write_page+0x142>
     62c:	0e c0       	rjmp	.+28     	; 0x64a <eeprom_write_page+0x186>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	3f ef       	ldi	r19, 0xFF	; 255
     632:	0b c0       	rjmp	.+22     	; 0x64a <eeprom_write_page+0x186>
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	08 c0       	rjmp	.+16     	; 0x64a <eeprom_write_page+0x186>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	05 c0       	rjmp	.+10     	; 0x64a <eeprom_write_page+0x186>

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <eeprom_write_page+0x186>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
     646:	2f ef       	ldi	r18, 0xFF	; 255
     648:	3f ef       	ldi	r19, 0xFF	; 255
	default:
	  goto error;
	}
    }
 quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
     64a:	84 e9       	ldi	r24, 0x94	; 148
     64c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  return rv;
     650:	82 2f       	mov	r24, r18
     652:	93 2f       	mov	r25, r19
     654:	05 c0       	rjmp	.+10     	; 0x660 <eeprom_write_page+0x19c>
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
    return -1;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	02 c0       	rjmp	.+4      	; 0x660 <eeprom_write_page+0x19c>
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      return -1;		/* error: not in start condition */
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

 error:
  rv = -1;
  goto quit;
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	08 95       	ret

00000678 <eeprom_write_bytes>:

int eeprom_write_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	4b 01       	movw	r8, r22
     68e:	5c 01       	movw	r10, r24
     690:	ea 01       	movw	r28, r20
     692:	89 01       	movw	r16, r18
  int rv, total;

  total = 0;
     694:	e1 2c       	mov	r14, r1
     696:	f1 2c       	mov	r15, r1
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
     698:	98 01       	movw	r18, r16
     69a:	ae 01       	movw	r20, r28
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <eeprom_write_page>
      if (rv == -1)
     6a4:	8f 3f       	cpi	r24, 0xFF	; 255
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	92 07       	cpc	r25, r18
     6aa:	a9 f0       	breq	.+42     	; 0x6d6 <eeprom_write_bytes+0x5e>
        return -1;
      eeaddr += rv;
     6ac:	ac 01       	movw	r20, r24
     6ae:	09 2e       	mov	r0, r25
     6b0:	00 0c       	add	r0, r0
     6b2:	66 0b       	sbc	r22, r22
     6b4:	77 0b       	sbc	r23, r23
     6b6:	84 0e       	add	r8, r20
     6b8:	95 1e       	adc	r9, r21
     6ba:	a6 1e       	adc	r10, r22
     6bc:	b7 1e       	adc	r11, r23
      len -= rv;
     6be:	c8 1b       	sub	r28, r24
     6c0:	d9 0b       	sbc	r29, r25
      buf += rv;
     6c2:	08 0f       	add	r16, r24
     6c4:	19 1f       	adc	r17, r25
      total += rv;
     6c6:	e8 0e       	add	r14, r24
     6c8:	f9 1e       	adc	r15, r25
    }
  while (len > 0);
     6ca:	1c 16       	cp	r1, r28
     6cc:	1d 06       	cpc	r1, r29
     6ce:	24 f3       	brlt	.-56     	; 0x698 <eeprom_write_bytes+0x20>
      if (rv == -1)
        return -1;
      eeaddr += rv;
      len -= rv;
      buf += rv;
      total += rv;
     6d0:	8e 2d       	mov	r24, r14
     6d2:	9f 2d       	mov	r25, r15
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <eeprom_write_bytes+0x62>
  total = 0;
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
      if (rv == -1)
        return -1;
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	08 95       	ret

000006f0 <write_frame_to_eeprom>:

void write_frame_to_eeprom(uint8_t *frame)
{
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
  //correct the eeprom function for supporting 32-bit addresses
  static uint8_t start = 0;
  
  if((write_addr == read_addr) && start)
     6f8:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <write_addr>
     6fc:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <write_addr+0x1>
     700:	e0 90 09 02 	lds	r14, 0x0209	; 0x800209 <write_addr+0x2>
     704:	f0 90 0a 02 	lds	r15, 0x020A	; 0x80020a <write_addr+0x3>
     708:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <read_addr>
     70c:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <read_addr+0x1>
     710:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <read_addr+0x2>
     714:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <read_addr+0x3>
     718:	c4 16       	cp	r12, r20
     71a:	d5 06       	cpc	r13, r21
     71c:	e6 06       	cpc	r14, r22
     71e:	f7 06       	cpc	r15, r23
     720:	91 f4       	brne	.+36     	; 0x746 <write_frame_to_eeprom+0x56>
     722:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
     726:	22 23       	and	r18, r18
     728:	71 f0       	breq	.+28     	; 0x746 <write_frame_to_eeprom+0x56>
    read_addr +=EEP_FRAME_SIZE;
     72a:	b7 01       	movw	r22, r14
     72c:	a6 01       	movw	r20, r12
     72e:	4a 5e       	subi	r20, 0xEA	; 234
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	6f 4f       	sbci	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <read_addr>
     73a:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <read_addr+0x1>
     73e:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <read_addr+0x2>
     742:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <read_addr+0x3>
    
  eeprom_write_bytes(write_addr,EEP_FRAME_SIZE,frame);
     746:	9c 01       	movw	r18, r24
     748:	46 e1       	ldi	r20, 0x16	; 22
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 3c 03 	call	0x678	; 0x678 <eeprom_write_bytes>
  write_addr +=EEP_FRAME_SIZE;
     754:	d7 01       	movw	r26, r14
     756:	c6 01       	movw	r24, r12
     758:	46 96       	adiw	r24, 0x16	; 22
     75a:	a1 1d       	adc	r26, r1
     75c:	b1 1d       	adc	r27, r1
     75e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <write_addr>
     762:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <write_addr+0x1>
     766:	a0 93 09 02 	sts	0x0209, r26	; 0x800209 <write_addr+0x2>
     76a:	b0 93 0a 02 	sts	0x020A, r27	; 0x80020a <write_addr+0x3>
  
  if(write_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
     76e:	8c 3e       	cpi	r24, 0xEC	; 236
     770:	9f 4f       	sbci	r25, 0xFF	; 255
     772:	a1 05       	cpc	r26, r1
     774:	b1 05       	cpc	r27, r1
     776:	69 f4       	brne	.+26     	; 0x792 <write_frame_to_eeprom+0xa2>
    write_addr = HALF_ADDR;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	a1 e0       	ldi	r26, 0x01	; 1
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <write_addr>
     784:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <write_addr+0x1>
     788:	a0 93 09 02 	sts	0x0209, r26	; 0x800209 <write_addr+0x2>
     78c:	b0 93 0a 02 	sts	0x020A, r27	; 0x80020a <write_addr+0x3>
     790:	14 c0       	rjmp	.+40     	; 0x7ba <write_frame_to_eeprom+0xca>
  if(write_addr +EEP_FRAME_SIZE > MAX_ADDR)
     792:	8c e2       	ldi	r24, 0x2C	; 44
     794:	c8 0e       	add	r12, r24
     796:	d1 1c       	adc	r13, r1
     798:	e1 1c       	adc	r14, r1
     79a:	f1 1c       	adc	r15, r1
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	c2 16       	cp	r12, r18
     7a0:	d1 04       	cpc	r13, r1
     7a2:	22 e0       	ldi	r18, 0x02	; 2
     7a4:	e2 06       	cpc	r14, r18
     7a6:	f1 04       	cpc	r15, r1
     7a8:	40 f0       	brcs	.+16     	; 0x7ba <write_frame_to_eeprom+0xca>
    write_addr = 0;
     7aa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <write_addr>
     7ae:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <write_addr+0x1>
     7b2:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <write_addr+0x2>
     7b6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <write_addr+0x3>
  
  start = 1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
}
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	08 95       	ret

000007ca <read_frame_from_eeprom>:

void read_frame_from_eeprom(uint8_t *frame)
{
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
  eeprom_read_bytes(read_addr,EEP_FRAME_SIZE, frame);
     7d2:	c0 90 0b 02 	lds	r12, 0x020B	; 0x80020b <read_addr>
     7d6:	d0 90 0c 02 	lds	r13, 0x020C	; 0x80020c <read_addr+0x1>
     7da:	e0 90 0d 02 	lds	r14, 0x020D	; 0x80020d <read_addr+0x2>
     7de:	f0 90 0e 02 	lds	r15, 0x020E	; 0x80020e <read_addr+0x3>
     7e2:	9c 01       	movw	r18, r24
     7e4:	46 e1       	ldi	r20, 0x16	; 22
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_bytes>
  read_addr +=EEP_FRAME_SIZE;
     7f0:	d7 01       	movw	r26, r14
     7f2:	c6 01       	movw	r24, r12
     7f4:	46 96       	adiw	r24, 0x16	; 22
     7f6:	a1 1d       	adc	r26, r1
     7f8:	b1 1d       	adc	r27, r1
     7fa:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <read_addr>
     7fe:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <read_addr+0x1>
     802:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <read_addr+0x2>
     806:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <read_addr+0x3>
  
  if(read_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
     80a:	8c 3e       	cpi	r24, 0xEC	; 236
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	a1 05       	cpc	r26, r1
     810:	b1 05       	cpc	r27, r1
     812:	69 f4       	brne	.+26     	; 0x82e <read_frame_from_eeprom+0x64>
    read_addr = HALF_ADDR;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a1 e0       	ldi	r26, 0x01	; 1
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <read_addr>
     820:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <read_addr+0x1>
     824:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <read_addr+0x2>
     828:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <read_addr+0x3>
     82c:	14 c0       	rjmp	.+40     	; 0x856 <read_frame_from_eeprom+0x8c>
  if(read_addr +EEP_FRAME_SIZE > MAX_ADDR)
     82e:	8c e2       	ldi	r24, 0x2C	; 44
     830:	c8 0e       	add	r12, r24
     832:	d1 1c       	adc	r13, r1
     834:	e1 1c       	adc	r14, r1
     836:	f1 1c       	adc	r15, r1
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	c2 16       	cp	r12, r18
     83c:	d1 04       	cpc	r13, r1
     83e:	22 e0       	ldi	r18, 0x02	; 2
     840:	e2 06       	cpc	r14, r18
     842:	f1 04       	cpc	r15, r1
     844:	40 f0       	brcs	.+16     	; 0x856 <read_frame_from_eeprom+0x8c>
    read_addr = 0;
     846:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <read_addr>
     84a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <read_addr+0x1>
     84e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <read_addr+0x2>
     852:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <read_addr+0x3>
}
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <cc1020_init_dio>:
uint8_t x;
char arr[100];

void cc1020_init_dio(void)
{
  cbi(DDR_TRX, DCLK);
     860:	14 98       	cbi	0x02, 4	; 2
  sbi(DDR_TRX, DIO);
     862:	15 9a       	sbi	0x02, 5	; 2
  sbi(PORT_TRX, DIO);
     864:	1d 9a       	sbi	0x03, 5	; 3
     866:	08 95       	ret

00000868 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	c8 57       	subi	r28, 0x78	; 120
     872:	d1 40       	sbci	r29, 0x01	; 1
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
     87e:	8f e0       	ldi	r24, 0x0F	; 15
     880:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
     882:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     884:	2f ef       	ldi	r18, 0xFF	; 255
     886:	39 e6       	ldi	r19, 0x69	; 105
     888:	98 e1       	ldi	r25, 0x18	; 24
     88a:	21 50       	subi	r18, 0x01	; 1
     88c:	30 40       	sbci	r19, 0x00	; 0
     88e:	90 40       	sbci	r25, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0x22>
     892:	00 c0       	rjmp	.+0      	; 0x894 <main+0x2c>
     894:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     896:	1b ba       	out	0x1b, r1	; 27
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	39 e6       	ldi	r19, 0x69	; 105
     89c:	98 e1       	ldi	r25, 0x18	; 24
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	30 40       	sbci	r19, 0x00	; 0
     8a2:	90 40       	sbci	r25, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <main+0x36>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <main+0x40>
     8a8:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
     8aa:	8b bb       	out	0x1b, r24	; 27
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	39 e6       	ldi	r19, 0x69	; 105
     8b0:	88 e1       	ldi	r24, 0x18	; 24
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	30 40       	sbci	r19, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <main+0x4a>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <main+0x54>
     8bc:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     8be:	1b ba       	out	0x1b, r1	; 27
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
     8c2:	29 e6       	ldi	r18, 0x69	; 105
     8c4:	38 e1       	ldi	r19, 0x18	; 24
     8c6:	91 50       	subi	r25, 0x01	; 1
     8c8:	20 40       	sbci	r18, 0x00	; 0
     8ca:	30 40       	sbci	r19, 0x00	; 0
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <main+0x5e>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <main+0x68>
     8d0:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
     8d2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <init_UART0>
	
	transmit_UART0('\r');
     8d6:	8d e0       	ldi	r24, 0x0D	; 13
     8d8:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('\r');
     8dc:	8d e0       	ldi	r24, 0x0D	; 13
     8de:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('H');
     8e2:	88 e4       	ldi	r24, 0x48	; 72
     8e4:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('e');
     8e8:	85 e6       	ldi	r24, 0x65	; 101
     8ea:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('l');
     8ee:	8c e6       	ldi	r24, 0x6C	; 108
     8f0:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('l');
     8f4:	8c e6       	ldi	r24, 0x6C	; 108
     8f6:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('o');
     8fa:	8f e6       	ldi	r24, 0x6F	; 111
     8fc:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
     900:	88 e2       	ldi	r24, 0x28	; 40
     902:	ed ed       	ldi	r30, 0xDD	; 221
     904:	f1 e0       	ldi	r31, 0x01	; 1
     906:	de 01       	movw	r26, r28
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	01 90       	ld	r0, Z+
     90c:	0d 92       	st	X+, r0
     90e:	8a 95       	dec	r24
     910:	e1 f7       	brne	.-8      	; 0x90a <main+0xa2>
	transmit_string_UART0(array);
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>

	sprintf(array,"\tThis is HUSSAIN's OBC-Slave code...");
     91a:	85 e2       	ldi	r24, 0x25	; 37
     91c:	e6 e1       	ldi	r30, 0x16	; 22
     91e:	f1 e0       	ldi	r31, 0x01	; 1
     920:	de 01       	movw	r26, r28
     922:	11 96       	adiw	r26, 0x01	; 1
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	8a 95       	dec	r24
     92a:	e1 f7       	brne	.-8      	; 0x924 <main+0xbc>
	sprintf(array1,"\rCommand received from Master :\t");
     92c:	81 e2       	ldi	r24, 0x21	; 33
     92e:	eb e3       	ldi	r30, 0x3B	; 59
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	de 01       	movw	r26, r28
     934:	99 96       	adiw	r26, 0x29	; 41
     936:	01 90       	ld	r0, Z+
     938:	0d 92       	st	X+, r0
     93a:	8a 95       	dec	r24
     93c:	e1 f7       	brne	.-8      	; 0x936 <main+0xce>
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	a8 95       	wdr
     944:	81 b5       	in	r24, 0x21	; 33
     946:	88 61       	ori	r24, 0x18	; 24
     948:	81 bd       	out	0x21, r24	; 33
     94a:	11 bc       	out	0x21, r1	; 33
     94c:	0f be       	out	0x3f, r0	; 63
	uint16_t crc, recv_crc;
	
	///Disable Watchdog Timer
	wdt_disable();
	///Initialise SPI as slave
	init_SPI_slave();
     94e:	0e 94 36 06 	call	0xc6c	; 0xc6c <init_SPI_slave>
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	90 e7       	ldi	r25, 0x70	; 112
     956:	22 e0       	ldi	r18, 0x02	; 2
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	90 40       	sbci	r25, 0x00	; 0
     95c:	20 40       	sbci	r18, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <main+0xf0>
     960:	00 c0       	rjmp	.+0      	; 0x962 <main+0xfa>
     962:	00 00       	nop
	_delay_ms(100);
	///EEPROM function to initialise I/O
	ioinit();
     964:	0e 94 21 01 	call	0x242	; 0x242 <ioinit>
     968:	3f ef       	ldi	r19, 0xFF	; 255
     96a:	80 e7       	ldi	r24, 0x70	; 112
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	31 50       	subi	r19, 0x01	; 1
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <main+0x106>
     976:	00 c0       	rjmp	.+0      	; 0x978 <main+0x110>
     978:	00 00       	nop
	_delay_ms(100);
	///Initialise CC1020 DIO pins
	cc1020_init_dio();
     97a:	0e 94 30 04 	call	0x860	; 0x860 <cc1020_init_dio>
     97e:	2f ef       	ldi	r18, 0xFF	; 255
     980:	30 e7       	ldi	r19, 0x70	; 112
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	21 50       	subi	r18, 0x01	; 1
     986:	30 40       	sbci	r19, 0x00	; 0
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	e1 f7       	brne	.-8      	; 0x984 <main+0x11c>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <main+0x126>
     98e:	00 00       	nop
	_delay_ms(100);
	
	///Enable Global Interrupts
	sei();
     990:	78 94       	sei
	sprintf(array1,"\rCommand received from Master :\t");
		
/************************************************************/
	/// Current state of satellite
	uint8_t frame[256], i=0;
	uint8_t transmission = 0, command;
     992:	f1 2c       	mov	r15, r1
	sprintf(array,"\tThis is HUSSAIN's OBC-Slave code...");
	sprintf(array1,"\rCommand received from Master :\t");
		
/************************************************************/
	/// Current state of satellite
	uint8_t frame[256], i=0;
     994:	31 2c       	mov	r3, r1
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
     996:	0a e0       	ldi	r16, 0x0A	; 10
	_delay_ms(500);
	PORTA = 0x05;
     998:	15 e0       	ldi	r17, 0x05	; 5
      {
        command = message[0];
        transmit_UART0(command);	
		
		if(command == BEGIN_TX_COMM)
			transmission = IN;
     99a:	22 24       	eor	r2, r2
     99c:	23 94       	inc	r2
			transmission = 0;
        }
        else if(command == HM_DATA)
        {
			make_ax25_frame_from_data(frame, (uint8_t *)message + 2);
			sprintf(array2,"Data written to EEPROM : %d th frame\t",i);
     99e:	0f 2e       	mov	r0, r31
     9a0:	fc e5       	ldi	r31, 0x5C	; 92
     9a2:	8f 2e       	mov	r8, r31
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	9f 2e       	mov	r9, r31
     9a8:	f0 2d       	mov	r31, r0
     9aa:	6e 01       	movw	r12, r28
     9ac:	91 e5       	ldi	r25, 0x51	; 81
     9ae:	c9 0e       	add	r12, r25
     9b0:	d1 1c       	adc	r13, r1
    }
    
	if(transmission == GS)
    {
		read_frame_from_eeprom(frame);
		sprintf(array2,"Data read from EEPROM : %d th frame\t",i);
     9b2:	0f 2e       	mov	r0, r31
     9b4:	f0 ea       	ldi	r31, 0xA0	; 160
     9b6:	af 2e       	mov	r10, r31
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	bf 2e       	mov	r11, r31
     9bc:	f0 2d       	mov	r31, r0
		transmit_string_UART0(array2);	
		if(read_addr == write_addr)
			read_addr -= FRAME_SIZE;
     9be:	0f 2e       	mov	r0, r31
     9c0:	fe ed       	ldi	r31, 0xDE	; 222
     9c2:	4f 2e       	mov	r4, r31
     9c4:	55 24       	eor	r5, r5
     9c6:	5a 94       	dec	r5
     9c8:	65 2c       	mov	r6, r5
     9ca:	75 2c       	mov	r7, r5
     9cc:	f0 2d       	mov	r31, r0
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
     9ce:	0b bb       	out	0x1b, r16	; 27
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	34 e3       	ldi	r19, 0x34	; 52
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	30 40       	sbci	r19, 0x00	; 0
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <main+0x16e>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <main+0x178>
     9e0:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
     9e2:	1b bb       	out	0x1b, r17	; 27
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	24 e3       	ldi	r18, 0x34	; 52
     9e8:	3c e0       	ldi	r19, 0x0C	; 12
     9ea:	91 50       	subi	r25, 0x01	; 1
     9ec:	20 40       	sbci	r18, 0x00	; 0
     9ee:	30 40       	sbci	r19, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <main+0x182>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <main+0x18c>
     9f4:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
     9f6:	8d e0       	ldi	r24, 0x0D	; 13
     9f8:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('\r');
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('H');
     a02:	88 e4       	ldi	r24, 0x48	; 72
     a04:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	transmit_UART0('i');
     a08:	89 e6       	ldi	r24, 0x69	; 105
     a0a:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
	
	transmit_string_UART0(array1);
     a0e:	ce 01       	movw	r24, r28
     a10:	89 96       	adiw	r24, 0x29	; 41
     a12:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
     a16:	0b bb       	out	0x1b, r16	; 27
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	94 e3       	ldi	r25, 0x34	; 52
     a1c:	2c e0       	ldi	r18, 0x0C	; 12
     a1e:	81 50       	subi	r24, 0x01	; 1
     a20:	90 40       	sbci	r25, 0x00	; 0
     a22:	20 40       	sbci	r18, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x1b6>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <main+0x1c0>
     a28:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
     a2a:	1b bb       	out	0x1b, r17	; 27
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	84 e3       	ldi	r24, 0x34	; 52
     a30:	9c e0       	ldi	r25, 0x0C	; 12
     a32:	31 50       	subi	r19, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0x1ca>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <main+0x1d4>
     a3c:	00 00       	nop
	_delay_ms(500);
	
	if(process)
     a3e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <process>
     a42:	88 23       	and	r24, r24
     a44:	09 f4       	brne	.+2      	; 0xa48 <main+0x1e0>
     a46:	76 c0       	rjmp	.+236    	; 0xb34 <main+0x2cc>
    {
      crc = calculate_crc_16((uint8_t *)message, t - (end_spi + sizeof(uint16_t)));
     a48:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <t>
     a4c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <end_spi>
     a50:	62 50       	subi	r22, 0x02	; 2
     a52:	68 1b       	sub	r22, r24
     a54:	88 e1       	ldi	r24, 0x18	; 24
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
     a5c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <t>
     a60:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <end_spi>
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	32 97       	sbiw	r30, 0x02	; 2
     a68:	e2 1b       	sub	r30, r18
     a6a:	f1 09       	sbc	r31, r1
     a6c:	e8 5e       	subi	r30, 0xE8	; 232
     a6e:	fd 4f       	sbci	r31, 0xFD	; 253
      if(crc == recv_crc)
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	09 f0       	breq	.+2      	; 0xa7c <main+0x214>
     a7a:	54 c0       	rjmp	.+168    	; 0xb24 <main+0x2bc>
      {
        command = message[0];
     a7c:	e0 90 18 02 	lds	r14, 0x0218	; 0x800218 <message>
        transmit_UART0(command);	
     a80:	8e 2d       	mov	r24, r14
     a82:	0e 94 be 06 	call	0xd7c	; 0xd7c <transmit_UART0>
		
		if(command == BEGIN_TX_COMM)
     a86:	2a e5       	ldi	r18, 0x5A	; 90
     a88:	e2 16       	cp	r14, r18
     a8a:	09 f4       	brne	.+2      	; 0xa8e <main+0x226>
     a8c:	46 c0       	rjmp	.+140    	; 0xb1a <main+0x2b2>
			transmission = IN;
		else if(command == BEGIN_TX_GS)
     a8e:	35 e5       	ldi	r19, 0x55	; 85
     a90:	e3 16       	cp	r14, r19
     a92:	09 f4       	brne	.+2      	; 0xa96 <main+0x22e>
     a94:	44 c0       	rjmp	.+136    	; 0xb1e <main+0x2b6>
          transmission = GS;
        else if(command == END_TX)
     a96:	83 e3       	ldi	r24, 0x33	; 51
     a98:	e8 12       	cpse	r14, r24
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <main+0x23e>
        {
			SPI_transfer(ACK);
     a9c:	82 e9       	ldi	r24, 0x92	; 146
     a9e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <SPI_transfer>
			transmission = 0;
     aa2:	f1 2c       	mov	r15, r1
     aa4:	3f c0       	rjmp	.+126    	; 0xb24 <main+0x2bc>
        }
        else if(command == HM_DATA)
     aa6:	e1 10       	cpse	r14, r1
     aa8:	24 c0       	rjmp	.+72     	; 0xaf2 <main+0x28a>
        {
			make_ax25_frame_from_data(frame, (uint8_t *)message + 2);
     aaa:	6a e1       	ldi	r22, 0x1A	; 26
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	ce 01       	movw	r24, r28
     ab0:	87 58       	subi	r24, 0x87	; 135
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	0e 94 9a 00 	call	0x134	; 0x134 <make_ax25_frame_from_data>
			sprintf(array2,"Data written to EEPROM : %d th frame\t",i);
     ab8:	1f 92       	push	r1
     aba:	3f 92       	push	r3
     abc:	9f 92       	push	r9
     abe:	8f 92       	push	r8
     ac0:	df 92       	push	r13
     ac2:	cf 92       	push	r12
     ac4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <sprintf>
			transmit_string_UART0(array2);	
     ac8:	c6 01       	movw	r24, r12
     aca:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
			i++;
     ace:	33 94       	inc	r3
			transmit_string_UART0(frame);	
     ad0:	ce 01       	movw	r24, r28
     ad2:	87 58       	subi	r24, 0x87	; 135
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
     ad6:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
			write_frame_to_eeprom(frame);
     ada:	ce 01       	movw	r24, r28
     adc:	87 58       	subi	r24, 0x87	; 135
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <write_frame_to_eeprom>
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	19 c0       	rjmp	.+50     	; 0xb24 <main+0x2bc>
        }
		else if(command == REAL_TIME)
     af2:	95 ed       	ldi	r25, 0xD5	; 213
     af4:	e9 12       	cpse	r14, r25
     af6:	16 c0       	rjmp	.+44     	; 0xb24 <main+0x2bc>
        {	make_ax25_frame_from_data(frame, (uint8_t *)message + 2);
     af8:	6a e1       	ldi	r22, 0x1A	; 26
     afa:	72 e0       	ldi	r23, 0x02	; 2
     afc:	ce 01       	movw	r24, r28
     afe:	87 58       	subi	r24, 0x87	; 135
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	0e 94 9a 00 	call	0x134	; 0x134 <make_ax25_frame_from_data>
			transmit_string_UART0("\rData received from Master :\t");
     b06:	82 e8       	ldi	r24, 0x82	; 130
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
			transmit_string_UART0(frame);	
     b0e:	ce 01       	movw	r24, r28
     b10:	87 58       	subi	r24, 0x87	; 135
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <main+0x2bc>
      {
        command = message[0];
        transmit_UART0(command);	
		
		if(command == BEGIN_TX_COMM)
			transmission = IN;
     b1a:	f2 2c       	mov	r15, r2
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <main+0x2bc>
		else if(command == BEGIN_TX_GS)
          transmission = GS;
     b1e:	68 94       	set
     b20:	ff 24       	eor	r15, r15
     b22:	f1 f8       	bld	r15, 1
			transmit_string_UART0("\rData received from Master :\t");
			transmit_string_UART0(frame);	
		}		
      }
	  
      end_spi = 0;
     b24:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <end_spi>
      start_spi = 0;
     b28:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <start_spi>
      t = 0;
     b2c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <t>
      process = 0;
     b30:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <process>
    }
    
	if(transmission == GS)
     b34:	22 e0       	ldi	r18, 0x02	; 2
     b36:	f2 12       	cpse	r15, r18
     b38:	35 c0       	rjmp	.+106    	; 0xba4 <main+0x33c>
    {
		read_frame_from_eeprom(frame);
     b3a:	ce 01       	movw	r24, r28
     b3c:	87 58       	subi	r24, 0x87	; 135
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	0e 94 e5 03 	call	0x7ca	; 0x7ca <read_frame_from_eeprom>
		sprintf(array2,"Data read from EEPROM : %d th frame\t",i);
     b44:	1f 92       	push	r1
     b46:	3f 92       	push	r3
     b48:	bf 92       	push	r11
     b4a:	af 92       	push	r10
     b4c:	df 92       	push	r13
     b4e:	cf 92       	push	r12
     b50:	0e 94 ce 06 	call	0xd9c	; 0xd9c <sprintf>
		transmit_string_UART0(array2);	
     b54:	c6 01       	movw	r24, r12
     b56:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
		if(read_addr == write_addr)
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <read_addr>
     b6a:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <read_addr+0x1>
     b6e:	a0 91 15 02 	lds	r26, 0x0215	; 0x800215 <read_addr+0x2>
     b72:	b0 91 16 02 	lds	r27, 0x0216	; 0x800216 <read_addr+0x3>
     b76:	89 2b       	or	r24, r25
     b78:	8a 2b       	or	r24, r26
     b7a:	8b 2b       	or	r24, r27
     b7c:	41 f4       	brne	.+16     	; 0xb8e <main+0x326>
			read_addr -= FRAME_SIZE;
     b7e:	40 92 13 02 	sts	0x0213, r4	; 0x800213 <read_addr>
     b82:	50 92 14 02 	sts	0x0214, r5	; 0x800214 <read_addr+0x1>
     b86:	60 92 15 02 	sts	0x0215, r6	; 0x800215 <read_addr+0x2>
     b8a:	70 92 16 02 	sts	0x0216, r7	; 0x800216 <read_addr+0x3>
        
    /**********		Start Transmission		**********/
		cc1020_transmit_packet(frame, FRAME_SIZE);
     b8e:	62 e2       	ldi	r22, 0x22	; 34
     b90:	ce 01       	movw	r24, r28
     b92:	87 58       	subi	r24, 0x87	; 135
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	0e 94 4d 06 	call	0xc9a	; 0xc9a <cc1020_transmit_packet>
    	transmit_string_UART0("\rTransmission complete\r");
     b9a:	85 ec       	ldi	r24, 0xC5	; 197
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
     ba2:	15 cf       	rjmp	.-470    	; 0x9ce <main+0x166>
	/**********		End of Transmission		**********/
	}
    
	if(transmission == IN)
     ba4:	31 e0       	ldi	r19, 0x01	; 1
     ba6:	f3 12       	cpse	r15, r19
     ba8:	12 cf       	rjmp	.-476    	; 0x9ce <main+0x166>
    {/**********		Start Transmission		**********/
		cc1020_transmit_packet(frame, FRAME_SIZE);
     baa:	62 e2       	ldi	r22, 0x22	; 34
     bac:	ce 01       	movw	r24, r28
     bae:	87 58       	subi	r24, 0x87	; 135
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <cc1020_transmit_packet>
    	transmit_string_UART0("\rTransmission complete\r");
     bb6:	85 ec       	ldi	r24, 0xC5	; 197
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 c2 06 	call	0xd84	; 0xd84 <transmit_string_UART0>
     bbe:	07 cf       	rjmp	.-498    	; 0x9ce <main+0x166>

00000bc0 <__vector_17>:

/**
 * @brief Interrupt service routine for SPI
 */
ISR(SPI_STC_vect)
{
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	8f 93       	push	r24
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
  spi = SPDR;
     bd4:	8f b1       	in	r24, 0x0f	; 15
     bd6:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <spi>
  
  if((!process) && (start_spi >= N_END_SPI))
     bda:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <process>
     bde:	81 11       	cpse	r24, r1
     be0:	2b c0       	rjmp	.+86     	; 0xc38 <__vector_17+0x78>
     be2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <start_spi>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	38 f1       	brcs	.+78     	; 0xc38 <__vector_17+0x78>
  {
    message[t] = spi;
     bea:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <t>
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <spi>
     bf4:	e8 5e       	subi	r30, 0xE8	; 232
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	80 83       	st	Z, r24
    
    if(message[t] == END_SPI)
     bfa:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <t>
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	e8 5e       	subi	r30, 0xE8	; 232
     c02:	fd 4f       	sbci	r31, 0xFD	; 253
     c04:	80 81       	ld	r24, Z
     c06:	8a 3a       	cpi	r24, 0xAA	; 170
     c08:	31 f4       	brne	.+12     	; 0xc16 <__vector_17+0x56>
      end_spi++;
     c0a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <end_spi>
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <end_spi>
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <__vector_17+0x60>
    else if(end_spi)
     c16:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <end_spi>
     c1a:	81 11       	cpse	r24, r1
      end_spi = 0;
     c1c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <end_spi>
      
    if(end_spi == N_END_SPI)
     c20:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <end_spi>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	19 f4       	brne	.+6      	; 0xc2e <__vector_17+0x6e>
      process = 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <process>
    t++;
     c2e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <t>
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <t>
  }
  
  if(spi == START_SPI)
     c38:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <spi>
     c3c:	87 3e       	cpi	r24, 0xE7	; 231
     c3e:	31 f4       	brne	.+12     	; 0xc4c <__vector_17+0x8c>
    start_spi++;
     c40:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <start_spi>
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <start_spi>
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <__vector_17+0x98>
  else if(start_spi < N_END_SPI)
     c4c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <start_spi>
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	10 f4       	brcc	.+4      	; 0xc58 <__vector_17+0x98>
    start_spi = 0;
     c54:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <start_spi>
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	8f 91       	pop	r24
     c5e:	0f 90       	pop	r0
     c60:	0b be       	out	0x3b, r0	; 59
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <init_SPI_slave>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
     c6c:	87 b3       	in	r24, 0x17	; 23
     c6e:	80 7f       	andi	r24, 0xF0	; 240
     c70:	87 bb       	out	0x17, r24	; 23
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	87 bb       	out	0x17, r24	; 23
     c76:	80 ec       	ldi	r24, 0xC0	; 192
     c78:	8d b9       	out	0x0d, r24	; 13
     c7a:	08 95       	ret

00000c7c <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
     c7c:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
     c7e:	77 9b       	sbis	0x0e, 7	; 14
     c80:	fe cf       	rjmp	.-4      	; 0xc7e <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
     c82:	8f b1       	in	r24, 0x0f	; 15
}
     c84:	08 95       	ret

00000c86 <cc1020_transmit_bit>:
#include "uart.h"
#include "transmit.h"

void cc1020_transmit_bit(uint8_t bit)
{
  while(PIN_TRX & (1 << DCLK));
     c86:	0c 99       	sbic	0x01, 4	; 1
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <cc1020_transmit_bit>
  if(bit == 0)
     c8a:	81 11       	cpse	r24, r1
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <cc1020_transmit_bit+0xc>
    cbi(PORT_TRX, DIO);
     c8e:	1d 98       	cbi	0x03, 5	; 3
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <cc1020_transmit_bit+0xe>
  else
    sbi(PORT_TRX, DIO);
     c92:	1d 9a       	sbi	0x03, 5	; 3
  while(!(PIN_TRX & (1 << DCLK)));
     c94:	0c 9b       	sbis	0x01, 4	; 1
     c96:	fe cf       	rjmp	.-4      	; 0xc94 <cc1020_transmit_bit+0xe>
}
     c98:	08 95       	ret

00000c9a <cc1020_transmit_packet>:

//with bit stuffing
void cc1020_transmit_packet(uint8_t *data, uint8_t size)
{
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	d8 2f       	mov	r29, r24
     cba:	c9 2f       	mov	r28, r25
     cbc:	e6 2e       	mov	r14, r22
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 43 06 	call	0xc86	; 0xc86 <cc1020_transmit_bit>
  
  for(i = 0; i < size; i++)
     cc4:	ee 20       	and	r14, r14
     cc6:	c1 f1       	breq	.+112    	; 0xd38 <cc1020_transmit_packet+0x9e>
     cc8:	cd 2e       	mov	r12, r29
     cca:	dc 2e       	mov	r13, r28
     ccc:	aa 24       	eor	r10, r10
     cce:	aa 94       	dec	r10
     cd0:	ae 0c       	add	r10, r14
     cd2:	b1 2c       	mov	r11, r1
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	a8 1a       	sub	r10, r24
     cd8:	b8 0a       	sbc	r11, r24
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	81 2c       	mov	r8, r1
  {
    byte = data[i];
     ce0:	68 94       	set
     ce2:	55 24       	eor	r5, r5
     ce4:	53 f8       	bld	r5, 3
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
     ce6:	f1 2c       	mov	r15, r1
     ce8:	e1 e0       	ldi	r30, 0x01	; 1
     cea:	ee 1a       	sub	r14, r30
     cec:	f1 08       	sbc	r15, r1
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
     cee:	61 2c       	mov	r6, r1
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
     cf0:	f6 01       	movw	r30, r12
     cf2:	d1 91       	ld	r29, Z+
     cf4:	6f 01       	movw	r12, r30
     cf6:	c5 2d       	mov	r28, r5
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
     cf8:	70 2e       	mov	r7, r16
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
     cfa:	fd 2f       	mov	r31, r29
     cfc:	f0 78       	andi	r31, 0x80	; 128
     cfe:	9f 2e       	mov	r9, r31
      cc1020_transmit_bit(bit);
     d00:	8f 2f       	mov	r24, r31
     d02:	0e 94 43 06 	call	0xc86	; 0xc86 <cc1020_transmit_bit>
      
      if((i != 0) && (i != size - 1))
     d06:	77 20       	and	r7, r7
     d08:	79 f0       	breq	.+30     	; 0xd28 <cc1020_transmit_packet+0x8e>
     d0a:	0e 15       	cp	r16, r14
     d0c:	1f 05       	cpc	r17, r15
     d0e:	61 f0       	breq	.+24     	; 0xd28 <cc1020_transmit_packet+0x8e>
      {
        if(bit)
     d10:	99 20       	and	r9, r9
     d12:	49 f0       	breq	.+18     	; 0xd26 <cc1020_transmit_packet+0x8c>
          ax_counter++;
     d14:	83 94       	inc	r8
        else
          ax_counter = 0;
        if(ax_counter == 5)
     d16:	85 e0       	ldi	r24, 0x05	; 5
     d18:	88 12       	cpse	r8, r24
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <cc1020_transmit_packet+0x8e>
        {
          ax_counter = 0;
          cc1020_transmit_bit(0);
     d1c:	86 2d       	mov	r24, r6
     d1e:	0e 94 43 06 	call	0xc86	; 0xc86 <cc1020_transmit_bit>
          ax_counter++;
        else
          ax_counter = 0;
        if(ax_counter == 5)
        {
          ax_counter = 0;
     d22:	86 2c       	mov	r8, r6
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <cc1020_transmit_packet+0x8e>
      if((i != 0) && (i != size - 1))
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
     d26:	86 2c       	mov	r8, r6
          ax_counter = 0;
          cc1020_transmit_bit(0);
        }
      }  
      
      byte = byte << 1;
     d28:	dd 0f       	add	r29, r29
     d2a:	c1 50       	subi	r28, 0x01	; 1
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
     d2c:	31 f7       	brne	.-52     	; 0xcfa <cc1020_transmit_packet+0x60>
     d2e:	0f 5f       	subi	r16, 0xFF	; 255
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
     d32:	0a 15       	cp	r16, r10
     d34:	1b 05       	cpc	r17, r11
     d36:	e1 f6       	brne	.-72     	; 0xcf0 <cc1020_transmit_packet+0x56>
      
      byte = byte << 1;
    }
  }
  
  sbi(PORT_TRX, DIO);
     d38:	1d 9a       	sbi	0x03, 5	; 3
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	8f 90       	pop	r8
     d52:	7f 90       	pop	r7
     d54:	6f 90       	pop	r6
     d56:	5f 90       	pop	r5
     d58:	08 95       	ret

00000d5a <init_UART0>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
     d5a:	1b b8       	out	0x0b, r1	; 11
     d5c:	1a b8       	out	0x0a, r1	; 10
     d5e:	e5 e9       	ldi	r30, 0x95	; 149
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	10 82       	st	Z, r1
     d64:	59 9a       	sbi	0x0b, 1	; 11
     d66:	8a b1       	in	r24, 0x0a	; 10
     d68:	88 61       	ori	r24, 0x18	; 24
     d6a:	8a b9       	out	0x0a, r24	; 10
     d6c:	80 81       	ld	r24, Z
     d6e:	8e 60       	ori	r24, 0x0E	; 14
     d70:	80 83       	st	Z, r24
     d72:	87 e6       	ldi	r24, 0x67	; 103
     d74:	89 b9       	out	0x09, r24	; 9
     d76:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     d7a:	08 95       	ret

00000d7c <transmit_UART0>:
     d7c:	5d 9b       	sbis	0x0b, 5	; 11
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <transmit_UART0>
     d80:	8c b9       	out	0x0c, r24	; 12
     d82:	08 95       	ret

00000d84 <transmit_string_UART0>:
    i++;
  }
}

void transmit_string_UART0(char *buffer)
{
     d84:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     d86:	90 81       	ld	r25, Z
     d88:	99 23       	and	r25, r25
     d8a:	39 f0       	breq	.+14     	; 0xd9a <transmit_string_UART0+0x16>
     d8c:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
     d8e:	5d 9b       	sbis	0x0b, 5	; 11
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
     d92:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     d94:	91 91       	ld	r25, Z+
     d96:	91 11       	cpse	r25, r1
     d98:	fa cf       	rjmp	.-12     	; 0xd8e <transmit_string_UART0+0xa>
     d9a:	08 95       	ret

00000d9c <sprintf>:
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	2e 97       	sbiw	r28, 0x0e	; 14
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	0d 89       	ldd	r16, Y+21	; 0x15
     db6:	1e 89       	ldd	r17, Y+22	; 0x16
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	1a 83       	std	Y+2, r17	; 0x02
     dbe:	09 83       	std	Y+1, r16	; 0x01
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f e7       	ldi	r25, 0x7F	; 127
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	ae 01       	movw	r20, r28
     dca:	47 5e       	subi	r20, 0xE7	; 231
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	6f 89       	ldd	r22, Y+23	; 0x17
     dd0:	78 8d       	ldd	r23, Y+24	; 0x18
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vfprintf>
     dda:	2f 81       	ldd	r18, Y+7	; 0x07
     ddc:	38 85       	ldd	r19, Y+8	; 0x08
     dde:	f8 01       	movw	r30, r16
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	10 82       	st	Z, r1
     de6:	2e 96       	adiw	r28, 0x0e	; 14
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <vfprintf>:
     dfc:	2f 92       	push	r2
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	2c 97       	sbiw	r28, 0x0c	; 12
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	7c 01       	movw	r14, r24
     e32:	6b 01       	movw	r12, r22
     e34:	8a 01       	movw	r16, r20
     e36:	fc 01       	movw	r30, r24
     e38:	17 82       	std	Z+7, r1	; 0x07
     e3a:	16 82       	std	Z+6, r1	; 0x06
     e3c:	83 81       	ldd	r24, Z+3	; 0x03
     e3e:	81 ff       	sbrs	r24, 1
     e40:	bd c1       	rjmp	.+890    	; 0x11bc <__stack+0xbd>
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	4c 01       	movw	r8, r24
     e48:	f7 01       	movw	r30, r14
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	f6 01       	movw	r30, r12
     e4e:	93 fd       	sbrc	r25, 3
     e50:	85 91       	lpm	r24, Z+
     e52:	93 ff       	sbrs	r25, 3
     e54:	81 91       	ld	r24, Z+
     e56:	6f 01       	movw	r12, r30
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <vfprintf+0x62>
     e5c:	ab c1       	rjmp	.+854    	; 0x11b4 <__stack+0xb5>
     e5e:	85 32       	cpi	r24, 0x25	; 37
     e60:	39 f4       	brne	.+14     	; 0xe70 <vfprintf+0x74>
     e62:	93 fd       	sbrc	r25, 3
     e64:	85 91       	lpm	r24, Z+
     e66:	93 ff       	sbrs	r25, 3
     e68:	81 91       	ld	r24, Z+
     e6a:	6f 01       	movw	r12, r30
     e6c:	85 32       	cpi	r24, 0x25	; 37
     e6e:	29 f4       	brne	.+10     	; 0xe7a <vfprintf+0x7e>
     e70:	b7 01       	movw	r22, r14
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
     e78:	e7 cf       	rjmp	.-50     	; 0xe48 <vfprintf+0x4c>
     e7a:	51 2c       	mov	r5, r1
     e7c:	31 2c       	mov	r3, r1
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	20 32       	cpi	r18, 0x20	; 32
     e82:	a0 f4       	brcc	.+40     	; 0xeac <vfprintf+0xb0>
     e84:	8b 32       	cpi	r24, 0x2B	; 43
     e86:	69 f0       	breq	.+26     	; 0xea2 <vfprintf+0xa6>
     e88:	30 f4       	brcc	.+12     	; 0xe96 <vfprintf+0x9a>
     e8a:	80 32       	cpi	r24, 0x20	; 32
     e8c:	59 f0       	breq	.+22     	; 0xea4 <vfprintf+0xa8>
     e8e:	83 32       	cpi	r24, 0x23	; 35
     e90:	69 f4       	brne	.+26     	; 0xeac <vfprintf+0xb0>
     e92:	20 61       	ori	r18, 0x10	; 16
     e94:	2c c0       	rjmp	.+88     	; 0xeee <vfprintf+0xf2>
     e96:	8d 32       	cpi	r24, 0x2D	; 45
     e98:	39 f0       	breq	.+14     	; 0xea8 <vfprintf+0xac>
     e9a:	80 33       	cpi	r24, 0x30	; 48
     e9c:	39 f4       	brne	.+14     	; 0xeac <vfprintf+0xb0>
     e9e:	21 60       	ori	r18, 0x01	; 1
     ea0:	26 c0       	rjmp	.+76     	; 0xeee <vfprintf+0xf2>
     ea2:	22 60       	ori	r18, 0x02	; 2
     ea4:	24 60       	ori	r18, 0x04	; 4
     ea6:	23 c0       	rjmp	.+70     	; 0xeee <vfprintf+0xf2>
     ea8:	28 60       	ori	r18, 0x08	; 8
     eaa:	21 c0       	rjmp	.+66     	; 0xeee <vfprintf+0xf2>
     eac:	27 fd       	sbrc	r18, 7
     eae:	27 c0       	rjmp	.+78     	; 0xefe <vfprintf+0x102>
     eb0:	30 ed       	ldi	r19, 0xD0	; 208
     eb2:	38 0f       	add	r19, r24
     eb4:	3a 30       	cpi	r19, 0x0A	; 10
     eb6:	78 f4       	brcc	.+30     	; 0xed6 <vfprintf+0xda>
     eb8:	26 ff       	sbrs	r18, 6
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0xcc>
     ebc:	fa e0       	ldi	r31, 0x0A	; 10
     ebe:	5f 9e       	mul	r5, r31
     ec0:	30 0d       	add	r19, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	53 2e       	mov	r5, r19
     ec6:	13 c0       	rjmp	.+38     	; 0xeee <vfprintf+0xf2>
     ec8:	8a e0       	ldi	r24, 0x0A	; 10
     eca:	38 9e       	mul	r3, r24
     ecc:	30 0d       	add	r19, r0
     ece:	11 24       	eor	r1, r1
     ed0:	33 2e       	mov	r3, r19
     ed2:	20 62       	ori	r18, 0x20	; 32
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <vfprintf+0xf2>
     ed6:	8e 32       	cpi	r24, 0x2E	; 46
     ed8:	21 f4       	brne	.+8      	; 0xee2 <vfprintf+0xe6>
     eda:	26 fd       	sbrc	r18, 6
     edc:	6b c1       	rjmp	.+726    	; 0x11b4 <__stack+0xb5>
     ede:	20 64       	ori	r18, 0x40	; 64
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <vfprintf+0xf2>
     ee2:	8c 36       	cpi	r24, 0x6C	; 108
     ee4:	11 f4       	brne	.+4      	; 0xeea <vfprintf+0xee>
     ee6:	20 68       	ori	r18, 0x80	; 128
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0xf2>
     eea:	88 36       	cpi	r24, 0x68	; 104
     eec:	41 f4       	brne	.+16     	; 0xefe <vfprintf+0x102>
     eee:	f6 01       	movw	r30, r12
     ef0:	93 fd       	sbrc	r25, 3
     ef2:	85 91       	lpm	r24, Z+
     ef4:	93 ff       	sbrs	r25, 3
     ef6:	81 91       	ld	r24, Z+
     ef8:	6f 01       	movw	r12, r30
     efa:	81 11       	cpse	r24, r1
     efc:	c1 cf       	rjmp	.-126    	; 0xe80 <vfprintf+0x84>
     efe:	98 2f       	mov	r25, r24
     f00:	9f 7d       	andi	r25, 0xDF	; 223
     f02:	95 54       	subi	r25, 0x45	; 69
     f04:	93 30       	cpi	r25, 0x03	; 3
     f06:	28 f4       	brcc	.+10     	; 0xf12 <vfprintf+0x116>
     f08:	0c 5f       	subi	r16, 0xFC	; 252
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	ff e3       	ldi	r31, 0x3F	; 63
     f0e:	f9 83       	std	Y+1, r31	; 0x01
     f10:	0d c0       	rjmp	.+26     	; 0xf2c <vfprintf+0x130>
     f12:	83 36       	cpi	r24, 0x63	; 99
     f14:	31 f0       	breq	.+12     	; 0xf22 <vfprintf+0x126>
     f16:	83 37       	cpi	r24, 0x73	; 115
     f18:	71 f0       	breq	.+28     	; 0xf36 <vfprintf+0x13a>
     f1a:	83 35       	cpi	r24, 0x53	; 83
     f1c:	09 f0       	breq	.+2      	; 0xf20 <vfprintf+0x124>
     f1e:	5b c0       	rjmp	.+182    	; 0xfd6 <vfprintf+0x1da>
     f20:	22 c0       	rjmp	.+68     	; 0xf66 <vfprintf+0x16a>
     f22:	f8 01       	movw	r30, r16
     f24:	80 81       	ld	r24, Z
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	0e 5f       	subi	r16, 0xFE	; 254
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	44 24       	eor	r4, r4
     f2e:	43 94       	inc	r4
     f30:	51 2c       	mov	r5, r1
     f32:	54 01       	movw	r10, r8
     f34:	15 c0       	rjmp	.+42     	; 0xf60 <vfprintf+0x164>
     f36:	38 01       	movw	r6, r16
     f38:	f2 e0       	ldi	r31, 0x02	; 2
     f3a:	6f 0e       	add	r6, r31
     f3c:	71 1c       	adc	r7, r1
     f3e:	f8 01       	movw	r30, r16
     f40:	a0 80       	ld	r10, Z
     f42:	b1 80       	ldd	r11, Z+1	; 0x01
     f44:	26 ff       	sbrs	r18, 6
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <vfprintf+0x152>
     f48:	65 2d       	mov	r22, r5
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x156>
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f ef       	ldi	r23, 0xFF	; 255
     f52:	c5 01       	movw	r24, r10
     f54:	2c 87       	std	Y+12, r18	; 0x0c
     f56:	0e 94 04 09 	call	0x1208	; 0x1208 <strnlen>
     f5a:	2c 01       	movw	r4, r24
     f5c:	83 01       	movw	r16, r6
     f5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f60:	2f 77       	andi	r18, 0x7F	; 127
     f62:	22 2e       	mov	r2, r18
     f64:	17 c0       	rjmp	.+46     	; 0xf94 <vfprintf+0x198>
     f66:	38 01       	movw	r6, r16
     f68:	f2 e0       	ldi	r31, 0x02	; 2
     f6a:	6f 0e       	add	r6, r31
     f6c:	71 1c       	adc	r7, r1
     f6e:	f8 01       	movw	r30, r16
     f70:	a0 80       	ld	r10, Z
     f72:	b1 80       	ldd	r11, Z+1	; 0x01
     f74:	26 ff       	sbrs	r18, 6
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x182>
     f78:	65 2d       	mov	r22, r5
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x186>
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	7f ef       	ldi	r23, 0xFF	; 255
     f82:	c5 01       	movw	r24, r10
     f84:	2c 87       	std	Y+12, r18	; 0x0c
     f86:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strnlen_P>
     f8a:	2c 01       	movw	r4, r24
     f8c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f8e:	20 68       	ori	r18, 0x80	; 128
     f90:	22 2e       	mov	r2, r18
     f92:	83 01       	movw	r16, r6
     f94:	23 fc       	sbrc	r2, 3
     f96:	1b c0       	rjmp	.+54     	; 0xfce <vfprintf+0x1d2>
     f98:	83 2d       	mov	r24, r3
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	48 16       	cp	r4, r24
     f9e:	59 06       	cpc	r5, r25
     fa0:	b0 f4       	brcc	.+44     	; 0xfce <vfprintf+0x1d2>
     fa2:	b7 01       	movw	r22, r14
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
     fac:	3a 94       	dec	r3
     fae:	f4 cf       	rjmp	.-24     	; 0xf98 <vfprintf+0x19c>
     fb0:	f5 01       	movw	r30, r10
     fb2:	27 fc       	sbrc	r2, 7
     fb4:	85 91       	lpm	r24, Z+
     fb6:	27 fe       	sbrs	r2, 7
     fb8:	81 91       	ld	r24, Z+
     fba:	5f 01       	movw	r10, r30
     fbc:	b7 01       	movw	r22, r14
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
     fc4:	31 10       	cpse	r3, r1
     fc6:	3a 94       	dec	r3
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	4f 1a       	sub	r4, r31
     fcc:	51 08       	sbc	r5, r1
     fce:	41 14       	cp	r4, r1
     fd0:	51 04       	cpc	r5, r1
     fd2:	71 f7       	brne	.-36     	; 0xfb0 <vfprintf+0x1b4>
     fd4:	e5 c0       	rjmp	.+458    	; 0x11a0 <__stack+0xa1>
     fd6:	84 36       	cpi	r24, 0x64	; 100
     fd8:	11 f0       	breq	.+4      	; 0xfde <vfprintf+0x1e2>
     fda:	89 36       	cpi	r24, 0x69	; 105
     fdc:	39 f5       	brne	.+78     	; 0x102c <vfprintf+0x230>
     fde:	f8 01       	movw	r30, r16
     fe0:	27 ff       	sbrs	r18, 7
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <vfprintf+0x1f6>
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	0c 5f       	subi	r16, 0xFC	; 252
     fee:	1f 4f       	sbci	r17, 0xFF	; 255
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <vfprintf+0x206>
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	07 2e       	mov	r0, r23
     ff8:	00 0c       	add	r0, r0
     ffa:	88 0b       	sbc	r24, r24
     ffc:	99 0b       	sbc	r25, r25
     ffe:	0e 5f       	subi	r16, 0xFE	; 254
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	2f 76       	andi	r18, 0x6F	; 111
    1004:	72 2e       	mov	r7, r18
    1006:	97 ff       	sbrs	r25, 7
    1008:	09 c0       	rjmp	.+18     	; 0x101c <vfprintf+0x220>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	20 68       	ori	r18, 0x80	; 128
    101a:	72 2e       	mov	r7, r18
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	a4 01       	movw	r20, r8
    1022:	0e 94 47 09 	call	0x128e	; 0x128e <__ultoa_invert>
    1026:	a8 2e       	mov	r10, r24
    1028:	a8 18       	sub	r10, r8
    102a:	44 c0       	rjmp	.+136    	; 0x10b4 <vfprintf+0x2b8>
    102c:	85 37       	cpi	r24, 0x75	; 117
    102e:	29 f4       	brne	.+10     	; 0x103a <vfprintf+0x23e>
    1030:	2f 7e       	andi	r18, 0xEF	; 239
    1032:	b2 2e       	mov	r11, r18
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	25 c0       	rjmp	.+74     	; 0x1084 <vfprintf+0x288>
    103a:	f2 2f       	mov	r31, r18
    103c:	f9 7f       	andi	r31, 0xF9	; 249
    103e:	bf 2e       	mov	r11, r31
    1040:	8f 36       	cpi	r24, 0x6F	; 111
    1042:	c1 f0       	breq	.+48     	; 0x1074 <vfprintf+0x278>
    1044:	18 f4       	brcc	.+6      	; 0x104c <vfprintf+0x250>
    1046:	88 35       	cpi	r24, 0x58	; 88
    1048:	79 f0       	breq	.+30     	; 0x1068 <vfprintf+0x26c>
    104a:	b4 c0       	rjmp	.+360    	; 0x11b4 <__stack+0xb5>
    104c:	80 37       	cpi	r24, 0x70	; 112
    104e:	19 f0       	breq	.+6      	; 0x1056 <vfprintf+0x25a>
    1050:	88 37       	cpi	r24, 0x78	; 120
    1052:	21 f0       	breq	.+8      	; 0x105c <vfprintf+0x260>
    1054:	af c0       	rjmp	.+350    	; 0x11b4 <__stack+0xb5>
    1056:	2f 2f       	mov	r18, r31
    1058:	20 61       	ori	r18, 0x10	; 16
    105a:	b2 2e       	mov	r11, r18
    105c:	b4 fe       	sbrs	r11, 4
    105e:	0d c0       	rjmp	.+26     	; 0x107a <vfprintf+0x27e>
    1060:	8b 2d       	mov	r24, r11
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	b8 2e       	mov	r11, r24
    1066:	09 c0       	rjmp	.+18     	; 0x107a <vfprintf+0x27e>
    1068:	24 ff       	sbrs	r18, 4
    106a:	0a c0       	rjmp	.+20     	; 0x1080 <vfprintf+0x284>
    106c:	9f 2f       	mov	r25, r31
    106e:	96 60       	ori	r25, 0x06	; 6
    1070:	b9 2e       	mov	r11, r25
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <vfprintf+0x284>
    1074:	28 e0       	ldi	r18, 0x08	; 8
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <vfprintf+0x288>
    107a:	20 e1       	ldi	r18, 0x10	; 16
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <vfprintf+0x288>
    1080:	20 e1       	ldi	r18, 0x10	; 16
    1082:	32 e0       	ldi	r19, 0x02	; 2
    1084:	f8 01       	movw	r30, r16
    1086:	b7 fe       	sbrs	r11, 7
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vfprintf+0x29c>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0c 5f       	subi	r16, 0xFC	; 252
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x2a8>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 5f       	subi	r16, 0xFE	; 254
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	a4 01       	movw	r20, r8
    10a6:	0e 94 47 09 	call	0x128e	; 0x128e <__ultoa_invert>
    10aa:	a8 2e       	mov	r10, r24
    10ac:	a8 18       	sub	r10, r8
    10ae:	fb 2d       	mov	r31, r11
    10b0:	ff 77       	andi	r31, 0x7F	; 127
    10b2:	7f 2e       	mov	r7, r31
    10b4:	76 fe       	sbrs	r7, 6
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <vfprintf+0x2d2>
    10b8:	37 2d       	mov	r19, r7
    10ba:	3e 7f       	andi	r19, 0xFE	; 254
    10bc:	a5 14       	cp	r10, r5
    10be:	50 f4       	brcc	.+20     	; 0x10d4 <vfprintf+0x2d8>
    10c0:	74 fe       	sbrs	r7, 4
    10c2:	0a c0       	rjmp	.+20     	; 0x10d8 <vfprintf+0x2dc>
    10c4:	72 fc       	sbrc	r7, 2
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <vfprintf+0x2dc>
    10c8:	37 2d       	mov	r19, r7
    10ca:	3e 7e       	andi	r19, 0xEE	; 238
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <vfprintf+0x2dc>
    10ce:	ba 2c       	mov	r11, r10
    10d0:	37 2d       	mov	r19, r7
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0x2de>
    10d4:	ba 2c       	mov	r11, r10
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <vfprintf+0x2de>
    10d8:	b5 2c       	mov	r11, r5
    10da:	34 ff       	sbrs	r19, 4
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <vfprintf+0x2fc>
    10de:	fe 01       	movw	r30, r28
    10e0:	ea 0d       	add	r30, r10
    10e2:	f1 1d       	adc	r31, r1
    10e4:	80 81       	ld	r24, Z
    10e6:	80 33       	cpi	r24, 0x30	; 48
    10e8:	11 f4       	brne	.+4      	; 0x10ee <vfprintf+0x2f2>
    10ea:	39 7e       	andi	r19, 0xE9	; 233
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <__stack+0x1>
    10ee:	32 ff       	sbrs	r19, 2
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0x302>
    10f2:	b3 94       	inc	r11
    10f4:	b3 94       	inc	r11
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__stack+0x1>
    10f8:	83 2f       	mov	r24, r19
    10fa:	86 78       	andi	r24, 0x86	; 134
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__stack+0x1>
    10fe:	b3 94       	inc	r11
    1100:	33 fd       	sbrc	r19, 3
    1102:	13 c0       	rjmp	.+38     	; 0x112a <__stack+0x2b>
    1104:	30 ff       	sbrs	r19, 0
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <__stack+0x15>
    1108:	5a 2c       	mov	r5, r10
    110a:	b3 14       	cp	r11, r3
    110c:	18 f4       	brcc	.+6      	; 0x1114 <__stack+0x15>
    110e:	53 0c       	add	r5, r3
    1110:	5b 18       	sub	r5, r11
    1112:	b3 2c       	mov	r11, r3
    1114:	b3 14       	cp	r11, r3
    1116:	68 f4       	brcc	.+26     	; 0x1132 <__stack+0x33>
    1118:	b7 01       	movw	r22, r14
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	3c 87       	std	Y+12, r19	; 0x0c
    1120:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1124:	b3 94       	inc	r11
    1126:	3c 85       	ldd	r19, Y+12	; 0x0c
    1128:	f5 cf       	rjmp	.-22     	; 0x1114 <__stack+0x15>
    112a:	b3 14       	cp	r11, r3
    112c:	10 f4       	brcc	.+4      	; 0x1132 <__stack+0x33>
    112e:	3b 18       	sub	r3, r11
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <__stack+0x35>
    1132:	31 2c       	mov	r3, r1
    1134:	34 ff       	sbrs	r19, 4
    1136:	12 c0       	rjmp	.+36     	; 0x115c <__stack+0x5d>
    1138:	b7 01       	movw	r22, r14
    113a:	80 e3       	ldi	r24, 0x30	; 48
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	3c 87       	std	Y+12, r19	; 0x0c
    1140:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1144:	3c 85       	ldd	r19, Y+12	; 0x0c
    1146:	32 ff       	sbrs	r19, 2
    1148:	17 c0       	rjmp	.+46     	; 0x1178 <__stack+0x79>
    114a:	31 fd       	sbrc	r19, 1
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <__stack+0x55>
    114e:	88 e7       	ldi	r24, 0x78	; 120
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <__stack+0x59>
    1154:	88 e5       	ldi	r24, 0x58	; 88
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b7 01       	movw	r22, r14
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <__stack+0x75>
    115c:	83 2f       	mov	r24, r19
    115e:	86 78       	andi	r24, 0x86	; 134
    1160:	59 f0       	breq	.+22     	; 0x1178 <__stack+0x79>
    1162:	31 ff       	sbrs	r19, 1
    1164:	02 c0       	rjmp	.+4      	; 0x116a <__stack+0x6b>
    1166:	8b e2       	ldi	r24, 0x2B	; 43
    1168:	01 c0       	rjmp	.+2      	; 0x116c <__stack+0x6d>
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	37 fd       	sbrc	r19, 7
    116e:	8d e2       	ldi	r24, 0x2D	; 45
    1170:	b7 01       	movw	r22, r14
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1178:	a5 14       	cp	r10, r5
    117a:	38 f4       	brcc	.+14     	; 0x118a <__stack+0x8b>
    117c:	b7 01       	movw	r22, r14
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1186:	5a 94       	dec	r5
    1188:	f7 cf       	rjmp	.-18     	; 0x1178 <__stack+0x79>
    118a:	aa 94       	dec	r10
    118c:	f4 01       	movw	r30, r8
    118e:	ea 0d       	add	r30, r10
    1190:	f1 1d       	adc	r31, r1
    1192:	80 81       	ld	r24, Z
    1194:	b7 01       	movw	r22, r14
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    119c:	a1 10       	cpse	r10, r1
    119e:	f5 cf       	rjmp	.-22     	; 0x118a <__stack+0x8b>
    11a0:	33 20       	and	r3, r3
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	51 ce       	rjmp	.-862    	; 0xe48 <vfprintf+0x4c>
    11a6:	b7 01       	movw	r22, r14
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    11b0:	3a 94       	dec	r3
    11b2:	f6 cf       	rjmp	.-20     	; 0x11a0 <__stack+0xa1>
    11b4:	f7 01       	movw	r30, r14
    11b6:	86 81       	ldd	r24, Z+6	; 0x06
    11b8:	97 81       	ldd	r25, Z+7	; 0x07
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <__stack+0xc1>
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	2c 96       	adiw	r28, 0x0c	; 12
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	9f 90       	pop	r9
    11e2:	8f 90       	pop	r8
    11e4:	7f 90       	pop	r7
    11e6:	6f 90       	pop	r6
    11e8:	5f 90       	pop	r5
    11ea:	4f 90       	pop	r4
    11ec:	3f 90       	pop	r3
    11ee:	2f 90       	pop	r2
    11f0:	08 95       	ret

000011f2 <strnlen_P>:
    11f2:	fc 01       	movw	r30, r24
    11f4:	05 90       	lpm	r0, Z+
    11f6:	61 50       	subi	r22, 0x01	; 1
    11f8:	70 40       	sbci	r23, 0x00	; 0
    11fa:	01 10       	cpse	r0, r1
    11fc:	d8 f7       	brcc	.-10     	; 0x11f4 <strnlen_P+0x2>
    11fe:	80 95       	com	r24
    1200:	90 95       	com	r25
    1202:	8e 0f       	add	r24, r30
    1204:	9f 1f       	adc	r25, r31
    1206:	08 95       	ret

00001208 <strnlen>:
    1208:	fc 01       	movw	r30, r24
    120a:	61 50       	subi	r22, 0x01	; 1
    120c:	70 40       	sbci	r23, 0x00	; 0
    120e:	01 90       	ld	r0, Z+
    1210:	01 10       	cpse	r0, r1
    1212:	d8 f7       	brcc	.-10     	; 0x120a <strnlen+0x2>
    1214:	80 95       	com	r24
    1216:	90 95       	com	r25
    1218:	8e 0f       	add	r24, r30
    121a:	9f 1f       	adc	r25, r31
    121c:	08 95       	ret

0000121e <fputc>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	fb 01       	movw	r30, r22
    1228:	23 81       	ldd	r18, Z+3	; 0x03
    122a:	21 fd       	sbrc	r18, 1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <fputc+0x16>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	28 c0       	rjmp	.+80     	; 0x1284 <fputc+0x66>
    1234:	22 ff       	sbrs	r18, 2
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <fputc+0x46>
    1238:	46 81       	ldd	r20, Z+6	; 0x06
    123a:	57 81       	ldd	r21, Z+7	; 0x07
    123c:	24 81       	ldd	r18, Z+4	; 0x04
    123e:	35 81       	ldd	r19, Z+5	; 0x05
    1240:	42 17       	cp	r20, r18
    1242:	53 07       	cpc	r21, r19
    1244:	44 f4       	brge	.+16     	; 0x1256 <fputc+0x38>
    1246:	a0 81       	ld	r26, Z
    1248:	b1 81       	ldd	r27, Z+1	; 0x01
    124a:	9d 01       	movw	r18, r26
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	31 83       	std	Z+1, r19	; 0x01
    1252:	20 83       	st	Z, r18
    1254:	8c 93       	st	X, r24
    1256:	26 81       	ldd	r18, Z+6	; 0x06
    1258:	37 81       	ldd	r19, Z+7	; 0x07
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	37 83       	std	Z+7, r19	; 0x07
    1260:	26 83       	std	Z+6, r18	; 0x06
    1262:	10 c0       	rjmp	.+32     	; 0x1284 <fputc+0x66>
    1264:	eb 01       	movw	r28, r22
    1266:	09 2f       	mov	r16, r25
    1268:	18 2f       	mov	r17, r24
    126a:	00 84       	ldd	r0, Z+8	; 0x08
    126c:	f1 85       	ldd	r31, Z+9	; 0x09
    126e:	e0 2d       	mov	r30, r0
    1270:	09 95       	icall
    1272:	89 2b       	or	r24, r25
    1274:	e1 f6       	brne	.-72     	; 0x122e <fputc+0x10>
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	8e 83       	std	Y+6, r24	; 0x06
    1280:	81 2f       	mov	r24, r17
    1282:	90 2f       	mov	r25, r16
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <__ultoa_invert>:
    128e:	fa 01       	movw	r30, r20
    1290:	aa 27       	eor	r26, r26
    1292:	28 30       	cpi	r18, 0x08	; 8
    1294:	51 f1       	breq	.+84     	; 0x12ea <__ultoa_invert+0x5c>
    1296:	20 31       	cpi	r18, 0x10	; 16
    1298:	81 f1       	breq	.+96     	; 0x12fa <__ultoa_invert+0x6c>
    129a:	e8 94       	clt
    129c:	6f 93       	push	r22
    129e:	6e 7f       	andi	r22, 0xFE	; 254
    12a0:	6e 5f       	subi	r22, 0xFE	; 254
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	af 4f       	sbci	r26, 0xFF	; 255
    12aa:	b1 e0       	ldi	r27, 0x01	; 1
    12ac:	3e d0       	rcall	.+124    	; 0x132a <__ultoa_invert+0x9c>
    12ae:	b4 e0       	ldi	r27, 0x04	; 4
    12b0:	3c d0       	rcall	.+120    	; 0x132a <__ultoa_invert+0x9c>
    12b2:	67 0f       	add	r22, r23
    12b4:	78 1f       	adc	r23, r24
    12b6:	89 1f       	adc	r24, r25
    12b8:	9a 1f       	adc	r25, r26
    12ba:	a1 1d       	adc	r26, r1
    12bc:	68 0f       	add	r22, r24
    12be:	79 1f       	adc	r23, r25
    12c0:	8a 1f       	adc	r24, r26
    12c2:	91 1d       	adc	r25, r1
    12c4:	a1 1d       	adc	r26, r1
    12c6:	6a 0f       	add	r22, r26
    12c8:	71 1d       	adc	r23, r1
    12ca:	81 1d       	adc	r24, r1
    12cc:	91 1d       	adc	r25, r1
    12ce:	a1 1d       	adc	r26, r1
    12d0:	20 d0       	rcall	.+64     	; 0x1312 <__ultoa_invert+0x84>
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <__ultoa_invert+0x48>
    12d4:	68 94       	set
    12d6:	3f 91       	pop	r19
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	26 9f       	mul	r18, r22
    12dc:	11 24       	eor	r1, r1
    12de:	30 19       	sub	r19, r0
    12e0:	30 5d       	subi	r19, 0xD0	; 208
    12e2:	31 93       	st	Z+, r19
    12e4:	de f6       	brtc	.-74     	; 0x129c <__ultoa_invert+0xe>
    12e6:	cf 01       	movw	r24, r30
    12e8:	08 95       	ret
    12ea:	46 2f       	mov	r20, r22
    12ec:	47 70       	andi	r20, 0x07	; 7
    12ee:	40 5d       	subi	r20, 0xD0	; 208
    12f0:	41 93       	st	Z+, r20
    12f2:	b3 e0       	ldi	r27, 0x03	; 3
    12f4:	0f d0       	rcall	.+30     	; 0x1314 <__ultoa_invert+0x86>
    12f6:	c9 f7       	brne	.-14     	; 0x12ea <__ultoa_invert+0x5c>
    12f8:	f6 cf       	rjmp	.-20     	; 0x12e6 <__ultoa_invert+0x58>
    12fa:	46 2f       	mov	r20, r22
    12fc:	4f 70       	andi	r20, 0x0F	; 15
    12fe:	40 5d       	subi	r20, 0xD0	; 208
    1300:	4a 33       	cpi	r20, 0x3A	; 58
    1302:	18 f0       	brcs	.+6      	; 0x130a <__ultoa_invert+0x7c>
    1304:	49 5d       	subi	r20, 0xD9	; 217
    1306:	31 fd       	sbrc	r19, 1
    1308:	40 52       	subi	r20, 0x20	; 32
    130a:	41 93       	st	Z+, r20
    130c:	02 d0       	rcall	.+4      	; 0x1312 <__ultoa_invert+0x84>
    130e:	a9 f7       	brne	.-22     	; 0x12fa <__ultoa_invert+0x6c>
    1310:	ea cf       	rjmp	.-44     	; 0x12e6 <__ultoa_invert+0x58>
    1312:	b4 e0       	ldi	r27, 0x04	; 4
    1314:	a6 95       	lsr	r26
    1316:	97 95       	ror	r25
    1318:	87 95       	ror	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	ba 95       	dec	r27
    1320:	c9 f7       	brne	.-14     	; 0x1314 <__ultoa_invert+0x86>
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 05       	cpc	r22, r1
    1326:	71 05       	cpc	r23, r1
    1328:	08 95       	ret
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	0a 2e       	mov	r0, r26
    1330:	06 94       	lsr	r0
    1332:	57 95       	ror	r21
    1334:	47 95       	ror	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	ba 95       	dec	r27
    133c:	c9 f7       	brne	.-14     	; 0x1330 <__ultoa_invert+0xa2>
    133e:	62 0f       	add	r22, r18
    1340:	73 1f       	adc	r23, r19
    1342:	84 1f       	adc	r24, r20
    1344:	95 1f       	adc	r25, r21
    1346:	a0 1d       	adc	r26, r0
    1348:	08 95       	ret

0000134a <_exit>:
    134a:	f8 94       	cli

0000134c <__stop_program>:
    134c:	ff cf       	rjmp	.-2      	; 0x134c <__stop_program>
