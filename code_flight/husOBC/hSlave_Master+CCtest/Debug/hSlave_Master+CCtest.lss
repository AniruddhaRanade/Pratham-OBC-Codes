
hSlave_Master+CCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  008001bc  008001bc  00000d80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d42  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000110a  00000000  00000000  00003cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001116  00000000  00000000  00004e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008be  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d5  00000000  00000000  00006c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_17>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3b       	cpi	r26, 0xBC	; 188
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac eb       	ldi	r26, 0xBC	; 188
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3c       	cpi	r26, 0xC1	; 193
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  c6:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
  d0:	26 2f       	mov	r18, r22
  d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
  d8:	38 2f       	mov	r19, r24
  da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
  dc:	32 17       	cp	r19, r18
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <calculate_crc_16>:

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
  fa:	66 23       	and	r22, r22
  fc:	91 f0       	breq	.+36     	; 0x122 <calculate_crc_16+0x30>
  fe:	ec 01       	movw	r28, r24
 100:	61 50       	subi	r22, 0x01	; 1
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	08 0f       	add	r16, r24
 10c:	19 1f       	adc	r17, r25
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
    crc = update_crc_16(data[i], crc);
 112:	bc 01       	movw	r22, r24
 114:	89 91       	ld	r24, Y+
 116:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	c9 f7       	brne	.-14     	; 0x112 <calculate_crc_16+0x20>
 120:	02 c0       	rjmp	.+4      	; 0x126 <calculate_crc_16+0x34>
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9f ef       	ldi	r25, 0xFF	; 255
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
    
  return ~crc;
}
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <make_ax25_frame_from_data>:
 */ 

#include "ax25.h"

void make_ax25_frame_from_data(uint8_t *frame, uint8_t *data)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	2a 97       	sbiw	r28, 0x0a	; 10
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	8c 01       	movw	r16, r24
  uint8_t i, buf[10], size = 0;
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
 152:	8e e7       	ldi	r24, 0x7E	; 126
 154:	d8 01       	movw	r26, r16
 156:	8d 93       	st	X+, r24
 158:	ad 01       	movw	r20, r26
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	de 01       	movw	r26, r28
 162:	11 96       	adiw	r26, 0x01	; 1
 164:	01 90       	ld	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	8a 95       	dec	r24
 16a:	e1 f7       	brne	.-8      	; 0x164 <make_ax25_frame_from_data+0x30>
 16c:	9e 01       	movw	r18, r28
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	fa 01       	movw	r30, r20
 174:	78 01       	movw	r14, r16
 176:	b7 e0       	ldi	r27, 0x07	; 7
 178:	eb 0e       	add	r14, r27
 17a:	f1 1c       	adc	r15, r1
 17c:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 17e:	9d 91       	ld	r25, X+
 180:	99 0f       	add	r25, r25
 182:	91 93       	st	Z+, r25
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 184:	ee 15       	cp	r30, r14
 186:	ff 05       	cpc	r31, r15
 188:	d1 f7       	brne	.-12     	; 0x17e <make_ax25_frame_from_data+0x4a>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	f8 01       	movw	r30, r16
 18e:	87 83       	std	Z+7, r24	; 0x07
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	e7 e0       	ldi	r30, 0x07	; 7
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <make_ax25_frame_from_data+0x66>
 1a2:	f8 01       	movw	r30, r16
 1a4:	38 96       	adiw	r30, 0x08	; 8
 1a6:	78 01       	movw	r14, r16
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	e8 0e       	add	r14, r24
 1ac:	f1 1c       	adc	r15, r1
 1ae:	d9 01       	movw	r26, r18
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1b0:	9d 91       	ld	r25, X+
 1b2:	99 0f       	add	r25, r25
 1b4:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1b6:	ee 15       	cp	r30, r14
 1b8:	ff 05       	cpc	r31, r15
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <make_ax25_frame_from_data+0x7c>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
 1bc:	88 e6       	ldi	r24, 0x68	; 104
 1be:	d8 01       	movw	r26, r16
 1c0:	1e 96       	adiw	r26, 0x0e	; 14
 1c2:	8c 93       	st	X, r24
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	ee e0       	ldi	r30, 0x0E	; 14
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	de 01       	movw	r26, r28
 1cc:	11 96       	adiw	r26, 0x01	; 1
 1ce:	01 90       	ld	r0, Z+
 1d0:	0d 92       	st	X+, r0
 1d2:	8a 95       	dec	r24
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <make_ax25_frame_from_data+0x9a>
 1d6:	f8 01       	movw	r30, r16
 1d8:	3f 96       	adiw	r30, 0x0f	; 15
 1da:	78 01       	movw	r14, r16
 1dc:	b5 e1       	ldi	r27, 0x15	; 21
 1de:	eb 0e       	add	r14, r27
 1e0:	f1 1c       	adc	r15, r1
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1e2:	d9 01       	movw	r26, r18
 1e4:	9d 91       	ld	r25, X+
 1e6:	9d 01       	movw	r18, r26
 1e8:	99 0f       	add	r25, r25
 1ea:	91 93       	st	Z+, r25
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1ec:	ee 15       	cp	r30, r14
 1ee:	ff 05       	cpc	r31, r15
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <make_ax25_frame_from_data+0xae>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	f8 01       	movw	r30, r16
 1f6:	85 8b       	std	Z+21, r24	; 0x15
  
  frame[size++] = AX_CONTROL;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	86 8b       	std	Z+22, r24	; 0x16
  frame[size++] = AX_PID;
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	87 8b       	std	Z+23, r24	; 0x17
  
  memcpy(frame + size, data, HM_SIZE);
 200:	d8 01       	movw	r26, r16
 202:	58 96       	adiw	r26, 0x18	; 24
 204:	87 e0       	ldi	r24, 0x07	; 7
 206:	fb 01       	movw	r30, r22
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <make_ax25_frame_from_data+0xd4>
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
 210:	6e e1       	ldi	r22, 0x1E	; 30
 212:	ca 01       	movw	r24, r20
 214:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
  
  memcpy(frame + size, &crc, 2);
 218:	d8 01       	movw	r26, r16
 21a:	90 96       	adiw	r26, 0x20	; 32
 21c:	9c 93       	st	X, r25
 21e:	8e 93       	st	-X, r24
 220:	5f 97       	sbiw	r26, 0x1f	; 31
  size += 2;
  
  frame[size] = AX_FLAG;
 222:	8e e7       	ldi	r24, 0x7E	; 126
 224:	91 96       	adiw	r26, 0x21	; 33
 226:	8c 93       	st	X, r24
  
}
 228:	2a 96       	adiw	r28, 0x0a	; 10
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <cc1020_init_dio>:
uint8_t x;
char arr[100];

void cc1020_init_dio(void)
{
  cbi(DDR_TRX, DCLK);
 242:	14 98       	cbi	0x02, 4	; 2
  sbi(DDR_TRX, DIO);
 244:	15 9a       	sbi	0x02, 5	; 2
  sbi(PORT_TRX, DIO);
 246:	1d 9a       	sbi	0x03, 5	; 3
 248:	08 95       	ret

0000024a <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	c8 57       	subi	r28, 0x78	; 120
 254:	d1 40       	sbci	r29, 0x01	; 1
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 264:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	39 e6       	ldi	r19, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	30 40       	sbci	r19, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x22>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x2c>
 276:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 278:	1b ba       	out	0x1b, r1	; 27
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	39 e6       	ldi	r19, 0x69	; 105
 27e:	98 e1       	ldi	r25, 0x18	; 24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	30 40       	sbci	r19, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x36>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x40>
 28a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
 28c:	8b bb       	out	0x1b, r24	; 27
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	39 e6       	ldi	r19, 0x69	; 105
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	21 50       	subi	r18, 0x01	; 1
 296:	30 40       	sbci	r19, 0x00	; 0
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x4a>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x54>
 29e:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 2a0:	1b ba       	out	0x1b, r1	; 27
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	29 e6       	ldi	r18, 0x69	; 105
 2a6:	38 e1       	ldi	r19, 0x18	; 24
 2a8:	91 50       	subi	r25, 0x01	; 1
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	30 40       	sbci	r19, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x5e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x68>
 2b2:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 2b4:	0e 94 1e 03 	call	0x63c	; 0x63c <init_UART0>
	
	transmit_UART0('\r');
 2b8:	8d e0       	ldi	r24, 0x0D	; 13
 2ba:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('\r');
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('H');
 2c4:	88 e4       	ldi	r24, 0x48	; 72
 2c6:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('e');
 2ca:	85 e6       	ldi	r24, 0x65	; 101
 2cc:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('l');
 2d0:	8c e6       	ldi	r24, 0x6C	; 108
 2d2:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('l');
 2d6:	8c e6       	ldi	r24, 0x6C	; 108
 2d8:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('o');
 2dc:	8f e6       	ldi	r24, 0x6F	; 111
 2de:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	e3 e9       	ldi	r30, 0x93	; 147
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	01 90       	ld	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0xa2>
	transmit_string_UART0(array);
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>

	sprintf(array,"\tThis is HUSSAIN's OBC-Slave code...");
 2fc:	85 e2       	ldi	r24, 0x25	; 37
 2fe:	e5 e1       	ldi	r30, 0x15	; 21
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	de 01       	movw	r26, r28
 304:	11 96       	adiw	r26, 0x01	; 1
 306:	01 90       	ld	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	8a 95       	dec	r24
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0xbc>
	sprintf(array1,"\rData received from Master :\t");
 30e:	8e e1       	ldi	r24, 0x1E	; 30
 310:	ea e3       	ldi	r30, 0x3A	; 58
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	de 01       	movw	r26, r28
 316:	99 96       	adiw	r26, 0x29	; 41
 318:	01 90       	ld	r0, Z+
 31a:	0d 92       	st	X+, r0
 31c:	8a 95       	dec	r24
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0xce>
	/// Current state of satellite
	uint8_t frame[256];
	uint8_t transmission = 0, command;
	uint16_t crc, recv_crc;
	///Initialise SPI as slave
	init_SPI_slave();
 320:	0e 94 a7 02 	call	0x54e	; 0x54e <init_SPI_slave>
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	99 e6       	ldi	r25, 0x69	; 105
 328:	28 e1       	ldi	r18, 0x18	; 24
 32a:	81 50       	subi	r24, 0x01	; 1
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	20 40       	sbci	r18, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0xe0>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0xea>
 334:	00 00       	nop
	_delay_ms(1000);
   
	cc1020_init_dio();
 336:	0e 94 21 01 	call	0x242	; 0x242 <cc1020_init_dio>
	
	///Enable Global Interrupts
	sei();
 33a:	78 94       	sei
	sprintf(array1,"\rData received from Master :\t");
		
/************************************************************/
	/// Current state of satellite
	uint8_t frame[256];
	uint8_t transmission = 0, command;
 33c:	a1 2c       	mov	r10, r1
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 33e:	0f 2e       	mov	r0, r31
 340:	fa e0       	ldi	r31, 0x0A	; 10
 342:	cf 2e       	mov	r12, r31
 344:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 346:	0f 2e       	mov	r0, r31
 348:	f5 e0       	ldi	r31, 0x05	; 5
 34a:	df 2e       	mov	r13, r31
 34c:	f0 2d       	mov	r31, r0
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
      if(crc == recv_crc)
      {
        command = message[0];
        if(command == BEGIN_TX_COMM)
        	transmission = IN;
 34e:	99 24       	eor	r9, r9
 350:	93 94       	inc	r9
      start_spi = 0;
      t = 0;
      process = 0;
    }
    
	sprintf(array2,"\rCommand received from Master :\t%d", command);
 352:	0f 2e       	mov	r0, r31
 354:	f8 e5       	ldi	r31, 0x58	; 88
 356:	ef 2e       	mov	r14, r31
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	ff 2e       	mov	r15, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	8e 01       	movw	r16, r28
 360:	0f 5a       	subi	r16, 0xAF	; 175
 362:	1f 4f       	sbci	r17, 0xFF	; 255
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 364:	cb ba       	out	0x1b, r12	; 27
 366:	3f ef       	ldi	r19, 0xFF	; 255
 368:	84 e3       	ldi	r24, 0x34	; 52
 36a:	9c e0       	ldi	r25, 0x0C	; 12
 36c:	31 50       	subi	r19, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x122>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x12c>
 376:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 378:	db ba       	out	0x1b, r13	; 27
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	34 e3       	ldi	r19, 0x34	; 52
 37e:	8c e0       	ldi	r24, 0x0C	; 12
 380:	21 50       	subi	r18, 0x01	; 1
 382:	30 40       	sbci	r19, 0x00	; 0
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x136>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x140>
 38a:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 38c:	8d e0       	ldi	r24, 0x0D	; 13
 38e:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('\r');
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('H');
 398:	88 e4       	ldi	r24, 0x48	; 72
 39a:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	transmit_UART0('i');
 39e:	89 e6       	ldi	r24, 0x69	; 105
 3a0:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_UART0>
	
	transmit_string_UART0(array1);
 3a4:	ce 01       	movw	r24, r28
 3a6:	89 96       	adiw	r24, 0x29	; 41
 3a8:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 3ac:	cb ba       	out	0x1b, r12	; 27
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
 3b0:	24 e3       	ldi	r18, 0x34	; 52
 3b2:	3c e0       	ldi	r19, 0x0C	; 12
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	30 40       	sbci	r19, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x16a>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x174>
 3be:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 3c0:	db ba       	out	0x1b, r13	; 27
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	94 e3       	ldi	r25, 0x34	; 52
 3c6:	2c e0       	ldi	r18, 0x0C	; 12
 3c8:	81 50       	subi	r24, 0x01	; 1
 3ca:	90 40       	sbci	r25, 0x00	; 0
 3cc:	20 40       	sbci	r18, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x17e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x188>
 3d2:	00 00       	nop
	_delay_ms(500);
	
	if(process)
 3d4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 3d8:	88 23       	and	r24, r24
 3da:	09 f4       	brne	.+2      	; 0x3de <main+0x194>
 3dc:	43 c0       	rjmp	.+134    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
    {
      crc = calculate_crc_16((uint8_t *)message, t - (end_spi + sizeof(uint16_t)));
 3de:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <t>
 3e2:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <end_spi>
 3e6:	62 50       	subi	r22, 0x02	; 2
 3e8:	68 1b       	sub	r22, r24
 3ea:	80 ec       	ldi	r24, 0xC0	; 192
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
 3f2:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <t>
 3f6:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <end_spi>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	32 97       	sbiw	r30, 0x02	; 2
 3fe:	e2 1b       	sub	r30, r18
 400:	f1 09       	sbc	r31, r1
 402:	e0 54       	subi	r30, 0x40	; 64
 404:	fe 4f       	sbci	r31, 0xFE	; 254
      if(crc == recv_crc)
 406:	20 81       	ld	r18, Z
 408:	31 81       	ldd	r19, Z+1	; 0x01
 40a:	82 17       	cp	r24, r18
 40c:	93 07       	cpc	r25, r19
 40e:	11 f5       	brne	.+68     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
      {
        command = message[0];
 410:	b0 90 c0 01 	lds	r11, 0x01C0	; 0x8001c0 <message>
        if(command == BEGIN_TX_COMM)
 414:	3a e5       	ldi	r19, 0x5A	; 90
 416:	b3 16       	cp	r11, r19
 418:	e1 f0       	breq	.+56     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
        	transmission = IN;
		else if(command == END_TX)
 41a:	83 e3       	ldi	r24, 0x33	; 51
 41c:	b8 12       	cpse	r11, r24
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
        {
			SPI_transfer(ACK);
 420:	82 e9       	ldi	r24, 0x92	; 146
 422:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_transfer>
			transmission = 0;
 426:	a1 2c       	mov	r10, r1
 428:	15 c0       	rjmp	.+42     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
        }
        else if(command == REAL_TIME)
 42a:	95 ed       	ldi	r25, 0xD5	; 213
 42c:	b9 12       	cpse	r11, r25
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
        {	make_ax25_frame_from_data(frame, (uint8_t *)message + 2);
 430:	62 ec       	ldi	r22, 0xC2	; 194
 432:	71 e0       	ldi	r23, 0x01	; 1
 434:	ce 01       	movw	r24, r28
 436:	87 58       	subi	r24, 0x87	; 135
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	0e 94 9a 00 	call	0x134	; 0x134 <make_ax25_frame_from_data>
			transmit_string_UART0(array1);
 43e:	ce 01       	movw	r24, r28
 440:	89 96       	adiw	r24, 0x29	; 41
 442:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>
			transmit_string_UART0(frame);	
 446:	ce 01       	movw	r24, r28
 448:	87 58       	subi	r24, 0x87	; 135
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>
 450:	01 c0       	rjmp	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
      if(crc == recv_crc)
      {
        command = message[0];
        if(command == BEGIN_TX_COMM)
        	transmission = IN;
 452:	a9 2c       	mov	r10, r9
			transmit_string_UART0(array1);
			transmit_string_UART0(frame);	
		}		
      }
	  
      end_spi = 0;
 454:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <end_spi>
      start_spi = 0;
 458:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <start_spi>
      t = 0;
 45c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <t>
      process = 0;
 460:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
    }
    
	sprintf(array2,"\rCommand received from Master :\t%d", command);
 464:	1f 92       	push	r1
 466:	bf 92       	push	r11
 468:	ff 92       	push	r15
 46a:	ef 92       	push	r14
 46c:	1f 93       	push	r17
 46e:	0f 93       	push	r16
 470:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
	transmit_string_UART0(array2);
 474:	c8 01       	movw	r24, r16
 476:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>
		
	if(transmission == IN)
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	a2 12       	cpse	r10, r18
 48a:	6c cf       	rjmp	.-296    	; 0x364 <main+0x11a>
    {/**********		Start Transmission		**********/
		cc1020_transmit_packet(frame, FRAME_SIZE);
 48c:	62 e2       	ldi	r22, 0x22	; 34
 48e:	ce 01       	movw	r24, r28
 490:	87 58       	subi	r24, 0x87	; 135
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	0e 94 be 02 	call	0x57c	; 0x57c <cc1020_transmit_packet>
    	transmit_string_UART0("\rTransmission complete\r");
 498:	8b e7       	ldi	r24, 0x7B	; 123
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 33 03 	call	0x666	; 0x666 <transmit_string_UART0>
 4a0:	61 cf       	rjmp	.-318    	; 0x364 <main+0x11a>

000004a2 <__vector_17>:

/**
 * @brief Interrupt service routine for SPI
 */
ISR(SPI_STC_vect)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	0b b6       	in	r0, 0x3b	; 59
 4ae:	0f 92       	push	r0
 4b0:	8f 93       	push	r24
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
  spi = SPDR;
 4b6:	8f b1       	in	r24, 0x0f	; 15
 4b8:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <spi>
  
  if((!process) && (start_spi >= N_END_SPI))
 4bc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 4c0:	81 11       	cpse	r24, r1
 4c2:	2b c0       	rjmp	.+86     	; 0x51a <__vector_17+0x78>
 4c4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <start_spi>
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	38 f1       	brcs	.+78     	; 0x51a <__vector_17+0x78>
  {
    message[t] = spi;
 4cc:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <t>
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <spi>
 4d6:	e0 54       	subi	r30, 0x40	; 64
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	80 83       	st	Z, r24
    
    if(message[t] == END_SPI)
 4dc:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <t>
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e0 54       	subi	r30, 0x40	; 64
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	80 81       	ld	r24, Z
 4e8:	8a 3a       	cpi	r24, 0xAA	; 170
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <__vector_17+0x56>
      end_spi++;
 4ec:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <end_spi>
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <end_spi>
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <__vector_17+0x60>
    else if(end_spi)
 4f8:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <end_spi>
 4fc:	81 11       	cpse	r24, r1
      end_spi = 0;
 4fe:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <end_spi>
      
    if(end_spi == N_END_SPI)
 502:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <end_spi>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	19 f4       	brne	.+6      	; 0x510 <__vector_17+0x6e>
      process = 1;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
    t++;
 510:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <t>
 514:	8f 5f       	subi	r24, 0xFF	; 255
 516:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <t>
  }
  
  if(spi == START_SPI)
 51a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <spi>
 51e:	87 3e       	cpi	r24, 0xE7	; 231
 520:	31 f4       	brne	.+12     	; 0x52e <__vector_17+0x8c>
    start_spi++;
 522:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <start_spi>
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <start_spi>
 52c:	06 c0       	rjmp	.+12     	; 0x53a <__vector_17+0x98>
  else if(start_spi < N_END_SPI)
 52e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <start_spi>
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	10 f4       	brcc	.+4      	; 0x53a <__vector_17+0x98>
    start_spi = 0;
 536:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <start_spi>
}
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	8f 91       	pop	r24
 540:	0f 90       	pop	r0
 542:	0b be       	out	0x3b, r0	; 59
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <init_SPI_slave>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 54e:	87 b3       	in	r24, 0x17	; 23
 550:	80 7f       	andi	r24, 0xF0	; 240
 552:	87 bb       	out	0x17, r24	; 23
 554:	88 e0       	ldi	r24, 0x08	; 8
 556:	87 bb       	out	0x17, r24	; 23
 558:	80 ec       	ldi	r24, 0xC0	; 192
 55a:	8d b9       	out	0x0d, r24	; 13
 55c:	08 95       	ret

0000055e <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 55e:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 560:	77 9b       	sbis	0x0e, 7	; 14
 562:	fe cf       	rjmp	.-4      	; 0x560 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 564:	8f b1       	in	r24, 0x0f	; 15
}
 566:	08 95       	ret

00000568 <cc1020_transmit_bit>:
#include "uart.h"
#include "transmit.h"

void cc1020_transmit_bit(uint8_t bit)
{
  while(PIN_TRX & (1 << DCLK));
 568:	0c 99       	sbic	0x01, 4	; 1
 56a:	fe cf       	rjmp	.-4      	; 0x568 <cc1020_transmit_bit>
  if(bit == 0)
 56c:	81 11       	cpse	r24, r1
 56e:	02 c0       	rjmp	.+4      	; 0x574 <cc1020_transmit_bit+0xc>
    cbi(PORT_TRX, DIO);
 570:	1d 98       	cbi	0x03, 5	; 3
 572:	01 c0       	rjmp	.+2      	; 0x576 <cc1020_transmit_bit+0xe>
  else
    sbi(PORT_TRX, DIO);
 574:	1d 9a       	sbi	0x03, 5	; 3
  while(!(PIN_TRX & (1 << DCLK)));
 576:	0c 9b       	sbis	0x01, 4	; 1
 578:	fe cf       	rjmp	.-4      	; 0x576 <cc1020_transmit_bit+0xe>
}
 57a:	08 95       	ret

0000057c <cc1020_transmit_packet>:

//with bit stuffing
void cc1020_transmit_packet(uint8_t *data, uint8_t size)
{
 57c:	5f 92       	push	r5
 57e:	6f 92       	push	r6
 580:	7f 92       	push	r7
 582:	8f 92       	push	r8
 584:	9f 92       	push	r9
 586:	af 92       	push	r10
 588:	bf 92       	push	r11
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	d8 2f       	mov	r29, r24
 59c:	c9 2f       	mov	r28, r25
 59e:	e6 2e       	mov	r14, r22
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 b4 02 	call	0x568	; 0x568 <cc1020_transmit_bit>
  
  for(i = 0; i < size; i++)
 5a6:	ee 20       	and	r14, r14
 5a8:	c1 f1       	breq	.+112    	; 0x61a <cc1020_transmit_packet+0x9e>
 5aa:	cd 2e       	mov	r12, r29
 5ac:	dc 2e       	mov	r13, r28
 5ae:	aa 24       	eor	r10, r10
 5b0:	aa 94       	dec	r10
 5b2:	ae 0c       	add	r10, r14
 5b4:	b1 2c       	mov	r11, r1
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	a8 1a       	sub	r10, r24
 5ba:	b8 0a       	sbc	r11, r24
 5bc:	00 e0       	ldi	r16, 0x00	; 0
 5be:	10 e0       	ldi	r17, 0x00	; 0
 5c0:	81 2c       	mov	r8, r1
  {
    byte = data[i];
 5c2:	68 94       	set
 5c4:	55 24       	eor	r5, r5
 5c6:	53 f8       	bld	r5, 3
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
 5c8:	f1 2c       	mov	r15, r1
 5ca:	e1 e0       	ldi	r30, 0x01	; 1
 5cc:	ee 1a       	sub	r14, r30
 5ce:	f1 08       	sbc	r15, r1
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
 5d0:	61 2c       	mov	r6, r1
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
 5d2:	f6 01       	movw	r30, r12
 5d4:	d1 91       	ld	r29, Z+
 5d6:	6f 01       	movw	r12, r30
 5d8:	c5 2d       	mov	r28, r5
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
 5da:	70 2e       	mov	r7, r16
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
 5dc:	fd 2f       	mov	r31, r29
 5de:	f0 78       	andi	r31, 0x80	; 128
 5e0:	9f 2e       	mov	r9, r31
      cc1020_transmit_bit(bit);
 5e2:	8f 2f       	mov	r24, r31
 5e4:	0e 94 b4 02 	call	0x568	; 0x568 <cc1020_transmit_bit>
      
      if((i != 0) && (i != size - 1))
 5e8:	77 20       	and	r7, r7
 5ea:	79 f0       	breq	.+30     	; 0x60a <cc1020_transmit_packet+0x8e>
 5ec:	0e 15       	cp	r16, r14
 5ee:	1f 05       	cpc	r17, r15
 5f0:	61 f0       	breq	.+24     	; 0x60a <cc1020_transmit_packet+0x8e>
      {
        if(bit)
 5f2:	99 20       	and	r9, r9
 5f4:	49 f0       	breq	.+18     	; 0x608 <cc1020_transmit_packet+0x8c>
          ax_counter++;
 5f6:	83 94       	inc	r8
        else
          ax_counter = 0;
        if(ax_counter == 5)
 5f8:	85 e0       	ldi	r24, 0x05	; 5
 5fa:	88 12       	cpse	r8, r24
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <cc1020_transmit_packet+0x8e>
        {
          ax_counter = 0;
          cc1020_transmit_bit(0);
 5fe:	86 2d       	mov	r24, r6
 600:	0e 94 b4 02 	call	0x568	; 0x568 <cc1020_transmit_bit>
          ax_counter++;
        else
          ax_counter = 0;
        if(ax_counter == 5)
        {
          ax_counter = 0;
 604:	86 2c       	mov	r8, r6
 606:	01 c0       	rjmp	.+2      	; 0x60a <cc1020_transmit_packet+0x8e>
      if((i != 0) && (i != size - 1))
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
 608:	86 2c       	mov	r8, r6
          ax_counter = 0;
          cc1020_transmit_bit(0);
        }
      }  
      
      byte = byte << 1;
 60a:	dd 0f       	add	r29, r29
 60c:	c1 50       	subi	r28, 0x01	; 1
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
 60e:	31 f7       	brne	.-52     	; 0x5dc <cc1020_transmit_packet+0x60>
 610:	0f 5f       	subi	r16, 0xFF	; 255
 612:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
 614:	0a 15       	cp	r16, r10
 616:	1b 05       	cpc	r17, r11
 618:	e1 f6       	brne	.-72     	; 0x5d2 <cc1020_transmit_packet+0x56>
      
      byte = byte << 1;
    }
  }
  
  sbi(PORT_TRX, DIO);
 61a:	1d 9a       	sbi	0x03, 5	; 3
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	bf 90       	pop	r11
 62e:	af 90       	pop	r10
 630:	9f 90       	pop	r9
 632:	8f 90       	pop	r8
 634:	7f 90       	pop	r7
 636:	6f 90       	pop	r6
 638:	5f 90       	pop	r5
 63a:	08 95       	ret

0000063c <init_UART0>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 63c:	1b b8       	out	0x0b, r1	; 11
 63e:	1a b8       	out	0x0a, r1	; 10
 640:	e5 e9       	ldi	r30, 0x95	; 149
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	10 82       	st	Z, r1
 646:	59 9a       	sbi	0x0b, 1	; 11
 648:	8a b1       	in	r24, 0x0a	; 10
 64a:	88 61       	ori	r24, 0x18	; 24
 64c:	8a b9       	out	0x0a, r24	; 10
 64e:	80 81       	ld	r24, Z
 650:	8e 60       	ori	r24, 0x0E	; 14
 652:	80 83       	st	Z, r24
 654:	87 e6       	ldi	r24, 0x67	; 103
 656:	89 b9       	out	0x09, r24	; 9
 658:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 65c:	08 95       	ret

0000065e <transmit_UART0>:
 65e:	5d 9b       	sbis	0x0b, 5	; 11
 660:	fe cf       	rjmp	.-4      	; 0x65e <transmit_UART0>
 662:	8c b9       	out	0x0c, r24	; 12
 664:	08 95       	ret

00000666 <transmit_string_UART0>:
    i++;
  }
}

void transmit_string_UART0(char *buffer)
{
 666:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 668:	90 81       	ld	r25, Z
 66a:	99 23       	and	r25, r25
 66c:	39 f0       	breq	.+14     	; 0x67c <transmit_string_UART0+0x16>
 66e:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 670:	5d 9b       	sbis	0x0b, 5	; 11
 672:	fe cf       	rjmp	.-4      	; 0x670 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 674:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 676:	91 91       	ld	r25, Z+
 678:	91 11       	cpse	r25, r1
 67a:	fa cf       	rjmp	.-12     	; 0x670 <transmit_string_UART0+0xa>
 67c:	08 95       	ret

0000067e <sprintf>:
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	2e 97       	sbiw	r28, 0x0e	; 14
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	0d 89       	ldd	r16, Y+21	; 0x15
 698:	1e 89       	ldd	r17, Y+22	; 0x16
 69a:	86 e0       	ldi	r24, 0x06	; 6
 69c:	8c 83       	std	Y+4, r24	; 0x04
 69e:	1a 83       	std	Y+2, r17	; 0x02
 6a0:	09 83       	std	Y+1, r16	; 0x01
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	9f e7       	ldi	r25, 0x7F	; 127
 6a6:	9e 83       	std	Y+6, r25	; 0x06
 6a8:	8d 83       	std	Y+5, r24	; 0x05
 6aa:	ae 01       	movw	r20, r28
 6ac:	47 5e       	subi	r20, 0xE7	; 231
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
 6b0:	6f 89       	ldd	r22, Y+23	; 0x17
 6b2:	78 8d       	ldd	r23, Y+24	; 0x18
 6b4:	ce 01       	movw	r24, r28
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	0e 94 6f 03 	call	0x6de	; 0x6de <vfprintf>
 6bc:	2f 81       	ldd	r18, Y+7	; 0x07
 6be:	38 85       	ldd	r19, Y+8	; 0x08
 6c0:	f8 01       	movw	r30, r16
 6c2:	e2 0f       	add	r30, r18
 6c4:	f3 1f       	adc	r31, r19
 6c6:	10 82       	st	Z, r1
 6c8:	2e 96       	adiw	r28, 0x0e	; 14
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	0f 91       	pop	r16
 6dc:	08 95       	ret

000006de <vfprintf>:
 6de:	2f 92       	push	r2
 6e0:	3f 92       	push	r3
 6e2:	4f 92       	push	r4
 6e4:	5f 92       	push	r5
 6e6:	6f 92       	push	r6
 6e8:	7f 92       	push	r7
 6ea:	8f 92       	push	r8
 6ec:	9f 92       	push	r9
 6ee:	af 92       	push	r10
 6f0:	bf 92       	push	r11
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	2c 97       	sbiw	r28, 0x0c	; 12
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	7c 01       	movw	r14, r24
 714:	6b 01       	movw	r12, r22
 716:	8a 01       	movw	r16, r20
 718:	fc 01       	movw	r30, r24
 71a:	17 82       	std	Z+7, r1	; 0x07
 71c:	16 82       	std	Z+6, r1	; 0x06
 71e:	83 81       	ldd	r24, Z+3	; 0x03
 720:	81 ff       	sbrs	r24, 1
 722:	bd c1       	rjmp	.+890    	; 0xa9e <vfprintf+0x3c0>
 724:	ce 01       	movw	r24, r28
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	4c 01       	movw	r8, r24
 72a:	f7 01       	movw	r30, r14
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	f6 01       	movw	r30, r12
 730:	93 fd       	sbrc	r25, 3
 732:	85 91       	lpm	r24, Z+
 734:	93 ff       	sbrs	r25, 3
 736:	81 91       	ld	r24, Z+
 738:	6f 01       	movw	r12, r30
 73a:	88 23       	and	r24, r24
 73c:	09 f4       	brne	.+2      	; 0x740 <vfprintf+0x62>
 73e:	ab c1       	rjmp	.+854    	; 0xa96 <vfprintf+0x3b8>
 740:	85 32       	cpi	r24, 0x25	; 37
 742:	39 f4       	brne	.+14     	; 0x752 <vfprintf+0x74>
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	6f 01       	movw	r12, r30
 74e:	85 32       	cpi	r24, 0x25	; 37
 750:	29 f4       	brne	.+10     	; 0x75c <vfprintf+0x7e>
 752:	b7 01       	movw	r22, r14
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 75a:	e7 cf       	rjmp	.-50     	; 0x72a <vfprintf+0x4c>
 75c:	51 2c       	mov	r5, r1
 75e:	31 2c       	mov	r3, r1
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	20 32       	cpi	r18, 0x20	; 32
 764:	a0 f4       	brcc	.+40     	; 0x78e <vfprintf+0xb0>
 766:	8b 32       	cpi	r24, 0x2B	; 43
 768:	69 f0       	breq	.+26     	; 0x784 <vfprintf+0xa6>
 76a:	30 f4       	brcc	.+12     	; 0x778 <vfprintf+0x9a>
 76c:	80 32       	cpi	r24, 0x20	; 32
 76e:	59 f0       	breq	.+22     	; 0x786 <vfprintf+0xa8>
 770:	83 32       	cpi	r24, 0x23	; 35
 772:	69 f4       	brne	.+26     	; 0x78e <vfprintf+0xb0>
 774:	20 61       	ori	r18, 0x10	; 16
 776:	2c c0       	rjmp	.+88     	; 0x7d0 <vfprintf+0xf2>
 778:	8d 32       	cpi	r24, 0x2D	; 45
 77a:	39 f0       	breq	.+14     	; 0x78a <vfprintf+0xac>
 77c:	80 33       	cpi	r24, 0x30	; 48
 77e:	39 f4       	brne	.+14     	; 0x78e <vfprintf+0xb0>
 780:	21 60       	ori	r18, 0x01	; 1
 782:	26 c0       	rjmp	.+76     	; 0x7d0 <vfprintf+0xf2>
 784:	22 60       	ori	r18, 0x02	; 2
 786:	24 60       	ori	r18, 0x04	; 4
 788:	23 c0       	rjmp	.+70     	; 0x7d0 <vfprintf+0xf2>
 78a:	28 60       	ori	r18, 0x08	; 8
 78c:	21 c0       	rjmp	.+66     	; 0x7d0 <vfprintf+0xf2>
 78e:	27 fd       	sbrc	r18, 7
 790:	27 c0       	rjmp	.+78     	; 0x7e0 <vfprintf+0x102>
 792:	30 ed       	ldi	r19, 0xD0	; 208
 794:	38 0f       	add	r19, r24
 796:	3a 30       	cpi	r19, 0x0A	; 10
 798:	78 f4       	brcc	.+30     	; 0x7b8 <vfprintf+0xda>
 79a:	26 ff       	sbrs	r18, 6
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0xcc>
 79e:	fa e0       	ldi	r31, 0x0A	; 10
 7a0:	5f 9e       	mul	r5, r31
 7a2:	30 0d       	add	r19, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	53 2e       	mov	r5, r19
 7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <vfprintf+0xf2>
 7aa:	8a e0       	ldi	r24, 0x0A	; 10
 7ac:	38 9e       	mul	r3, r24
 7ae:	30 0d       	add	r19, r0
 7b0:	11 24       	eor	r1, r1
 7b2:	33 2e       	mov	r3, r19
 7b4:	20 62       	ori	r18, 0x20	; 32
 7b6:	0c c0       	rjmp	.+24     	; 0x7d0 <vfprintf+0xf2>
 7b8:	8e 32       	cpi	r24, 0x2E	; 46
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <vfprintf+0xe6>
 7bc:	26 fd       	sbrc	r18, 6
 7be:	6b c1       	rjmp	.+726    	; 0xa96 <vfprintf+0x3b8>
 7c0:	20 64       	ori	r18, 0x40	; 64
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0xf2>
 7c4:	8c 36       	cpi	r24, 0x6C	; 108
 7c6:	11 f4       	brne	.+4      	; 0x7cc <vfprintf+0xee>
 7c8:	20 68       	ori	r18, 0x80	; 128
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0xf2>
 7cc:	88 36       	cpi	r24, 0x68	; 104
 7ce:	41 f4       	brne	.+16     	; 0x7e0 <vfprintf+0x102>
 7d0:	f6 01       	movw	r30, r12
 7d2:	93 fd       	sbrc	r25, 3
 7d4:	85 91       	lpm	r24, Z+
 7d6:	93 ff       	sbrs	r25, 3
 7d8:	81 91       	ld	r24, Z+
 7da:	6f 01       	movw	r12, r30
 7dc:	81 11       	cpse	r24, r1
 7de:	c1 cf       	rjmp	.-126    	; 0x762 <vfprintf+0x84>
 7e0:	98 2f       	mov	r25, r24
 7e2:	9f 7d       	andi	r25, 0xDF	; 223
 7e4:	95 54       	subi	r25, 0x45	; 69
 7e6:	93 30       	cpi	r25, 0x03	; 3
 7e8:	28 f4       	brcc	.+10     	; 0x7f4 <vfprintf+0x116>
 7ea:	0c 5f       	subi	r16, 0xFC	; 252
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	ff e3       	ldi	r31, 0x3F	; 63
 7f0:	f9 83       	std	Y+1, r31	; 0x01
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <vfprintf+0x130>
 7f4:	83 36       	cpi	r24, 0x63	; 99
 7f6:	31 f0       	breq	.+12     	; 0x804 <vfprintf+0x126>
 7f8:	83 37       	cpi	r24, 0x73	; 115
 7fa:	71 f0       	breq	.+28     	; 0x818 <vfprintf+0x13a>
 7fc:	83 35       	cpi	r24, 0x53	; 83
 7fe:	09 f0       	breq	.+2      	; 0x802 <vfprintf+0x124>
 800:	5b c0       	rjmp	.+182    	; 0x8b8 <vfprintf+0x1da>
 802:	22 c0       	rjmp	.+68     	; 0x848 <vfprintf+0x16a>
 804:	f8 01       	movw	r30, r16
 806:	80 81       	ld	r24, Z
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	44 24       	eor	r4, r4
 810:	43 94       	inc	r4
 812:	51 2c       	mov	r5, r1
 814:	54 01       	movw	r10, r8
 816:	15 c0       	rjmp	.+42     	; 0x842 <vfprintf+0x164>
 818:	38 01       	movw	r6, r16
 81a:	f2 e0       	ldi	r31, 0x02	; 2
 81c:	6f 0e       	add	r6, r31
 81e:	71 1c       	adc	r7, r1
 820:	f8 01       	movw	r30, r16
 822:	a0 80       	ld	r10, Z
 824:	b1 80       	ldd	r11, Z+1	; 0x01
 826:	26 ff       	sbrs	r18, 6
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x152>
 82a:	65 2d       	mov	r22, r5
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x156>
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	7f ef       	ldi	r23, 0xFF	; 255
 834:	c5 01       	movw	r24, r10
 836:	2c 87       	std	Y+12, r18	; 0x0c
 838:	0e 94 75 05 	call	0xaea	; 0xaea <strnlen>
 83c:	2c 01       	movw	r4, r24
 83e:	83 01       	movw	r16, r6
 840:	2c 85       	ldd	r18, Y+12	; 0x0c
 842:	2f 77       	andi	r18, 0x7F	; 127
 844:	22 2e       	mov	r2, r18
 846:	17 c0       	rjmp	.+46     	; 0x876 <vfprintf+0x198>
 848:	38 01       	movw	r6, r16
 84a:	f2 e0       	ldi	r31, 0x02	; 2
 84c:	6f 0e       	add	r6, r31
 84e:	71 1c       	adc	r7, r1
 850:	f8 01       	movw	r30, r16
 852:	a0 80       	ld	r10, Z
 854:	b1 80       	ldd	r11, Z+1	; 0x01
 856:	26 ff       	sbrs	r18, 6
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x182>
 85a:	65 2d       	mov	r22, r5
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x186>
 860:	6f ef       	ldi	r22, 0xFF	; 255
 862:	7f ef       	ldi	r23, 0xFF	; 255
 864:	c5 01       	movw	r24, r10
 866:	2c 87       	std	Y+12, r18	; 0x0c
 868:	0e 94 6a 05 	call	0xad4	; 0xad4 <strnlen_P>
 86c:	2c 01       	movw	r4, r24
 86e:	2c 85       	ldd	r18, Y+12	; 0x0c
 870:	20 68       	ori	r18, 0x80	; 128
 872:	22 2e       	mov	r2, r18
 874:	83 01       	movw	r16, r6
 876:	23 fc       	sbrc	r2, 3
 878:	1b c0       	rjmp	.+54     	; 0x8b0 <vfprintf+0x1d2>
 87a:	83 2d       	mov	r24, r3
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	48 16       	cp	r4, r24
 880:	59 06       	cpc	r5, r25
 882:	b0 f4       	brcc	.+44     	; 0x8b0 <vfprintf+0x1d2>
 884:	b7 01       	movw	r22, r14
 886:	80 e2       	ldi	r24, 0x20	; 32
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 88e:	3a 94       	dec	r3
 890:	f4 cf       	rjmp	.-24     	; 0x87a <vfprintf+0x19c>
 892:	f5 01       	movw	r30, r10
 894:	27 fc       	sbrc	r2, 7
 896:	85 91       	lpm	r24, Z+
 898:	27 fe       	sbrs	r2, 7
 89a:	81 91       	ld	r24, Z+
 89c:	5f 01       	movw	r10, r30
 89e:	b7 01       	movw	r22, r14
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 8a6:	31 10       	cpse	r3, r1
 8a8:	3a 94       	dec	r3
 8aa:	f1 e0       	ldi	r31, 0x01	; 1
 8ac:	4f 1a       	sub	r4, r31
 8ae:	51 08       	sbc	r5, r1
 8b0:	41 14       	cp	r4, r1
 8b2:	51 04       	cpc	r5, r1
 8b4:	71 f7       	brne	.-36     	; 0x892 <vfprintf+0x1b4>
 8b6:	e5 c0       	rjmp	.+458    	; 0xa82 <vfprintf+0x3a4>
 8b8:	84 36       	cpi	r24, 0x64	; 100
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <vfprintf+0x1e2>
 8bc:	89 36       	cpi	r24, 0x69	; 105
 8be:	39 f5       	brne	.+78     	; 0x90e <vfprintf+0x230>
 8c0:	f8 01       	movw	r30, r16
 8c2:	27 ff       	sbrs	r18, 7
 8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <vfprintf+0x1f6>
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	82 81       	ldd	r24, Z+2	; 0x02
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	0c 5f       	subi	r16, 0xFC	; 252
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <vfprintf+0x206>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	07 2e       	mov	r0, r23
 8da:	00 0c       	add	r0, r0
 8dc:	88 0b       	sbc	r24, r24
 8de:	99 0b       	sbc	r25, r25
 8e0:	0e 5f       	subi	r16, 0xFE	; 254
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	2f 76       	andi	r18, 0x6F	; 111
 8e6:	72 2e       	mov	r7, r18
 8e8:	97 ff       	sbrs	r25, 7
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <vfprintf+0x220>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	20 68       	ori	r18, 0x80	; 128
 8fc:	72 2e       	mov	r7, r18
 8fe:	2a e0       	ldi	r18, 0x0A	; 10
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	a4 01       	movw	r20, r8
 904:	0e 94 b8 05 	call	0xb70	; 0xb70 <__ultoa_invert>
 908:	a8 2e       	mov	r10, r24
 90a:	a8 18       	sub	r10, r8
 90c:	44 c0       	rjmp	.+136    	; 0x996 <vfprintf+0x2b8>
 90e:	85 37       	cpi	r24, 0x75	; 117
 910:	29 f4       	brne	.+10     	; 0x91c <vfprintf+0x23e>
 912:	2f 7e       	andi	r18, 0xEF	; 239
 914:	b2 2e       	mov	r11, r18
 916:	2a e0       	ldi	r18, 0x0A	; 10
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	25 c0       	rjmp	.+74     	; 0x966 <vfprintf+0x288>
 91c:	f2 2f       	mov	r31, r18
 91e:	f9 7f       	andi	r31, 0xF9	; 249
 920:	bf 2e       	mov	r11, r31
 922:	8f 36       	cpi	r24, 0x6F	; 111
 924:	c1 f0       	breq	.+48     	; 0x956 <vfprintf+0x278>
 926:	18 f4       	brcc	.+6      	; 0x92e <vfprintf+0x250>
 928:	88 35       	cpi	r24, 0x58	; 88
 92a:	79 f0       	breq	.+30     	; 0x94a <vfprintf+0x26c>
 92c:	b4 c0       	rjmp	.+360    	; 0xa96 <vfprintf+0x3b8>
 92e:	80 37       	cpi	r24, 0x70	; 112
 930:	19 f0       	breq	.+6      	; 0x938 <vfprintf+0x25a>
 932:	88 37       	cpi	r24, 0x78	; 120
 934:	21 f0       	breq	.+8      	; 0x93e <vfprintf+0x260>
 936:	af c0       	rjmp	.+350    	; 0xa96 <vfprintf+0x3b8>
 938:	2f 2f       	mov	r18, r31
 93a:	20 61       	ori	r18, 0x10	; 16
 93c:	b2 2e       	mov	r11, r18
 93e:	b4 fe       	sbrs	r11, 4
 940:	0d c0       	rjmp	.+26     	; 0x95c <vfprintf+0x27e>
 942:	8b 2d       	mov	r24, r11
 944:	84 60       	ori	r24, 0x04	; 4
 946:	b8 2e       	mov	r11, r24
 948:	09 c0       	rjmp	.+18     	; 0x95c <vfprintf+0x27e>
 94a:	24 ff       	sbrs	r18, 4
 94c:	0a c0       	rjmp	.+20     	; 0x962 <vfprintf+0x284>
 94e:	9f 2f       	mov	r25, r31
 950:	96 60       	ori	r25, 0x06	; 6
 952:	b9 2e       	mov	r11, r25
 954:	06 c0       	rjmp	.+12     	; 0x962 <vfprintf+0x284>
 956:	28 e0       	ldi	r18, 0x08	; 8
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	05 c0       	rjmp	.+10     	; 0x966 <vfprintf+0x288>
 95c:	20 e1       	ldi	r18, 0x10	; 16
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <vfprintf+0x288>
 962:	20 e1       	ldi	r18, 0x10	; 16
 964:	32 e0       	ldi	r19, 0x02	; 2
 966:	f8 01       	movw	r30, r16
 968:	b7 fe       	sbrs	r11, 7
 96a:	07 c0       	rjmp	.+14     	; 0x97a <vfprintf+0x29c>
 96c:	60 81       	ld	r22, Z
 96e:	71 81       	ldd	r23, Z+1	; 0x01
 970:	82 81       	ldd	r24, Z+2	; 0x02
 972:	93 81       	ldd	r25, Z+3	; 0x03
 974:	0c 5f       	subi	r16, 0xFC	; 252
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	06 c0       	rjmp	.+12     	; 0x986 <vfprintf+0x2a8>
 97a:	60 81       	ld	r22, Z
 97c:	71 81       	ldd	r23, Z+1	; 0x01
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 5f       	subi	r16, 0xFE	; 254
 984:	1f 4f       	sbci	r17, 0xFF	; 255
 986:	a4 01       	movw	r20, r8
 988:	0e 94 b8 05 	call	0xb70	; 0xb70 <__ultoa_invert>
 98c:	a8 2e       	mov	r10, r24
 98e:	a8 18       	sub	r10, r8
 990:	fb 2d       	mov	r31, r11
 992:	ff 77       	andi	r31, 0x7F	; 127
 994:	7f 2e       	mov	r7, r31
 996:	76 fe       	sbrs	r7, 6
 998:	0b c0       	rjmp	.+22     	; 0x9b0 <vfprintf+0x2d2>
 99a:	37 2d       	mov	r19, r7
 99c:	3e 7f       	andi	r19, 0xFE	; 254
 99e:	a5 14       	cp	r10, r5
 9a0:	50 f4       	brcc	.+20     	; 0x9b6 <vfprintf+0x2d8>
 9a2:	74 fe       	sbrs	r7, 4
 9a4:	0a c0       	rjmp	.+20     	; 0x9ba <vfprintf+0x2dc>
 9a6:	72 fc       	sbrc	r7, 2
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <vfprintf+0x2dc>
 9aa:	37 2d       	mov	r19, r7
 9ac:	3e 7e       	andi	r19, 0xEE	; 238
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <vfprintf+0x2dc>
 9b0:	ba 2c       	mov	r11, r10
 9b2:	37 2d       	mov	r19, r7
 9b4:	03 c0       	rjmp	.+6      	; 0x9bc <vfprintf+0x2de>
 9b6:	ba 2c       	mov	r11, r10
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <vfprintf+0x2de>
 9ba:	b5 2c       	mov	r11, r5
 9bc:	34 ff       	sbrs	r19, 4
 9be:	0d c0       	rjmp	.+26     	; 0x9da <vfprintf+0x2fc>
 9c0:	fe 01       	movw	r30, r28
 9c2:	ea 0d       	add	r30, r10
 9c4:	f1 1d       	adc	r31, r1
 9c6:	80 81       	ld	r24, Z
 9c8:	80 33       	cpi	r24, 0x30	; 48
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <vfprintf+0x2f2>
 9cc:	39 7e       	andi	r19, 0xE9	; 233
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <vfprintf+0x304>
 9d0:	32 ff       	sbrs	r19, 2
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x302>
 9d4:	b3 94       	inc	r11
 9d6:	b3 94       	inc	r11
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <vfprintf+0x304>
 9da:	83 2f       	mov	r24, r19
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	09 f0       	breq	.+2      	; 0x9e2 <vfprintf+0x304>
 9e0:	b3 94       	inc	r11
 9e2:	33 fd       	sbrc	r19, 3
 9e4:	13 c0       	rjmp	.+38     	; 0xa0c <vfprintf+0x32e>
 9e6:	30 ff       	sbrs	r19, 0
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x318>
 9ea:	5a 2c       	mov	r5, r10
 9ec:	b3 14       	cp	r11, r3
 9ee:	18 f4       	brcc	.+6      	; 0x9f6 <vfprintf+0x318>
 9f0:	53 0c       	add	r5, r3
 9f2:	5b 18       	sub	r5, r11
 9f4:	b3 2c       	mov	r11, r3
 9f6:	b3 14       	cp	r11, r3
 9f8:	68 f4       	brcc	.+26     	; 0xa14 <vfprintf+0x336>
 9fa:	b7 01       	movw	r22, r14
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	3c 87       	std	Y+12, r19	; 0x0c
 a02:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a06:	b3 94       	inc	r11
 a08:	3c 85       	ldd	r19, Y+12	; 0x0c
 a0a:	f5 cf       	rjmp	.-22     	; 0x9f6 <vfprintf+0x318>
 a0c:	b3 14       	cp	r11, r3
 a0e:	10 f4       	brcc	.+4      	; 0xa14 <vfprintf+0x336>
 a10:	3b 18       	sub	r3, r11
 a12:	01 c0       	rjmp	.+2      	; 0xa16 <vfprintf+0x338>
 a14:	31 2c       	mov	r3, r1
 a16:	34 ff       	sbrs	r19, 4
 a18:	12 c0       	rjmp	.+36     	; 0xa3e <vfprintf+0x360>
 a1a:	b7 01       	movw	r22, r14
 a1c:	80 e3       	ldi	r24, 0x30	; 48
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	3c 87       	std	Y+12, r19	; 0x0c
 a22:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a26:	3c 85       	ldd	r19, Y+12	; 0x0c
 a28:	32 ff       	sbrs	r19, 2
 a2a:	17 c0       	rjmp	.+46     	; 0xa5a <vfprintf+0x37c>
 a2c:	31 fd       	sbrc	r19, 1
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <vfprintf+0x358>
 a30:	88 e7       	ldi	r24, 0x78	; 120
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <vfprintf+0x35c>
 a36:	88 e5       	ldi	r24, 0x58	; 88
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b7 01       	movw	r22, r14
 a3c:	0c c0       	rjmp	.+24     	; 0xa56 <vfprintf+0x378>
 a3e:	83 2f       	mov	r24, r19
 a40:	86 78       	andi	r24, 0x86	; 134
 a42:	59 f0       	breq	.+22     	; 0xa5a <vfprintf+0x37c>
 a44:	31 ff       	sbrs	r19, 1
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0x36e>
 a48:	8b e2       	ldi	r24, 0x2B	; 43
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <vfprintf+0x370>
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	37 fd       	sbrc	r19, 7
 a50:	8d e2       	ldi	r24, 0x2D	; 45
 a52:	b7 01       	movw	r22, r14
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a5a:	a5 14       	cp	r10, r5
 a5c:	38 f4       	brcc	.+14     	; 0xa6c <vfprintf+0x38e>
 a5e:	b7 01       	movw	r22, r14
 a60:	80 e3       	ldi	r24, 0x30	; 48
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a68:	5a 94       	dec	r5
 a6a:	f7 cf       	rjmp	.-18     	; 0xa5a <vfprintf+0x37c>
 a6c:	aa 94       	dec	r10
 a6e:	f4 01       	movw	r30, r8
 a70:	ea 0d       	add	r30, r10
 a72:	f1 1d       	adc	r31, r1
 a74:	80 81       	ld	r24, Z
 a76:	b7 01       	movw	r22, r14
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a7e:	a1 10       	cpse	r10, r1
 a80:	f5 cf       	rjmp	.-22     	; 0xa6c <vfprintf+0x38e>
 a82:	33 20       	and	r3, r3
 a84:	09 f4       	brne	.+2      	; 0xa88 <vfprintf+0x3aa>
 a86:	51 ce       	rjmp	.-862    	; 0x72a <vfprintf+0x4c>
 a88:	b7 01       	movw	r22, r14
 a8a:	80 e2       	ldi	r24, 0x20	; 32
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 80 05 	call	0xb00	; 0xb00 <fputc>
 a92:	3a 94       	dec	r3
 a94:	f6 cf       	rjmp	.-20     	; 0xa82 <vfprintf+0x3a4>
 a96:	f7 01       	movw	r30, r14
 a98:	86 81       	ldd	r24, Z+6	; 0x06
 a9a:	97 81       	ldd	r25, Z+7	; 0x07
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <vfprintf+0x3c4>
 a9e:	8f ef       	ldi	r24, 0xFF	; 255
 aa0:	9f ef       	ldi	r25, 0xFF	; 255
 aa2:	2c 96       	adiw	r28, 0x0c	; 12
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	f8 94       	cli
 aa8:	de bf       	out	0x3e, r29	; 62
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	cd bf       	out	0x3d, r28	; 61
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	df 90       	pop	r13
 abc:	cf 90       	pop	r12
 abe:	bf 90       	pop	r11
 ac0:	af 90       	pop	r10
 ac2:	9f 90       	pop	r9
 ac4:	8f 90       	pop	r8
 ac6:	7f 90       	pop	r7
 ac8:	6f 90       	pop	r6
 aca:	5f 90       	pop	r5
 acc:	4f 90       	pop	r4
 ace:	3f 90       	pop	r3
 ad0:	2f 90       	pop	r2
 ad2:	08 95       	ret

00000ad4 <strnlen_P>:
 ad4:	fc 01       	movw	r30, r24
 ad6:	05 90       	lpm	r0, Z+
 ad8:	61 50       	subi	r22, 0x01	; 1
 ada:	70 40       	sbci	r23, 0x00	; 0
 adc:	01 10       	cpse	r0, r1
 ade:	d8 f7       	brcc	.-10     	; 0xad6 <strnlen_P+0x2>
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	8e 0f       	add	r24, r30
 ae6:	9f 1f       	adc	r25, r31
 ae8:	08 95       	ret

00000aea <strnlen>:
 aea:	fc 01       	movw	r30, r24
 aec:	61 50       	subi	r22, 0x01	; 1
 aee:	70 40       	sbci	r23, 0x00	; 0
 af0:	01 90       	ld	r0, Z+
 af2:	01 10       	cpse	r0, r1
 af4:	d8 f7       	brcc	.-10     	; 0xaec <strnlen+0x2>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	8e 0f       	add	r24, r30
 afc:	9f 1f       	adc	r25, r31
 afe:	08 95       	ret

00000b00 <fputc>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	fb 01       	movw	r30, r22
 b0a:	23 81       	ldd	r18, Z+3	; 0x03
 b0c:	21 fd       	sbrc	r18, 1
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <fputc+0x16>
 b10:	8f ef       	ldi	r24, 0xFF	; 255
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	28 c0       	rjmp	.+80     	; 0xb66 <fputc+0x66>
 b16:	22 ff       	sbrs	r18, 2
 b18:	16 c0       	rjmp	.+44     	; 0xb46 <fputc+0x46>
 b1a:	46 81       	ldd	r20, Z+6	; 0x06
 b1c:	57 81       	ldd	r21, Z+7	; 0x07
 b1e:	24 81       	ldd	r18, Z+4	; 0x04
 b20:	35 81       	ldd	r19, Z+5	; 0x05
 b22:	42 17       	cp	r20, r18
 b24:	53 07       	cpc	r21, r19
 b26:	44 f4       	brge	.+16     	; 0xb38 <fputc+0x38>
 b28:	a0 81       	ld	r26, Z
 b2a:	b1 81       	ldd	r27, Z+1	; 0x01
 b2c:	9d 01       	movw	r18, r26
 b2e:	2f 5f       	subi	r18, 0xFF	; 255
 b30:	3f 4f       	sbci	r19, 0xFF	; 255
 b32:	31 83       	std	Z+1, r19	; 0x01
 b34:	20 83       	st	Z, r18
 b36:	8c 93       	st	X, r24
 b38:	26 81       	ldd	r18, Z+6	; 0x06
 b3a:	37 81       	ldd	r19, Z+7	; 0x07
 b3c:	2f 5f       	subi	r18, 0xFF	; 255
 b3e:	3f 4f       	sbci	r19, 0xFF	; 255
 b40:	37 83       	std	Z+7, r19	; 0x07
 b42:	26 83       	std	Z+6, r18	; 0x06
 b44:	10 c0       	rjmp	.+32     	; 0xb66 <fputc+0x66>
 b46:	eb 01       	movw	r28, r22
 b48:	09 2f       	mov	r16, r25
 b4a:	18 2f       	mov	r17, r24
 b4c:	00 84       	ldd	r0, Z+8	; 0x08
 b4e:	f1 85       	ldd	r31, Z+9	; 0x09
 b50:	e0 2d       	mov	r30, r0
 b52:	09 95       	icall
 b54:	89 2b       	or	r24, r25
 b56:	e1 f6       	brne	.-72     	; 0xb10 <fputc+0x10>
 b58:	8e 81       	ldd	r24, Y+6	; 0x06
 b5a:	9f 81       	ldd	r25, Y+7	; 0x07
 b5c:	01 96       	adiw	r24, 0x01	; 1
 b5e:	9f 83       	std	Y+7, r25	; 0x07
 b60:	8e 83       	std	Y+6, r24	; 0x06
 b62:	81 2f       	mov	r24, r17
 b64:	90 2f       	mov	r25, r16
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17
 b6c:	0f 91       	pop	r16
 b6e:	08 95       	ret

00000b70 <__ultoa_invert>:
 b70:	fa 01       	movw	r30, r20
 b72:	aa 27       	eor	r26, r26
 b74:	28 30       	cpi	r18, 0x08	; 8
 b76:	51 f1       	breq	.+84     	; 0xbcc <__ultoa_invert+0x5c>
 b78:	20 31       	cpi	r18, 0x10	; 16
 b7a:	81 f1       	breq	.+96     	; 0xbdc <__ultoa_invert+0x6c>
 b7c:	e8 94       	clt
 b7e:	6f 93       	push	r22
 b80:	6e 7f       	andi	r22, 0xFE	; 254
 b82:	6e 5f       	subi	r22, 0xFE	; 254
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	af 4f       	sbci	r26, 0xFF	; 255
 b8c:	b1 e0       	ldi	r27, 0x01	; 1
 b8e:	3e d0       	rcall	.+124    	; 0xc0c <__ultoa_invert+0x9c>
 b90:	b4 e0       	ldi	r27, 0x04	; 4
 b92:	3c d0       	rcall	.+120    	; 0xc0c <__ultoa_invert+0x9c>
 b94:	67 0f       	add	r22, r23
 b96:	78 1f       	adc	r23, r24
 b98:	89 1f       	adc	r24, r25
 b9a:	9a 1f       	adc	r25, r26
 b9c:	a1 1d       	adc	r26, r1
 b9e:	68 0f       	add	r22, r24
 ba0:	79 1f       	adc	r23, r25
 ba2:	8a 1f       	adc	r24, r26
 ba4:	91 1d       	adc	r25, r1
 ba6:	a1 1d       	adc	r26, r1
 ba8:	6a 0f       	add	r22, r26
 baa:	71 1d       	adc	r23, r1
 bac:	81 1d       	adc	r24, r1
 bae:	91 1d       	adc	r25, r1
 bb0:	a1 1d       	adc	r26, r1
 bb2:	20 d0       	rcall	.+64     	; 0xbf4 <__ultoa_invert+0x84>
 bb4:	09 f4       	brne	.+2      	; 0xbb8 <__ultoa_invert+0x48>
 bb6:	68 94       	set
 bb8:	3f 91       	pop	r19
 bba:	2a e0       	ldi	r18, 0x0A	; 10
 bbc:	26 9f       	mul	r18, r22
 bbe:	11 24       	eor	r1, r1
 bc0:	30 19       	sub	r19, r0
 bc2:	30 5d       	subi	r19, 0xD0	; 208
 bc4:	31 93       	st	Z+, r19
 bc6:	de f6       	brtc	.-74     	; 0xb7e <__ultoa_invert+0xe>
 bc8:	cf 01       	movw	r24, r30
 bca:	08 95       	ret
 bcc:	46 2f       	mov	r20, r22
 bce:	47 70       	andi	r20, 0x07	; 7
 bd0:	40 5d       	subi	r20, 0xD0	; 208
 bd2:	41 93       	st	Z+, r20
 bd4:	b3 e0       	ldi	r27, 0x03	; 3
 bd6:	0f d0       	rcall	.+30     	; 0xbf6 <__ultoa_invert+0x86>
 bd8:	c9 f7       	brne	.-14     	; 0xbcc <__ultoa_invert+0x5c>
 bda:	f6 cf       	rjmp	.-20     	; 0xbc8 <__ultoa_invert+0x58>
 bdc:	46 2f       	mov	r20, r22
 bde:	4f 70       	andi	r20, 0x0F	; 15
 be0:	40 5d       	subi	r20, 0xD0	; 208
 be2:	4a 33       	cpi	r20, 0x3A	; 58
 be4:	18 f0       	brcs	.+6      	; 0xbec <__ultoa_invert+0x7c>
 be6:	49 5d       	subi	r20, 0xD9	; 217
 be8:	31 fd       	sbrc	r19, 1
 bea:	40 52       	subi	r20, 0x20	; 32
 bec:	41 93       	st	Z+, r20
 bee:	02 d0       	rcall	.+4      	; 0xbf4 <__ultoa_invert+0x84>
 bf0:	a9 f7       	brne	.-22     	; 0xbdc <__ultoa_invert+0x6c>
 bf2:	ea cf       	rjmp	.-44     	; 0xbc8 <__ultoa_invert+0x58>
 bf4:	b4 e0       	ldi	r27, 0x04	; 4
 bf6:	a6 95       	lsr	r26
 bf8:	97 95       	ror	r25
 bfa:	87 95       	ror	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	ba 95       	dec	r27
 c02:	c9 f7       	brne	.-14     	; 0xbf6 <__ultoa_invert+0x86>
 c04:	00 97       	sbiw	r24, 0x00	; 0
 c06:	61 05       	cpc	r22, r1
 c08:	71 05       	cpc	r23, r1
 c0a:	08 95       	ret
 c0c:	9b 01       	movw	r18, r22
 c0e:	ac 01       	movw	r20, r24
 c10:	0a 2e       	mov	r0, r26
 c12:	06 94       	lsr	r0
 c14:	57 95       	ror	r21
 c16:	47 95       	ror	r20
 c18:	37 95       	ror	r19
 c1a:	27 95       	ror	r18
 c1c:	ba 95       	dec	r27
 c1e:	c9 f7       	brne	.-14     	; 0xc12 <__ultoa_invert+0xa2>
 c20:	62 0f       	add	r22, r18
 c22:	73 1f       	adc	r23, r19
 c24:	84 1f       	adc	r24, r20
 c26:	95 1f       	adc	r25, r21
 c28:	a0 1d       	adc	r26, r0
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
