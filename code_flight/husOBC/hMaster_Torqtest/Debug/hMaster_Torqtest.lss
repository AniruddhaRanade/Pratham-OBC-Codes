
hMaster_Torqtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800108  00800108  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ed  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc7  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000239  00000000  00000000  00003ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 39       	cpi	r26, 0x9A	; 154
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  c6:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
  ea:	8c b1       	in	r24, 0x0c	; 12
  ec:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
  f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
  f8:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
  fc:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 10c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 110:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 114:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  buffer &= 0xFFFFFF00;
 118:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 11c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 120:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 124:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 128:	88 27       	eor	r24, r24
 12a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 12e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 132:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 136:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  buffer |= (uint32_t) last_byte;
 13a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <last_byte>
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 146:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 14a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 14e:	82 2b       	or	r24, r18
 150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buffer>
 154:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <buffer+0x1>
 158:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <buffer+0x2>
 15c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 164:	8c 30       	cpi	r24, 0x0C	; 12
 166:	a0 f4       	brcc	.+40     	; 0x190 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 168:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
 16c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e2 5f       	subi	r30, 0xF2	; 242
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
 182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 186:	8c 30       	cpi	r24, 0x0C	; 12
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xc2>
      pos = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 190:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 194:	8c 30       	cpi	r24, 0x0C	; 12
 196:	a0 f4       	brcc	.+40     	; 0x1c0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 198:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
 19c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e6 5e       	subi	r30, 0xE6	; 230
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
    
    vel++;
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
 1b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0xf2>
      vel = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	c0 f4       	brcc	.+48     	; 0x1f8 <__vector_18+0x12a>
  {
    if(dop >= 2)
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
 1d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e2 50       	subi	r30, 0x02	; 2
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 83       	st	Z, r24
      
    dop++;
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x12a>
      dop = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	c0 f4       	brcc	.+48     	; 0x230 <__vector_18+0x162>
  {
    if(geo >= 4)
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	40 f0       	brcs	.+16     	; 0x218 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 208:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
 20c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 5d       	subi	r30, 0xDE	; 222
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
    
    geo++;
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
 222:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_18+0x162>
      geo = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	b8 f4       	brcc	.+46     	; 0x266 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 238:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
 23c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <last_byte>
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 5c       	subi	r30, 0xCE	; 206
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
    
    time++;
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_18+0x198>
    {
      time = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 266:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 26a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 26e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 272:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 276:	8c 3a       	cpi	r24, 0xAC	; 172
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	af 43       	sbci	r26, 0x3F	; 63
 27c:	bf 43       	sbci	r27, 0x3F	; 63
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x1bc>
  {
    message_end = 0;
 280:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    pos = 0;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
 288:	3f c0       	rjmp	.+126    	; 0x308 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 28a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 28e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 292:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 296:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	95 40       	sbci	r25, 0x05	; 5
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	19 f4       	brne	.+6      	; 0x2aa <__vector_18+0x1dc>
    vel = 0;
 2a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2b2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2b6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2ba:	8c 3a       	cpi	r24, 0xAC	; 172
 2bc:	9b 40       	sbci	r25, 0x0B	; 11
 2be:	af 43       	sbci	r26, 0x3F	; 63
 2c0:	bf 43       	sbci	r27, 0x3F	; 63
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__vector_18+0x1fc>
    dop = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2d2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2d6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2da:	8c 3a       	cpi	r24, 0xAC	; 172
 2dc:	9e 40       	sbci	r25, 0x0E	; 14
 2de:	af 43       	sbci	r26, 0x3F	; 63
 2e0:	bf 43       	sbci	r27, 0x3F	; 63
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_18+0x21c>
    geo = 0;
 2e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 2ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buffer>
 2ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <buffer+0x1>
 2f2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <buffer+0x2>
 2f6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <buffer+0x3>
 2fa:	8c 3a       	cpi	r24, 0xAC	; 172
 2fc:	9f 40       	sbci	r25, 0x0F	; 15
 2fe:	af 43       	sbci	r26, 0x3F	; 63
 300:	bf 43       	sbci	r27, 0x3F	; 63
 302:	11 f4       	brne	.+4      	; 0x308 <__vector_18+0x23a>
    time = 0;
 304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 310:	84 3f       	cpi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	f0 f4       	brcc	.+60     	; 0x352 <__vector_18+0x284>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31e:	89 2b       	or	r24, r25
 320:	c1 f0       	breq	.+48     	; 0x352 <__vector_18+0x284>
 322:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 326:	88 23       	and	r24, r24
 328:	a1 f0       	breq	.+40     	; 0x352 <__vector_18+0x284>
  {
    GPS_done = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 330:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
 33e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    buffer = 0;
 342:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <buffer>
 346:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buffer+0x1>
 34a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <buffer+0x2>
 34e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <buffer+0x3>
  }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2e 97       	sbiw	r28, 0x0e	; 14
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	
	DDRA = 0xF0;
 382:	80 ef       	ldi	r24, 0xF0	; 240
 384:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 386:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	39 e6       	ldi	r19, 0x69	; 105
 38c:	98 e1       	ldi	r25, 0x18	; 24
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	30 40       	sbci	r19, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x20>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x2a>
 398:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 39a:	1b ba       	out	0x1b, r1	; 27
 39c:	ef ef       	ldi	r30, 0xFF	; 255
 39e:	f9 e6       	ldi	r31, 0x69	; 105
 3a0:	28 e1       	ldi	r18, 0x18	; 24
 3a2:	e1 50       	subi	r30, 0x01	; 1
 3a4:	f0 40       	sbci	r31, 0x00	; 0
 3a6:	20 40       	sbci	r18, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x34>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x3e>
 3ac:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	3f ef       	ldi	r19, 0xFF	; 255
 3b2:	89 e6       	ldi	r24, 0x69	; 105
 3b4:	98 e1       	ldi	r25, 0x18	; 24
 3b6:	31 50       	subi	r19, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x48>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x52>
 3c0:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3c2:	1b ba       	out	0x1b, r1	; 27
 3c4:	ef ef       	ldi	r30, 0xFF	; 255
 3c6:	f9 e6       	ldi	r31, 0x69	; 105
 3c8:	28 e1       	ldi	r18, 0x18	; 24
 3ca:	e1 50       	subi	r30, 0x01	; 1
 3cc:	f0 40       	sbci	r31, 0x00	; 0
 3ce:	20 40       	sbci	r18, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x5c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x66>
 3d4:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3d6:	0e 94 80 02 	call	0x500	; 0x500 <init_UART0>
//
	//sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
	//sprintf(array2,"\rGenerating Torquer Current for =\t");
		
/************************************************************/
	configure_torquer();
 3da:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <configure_torquer>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	9c 87       	std	Y+12, r25	; 0x0c
 3e4:	8b 87       	std	Y+11, r24	; 0x0b
 3e6:	6e 01       	movw	r12, r28
 3e8:	9b e0       	ldi	r25, 0x0B	; 11
 3ea:	c9 0e       	add	r12, r25
 3ec:	d1 1c       	adc	r13, r1
 3ee:	eb 85       	ldd	r30, Y+11	; 0x0b
 3f0:	ed 87       	std	Y+13, r30	; 0x0d
 3f2:	fc 85       	ldd	r31, Y+12	; 0x0c
 3f4:	fe 87       	std	Y+14, r31	; 0x0e
		//int8_t b = receive_UART0();
		//transmit_UART0(b);
		int16_t c = 32768;//((int16_t)(b<<8)|(int16_t)a);
		//transmit_UART0((uint8_t)c);
		//transmit_UART0((uint8_t)(c>>8));
		Current_state.pwm.x_dir =0;             //0;
 3f6:	0f 2e       	mov	r0, r31
 3f8:	fd e8       	ldi	r31, 0x8D	; 141
 3fa:	8f 2e       	mov	r8, r31
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	9f 2e       	mov	r9, r31
 400:	f0 2d       	mov	r31, r0
		Current_state.pwm.x =c;             //32768; 0.5
 402:	0f 2e       	mov	r0, r31
 404:	f7 e8       	ldi	r31, 0x87	; 135
 406:	6f 2e       	mov	r6, r31
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	7f 2e       	mov	r7, r31
 40c:	f0 2d       	mov	r31, r0
 40e:	a1 2c       	mov	r10, r1
 410:	68 94       	set
 412:	bb 24       	eor	r11, r11
 414:	b7 f8       	bld	r11, 7
		Current_state.pwm.y_dir = 0;            //0;
 416:	0f 2e       	mov	r0, r31
 418:	fe e8       	ldi	r31, 0x8E	; 142
 41a:	4f 2e       	mov	r4, r31
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	5f 2e       	mov	r5, r31
 420:	f0 2d       	mov	r31, r0
		Current_state.pwm.y = c;            //32768; 0.75
 422:	0f 2e       	mov	r0, r31
 424:	f9 e8       	ldi	r31, 0x89	; 137
 426:	2f 2e       	mov	r2, r31
 428:	f1 e0       	ldi	r31, 0x01	; 1
 42a:	3f 2e       	mov	r3, r31
 42c:	f0 2d       	mov	r31, r0
/************************************************************/
	configure_torquer();
	
/************************************************************/
	while(1){              //     CH1
	PORTA = 0xA0;
 42e:	20 ea       	ldi	r18, 0xA0	; 160
 430:	2b bb       	out	0x1b, r18	; 27
 432:	3f ef       	ldi	r19, 0xFF	; 255
 434:	84 e3       	ldi	r24, 0x34	; 52
 436:	9c e0       	ldi	r25, 0x0C	; 12
 438:	31 50       	subi	r19, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 444:	e0 e5       	ldi	r30, 0x50	; 80
 446:	eb bb       	out	0x1b, r30	; 27
 448:	ff ef       	ldi	r31, 0xFF	; 255
 44a:	24 e3       	ldi	r18, 0x34	; 52
 44c:	3c e0       	ldi	r19, 0x0C	; 12
 44e:	f1 50       	subi	r31, 0x01	; 1
 450:	20 40       	sbci	r18, 0x00	; 0
 452:	30 40       	sbci	r19, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	7c 01       	movw	r14, r24
 460:	0d 85       	ldd	r16, Y+13	; 0x0d
 462:	1e 85       	ldd	r17, Y+14	; 0x0e
	//_delay_ms(1000);
	
	uint8_t data_send[10];
	
	for(int iter=0; iter<10; iter++){
		data_send[iter] = receive_UART0();
 464:	0e 94 95 02 	call	0x52a	; 0x52a <receive_UART0>
 468:	f8 01       	movw	r30, r16
 46a:	81 93       	st	Z+, r24
 46c:	8f 01       	movw	r16, r30
	_delay_ms(500);
	//_delay_ms(1000);
	
	uint8_t data_send[10];
	
	for(int iter=0; iter<10; iter++){
 46e:	ec 15       	cp	r30, r12
 470:	fd 05       	cpc	r31, r13
 472:	c1 f7       	brne	.-16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		data_send[iter] = receive_UART0();
	}
	
	for(int iter=0; iter<10; iter++){
		transmit_UART0(data_send[iter]);
 474:	f7 01       	movw	r30, r14
 476:	81 91       	ld	r24, Z+
 478:	7f 01       	movw	r14, r30
 47a:	0e 94 91 02 	call	0x522	; 0x522 <transmit_UART0>
 47e:	8f e1       	ldi	r24, 0x1F	; 31
 480:	9e e4       	ldi	r25, 0x4E	; 78
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
	
	for(int iter=0; iter<10; iter++){
		data_send[iter] = receive_UART0();
	}
	
	for(int iter=0; iter<10; iter++){
 48a:	ec 14       	cp	r14, r12
 48c:	fd 04       	cpc	r15, r13
 48e:	91 f7       	brne	.-28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		//int8_t b = receive_UART0();
		//transmit_UART0(b);
		int16_t c = 32768;//((int16_t)(b<<8)|(int16_t)a);
		//transmit_UART0((uint8_t)c);
		//transmit_UART0((uint8_t)(c>>8));
		Current_state.pwm.x_dir =0;             //0;
 490:	f4 01       	movw	r30, r8
 492:	10 82       	st	Z, r1
		Current_state.pwm.x =c;             //32768; 0.5
 494:	f3 01       	movw	r30, r6
 496:	b1 82       	std	Z+1, r11	; 0x01
 498:	a0 82       	st	Z, r10
		Current_state.pwm.y_dir = 0;            //0;
 49a:	f2 01       	movw	r30, r4
 49c:	10 82       	st	Z, r1
		Current_state.pwm.y = c;            //32768; 0.75
 49e:	f1 01       	movw	r30, r2
 4a0:	b1 82       	std	Z+1, r11	; 0x01
 4a2:	a0 82       	st	Z, r10
		Current_state.pwm.z_dir =0;             // 0;
 4a4:	ef e8       	ldi	r30, 0x8F	; 143
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	10 82       	st	Z, r1
		Current_state.pwm.z = c;                //0.25
 4aa:	eb e8       	ldi	r30, 0x8B	; 139
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	b1 82       	std	Z+1, r11	; 0x01
 4b0:	a0 82       	st	Z, r10
	_delay_ms(500);
	PORTA = 0x50;
	_delay_ms(500);
	*/
/************************************************************/
	}//CH3
 4b2:	bd cf       	rjmp	.-134    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

000004b4 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
 4b4:	84 b3       	in	r24, 0x14	; 20
 4b6:	88 63       	ori	r24, 0x38	; 56
 4b8:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
 4ba:	82 b1       	in	r24, 0x02	; 2
 4bc:	88 63       	ori	r24, 0x38	; 56
 4be:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
 4c0:	ab e8       	ldi	r26, 0x8B	; 139
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	1c 92       	st	X, r1
  TCCR3B = 0;
 4c6:	ea e8       	ldi	r30, 0x8A	; 138
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	10 82       	st	Z, r1
  TCCR3C = 0;
 4cc:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
 4d0:	8c 91       	ld	r24, X
 4d2:	8a 6a       	ori	r24, 0xAA	; 170
 4d4:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
 4d6:	80 81       	ld	r24, Z
 4d8:	81 61       	ori	r24, 0x11	; 17
 4da:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3B = 0x0000;
 4e8:	e4 e8       	ldi	r30, 0x84	; 132
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	11 82       	std	Z+1, r1	; 0x01
 4ee:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 4f0:	11 82       	std	Z+1, r1	; 0x01
 4f2:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 4f4:	11 82       	std	Z+1, r1	; 0x01
 4f6:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
 4f8:	85 b3       	in	r24, 0x15	; 21
 4fa:	87 7c       	andi	r24, 0xC7	; 199
 4fc:	85 bb       	out	0x15, r24	; 21
 4fe:	08 95       	ret

00000500 <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
 500:	1b b8       	out	0x0b, r1	; 11
 502:	1a b8       	out	0x0a, r1	; 10
 504:	e5 e9       	ldi	r30, 0x95	; 149
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	10 82       	st	Z, r1
 50a:	59 9a       	sbi	0x0b, 1	; 11
 50c:	8a b1       	in	r24, 0x0a	; 10
 50e:	88 61       	ori	r24, 0x18	; 24
 510:	8a b9       	out	0x0a, r24	; 10
 512:	80 81       	ld	r24, Z
 514:	8e 60       	ori	r24, 0x0E	; 14
 516:	80 83       	st	Z, r24
 518:	87 e6       	ldi	r24, 0x67	; 103
 51a:	89 b9       	out	0x09, r24	; 9
 51c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 520:	08 95       	ret

00000522 <transmit_UART0>:
 522:	5d 9b       	sbis	0x0b, 5	; 11
 524:	fe cf       	rjmp	.-4      	; 0x522 <transmit_UART0>
 526:	8c b9       	out	0x0c, r24	; 12
 528:	08 95       	ret

0000052a <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
 52a:	5f 9b       	sbis	0x0b, 7	; 11
 52c:	fe cf       	rjmp	.-4      	; 0x52a <receive_UART0>
  return UDR0;
 52e:	8c b1       	in	r24, 0x0c	; 12
}
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
