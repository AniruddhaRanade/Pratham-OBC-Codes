
hMaster_Torqtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  000005f2  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800178  00800178  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000195c  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a90  00000000  00000000  00002d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c4  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000042da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 e7       	ldi	r26, 0x78	; 120
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  c6:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
  ea:	8c b1       	in	r24, 0x0c	; 12
  ec:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
  f0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
  f4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
  f8:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
  fc:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 10c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 110:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 114:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  buffer &= 0xFFFFFF00;
 118:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 11c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 120:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 124:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 128:	88 27       	eor	r24, r24
 12a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 12e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 132:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 136:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  buffer |= (uint32_t) last_byte;
 13a:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <last_byte>
 13e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 142:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 146:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 14a:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 14e:	82 2b       	or	r24, r18
 150:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <buffer>
 154:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <buffer+0x1>
 158:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <buffer+0x2>
 15c:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 164:	8c 30       	cpi	r24, 0x0C	; 12
 166:	a0 f4       	brcc	.+40     	; 0x190 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 168:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
 16c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e2 58       	subi	r30, 0x82	; 130
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
 182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
 186:	8c 30       	cpi	r24, 0x0C	; 12
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xc2>
      pos = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 190:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 194:	8c 30       	cpi	r24, 0x0C	; 12
 196:	a0 f4       	brcc	.+40     	; 0x1c0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 198:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
 19c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e6 57       	subi	r30, 0x76	; 118
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
    
    vel++;
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
 1b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0xf2>
      vel = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	c0 f4       	brcc	.+48     	; 0x1f8 <__vector_18+0x12a>
  {
    if(dop >= 2)
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
 1d4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e2 50       	subi	r30, 0x02	; 2
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 83       	st	Z, r24
      
    dop++;
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x12a>
      dop = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	c0 f4       	brcc	.+48     	; 0x230 <__vector_18+0x162>
  {
    if(geo >= 4)
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	40 f0       	brcs	.+16     	; 0x218 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 208:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
 20c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 56       	subi	r30, 0x6E	; 110
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
    
    geo++;
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
 222:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_18+0x162>
      geo = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	b8 f4       	brcc	.+46     	; 0x266 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 238:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
 23c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <last_byte>
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 55       	subi	r30, 0x5E	; 94
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
    
    time++;
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_18+0x198>
    {
      time = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 266:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 26a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 26e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 272:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 276:	8c 3a       	cpi	r24, 0xAC	; 172
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	af 43       	sbci	r26, 0x3F	; 63
 27c:	bf 43       	sbci	r27, 0x3F	; 63
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x1bc>
  {
    message_end = 0;
 280:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
    pos = 0;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
 288:	3f c0       	rjmp	.+126    	; 0x308 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 28a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 28e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 292:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 296:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	95 40       	sbci	r25, 0x05	; 5
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	19 f4       	brne	.+6      	; 0x2aa <__vector_18+0x1dc>
    vel = 0;
 2a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2aa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ae:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2b2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2b6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2ba:	8c 3a       	cpi	r24, 0xAC	; 172
 2bc:	9b 40       	sbci	r25, 0x0B	; 11
 2be:	af 43       	sbci	r26, 0x3F	; 63
 2c0:	bf 43       	sbci	r27, 0x3F	; 63
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__vector_18+0x1fc>
    dop = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ca:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ce:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2d2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2d6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2da:	8c 3a       	cpi	r24, 0xAC	; 172
 2dc:	9e 40       	sbci	r25, 0x0E	; 14
 2de:	af 43       	sbci	r26, 0x3F	; 63
 2e0:	bf 43       	sbci	r27, 0x3F	; 63
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_18+0x21c>
    geo = 0;
 2e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 2ea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <buffer>
 2ee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <buffer+0x1>
 2f2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <buffer+0x2>
 2f6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <buffer+0x3>
 2fa:	8c 3a       	cpi	r24, 0xAC	; 172
 2fc:	9f 40       	sbci	r25, 0x0F	; 15
 2fe:	af 43       	sbci	r26, 0x3F	; 63
 300:	bf 43       	sbci	r27, 0x3F	; 63
 302:	11 f4       	brne	.+4      	; 0x308 <__vector_18+0x23a>
    time = 0;
 304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 310:	84 3f       	cpi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	f0 f4       	brcc	.+60     	; 0x352 <__vector_18+0x284>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31e:	89 2b       	or	r24, r25
 320:	c1 f0       	breq	.+48     	; 0x352 <__vector_18+0x284>
 322:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
 326:	88 23       	and	r24, r24
 328:	a1 f0       	breq	.+40     	; 0x352 <__vector_18+0x284>
  {
    GPS_done = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 330:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
 33e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
    buffer = 0;
 342:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <buffer>
 346:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <buffer+0x1>
 34a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <buffer+0x2>
 34e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <buffer+0x3>
  }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	c8 57       	subi	r28, 0x78	; 120
 378:	d1 09       	sbc	r29, r1
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	
	DDRA = 0xF0;
 384:	80 ef       	ldi	r24, 0xF0	; 240
 386:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 388:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	39 e6       	ldi	r19, 0x69	; 105
 38e:	98 e1       	ldi	r25, 0x18	; 24
 390:	21 50       	subi	r18, 0x01	; 1
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x22>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x2c>
 39a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 39c:	1b ba       	out	0x1b, r1	; 27
 39e:	ef ef       	ldi	r30, 0xFF	; 255
 3a0:	f9 e6       	ldi	r31, 0x69	; 105
 3a2:	28 e1       	ldi	r18, 0x18	; 24
 3a4:	e1 50       	subi	r30, 0x01	; 1
 3a6:	f0 40       	sbci	r31, 0x00	; 0
 3a8:	20 40       	sbci	r18, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x36>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x40>
 3ae:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 3b0:	8b bb       	out	0x1b, r24	; 27
 3b2:	3f ef       	ldi	r19, 0xFF	; 255
 3b4:	89 e6       	ldi	r24, 0x69	; 105
 3b6:	98 e1       	ldi	r25, 0x18	; 24
 3b8:	31 50       	subi	r19, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x4a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x54>
 3c2:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3c4:	1b ba       	out	0x1b, r1	; 27
 3c6:	ef ef       	ldi	r30, 0xFF	; 255
 3c8:	f9 e6       	ldi	r31, 0x69	; 105
 3ca:	28 e1       	ldi	r18, 0x18	; 24
 3cc:	e1 50       	subi	r30, 0x01	; 1
 3ce:	f0 40       	sbci	r31, 0x00	; 0
 3d0:	20 40       	sbci	r18, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x5e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x68>
 3d6:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <init_UART0>
  
	transmit_UART0('\r');
 3dc:	8d e0       	ldi	r24, 0x0D	; 13
 3de:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('\r');
 3e2:	8d e0       	ldi	r24, 0x0D	; 13
 3e4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('H');
 3e8:	88 e4       	ldi	r24, 0x48	; 72
 3ea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('e');
 3ee:	85 e6       	ldi	r24, 0x65	; 101
 3f0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('l');
 3f4:	8c e6       	ldi	r24, 0x6C	; 108
 3f6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('l');
 3fa:	8c e6       	ldi	r24, 0x6C	; 108
 3fc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	transmit_UART0('o');
 400:	8f e6       	ldi	r24, 0x6F	; 111
 402:	0e 94 e7 02 	call	0x5ce	; 0x5ce <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 406:	88 e2       	ldi	r24, 0x28	; 40
 408:	e0 e5       	ldi	r30, 0x50	; 80
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	de 01       	movw	r26, r28
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	01 90       	ld	r0, Z+
 412:	0d 92       	st	X+, r0
 414:	8a 95       	dec	r24
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	transmit_string_UART0(array);
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 420:	86 e2       	ldi	r24, 0x26	; 38
 422:	e7 e0       	ldi	r30, 0x07	; 7
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	de 01       	movw	r26, r28
 428:	99 96       	adiw	r26, 0x29	; 41
 42a:	01 90       	ld	r0, Z+
 42c:	0d 92       	st	X+, r0
 42e:	8a 95       	dec	r24
 430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	sprintf(array2,"\rGenerating Torquer Current for =\t");
 432:	83 e2       	ldi	r24, 0x23	; 35
 434:	ed e2       	ldi	r30, 0x2D	; 45
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	de 01       	movw	r26, r28
 43a:	af 5a       	subi	r26, 0xAF	; 175
 43c:	bf 4f       	sbci	r27, 0xFF	; 255
 43e:	01 90       	ld	r0, Z+
 440:	0d 92       	st	X+, r0
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		
/************************************************************/
	configure_torquer();
 446:	0e 94 82 02 	call	0x504	; 0x504 <configure_torquer>
	
/************************************************************/
	while(1){              //     CH1
	PORTA = 0xA0;
 44a:	0f 2e       	mov	r0, r31
 44c:	f0 ea       	ldi	r31, 0xA0	; 160
 44e:	2f 2e       	mov	r2, r31
 450:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x50;
 452:	0f 2e       	mov	r0, r31
 454:	f0 e5       	ldi	r31, 0x50	; 80
 456:	3f 2e       	mov	r3, r31
 458:	f0 2d       	mov	r31, r0
		//int8_t b = receive_UART0();
		//transmit_UART0(b);
		int16_t c = 32768;//((int16_t)(b<<8)|(int16_t)a);
		//transmit_UART0((uint8_t)c);
		//transmit_UART0((uint8_t)(c>>8));
		Current_state.pwm.x_dir =0;             //0;
 45a:	0f 2e       	mov	r0, r31
 45c:	fd ef       	ldi	r31, 0xFD	; 253
 45e:	8f 2e       	mov	r8, r31
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	9f 2e       	mov	r9, r31
 464:	f0 2d       	mov	r31, r0
		Current_state.pwm.x =c;             //32768; 0.5
 466:	0f 2e       	mov	r0, r31
 468:	f7 ef       	ldi	r31, 0xF7	; 247
 46a:	af 2e       	mov	r10, r31
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	bf 2e       	mov	r11, r31
 470:	f0 2d       	mov	r31, r0
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e8       	ldi	r17, 0x80	; 128
		Current_state.pwm.y_dir = 0;            //0;
 476:	0f 2e       	mov	r0, r31
 478:	fe ef       	ldi	r31, 0xFE	; 254
 47a:	cf 2e       	mov	r12, r31
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	df 2e       	mov	r13, r31
 480:	f0 2d       	mov	r31, r0
		Current_state.pwm.y = c;            //32768; 0.75
 482:	0f 2e       	mov	r0, r31
 484:	f9 ef       	ldi	r31, 0xF9	; 249
 486:	ef 2e       	mov	r14, r31
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	ff 2e       	mov	r15, r31
 48c:	f0 2d       	mov	r31, r0
		Current_state.pwm.z_dir =0;             // 0;
 48e:	0f 2e       	mov	r0, r31
 490:	ff ef       	ldi	r31, 0xFF	; 255
 492:	6f 2e       	mov	r6, r31
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	7f 2e       	mov	r7, r31
 498:	f0 2d       	mov	r31, r0
		Current_state.pwm.z = c;                //0.25
 49a:	0f 2e       	mov	r0, r31
 49c:	fb ef       	ldi	r31, 0xFB	; 251
 49e:	4f 2e       	mov	r4, r31
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	5f 2e       	mov	r5, r31
 4a4:	f0 2d       	mov	r31, r0
/************************************************************/
	configure_torquer();
	
/************************************************************/
	while(1){              //     CH1
	PORTA = 0xA0;
 4a6:	2b ba       	out	0x1b, r2	; 27
 4a8:	3f ef       	ldi	r19, 0xFF	; 255
 4aa:	84 e3       	ldi	r24, 0x34	; 52
 4ac:	9c e0       	ldi	r25, 0x0C	; 12
 4ae:	31 50       	subi	r19, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 4ba:	3b ba       	out	0x1b, r3	; 27
 4bc:	ef ef       	ldi	r30, 0xFF	; 255
 4be:	f4 e3       	ldi	r31, 0x34	; 52
 4c0:	2c e0       	ldi	r18, 0x0C	; 12
 4c2:	e1 50       	subi	r30, 0x01	; 1
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	20 40       	sbci	r18, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	3f ef       	ldi	r19, 0xFF	; 255
 4d0:	89 e6       	ldi	r24, 0x69	; 105
 4d2:	98 e1       	ldi	r25, 0x18	; 24
 4d4:	31 50       	subi	r19, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
		//int8_t b = receive_UART0();
		//transmit_UART0(b);
		int16_t c = 32768;//((int16_t)(b<<8)|(int16_t)a);
		//transmit_UART0((uint8_t)c);
		//transmit_UART0((uint8_t)(c>>8));
		Current_state.pwm.x_dir =0;             //0;
 4e0:	f4 01       	movw	r30, r8
 4e2:	10 82       	st	Z, r1
		Current_state.pwm.x =c;             //32768; 0.5
 4e4:	f5 01       	movw	r30, r10
 4e6:	11 83       	std	Z+1, r17	; 0x01
 4e8:	00 83       	st	Z, r16
		Current_state.pwm.y_dir = 0;            //0;
 4ea:	f6 01       	movw	r30, r12
 4ec:	10 82       	st	Z, r1
		Current_state.pwm.y = c;            //32768; 0.75
 4ee:	f7 01       	movw	r30, r14
 4f0:	11 83       	std	Z+1, r17	; 0x01
 4f2:	00 83       	st	Z, r16
		Current_state.pwm.z_dir =0;             // 0;
 4f4:	f3 01       	movw	r30, r6
 4f6:	10 82       	st	Z, r1
		Current_state.pwm.z = c;                //0.25
 4f8:	f2 01       	movw	r30, r4
 4fa:	11 83       	std	Z+1, r17	; 0x01
 4fc:	00 83       	st	Z, r16
		set_PWM ();
 4fe:	0e 94 a8 02 	call	0x550	; 0x550 <set_PWM>
	_delay_ms(500);
	PORTA = 0x50;
	_delay_ms(500);
	*/
/************************************************************/
	}//CH3
 502:	d1 cf       	rjmp	.-94     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

00000504 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
 504:	84 b3       	in	r24, 0x14	; 20
 506:	88 63       	ori	r24, 0x38	; 56
 508:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
 50a:	82 b1       	in	r24, 0x02	; 2
 50c:	88 63       	ori	r24, 0x38	; 56
 50e:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
 510:	ab e8       	ldi	r26, 0x8B	; 139
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	1c 92       	st	X, r1
  TCCR3B = 0;
 516:	ea e8       	ldi	r30, 0x8A	; 138
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	10 82       	st	Z, r1
  TCCR3C = 0;
 51c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
 520:	8c 91       	ld	r24, X
 522:	8a 6a       	ori	r24, 0xAA	; 170
 524:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
 526:	80 81       	ld	r24, Z
 528:	81 61       	ori	r24, 0x11	; 17
 52a:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	9f ef       	ldi	r25, 0xFF	; 255
 530:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 534:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3B = 0x0000;
 538:	e4 e8       	ldi	r30, 0x84	; 132
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	11 82       	std	Z+1, r1	; 0x01
 53e:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 540:	11 82       	std	Z+1, r1	; 0x01
 542:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 544:	11 82       	std	Z+1, r1	; 0x01
 546:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
 548:	85 b3       	in	r24, 0x15	; 21
 54a:	87 7c       	andi	r24, 0xC7	; 199
 54c:	85 bb       	out	0x15, r24	; 21
 54e:	08 95       	ret

00000550 <set_PWM>:

void set_PWM(void)
{
  
  ///If current direction of axis X/Y/Z opposite of default set pin
  if(Current_state.pwm.x_dir)
 550:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <Current_state+0x52>
 554:	88 23       	and	r24, r24
 556:	11 f0       	breq	.+4      	; 0x55c <set_PWM+0xc>
    PORTC |= _BV(PC5);
 558:	ad 9a       	sbi	0x15, 5	; 21
 55a:	01 c0       	rjmp	.+2      	; 0x55e <set_PWM+0xe>
  else
    PORTC &= ~(_BV(PC5));
 55c:	ad 98       	cbi	0x15, 5	; 21
    
  if(Current_state.pwm.y_dir)
 55e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <Current_state+0x53>
 562:	88 23       	and	r24, r24
 564:	11 f0       	breq	.+4      	; 0x56a <set_PWM+0x1a>
    PORTC |= _BV(PC4);
 566:	ac 9a       	sbi	0x15, 4	; 21
 568:	01 c0       	rjmp	.+2      	; 0x56c <set_PWM+0x1c>
  else
    PORTC &= ~(_BV(PC4));
 56a:	ac 98       	cbi	0x15, 4	; 21
    
  if(Current_state.pwm.z_dir)
 56c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Current_state+0x54>
 570:	88 23       	and	r24, r24
 572:	11 f0       	breq	.+4      	; 0x578 <set_PWM+0x28>
    PORTC |= _BV(PC3);
 574:	ab 9a       	sbi	0x15, 3	; 21
 576:	01 c0       	rjmp	.+2      	; 0x57a <set_PWM+0x2a>
  else
    PORTC &= ~(_BV(PC3));
 578:	ab 98       	cbi	0x15, 3	; 21
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
 57a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Current_state+0x4c>
 57e:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Current_state+0x4d>
 582:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 586:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = Current_state.pwm.y;
 58a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Current_state+0x4e>
 58e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Current_state+0x4f>
 592:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 596:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = Current_state.pwm.z;
 59a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Current_state+0x50>
 59e:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Current_state+0x51>
 5a2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 5a6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 5aa:	08 95       	ret

000005ac <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
 5ac:	1b b8       	out	0x0b, r1	; 11
 5ae:	1a b8       	out	0x0a, r1	; 10
 5b0:	e5 e9       	ldi	r30, 0x95	; 149
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	10 82       	st	Z, r1
 5b6:	59 9a       	sbi	0x0b, 1	; 11
 5b8:	8a b1       	in	r24, 0x0a	; 10
 5ba:	88 61       	ori	r24, 0x18	; 24
 5bc:	8a b9       	out	0x0a, r24	; 10
 5be:	80 81       	ld	r24, Z
 5c0:	8e 60       	ori	r24, 0x0E	; 14
 5c2:	80 83       	st	Z, r24
 5c4:	87 e6       	ldi	r24, 0x67	; 103
 5c6:	89 b9       	out	0x09, r24	; 9
 5c8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 5cc:	08 95       	ret

000005ce <transmit_UART0>:
 5ce:	5d 9b       	sbis	0x0b, 5	; 11
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <transmit_UART0>
 5d2:	8c b9       	out	0x0c, r24	; 12
 5d4:	08 95       	ret

000005d6 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
 5d6:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 5d8:	90 81       	ld	r25, Z
 5da:	99 23       	and	r25, r25
 5dc:	39 f0       	breq	.+14     	; 0x5ec <transmit_string_UART0+0x16>
 5de:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 5e0:	5d 9b       	sbis	0x0b, 5	; 11
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 5e4:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 5e6:	91 91       	ld	r25, Z+
 5e8:	91 11       	cpse	r25, r1
 5ea:	fa cf       	rjmp	.-12     	; 0x5e0 <transmit_string_UART0+0xa>
 5ec:	08 95       	ret

000005ee <_exit>:
 5ee:	f8 94       	cli

000005f0 <__stop_program>:
 5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <__stop_program>
