
hSlave_eepromtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000ef2  00000f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080017e  0080017e  00001004  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187b  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c03  00000000  00000000  000029cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b11  00000000  00000000  000035d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab6  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000544e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 37       	cpi	r26, 0x7E	; 126
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ae e7       	ldi	r26, 0x7E	; 126
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 76 03 	call	0x6ec	; 0x6ec <main>
  c6:	0c 94 77 07 	jmp	0xeee	; 0xeee <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ioinit>:
{

  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
#if defined(TWPS0)
  /* has prescaler (mega128 & newer) */
  TWSR = 0;
  ce:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
#endif

#if F_CPU < 3600000UL
  TWBR = 10;			/* smallest TWBR value, see note [5] */
#else
  TWBR = (F_CPU / 100000UL - 16) / 2;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d8:	08 95       	ret

000000da <eeprom_read_bytes_part>:
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
  uint8_t sla, twcr, n = 0;
  int rv = 0;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
  f2:	c1 14       	cp	r12, r1
  f4:	d1 04       	cpc	r13, r1
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	e8 06       	cpc	r14, r24
  fa:	f1 04       	cpc	r15, r1
  fc:	48 f0       	brcs	.+18     	; 0x110 <eeprom_read_bytes_part+0x36>
  {
    eeaddr -= HALF_ADDR;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	ec 1a       	sub	r14, r28
 102:	f1 08       	sbc	r15, r1
    eeprom_addr |= 0x08;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 10e:	05 c0       	rjmp	.+10     	; 0x11a <eeprom_read_bytes_part+0x40>
  }
  else
  {
    eeprom_addr &= ~0x08;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  }
  
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
 11a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 11e:	bd 2c       	mov	r11, r13
 120:	08 ec       	ldi	r16, 0xC8	; 200
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 122:	e4 e7       	ldi	r30, 0x74	; 116
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	14 ea       	ldi	r17, 0xA4	; 164
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
 128:	a1 e7       	ldi	r26, 0x71	; 113
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 12c:	91 2f       	mov	r25, r17
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 12e:	c3 e7       	ldi	r28, 0x73	; 115
 130:	d0 e0       	ldi	r29, 0x00	; 0
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
 132:	86 2f       	mov	r24, r22
 134:	81 60       	ori	r24, 0x01	; 1
 136:	a8 2e       	mov	r10, r24
 138:	03 c0       	rjmp	.+6      	; 0x140 <eeprom_read_bytes_part+0x66>
 13a:	01 50       	subi	r16, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
 13c:	09 f4       	brne	.+2      	; 0x140 <eeprom_read_bytes_part+0x66>
 13e:	b2 c0       	rjmp	.+356    	; 0x2a4 <eeprom_read_bytes_part+0x1ca>
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 140:	74 e8       	ldi	r23, 0x84	; 132
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 142:	90 83       	st	Z, r25
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <eeprom_read_bytes_part+0x6a>
  switch ((twst = TW_STATUS))
 14a:	8c 91       	ld	r24, X
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	29 f0       	breq	.+10     	; 0x160 <eeprom_read_bytes_part+0x86>
 156:	88 33       	cpi	r24, 0x38	; 56
 158:	a1 f3       	breq	.-24     	; 0x142 <eeprom_read_bytes_part+0x68>
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	09 f0       	breq	.+2      	; 0x160 <eeprom_read_bytes_part+0x86>
 15e:	a5 c0       	rjmp	.+330    	; 0x2aa <eeprom_read_bytes_part+0x1d0>
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 160:	68 83       	st	Y, r22
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 162:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <eeprom_read_bytes_part+0x8a>
  switch ((twst = TW_STATUS))
 16a:	8c 91       	ld	r24, X
 16c:	88 7f       	andi	r24, 0xF8	; 248
 16e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 172:	80 32       	cpi	r24, 0x20	; 32
 174:	11 f3       	breq	.-60     	; 0x13a <eeprom_read_bytes_part+0x60>
 176:	88 33       	cpi	r24, 0x38	; 56
 178:	21 f3       	breq	.-56     	; 0x142 <eeprom_read_bytes_part+0x68>
 17a:	88 31       	cpi	r24, 0x18	; 24
 17c:	09 f0       	breq	.+2      	; 0x180 <eeprom_read_bytes_part+0xa6>
 17e:	7a c0       	rjmp	.+244    	; 0x274 <eeprom_read_bytes_part+0x19a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 180:	b8 82       	st	Y, r11
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 182:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	ec f7       	brge	.-6      	; 0x184 <eeprom_read_bytes_part+0xaa>
  switch ((twst = TW_STATUS))
 18a:	8c 91       	ld	r24, X
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 192:	80 33       	cpi	r24, 0x30	; 48
 194:	b1 f2       	breq	.-84     	; 0x142 <eeprom_read_bytes_part+0x68>
 196:	88 33       	cpi	r24, 0x38	; 56
 198:	a1 f2       	breq	.-88     	; 0x142 <eeprom_read_bytes_part+0x68>
 19a:	88 32       	cpi	r24, 0x28	; 40
 19c:	09 f0       	breq	.+2      	; 0x1a0 <eeprom_read_bytes_part+0xc6>
 19e:	6d c0       	rjmp	.+218    	; 0x27a <eeprom_read_bytes_part+0x1a0>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
 1a0:	c8 82       	st	Y, r12
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1a2:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <eeprom_read_bytes_part+0xca>
  switch ((twst = TW_STATUS))
 1aa:	8c 91       	ld	r24, X
 1ac:	88 7f       	andi	r24, 0xF8	; 248
 1ae:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 1b2:	80 33       	cpi	r24, 0x30	; 48
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <eeprom_read_bytes_part+0xde>
 1b6:	64 c0       	rjmp	.+200    	; 0x280 <eeprom_read_bytes_part+0x1a6>
 1b8:	88 33       	cpi	r24, 0x38	; 56
 1ba:	19 f2       	breq	.-122    	; 0x142 <eeprom_read_bytes_part+0x68>
 1bc:	88 32       	cpi	r24, 0x28	; 40
 1be:	19 f0       	breq	.+6      	; 0x1c6 <eeprom_read_bytes_part+0xec>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	6b c0       	rjmp	.+214    	; 0x29c <eeprom_read_bytes_part+0x1c2>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
 1c6:	10 83       	st	Z, r17
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	ec f7       	brge	.-6      	; 0x1c8 <eeprom_read_bytes_part+0xee>
  switch ((twst = TW_STATUS))
 1ce:	8c 91       	ld	r24, X
 1d0:	88 7f       	andi	r24, 0xF8	; 248
 1d2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 1d6:	80 31       	cpi	r24, 0x10	; 16
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <eeprom_read_bytes_part+0x10c>
 1da:	88 33       	cpi	r24, 0x38	; 56
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <eeprom_read_bytes_part+0x106>
 1de:	b1 cf       	rjmp	.-158    	; 0x142 <eeprom_read_bytes_part+0x68>
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <eeprom_read_bytes_part+0x10c>
 1e4:	50 c0       	rjmp	.+160    	; 0x286 <eeprom_read_bytes_part+0x1ac>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
 1e6:	a8 82       	st	Y, r10
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1e8:	70 83       	st	Z, r23
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	ec f7       	brge	.-6      	; 0x1ea <eeprom_read_bytes_part+0x110>
  switch ((twst = TW_STATUS))
 1f0:	8c 91       	ld	r24, X
 1f2:	88 7f       	andi	r24, 0xF8	; 248
 1f4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	49 f0       	breq	.+18     	; 0x20e <eeprom_read_bytes_part+0x134>
 1fc:	88 34       	cpi	r24, 0x48	; 72
 1fe:	09 f4       	brne	.+2      	; 0x202 <eeprom_read_bytes_part+0x128>
 200:	45 c0       	rjmp	.+138    	; 0x28c <eeprom_read_bytes_part+0x1b2>
 202:	88 33       	cpi	r24, 0x38	; 56
 204:	09 f4       	brne	.+2      	; 0x208 <eeprom_read_bytes_part+0x12e>
 206:	9d cf       	rjmp	.-198    	; 0x142 <eeprom_read_bytes_part+0x68>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	47 c0       	rjmp	.+142    	; 0x29c <eeprom_read_bytes_part+0x1c2>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 20e:	14 16       	cp	r1, r20
 210:	15 06       	cpc	r1, r21
 212:	0c f0       	brlt	.+2      	; 0x216 <eeprom_read_bytes_part+0x13c>
 214:	3e c0       	rjmp	.+124    	; 0x292 <eeprom_read_bytes_part+0x1b8>
 216:	62 2f       	mov	r22, r18
 218:	73 2f       	mov	r23, r19
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	34 ec       	ldi	r19, 0xC4	; 196
    {
      if (len == 1)
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
 220:	0f 2e       	mov	r0, r31
 222:	f4 e8       	ldi	r31, 0x84	; 132
 224:	ff 2e       	mov	r15, r31
 226:	f0 2d       	mov	r31, r0
      TWCR = twcr;		/* clear int to start transmission */
 228:	a4 e7       	ldi	r26, 0x74	; 116
 22a:	b0 e0       	ldi	r27, 0x00	; 0
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
 22c:	01 e7       	ldi	r16, 0x71	; 113
 22e:	10 e0       	ldi	r17, 0x00	; 0
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 230:	0f 2e       	mov	r0, r31
 232:	f3 e7       	ldi	r31, 0x73	; 115
 234:	cf 2e       	mov	r12, r31
 236:	d1 2c       	mov	r13, r1
 238:	f0 2d       	mov	r31, r0
 23a:	fb 01       	movw	r30, r22
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
    {
      if (len == 1)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	51 05       	cpc	r21, r1
 240:	09 f4       	brne	.+2      	; 0x244 <eeprom_read_bytes_part+0x16a>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
 242:	3f 2d       	mov	r19, r15
      TWCR = twcr;		/* clear int to start transmission */
 244:	3c 93       	st	X, r19
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 246:	2c 91       	ld	r18, X
 248:	22 23       	and	r18, r18
 24a:	ec f7       	brge	.-6      	; 0x246 <eeprom_read_bytes_part+0x16c>
      switch ((twst = TW_STATUS))
 24c:	e8 01       	movw	r28, r16
 24e:	28 81       	ld	r18, Y
 250:	28 7f       	andi	r18, 0xF8	; 248
 252:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <twst>
 256:	20 35       	cpi	r18, 0x50	; 80
 258:	19 f0       	breq	.+6      	; 0x260 <eeprom_read_bytes_part+0x186>
 25a:	28 35       	cpi	r18, 0x58	; 88
 25c:	49 f1       	breq	.+82     	; 0x2b0 <eeprom_read_bytes_part+0x1d6>
 25e:	1c c0       	rjmp	.+56     	; 0x298 <eeprom_read_bytes_part+0x1be>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 260:	e6 01       	movw	r28, r12
 262:	28 81       	ld	r18, Y
 264:	20 83       	st	Z, r18
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
	  rv++;
 26a:	01 96       	adiw	r24, 0x01	; 1

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 26c:	41 50       	subi	r20, 0x01	; 1
 26e:	51 09       	sbc	r21, r1
 270:	21 f7       	brne	.-56     	; 0x23a <eeprom_read_bytes_part+0x160>
 272:	14 c0       	rjmp	.+40     	; 0x29c <eeprom_read_bytes_part+0x1c2>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	11 c0       	rjmp	.+34     	; 0x29c <eeprom_read_bytes_part+0x1c2>
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	0e c0       	rjmp	.+28     	; 0x29c <eeprom_read_bytes_part+0x1c2>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0b c0       	rjmp	.+22     	; 0x29c <eeprom_read_bytes_part+0x1c2>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	08 c0       	rjmp	.+16     	; 0x29c <eeprom_read_bytes_part+0x1c2>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	05 c0       	rjmp	.+10     	; 0x29c <eeprom_read_bytes_part+0x1c2>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <eeprom_read_bytes_part+0x1c2>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	9f ef       	ldi	r25, 0xFF	; 255
	  goto error;
	}
    }
 quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 29c:	24 e9       	ldi	r18, 0x94	; 148
 29e:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  return rv;
 2a2:	0b c0       	rjmp	.+22     	; 0x2ba <eeprom_read_bytes_part+0x1e0>
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <eeprom_read_bytes_part+0x1e0>

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <eeprom_read_bytes_part+0x1e0>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 2b0:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2b4:	20 83       	st	Z, r18
	  rv++;
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	f1 cf       	rjmp	.-30     	; 0x29c <eeprom_read_bytes_part+0x1c2>
  return rv;

 error:
  rv = -1;
  goto quit;
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	08 95       	ret

000002d0 <eeprom_read_bytes>:
  TWBR = (F_CPU / 100000UL - 16) / 2;
#endif
}

int eeprom_read_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ea 01       	movw	r28, r20
 2e2:	89 01       	movw	r16, r18
  if((eeaddr < HALF_ADDR) && ((eeaddr + len) > HALF_ADDR))
 2e4:	61 15       	cp	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	82 07       	cpc	r24, r18
 2ec:	91 05       	cpc	r25, r1
 2ee:	18 f5       	brcc	.+70     	; 0x336 <eeprom_read_bytes+0x66>
 2f0:	6a 01       	movw	r12, r20
 2f2:	55 0f       	add	r21, r21
 2f4:	ee 08       	sbc	r14, r14
 2f6:	ff 08       	sbc	r15, r15
 2f8:	c6 0e       	add	r12, r22
 2fa:	d7 1e       	adc	r13, r23
 2fc:	e8 1e       	adc	r14, r24
 2fe:	f9 1e       	adc	r15, r25
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	c2 16       	cp	r12, r18
 304:	d1 04       	cpc	r13, r1
 306:	e2 06       	cpc	r14, r18
 308:	f1 04       	cpc	r15, r1
 30a:	a8 f0       	brcs	.+42     	; 0x336 <eeprom_read_bytes+0x66>
  {
    int first = HALF_ADDR - eeaddr;
 30c:	ee 24       	eor	r14, r14
 30e:	ff 24       	eor	r15, r15
 310:	e6 1a       	sub	r14, r22
 312:	f7 0a       	sbc	r15, r23
    eeprom_read_bytes_part(eeaddr, first, buf);
 314:	98 01       	movw	r18, r16
 316:	a7 01       	movw	r20, r14
 318:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
    return eeprom_read_bytes_part(HALF_ADDR, len - first , buf + first);
 31c:	98 01       	movw	r18, r16
 31e:	2e 0d       	add	r18, r14
 320:	3f 1d       	adc	r19, r15
 322:	ae 01       	movw	r20, r28
 324:	4e 19       	sub	r20, r14
 326:	5f 09       	sbc	r21, r15
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
 334:	04 c0       	rjmp	.+8      	; 0x33e <eeprom_read_bytes+0x6e>
  }
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
 336:	98 01       	movw	r18, r16
 338:	ae 01       	movw	r20, r28
 33a:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <eeprom_write_page>:
  rv = -1;
  goto quit;
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
 350:	8f 92       	push	r8
 352:	9f 92       	push	r9
 354:	af 92       	push	r10
 356:	bf 92       	push	r11
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	6b 01       	movw	r12, r22
 368:	7c 01       	movw	r14, r24
  uint8_t sla, n = 0;
  int rv = 0;
  uint16_t endaddr;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
 36a:	c1 14       	cp	r12, r1
 36c:	d1 04       	cpc	r13, r1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	e6 06       	cpc	r14, r22
 372:	f1 04       	cpc	r15, r1
 374:	48 f0       	brcs	.+18     	; 0x388 <eeprom_write_page+0x38>
  {
    eeaddr -= HALF_ADDR;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	e8 1a       	sub	r14, r24
 37a:	f1 08       	sbc	r15, r1
    eeprom_addr |= 0x08;
 37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 380:	88 60       	ori	r24, 0x08	; 8
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 386:	05 c0       	rjmp	.+10     	; 0x392 <eeprom_write_page+0x42>
  }
  else
    eeprom_addr &= ~0x08;
 388:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
 392:	ca 01       	movw	r24, r20
 394:	05 2e       	mov	r0, r21
 396:	00 0c       	add	r0, r0
 398:	aa 0b       	sbc	r26, r26
 39a:	bb 0b       	sbc	r27, r27
 39c:	8c 0d       	add	r24, r12
 39e:	9d 1d       	adc	r25, r13
 3a0:	ae 1d       	adc	r26, r14
 3a2:	bf 1d       	adc	r27, r15
 3a4:	46 01       	movw	r8, r12
 3a6:	57 01       	movw	r10, r14
 3a8:	cf e7       	ldi	r28, 0x7F	; 127
 3aa:	8c 2a       	or	r8, r28
 3ac:	88 15       	cp	r24, r8
 3ae:	99 05       	cpc	r25, r9
 3b0:	aa 05       	cpc	r26, r10
 3b2:	bb 05       	cpc	r27, r11
 3b4:	18 f4       	brcc	.+6      	; 0x3bc <eeprom_write_page+0x6c>
    endaddr = eeaddr + len;
 3b6:	4c 0d       	add	r20, r12
 3b8:	5d 1d       	adc	r21, r13
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <eeprom_write_page+0x74>
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
 3bc:	a6 01       	movw	r20, r12
 3be:	4f 67       	ori	r20, 0x7F	; 127
 3c0:	4f 5f       	subi	r20, 0xFF	; 255
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
 3c4:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <__data_start>
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 3c8:	bd 2c       	mov	r11, r13
 3ca:	18 ec       	ldi	r17, 0xC8	; 200
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3cc:	e4 e7       	ldi	r30, 0x74	; 116
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
 3d0:	a1 e7       	ldi	r26, 0x71	; 113
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3d4:	94 ea       	ldi	r25, 0xA4	; 164
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 3d6:	c3 e7       	ldi	r28, 0x73	; 115
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 3da:	64 e8       	ldi	r22, 0x84	; 132
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <eeprom_write_page+0x94>
 3de:	11 50       	subi	r17, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <eeprom_write_page+0x94>
 3e2:	7f c0       	rjmp	.+254    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3e4:	90 83       	st	Z, r25
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	ec f7       	brge	.-6      	; 0x3e6 <eeprom_write_page+0x96>
  switch ((twst = TW_STATUS))
 3ec:	8c 91       	ld	r24, X
 3ee:	88 7f       	andi	r24, 0xF8	; 248
 3f0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 3f4:	80 31       	cpi	r24, 0x10	; 16
 3f6:	29 f0       	breq	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	88 33       	cpi	r24, 0x38	; 56
 3fa:	a1 f3       	breq	.-24     	; 0x3e4 <eeprom_write_page+0x94>
 3fc:	88 30       	cpi	r24, 0x08	; 8
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	73 c0       	rjmp	.+230    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 402:	78 83       	st	Y, r23
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 404:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 406:	80 81       	ld	r24, Z
 408:	88 23       	and	r24, r24
 40a:	ec f7       	brge	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
  switch ((twst = TW_STATUS))
 40c:	8c 91       	ld	r24, X
 40e:	88 7f       	andi	r24, 0xF8	; 248
 410:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 414:	80 32       	cpi	r24, 0x20	; 32
 416:	19 f3       	breq	.-58     	; 0x3de <eeprom_write_page+0x8e>
 418:	88 33       	cpi	r24, 0x38	; 56
 41a:	21 f3       	breq	.-56     	; 0x3e4 <eeprom_write_page+0x94>
 41c:	88 31       	cpi	r24, 0x18	; 24
 41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	4c c0       	rjmp	.+152    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 422:	b8 82       	st	Y, r11
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 424:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 426:	80 81       	ld	r24, Z
 428:	88 23       	and	r24, r24
 42a:	ec f7       	brge	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
  switch ((twst = TW_STATUS))
 42c:	8c 91       	ld	r24, X
 42e:	88 7f       	andi	r24, 0xF8	; 248
 430:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 434:	80 33       	cpi	r24, 0x30	; 48
 436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	43 c0       	rjmp	.+134    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 43a:	88 33       	cpi	r24, 0x38	; 56
 43c:	99 f2       	breq	.-90     	; 0x3e4 <eeprom_write_page+0x94>
 43e:	88 32       	cpi	r24, 0x28	; 40
 440:	19 f0       	breq	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	3f ef       	ldi	r19, 0xFF	; 255
 446:	47 c0       	rjmp	.+142    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
    default:
      goto error;		/* must send stop condition */
    }


  TWDR = eeaddr;		/* low 8 bits of addr */
 448:	c8 82       	st	Y, r12
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 44a:	60 83       	st	Z, r22
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	ec f7       	brge	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
  switch ((twst = TW_STATUS))
 452:	8c 91       	ld	r24, X
 454:	88 7f       	andi	r24, 0xF8	; 248
 456:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 45a:	80 33       	cpi	r24, 0x30	; 48
 45c:	a1 f1       	breq	.+104    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 45e:	88 33       	cpi	r24, 0x38	; 56
 460:	09 f2       	breq	.-126    	; 0x3e4 <eeprom_write_page+0x94>
 462:	88 32       	cpi	r24, 0x28	; 40
 464:	19 f0       	breq	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	3f ef       	ldi	r19, 0xFF	; 255
 46a:	35 c0       	rjmp	.+106    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
 46c:	4c 19       	sub	r20, r12
 46e:	5d 09       	sbc	r21, r13

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 470:	14 16       	cp	r1, r20
 472:	15 06       	cpc	r1, r21
 474:	5c f5       	brge	.+86     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 476:	a2 2f       	mov	r26, r18
 478:	b3 2f       	mov	r27, r19
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
    {
      TWDR = *buf++;
 47e:	63 e7       	ldi	r22, 0x73	; 115
 480:	70 e0       	ldi	r23, 0x00	; 0
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
 482:	e4 e7       	ldi	r30, 0x74	; 116
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	94 e8       	ldi	r25, 0x84	; 132
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
 488:	0f 2e       	mov	r0, r31
 48a:	f1 e7       	ldi	r31, 0x71	; 113
 48c:	ef 2e       	mov	r14, r31
 48e:	f1 2c       	mov	r15, r1
 490:	f0 2d       	mov	r31, r0
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
 492:	8d 91       	ld	r24, X+
 494:	eb 01       	movw	r28, r22
 496:	88 83       	st	Y, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
 498:	90 83       	st	Z, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 49a:	80 81       	ld	r24, Z
 49c:	88 23       	and	r24, r24
 49e:	ec f7       	brge	.-6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
      switch ((twst = TW_STATUS))
 4a0:	e7 01       	movw	r28, r14
 4a2:	88 81       	ld	r24, Y
 4a4:	88 7f       	andi	r24, 0xF8	; 248
 4a6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twst>
 4aa:	88 32       	cpi	r24, 0x28	; 40
 4ac:	91 f4       	brne	.+36     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
 4ae:	2f 5f       	subi	r18, 0xFF	; 255
 4b0:	3f 4f       	sbci	r19, 0xFF	; 255

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 4b2:	42 17       	cp	r20, r18
 4b4:	53 07       	cpc	r21, r19
 4b6:	69 f7       	brne	.-38     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	3f ef       	ldi	r19, 0xFF	; 255
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	3f ef       	ldi	r19, 0xFF	; 255
	default:
	  goto error;
	}
    }
 quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 4d6:	84 e9       	ldi	r24, 0x94	; 148
 4d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  return rv;
 4dc:	82 2f       	mov	r24, r18
 4de:	93 2f       	mov	r25, r19
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
    return -1;
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      return -1;		/* error: not in start condition */
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

 error:
  rv = -1;
  goto quit;
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	df 90       	pop	r13
 4f8:	cf 90       	pop	r12
 4fa:	bf 90       	pop	r11
 4fc:	af 90       	pop	r10
 4fe:	9f 90       	pop	r9
 500:	8f 90       	pop	r8
 502:	08 95       	ret

00000504 <eeprom_write_bytes>:

int eeprom_write_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
 504:	8f 92       	push	r8
 506:	9f 92       	push	r9
 508:	af 92       	push	r10
 50a:	bf 92       	push	r11
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	4b 01       	movw	r8, r22
 51a:	5c 01       	movw	r10, r24
 51c:	ea 01       	movw	r28, r20
 51e:	89 01       	movw	r16, r18
  int rv, total;

  total = 0;
 520:	e1 2c       	mov	r14, r1
 522:	f1 2c       	mov	r15, r1
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
 524:	98 01       	movw	r18, r16
 526:	ae 01       	movw	r20, r28
 528:	c5 01       	movw	r24, r10
 52a:	b4 01       	movw	r22, r8
 52c:	0e 94 a8 01 	call	0x350	; 0x350 <eeprom_write_page>
      if (rv == -1)
 530:	8f 3f       	cpi	r24, 0xFF	; 255
 532:	2f ef       	ldi	r18, 0xFF	; 255
 534:	92 07       	cpc	r25, r18
 536:	a9 f0       	breq	.+42     	; 0x562 <eeprom_write_bytes+0x5e>
        return -1;
      eeaddr += rv;
 538:	ac 01       	movw	r20, r24
 53a:	09 2e       	mov	r0, r25
 53c:	00 0c       	add	r0, r0
 53e:	66 0b       	sbc	r22, r22
 540:	77 0b       	sbc	r23, r23
 542:	84 0e       	add	r8, r20
 544:	95 1e       	adc	r9, r21
 546:	a6 1e       	adc	r10, r22
 548:	b7 1e       	adc	r11, r23
      len -= rv;
 54a:	c8 1b       	sub	r28, r24
 54c:	d9 0b       	sbc	r29, r25
      buf += rv;
 54e:	08 0f       	add	r16, r24
 550:	19 1f       	adc	r17, r25
      total += rv;
 552:	e8 0e       	add	r14, r24
 554:	f9 1e       	adc	r15, r25
    }
  while (len > 0);
 556:	1c 16       	cp	r1, r28
 558:	1d 06       	cpc	r1, r29
 55a:	24 f3       	brlt	.-56     	; 0x524 <eeprom_write_bytes+0x20>
      if (rv == -1)
        return -1;
      eeaddr += rv;
      len -= rv;
      buf += rv;
      total += rv;
 55c:	8e 2d       	mov	r24, r14
 55e:	9f 2d       	mov	r25, r15
 560:	02 c0       	rjmp	.+4      	; 0x566 <eeprom_write_bytes+0x62>
  total = 0;
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
      if (rv == -1)
        return -1;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	bf 90       	pop	r11
 574:	af 90       	pop	r10
 576:	9f 90       	pop	r9
 578:	8f 90       	pop	r8
 57a:	08 95       	ret

0000057c <write_frame_to_eeprom>:

void write_frame_to_eeprom(uint8_t *frame)
{
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
  //correct the eeprom function for supporting 32-bit addresses
  static uint8_t start = 0;
  
  if((write_addr == read_addr) && start)
 584:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <write_addr>
 588:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <write_addr+0x1>
 58c:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <write_addr+0x2>
 590:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <write_addr+0x3>
 594:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <read_addr>
 598:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <read_addr+0x1>
 59c:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <read_addr+0x2>
 5a0:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <read_addr+0x3>
 5a4:	c4 16       	cp	r12, r20
 5a6:	d5 06       	cpc	r13, r21
 5a8:	e6 06       	cpc	r14, r22
 5aa:	f7 06       	cpc	r15, r23
 5ac:	91 f4       	brne	.+36     	; 0x5d2 <write_frame_to_eeprom+0x56>
 5ae:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
 5b2:	22 23       	and	r18, r18
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <write_frame_to_eeprom+0x56>
    read_addr +=EEP_FRAME_SIZE;
 5b6:	b7 01       	movw	r22, r14
 5b8:	a6 01       	movw	r20, r12
 5ba:	4a 5e       	subi	r20, 0xEA	; 234
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	6f 4f       	sbci	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	40 93 83 01 	sts	0x0183, r20	; 0x800183 <read_addr>
 5c6:	50 93 84 01 	sts	0x0184, r21	; 0x800184 <read_addr+0x1>
 5ca:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <read_addr+0x2>
 5ce:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <read_addr+0x3>
    
  eeprom_write_bytes(write_addr,EEP_FRAME_SIZE,frame);
 5d2:	9c 01       	movw	r18, r24
 5d4:	46 e1       	ldi	r20, 0x16	; 22
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	c7 01       	movw	r24, r14
 5da:	b6 01       	movw	r22, r12
 5dc:	0e 94 82 02 	call	0x504	; 0x504 <eeprom_write_bytes>
  write_addr +=EEP_FRAME_SIZE;
 5e0:	d7 01       	movw	r26, r14
 5e2:	c6 01       	movw	r24, r12
 5e4:	46 96       	adiw	r24, 0x16	; 22
 5e6:	a1 1d       	adc	r26, r1
 5e8:	b1 1d       	adc	r27, r1
 5ea:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <write_addr>
 5ee:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <write_addr+0x1>
 5f2:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <write_addr+0x2>
 5f6:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <write_addr+0x3>
  
  if(write_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
 5fa:	8c 3e       	cpi	r24, 0xEC	; 236
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	a1 05       	cpc	r26, r1
 600:	b1 05       	cpc	r27, r1
 602:	69 f4       	brne	.+26     	; 0x61e <write_frame_to_eeprom+0xa2>
    write_addr = HALF_ADDR;
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	a1 e0       	ldi	r26, 0x01	; 1
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <write_addr>
 610:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <write_addr+0x1>
 614:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <write_addr+0x2>
 618:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <write_addr+0x3>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <write_frame_to_eeprom+0xca>
  if(write_addr +EEP_FRAME_SIZE > MAX_ADDR)
 61e:	8c e2       	ldi	r24, 0x2C	; 44
 620:	c8 0e       	add	r12, r24
 622:	d1 1c       	adc	r13, r1
 624:	e1 1c       	adc	r14, r1
 626:	f1 1c       	adc	r15, r1
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	c2 16       	cp	r12, r18
 62c:	d1 04       	cpc	r13, r1
 62e:	22 e0       	ldi	r18, 0x02	; 2
 630:	e2 06       	cpc	r14, r18
 632:	f1 04       	cpc	r15, r1
 634:	40 f0       	brcs	.+16     	; 0x646 <write_frame_to_eeprom+0xca>
    write_addr = 0;
 636:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <write_addr>
 63a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <write_addr+0x1>
 63e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <write_addr+0x2>
 642:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <write_addr+0x3>
  
  start = 1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
}
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	08 95       	ret

00000656 <read_frame_from_eeprom>:

void read_frame_from_eeprom(uint8_t *frame)
{
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
  eeprom_read_bytes(read_addr,EEP_FRAME_SIZE, frame);
 65e:	c0 90 83 01 	lds	r12, 0x0183	; 0x800183 <read_addr>
 662:	d0 90 84 01 	lds	r13, 0x0184	; 0x800184 <read_addr+0x1>
 666:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <read_addr+0x2>
 66a:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <read_addr+0x3>
 66e:	9c 01       	movw	r18, r24
 670:	46 e1       	ldi	r20, 0x16	; 22
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	c7 01       	movw	r24, r14
 676:	b6 01       	movw	r22, r12
 678:	0e 94 68 01 	call	0x2d0	; 0x2d0 <eeprom_read_bytes>
  read_addr +=EEP_FRAME_SIZE;
 67c:	d7 01       	movw	r26, r14
 67e:	c6 01       	movw	r24, r12
 680:	46 96       	adiw	r24, 0x16	; 22
 682:	a1 1d       	adc	r26, r1
 684:	b1 1d       	adc	r27, r1
 686:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <read_addr>
 68a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <read_addr+0x1>
 68e:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <read_addr+0x2>
 692:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <read_addr+0x3>
  
  if(read_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
 696:	8c 3e       	cpi	r24, 0xEC	; 236
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	a1 05       	cpc	r26, r1
 69c:	b1 05       	cpc	r27, r1
 69e:	69 f4       	brne	.+26     	; 0x6ba <read_frame_from_eeprom+0x64>
    read_addr = HALF_ADDR;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a1 e0       	ldi	r26, 0x01	; 1
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <read_addr>
 6ac:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <read_addr+0x1>
 6b0:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <read_addr+0x2>
 6b4:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <read_addr+0x3>
 6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <read_frame_from_eeprom+0x8c>
  if(read_addr +EEP_FRAME_SIZE > MAX_ADDR)
 6ba:	8c e2       	ldi	r24, 0x2C	; 44
 6bc:	c8 0e       	add	r12, r24
 6be:	d1 1c       	adc	r13, r1
 6c0:	e1 1c       	adc	r14, r1
 6c2:	f1 1c       	adc	r15, r1
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	c2 16       	cp	r12, r18
 6c8:	d1 04       	cpc	r13, r1
 6ca:	22 e0       	ldi	r18, 0x02	; 2
 6cc:	e2 06       	cpc	r14, r18
 6ce:	f1 04       	cpc	r15, r1
 6d0:	40 f0       	brcs	.+16     	; 0x6e2 <read_frame_from_eeprom+0x8c>
    read_addr = 0;
 6d2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <read_addr>
 6d6:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <read_addr+0x1>
 6da:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <read_addr+0x2>
 6de:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <read_addr+0x3>
}
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	08 95       	ret

000006ec <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	cc 5d       	subi	r28, 0xDC	; 220
 6f6:	d1 40       	sbci	r29, 0x01	; 1
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
 702:	8f e0       	ldi	r24, 0x0F	; 15
 704:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 706:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 708:	2f ef       	ldi	r18, 0xFF	; 255
 70a:	39 e6       	ldi	r19, 0x69	; 105
 70c:	98 e1       	ldi	r25, 0x18	; 24
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	30 40       	sbci	r19, 0x00	; 0
 712:	90 40       	sbci	r25, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <main+0x22>
 716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x2c>
 718:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 71a:	1b ba       	out	0x1b, r1	; 27
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	39 e6       	ldi	r19, 0x69	; 105
 720:	98 e1       	ldi	r25, 0x18	; 24
 722:	21 50       	subi	r18, 0x01	; 1
 724:	30 40       	sbci	r19, 0x00	; 0
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <main+0x36>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <main+0x40>
 72c:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
 72e:	8b bb       	out	0x1b, r24	; 27
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	39 e6       	ldi	r19, 0x69	; 105
 734:	88 e1       	ldi	r24, 0x18	; 24
 736:	21 50       	subi	r18, 0x01	; 1
 738:	30 40       	sbci	r19, 0x00	; 0
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x4a>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x54>
 740:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 742:	1b ba       	out	0x1b, r1	; 27
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	29 e6       	ldi	r18, 0x69	; 105
 748:	38 e1       	ldi	r19, 0x18	; 24
 74a:	91 50       	subi	r25, 0x01	; 1
 74c:	20 40       	sbci	r18, 0x00	; 0
 74e:	30 40       	sbci	r19, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <main+0x5e>
 752:	00 c0       	rjmp	.+0      	; 0x754 <main+0x68>
 754:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 756:	0e 94 71 04 	call	0x8e2	; 0x8e2 <init_UART0>
	
	transmit_UART0('\r');
 75a:	8d e0       	ldi	r24, 0x0D	; 13
 75c:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('\r');
 760:	8d e0       	ldi	r24, 0x0D	; 13
 762:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('H');
 766:	88 e4       	ldi	r24, 0x48	; 72
 768:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('e');
 76c:	85 e6       	ldi	r24, 0x65	; 101
 76e:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('l');
 772:	8c e6       	ldi	r24, 0x6C	; 108
 774:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('l');
 778:	8c e6       	ldi	r24, 0x6C	; 108
 77a:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('o');
 77e:	8f e6       	ldi	r24, 0x6F	; 111
 780:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 784:	88 e2       	ldi	r24, 0x28	; 40
 786:	e6 e5       	ldi	r30, 0x56	; 86
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	de 01       	movw	r26, r28
 78c:	11 96       	adiw	r26, 0x01	; 1
 78e:	01 90       	ld	r0, Z+
 790:	0d 92       	st	X+, r0
 792:	8a 95       	dec	r24
 794:	e1 f7       	brne	.-8      	; 0x78e <main+0xa2>
	transmit_string_UART0(array);
 796:	ce 01       	movw	r24, r28
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	0e 94 94 04 	call	0x928	; 0x928 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
 79e:	85 e2       	ldi	r24, 0x25	; 37
 7a0:	e1 e0       	ldi	r30, 0x01	; 1
 7a2:	f1 e0       	ldi	r31, 0x01	; 1
 7a4:	de 01       	movw	r26, r28
 7a6:	99 96       	adiw	r26, 0x29	; 41
 7a8:	01 90       	ld	r0, Z+
 7aa:	0d 92       	st	X+, r0
 7ac:	8a 95       	dec	r24
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0xbc>
	sprintf(array2,"\rData read from EEPROM :\t");
 7b0:	8a e1       	ldi	r24, 0x1A	; 26
 7b2:	e6 e2       	ldi	r30, 0x26	; 38
 7b4:	f1 e0       	ldi	r31, 0x01	; 1
 7b6:	de 01       	movw	r26, r28
 7b8:	af 5a       	subi	r26, 0xAF	; 175
 7ba:	bf 4f       	sbci	r27, 0xFF	; 255
 7bc:	01 90       	ld	r0, Z+
 7be:	0d 92       	st	X+, r0
 7c0:	8a 95       	dec	r24
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <main+0xd0>
		
/************************************************************/
	char buffer[100];
	uint8_t frame[256], i=0;
	///EEPROM function to initialise I/O
	ioinit();
 7c4:	0e 94 67 00 	call	0xce	; 0xce <ioinit>
	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
	sprintf(array2,"\rData read from EEPROM :\t");
		
/************************************************************/
	char buffer[100];
	uint8_t frame[256], i=0;
 7c8:	f1 2c       	mov	r15, r1
	///EEPROM function to initialise I/O
	ioinit();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 7ca:	0f 2e       	mov	r0, r31
 7cc:	fa e0       	ldi	r31, 0x0A	; 10
 7ce:	3f 2e       	mov	r3, r31
 7d0:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 7d2:	0f 2e       	mov	r0, r31
 7d4:	f5 e0       	ldi	r31, 0x05	; 5
 7d6:	ef 2e       	mov	r14, r31
 7d8:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
	_delay_ms(500);
	
	write_addr = HALF_ADDR - (HALF_ADDR % EEP_FRAME_SIZE);
	write_addr -= EEP_FRAME_SIZE;
 7da:	0f 2e       	mov	r0, r31
 7dc:	f6 ed       	ldi	r31, 0xD6	; 214
 7de:	4f 2e       	mov	r4, r31
 7e0:	55 24       	eor	r5, r5
 7e2:	5a 94       	dec	r5
 7e4:	61 2c       	mov	r6, r1
 7e6:	71 2c       	mov	r7, r1
 7e8:	f0 2d       	mov	r31, r0
	sprintf(buffer,"Data written %d times",i);
 7ea:	0f 2e       	mov	r0, r31
 7ec:	f0 e4       	ldi	r31, 0x40	; 64
 7ee:	cf 2e       	mov	r12, r31
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	df 2e       	mov	r13, r31
 7f4:	f0 2d       	mov	r31, r0
 7f6:	8e 01       	movw	r16, r28
 7f8:	07 58       	subi	r16, 0x87	; 135
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
	i++;
	write_frame_to_eeprom((uint8_t *)buffer);
	write_frame_to_eeprom((uint8_t *)buffer);
  
	read_addr = HALF_ADDR;
 7fc:	81 2c       	mov	r8, r1
 7fe:	91 2c       	mov	r9, r1
 800:	54 01       	movw	r10, r8
 802:	a3 94       	inc	r10
	///EEPROM function to initialise I/O
	ioinit();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 804:	3b ba       	out	0x1b, r3	; 27
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	94 e3       	ldi	r25, 0x34	; 52
 80a:	2c e0       	ldi	r18, 0x0C	; 12
 80c:	81 50       	subi	r24, 0x01	; 1
 80e:	90 40       	sbci	r25, 0x00	; 0
 810:	20 40       	sbci	r18, 0x00	; 0
 812:	e1 f7       	brne	.-8      	; 0x80c <main+0x120>
 814:	00 c0       	rjmp	.+0      	; 0x816 <main+0x12a>
 816:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 818:	eb ba       	out	0x1b, r14	; 27
 81a:	3f ef       	ldi	r19, 0xFF	; 255
 81c:	84 e3       	ldi	r24, 0x34	; 52
 81e:	9c e0       	ldi	r25, 0x0C	; 12
 820:	31 50       	subi	r19, 0x01	; 1
 822:	80 40       	sbci	r24, 0x00	; 0
 824:	90 40       	sbci	r25, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <main+0x134>
 828:	00 c0       	rjmp	.+0      	; 0x82a <main+0x13e>
 82a:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 82c:	8d e0       	ldi	r24, 0x0D	; 13
 82e:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('\r');
 832:	8d e0       	ldi	r24, 0x0D	; 13
 834:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('H');
 838:	88 e4       	ldi	r24, 0x48	; 72
 83a:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	transmit_UART0('i');
 83e:	89 e6       	ldi	r24, 0x69	; 105
 840:	0e 94 82 04 	call	0x904	; 0x904 <transmit_UART0>
	
	transmit_string_UART0(array1);
 844:	ce 01       	movw	r24, r28
 846:	89 96       	adiw	r24, 0x29	; 41
 848:	0e 94 94 04 	call	0x928	; 0x928 <transmit_string_UART0>
	transmit_string_UART0(array2);
 84c:	ce 01       	movw	r24, r28
 84e:	8f 5a       	subi	r24, 0xAF	; 175
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	0e 94 94 04 	call	0x928	; 0x928 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 856:	3b ba       	out	0x1b, r3	; 27
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	34 e3       	ldi	r19, 0x34	; 52
 85c:	8c e0       	ldi	r24, 0x0C	; 12
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	30 40       	sbci	r19, 0x00	; 0
 862:	80 40       	sbci	r24, 0x00	; 0
 864:	e1 f7       	brne	.-8      	; 0x85e <main+0x172>
 866:	00 c0       	rjmp	.+0      	; 0x868 <main+0x17c>
 868:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 86a:	eb ba       	out	0x1b, r14	; 27
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	24 e3       	ldi	r18, 0x34	; 52
 870:	3c e0       	ldi	r19, 0x0C	; 12
 872:	91 50       	subi	r25, 0x01	; 1
 874:	20 40       	sbci	r18, 0x00	; 0
 876:	30 40       	sbci	r19, 0x00	; 0
 878:	e1 f7       	brne	.-8      	; 0x872 <main+0x186>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <main+0x190>
 87c:	00 00       	nop
	_delay_ms(500);
	
	write_addr = HALF_ADDR - (HALF_ADDR % EEP_FRAME_SIZE);
	write_addr -= EEP_FRAME_SIZE;
 87e:	40 92 87 01 	sts	0x0187, r4	; 0x800187 <write_addr>
 882:	50 92 88 01 	sts	0x0188, r5	; 0x800188 <write_addr+0x1>
 886:	60 92 89 01 	sts	0x0189, r6	; 0x800189 <write_addr+0x2>
 88a:	70 92 8a 01 	sts	0x018A, r7	; 0x80018a <write_addr+0x3>
	sprintf(buffer,"Data written %d times",i);
 88e:	1f 92       	push	r1
 890:	ff 92       	push	r15
 892:	df 92       	push	r13
 894:	cf 92       	push	r12
 896:	1f 93       	push	r17
 898:	0f 93       	push	r16
 89a:	0e 94 a0 04 	call	0x940	; 0x940 <sprintf>
	i++;
 89e:	f3 94       	inc	r15
	write_frame_to_eeprom((uint8_t *)buffer);
 8a0:	c8 01       	movw	r24, r16
 8a2:	0e 94 be 02 	call	0x57c	; 0x57c <write_frame_to_eeprom>
	write_frame_to_eeprom((uint8_t *)buffer);
 8a6:	c8 01       	movw	r24, r16
 8a8:	0e 94 be 02 	call	0x57c	; 0x57c <write_frame_to_eeprom>
  
	read_addr = HALF_ADDR;
 8ac:	80 92 8b 01 	sts	0x018B, r8	; 0x80018b <read_addr>
 8b0:	90 92 8c 01 	sts	0x018C, r9	; 0x80018c <read_addr+0x1>
 8b4:	a0 92 8d 01 	sts	0x018D, r10	; 0x80018d <read_addr+0x2>
 8b8:	b0 92 8e 01 	sts	0x018E, r11	; 0x80018e <read_addr+0x3>
	read_frame_from_eeprom(frame);
 8bc:	ce 01       	movw	r24, r28
 8be:	83 52       	subi	r24, 0x23	; 35
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	0e 94 2b 03 	call	0x656	; 0x656 <read_frame_from_eeprom>
	send_preflight((char *)frame, EEP_FRAME_SIZE);
 8c6:	66 e1       	ldi	r22, 0x16	; 22
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	ce 01       	movw	r24, r28
 8cc:	83 52       	subi	r24, 0x23	; 35
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	0e 94 86 04 	call	0x90c	; 0x90c <send_preflight>
 
/************************************************************/
	}
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	91 cf       	rjmp	.-222    	; 0x804 <main+0x118>

000008e2 <init_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
  return UDR0;
}
 8e2:	1b b8       	out	0x0b, r1	; 11
 8e4:	1a b8       	out	0x0a, r1	; 10
 8e6:	e5 e9       	ldi	r30, 0x95	; 149
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	10 82       	st	Z, r1
 8ec:	59 9a       	sbi	0x0b, 1	; 11
 8ee:	8a b1       	in	r24, 0x0a	; 10
 8f0:	88 61       	ori	r24, 0x18	; 24
 8f2:	8a b9       	out	0x0a, r24	; 10
 8f4:	80 81       	ld	r24, Z
 8f6:	8e 60       	ori	r24, 0x0E	; 14
 8f8:	80 83       	st	Z, r24
 8fa:	87 e6       	ldi	r24, 0x67	; 103
 8fc:	89 b9       	out	0x09, r24	; 9
 8fe:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 902:	08 95       	ret

00000904 <transmit_UART0>:
 904:	5d 9b       	sbis	0x0b, 5	; 11
 906:	fe cf       	rjmp	.-4      	; 0x904 <transmit_UART0>
 908:	8c b9       	out	0x0c, r24	; 12
 90a:	08 95       	ret

0000090c <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 90c:	61 15       	cp	r22, r1
 90e:	71 05       	cpc	r23, r1
 910:	51 f0       	breq	.+20     	; 0x926 <send_preflight+0x1a>
 912:	fc 01       	movw	r30, r24
 914:	68 0f       	add	r22, r24
 916:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 918:	5d 9b       	sbis	0x0b, 5	; 11
 91a:	fe cf       	rjmp	.-4      	; 0x918 <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
 91c:	91 91       	ld	r25, Z+
 91e:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 920:	e6 17       	cp	r30, r22
 922:	f7 07       	cpc	r31, r23
 924:	c9 f7       	brne	.-14     	; 0x918 <send_preflight+0xc>
 926:	08 95       	ret

00000928 <transmit_string_UART0>:
    i++;
  }
}

void transmit_string_UART0(char *buffer)
{
 928:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 92a:	90 81       	ld	r25, Z
 92c:	99 23       	and	r25, r25
 92e:	39 f0       	breq	.+14     	; 0x93e <transmit_string_UART0+0x16>
 930:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 932:	5d 9b       	sbis	0x0b, 5	; 11
 934:	fe cf       	rjmp	.-4      	; 0x932 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 936:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 938:	91 91       	ld	r25, Z+
 93a:	91 11       	cpse	r25, r1
 93c:	fa cf       	rjmp	.-12     	; 0x932 <transmit_string_UART0+0xa>
 93e:	08 95       	ret

00000940 <sprintf>:
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	2e 97       	sbiw	r28, 0x0e	; 14
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
 958:	0d 89       	ldd	r16, Y+21	; 0x15
 95a:	1e 89       	ldd	r17, Y+22	; 0x16
 95c:	86 e0       	ldi	r24, 0x06	; 6
 95e:	8c 83       	std	Y+4, r24	; 0x04
 960:	1a 83       	std	Y+2, r17	; 0x02
 962:	09 83       	std	Y+1, r16	; 0x01
 964:	8f ef       	ldi	r24, 0xFF	; 255
 966:	9f e7       	ldi	r25, 0x7F	; 127
 968:	9e 83       	std	Y+6, r25	; 0x06
 96a:	8d 83       	std	Y+5, r24	; 0x05
 96c:	ae 01       	movw	r20, r28
 96e:	47 5e       	subi	r20, 0xE7	; 231
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	6f 89       	ldd	r22, Y+23	; 0x17
 974:	78 8d       	ldd	r23, Y+24	; 0x18
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vfprintf>
 97e:	2f 81       	ldd	r18, Y+7	; 0x07
 980:	38 85       	ldd	r19, Y+8	; 0x08
 982:	f8 01       	movw	r30, r16
 984:	e2 0f       	add	r30, r18
 986:	f3 1f       	adc	r31, r19
 988:	10 82       	st	Z, r1
 98a:	2e 96       	adiw	r28, 0x0e	; 14
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	de bf       	out	0x3e, r29	; 62
 992:	0f be       	out	0x3f, r0	; 63
 994:	cd bf       	out	0x3d, r28	; 61
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	1f 91       	pop	r17
 99c:	0f 91       	pop	r16
 99e:	08 95       	ret

000009a0 <vfprintf>:
 9a0:	2f 92       	push	r2
 9a2:	3f 92       	push	r3
 9a4:	4f 92       	push	r4
 9a6:	5f 92       	push	r5
 9a8:	6f 92       	push	r6
 9aa:	7f 92       	push	r7
 9ac:	8f 92       	push	r8
 9ae:	9f 92       	push	r9
 9b0:	af 92       	push	r10
 9b2:	bf 92       	push	r11
 9b4:	cf 92       	push	r12
 9b6:	df 92       	push	r13
 9b8:	ef 92       	push	r14
 9ba:	ff 92       	push	r15
 9bc:	0f 93       	push	r16
 9be:	1f 93       	push	r17
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
 9c8:	2c 97       	sbiw	r28, 0x0c	; 12
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	7c 01       	movw	r14, r24
 9d6:	6b 01       	movw	r12, r22
 9d8:	8a 01       	movw	r16, r20
 9da:	fc 01       	movw	r30, r24
 9dc:	17 82       	std	Z+7, r1	; 0x07
 9de:	16 82       	std	Z+6, r1	; 0x06
 9e0:	83 81       	ldd	r24, Z+3	; 0x03
 9e2:	81 ff       	sbrs	r24, 1
 9e4:	bd c1       	rjmp	.+890    	; 0xd60 <vfprintf+0x3c0>
 9e6:	ce 01       	movw	r24, r28
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	4c 01       	movw	r8, r24
 9ec:	f7 01       	movw	r30, r14
 9ee:	93 81       	ldd	r25, Z+3	; 0x03
 9f0:	f6 01       	movw	r30, r12
 9f2:	93 fd       	sbrc	r25, 3
 9f4:	85 91       	lpm	r24, Z+
 9f6:	93 ff       	sbrs	r25, 3
 9f8:	81 91       	ld	r24, Z+
 9fa:	6f 01       	movw	r12, r30
 9fc:	88 23       	and	r24, r24
 9fe:	09 f4       	brne	.+2      	; 0xa02 <vfprintf+0x62>
 a00:	ab c1       	rjmp	.+854    	; 0xd58 <vfprintf+0x3b8>
 a02:	85 32       	cpi	r24, 0x25	; 37
 a04:	39 f4       	brne	.+14     	; 0xa14 <vfprintf+0x74>
 a06:	93 fd       	sbrc	r25, 3
 a08:	85 91       	lpm	r24, Z+
 a0a:	93 ff       	sbrs	r25, 3
 a0c:	81 91       	ld	r24, Z+
 a0e:	6f 01       	movw	r12, r30
 a10:	85 32       	cpi	r24, 0x25	; 37
 a12:	29 f4       	brne	.+10     	; 0xa1e <vfprintf+0x7e>
 a14:	b7 01       	movw	r22, r14
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 a1c:	e7 cf       	rjmp	.-50     	; 0x9ec <vfprintf+0x4c>
 a1e:	51 2c       	mov	r5, r1
 a20:	31 2c       	mov	r3, r1
 a22:	20 e0       	ldi	r18, 0x00	; 0
 a24:	20 32       	cpi	r18, 0x20	; 32
 a26:	a0 f4       	brcc	.+40     	; 0xa50 <vfprintf+0xb0>
 a28:	8b 32       	cpi	r24, 0x2B	; 43
 a2a:	69 f0       	breq	.+26     	; 0xa46 <vfprintf+0xa6>
 a2c:	30 f4       	brcc	.+12     	; 0xa3a <vfprintf+0x9a>
 a2e:	80 32       	cpi	r24, 0x20	; 32
 a30:	59 f0       	breq	.+22     	; 0xa48 <vfprintf+0xa8>
 a32:	83 32       	cpi	r24, 0x23	; 35
 a34:	69 f4       	brne	.+26     	; 0xa50 <vfprintf+0xb0>
 a36:	20 61       	ori	r18, 0x10	; 16
 a38:	2c c0       	rjmp	.+88     	; 0xa92 <vfprintf+0xf2>
 a3a:	8d 32       	cpi	r24, 0x2D	; 45
 a3c:	39 f0       	breq	.+14     	; 0xa4c <vfprintf+0xac>
 a3e:	80 33       	cpi	r24, 0x30	; 48
 a40:	39 f4       	brne	.+14     	; 0xa50 <vfprintf+0xb0>
 a42:	21 60       	ori	r18, 0x01	; 1
 a44:	26 c0       	rjmp	.+76     	; 0xa92 <vfprintf+0xf2>
 a46:	22 60       	ori	r18, 0x02	; 2
 a48:	24 60       	ori	r18, 0x04	; 4
 a4a:	23 c0       	rjmp	.+70     	; 0xa92 <vfprintf+0xf2>
 a4c:	28 60       	ori	r18, 0x08	; 8
 a4e:	21 c0       	rjmp	.+66     	; 0xa92 <vfprintf+0xf2>
 a50:	27 fd       	sbrc	r18, 7
 a52:	27 c0       	rjmp	.+78     	; 0xaa2 <vfprintf+0x102>
 a54:	30 ed       	ldi	r19, 0xD0	; 208
 a56:	38 0f       	add	r19, r24
 a58:	3a 30       	cpi	r19, 0x0A	; 10
 a5a:	78 f4       	brcc	.+30     	; 0xa7a <vfprintf+0xda>
 a5c:	26 ff       	sbrs	r18, 6
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0xcc>
 a60:	fa e0       	ldi	r31, 0x0A	; 10
 a62:	5f 9e       	mul	r5, r31
 a64:	30 0d       	add	r19, r0
 a66:	11 24       	eor	r1, r1
 a68:	53 2e       	mov	r5, r19
 a6a:	13 c0       	rjmp	.+38     	; 0xa92 <vfprintf+0xf2>
 a6c:	8a e0       	ldi	r24, 0x0A	; 10
 a6e:	38 9e       	mul	r3, r24
 a70:	30 0d       	add	r19, r0
 a72:	11 24       	eor	r1, r1
 a74:	33 2e       	mov	r3, r19
 a76:	20 62       	ori	r18, 0x20	; 32
 a78:	0c c0       	rjmp	.+24     	; 0xa92 <vfprintf+0xf2>
 a7a:	8e 32       	cpi	r24, 0x2E	; 46
 a7c:	21 f4       	brne	.+8      	; 0xa86 <vfprintf+0xe6>
 a7e:	26 fd       	sbrc	r18, 6
 a80:	6b c1       	rjmp	.+726    	; 0xd58 <vfprintf+0x3b8>
 a82:	20 64       	ori	r18, 0x40	; 64
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <vfprintf+0xf2>
 a86:	8c 36       	cpi	r24, 0x6C	; 108
 a88:	11 f4       	brne	.+4      	; 0xa8e <vfprintf+0xee>
 a8a:	20 68       	ori	r18, 0x80	; 128
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <vfprintf+0xf2>
 a8e:	88 36       	cpi	r24, 0x68	; 104
 a90:	41 f4       	brne	.+16     	; 0xaa2 <vfprintf+0x102>
 a92:	f6 01       	movw	r30, r12
 a94:	93 fd       	sbrc	r25, 3
 a96:	85 91       	lpm	r24, Z+
 a98:	93 ff       	sbrs	r25, 3
 a9a:	81 91       	ld	r24, Z+
 a9c:	6f 01       	movw	r12, r30
 a9e:	81 11       	cpse	r24, r1
 aa0:	c1 cf       	rjmp	.-126    	; 0xa24 <vfprintf+0x84>
 aa2:	98 2f       	mov	r25, r24
 aa4:	9f 7d       	andi	r25, 0xDF	; 223
 aa6:	95 54       	subi	r25, 0x45	; 69
 aa8:	93 30       	cpi	r25, 0x03	; 3
 aaa:	28 f4       	brcc	.+10     	; 0xab6 <vfprintf+0x116>
 aac:	0c 5f       	subi	r16, 0xFC	; 252
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	ff e3       	ldi	r31, 0x3F	; 63
 ab2:	f9 83       	std	Y+1, r31	; 0x01
 ab4:	0d c0       	rjmp	.+26     	; 0xad0 <vfprintf+0x130>
 ab6:	83 36       	cpi	r24, 0x63	; 99
 ab8:	31 f0       	breq	.+12     	; 0xac6 <vfprintf+0x126>
 aba:	83 37       	cpi	r24, 0x73	; 115
 abc:	71 f0       	breq	.+28     	; 0xada <vfprintf+0x13a>
 abe:	83 35       	cpi	r24, 0x53	; 83
 ac0:	09 f0       	breq	.+2      	; 0xac4 <vfprintf+0x124>
 ac2:	5b c0       	rjmp	.+182    	; 0xb7a <vfprintf+0x1da>
 ac4:	22 c0       	rjmp	.+68     	; 0xb0a <vfprintf+0x16a>
 ac6:	f8 01       	movw	r30, r16
 ac8:	80 81       	ld	r24, Z
 aca:	89 83       	std	Y+1, r24	; 0x01
 acc:	0e 5f       	subi	r16, 0xFE	; 254
 ace:	1f 4f       	sbci	r17, 0xFF	; 255
 ad0:	44 24       	eor	r4, r4
 ad2:	43 94       	inc	r4
 ad4:	51 2c       	mov	r5, r1
 ad6:	54 01       	movw	r10, r8
 ad8:	15 c0       	rjmp	.+42     	; 0xb04 <vfprintf+0x164>
 ada:	38 01       	movw	r6, r16
 adc:	f2 e0       	ldi	r31, 0x02	; 2
 ade:	6f 0e       	add	r6, r31
 ae0:	71 1c       	adc	r7, r1
 ae2:	f8 01       	movw	r30, r16
 ae4:	a0 80       	ld	r10, Z
 ae6:	b1 80       	ldd	r11, Z+1	; 0x01
 ae8:	26 ff       	sbrs	r18, 6
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <vfprintf+0x152>
 aec:	65 2d       	mov	r22, r5
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <vfprintf+0x156>
 af2:	6f ef       	ldi	r22, 0xFF	; 255
 af4:	7f ef       	ldi	r23, 0xFF	; 255
 af6:	c5 01       	movw	r24, r10
 af8:	2c 87       	std	Y+12, r18	; 0x0c
 afa:	0e 94 d6 06 	call	0xdac	; 0xdac <strnlen>
 afe:	2c 01       	movw	r4, r24
 b00:	83 01       	movw	r16, r6
 b02:	2c 85       	ldd	r18, Y+12	; 0x0c
 b04:	2f 77       	andi	r18, 0x7F	; 127
 b06:	22 2e       	mov	r2, r18
 b08:	17 c0       	rjmp	.+46     	; 0xb38 <vfprintf+0x198>
 b0a:	38 01       	movw	r6, r16
 b0c:	f2 e0       	ldi	r31, 0x02	; 2
 b0e:	6f 0e       	add	r6, r31
 b10:	71 1c       	adc	r7, r1
 b12:	f8 01       	movw	r30, r16
 b14:	a0 80       	ld	r10, Z
 b16:	b1 80       	ldd	r11, Z+1	; 0x01
 b18:	26 ff       	sbrs	r18, 6
 b1a:	03 c0       	rjmp	.+6      	; 0xb22 <vfprintf+0x182>
 b1c:	65 2d       	mov	r22, r5
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x186>
 b22:	6f ef       	ldi	r22, 0xFF	; 255
 b24:	7f ef       	ldi	r23, 0xFF	; 255
 b26:	c5 01       	movw	r24, r10
 b28:	2c 87       	std	Y+12, r18	; 0x0c
 b2a:	0e 94 cb 06 	call	0xd96	; 0xd96 <strnlen_P>
 b2e:	2c 01       	movw	r4, r24
 b30:	2c 85       	ldd	r18, Y+12	; 0x0c
 b32:	20 68       	ori	r18, 0x80	; 128
 b34:	22 2e       	mov	r2, r18
 b36:	83 01       	movw	r16, r6
 b38:	23 fc       	sbrc	r2, 3
 b3a:	1b c0       	rjmp	.+54     	; 0xb72 <vfprintf+0x1d2>
 b3c:	83 2d       	mov	r24, r3
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	48 16       	cp	r4, r24
 b42:	59 06       	cpc	r5, r25
 b44:	b0 f4       	brcc	.+44     	; 0xb72 <vfprintf+0x1d2>
 b46:	b7 01       	movw	r22, r14
 b48:	80 e2       	ldi	r24, 0x20	; 32
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 b50:	3a 94       	dec	r3
 b52:	f4 cf       	rjmp	.-24     	; 0xb3c <vfprintf+0x19c>
 b54:	f5 01       	movw	r30, r10
 b56:	27 fc       	sbrc	r2, 7
 b58:	85 91       	lpm	r24, Z+
 b5a:	27 fe       	sbrs	r2, 7
 b5c:	81 91       	ld	r24, Z+
 b5e:	5f 01       	movw	r10, r30
 b60:	b7 01       	movw	r22, r14
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 b68:	31 10       	cpse	r3, r1
 b6a:	3a 94       	dec	r3
 b6c:	f1 e0       	ldi	r31, 0x01	; 1
 b6e:	4f 1a       	sub	r4, r31
 b70:	51 08       	sbc	r5, r1
 b72:	41 14       	cp	r4, r1
 b74:	51 04       	cpc	r5, r1
 b76:	71 f7       	brne	.-36     	; 0xb54 <vfprintf+0x1b4>
 b78:	e5 c0       	rjmp	.+458    	; 0xd44 <vfprintf+0x3a4>
 b7a:	84 36       	cpi	r24, 0x64	; 100
 b7c:	11 f0       	breq	.+4      	; 0xb82 <vfprintf+0x1e2>
 b7e:	89 36       	cpi	r24, 0x69	; 105
 b80:	39 f5       	brne	.+78     	; 0xbd0 <vfprintf+0x230>
 b82:	f8 01       	movw	r30, r16
 b84:	27 ff       	sbrs	r18, 7
 b86:	07 c0       	rjmp	.+14     	; 0xb96 <vfprintf+0x1f6>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	82 81       	ldd	r24, Z+2	; 0x02
 b8e:	93 81       	ldd	r25, Z+3	; 0x03
 b90:	0c 5f       	subi	r16, 0xFC	; 252
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <vfprintf+0x206>
 b96:	60 81       	ld	r22, Z
 b98:	71 81       	ldd	r23, Z+1	; 0x01
 b9a:	07 2e       	mov	r0, r23
 b9c:	00 0c       	add	r0, r0
 b9e:	88 0b       	sbc	r24, r24
 ba0:	99 0b       	sbc	r25, r25
 ba2:	0e 5f       	subi	r16, 0xFE	; 254
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	2f 76       	andi	r18, 0x6F	; 111
 ba8:	72 2e       	mov	r7, r18
 baa:	97 ff       	sbrs	r25, 7
 bac:	09 c0       	rjmp	.+18     	; 0xbc0 <vfprintf+0x220>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	20 68       	ori	r18, 0x80	; 128
 bbe:	72 2e       	mov	r7, r18
 bc0:	2a e0       	ldi	r18, 0x0A	; 10
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	a4 01       	movw	r20, r8
 bc6:	0e 94 19 07 	call	0xe32	; 0xe32 <__ultoa_invert>
 bca:	a8 2e       	mov	r10, r24
 bcc:	a8 18       	sub	r10, r8
 bce:	44 c0       	rjmp	.+136    	; 0xc58 <vfprintf+0x2b8>
 bd0:	85 37       	cpi	r24, 0x75	; 117
 bd2:	29 f4       	brne	.+10     	; 0xbde <vfprintf+0x23e>
 bd4:	2f 7e       	andi	r18, 0xEF	; 239
 bd6:	b2 2e       	mov	r11, r18
 bd8:	2a e0       	ldi	r18, 0x0A	; 10
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	25 c0       	rjmp	.+74     	; 0xc28 <vfprintf+0x288>
 bde:	f2 2f       	mov	r31, r18
 be0:	f9 7f       	andi	r31, 0xF9	; 249
 be2:	bf 2e       	mov	r11, r31
 be4:	8f 36       	cpi	r24, 0x6F	; 111
 be6:	c1 f0       	breq	.+48     	; 0xc18 <vfprintf+0x278>
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <vfprintf+0x250>
 bea:	88 35       	cpi	r24, 0x58	; 88
 bec:	79 f0       	breq	.+30     	; 0xc0c <vfprintf+0x26c>
 bee:	b4 c0       	rjmp	.+360    	; 0xd58 <vfprintf+0x3b8>
 bf0:	80 37       	cpi	r24, 0x70	; 112
 bf2:	19 f0       	breq	.+6      	; 0xbfa <vfprintf+0x25a>
 bf4:	88 37       	cpi	r24, 0x78	; 120
 bf6:	21 f0       	breq	.+8      	; 0xc00 <vfprintf+0x260>
 bf8:	af c0       	rjmp	.+350    	; 0xd58 <vfprintf+0x3b8>
 bfa:	2f 2f       	mov	r18, r31
 bfc:	20 61       	ori	r18, 0x10	; 16
 bfe:	b2 2e       	mov	r11, r18
 c00:	b4 fe       	sbrs	r11, 4
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <vfprintf+0x27e>
 c04:	8b 2d       	mov	r24, r11
 c06:	84 60       	ori	r24, 0x04	; 4
 c08:	b8 2e       	mov	r11, r24
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <vfprintf+0x27e>
 c0c:	24 ff       	sbrs	r18, 4
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <vfprintf+0x284>
 c10:	9f 2f       	mov	r25, r31
 c12:	96 60       	ori	r25, 0x06	; 6
 c14:	b9 2e       	mov	r11, r25
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x284>
 c18:	28 e0       	ldi	r18, 0x08	; 8
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x288>
 c1e:	20 e1       	ldi	r18, 0x10	; 16
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x288>
 c24:	20 e1       	ldi	r18, 0x10	; 16
 c26:	32 e0       	ldi	r19, 0x02	; 2
 c28:	f8 01       	movw	r30, r16
 c2a:	b7 fe       	sbrs	r11, 7
 c2c:	07 c0       	rjmp	.+14     	; 0xc3c <vfprintf+0x29c>
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	82 81       	ldd	r24, Z+2	; 0x02
 c34:	93 81       	ldd	r25, Z+3	; 0x03
 c36:	0c 5f       	subi	r16, 0xFC	; 252
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x2a8>
 c3c:	60 81       	ld	r22, Z
 c3e:	71 81       	ldd	r23, Z+1	; 0x01
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 5f       	subi	r16, 0xFE	; 254
 c46:	1f 4f       	sbci	r17, 0xFF	; 255
 c48:	a4 01       	movw	r20, r8
 c4a:	0e 94 19 07 	call	0xe32	; 0xe32 <__ultoa_invert>
 c4e:	a8 2e       	mov	r10, r24
 c50:	a8 18       	sub	r10, r8
 c52:	fb 2d       	mov	r31, r11
 c54:	ff 77       	andi	r31, 0x7F	; 127
 c56:	7f 2e       	mov	r7, r31
 c58:	76 fe       	sbrs	r7, 6
 c5a:	0b c0       	rjmp	.+22     	; 0xc72 <vfprintf+0x2d2>
 c5c:	37 2d       	mov	r19, r7
 c5e:	3e 7f       	andi	r19, 0xFE	; 254
 c60:	a5 14       	cp	r10, r5
 c62:	50 f4       	brcc	.+20     	; 0xc78 <vfprintf+0x2d8>
 c64:	74 fe       	sbrs	r7, 4
 c66:	0a c0       	rjmp	.+20     	; 0xc7c <vfprintf+0x2dc>
 c68:	72 fc       	sbrc	r7, 2
 c6a:	08 c0       	rjmp	.+16     	; 0xc7c <vfprintf+0x2dc>
 c6c:	37 2d       	mov	r19, r7
 c6e:	3e 7e       	andi	r19, 0xEE	; 238
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <vfprintf+0x2dc>
 c72:	ba 2c       	mov	r11, r10
 c74:	37 2d       	mov	r19, r7
 c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x2de>
 c78:	ba 2c       	mov	r11, r10
 c7a:	01 c0       	rjmp	.+2      	; 0xc7e <vfprintf+0x2de>
 c7c:	b5 2c       	mov	r11, r5
 c7e:	34 ff       	sbrs	r19, 4
 c80:	0d c0       	rjmp	.+26     	; 0xc9c <vfprintf+0x2fc>
 c82:	fe 01       	movw	r30, r28
 c84:	ea 0d       	add	r30, r10
 c86:	f1 1d       	adc	r31, r1
 c88:	80 81       	ld	r24, Z
 c8a:	80 33       	cpi	r24, 0x30	; 48
 c8c:	11 f4       	brne	.+4      	; 0xc92 <vfprintf+0x2f2>
 c8e:	39 7e       	andi	r19, 0xE9	; 233
 c90:	09 c0       	rjmp	.+18     	; 0xca4 <vfprintf+0x304>
 c92:	32 ff       	sbrs	r19, 2
 c94:	06 c0       	rjmp	.+12     	; 0xca2 <vfprintf+0x302>
 c96:	b3 94       	inc	r11
 c98:	b3 94       	inc	r11
 c9a:	04 c0       	rjmp	.+8      	; 0xca4 <vfprintf+0x304>
 c9c:	83 2f       	mov	r24, r19
 c9e:	86 78       	andi	r24, 0x86	; 134
 ca0:	09 f0       	breq	.+2      	; 0xca4 <vfprintf+0x304>
 ca2:	b3 94       	inc	r11
 ca4:	33 fd       	sbrc	r19, 3
 ca6:	13 c0       	rjmp	.+38     	; 0xcce <vfprintf+0x32e>
 ca8:	30 ff       	sbrs	r19, 0
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0x318>
 cac:	5a 2c       	mov	r5, r10
 cae:	b3 14       	cp	r11, r3
 cb0:	18 f4       	brcc	.+6      	; 0xcb8 <vfprintf+0x318>
 cb2:	53 0c       	add	r5, r3
 cb4:	5b 18       	sub	r5, r11
 cb6:	b3 2c       	mov	r11, r3
 cb8:	b3 14       	cp	r11, r3
 cba:	68 f4       	brcc	.+26     	; 0xcd6 <vfprintf+0x336>
 cbc:	b7 01       	movw	r22, r14
 cbe:	80 e2       	ldi	r24, 0x20	; 32
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	3c 87       	std	Y+12, r19	; 0x0c
 cc4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 cc8:	b3 94       	inc	r11
 cca:	3c 85       	ldd	r19, Y+12	; 0x0c
 ccc:	f5 cf       	rjmp	.-22     	; 0xcb8 <vfprintf+0x318>
 cce:	b3 14       	cp	r11, r3
 cd0:	10 f4       	brcc	.+4      	; 0xcd6 <vfprintf+0x336>
 cd2:	3b 18       	sub	r3, r11
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vfprintf+0x338>
 cd6:	31 2c       	mov	r3, r1
 cd8:	34 ff       	sbrs	r19, 4
 cda:	12 c0       	rjmp	.+36     	; 0xd00 <vfprintf+0x360>
 cdc:	b7 01       	movw	r22, r14
 cde:	80 e3       	ldi	r24, 0x30	; 48
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	3c 87       	std	Y+12, r19	; 0x0c
 ce4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 ce8:	3c 85       	ldd	r19, Y+12	; 0x0c
 cea:	32 ff       	sbrs	r19, 2
 cec:	17 c0       	rjmp	.+46     	; 0xd1c <vfprintf+0x37c>
 cee:	31 fd       	sbrc	r19, 1
 cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <vfprintf+0x358>
 cf2:	88 e7       	ldi	r24, 0x78	; 120
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x35c>
 cf8:	88 e5       	ldi	r24, 0x58	; 88
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	b7 01       	movw	r22, r14
 cfe:	0c c0       	rjmp	.+24     	; 0xd18 <vfprintf+0x378>
 d00:	83 2f       	mov	r24, r19
 d02:	86 78       	andi	r24, 0x86	; 134
 d04:	59 f0       	breq	.+22     	; 0xd1c <vfprintf+0x37c>
 d06:	31 ff       	sbrs	r19, 1
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x36e>
 d0a:	8b e2       	ldi	r24, 0x2B	; 43
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <vfprintf+0x370>
 d0e:	80 e2       	ldi	r24, 0x20	; 32
 d10:	37 fd       	sbrc	r19, 7
 d12:	8d e2       	ldi	r24, 0x2D	; 45
 d14:	b7 01       	movw	r22, r14
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d1c:	a5 14       	cp	r10, r5
 d1e:	38 f4       	brcc	.+14     	; 0xd2e <vfprintf+0x38e>
 d20:	b7 01       	movw	r22, r14
 d22:	80 e3       	ldi	r24, 0x30	; 48
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d2a:	5a 94       	dec	r5
 d2c:	f7 cf       	rjmp	.-18     	; 0xd1c <vfprintf+0x37c>
 d2e:	aa 94       	dec	r10
 d30:	f4 01       	movw	r30, r8
 d32:	ea 0d       	add	r30, r10
 d34:	f1 1d       	adc	r31, r1
 d36:	80 81       	ld	r24, Z
 d38:	b7 01       	movw	r22, r14
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d40:	a1 10       	cpse	r10, r1
 d42:	f5 cf       	rjmp	.-22     	; 0xd2e <vfprintf+0x38e>
 d44:	33 20       	and	r3, r3
 d46:	09 f4       	brne	.+2      	; 0xd4a <vfprintf+0x3aa>
 d48:	51 ce       	rjmp	.-862    	; 0x9ec <vfprintf+0x4c>
 d4a:	b7 01       	movw	r22, r14
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d54:	3a 94       	dec	r3
 d56:	f6 cf       	rjmp	.-20     	; 0xd44 <vfprintf+0x3a4>
 d58:	f7 01       	movw	r30, r14
 d5a:	86 81       	ldd	r24, Z+6	; 0x06
 d5c:	97 81       	ldd	r25, Z+7	; 0x07
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x3c4>
 d60:	8f ef       	ldi	r24, 0xFF	; 255
 d62:	9f ef       	ldi	r25, 0xFF	; 255
 d64:	2c 96       	adiw	r28, 0x0c	; 12
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	f8 94       	cli
 d6a:	de bf       	out	0x3e, r29	; 62
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	cd bf       	out	0x3d, r28	; 61
 d70:	df 91       	pop	r29
 d72:	cf 91       	pop	r28
 d74:	1f 91       	pop	r17
 d76:	0f 91       	pop	r16
 d78:	ff 90       	pop	r15
 d7a:	ef 90       	pop	r14
 d7c:	df 90       	pop	r13
 d7e:	cf 90       	pop	r12
 d80:	bf 90       	pop	r11
 d82:	af 90       	pop	r10
 d84:	9f 90       	pop	r9
 d86:	8f 90       	pop	r8
 d88:	7f 90       	pop	r7
 d8a:	6f 90       	pop	r6
 d8c:	5f 90       	pop	r5
 d8e:	4f 90       	pop	r4
 d90:	3f 90       	pop	r3
 d92:	2f 90       	pop	r2
 d94:	08 95       	ret

00000d96 <strnlen_P>:
 d96:	fc 01       	movw	r30, r24
 d98:	05 90       	lpm	r0, Z+
 d9a:	61 50       	subi	r22, 0x01	; 1
 d9c:	70 40       	sbci	r23, 0x00	; 0
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen_P+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <strnlen>:
 dac:	fc 01       	movw	r30, r24
 dae:	61 50       	subi	r22, 0x01	; 1
 db0:	70 40       	sbci	r23, 0x00	; 0
 db2:	01 90       	ld	r0, Z+
 db4:	01 10       	cpse	r0, r1
 db6:	d8 f7       	brcc	.-10     	; 0xdae <strnlen+0x2>
 db8:	80 95       	com	r24
 dba:	90 95       	com	r25
 dbc:	8e 0f       	add	r24, r30
 dbe:	9f 1f       	adc	r25, r31
 dc0:	08 95       	ret

00000dc2 <fputc>:
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	fb 01       	movw	r30, r22
 dcc:	23 81       	ldd	r18, Z+3	; 0x03
 dce:	21 fd       	sbrc	r18, 1
 dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fputc+0x16>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	28 c0       	rjmp	.+80     	; 0xe28 <fputc+0x66>
 dd8:	22 ff       	sbrs	r18, 2
 dda:	16 c0       	rjmp	.+44     	; 0xe08 <fputc+0x46>
 ddc:	46 81       	ldd	r20, Z+6	; 0x06
 dde:	57 81       	ldd	r21, Z+7	; 0x07
 de0:	24 81       	ldd	r18, Z+4	; 0x04
 de2:	35 81       	ldd	r19, Z+5	; 0x05
 de4:	42 17       	cp	r20, r18
 de6:	53 07       	cpc	r21, r19
 de8:	44 f4       	brge	.+16     	; 0xdfa <fputc+0x38>
 dea:	a0 81       	ld	r26, Z
 dec:	b1 81       	ldd	r27, Z+1	; 0x01
 dee:	9d 01       	movw	r18, r26
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	31 83       	std	Z+1, r19	; 0x01
 df6:	20 83       	st	Z, r18
 df8:	8c 93       	st	X, r24
 dfa:	26 81       	ldd	r18, Z+6	; 0x06
 dfc:	37 81       	ldd	r19, Z+7	; 0x07
 dfe:	2f 5f       	subi	r18, 0xFF	; 255
 e00:	3f 4f       	sbci	r19, 0xFF	; 255
 e02:	37 83       	std	Z+7, r19	; 0x07
 e04:	26 83       	std	Z+6, r18	; 0x06
 e06:	10 c0       	rjmp	.+32     	; 0xe28 <fputc+0x66>
 e08:	eb 01       	movw	r28, r22
 e0a:	09 2f       	mov	r16, r25
 e0c:	18 2f       	mov	r17, r24
 e0e:	00 84       	ldd	r0, Z+8	; 0x08
 e10:	f1 85       	ldd	r31, Z+9	; 0x09
 e12:	e0 2d       	mov	r30, r0
 e14:	09 95       	icall
 e16:	89 2b       	or	r24, r25
 e18:	e1 f6       	brne	.-72     	; 0xdd2 <fputc+0x10>
 e1a:	8e 81       	ldd	r24, Y+6	; 0x06
 e1c:	9f 81       	ldd	r25, Y+7	; 0x07
 e1e:	01 96       	adiw	r24, 0x01	; 1
 e20:	9f 83       	std	Y+7, r25	; 0x07
 e22:	8e 83       	std	Y+6, r24	; 0x06
 e24:	81 2f       	mov	r24, r17
 e26:	90 2f       	mov	r25, r16
 e28:	df 91       	pop	r29
 e2a:	cf 91       	pop	r28
 e2c:	1f 91       	pop	r17
 e2e:	0f 91       	pop	r16
 e30:	08 95       	ret

00000e32 <__ultoa_invert>:
 e32:	fa 01       	movw	r30, r20
 e34:	aa 27       	eor	r26, r26
 e36:	28 30       	cpi	r18, 0x08	; 8
 e38:	51 f1       	breq	.+84     	; 0xe8e <__ultoa_invert+0x5c>
 e3a:	20 31       	cpi	r18, 0x10	; 16
 e3c:	81 f1       	breq	.+96     	; 0xe9e <__ultoa_invert+0x6c>
 e3e:	e8 94       	clt
 e40:	6f 93       	push	r22
 e42:	6e 7f       	andi	r22, 0xFE	; 254
 e44:	6e 5f       	subi	r22, 0xFE	; 254
 e46:	7f 4f       	sbci	r23, 0xFF	; 255
 e48:	8f 4f       	sbci	r24, 0xFF	; 255
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	af 4f       	sbci	r26, 0xFF	; 255
 e4e:	b1 e0       	ldi	r27, 0x01	; 1
 e50:	3e d0       	rcall	.+124    	; 0xece <__ultoa_invert+0x9c>
 e52:	b4 e0       	ldi	r27, 0x04	; 4
 e54:	3c d0       	rcall	.+120    	; 0xece <__ultoa_invert+0x9c>
 e56:	67 0f       	add	r22, r23
 e58:	78 1f       	adc	r23, r24
 e5a:	89 1f       	adc	r24, r25
 e5c:	9a 1f       	adc	r25, r26
 e5e:	a1 1d       	adc	r26, r1
 e60:	68 0f       	add	r22, r24
 e62:	79 1f       	adc	r23, r25
 e64:	8a 1f       	adc	r24, r26
 e66:	91 1d       	adc	r25, r1
 e68:	a1 1d       	adc	r26, r1
 e6a:	6a 0f       	add	r22, r26
 e6c:	71 1d       	adc	r23, r1
 e6e:	81 1d       	adc	r24, r1
 e70:	91 1d       	adc	r25, r1
 e72:	a1 1d       	adc	r26, r1
 e74:	20 d0       	rcall	.+64     	; 0xeb6 <__ultoa_invert+0x84>
 e76:	09 f4       	brne	.+2      	; 0xe7a <__ultoa_invert+0x48>
 e78:	68 94       	set
 e7a:	3f 91       	pop	r19
 e7c:	2a e0       	ldi	r18, 0x0A	; 10
 e7e:	26 9f       	mul	r18, r22
 e80:	11 24       	eor	r1, r1
 e82:	30 19       	sub	r19, r0
 e84:	30 5d       	subi	r19, 0xD0	; 208
 e86:	31 93       	st	Z+, r19
 e88:	de f6       	brtc	.-74     	; 0xe40 <__ultoa_invert+0xe>
 e8a:	cf 01       	movw	r24, r30
 e8c:	08 95       	ret
 e8e:	46 2f       	mov	r20, r22
 e90:	47 70       	andi	r20, 0x07	; 7
 e92:	40 5d       	subi	r20, 0xD0	; 208
 e94:	41 93       	st	Z+, r20
 e96:	b3 e0       	ldi	r27, 0x03	; 3
 e98:	0f d0       	rcall	.+30     	; 0xeb8 <__ultoa_invert+0x86>
 e9a:	c9 f7       	brne	.-14     	; 0xe8e <__ultoa_invert+0x5c>
 e9c:	f6 cf       	rjmp	.-20     	; 0xe8a <__ultoa_invert+0x58>
 e9e:	46 2f       	mov	r20, r22
 ea0:	4f 70       	andi	r20, 0x0F	; 15
 ea2:	40 5d       	subi	r20, 0xD0	; 208
 ea4:	4a 33       	cpi	r20, 0x3A	; 58
 ea6:	18 f0       	brcs	.+6      	; 0xeae <__ultoa_invert+0x7c>
 ea8:	49 5d       	subi	r20, 0xD9	; 217
 eaa:	31 fd       	sbrc	r19, 1
 eac:	40 52       	subi	r20, 0x20	; 32
 eae:	41 93       	st	Z+, r20
 eb0:	02 d0       	rcall	.+4      	; 0xeb6 <__ultoa_invert+0x84>
 eb2:	a9 f7       	brne	.-22     	; 0xe9e <__ultoa_invert+0x6c>
 eb4:	ea cf       	rjmp	.-44     	; 0xe8a <__ultoa_invert+0x58>
 eb6:	b4 e0       	ldi	r27, 0x04	; 4
 eb8:	a6 95       	lsr	r26
 eba:	97 95       	ror	r25
 ebc:	87 95       	ror	r24
 ebe:	77 95       	ror	r23
 ec0:	67 95       	ror	r22
 ec2:	ba 95       	dec	r27
 ec4:	c9 f7       	brne	.-14     	; 0xeb8 <__ultoa_invert+0x86>
 ec6:	00 97       	sbiw	r24, 0x00	; 0
 ec8:	61 05       	cpc	r22, r1
 eca:	71 05       	cpc	r23, r1
 ecc:	08 95       	ret
 ece:	9b 01       	movw	r18, r22
 ed0:	ac 01       	movw	r20, r24
 ed2:	0a 2e       	mov	r0, r26
 ed4:	06 94       	lsr	r0
 ed6:	57 95       	ror	r21
 ed8:	47 95       	ror	r20
 eda:	37 95       	ror	r19
 edc:	27 95       	ror	r18
 ede:	ba 95       	dec	r27
 ee0:	c9 f7       	brne	.-14     	; 0xed4 <__ultoa_invert+0xa2>
 ee2:	62 0f       	add	r22, r18
 ee4:	73 1f       	adc	r23, r19
 ee6:	84 1f       	adc	r24, r20
 ee8:	95 1f       	adc	r25, r21
 eea:	a0 1d       	adc	r26, r0
 eec:	08 95       	ret

00000eee <_exit>:
 eee:	f8 94       	cli

00000ef0 <__stop_program>:
 ef0:	ff cf       	rjmp	.-2      	; 0xef0 <__stop_program>
