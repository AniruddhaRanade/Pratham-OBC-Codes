
hMaster_Preflighttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00001d4c  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800344  00800344  00002024  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048f3  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001703  00000000  00000000  00006c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002096  00000000  00000000  00008392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  0000a428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009be  00000000  00000000  0000aae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015eb  00000000  00000000  0000b4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 33       	cpi	r26, 0x3E	; 62
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <main>
      c6:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size] = AX_FLAG;
  
}

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
      ce:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
    crcbit = crc & 0x01;
      d0:	26 2f       	mov	r18, r22
      d2:	21 70       	andi	r18, 0x01	; 1
    crc = crc >> 1;      
      d4:	76 95       	lsr	r23
      d6:	67 95       	ror	r22
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
  {
    bit = byte & 0x01;      
      d8:	38 2f       	mov	r19, r24
      da:	31 70       	andi	r19, 0x01	; 1
    crcbit = crc & 0x01;
    crc = crc >> 1;      
    if (bit != crcbit)
      dc:	32 17       	cp	r19, r18
      de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      crc ^= CRC_CCIT_REV;
      e0:	28 e0       	ldi	r18, 0x08	; 8
      e2:	62 27       	eor	r22, r18
      e4:	24 e8       	ldi	r18, 0x84	; 132
      e6:	72 27       	eor	r23, r18
    byte = byte >> 1;
      e8:	86 95       	lsr	r24
      ea:	91 50       	subi	r25, 0x01	; 1

uint16_t update_crc_16(uint8_t byte, uint16_t crc)
{
  uint8_t bit, crcbit, j;
  
  for (j = 0; j < 8; j++)
      ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
    if (bit != crcbit)
      crc ^= CRC_CCIT_REV;
    byte = byte >> 1;
  }
  return crc;
}
      ee:	cb 01       	movw	r24, r22
      f0:	08 95       	ret

000000f2 <WriteToCC1020Register>:
int init_CC1020_RX (void)
{  
	cbi(DDR_TRX, DIO);
	WakeUpCC1020ToRX(RXANALOG);													
	return SetupCC1020RX(RXANALOG,PA_POWER);
}
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	c8 2f       	mov	r28, r24
      f8:	d6 2f       	mov	r29, r22
      fa:	84 e0       	ldi	r24, 0x04	; 4
      fc:	0e 94 8c 09 	call	0x1318	; 0x1318 <init_SPI_trans>
     100:	8c 2f       	mov	r24, r28
     102:	88 0f       	add	r24, r24
     104:	81 60       	ori	r24, 0x01	; 1
     106:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
     10a:	8d 2f       	mov	r24, r29
     10c:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
     110:	0e 94 ae 09 	call	0x135c	; 0x135c <end_SPI>
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <ReadFromCC1020Register>:
     11a:	cf 93       	push	r28
     11c:	c8 2f       	mov	r28, r24
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	0e 94 8c 09 	call	0x1318	; 0x1318 <init_SPI_trans>
     124:	8c 2f       	mov	r24, r28
     126:	88 0f       	add	r24, r24
     128:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
     132:	c8 2f       	mov	r28, r24
     134:	0e 94 ae 09 	call	0x135c	; 0x135c <end_SPI>
     138:	8c 2f       	mov	r24, r28
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <SetupCC1020PD>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	6f e1       	ldi	r22, 0x1F	; 31
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     150:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <x>
     154:	1f 92       	push	r1
     156:	8f 93       	push	r24
     158:	88 e0       	ldi	r24, 0x08	; 8
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	ce e4       	ldi	r28, 0x4E	; 78
     162:	d3 e0       	ldi	r29, 0x03	; 3
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
     16c:	09 90       	ld	r0, Y+
     16e:	00 20       	and	r0, r0
     170:	e9 f7       	brne	.-6      	; 0x16c <SetupCC1020PD+0x2e>
     172:	21 97       	sbiw	r28, 0x01	; 1
     174:	be 01       	movw	r22, r28
     176:	6e 54       	subi	r22, 0x4E	; 78
     178:	73 40       	sbci	r23, 0x03	; 3
     17a:	8e e4       	ldi	r24, 0x4E	; 78
     17c:	93 e0       	ldi	r25, 0x03	; 3
     17e:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	8c e1       	ldi	r24, 0x1C	; 28
     186:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <ResetCC1020>:
     19c:	6e e0       	ldi	r22, 0x0E	; 14
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1a4:	6f e1       	ldi	r22, 0x1F	; 31
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1ac:	08 95       	ret

000001ae <SetupCC1020Allregisters>:
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	0b e7       	ldi	r16, 0x7B	; 123
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	c1 e0       	ldi	r28, 0x01	; 1
     1ba:	f8 01       	movw	r30, r16
     1bc:	61 91       	ld	r22, Z+
     1be:	8f 01       	movw	r16, r30
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1c6:	cf 5f       	subi	r28, 0xFF	; 255
     1c8:	c1 32       	cpi	r28, 0x21	; 33
     1ca:	b9 f7       	brne	.-18     	; 0x1ba <SetupCC1020Allregisters+0xc>
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	08 95       	ret

000001d4 <WakeUpCC1020ToRX>:
     1d4:	cf 93       	push	r28
     1d6:	c8 2f       	mov	r28, r24
     1d8:	6b e1       	ldi	r22, 0x1B	; 27
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1e0:	6c 2f       	mov	r22, r28
     1e2:	87 e1       	ldi	r24, 0x17	; 23
     1e4:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1e8:	8f e6       	ldi	r24, 0x6F	; 111
     1ea:	97 e1       	ldi	r25, 0x17	; 23
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <WakeUpCC1020ToRX+0x18>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <WakeUpCC1020ToRX+0x1e>
     1f2:	00 00       	nop
     1f4:	69 e1       	ldi	r22, 0x19	; 25
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1fc:	8b e2       	ldi	r24, 0x2B	; 43
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <WakeUpCC1020ToRX+0x2c>
     204:	00 c0       	rjmp	.+0      	; 0x206 <WakeUpCC1020ToRX+0x32>
     206:	00 00       	nop
     208:	61 e1       	ldi	r22, 0x11	; 17
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <WakeUpCC1020ToTX>:
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	c8 2f       	mov	r28, r24
     21a:	6b ed       	ldi	r22, 0xDB	; 219
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     222:	6c 2f       	mov	r22, r28
     224:	87 e1       	ldi	r24, 0x17	; 23
     226:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     22a:	8f e6       	ldi	r24, 0x6F	; 111
     22c:	97 e1       	ldi	r25, 0x17	; 23
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <WakeUpCC1020ToTX+0x1a>
     232:	00 c0       	rjmp	.+0      	; 0x234 <WakeUpCC1020ToTX+0x20>
     234:	00 00       	nop
     236:	69 ed       	ldi	r22, 0xD9	; 217
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     23e:	8b e2       	ldi	r24, 0x2B	; 43
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <WakeUpCC1020ToTX+0x2e>
     246:	00 c0       	rjmp	.+0      	; 0x248 <WakeUpCC1020ToTX+0x34>
     248:	00 00       	nop
     24a:	61 ed       	ldi	r22, 0xD1	; 209
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     258:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <x>
     25c:	1f 92       	push	r1
     25e:	8f 93       	push	r24
     260:	89 e0       	ldi	r24, 0x09	; 9
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	ce e4       	ldi	r28, 0x4E	; 78
     26a:	d3 e0       	ldi	r29, 0x03	; 3
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
     274:	09 90       	ld	r0, Y+
     276:	00 20       	and	r0, r0
     278:	e9 f7       	brne	.-6      	; 0x274 <WakeUpCC1020ToTX+0x60>
     27a:	21 97       	sbiw	r28, 0x01	; 1
     27c:	be 01       	movw	r22, r28
     27e:	6e 54       	subi	r22, 0x4E	; 78
     280:	73 40       	sbci	r23, 0x03	; 3
     282:	8e e4       	ldi	r24, 0x4E	; 78
     284:	93 e0       	ldi	r25, 0x03	; 3
     286:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <CalibrateCC1020>:
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	d8 2e       	mov	r13, r24
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	8c e1       	ldi	r24, 0x1C	; 28
     2b0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2b4:	04 e0       	ldi	r16, 0x04	; 4
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	ff e1       	ldi	r31, 0x1F	; 31
     2bc:	ef 2e       	mov	r14, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	f1 2c       	mov	r15, r1
     2c2:	64 eb       	ldi	r22, 0xB4	; 180
     2c4:	8b e1       	ldi	r24, 0x1B	; 27
     2c6:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2ca:	87 ec       	ldi	r24, 0xC7	; 199
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <CalibrateCC1020+0x32>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <CalibrateCC1020+0x38>
     2d4:	00 00       	nop
     2d6:	ce 2d       	mov	r28, r14
     2d8:	df 2d       	mov	r29, r15
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <CalibrateCC1020+0x4c>
     2dc:	8f ec       	ldi	r24, 0xCF	; 207
     2de:	97 e0       	ldi	r25, 0x07	; 7
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <CalibrateCC1020+0x44>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <CalibrateCC1020+0x4a>
     2e6:	00 00       	nop
     2e8:	80 e4       	ldi	r24, 0x40	; 64
     2ea:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     2ee:	88 23       	and	r24, r24
     2f0:	64 f0       	brlt	.+24     	; 0x30a <CalibrateCC1020+0x6e>
     2f2:	21 97       	sbiw	r28, 0x01	; 1
     2f4:	99 f7       	brne	.-26     	; 0x2dc <CalibrateCC1020+0x40>
     2f6:	ce 2d       	mov	r28, r14
     2f8:	df 2d       	mov	r29, r15
     2fa:	09 c0       	rjmp	.+18     	; 0x30e <CalibrateCC1020+0x72>
     2fc:	8f ec       	ldi	r24, 0xCF	; 207
     2fe:	97 e0       	ldi	r25, 0x07	; 7
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CalibrateCC1020+0x64>
     304:	00 c0       	rjmp	.+0      	; 0x306 <CalibrateCC1020+0x6a>
     306:	00 00       	nop
     308:	02 c0       	rjmp	.+4      	; 0x30e <CalibrateCC1020+0x72>
     30a:	ce 2d       	mov	r28, r14
     30c:	df 2d       	mov	r29, r15
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     314:	84 fd       	sbrc	r24, 4
     316:	02 c0       	rjmp	.+4      	; 0x31c <CalibrateCC1020+0x80>
     318:	21 97       	sbiw	r28, 0x01	; 1
     31a:	81 f7       	brne	.-32     	; 0x2fc <CalibrateCC1020+0x60>
     31c:	80 e4       	ldi	r24, 0x40	; 64
     31e:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     322:	84 fd       	sbrc	r24, 4
     324:	03 c0       	rjmp	.+6      	; 0x32c <CalibrateCC1020+0x90>
     326:	01 50       	subi	r16, 0x01	; 1
     328:	11 09       	sbc	r17, r1
     32a:	59 f6       	brne	.-106    	; 0x2c2 <CalibrateCC1020+0x26>
     32c:	6d 2d       	mov	r22, r13
     32e:	8c e1       	ldi	r24, 0x1C	; 28
     330:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     334:	80 e4       	ldi	r24, 0x40	; 64
     336:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     33a:	82 95       	swap	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	08 95       	ret

00000350 <init_CC1020>:
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	6e 97       	sbiw	r28, 0x1e	; 30
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 8c 09 	call	0x1318	; 0x1318 <init_SPI_trans>
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	84 e3       	ldi	r24, 0x34	; 52
     372:	9c e0       	ldi	r25, 0x0C	; 12
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <init_CC1020+0x24>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <init_CC1020+0x2e>
     37e:	00 00       	nop
     380:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
     384:	0e 94 ce 00 	call	0x19c	; 0x19c <ResetCC1020>
     388:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SetupCC1020Allregisters>
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	84 e3       	ldi	r24, 0x34	; 52
     390:	9c e0       	ldi	r25, 0x0C	; 12
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <init_CC1020+0x42>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <init_CC1020+0x4c>
     39c:	00 00       	nop
     39e:	87 e4       	ldi	r24, 0x47	; 71
     3a0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <WakeUpCC1020ToRX>
     3a4:	80 ef       	ldi	r24, 0xF0	; 240
     3a6:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     3aa:	89 2b       	or	r24, r25
     3ac:	29 f0       	breq	.+10     	; 0x3b8 <init_CC1020+0x68>
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <init_CC1020+0x70>
     3b8:	88 e2       	ldi	r24, 0x28	; 40
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	84 e3       	ldi	r24, 0x34	; 52
     3c4:	9c e0       	ldi	r25, 0x0C	; 12
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <init_CC1020+0x76>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <init_CC1020+0x80>
     3d0:	00 00       	nop
     3d2:	87 e4       	ldi	r24, 0x47	; 71
     3d4:	0e 94 0a 01 	call	0x214	; 0x214 <WakeUpCC1020ToTX>
     3d8:	80 ef       	ldi	r24, 0xF0	; 240
     3da:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     3de:	89 2b       	or	r24, r25
     3e0:	29 f4       	brne	.+10     	; 0x3ec <init_CC1020+0x9c>
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <init_CC1020+0xa4>
     3ec:	86 e5       	ldi	r24, 0x56	; 86
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	8c e6       	ldi	r24, 0x6C	; 108
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	1f 93       	push	r17
     40e:	0f 93       	push	r16
     410:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
     414:	c8 01       	movw	r24, r16
     416:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	6e 96       	adiw	r28, 0x1e	; 30
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <SetupCC1020TX>:
/*  This routine puts the CC1020 into TX mode (from RX). When switching to  */
/*  TX from PD, use WakeupCC1020ToTX first                                  */
/****************************************************************************/

char SetupCC1020TX(char TXANALOG1, char PA_POWER1)
{
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	c8 2f       	mov	r28, r24
     444:	16 2f       	mov	r17, r22
  int TimeOutCounter;
  int lock_status;

  // Turn off PA to avoid frequency splatter
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	8c e1       	ldi	r24, 0x1C	; 28
     44a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,TXANALOG1);
     44e:	6c 2f       	mov	r22, r28
     450:	87 e1       	ldi	r24, 0x17	; 23
     452:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage
     456:	61 ec       	ldi	r22, 0xC1	; 193
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     45e:	cf e1       	ldi	r28, 0x1F	; 31
     460:	d0 e0       	ldi	r29, 0x00	; 0
     462:	06 c0       	rjmp	.+12     	; 0x470 <SetupCC1020TX+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	8f ec       	ldi	r24, 0xCF	; 207
     466:	97 e0       	ldi	r25, 0x07	; 7
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <SetupCC1020TX+0x2c>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <SetupCC1020TX+0x32>
     46e:	00 00       	nop
     470:	80 e4       	ldi	r24, 0x40	; 64
     472:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     476:	84 fd       	sbrc	r24, 4
     478:	02 c0       	rjmp	.+4      	; 0x47e <SetupCC1020TX+0x42>
     47a:	21 97       	sbiw	r28, 0x01	; 1
     47c:	99 f7       	brne	.-26     	; 0x464 <SetupCC1020TX+0x28>
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     484:	84 fd       	sbrc	r24, 4
     486:	08 c0       	rjmp	.+16     	; 0x498 <SetupCC1020TX+0x5c>
    lock_status = TRUE;
    
  else	// if PLL is not locked then Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
     488:	81 2f       	mov	r24, r17
     48a:	0e 94 4e 01 	call	0x29c	; 0x29c <CalibrateCC1020>
     48e:	c1 e0       	ldi	r28, 0x01	; 1
     490:	89 2b       	or	r24, r25
     492:	19 f4       	brne	.+6      	; 0x49a <SetupCC1020TX+0x5e>
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	01 c0       	rjmp	.+2      	; 0x49a <SetupCC1020TX+0x5e>
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
    lock_status = TRUE;
     498:	c1 e0       	ldi	r28, 0x01	; 1
    else
      lock_status = FALSE;
  }

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER,PA_POWER1);
     49a:	61 2f       	mov	r22, r17
     49c:	8c e1       	ldi	r24, 0x1C	; 28
     49e:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Turn OFF DCLK_CS (Carrier Sense Squelch) in TX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE) & (~0x10));
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     4a8:	68 2f       	mov	r22, r24
     4aa:	6f 7e       	andi	r22, 0xEF	; 239
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
  
  // Configure LOCK pin to continuous lock status. Active low indicates PLL in lock
  WriteToCC1020Register(CC1020_LOCK,0x20);
     4b2:	60 e2       	ldi	r22, 0x20	; 32
     4b4:	85 e1       	ldi	r24, 0x15	; 21
     4b6:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Return LOCK status to application
  return (lock_status);
}
     4ba:	8c 2f       	mov	r24, r28
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	08 95       	ret

000004c4 <init_CC1020_TX>:
	transmit_string_UART0(buff);
}	
	
int init_CC1020_TX (void)
{  
	sbi(DDR_TRX, DIO);
     4c4:	15 9a       	sbi	0x02, 5	; 2
	sbi(PORT_TRX, DIO);
     4c6:	1d 9a       	sbi	0x03, 5	; 3
	WakeUpCC1020ToTX(TXANALOG);													
     4c8:	87 e4       	ldi	r24, 0x47	; 71
     4ca:	0e 94 0a 01 	call	0x214	; 0x214 <WakeUpCC1020ToTX>
	return SetupCC1020TX(TXANALOG,PA_POWER);
     4ce:	60 ef       	ldi	r22, 0xF0	; 240
     4d0:	87 e4       	ldi	r24, 0x47	; 71
     4d2:	0e 94 1e 02 	call	0x43c	; 0x43c <SetupCC1020TX>
}
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret

000004da <init_UART_GPS>:
volatile struct GPS_reading gps;

void init_UART_GPS(void )
{

  UCSR0A = 0;
     4da:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
     4dc:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
     4de:	e5 e9       	ldi	r30, 0x95	; 149
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
     4e4:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
     4e6:	8a b1       	in	r24, 0x0a	; 10
     4e8:	88 61       	ori	r24, 0x18	; 24
     4ea:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
     4ec:	80 81       	ld	r24, Z
     4ee:	8e 60       	ori	r24, 0x0E	; 14
     4f0:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
     4f2:	87 e6       	ldi	r24, 0x67	; 103
     4f4:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
     4f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     4fa:	08 95       	ret

000004fc <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	0b b6       	in	r0, 0x3b	; 59
     508:	0f 92       	push	r0
     50a:	2f 93       	push	r18
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
     518:	8c b1       	in	r24, 0x0c	; 12
     51a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <last_byte>
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
     51e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     522:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     526:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     52a:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     52e:	ba 2f       	mov	r27, r26
     530:	a9 2f       	mov	r26, r25
     532:	98 2f       	mov	r25, r24
     534:	88 27       	eor	r24, r24
     536:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <buffer>
     53a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <buffer+0x1>
     53e:	a0 93 48 03 	sts	0x0348, r26	; 0x800348 <buffer+0x2>
     542:	b0 93 49 03 	sts	0x0349, r27	; 0x800349 <buffer+0x3>
  buffer &= 0xFFFFFF00;
     546:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     54a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     54e:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     552:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     556:	88 27       	eor	r24, r24
     558:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <buffer>
     55c:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <buffer+0x1>
     560:	a0 93 48 03 	sts	0x0348, r26	; 0x800348 <buffer+0x2>
     564:	b0 93 49 03 	sts	0x0349, r27	; 0x800349 <buffer+0x3>
  buffer |= (uint32_t) last_byte;
     568:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <last_byte>
     56c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     570:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     574:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     578:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     57c:	82 2b       	or	r24, r18
     57e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <buffer>
     582:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <buffer+0x1>
     586:	a0 93 48 03 	sts	0x0348, r26	; 0x800348 <buffer+0x2>
     58a:	b0 93 49 03 	sts	0x0349, r27	; 0x800349 <buffer+0x3>
  
  ///Check if the last byte was for position
  if(pos < 12)
     58e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     592:	8c 30       	cpi	r24, 0x0C	; 12
     594:	a0 f4       	brcc	.+40     	; 0x5be <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
     596:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pos>
     59a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <last_byte>
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ed 54       	subi	r30, 0x4D	; 77
     5a2:	fc 4f       	sbci	r31, 0xFC	; 252
     5a4:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
     5a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
    if(pos == 12)
     5b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pos>
     5b4:	8c 30       	cpi	r24, 0x0C	; 12
     5b6:	19 f4       	brne	.+6      	; 0x5be <__vector_18+0xc2>
      pos = 0xFF;
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pos>
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
     5be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5c2:	8c 30       	cpi	r24, 0x0C	; 12
     5c4:	a0 f4       	brcc	.+40     	; 0x5ee <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
     5c6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <vel>
     5ca:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <last_byte>
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	e1 54       	subi	r30, 0x41	; 65
     5d2:	fc 4f       	sbci	r31, 0xFC	; 252
     5d4:	80 83       	st	Z, r24
    
    vel++;
     5d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
    if(vel == 12)
     5e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <vel>
     5e4:	8c 30       	cpi	r24, 0x0C	; 12
     5e6:	19 f4       	brne	.+6      	; 0x5ee <__vector_18+0xf2>
      vel = 0xFF;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <vel>
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
     5ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5f2:	84 30       	cpi	r24, 0x04	; 4
     5f4:	c0 f4       	brcc	.+48     	; 0x626 <__vector_18+0x12a>
  {
    if(dop >= 2)
     5f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	40 f0       	brcs	.+16     	; 0x60e <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
     5fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <dop>
     602:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <last_byte>
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	e2 50       	subi	r30, 0x02	; 2
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	80 83       	st	Z, r24
      
    dop++;
     60e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
    if(dop == 4)
     618:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dop>
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	19 f4       	brne	.+6      	; 0x626 <__vector_18+0x12a>
      dop = 0xFF;
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dop>
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
     626:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     62a:	80 31       	cpi	r24, 0x10	; 16
     62c:	c0 f4       	brcc	.+48     	; 0x65e <__vector_18+0x162>
  {
    if(geo >= 4)
     62e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     632:	84 30       	cpi	r24, 0x04	; 4
     634:	40 f0       	brcs	.+16     	; 0x646 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
     636:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <geo>
     63a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <last_byte>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	e9 53       	subi	r30, 0x39	; 57
     642:	fc 4f       	sbci	r31, 0xFC	; 252
     644:	80 83       	st	Z, r24
    
    geo++;
     646:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
    if(geo == 16)
     650:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <geo>
     654:	80 31       	cpi	r24, 0x10	; 16
     656:	19 f4       	brne	.+6      	; 0x65e <__vector_18+0x162>
      geo = 0xFF;
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <geo>
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
     65e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     662:	87 30       	cpi	r24, 0x07	; 7
     664:	b8 f4       	brcc	.+46     	; 0x694 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
     666:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <time>
     66a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <last_byte>
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e9 52       	subi	r30, 0x29	; 41
     672:	fc 4f       	sbci	r31, 0xFC	; 252
     674:	80 83       	st	Z, r24
    
    time++;
     676:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
    if(time == 7)
     680:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time>
     684:	87 30       	cpi	r24, 0x07	; 7
     686:	31 f4       	brne	.+12     	; 0x694 <__vector_18+0x198>
    {
      time = 0xFF;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time>
      ///* * The Entire message has been read
      message_end = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__data_end>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
     694:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     698:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     69c:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     6a0:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     6a4:	8c 3a       	cpi	r24, 0xAC	; 172
     6a6:	94 40       	sbci	r25, 0x04	; 4
     6a8:	af 43       	sbci	r26, 0x3F	; 63
     6aa:	bf 43       	sbci	r27, 0x3F	; 63
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <__vector_18+0x1bc>
  {
    message_end = 0;
     6ae:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <__data_end>
    pos = 0;
     6b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pos>
     6b6:	3f c0       	rjmp	.+126    	; 0x736 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
     6b8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     6bc:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     6c0:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     6c4:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     6c8:	8c 3a       	cpi	r24, 0xAC	; 172
     6ca:	95 40       	sbci	r25, 0x05	; 5
     6cc:	af 43       	sbci	r26, 0x3F	; 63
     6ce:	bf 43       	sbci	r27, 0x3F	; 63
     6d0:	19 f4       	brne	.+6      	; 0x6d8 <__vector_18+0x1dc>
    vel = 0;
     6d2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <vel>
     6d6:	2f c0       	rjmp	.+94     	; 0x736 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
     6d8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     6dc:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     6e0:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     6e4:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     6e8:	8c 3a       	cpi	r24, 0xAC	; 172
     6ea:	9b 40       	sbci	r25, 0x0B	; 11
     6ec:	af 43       	sbci	r26, 0x3F	; 63
     6ee:	bf 43       	sbci	r27, 0x3F	; 63
     6f0:	19 f4       	brne	.+6      	; 0x6f8 <__vector_18+0x1fc>
    dop = 0;
     6f2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dop>
     6f6:	1f c0       	rjmp	.+62     	; 0x736 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
     6f8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     6fc:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     700:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     704:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     708:	8c 3a       	cpi	r24, 0xAC	; 172
     70a:	9e 40       	sbci	r25, 0x0E	; 14
     70c:	af 43       	sbci	r26, 0x3F	; 63
     70e:	bf 43       	sbci	r27, 0x3F	; 63
     710:	19 f4       	brne	.+6      	; 0x718 <__vector_18+0x21c>
    geo = 0;
     712:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <geo>
     716:	0f c0       	rjmp	.+30     	; 0x736 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
     718:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <buffer>
     71c:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <buffer+0x1>
     720:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <buffer+0x2>
     724:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <buffer+0x3>
     728:	8c 3a       	cpi	r24, 0xAC	; 172
     72a:	9f 40       	sbci	r25, 0x0F	; 15
     72c:	af 43       	sbci	r26, 0x3F	; 63
     72e:	bf 43       	sbci	r27, 0x3F	; 63
     730:	11 f4       	brne	.+4      	; 0x736 <__vector_18+0x23a>
    time = 0;
     732:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time>
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
     736:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     73a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     73e:	84 3f       	cpi	r24, 0xF4	; 244
     740:	91 40       	sbci	r25, 0x01	; 1
     742:	f0 f4       	brcc	.+60     	; 0x780 <__vector_18+0x284>
     744:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     748:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	c1 f0       	breq	.+48     	; 0x780 <__vector_18+0x284>
     750:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__data_end>
     754:	88 23       	and	r24, r24
     756:	a1 f0       	breq	.+40     	; 0x780 <__vector_18+0x284>
  {
    GPS_done = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <GPS_done>
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
     75e:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     768:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    message_end = 0;
     76c:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <__data_end>
    buffer = 0;
     770:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <buffer>
     774:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <buffer+0x1>
     778:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <buffer+0x2>
     77c:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <buffer+0x3>
  }
}
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <get_HM_data>:
#include "hm.h"
#include "twi.h"
#include "peripherals.h"

void get_HM_data(void)
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	c5 e2       	ldi	r28, 0x25	; 37
     7a6:	d4 e0       	ldi	r29, 0x04	; 4
     7a8:	0c e2       	ldi	r16, 0x2C	; 44
     7aa:	14 e0       	ldi	r17, 0x04	; 4
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
     7ac:	be 01       	movw	r22, r28
     7ae:	82 e2       	ldi	r24, 0x22	; 34
     7b0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TWI_rec_byte>
     7b4:	21 96       	adiw	r28, 0x01	; 1
void get_HM_data(void)
{
  ///Counter for the 7 bytes of Health monitoring data
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
     7b6:	c0 17       	cp	r28, r16
     7b8:	d1 07       	cpc	r29, r17
     7ba:	c1 f7       	brne	.-16     	; 0x7ac <get_HM_data+0x10>
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <blink>:
//@}


void blink (void)
{
	PORTA = 0xA0;
     7c6:	80 ea       	ldi	r24, 0xA0	; 160
     7c8:	8b bb       	out	0x1b, r24	; 27
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	84 e3       	ldi	r24, 0x34	; 52
     7ce:	9c e0       	ldi	r25, 0x0C	; 12
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	90 40       	sbci	r25, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <blink+0xa>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <blink+0x14>
     7da:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
     7dc:	80 e5       	ldi	r24, 0x50	; 80
     7de:	8b bb       	out	0x1b, r24	; 27
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	84 e3       	ldi	r24, 0x34	; 52
     7e4:	9c e0       	ldi	r25, 0x0C	; 12
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <blink+0x20>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <blink+0x2a>
     7f0:	00 00       	nop
     7f2:	08 95       	ret

000007f4 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
     7f4:	2f 92       	push	r2
     7f6:	3f 92       	push	r3
     7f8:	4f 92       	push	r4
     7fa:	5f 92       	push	r5
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	c6 50       	subi	r28, 0x06	; 6
     81e:	d1 40       	sbci	r29, 0x01	; 1
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
	char array1[40];
	char array2[40];
	char array3[40];
	
	DDRA = 0xF0;
     82a:	80 ef       	ldi	r24, 0xF0	; 240
     82c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
     82e:	8b bb       	out	0x1b, r24	; 27
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	39 e6       	ldi	r19, 0x69	; 105
     834:	98 e1       	ldi	r25, 0x18	; 24
     836:	21 50       	subi	r18, 0x01	; 1
     838:	30 40       	sbci	r19, 0x00	; 0
     83a:	90 40       	sbci	r25, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <main+0x42>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0x4c>
     840:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     842:	1b ba       	out	0x1b, r1	; 27
     844:	ef ef       	ldi	r30, 0xFF	; 255
     846:	f9 e6       	ldi	r31, 0x69	; 105
     848:	28 e1       	ldi	r18, 0x18	; 24
     84a:	e1 50       	subi	r30, 0x01	; 1
     84c:	f0 40       	sbci	r31, 0x00	; 0
     84e:	20 40       	sbci	r18, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <main+0x56>
     852:	00 c0       	rjmp	.+0      	; 0x854 <main+0x60>
     854:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
     856:	8b bb       	out	0x1b, r24	; 27
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	89 e6       	ldi	r24, 0x69	; 105
     85c:	98 e1       	ldi	r25, 0x18	; 24
     85e:	31 50       	subi	r19, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <main+0x6a>
     866:	00 c0       	rjmp	.+0      	; 0x868 <main+0x74>
     868:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     86a:	1b ba       	out	0x1b, r1	; 27
     86c:	ef ef       	ldi	r30, 0xFF	; 255
     86e:	f9 e6       	ldi	r31, 0x69	; 105
     870:	28 e1       	ldi	r18, 0x18	; 24
     872:	e1 50       	subi	r30, 0x01	; 1
     874:	f0 40       	sbci	r31, 0x00	; 0
     876:	20 40       	sbci	r18, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <main+0x7e>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <main+0x88>
     87c:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
     87e:	0e 94 82 0a 	call	0x1504	; 0x1504 <init_UART0>
  
	transmit_UART0('\r');
     882:	8d e0       	ldi	r24, 0x0D	; 13
     884:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('\r');
     888:	8d e0       	ldi	r24, 0x0D	; 13
     88a:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('H');
     88e:	88 e4       	ldi	r24, 0x48	; 72
     890:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('e');
     894:	85 e6       	ldi	r24, 0x65	; 101
     896:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('l');
     89a:	8c e6       	ldi	r24, 0x6C	; 108
     89c:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('l');
     8a0:	8c e6       	ldi	r24, 0x6C	; 108
     8a2:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('o');
     8a6:	8f e6       	ldi	r24, 0x6F	; 111
     8a8:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	
	sprintf(array1,"\t..This is IITB's Student Satellite...\r");
     8ac:	88 e2       	ldi	r24, 0x28	; 40
     8ae:	e6 e1       	ldi	r30, 0x16	; 22
     8b0:	f3 e0       	ldi	r31, 0x03	; 3
     8b2:	de 01       	movw	r26, r28
     8b4:	11 96       	adiw	r26, 0x01	; 1
     8b6:	01 90       	ld	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	8a 95       	dec	r24
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <main+0xc2>
	transmit_string_UART0(array1);
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
     8c6:	86 e2       	ldi	r24, 0x26	; 38
     8c8:	eb e9       	ldi	r30, 0x9B	; 155
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	de 01       	movw	r26, r28
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	8a 95       	dec	r24
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <main+0xdc>
	int i;
	unsigned int bb;
	uint8_t frame[100], buf[100], x;
	
	/// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
	init_UART_MM();
     8d8:	0e 94 e5 07 	call	0xfca	; 0xfca <init_UART_MM>
     8dc:	3f ef       	ldi	r19, 0xFF	; 255
     8de:	80 e7       	ldi	r24, 0x70	; 112
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	31 50       	subi	r19, 0x01	; 1
     8e4:	80 40       	sbci	r24, 0x00	; 0
     8e6:	90 40       	sbci	r25, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0xee>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <main+0xf8>
     8ec:	00 00       	nop
	_delay_ms(100);
	init_UART_GPS();
     8ee:	0e 94 6d 02 	call	0x4da	; 0x4da <init_UART_GPS>
     8f2:	ef ef       	ldi	r30, 0xFF	; 255
     8f4:	f0 e7       	ldi	r31, 0x70	; 112
     8f6:	22 e0       	ldi	r18, 0x02	; 2
     8f8:	e1 50       	subi	r30, 0x01	; 1
     8fa:	f0 40       	sbci	r31, 0x00	; 0
     8fc:	20 40       	sbci	r18, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x104>
     900:	00 c0       	rjmp	.+0      	; 0x902 <main+0x10e>
     902:	00 00       	nop
	_delay_ms(100);
	init_SPI();
     904:	0e 94 7e 09 	call	0x12fc	; 0x12fc <init_SPI>
     908:	3f ef       	ldi	r19, 0xFF	; 255
     90a:	80 e7       	ldi	r24, 0x70	; 112
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	31 50       	subi	r19, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <main+0x11a>
     916:	00 c0       	rjmp	.+0      	; 0x918 <main+0x124>
     918:	00 00       	nop
	_delay_ms(100);
	init_TWI();
     91a:	0e 94 12 0a 	call	0x1424	; 0x1424 <init_TWI>
     91e:	ef ef       	ldi	r30, 0xFF	; 255
     920:	f0 e7       	ldi	r31, 0x70	; 112
     922:	22 e0       	ldi	r18, 0x02	; 2
     924:	e1 50       	subi	r30, 0x01	; 1
     926:	f0 40       	sbci	r31, 0x00	; 0
     928:	20 40       	sbci	r18, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <main+0x130>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <main+0x13a>
     92e:	00 00       	nop
	_delay_ms(100);
	
	///Configure the Torquer
	configure_torquer();
     930:	0e 94 4a 08 	call	0x1094	; 0x1094 <configure_torquer>
     934:	3f ef       	ldi	r19, 0xFF	; 255
     936:	80 e7       	ldi	r24, 0x70	; 112
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	31 50       	subi	r19, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <main+0x146>
     942:	00 c0       	rjmp	.+0      	; 0x944 <main+0x150>
     944:	00 00       	nop
  	_delay_ms(100);
   
	///Configure CC1020
	init_CC1020();
     946:	0e 94 a8 01 	call	0x350	; 0x350 <init_CC1020>
	
	///Set Preflight pin as input
	cbi(DDR_PF, PIN_PF);
     94a:	8e 98       	cbi	0x11, 6	; 17
  
	///* Switch on Global interrupts
	sei();
     94c:	78 94       	sei
	
		/************************************************************/
		///* * Magnetometer and Torquer test

		sprintf(array2,"\rCurrent MagnetoMetr state is =\t");
		sprintf(array3,"\rGenerating Torquer Current for :\t");
     94e:	2e 01       	movw	r4, r28
     950:	e1 e5       	ldi	r30, 0x51	; 81
     952:	4e 0e       	add	r4, r30
     954:	51 1c       	adc	r5, r1
		///* * Reading with one torquer on at once, in one direction
		transmit_string_UART0(array3);
		transmit_UART0('+');
		transmit_UART0('X');
		transmit_UART0('\r');
		Current_state.pwm.x_dir = 0;
     956:	0f 2e       	mov	r0, r31
     958:	f2 e3       	ldi	r31, 0x32	; 50
     95a:	2f 2e       	mov	r2, r31
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	3f 2e       	mov	r3, r31
     960:	f0 2d       	mov	r31, r0
		Current_state.pwm.x = 32768;
     962:	e1 2c       	mov	r14, r1
     964:	68 94       	set
     966:	ff 24       	eor	r15, r15
     968:	f7 f8       	bld	r15, 7
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
		{
			aa = Current_state.ss.reading[i];
			bb = (aa*3.3*100)/4096;
			sprintf(buffer, "%u\t", bb);
     96a:	0f 2e       	mov	r0, r31
     96c:	fd e5       	ldi	r31, 0x5D	; 93
     96e:	6f 2e       	mov	r6, r31
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	7f 2e       	mov	r7, r31
     974:	f0 2d       	mov	r31, r0
     976:	8e 01       	movw	r16, r28
     978:	07 58       	subi	r16, 0x87	; 135
     97a:	1f 4f       	sbci	r17, 0xFF	; 255
     97c:	cb 5f       	subi	r28, 0xFB	; 251
     97e:	de 4f       	sbci	r29, 0xFE	; 254
     980:	08 83       	st	Y, r16
     982:	c5 50       	subi	r28, 0x05	; 5
     984:	d1 40       	sbci	r29, 0x01	; 1
     986:	ca 5f       	subi	r28, 0xFA	; 250
     988:	de 4f       	sbci	r29, 0xFE	; 254
     98a:	18 83       	st	Y, r17
     98c:	c6 50       	subi	r28, 0x06	; 6
     98e:	d1 40       	sbci	r29, 0x01	; 1
	sei();
  
/************************************************************/
	while(1)
	{
	blink();
     990:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
	
	transmit_UART0('\r');
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('\r');
     99a:	8d e0       	ldi	r24, 0x0D	; 13
     99c:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('H');
     9a0:	88 e4       	ldi	r24, 0x48	; 72
     9a2:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	transmit_UART0('i');
     9a6:	89 e6       	ldi	r24, 0x69	; 105
     9a8:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
	
	transmit_string_UART0(array1);
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
	
/************************************************************/
	blink();
     9b4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
    ///* Preflight Checks
    if(PORT_PF & _BV(PIN_PF))
     9b8:	86 9b       	sbis	0x10, 6	; 16
     9ba:	ea cf       	rjmp	.-44     	; 0x990 <main+0x19c>
	{	///* * Set the mode as preflight
		Mode = PREFLIGHT;
     9bc:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <Mode>
    
		sprintf(array2,"\r...Entering PREFLIGHT Mode...\r");
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	e1 ec       	ldi	r30, 0xC1	; 193
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	de 01       	movw	r26, r28
     9c8:	99 96       	adiw	r26, 0x29	; 41
     9ca:	01 90       	ld	r0, Z+
     9cc:	0d 92       	st	X+, r0
     9ce:	8a 95       	dec	r24
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <main+0x1d6>
		transmit_string_UART0(array2);
     9d2:	ce 01       	movw	r24, r28
     9d4:	89 96       	adiw	r24, 0x29	; 41
     9d6:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		
		blink();
     9da:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading GPS
	    sprintf(array2,"\rCurrent GPS state is =\t");
     9de:	89 e1       	ldi	r24, 0x19	; 25
     9e0:	e1 ee       	ldi	r30, 0xE1	; 225
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
     9e4:	de 01       	movw	r26, r28
     9e6:	99 96       	adiw	r26, 0x29	; 41
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	8a 95       	dec	r24
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <main+0x1f4>
		transmit_string_UART0(array2);
     9f0:	ce 01       	movw	r24, r28
     9f2:	89 96       	adiw	r24, 0x29	; 41
     9f4:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_GPS();
     9f8:	0e 94 32 08 	call	0x1064	; 0x1064 <read_GPS>
		while(UCSR0B & _BV(RXCIE0));
     9fc:	57 99       	sbic	0x0a, 7	; 10
     9fe:	fe cf       	rjmp	.-4      	; 0x9fc <main+0x208>
		send_preflight((char *)&Current_state.gps, sizeof(struct GPS_reading));
     a00:	6d e2       	ldi	r22, 0x2D	; 45
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 ee       	ldi	r24, 0xE0	; 224
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>

		blink();
     a0c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
	
		/************************************************************/
		///* * Magnetometer and Torquer test

		sprintf(array2,"\rCurrent MagnetoMetr state is =\t");
     a10:	81 e2       	ldi	r24, 0x21	; 33
     a12:	ea ef       	ldi	r30, 0xFA	; 250
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	de 01       	movw	r26, r28
     a18:	99 96       	adiw	r26, 0x29	; 41
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	8a 95       	dec	r24
     a20:	e1 f7       	brne	.-8      	; 0xa1a <main+0x226>
		sprintf(array3,"\rGenerating Torquer Current for :\t");
     a22:	83 e2       	ldi	r24, 0x23	; 35
     a24:	eb e1       	ldi	r30, 0x1B	; 27
     a26:	f2 e0       	ldi	r31, 0x02	; 2
     a28:	d2 01       	movw	r26, r4
     a2a:	01 90       	ld	r0, Z+
     a2c:	0d 92       	st	X+, r0
     a2e:	8a 95       	dec	r24
     a30:	e1 f7       	brne	.-8      	; 0xa2a <main+0x236>
		
		///* * Reading with no torquers on
		transmit_string_UART0(array2);
     a32:	ce 01       	movw	r24, r28
     a34:	89 96       	adiw	r24, 0x29	; 41
     a36:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     a3a:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     a3e:	6c e0       	ldi	r22, 0x0C	; 12
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	89 e1       	ldi	r24, 0x19	; 25
     a44:	94 e0       	ldi	r25, 0x04	; 4
     a46:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
		
		blink();
     a4a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading with one torquer on at once, in one direction
		transmit_string_UART0(array3);
     a4e:	c2 01       	movw	r24, r4
     a50:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     a54:	8b e2       	ldi	r24, 0x2B	; 43
     a56:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('X');
     a5a:	88 e5       	ldi	r24, 0x58	; 88
     a5c:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     a60:	8d e0       	ldi	r24, 0x0D	; 13
     a62:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     a66:	f1 01       	movw	r30, r2
     a68:	10 82       	st	Z, r1
		Current_state.pwm.x = 32768;
     a6a:	ec e2       	ldi	r30, 0x2C	; 44
     a6c:	f4 e0       	ldi	r31, 0x04	; 4
     a6e:	f1 82       	std	Z+1, r15	; 0x01
     a70:	e0 82       	st	Z, r14
		Current_state.pwm.y_dir = 0;
     a72:	e3 e3       	ldi	r30, 0x33	; 51
     a74:	f4 e0       	ldi	r31, 0x04	; 4
     a76:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     a78:	0f 2e       	mov	r0, r31
     a7a:	fe e2       	ldi	r31, 0x2E	; 46
     a7c:	8f 2e       	mov	r8, r31
     a7e:	f4 e0       	ldi	r31, 0x04	; 4
     a80:	9f 2e       	mov	r9, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	f4 01       	movw	r30, r8
     a86:	11 82       	std	Z+1, r1	; 0x01
     a88:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     a8a:	0f 2e       	mov	r0, r31
     a8c:	f4 e3       	ldi	r31, 0x34	; 52
     a8e:	af 2e       	mov	r10, r31
     a90:	f4 e0       	ldi	r31, 0x04	; 4
     a92:	bf 2e       	mov	r11, r31
     a94:	f0 2d       	mov	r31, r0
     a96:	f5 01       	movw	r30, r10
     a98:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     a9a:	0f 2e       	mov	r0, r31
     a9c:	f0 e3       	ldi	r31, 0x30	; 48
     a9e:	cf 2e       	mov	r12, r31
     aa0:	f4 e0       	ldi	r31, 0x04	; 4
     aa2:	df 2e       	mov	r13, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	f6 01       	movw	r30, r12
     aa8:	11 82       	std	Z+1, r1	; 0x01
     aaa:	10 82       	st	Z, r1
		set_PWM ();
     aac:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     ab0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     ab4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     ab8:	ce 01       	movw	r24, r28
     aba:	89 96       	adiw	r24, 0x29	; 41
     abc:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     ac0:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     ac4:	6c e0       	ldi	r22, 0x0C	; 12
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	89 e1       	ldi	r24, 0x19	; 25
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     ad0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array3);
     ad4:	c2 01       	movw	r24, r4
     ad6:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     ada:	8b e2       	ldi	r24, 0x2B	; 43
     adc:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Y');
     ae0:	89 e5       	ldi	r24, 0x59	; 89
     ae2:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     aec:	f1 01       	movw	r30, r2
     aee:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     af0:	ec e2       	ldi	r30, 0x2C	; 44
     af2:	f4 e0       	ldi	r31, 0x04	; 4
     af4:	11 82       	std	Z+1, r1	; 0x01
     af6:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     af8:	e3 e3       	ldi	r30, 0x33	; 51
     afa:	f4 e0       	ldi	r31, 0x04	; 4
     afc:	10 82       	st	Z, r1
		Current_state.pwm.y = 32768;
     afe:	f4 01       	movw	r30, r8
     b00:	f1 82       	std	Z+1, r15	; 0x01
     b02:	e0 82       	st	Z, r14
		Current_state.pwm.z_dir = 0;
     b04:	f5 01       	movw	r30, r10
     b06:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     b08:	f6 01       	movw	r30, r12
     b0a:	11 82       	std	Z+1, r1	; 0x01
     b0c:	10 82       	st	Z, r1
		set_PWM ();
     b0e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     b12:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     b16:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     b1a:	ce 01       	movw	r24, r28
     b1c:	89 96       	adiw	r24, 0x29	; 41
     b1e:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     b22:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     b26:	6c e0       	ldi	r22, 0x0C	; 12
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	89 e1       	ldi	r24, 0x19	; 25
     b2c:	94 e0       	ldi	r25, 0x04	; 4
     b2e:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     b32:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array3);
     b36:	c2 01       	movw	r24, r4
     b38:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     b3c:	8b e2       	ldi	r24, 0x2B	; 43
     b3e:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Z');
     b42:	8a e5       	ldi	r24, 0x5A	; 90
     b44:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     b48:	8d e0       	ldi	r24, 0x0D	; 13
     b4a:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     b4e:	f1 01       	movw	r30, r2
     b50:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     b52:	ec e2       	ldi	r30, 0x2C	; 44
     b54:	f4 e0       	ldi	r31, 0x04	; 4
     b56:	11 82       	std	Z+1, r1	; 0x01
     b58:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     b5a:	e3 e3       	ldi	r30, 0x33	; 51
     b5c:	f4 e0       	ldi	r31, 0x04	; 4
     b5e:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     b60:	f4 01       	movw	r30, r8
     b62:	11 82       	std	Z+1, r1	; 0x01
     b64:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     b66:	f5 01       	movw	r30, r10
     b68:	10 82       	st	Z, r1
		Current_state.pwm.z = 32768;  
     b6a:	f6 01       	movw	r30, r12
     b6c:	f1 82       	std	Z+1, r15	; 0x01
     b6e:	e0 82       	st	Z, r14
		blink();
     b70:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     b74:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     b78:	ce 01       	movw	r24, r28
     b7a:	89 96       	adiw	r24, 0x29	; 41
     b7c:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     b80:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     b84:	6c e0       	ldi	r22, 0x0C	; 12
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	89 e1       	ldi	r24, 0x19	; 25
     b8a:	94 e0       	ldi	r25, 0x04	; 4
     b8c:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     b90:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading with ALL torquer on at once, in one direction
		transmit_string_UART0(array3);
     b94:	c2 01       	movw	r24, r4
     b96:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('-');
     b9a:	8d e2       	ldi	r24, 0x2D	; 45
     b9c:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('X');
     ba0:	88 e5       	ldi	r24, 0x58	; 88
     ba2:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0(' ');
     ba6:	80 e2       	ldi	r24, 0x20	; 32
     ba8:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Y');
     bac:	89 e5       	ldi	r24, 0x59	; 89
     bae:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0(' ');
     bb2:	80 e2       	ldi	r24, 0x20	; 32
     bb4:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Z');
     bb8:	8a e5       	ldi	r24, 0x5A	; 90
     bba:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     bbe:	8d e0       	ldi	r24, 0x0D	; 13
     bc0:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     bc4:	f1 01       	movw	r30, r2
     bc6:	10 82       	st	Z, r1
		Current_state.pwm.x = 32768;
     bc8:	ec e2       	ldi	r30, 0x2C	; 44
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	f1 82       	std	Z+1, r15	; 0x01
     bce:	e0 82       	st	Z, r14
		Current_state.pwm.y_dir = 0;
     bd0:	e3 e3       	ldi	r30, 0x33	; 51
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	10 82       	st	Z, r1
		Current_state.pwm.y = 32768;
     bd6:	f4 01       	movw	r30, r8
     bd8:	f1 82       	std	Z+1, r15	; 0x01
     bda:	e0 82       	st	Z, r14
		Current_state.pwm.z_dir = 0;
     bdc:	f5 01       	movw	r30, r10
     bde:	10 82       	st	Z, r1
		Current_state.pwm.z = 32768;
     be0:	f6 01       	movw	r30, r12
     be2:	f1 82       	std	Z+1, r15	; 0x01
     be4:	e0 82       	st	Z, r14
		set_PWM ();
     be6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     bea:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     bee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     bf2:	ce 01       	movw	r24, r28
     bf4:	89 96       	adiw	r24, 0x29	; 41
     bf6:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     bfa:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     bfe:	6c e0       	ldi	r22, 0x0C	; 12
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	89 e1       	ldi	r24, 0x19	; 25
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     c0a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading with one torquer on at once, in other direction
		transmit_string_UART0(array3);
     c0e:	c2 01       	movw	r24, r4
     c10:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     c14:	8b e2       	ldi	r24, 0x2B	; 43
     c16:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('X');
     c1a:	88 e5       	ldi	r24, 0x58	; 88
     c1c:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     c20:	8d e0       	ldi	r24, 0x0D	; 13
     c22:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 1;
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	f1 01       	movw	r30, r2
     c2a:	20 83       	st	Z, r18
		Current_state.pwm.x = 32768;
     c2c:	ec e2       	ldi	r30, 0x2C	; 44
     c2e:	f4 e0       	ldi	r31, 0x04	; 4
     c30:	f1 82       	std	Z+1, r15	; 0x01
     c32:	e0 82       	st	Z, r14
		Current_state.pwm.y_dir = 0;
     c34:	e3 e3       	ldi	r30, 0x33	; 51
     c36:	f4 e0       	ldi	r31, 0x04	; 4
     c38:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     c3a:	f4 01       	movw	r30, r8
     c3c:	11 82       	std	Z+1, r1	; 0x01
     c3e:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     c40:	f5 01       	movw	r30, r10
     c42:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     c44:	f6 01       	movw	r30, r12
     c46:	11 82       	std	Z+1, r1	; 0x01
     c48:	10 82       	st	Z, r1
		set_PWM ();
     c4a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     c4e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     c52:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     c56:	ce 01       	movw	r24, r28
     c58:	89 96       	adiw	r24, 0x29	; 41
     c5a:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     c5e:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     c62:	6c e0       	ldi	r22, 0x0C	; 12
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	89 e1       	ldi	r24, 0x19	; 25
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     c6e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array3);
     c72:	c2 01       	movw	r24, r4
     c74:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     c78:	8b e2       	ldi	r24, 0x2B	; 43
     c7a:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Y');
     c7e:	89 e5       	ldi	r24, 0x59	; 89
     c80:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     c84:	8d e0       	ldi	r24, 0x0D	; 13
     c86:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     c8a:	f1 01       	movw	r30, r2
     c8c:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     c8e:	ec e2       	ldi	r30, 0x2C	; 44
     c90:	f4 e0       	ldi	r31, 0x04	; 4
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 1;
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	e3 e3       	ldi	r30, 0x33	; 51
     c9a:	f4 e0       	ldi	r31, 0x04	; 4
     c9c:	20 83       	st	Z, r18
		Current_state.pwm.y = 32768;
     c9e:	f4 01       	movw	r30, r8
     ca0:	f1 82       	std	Z+1, r15	; 0x01
     ca2:	e0 82       	st	Z, r14
		Current_state.pwm.z_dir = 0;
     ca4:	f5 01       	movw	r30, r10
     ca6:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     ca8:	f6 01       	movw	r30, r12
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
		set_PWM ();
     cae:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     cb2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     cb6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     cba:	ce 01       	movw	r24, r28
     cbc:	89 96       	adiw	r24, 0x29	; 41
     cbe:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     cc2:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     cc6:	6c e0       	ldi	r22, 0x0C	; 12
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	89 e1       	ldi	r24, 0x19	; 25
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     cd2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array3);
     cd6:	c2 01       	movw	r24, r4
     cd8:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('+');
     cdc:	8b e2       	ldi	r24, 0x2B	; 43
     cde:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Z');
     ce2:	8a e5       	ldi	r24, 0x5A	; 90
     ce4:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     ce8:	8d e0       	ldi	r24, 0x0D	; 13
     cea:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     cee:	f1 01       	movw	r30, r2
     cf0:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     cf2:	ec e2       	ldi	r30, 0x2C	; 44
     cf4:	f4 e0       	ldi	r31, 0x04	; 4
     cf6:	11 82       	std	Z+1, r1	; 0x01
     cf8:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     cfa:	e3 e3       	ldi	r30, 0x33	; 51
     cfc:	f4 e0       	ldi	r31, 0x04	; 4
     cfe:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     d00:	f4 01       	movw	r30, r8
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 1;
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	f5 01       	movw	r30, r10
     d0a:	20 83       	st	Z, r18
		Current_state.pwm.z = 32768;  
     d0c:	f6 01       	movw	r30, r12
     d0e:	f1 82       	std	Z+1, r15	; 0x01
     d10:	e0 82       	st	Z, r14
		set_PWM ();
     d12:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     d16:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     d1a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     d1e:	ce 01       	movw	r24, r28
     d20:	89 96       	adiw	r24, 0x29	; 41
     d22:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     d26:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     d2a:	6c e0       	ldi	r22, 0x0C	; 12
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	89 e1       	ldi	r24, 0x19	; 25
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		blink();
     d36:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading with ALL torquer on at once, in other direction
		transmit_string_UART0(array3);
     d3a:	c2 01       	movw	r24, r4
     d3c:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_UART0('-');
     d40:	8d e2       	ldi	r24, 0x2D	; 45
     d42:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('X');
     d46:	88 e5       	ldi	r24, 0x58	; 88
     d48:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0(' ');
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Y');
     d52:	89 e5       	ldi	r24, 0x59	; 89
     d54:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0(' ');
     d58:	80 e2       	ldi	r24, 0x20	; 32
     d5a:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('Z');
     d5e:	8a e5       	ldi	r24, 0x5A	; 90
     d60:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		transmit_UART0('\r');
     d64:	8d e0       	ldi	r24, 0x0D	; 13
     d66:	0e 94 93 0a 	call	0x1526	; 0x1526 <transmit_UART0>
		Current_state.pwm.x_dir = 1;
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	f1 01       	movw	r30, r2
     d6e:	20 83       	st	Z, r18
		Current_state.pwm.x = 32768;
     d70:	ec e2       	ldi	r30, 0x2C	; 44
     d72:	f4 e0       	ldi	r31, 0x04	; 4
     d74:	f1 82       	std	Z+1, r15	; 0x01
     d76:	e0 82       	st	Z, r14
		Current_state.pwm.y_dir = 1;
     d78:	e3 e3       	ldi	r30, 0x33	; 51
     d7a:	f4 e0       	ldi	r31, 0x04	; 4
     d7c:	20 83       	st	Z, r18
		Current_state.pwm.y = 32768;
     d7e:	f4 01       	movw	r30, r8
     d80:	f1 82       	std	Z+1, r15	; 0x01
     d82:	e0 82       	st	Z, r14
		Current_state.pwm.z_dir = 1;
     d84:	f5 01       	movw	r30, r10
     d86:	20 83       	st	Z, r18
		Current_state.pwm.z = 32768;
     d88:	f6 01       	movw	r30, r12
     d8a:	f1 82       	std	Z+1, r15	; 0x01
     d8c:	e0 82       	st	Z, r14
		set_PWM ();
     d8e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
		blink();
     d92:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     d96:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		transmit_string_UART0(array2);
     d9a:	ce 01       	movw	r24, r28
     d9c:	89 96       	adiw	r24, 0x29	; 41
     d9e:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_MM ();
     da2:	0e 94 39 08 	call	0x1072	; 0x1072 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     da6:	6c e0       	ldi	r22, 0x0C	; 12
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	89 e1       	ldi	r24, 0x19	; 25
     dac:	94 e0       	ldi	r25, 0x04	; 4
     dae:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
    
		///* * Set Torquer values to zero
		reset_PWM();
     db2:	0e 94 9e 08 	call	0x113c	; 0x113c <reset_PWM>
  
		blink();
     db6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* * Reading Sunsensor
		sprintf(array2,"\rCurrent SunSensor state is =\t");
     dba:	8f e1       	ldi	r24, 0x1F	; 31
     dbc:	ee e3       	ldi	r30, 0x3E	; 62
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	de 01       	movw	r26, r28
     dc2:	99 96       	adiw	r26, 0x29	; 41
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	8a 95       	dec	r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <main+0x5d0>
		transmit_string_UART0(array2);
     dcc:	ce 01       	movw	r24, r28
     dce:	89 96       	adiw	r24, 0x29	; 41
     dd0:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		read_SS();
     dd4:	0e 94 34 08 	call	0x1068	; 0x1068 <read_SS>
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
     dd8:	c1 2c       	mov	r12, r1
     dda:	d1 2c       	mov	r13, r1
		{
			aa = Current_state.ss.reading[i];
     ddc:	f6 01       	movw	r30, r12
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e0 52       	subi	r30, 0x20	; 32
     de4:	fc 4f       	sbci	r31, 0xFC	; 252
     de6:	65 a5       	ldd	r22, Z+45	; 0x2d
     de8:	76 a5       	ldd	r23, Z+46	; 0x2e
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__floatunsisf>
			bb = (aa*3.3*100)/4096;
     df2:	23 e3       	ldi	r18, 0x33	; 51
     df4:	33 e3       	ldi	r19, 0x33	; 51
     df6:	43 e5       	ldi	r20, 0x53	; 83
     df8:	50 e4       	ldi	r21, 0x40	; 64
     dfa:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	48 ec       	ldi	r20, 0xC8	; 200
     e04:	52 e4       	ldi	r21, 0x42	; 66
     e06:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	59 e3       	ldi	r21, 0x39	; 57
     e12:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     e16:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fixunssfsi>
			sprintf(buffer, "%u\t", bb);
     e1a:	7f 93       	push	r23
     e1c:	6f 93       	push	r22
     e1e:	7f 92       	push	r7
     e20:	6f 92       	push	r6
     e22:	1f 93       	push	r17
     e24:	0f 93       	push	r16
     e26:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
			send_preflight( buffer, strlen(buffer));
     e2a:	f8 01       	movw	r30, r16
     e2c:	01 90       	ld	r0, Z+
     e2e:	00 20       	and	r0, r0
     e30:	e9 f7       	brne	.-6      	; 0xe2c <main+0x638>
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	bf 01       	movw	r22, r30
     e36:	60 1b       	sub	r22, r16
     e38:	71 0b       	sbc	r23, r17
     e3a:	cb 5f       	subi	r28, 0xFB	; 251
     e3c:	de 4f       	sbci	r29, 0xFE	; 254
     e3e:	88 81       	ld	r24, Y
     e40:	c5 50       	subi	r28, 0x05	; 5
     e42:	d1 40       	sbci	r29, 0x01	; 1
     e44:	ca 5f       	subi	r28, 0xFA	; 250
     e46:	de 4f       	sbci	r29, 0xFE	; 254
     e48:	98 81       	ld	r25, Y
     e4a:	c6 50       	subi	r28, 0x06	; 6
     e4c:	d1 40       	sbci	r29, 0x01	; 1
     e4e:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
		///* * Reading Sunsensor
		sprintf(array2,"\rCurrent SunSensor state is =\t");
		transmit_string_UART0(array2);
		read_SS();
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
     e52:	ff ef       	ldi	r31, 0xFF	; 255
     e54:	cf 1a       	sub	r12, r31
     e56:	df 0a       	sbc	r13, r31
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	26 e0       	ldi	r18, 0x06	; 6
     e66:	c2 16       	cp	r12, r18
     e68:	d1 04       	cpc	r13, r1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <main+0x67a>
     e6c:	b7 cf       	rjmp	.-146    	; 0xddc <main+0x5e8>
			bb = (aa*3.3*100)/4096;
			sprintf(buffer, "%u\t", bb);
			send_preflight( buffer, strlen(buffer));
		}
		
		blink();
     e6e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
	
		///* * Reading Slave
		sprintf(array2,"\rCurrent Health state is =\t");
     e72:	8c e1       	ldi	r24, 0x1C	; 28
     e74:	e1 e6       	ldi	r30, 0x61	; 97
     e76:	f2 e0       	ldi	r31, 0x02	; 2
     e78:	de 01       	movw	r26, r28
     e7a:	99 96       	adiw	r26, 0x29	; 41
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	8a 95       	dec	r24
     e82:	e1 f7       	brne	.-8      	; 0xe7c <main+0x688>
		transmit_string_UART0(array2);
     e84:	ce 01       	movw	r24, r28
     e86:	89 96       	adiw	r24, 0x29	; 41
     e88:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		get_HM_data();
     e8c:	0e 94 ce 03 	call	0x79c	; 0x79c <get_HM_data>
		send_preflight((char *)&Current_state.hm, sizeof(Current_state.hm ));
     e90:	67 e0       	ldi	r22, 0x07	; 7
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	85 e2       	ldi	r24, 0x25	; 37
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
		
		blink();
     e9c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
	
		///* * Communication Task
		sprintf(array2,"\rCC configured and Data send to be transmitted :\t");
     ea0:	82 e3       	ldi	r24, 0x32	; 50
     ea2:	ed e7       	ldi	r30, 0x7D	; 125
     ea4:	f2 e0       	ldi	r31, 0x02	; 2
     ea6:	de 01       	movw	r26, r28
     ea8:	99 96       	adiw	r26, 0x29	; 41
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	8a 95       	dec	r24
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <main+0x6b6>
		sprintf(frame, "Hello World");
     eb2:	8c e0       	ldi	r24, 0x0C	; 12
     eb4:	ef ea       	ldi	r30, 0xAF	; 175
     eb6:	f2 e0       	ldi	r31, 0x02	; 2
     eb8:	de 01       	movw	r26, r28
     eba:	af 55       	subi	r26, 0x5F	; 95
     ebc:	bf 4f       	sbci	r27, 0xFF	; 255
     ebe:	01 90       	ld	r0, Z+
     ec0:	0d 92       	st	X+, r0
     ec2:	8a 95       	dec	r24
     ec4:	e1 f7       	brne	.-8      	; 0xebe <main+0x6ca>
		x = init_CC1020_TX();
     ec6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <init_CC1020_TX>
	
		if(x)
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <main+0x6dc>
     ece:	5d c0       	rjmp	.+186    	; 0xf8a <main+0x796>
		{	sprintf(array3, "Done:%d\tPLL Locked...Transmission Started\r\n", x);
     ed0:	99 27       	eor	r25, r25
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	8b eb       	ldi	r24, 0xBB	; 187
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	5f 92       	push	r5
     ee0:	4f 92       	push	r4
     ee2:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
			transmit_string_UART0(array3);
     ee6:	c2 01       	movw	r24, r4
     ee8:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		}
		else
		{	transmit_string_UART0("\tPLL Lock Failed\r\n");
			break;	
		}
		transmit_string_UART0(array2);
     eec:	ce 01       	movw	r24, r28
     eee:	89 96       	adiw	r24, 0x29	; 41
     ef0:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		transmit_string_UART0(frame);
     ef4:	ce 01       	movw	r24, r28
     ef6:	8f 55       	subi	r24, 0x5F	; 95
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
	
		slave_send (REAL_TIME, frame, FRAME_SIZE);
     efe:	42 e2       	ldi	r20, 0x22	; 34
     f00:	be 01       	movw	r22, r28
     f02:	6f 55       	subi	r22, 0x5F	; 95
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	85 ed       	ldi	r24, 0xD5	; 213
     f08:	0e 94 b3 08 	call	0x1166	; 0x1166 <slave_send>
		blink();
     f0c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* Start transmission
		sprintf(array3,"\rCommand send to Slave :\t%d", BEGIN_TX_COMM);
     f10:	1f 92       	push	r1
     f12:	8a e5       	ldi	r24, 0x5A	; 90
     f14:	8f 93       	push	r24
     f16:	0f 2e       	mov	r0, r31
     f18:	f7 ee       	ldi	r31, 0xE7	; 231
     f1a:	cf 2e       	mov	r12, r31
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	df 2e       	mov	r13, r31
     f20:	f0 2d       	mov	r31, r0
     f22:	df 92       	push	r13
     f24:	cf 92       	push	r12
     f26:	5f 92       	push	r5
     f28:	4f 92       	push	r4
     f2a:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
		transmit_string_UART0(array3);
     f2e:	c2 01       	movw	r24, r4
     f30:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		slave_send (BEGIN_TX_COMM, NULL, 0);
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	8a e5       	ldi	r24, 0x5A	; 90
     f3c:	0e 94 b3 08 	call	0x1166	; 0x1166 <slave_send>
		blink();
     f40:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		blink();
     f44:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* Stop transmission
		sprintf(array3,"\rCommand send to Slave :\t%d", END_TX);
     f48:	1f 92       	push	r1
     f4a:	83 e3       	ldi	r24, 0x33	; 51
     f4c:	8f 93       	push	r24
     f4e:	df 92       	push	r13
     f50:	cf 92       	push	r12
     f52:	5f 92       	push	r5
     f54:	4f 92       	push	r4
     f56:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
		transmit_string_UART0(array3);
     f5a:	c2 01       	movw	r24, r4
     f5c:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
		slave_send (END_TX, NULL, 0);
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	83 e3       	ldi	r24, 0x33	; 51
     f68:	0e 94 b3 08 	call	0x1166	; 0x1166 <slave_send>
		blink();
     f6c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <blink>
		
		///* Wait for Acknoledgement
		while(SPI_transfer(0xFF) != ACK);
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
     f80:	82 39       	cpi	r24, 0x92	; 146
     f82:	d9 f7       	brne	.-10     	; 0xf7a <main+0x786>
    
		SetupCC1020PD();  // configure in PD and stop Transmission
     f84:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
     f88:	03 cd       	rjmp	.-1530   	; 0x990 <main+0x19c>
		if(x)
		{	sprintf(array3, "Done:%d\tPLL Locked...Transmission Started\r\n", x);
			transmit_string_UART0(array3);
		}
		else
		{	transmit_string_UART0("\tPLL Lock Failed\r\n");
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 97 0a 	call	0x152e	; 0x152e <transmit_string_UART0>
	
	}	
/************************************************************/
	}
	return 0;
}
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	ca 5f       	subi	r28, 0xFA	; 250
     f98:	de 4f       	sbci	r29, 0xFE	; 254
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	bf 90       	pop	r11
     fb6:	af 90       	pop	r10
     fb8:	9f 90       	pop	r9
     fba:	8f 90       	pop	r8
     fbc:	7f 90       	pop	r7
     fbe:	6f 90       	pop	r6
     fc0:	5f 90       	pop	r5
     fc2:	4f 90       	pop	r4
     fc4:	3f 90       	pop	r3
     fc6:	2f 90       	pop	r2
     fc8:	08 95       	ret

00000fca <init_UART_MM>:
#include "peripherals.h"
#include "uart.h"


void init_UART_MM(void )
{
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29

  UCSR1A = 0;
     fce:	cb e9       	ldi	r28, 0x9B	; 155
     fd0:	d0 e0       	ldi	r29, 0x00	; 0
     fd2:	18 82       	st	Y, r1
  UCSR1B = 0;
     fd4:	aa e9       	ldi	r26, 0x9A	; 154
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	1c 92       	st	X, r1
  UCSR1C = 0;
     fda:	ed e9       	ldi	r30, 0x9D	; 157
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
     fe0:	88 81       	ld	r24, Y
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
     fe6:	8c 91       	ld	r24, X
     fe8:	88 61       	ori	r24, 0x18	; 24
     fea:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
     fec:	80 81       	ld	r24, Z
     fee:	86 60       	ori	r24, 0x06	; 6
     ff0:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
     ff2:	87 e6       	ldi	r24, 0x67	; 103
     ff4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  UBRR1H = 0;
     ff8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <receive_MM>:
}

uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
    1002:	eb e9       	ldi	r30, 0x9B	; 155
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 23       	and	r24, r24
    100a:	ec f7       	brge	.-6      	; 0x1006 <receive_MM+0x4>
  return UDR1; 
    100c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
    1010:	08 95       	ret

00001012 <send_MM_cmd>:

void send_MM_cmd(char *data)
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
    1016:	fc 01       	movw	r30, r24
    1018:	20 81       	ld	r18, Z
    101a:	22 23       	and	r18, r18
    101c:	69 f0       	breq	.+26     	; 0x1038 <send_MM_cmd+0x26>
    101e:	dc 01       	movw	r26, r24
    1020:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    1022:	eb e9       	ldi	r30, 0x9B	; 155
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
    1026:	cc e9       	ldi	r28, 0x9C	; 156
    1028:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    102a:	90 81       	ld	r25, Z
    102c:	95 ff       	sbrs	r25, 5
    102e:	fd cf       	rjmp	.-6      	; 0x102a <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
    1030:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
    1032:	2d 91       	ld	r18, X+
    1034:	21 11       	cpse	r18, r1
    1036:	f9 cf       	rjmp	.-14     	; 0x102a <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <poll_MM>:
}

static volatile uint8_t t;

void poll_MM(void)
{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	1f 92       	push	r1
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
  ///Temporary variables for magnetometer readings
  int16_t x, y, z;
  uint8_t tmp;
  
  ///Send the poll command
  send_MM_cmd("*00P\r");
    1048:	8e e3       	ldi	r24, 0x3E	; 62
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	0e 94 09 08 	call	0x1012	; 0x1012 <send_MM_cmd>
  while(1) {
    tmp = receive_MM();
    1050:	0e 94 01 08 	call	0x1002	; 0x1002 <receive_MM>
    1054:	89 83       	std	Y+1, r24	; 0x01
    send_preflight(&tmp, 1);
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 3c 08 	call	0x1078	; 0x1078 <send_preflight>
  }
    1062:	f6 cf       	rjmp	.-20     	; 0x1050 <poll_MM+0x12>

00001064 <read_GPS>:
  send_loads();
}

void read_GPS(void){
  ///* Switch on the GPS interrupt
  UCSR0B |= _BV(RXCIE0);
    1064:	57 9a       	sbi	0x0a, 7	; 10
    1066:	08 95       	ret

00001068 <read_SS>:
  
}
void read_SS(void){
  
  ///Configure the Sunsensor ADC IC
  configure_SS();
    1068:	0e 94 b2 09 	call	0x1364	; 0x1364 <configure_SS>
  
  ///Poll the ADC for readings
  poll_SS();
    106c:	0e 94 b5 09 	call	0x136a	; 0x136a <poll_SS>
    1070:	08 95       	ret

00001072 <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM();
    1072:	0e 94 1f 08 	call	0x103e	; 0x103e <poll_MM>
    1076:	08 95       	ret

00001078 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
    1078:	61 15       	cp	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	51 f0       	breq	.+20     	; 0x1092 <send_preflight+0x1a>
    107e:	fc 01       	movw	r30, r24
    1080:	68 0f       	add	r22, r24
    1082:	79 1f       	adc	r23, r25
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
    1084:	5d 9b       	sbis	0x0b, 5	; 11
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
    1088:	91 91       	ld	r25, Z+
    108a:	9c b9       	out	0x0c, r25	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
    108c:	e6 17       	cp	r30, r22
    108e:	f7 07       	cpc	r31, r23
    1090:	c9 f7       	brne	.-14     	; 0x1084 <send_preflight+0xc>
    1092:	08 95       	ret

00001094 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    1094:	84 b3       	in	r24, 0x14	; 20
    1096:	88 63       	ori	r24, 0x38	; 56
    1098:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    109a:	82 b1       	in	r24, 0x02	; 2
    109c:	88 63       	ori	r24, 0x38	; 56
    109e:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    10a0:	ab e8       	ldi	r26, 0x8B	; 139
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	1c 92       	st	X, r1
  TCCR3B = 0;
    10a6:	ea e8       	ldi	r30, 0x8A	; 138
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	10 82       	st	Z, r1
  TCCR3C = 0;
    10ac:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    10b0:	8c 91       	ld	r24, X
    10b2:	8a 6a       	ori	r24, 0xAA	; 170
    10b4:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    10b6:	80 81       	ld	r24, Z
    10b8:	81 61       	ori	r24, 0x11	; 17
    10ba:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    10c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  OCR3B = 0x0000;
    10c8:	e4 e8       	ldi	r30, 0x84	; 132
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	11 82       	std	Z+1, r1	; 0x01
    10ce:	10 82       	st	Z, r1
  OCR3B = 0x0000;
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
  OCR3B = 0x0000;
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    10d8:	85 b3       	in	r24, 0x15	; 21
    10da:	87 7c       	andi	r24, 0xC7	; 199
    10dc:	85 bb       	out	0x15, r24	; 21
    10de:	08 95       	ret

000010e0 <set_PWM>:

void set_PWM(void)
{
  
  ///If current direction of axis X/Y/Z opposite of default set pin
  if(Current_state.pwm.x_dir)
    10e0:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <Current_state+0x52>
    10e4:	88 23       	and	r24, r24
    10e6:	11 f0       	breq	.+4      	; 0x10ec <set_PWM+0xc>
    PORTC |= _BV(PC5);
    10e8:	ad 9a       	sbi	0x15, 5	; 21
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <set_PWM+0xe>
  else
    PORTC &= ~(_BV(PC5));
    10ec:	ad 98       	cbi	0x15, 5	; 21
    
  if(Current_state.pwm.y_dir)
    10ee:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <Current_state+0x53>
    10f2:	88 23       	and	r24, r24
    10f4:	11 f0       	breq	.+4      	; 0x10fa <set_PWM+0x1a>
    PORTC |= _BV(PC4);
    10f6:	ac 9a       	sbi	0x15, 4	; 21
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <set_PWM+0x1c>
  else
    PORTC &= ~(_BV(PC4));
    10fa:	ac 98       	cbi	0x15, 4	; 21
    
  if(Current_state.pwm.z_dir)
    10fc:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <Current_state+0x54>
    1100:	88 23       	and	r24, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <__stack+0x9>
    PORTC |= _BV(PC3);
    1104:	ab 9a       	sbi	0x15, 3	; 21
    1106:	01 c0       	rjmp	.+2      	; 0x110a <__stack+0xb>
  else
    PORTC &= ~(_BV(PC3));
    1108:	ab 98       	cbi	0x15, 3	; 21
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    110a:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <Current_state+0x4c>
    110e:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <Current_state+0x4d>
    1112:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1116:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  OCR3B = Current_state.pwm.y;
    111a:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <Current_state+0x4e>
    111e:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <Current_state+0x4f>
    1122:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1126:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  OCR3C = Current_state.pwm.z;
    112a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Current_state+0x50>
    112e:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <Current_state+0x51>
    1132:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1136:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    113a:	08 95       	ret

0000113c <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    113c:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <Current_state+0x4d>
    1140:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <Current_state+0x4c>
  Current_state.pwm.y = 0;
    1144:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <Current_state+0x4f>
    1148:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <Current_state+0x4e>
  Current_state.pwm.z = 0;
    114c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <Current_state+0x51>
    1150:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <Current_state+0x50>
  Current_state.pwm.x_dir = 0;
    1154:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <Current_state+0x52>
  Current_state.pwm.y_dir = 0;
    1158:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <Current_state+0x53>
  Current_state.pwm.z_dir = 0;
    115c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <Current_state+0x54>
  set_PWM();
    1160:	0e 94 70 08 	call	0x10e0	; 0x10e0 <set_PWM>
    1164:	08 95       	ret

00001166 <slave_send>:

#include "slave_comm.h"
#include "spi.h"
#include "ax25.h"

void slave_send (uint8_t command, char* data, uint8_t size){
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <slave_send+0x16>
    117c:	00 d0       	rcall	.+0      	; 0x117e <slave_send+0x18>
    117e:	1f 92       	push	r1
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	6b 01       	movw	r12, r22
    1188:	f4 2e       	mov	r15, r20

  static uint32_t seq = 0;
  uint16_t crc = 0xFFFF;
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	9f ef       	ldi	r25, 0xFF	; 255
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i, c, tsize = size;
    1192:	4c 83       	std	Y+4, r20	; 0x04
  
  ///Initialize SPI
  init_SPI_trans (SLAVE);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	0e 94 8c 09 	call	0x1318	; 0x1318 <init_SPI_trans>
  
  ///* Start communication
  c = START_SPI;
    119a:	87 ee       	ldi	r24, 0xE7	; 231
    119c:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_START_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	ce 01       	movw	r24, r28
    11a4:	03 96       	adiw	r24, 0x03	; 3
    11a6:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	ce 01       	movw	r24, r28
    11b0:	03 96       	adiw	r24, 0x03	; 3
    11b2:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
  
  ///* Notify the command
  SPI_send ((char *)&command,sizeof (uint8_t));
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	ce 01       	movw	r24, r28
    11bc:	05 96       	adiw	r24, 0x05	; 5
    11be:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
  crc = update_crc_16(command, crc);
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	7a 81       	ldd	r23, Y+2	; 0x02
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
  
  ///* Send size of data
  if((command == HM_DATA) ||(command == REAL_TIME))
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <slave_send+0x74>
    11d6:	85 3d       	cpi	r24, 0xD5	; 213
    11d8:	f1 f5       	brne	.+124    	; 0x1256 <slave_send+0xf0>
  {
    tsize += 4;
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	8c 5f       	subi	r24, 0xFC	; 252
    11de:	8c 83       	std	Y+4, r24	; 0x04
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	ce 01       	movw	r24, r28
    11e6:	04 96       	adiw	r24, 0x04	; 4
    11e8:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    crc = update_crc_16(tsize, crc);
    11ec:	69 81       	ldd	r22, Y+1	; 0x01
    11ee:	7a 81       	ldd	r23, Y+2	; 0x02
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    11fa:	64 e0       	ldi	r22, 0x04	; 4
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	8a e4       	ldi	r24, 0x4A	; 74
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    1206:	0a e4       	ldi	r16, 0x4A	; 74
    1208:	13 e0       	ldi	r17, 0x03	; 3
    120a:	0f 2e       	mov	r0, r31
    120c:	fe e4       	ldi	r31, 0x4E	; 78
    120e:	af 2e       	mov	r10, r31
    1210:	f3 e0       	ldi	r31, 0x03	; 3
    1212:	bf 2e       	mov	r11, r31
    1214:	f0 2d       	mov	r31, r0
    for(i = 0; i < sizeof(uint32_t); i++)
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    1216:	69 81       	ldd	r22, Y+1	; 0x01
    1218:	7a 81       	ldd	r23, Y+2	; 0x02
    121a:	f8 01       	movw	r30, r16
    121c:	81 91       	ld	r24, Z+
    121e:	8f 01       	movw	r16, r30
    1220:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
    tsize += 4;
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    crc = update_crc_16(tsize, crc);
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    for(i = 0; i < sizeof(uint32_t); i++)
    1228:	0a 15       	cp	r16, r10
    122a:	1b 05       	cpc	r17, r11
    122c:	a1 f7       	brne	.-24     	; 0x1216 <slave_send+0xb0>
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    seq++;
    122e:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <seq.2141>
    1232:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <seq.2141+0x1>
    1236:	a0 91 4c 03 	lds	r26, 0x034C	; 0x80034c <seq.2141+0x2>
    123a:	b0 91 4d 03 	lds	r27, 0x034D	; 0x80034d <seq.2141+0x3>
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	a1 1d       	adc	r26, r1
    1242:	b1 1d       	adc	r27, r1
    1244:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <seq.2141>
    1248:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <seq.2141+0x1>
    124c:	a0 93 4c 03 	sts	0x034C, r26	; 0x80034c <seq.2141+0x2>
    1250:	b0 93 4d 03 	sts	0x034D, r27	; 0x80034d <seq.2141+0x3>
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <slave_send+0x10a>
  }
  else
  {
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	ce 01       	movw	r24, r28
    125c:	04 96       	adiw	r24, 0x04	; 4
    125e:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    crc = update_crc_16(tsize, crc);
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	7a 81       	ldd	r23, Y+2	; 0x02
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
    1270:	6f 2d       	mov	r22, r15
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	c6 01       	movw	r24, r12
    1276:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
  for(i = 0; i < size; i++)
    127a:	ff 20       	and	r15, r15
    127c:	a9 f0       	breq	.+42     	; 0x12a8 <slave_send+0x142>
    127e:	86 01       	movw	r16, r12
    1280:	fa 94       	dec	r15
    1282:	ef 2c       	mov	r14, r15
    1284:	f1 2c       	mov	r15, r1
    1286:	ff ef       	ldi	r31, 0xFF	; 255
    1288:	ef 1a       	sub	r14, r31
    128a:	ff 0a       	sbc	r15, r31
    128c:	ec 0c       	add	r14, r12
    128e:	fd 1c       	adc	r15, r13
    crc = update_crc_16(data[i], crc);
    1290:	69 81       	ldd	r22, Y+1	; 0x01
    1292:	7a 81       	ldd	r23, Y+2	; 0x02
    1294:	f8 01       	movw	r30, r16
    1296:	81 91       	ld	r24, Z+
    1298:	8f 01       	movw	r16, r30
    129a:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    crc = update_crc_16(tsize, crc);
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
  for(i = 0; i < size; i++)
    12a2:	0e 15       	cp	r16, r14
    12a4:	1f 05       	cpc	r17, r15
    12a6:	a1 f7       	brne	.-24     	; 0x1290 <slave_send+0x12a>
    crc = update_crc_16(data[i], crc);
    
  ///* Send CRC
  crc = ~crc;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	80 95       	com	r24
    12ae:	90 95       	com	r25
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
  SPI_send ((char *)&crc, sizeof (uint16_t));
    12b4:	62 e0       	ldi	r22, 0x02	; 2
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    
  ///* End communication
  c = END_SPI;
    12c0:	8a ea       	ldi	r24, 0xAA	; 170
    12c2:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_END_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	03 96       	adiw	r24, 0x03	; 3
    12cc:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	ce 01       	movw	r24, r28
    12d6:	03 96       	adiw	r24, 0x03	; 3
    12d8:	0e 94 9b 09 	call	0x1336	; 0x1336 <SPI_send>
      
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	08 95       	ret

000012fc <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDR_SPI &= 0xF0;
    12fc:	87 b3       	in	r24, 0x17	; 23
    12fe:	80 7f       	andi	r24, 0xF0	; 240
    1300:	87 bb       	out	0x17, r24	; 23
  DDR_SPI = _BV(SPICLK) | _BV(SPIDO);
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	87 bb       	out	0x17, r24	; 23
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
    1306:	87 b3       	in	r24, 0x17	; 23
    1308:	81 63       	ori	r24, 0x31	; 49
    130a:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
    130c:	88 b3       	in	r24, 0x18	; 24
    130e:	81 63       	ori	r24, 0x31	; 49
    1310:	88 bb       	out	0x18, r24	; 24

  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    1312:	83 e5       	ldi	r24, 0x53	; 83
    1314:	8d b9       	out	0x0d, r24	; 13
    1316:	08 95       	ret

00001318 <init_SPI_trans>:
}

void init_SPI_trans(uint8_t CS_pin){
  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;
    1318:	98 b3       	in	r25, 0x18	; 24
    131a:	91 63       	ori	r25, 0x31	; 49
    131c:	98 bb       	out	0x18, r25	; 24
  cbi (PORT_CS, CS_pin);
    131e:	98 b3       	in	r25, 0x18	; 24
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <init_SPI_trans+0x12>
    1326:	22 0f       	add	r18, r18
    1328:	33 1f       	adc	r19, r19
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <init_SPI_trans+0xe>
    132e:	20 95       	com	r18
    1330:	29 23       	and	r18, r25
    1332:	28 bb       	out	0x18, r18	; 24
    1334:	08 95       	ret

00001336 <SPI_send>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    1336:	61 15       	cp	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	51 f0       	breq	.+20     	; 0x1350 <SPI_send+0x1a>
    133c:	fc 01       	movw	r30, r24
    133e:	68 0f       	add	r22, r24
    1340:	79 1f       	adc	r23, r25
  {
	 ///* Send one char
    SPDR = str[i];
    1342:	91 91       	ld	r25, Z+
    1344:	9f b9       	out	0x0f, r25	; 15
	 ///* Wait for SPIF flag to be set (TX complete)
    while(!(SPSR & (1<<SPIF)));
    1346:	77 9b       	sbis	0x0e, 7	; 14
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <SPI_send+0x10>

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    134a:	e6 17       	cp	r30, r22
    134c:	f7 07       	cpc	r31, r23
    134e:	c9 f7       	brne	.-14     	; 0x1342 <SPI_send+0xc>
    1350:	08 95       	ret

00001352 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
    1352:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
    1354:	77 9b       	sbis	0x0e, 7	; 14
    1356:	fe cf       	rjmp	.-4      	; 0x1354 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
    1358:	8f b1       	in	r24, 0x0f	; 15
}
    135a:	08 95       	ret

0000135c <end_SPI>:

void end_SPI(void)
{
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;	
    135c:	88 b3       	in	r24, 0x18	; 24
    135e:	81 63       	ori	r24, 0x31	; 49
    1360:	88 bb       	out	0x18, r24	; 24
    1362:	08 95       	ret

00001364 <configure_SS>:
#include "peripherals.h"

void configure_SS(void)
{
  ///Set PD and range pins as output
  sbi(DDRB, PB6);
    1364:	be 9a       	sbi	0x17, 6	; 23
  ///Set PD high: power up the ADC IC
  sbi(PORTB, PB6);
    1366:	c6 9a       	sbi	0x18, 6	; 24
    1368:	08 95       	ret

0000136a <poll_SS>:
  sbi(PORTB, ADC_S);
  _delay_us(1);*/
}

void poll_SS(void)
{
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    cbi(PORTB, ADC_S);
    1378:	c5 98       	cbi	0x18, 5	; 24
    SPI_transfer(0b00011000 | (channel >> 1));
    137a:	c0 2f       	mov	r28, r16
    137c:	c6 95       	lsr	r28
    137e:	c8 61       	ori	r28, 0x18	; 24
    1380:	8c 2f       	mov	r24, r28
    1382:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    1386:	c8 01       	movw	r24, r16
    1388:	96 95       	lsr	r25
    138a:	98 2f       	mov	r25, r24
    138c:	88 27       	eor	r24, r24
    138e:	97 95       	ror	r25
    1390:	87 95       	ror	r24
    1392:	28 2f       	mov	r18, r24
    1394:	20 64       	ori	r18, 0x40	; 64
    1396:	f2 2e       	mov	r15, r18
    1398:	82 2f       	mov	r24, r18
    139a:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    sbi(PORTB, ADC_S);
    139e:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	8a 95       	dec	r24
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <poll_SS+0x38>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <poll_SS+0x3e>
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    13a8:	c5 98       	cbi	0x18, 5	; 24
    SPI_transfer(0b00011000 | (channel >> 1));
    13aa:	8c 2f       	mov	r24, r28
    13ac:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    13b0:	8f 2d       	mov	r24, r15
    13b2:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    sbi(PORTB, ADC_S);
    13b6:	c5 9a       	sbi	0x18, 5	; 24
    13b8:	22 e0       	ldi	r18, 0x02	; 2
    13ba:	2a 95       	dec	r18
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <poll_SS+0x50>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <poll_SS+0x56>
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    13c0:	c5 98       	cbi	0x18, 5	; 24
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
    13c2:	8c 2f       	mov	r24, r28
    13c4:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	e8 01       	movw	r28, r16
    13cc:	cc 0f       	add	r28, r28
    13ce:	dd 1f       	adc	r29, r29
    13d0:	c0 52       	subi	r28, 0x20	; 32
    13d2:	dc 4f       	sbci	r29, 0xFC	; 252
    13d4:	9e a7       	std	Y+46, r25	; 0x2e
    13d6:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    13d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13da:	9e a5       	ldd	r25, Y+46	; 0x2e
    13dc:	98 2f       	mov	r25, r24
    13de:	88 27       	eor	r24, r24
    13e0:	9e a7       	std	Y+46, r25	; 0x2e
    13e2:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] &= 0x0F00;
    13e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e8:	88 27       	eor	r24, r24
    13ea:	9f 70       	andi	r25, 0x0F	; 15
    13ec:	9e a7       	std	Y+46, r25	; 0x2e
    13ee:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x40);
    13f0:	8f 2d       	mov	r24, r15
    13f2:	0e 94 a9 09 	call	0x1352	; 0x1352 <SPI_transfer>
    13f6:	2d a5       	ldd	r18, Y+45	; 0x2d
    13f8:	3e a5       	ldd	r19, Y+46	; 0x2e
    13fa:	28 2b       	or	r18, r24
    13fc:	3e a7       	std	Y+46, r19	; 0x2e
    13fe:	2d a7       	std	Y+45, r18	; 0x2d
    sbi(PORTB, ADC_S);
    1400:	c5 9a       	sbi	0x18, 5	; 24
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	8a 95       	dec	r24
    1406:	f1 f7       	brne	.-4      	; 0x1404 <poll_SS+0x9a>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <poll_SS+0xa0>
    140a:	0f 5f       	subi	r16, 0xFF	; 255
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
    140e:	06 30       	cpi	r16, 0x06	; 6
    1410:	11 05       	cpc	r17, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <poll_SS+0xac>
    1414:	b1 cf       	rjmp	.-158    	; 0x1378 <poll_SS+0xe>
    
    channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
    1416:	c6 98       	cbi	0x18, 6	; 24
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	08 95       	ret

00001424 <init_TWI>:
#include <util/twi.h>

void init_TWI(void) {
  /// <b>Execution</b> <br><br>
  ///Initialize TWI clock: 50 kHz clock, TWPS = 0 => prescaler = 1 
  TWSR = 0;
    1424:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWCR = 0;
    1428:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  TWBR = 72;
    142c:	88 e4       	ldi	r24, 0x48	; 72
    142e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1432:	08 95       	ret

00001434 <TWI_rec_byte>:
int TWI_rec_byte(uint8_t addr, uint8_t *buf){

  ///Transmit Address
  do{						
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1434:	e4 e7       	ldi	r30, 0x74	; 116
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	24 ea       	ldi	r18, 0xA4	; 164
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);
    143a:	a1 e7       	ldi	r26, 0x71	; 113
    143c:	b0 e0       	ldi	r27, 0x00	; 0
int TWI_rec_byte(uint8_t addr, uint8_t *buf){

  ///Transmit Address
  do{						
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    143e:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT)));
    1440:	90 81       	ld	r25, Z
    1442:	99 23       	and	r25, r25
    1444:	ec f7       	brge	.-6      	; 0x1440 <TWI_rec_byte+0xc>
  }while(TW_STATUS == TW_MT_ARB_LOST);
    1446:	9c 91       	ld	r25, X
    1448:	98 7f       	andi	r25, 0xF8	; 248
    144a:	98 33       	cpi	r25, 0x38	; 56
    144c:	c1 f3       	breq	.-16     	; 0x143e <TWI_rec_byte+0xa>

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
    144e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1452:	98 7f       	andi	r25, 0xF8	; 248
    1454:	90 31       	cpi	r25, 0x10	; 16
    1456:	31 f0       	breq	.+12     	; 0x1464 <TWI_rec_byte+0x30>
    1458:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    145c:	98 7f       	andi	r25, 0xF8	; 248
    145e:	98 30       	cpi	r25, 0x08	; 8
    1460:	09 f0       	breq	.+2      	; 0x1464 <TWI_rec_byte+0x30>
    1462:	4a c0       	rjmp	.+148    	; 0x14f8 <TWI_rec_byte+0xc4>

  TWDR = (addr << 1) + TW_READ;
    1464:	88 0f       	add	r24, r24
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWCR = (1 << TWINT) | (1 << TWEN);
    146c:	84 e8       	ldi	r24, 0x84	; 132
    146e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>

  while (!(TWCR & (1 << TWINT)));
    1472:	e4 e7       	ldi	r30, 0x74	; 116
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	88 23       	and	r24, r24
    147a:	ec f7       	brge	.-6      	; 0x1476 <TWI_rec_byte+0x42>
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
    147c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1480:	88 7f       	andi	r24, 0xF8	; 248
    1482:	88 34       	cpi	r24, 0x48	; 72
    1484:	31 f4       	brne	.+12     	; 0x1492 <TWI_rec_byte+0x5e>
    1486:	84 e9       	ldi	r24, 0x94	; 148
    1488:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	08 95       	ret
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
    1492:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	88 33       	cpi	r24, 0x38	; 56
    149a:	89 f1       	breq	.+98     	; 0x14fe <TWI_rec_byte+0xca>
  if (TW_STATUS != TW_MR_SLA_ACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
    149c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    14a0:	88 7f       	andi	r24, 0xF8	; 248
    14a2:	80 34       	cpi	r24, 0x40	; 64
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <TWI_rec_byte+0x7e>
    14a6:	84 e9       	ldi	r24, 0x94	; 148
    14a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	08 95       	ret
    14b2:	85 e8       	ldi	r24, 0x85	; 133
    14b4:	8a 95       	dec	r24
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <TWI_rec_byte+0x80>
    14b8:	00 00       	nop

  _delay_us(50);

  ///Receive Data
  TWCR = (1 << TWINT) | (1 << TWEN);
    14ba:	84 e8       	ldi	r24, 0x84	; 132
    14bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  while (!(TWCR & (1 << TWINT)));
    14c0:	e4 e7       	ldi	r30, 0x74	; 116
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	ec f7       	brge	.-6      	; 0x14c4 <TWI_rec_byte+0x90>
  switch (TW_STATUS) {
    14ca:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    14ce:	88 7f       	andi	r24, 0xF8	; 248
    14d0:	80 35       	cpi	r24, 0x50	; 80
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <TWI_rec_byte+0xa4>
    14d4:	88 35       	cpi	r24, 0x58	; 88
    14d6:	51 f4       	brne	.+20     	; 0x14ec <TWI_rec_byte+0xb8>
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    14d8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    14dc:	fb 01       	movw	r30, r22
    14de:	80 83       	st	Z, r24
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
    14e0:	84 e9       	ldi	r24, 0x94	; 148
    14e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	08 95       	ret
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
    14ec:	84 e9       	ldi	r24, 0x94	; 148
    14ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	08 95       	ret
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	08 95       	ret
  TWDR = (addr << 1) + TW_READ;
  TWCR = (1 << TWINT) | (1 << TWEN);

  while (!(TWCR & (1 << TWINT)));
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
    14fe:	8e ef       	ldi	r24, 0xFE	; 254
    1500:	9f ef       	ldi	r25, 0xFF	; 255
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
}
    1502:	08 95       	ret

00001504 <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
    1504:	1b b8       	out	0x0b, r1	; 11
    1506:	1a b8       	out	0x0a, r1	; 10
    1508:	e5 e9       	ldi	r30, 0x95	; 149
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	10 82       	st	Z, r1
    150e:	59 9a       	sbi	0x0b, 1	; 11
    1510:	8a b1       	in	r24, 0x0a	; 10
    1512:	88 61       	ori	r24, 0x18	; 24
    1514:	8a b9       	out	0x0a, r24	; 10
    1516:	80 81       	ld	r24, Z
    1518:	8e 60       	ori	r24, 0x0E	; 14
    151a:	80 83       	st	Z, r24
    151c:	87 e6       	ldi	r24, 0x67	; 103
    151e:	89 b9       	out	0x09, r24	; 9
    1520:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1524:	08 95       	ret

00001526 <transmit_UART0>:
    1526:	5d 9b       	sbis	0x0b, 5	; 11
    1528:	fe cf       	rjmp	.-4      	; 0x1526 <transmit_UART0>
    152a:	8c b9       	out	0x0c, r24	; 12
    152c:	08 95       	ret

0000152e <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
    152e:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    1530:	90 81       	ld	r25, Z
    1532:	99 23       	and	r25, r25
    1534:	39 f0       	breq	.+14     	; 0x1544 <transmit_string_UART0+0x16>
    1536:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
    1538:	5d 9b       	sbis	0x0b, 5	; 11
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
    153c:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    153e:	91 91       	ld	r25, Z+
    1540:	91 11       	cpse	r25, r1
    1542:	fa cf       	rjmp	.-12     	; 0x1538 <transmit_string_UART0+0xa>
    1544:	08 95       	ret

00001546 <__fixunssfsi>:
    1546:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_splitA>
    154a:	88 f0       	brcs	.+34     	; 0x156e <__fixunssfsi+0x28>
    154c:	9f 57       	subi	r25, 0x7F	; 127
    154e:	98 f0       	brcs	.+38     	; 0x1576 <__fixunssfsi+0x30>
    1550:	b9 2f       	mov	r27, r25
    1552:	99 27       	eor	r25, r25
    1554:	b7 51       	subi	r27, 0x17	; 23
    1556:	b0 f0       	brcs	.+44     	; 0x1584 <__fixunssfsi+0x3e>
    1558:	e1 f0       	breq	.+56     	; 0x1592 <__fixunssfsi+0x4c>
    155a:	66 0f       	add	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	1a f0       	brmi	.+6      	; 0x156a <__fixunssfsi+0x24>
    1564:	ba 95       	dec	r27
    1566:	c9 f7       	brne	.-14     	; 0x155a <__fixunssfsi+0x14>
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <__fixunssfsi+0x4c>
    156a:	b1 30       	cpi	r27, 0x01	; 1
    156c:	91 f0       	breq	.+36     	; 0x1592 <__fixunssfsi+0x4c>
    156e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_zero>
    1572:	b1 e0       	ldi	r27, 0x01	; 1
    1574:	08 95       	ret
    1576:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_zero>
    157a:	67 2f       	mov	r22, r23
    157c:	78 2f       	mov	r23, r24
    157e:	88 27       	eor	r24, r24
    1580:	b8 5f       	subi	r27, 0xF8	; 248
    1582:	39 f0       	breq	.+14     	; 0x1592 <__fixunssfsi+0x4c>
    1584:	b9 3f       	cpi	r27, 0xF9	; 249
    1586:	cc f3       	brlt	.-14     	; 0x157a <__fixunssfsi+0x34>
    1588:	86 95       	lsr	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b3 95       	inc	r27
    1590:	d9 f7       	brne	.-10     	; 0x1588 <__fixunssfsi+0x42>
    1592:	3e f4       	brtc	.+14     	; 0x15a2 <__fixunssfsi+0x5c>
    1594:	90 95       	com	r25
    1596:	80 95       	com	r24
    1598:	70 95       	com	r23
    159a:	61 95       	neg	r22
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	8f 4f       	sbci	r24, 0xFF	; 255
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	08 95       	ret

000015a4 <__floatunsisf>:
    15a4:	e8 94       	clt
    15a6:	09 c0       	rjmp	.+18     	; 0x15ba <__floatsisf+0x12>

000015a8 <__floatsisf>:
    15a8:	97 fb       	bst	r25, 7
    15aa:	3e f4       	brtc	.+14     	; 0x15ba <__floatsisf+0x12>
    15ac:	90 95       	com	r25
    15ae:	80 95       	com	r24
    15b0:	70 95       	com	r23
    15b2:	61 95       	neg	r22
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	99 23       	and	r25, r25
    15bc:	a9 f0       	breq	.+42     	; 0x15e8 <__floatsisf+0x40>
    15be:	f9 2f       	mov	r31, r25
    15c0:	96 e9       	ldi	r25, 0x96	; 150
    15c2:	bb 27       	eor	r27, r27
    15c4:	93 95       	inc	r25
    15c6:	f6 95       	lsr	r31
    15c8:	87 95       	ror	r24
    15ca:	77 95       	ror	r23
    15cc:	67 95       	ror	r22
    15ce:	b7 95       	ror	r27
    15d0:	f1 11       	cpse	r31, r1
    15d2:	f8 cf       	rjmp	.-16     	; 0x15c4 <__floatsisf+0x1c>
    15d4:	fa f4       	brpl	.+62     	; 0x1614 <__floatsisf+0x6c>
    15d6:	bb 0f       	add	r27, r27
    15d8:	11 f4       	brne	.+4      	; 0x15de <__floatsisf+0x36>
    15da:	60 ff       	sbrs	r22, 0
    15dc:	1b c0       	rjmp	.+54     	; 0x1614 <__floatsisf+0x6c>
    15de:	6f 5f       	subi	r22, 0xFF	; 255
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8f 4f       	sbci	r24, 0xFF	; 255
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	16 c0       	rjmp	.+44     	; 0x1614 <__floatsisf+0x6c>
    15e8:	88 23       	and	r24, r24
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <__floatsisf+0x48>
    15ec:	96 e9       	ldi	r25, 0x96	; 150
    15ee:	11 c0       	rjmp	.+34     	; 0x1612 <__floatsisf+0x6a>
    15f0:	77 23       	and	r23, r23
    15f2:	21 f0       	breq	.+8      	; 0x15fc <__floatsisf+0x54>
    15f4:	9e e8       	ldi	r25, 0x8E	; 142
    15f6:	87 2f       	mov	r24, r23
    15f8:	76 2f       	mov	r23, r22
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <__floatsisf+0x5e>
    15fc:	66 23       	and	r22, r22
    15fe:	71 f0       	breq	.+28     	; 0x161c <__floatsisf+0x74>
    1600:	96 e8       	ldi	r25, 0x86	; 134
    1602:	86 2f       	mov	r24, r22
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	2a f0       	brmi	.+10     	; 0x1614 <__floatsisf+0x6c>
    160a:	9a 95       	dec	r25
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	da f7       	brpl	.-10     	; 0x160a <__floatsisf+0x62>
    1614:	88 0f       	add	r24, r24
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__fp_split3>:
    161e:	57 fd       	sbrc	r21, 7
    1620:	90 58       	subi	r25, 0x80	; 128
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	59 f0       	breq	.+22     	; 0x163e <__fp_splitA+0x10>
    1628:	5f 3f       	cpi	r21, 0xFF	; 255
    162a:	71 f0       	breq	.+28     	; 0x1648 <__fp_splitA+0x1a>
    162c:	47 95       	ror	r20

0000162e <__fp_splitA>:
    162e:	88 0f       	add	r24, r24
    1630:	97 fb       	bst	r25, 7
    1632:	99 1f       	adc	r25, r25
    1634:	61 f0       	breq	.+24     	; 0x164e <__fp_splitA+0x20>
    1636:	9f 3f       	cpi	r25, 0xFF	; 255
    1638:	79 f0       	breq	.+30     	; 0x1658 <__fp_splitA+0x2a>
    163a:	87 95       	ror	r24
    163c:	08 95       	ret
    163e:	12 16       	cp	r1, r18
    1640:	13 06       	cpc	r1, r19
    1642:	14 06       	cpc	r1, r20
    1644:	55 1f       	adc	r21, r21
    1646:	f2 cf       	rjmp	.-28     	; 0x162c <__fp_split3+0xe>
    1648:	46 95       	lsr	r20
    164a:	f1 df       	rcall	.-30     	; 0x162e <__fp_splitA>
    164c:	08 c0       	rjmp	.+16     	; 0x165e <__fp_splitA+0x30>
    164e:	16 16       	cp	r1, r22
    1650:	17 06       	cpc	r1, r23
    1652:	18 06       	cpc	r1, r24
    1654:	99 1f       	adc	r25, r25
    1656:	f1 cf       	rjmp	.-30     	; 0x163a <__fp_splitA+0xc>
    1658:	86 95       	lsr	r24
    165a:	71 05       	cpc	r23, r1
    165c:	61 05       	cpc	r22, r1
    165e:	08 94       	sec
    1660:	08 95       	ret

00001662 <__fp_zero>:
    1662:	e8 94       	clt

00001664 <__fp_szero>:
    1664:	bb 27       	eor	r27, r27
    1666:	66 27       	eor	r22, r22
    1668:	77 27       	eor	r23, r23
    166a:	cb 01       	movw	r24, r22
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__mulsf3>:
    1670:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__mulsf3x>
    1674:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_round>
    1678:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_pscA>
    167c:	38 f0       	brcs	.+14     	; 0x168c <__mulsf3+0x1c>
    167e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__fp_pscB>
    1682:	20 f0       	brcs	.+8      	; 0x168c <__mulsf3+0x1c>
    1684:	95 23       	and	r25, r21
    1686:	11 f0       	breq	.+4      	; 0x168c <__mulsf3+0x1c>
    1688:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_inf>
    168c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__fp_nan>
    1690:	11 24       	eor	r1, r1
    1692:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>

00001696 <__mulsf3x>:
    1696:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_split3>
    169a:	70 f3       	brcs	.-36     	; 0x1678 <__mulsf3+0x8>

0000169c <__mulsf3_pse>:
    169c:	95 9f       	mul	r25, r21
    169e:	c1 f3       	breq	.-16     	; 0x1690 <__mulsf3+0x20>
    16a0:	95 0f       	add	r25, r21
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	55 1f       	adc	r21, r21
    16a6:	62 9f       	mul	r22, r18
    16a8:	f0 01       	movw	r30, r0
    16aa:	72 9f       	mul	r23, r18
    16ac:	bb 27       	eor	r27, r27
    16ae:	f0 0d       	add	r31, r0
    16b0:	b1 1d       	adc	r27, r1
    16b2:	63 9f       	mul	r22, r19
    16b4:	aa 27       	eor	r26, r26
    16b6:	f0 0d       	add	r31, r0
    16b8:	b1 1d       	adc	r27, r1
    16ba:	aa 1f       	adc	r26, r26
    16bc:	64 9f       	mul	r22, r20
    16be:	66 27       	eor	r22, r22
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	66 1f       	adc	r22, r22
    16c6:	82 9f       	mul	r24, r18
    16c8:	22 27       	eor	r18, r18
    16ca:	b0 0d       	add	r27, r0
    16cc:	a1 1d       	adc	r26, r1
    16ce:	62 1f       	adc	r22, r18
    16d0:	73 9f       	mul	r23, r19
    16d2:	b0 0d       	add	r27, r0
    16d4:	a1 1d       	adc	r26, r1
    16d6:	62 1f       	adc	r22, r18
    16d8:	83 9f       	mul	r24, r19
    16da:	a0 0d       	add	r26, r0
    16dc:	61 1d       	adc	r22, r1
    16de:	22 1f       	adc	r18, r18
    16e0:	74 9f       	mul	r23, r20
    16e2:	33 27       	eor	r19, r19
    16e4:	a0 0d       	add	r26, r0
    16e6:	61 1d       	adc	r22, r1
    16e8:	23 1f       	adc	r18, r19
    16ea:	84 9f       	mul	r24, r20
    16ec:	60 0d       	add	r22, r0
    16ee:	21 1d       	adc	r18, r1
    16f0:	82 2f       	mov	r24, r18
    16f2:	76 2f       	mov	r23, r22
    16f4:	6a 2f       	mov	r22, r26
    16f6:	11 24       	eor	r1, r1
    16f8:	9f 57       	subi	r25, 0x7F	; 127
    16fa:	50 40       	sbci	r21, 0x00	; 0
    16fc:	9a f0       	brmi	.+38     	; 0x1724 <__mulsf3_pse+0x88>
    16fe:	f1 f0       	breq	.+60     	; 0x173c <__mulsf3_pse+0xa0>
    1700:	88 23       	and	r24, r24
    1702:	4a f0       	brmi	.+18     	; 0x1716 <__mulsf3_pse+0x7a>
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	bb 1f       	adc	r27, r27
    170a:	66 1f       	adc	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	91 50       	subi	r25, 0x01	; 1
    1712:	50 40       	sbci	r21, 0x00	; 0
    1714:	a9 f7       	brne	.-22     	; 0x1700 <__mulsf3_pse+0x64>
    1716:	9e 3f       	cpi	r25, 0xFE	; 254
    1718:	51 05       	cpc	r21, r1
    171a:	80 f0       	brcs	.+32     	; 0x173c <__mulsf3_pse+0xa0>
    171c:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_inf>
    1720:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_szero>
    1724:	5f 3f       	cpi	r21, 0xFF	; 255
    1726:	e4 f3       	brlt	.-8      	; 0x1720 <__mulsf3_pse+0x84>
    1728:	98 3e       	cpi	r25, 0xE8	; 232
    172a:	d4 f3       	brlt	.-12     	; 0x1720 <__mulsf3_pse+0x84>
    172c:	86 95       	lsr	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b7 95       	ror	r27
    1734:	f7 95       	ror	r31
    1736:	e7 95       	ror	r30
    1738:	9f 5f       	subi	r25, 0xFF	; 255
    173a:	c1 f7       	brne	.-16     	; 0x172c <__mulsf3_pse+0x90>
    173c:	fe 2b       	or	r31, r30
    173e:	88 0f       	add	r24, r24
    1740:	91 1d       	adc	r25, r1
    1742:	96 95       	lsr	r25
    1744:	87 95       	ror	r24
    1746:	97 f9       	bld	r25, 7
    1748:	08 95       	ret

0000174a <__fp_inf>:
    174a:	97 f9       	bld	r25, 7
    174c:	9f 67       	ori	r25, 0x7F	; 127
    174e:	80 e8       	ldi	r24, 0x80	; 128
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	08 95       	ret

00001756 <__fp_nan>:
    1756:	9f ef       	ldi	r25, 0xFF	; 255
    1758:	80 ec       	ldi	r24, 0xC0	; 192
    175a:	08 95       	ret

0000175c <__fp_pscA>:
    175c:	00 24       	eor	r0, r0
    175e:	0a 94       	dec	r0
    1760:	16 16       	cp	r1, r22
    1762:	17 06       	cpc	r1, r23
    1764:	18 06       	cpc	r1, r24
    1766:	09 06       	cpc	r0, r25
    1768:	08 95       	ret

0000176a <__fp_pscB>:
    176a:	00 24       	eor	r0, r0
    176c:	0a 94       	dec	r0
    176e:	12 16       	cp	r1, r18
    1770:	13 06       	cpc	r1, r19
    1772:	14 06       	cpc	r1, r20
    1774:	05 06       	cpc	r0, r21
    1776:	08 95       	ret

00001778 <__fp_round>:
    1778:	09 2e       	mov	r0, r25
    177a:	03 94       	inc	r0
    177c:	00 0c       	add	r0, r0
    177e:	11 f4       	brne	.+4      	; 0x1784 <__fp_round+0xc>
    1780:	88 23       	and	r24, r24
    1782:	52 f0       	brmi	.+20     	; 0x1798 <__fp_round+0x20>
    1784:	bb 0f       	add	r27, r27
    1786:	40 f4       	brcc	.+16     	; 0x1798 <__fp_round+0x20>
    1788:	bf 2b       	or	r27, r31
    178a:	11 f4       	brne	.+4      	; 0x1790 <__fp_round+0x18>
    178c:	60 ff       	sbrs	r22, 0
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__fp_round+0x20>
    1790:	6f 5f       	subi	r22, 0xFF	; 255
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	08 95       	ret

0000179a <sprintf>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	2e 97       	sbiw	r28, 0x0e	; 14
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	0d 89       	ldd	r16, Y+21	; 0x15
    17b4:	1e 89       	ldd	r17, Y+22	; 0x16
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	8c 83       	std	Y+4, r24	; 0x04
    17ba:	1a 83       	std	Y+2, r17	; 0x02
    17bc:	09 83       	std	Y+1, r16	; 0x01
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f e7       	ldi	r25, 0x7F	; 127
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	ae 01       	movw	r20, r28
    17c8:	47 5e       	subi	r20, 0xE7	; 231
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	6f 89       	ldd	r22, Y+23	; 0x17
    17ce:	78 8d       	ldd	r23, Y+24	; 0x18
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <vfprintf>
    17d8:	2f 81       	ldd	r18, Y+7	; 0x07
    17da:	38 85       	ldd	r19, Y+8	; 0x08
    17dc:	f8 01       	movw	r30, r16
    17de:	e2 0f       	add	r30, r18
    17e0:	f3 1f       	adc	r31, r19
    17e2:	10 82       	st	Z, r1
    17e4:	2e 96       	adiw	r28, 0x0e	; 14
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <vfprintf>:
    17fa:	2f 92       	push	r2
    17fc:	3f 92       	push	r3
    17fe:	4f 92       	push	r4
    1800:	5f 92       	push	r5
    1802:	6f 92       	push	r6
    1804:	7f 92       	push	r7
    1806:	8f 92       	push	r8
    1808:	9f 92       	push	r9
    180a:	af 92       	push	r10
    180c:	bf 92       	push	r11
    180e:	cf 92       	push	r12
    1810:	df 92       	push	r13
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	2c 97       	sbiw	r28, 0x0c	; 12
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	7c 01       	movw	r14, r24
    1830:	6b 01       	movw	r12, r22
    1832:	8a 01       	movw	r16, r20
    1834:	fc 01       	movw	r30, r24
    1836:	17 82       	std	Z+7, r1	; 0x07
    1838:	16 82       	std	Z+6, r1	; 0x06
    183a:	83 81       	ldd	r24, Z+3	; 0x03
    183c:	81 ff       	sbrs	r24, 1
    183e:	bd c1       	rjmp	.+890    	; 0x1bba <vfprintf+0x3c0>
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	4c 01       	movw	r8, r24
    1846:	f7 01       	movw	r30, r14
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	f6 01       	movw	r30, r12
    184c:	93 fd       	sbrc	r25, 3
    184e:	85 91       	lpm	r24, Z+
    1850:	93 ff       	sbrs	r25, 3
    1852:	81 91       	ld	r24, Z+
    1854:	6f 01       	movw	r12, r30
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <vfprintf+0x62>
    185a:	ab c1       	rjmp	.+854    	; 0x1bb2 <vfprintf+0x3b8>
    185c:	85 32       	cpi	r24, 0x25	; 37
    185e:	39 f4       	brne	.+14     	; 0x186e <vfprintf+0x74>
    1860:	93 fd       	sbrc	r25, 3
    1862:	85 91       	lpm	r24, Z+
    1864:	93 ff       	sbrs	r25, 3
    1866:	81 91       	ld	r24, Z+
    1868:	6f 01       	movw	r12, r30
    186a:	85 32       	cpi	r24, 0x25	; 37
    186c:	29 f4       	brne	.+10     	; 0x1878 <vfprintf+0x7e>
    186e:	b7 01       	movw	r22, r14
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1876:	e7 cf       	rjmp	.-50     	; 0x1846 <vfprintf+0x4c>
    1878:	51 2c       	mov	r5, r1
    187a:	31 2c       	mov	r3, r1
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	20 32       	cpi	r18, 0x20	; 32
    1880:	a0 f4       	brcc	.+40     	; 0x18aa <vfprintf+0xb0>
    1882:	8b 32       	cpi	r24, 0x2B	; 43
    1884:	69 f0       	breq	.+26     	; 0x18a0 <vfprintf+0xa6>
    1886:	30 f4       	brcc	.+12     	; 0x1894 <vfprintf+0x9a>
    1888:	80 32       	cpi	r24, 0x20	; 32
    188a:	59 f0       	breq	.+22     	; 0x18a2 <vfprintf+0xa8>
    188c:	83 32       	cpi	r24, 0x23	; 35
    188e:	69 f4       	brne	.+26     	; 0x18aa <vfprintf+0xb0>
    1890:	20 61       	ori	r18, 0x10	; 16
    1892:	2c c0       	rjmp	.+88     	; 0x18ec <vfprintf+0xf2>
    1894:	8d 32       	cpi	r24, 0x2D	; 45
    1896:	39 f0       	breq	.+14     	; 0x18a6 <vfprintf+0xac>
    1898:	80 33       	cpi	r24, 0x30	; 48
    189a:	39 f4       	brne	.+14     	; 0x18aa <vfprintf+0xb0>
    189c:	21 60       	ori	r18, 0x01	; 1
    189e:	26 c0       	rjmp	.+76     	; 0x18ec <vfprintf+0xf2>
    18a0:	22 60       	ori	r18, 0x02	; 2
    18a2:	24 60       	ori	r18, 0x04	; 4
    18a4:	23 c0       	rjmp	.+70     	; 0x18ec <vfprintf+0xf2>
    18a6:	28 60       	ori	r18, 0x08	; 8
    18a8:	21 c0       	rjmp	.+66     	; 0x18ec <vfprintf+0xf2>
    18aa:	27 fd       	sbrc	r18, 7
    18ac:	27 c0       	rjmp	.+78     	; 0x18fc <vfprintf+0x102>
    18ae:	30 ed       	ldi	r19, 0xD0	; 208
    18b0:	38 0f       	add	r19, r24
    18b2:	3a 30       	cpi	r19, 0x0A	; 10
    18b4:	78 f4       	brcc	.+30     	; 0x18d4 <vfprintf+0xda>
    18b6:	26 ff       	sbrs	r18, 6
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0xcc>
    18ba:	fa e0       	ldi	r31, 0x0A	; 10
    18bc:	5f 9e       	mul	r5, r31
    18be:	30 0d       	add	r19, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	53 2e       	mov	r5, r19
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <vfprintf+0xf2>
    18c6:	8a e0       	ldi	r24, 0x0A	; 10
    18c8:	38 9e       	mul	r3, r24
    18ca:	30 0d       	add	r19, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	33 2e       	mov	r3, r19
    18d0:	20 62       	ori	r18, 0x20	; 32
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <vfprintf+0xf2>
    18d4:	8e 32       	cpi	r24, 0x2E	; 46
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <vfprintf+0xe6>
    18d8:	26 fd       	sbrc	r18, 6
    18da:	6b c1       	rjmp	.+726    	; 0x1bb2 <vfprintf+0x3b8>
    18dc:	20 64       	ori	r18, 0x40	; 64
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0xf2>
    18e0:	8c 36       	cpi	r24, 0x6C	; 108
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <vfprintf+0xee>
    18e4:	20 68       	ori	r18, 0x80	; 128
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0xf2>
    18e8:	88 36       	cpi	r24, 0x68	; 104
    18ea:	41 f4       	brne	.+16     	; 0x18fc <vfprintf+0x102>
    18ec:	f6 01       	movw	r30, r12
    18ee:	93 fd       	sbrc	r25, 3
    18f0:	85 91       	lpm	r24, Z+
    18f2:	93 ff       	sbrs	r25, 3
    18f4:	81 91       	ld	r24, Z+
    18f6:	6f 01       	movw	r12, r30
    18f8:	81 11       	cpse	r24, r1
    18fa:	c1 cf       	rjmp	.-126    	; 0x187e <vfprintf+0x84>
    18fc:	98 2f       	mov	r25, r24
    18fe:	9f 7d       	andi	r25, 0xDF	; 223
    1900:	95 54       	subi	r25, 0x45	; 69
    1902:	93 30       	cpi	r25, 0x03	; 3
    1904:	28 f4       	brcc	.+10     	; 0x1910 <vfprintf+0x116>
    1906:	0c 5f       	subi	r16, 0xFC	; 252
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	ff e3       	ldi	r31, 0x3F	; 63
    190c:	f9 83       	std	Y+1, r31	; 0x01
    190e:	0d c0       	rjmp	.+26     	; 0x192a <vfprintf+0x130>
    1910:	83 36       	cpi	r24, 0x63	; 99
    1912:	31 f0       	breq	.+12     	; 0x1920 <vfprintf+0x126>
    1914:	83 37       	cpi	r24, 0x73	; 115
    1916:	71 f0       	breq	.+28     	; 0x1934 <vfprintf+0x13a>
    1918:	83 35       	cpi	r24, 0x53	; 83
    191a:	09 f0       	breq	.+2      	; 0x191e <vfprintf+0x124>
    191c:	5b c0       	rjmp	.+182    	; 0x19d4 <vfprintf+0x1da>
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <vfprintf+0x16a>
    1920:	f8 01       	movw	r30, r16
    1922:	80 81       	ld	r24, Z
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	0e 5f       	subi	r16, 0xFE	; 254
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	44 24       	eor	r4, r4
    192c:	43 94       	inc	r4
    192e:	51 2c       	mov	r5, r1
    1930:	54 01       	movw	r10, r8
    1932:	15 c0       	rjmp	.+42     	; 0x195e <vfprintf+0x164>
    1934:	38 01       	movw	r6, r16
    1936:	f2 e0       	ldi	r31, 0x02	; 2
    1938:	6f 0e       	add	r6, r31
    193a:	71 1c       	adc	r7, r1
    193c:	f8 01       	movw	r30, r16
    193e:	a0 80       	ld	r10, Z
    1940:	b1 80       	ldd	r11, Z+1	; 0x01
    1942:	26 ff       	sbrs	r18, 6
    1944:	03 c0       	rjmp	.+6      	; 0x194c <vfprintf+0x152>
    1946:	65 2d       	mov	r22, r5
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <vfprintf+0x156>
    194c:	6f ef       	ldi	r22, 0xFF	; 255
    194e:	7f ef       	ldi	r23, 0xFF	; 255
    1950:	c5 01       	movw	r24, r10
    1952:	2c 87       	std	Y+12, r18	; 0x0c
    1954:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <strnlen>
    1958:	2c 01       	movw	r4, r24
    195a:	83 01       	movw	r16, r6
    195c:	2c 85       	ldd	r18, Y+12	; 0x0c
    195e:	2f 77       	andi	r18, 0x7F	; 127
    1960:	22 2e       	mov	r2, r18
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <vfprintf+0x198>
    1964:	38 01       	movw	r6, r16
    1966:	f2 e0       	ldi	r31, 0x02	; 2
    1968:	6f 0e       	add	r6, r31
    196a:	71 1c       	adc	r7, r1
    196c:	f8 01       	movw	r30, r16
    196e:	a0 80       	ld	r10, Z
    1970:	b1 80       	ldd	r11, Z+1	; 0x01
    1972:	26 ff       	sbrs	r18, 6
    1974:	03 c0       	rjmp	.+6      	; 0x197c <vfprintf+0x182>
    1976:	65 2d       	mov	r22, r5
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x186>
    197c:	6f ef       	ldi	r22, 0xFF	; 255
    197e:	7f ef       	ldi	r23, 0xFF	; 255
    1980:	c5 01       	movw	r24, r10
    1982:	2c 87       	std	Y+12, r18	; 0x0c
    1984:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <strnlen_P>
    1988:	2c 01       	movw	r4, r24
    198a:	2c 85       	ldd	r18, Y+12	; 0x0c
    198c:	20 68       	ori	r18, 0x80	; 128
    198e:	22 2e       	mov	r2, r18
    1990:	83 01       	movw	r16, r6
    1992:	23 fc       	sbrc	r2, 3
    1994:	1b c0       	rjmp	.+54     	; 0x19cc <vfprintf+0x1d2>
    1996:	83 2d       	mov	r24, r3
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	48 16       	cp	r4, r24
    199c:	59 06       	cpc	r5, r25
    199e:	b0 f4       	brcc	.+44     	; 0x19cc <vfprintf+0x1d2>
    19a0:	b7 01       	movw	r22, r14
    19a2:	80 e2       	ldi	r24, 0x20	; 32
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    19aa:	3a 94       	dec	r3
    19ac:	f4 cf       	rjmp	.-24     	; 0x1996 <vfprintf+0x19c>
    19ae:	f5 01       	movw	r30, r10
    19b0:	27 fc       	sbrc	r2, 7
    19b2:	85 91       	lpm	r24, Z+
    19b4:	27 fe       	sbrs	r2, 7
    19b6:	81 91       	ld	r24, Z+
    19b8:	5f 01       	movw	r10, r30
    19ba:	b7 01       	movw	r22, r14
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    19c2:	31 10       	cpse	r3, r1
    19c4:	3a 94       	dec	r3
    19c6:	f1 e0       	ldi	r31, 0x01	; 1
    19c8:	4f 1a       	sub	r4, r31
    19ca:	51 08       	sbc	r5, r1
    19cc:	41 14       	cp	r4, r1
    19ce:	51 04       	cpc	r5, r1
    19d0:	71 f7       	brne	.-36     	; 0x19ae <vfprintf+0x1b4>
    19d2:	e5 c0       	rjmp	.+458    	; 0x1b9e <vfprintf+0x3a4>
    19d4:	84 36       	cpi	r24, 0x64	; 100
    19d6:	11 f0       	breq	.+4      	; 0x19dc <vfprintf+0x1e2>
    19d8:	89 36       	cpi	r24, 0x69	; 105
    19da:	39 f5       	brne	.+78     	; 0x1a2a <vfprintf+0x230>
    19dc:	f8 01       	movw	r30, r16
    19de:	27 ff       	sbrs	r18, 7
    19e0:	07 c0       	rjmp	.+14     	; 0x19f0 <vfprintf+0x1f6>
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0c 5f       	subi	r16, 0xFC	; 252
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <vfprintf+0x206>
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	07 2e       	mov	r0, r23
    19f6:	00 0c       	add	r0, r0
    19f8:	88 0b       	sbc	r24, r24
    19fa:	99 0b       	sbc	r25, r25
    19fc:	0e 5f       	subi	r16, 0xFE	; 254
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	2f 76       	andi	r18, 0x6F	; 111
    1a02:	72 2e       	mov	r7, r18
    1a04:	97 ff       	sbrs	r25, 7
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <vfprintf+0x220>
    1a08:	90 95       	com	r25
    1a0a:	80 95       	com	r24
    1a0c:	70 95       	com	r23
    1a0e:	61 95       	neg	r22
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	20 68       	ori	r18, 0x80	; 128
    1a18:	72 2e       	mov	r7, r18
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	a4 01       	movw	r20, r8
    1a20:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    1a24:	a8 2e       	mov	r10, r24
    1a26:	a8 18       	sub	r10, r8
    1a28:	44 c0       	rjmp	.+136    	; 0x1ab2 <vfprintf+0x2b8>
    1a2a:	85 37       	cpi	r24, 0x75	; 117
    1a2c:	29 f4       	brne	.+10     	; 0x1a38 <vfprintf+0x23e>
    1a2e:	2f 7e       	andi	r18, 0xEF	; 239
    1a30:	b2 2e       	mov	r11, r18
    1a32:	2a e0       	ldi	r18, 0x0A	; 10
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	25 c0       	rjmp	.+74     	; 0x1a82 <vfprintf+0x288>
    1a38:	f2 2f       	mov	r31, r18
    1a3a:	f9 7f       	andi	r31, 0xF9	; 249
    1a3c:	bf 2e       	mov	r11, r31
    1a3e:	8f 36       	cpi	r24, 0x6F	; 111
    1a40:	c1 f0       	breq	.+48     	; 0x1a72 <vfprintf+0x278>
    1a42:	18 f4       	brcc	.+6      	; 0x1a4a <vfprintf+0x250>
    1a44:	88 35       	cpi	r24, 0x58	; 88
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <vfprintf+0x26c>
    1a48:	b4 c0       	rjmp	.+360    	; 0x1bb2 <vfprintf+0x3b8>
    1a4a:	80 37       	cpi	r24, 0x70	; 112
    1a4c:	19 f0       	breq	.+6      	; 0x1a54 <vfprintf+0x25a>
    1a4e:	88 37       	cpi	r24, 0x78	; 120
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <vfprintf+0x260>
    1a52:	af c0       	rjmp	.+350    	; 0x1bb2 <vfprintf+0x3b8>
    1a54:	2f 2f       	mov	r18, r31
    1a56:	20 61       	ori	r18, 0x10	; 16
    1a58:	b2 2e       	mov	r11, r18
    1a5a:	b4 fe       	sbrs	r11, 4
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <vfprintf+0x27e>
    1a5e:	8b 2d       	mov	r24, r11
    1a60:	84 60       	ori	r24, 0x04	; 4
    1a62:	b8 2e       	mov	r11, r24
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <vfprintf+0x27e>
    1a66:	24 ff       	sbrs	r18, 4
    1a68:	0a c0       	rjmp	.+20     	; 0x1a7e <vfprintf+0x284>
    1a6a:	9f 2f       	mov	r25, r31
    1a6c:	96 60       	ori	r25, 0x06	; 6
    1a6e:	b9 2e       	mov	r11, r25
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <vfprintf+0x284>
    1a72:	28 e0       	ldi	r18, 0x08	; 8
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <vfprintf+0x288>
    1a78:	20 e1       	ldi	r18, 0x10	; 16
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0x288>
    1a7e:	20 e1       	ldi	r18, 0x10	; 16
    1a80:	32 e0       	ldi	r19, 0x02	; 2
    1a82:	f8 01       	movw	r30, r16
    1a84:	b7 fe       	sbrs	r11, 7
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <vfprintf+0x29c>
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	0c 5f       	subi	r16, 0xFC	; 252
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <vfprintf+0x2a8>
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 5f       	subi	r16, 0xFE	; 254
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	a4 01       	movw	r20, r8
    1aa4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    1aa8:	a8 2e       	mov	r10, r24
    1aaa:	a8 18       	sub	r10, r8
    1aac:	fb 2d       	mov	r31, r11
    1aae:	ff 77       	andi	r31, 0x7F	; 127
    1ab0:	7f 2e       	mov	r7, r31
    1ab2:	76 fe       	sbrs	r7, 6
    1ab4:	0b c0       	rjmp	.+22     	; 0x1acc <vfprintf+0x2d2>
    1ab6:	37 2d       	mov	r19, r7
    1ab8:	3e 7f       	andi	r19, 0xFE	; 254
    1aba:	a5 14       	cp	r10, r5
    1abc:	50 f4       	brcc	.+20     	; 0x1ad2 <vfprintf+0x2d8>
    1abe:	74 fe       	sbrs	r7, 4
    1ac0:	0a c0       	rjmp	.+20     	; 0x1ad6 <vfprintf+0x2dc>
    1ac2:	72 fc       	sbrc	r7, 2
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <vfprintf+0x2dc>
    1ac6:	37 2d       	mov	r19, r7
    1ac8:	3e 7e       	andi	r19, 0xEE	; 238
    1aca:	05 c0       	rjmp	.+10     	; 0x1ad6 <vfprintf+0x2dc>
    1acc:	ba 2c       	mov	r11, r10
    1ace:	37 2d       	mov	r19, r7
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <vfprintf+0x2de>
    1ad2:	ba 2c       	mov	r11, r10
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <vfprintf+0x2de>
    1ad6:	b5 2c       	mov	r11, r5
    1ad8:	34 ff       	sbrs	r19, 4
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <vfprintf+0x2fc>
    1adc:	fe 01       	movw	r30, r28
    1ade:	ea 0d       	add	r30, r10
    1ae0:	f1 1d       	adc	r31, r1
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 33       	cpi	r24, 0x30	; 48
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <vfprintf+0x2f2>
    1ae8:	39 7e       	andi	r19, 0xE9	; 233
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <vfprintf+0x304>
    1aec:	32 ff       	sbrs	r19, 2
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <vfprintf+0x302>
    1af0:	b3 94       	inc	r11
    1af2:	b3 94       	inc	r11
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <vfprintf+0x304>
    1af6:	83 2f       	mov	r24, r19
    1af8:	86 78       	andi	r24, 0x86	; 134
    1afa:	09 f0       	breq	.+2      	; 0x1afe <vfprintf+0x304>
    1afc:	b3 94       	inc	r11
    1afe:	33 fd       	sbrc	r19, 3
    1b00:	13 c0       	rjmp	.+38     	; 0x1b28 <vfprintf+0x32e>
    1b02:	30 ff       	sbrs	r19, 0
    1b04:	06 c0       	rjmp	.+12     	; 0x1b12 <vfprintf+0x318>
    1b06:	5a 2c       	mov	r5, r10
    1b08:	b3 14       	cp	r11, r3
    1b0a:	18 f4       	brcc	.+6      	; 0x1b12 <vfprintf+0x318>
    1b0c:	53 0c       	add	r5, r3
    1b0e:	5b 18       	sub	r5, r11
    1b10:	b3 2c       	mov	r11, r3
    1b12:	b3 14       	cp	r11, r3
    1b14:	68 f4       	brcc	.+26     	; 0x1b30 <vfprintf+0x336>
    1b16:	b7 01       	movw	r22, r14
    1b18:	80 e2       	ldi	r24, 0x20	; 32
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	3c 87       	std	Y+12, r19	; 0x0c
    1b1e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1b22:	b3 94       	inc	r11
    1b24:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b26:	f5 cf       	rjmp	.-22     	; 0x1b12 <vfprintf+0x318>
    1b28:	b3 14       	cp	r11, r3
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <vfprintf+0x336>
    1b2c:	3b 18       	sub	r3, r11
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <vfprintf+0x338>
    1b30:	31 2c       	mov	r3, r1
    1b32:	34 ff       	sbrs	r19, 4
    1b34:	12 c0       	rjmp	.+36     	; 0x1b5a <vfprintf+0x360>
    1b36:	b7 01       	movw	r22, r14
    1b38:	80 e3       	ldi	r24, 0x30	; 48
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	3c 87       	std	Y+12, r19	; 0x0c
    1b3e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1b42:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b44:	32 ff       	sbrs	r19, 2
    1b46:	17 c0       	rjmp	.+46     	; 0x1b76 <vfprintf+0x37c>
    1b48:	31 fd       	sbrc	r19, 1
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <vfprintf+0x358>
    1b4c:	88 e7       	ldi	r24, 0x78	; 120
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <vfprintf+0x35c>
    1b52:	88 e5       	ldi	r24, 0x58	; 88
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	b7 01       	movw	r22, r14
    1b58:	0c c0       	rjmp	.+24     	; 0x1b72 <vfprintf+0x378>
    1b5a:	83 2f       	mov	r24, r19
    1b5c:	86 78       	andi	r24, 0x86	; 134
    1b5e:	59 f0       	breq	.+22     	; 0x1b76 <vfprintf+0x37c>
    1b60:	31 ff       	sbrs	r19, 1
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <vfprintf+0x36e>
    1b64:	8b e2       	ldi	r24, 0x2B	; 43
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <vfprintf+0x370>
    1b68:	80 e2       	ldi	r24, 0x20	; 32
    1b6a:	37 fd       	sbrc	r19, 7
    1b6c:	8d e2       	ldi	r24, 0x2D	; 45
    1b6e:	b7 01       	movw	r22, r14
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1b76:	a5 14       	cp	r10, r5
    1b78:	38 f4       	brcc	.+14     	; 0x1b88 <vfprintf+0x38e>
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1b84:	5a 94       	dec	r5
    1b86:	f7 cf       	rjmp	.-18     	; 0x1b76 <vfprintf+0x37c>
    1b88:	aa 94       	dec	r10
    1b8a:	f4 01       	movw	r30, r8
    1b8c:	ea 0d       	add	r30, r10
    1b8e:	f1 1d       	adc	r31, r1
    1b90:	80 81       	ld	r24, Z
    1b92:	b7 01       	movw	r22, r14
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1b9a:	a1 10       	cpse	r10, r1
    1b9c:	f5 cf       	rjmp	.-22     	; 0x1b88 <vfprintf+0x38e>
    1b9e:	33 20       	and	r3, r3
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <vfprintf+0x3aa>
    1ba2:	51 ce       	rjmp	.-862    	; 0x1846 <vfprintf+0x4c>
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fputc>
    1bae:	3a 94       	dec	r3
    1bb0:	f6 cf       	rjmp	.-20     	; 0x1b9e <vfprintf+0x3a4>
    1bb2:	f7 01       	movw	r30, r14
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x3c4>
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	2c 96       	adiw	r28, 0x0c	; 12
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	bf 90       	pop	r11
    1bdc:	af 90       	pop	r10
    1bde:	9f 90       	pop	r9
    1be0:	8f 90       	pop	r8
    1be2:	7f 90       	pop	r7
    1be4:	6f 90       	pop	r6
    1be6:	5f 90       	pop	r5
    1be8:	4f 90       	pop	r4
    1bea:	3f 90       	pop	r3
    1bec:	2f 90       	pop	r2
    1bee:	08 95       	ret

00001bf0 <strnlen_P>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	05 90       	lpm	r0, Z+
    1bf4:	61 50       	subi	r22, 0x01	; 1
    1bf6:	70 40       	sbci	r23, 0x00	; 0
    1bf8:	01 10       	cpse	r0, r1
    1bfa:	d8 f7       	brcc	.-10     	; 0x1bf2 <strnlen_P+0x2>
    1bfc:	80 95       	com	r24
    1bfe:	90 95       	com	r25
    1c00:	8e 0f       	add	r24, r30
    1c02:	9f 1f       	adc	r25, r31
    1c04:	08 95       	ret

00001c06 <strnlen>:
    1c06:	fc 01       	movw	r30, r24
    1c08:	61 50       	subi	r22, 0x01	; 1
    1c0a:	70 40       	sbci	r23, 0x00	; 0
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	01 10       	cpse	r0, r1
    1c10:	d8 f7       	brcc	.-10     	; 0x1c08 <strnlen+0x2>
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	8e 0f       	add	r24, r30
    1c18:	9f 1f       	adc	r25, r31
    1c1a:	08 95       	ret

00001c1c <fputc>:
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	fb 01       	movw	r30, r22
    1c26:	23 81       	ldd	r18, Z+3	; 0x03
    1c28:	21 fd       	sbrc	r18, 1
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <fputc+0x16>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	28 c0       	rjmp	.+80     	; 0x1c82 <fputc+0x66>
    1c32:	22 ff       	sbrs	r18, 2
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <fputc+0x46>
    1c36:	46 81       	ldd	r20, Z+6	; 0x06
    1c38:	57 81       	ldd	r21, Z+7	; 0x07
    1c3a:	24 81       	ldd	r18, Z+4	; 0x04
    1c3c:	35 81       	ldd	r19, Z+5	; 0x05
    1c3e:	42 17       	cp	r20, r18
    1c40:	53 07       	cpc	r21, r19
    1c42:	44 f4       	brge	.+16     	; 0x1c54 <fputc+0x38>
    1c44:	a0 81       	ld	r26, Z
    1c46:	b1 81       	ldd	r27, Z+1	; 0x01
    1c48:	9d 01       	movw	r18, r26
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	31 83       	std	Z+1, r19	; 0x01
    1c50:	20 83       	st	Z, r18
    1c52:	8c 93       	st	X, r24
    1c54:	26 81       	ldd	r18, Z+6	; 0x06
    1c56:	37 81       	ldd	r19, Z+7	; 0x07
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	37 83       	std	Z+7, r19	; 0x07
    1c5e:	26 83       	std	Z+6, r18	; 0x06
    1c60:	10 c0       	rjmp	.+32     	; 0x1c82 <fputc+0x66>
    1c62:	eb 01       	movw	r28, r22
    1c64:	09 2f       	mov	r16, r25
    1c66:	18 2f       	mov	r17, r24
    1c68:	00 84       	ldd	r0, Z+8	; 0x08
    1c6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	09 95       	icall
    1c70:	89 2b       	or	r24, r25
    1c72:	e1 f6       	brne	.-72     	; 0x1c2c <fputc+0x10>
    1c74:	8e 81       	ldd	r24, Y+6	; 0x06
    1c76:	9f 81       	ldd	r25, Y+7	; 0x07
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
    1c7e:	81 2f       	mov	r24, r17
    1c80:	90 2f       	mov	r25, r16
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <__ultoa_invert>:
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	aa 27       	eor	r26, r26
    1c90:	28 30       	cpi	r18, 0x08	; 8
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <__ultoa_invert+0x5c>
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	81 f1       	breq	.+96     	; 0x1cf8 <__ultoa_invert+0x6c>
    1c98:	e8 94       	clt
    1c9a:	6f 93       	push	r22
    1c9c:	6e 7f       	andi	r22, 0xFE	; 254
    1c9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	af 4f       	sbci	r26, 0xFF	; 255
    1ca8:	b1 e0       	ldi	r27, 0x01	; 1
    1caa:	3e d0       	rcall	.+124    	; 0x1d28 <__ultoa_invert+0x9c>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	3c d0       	rcall	.+120    	; 0x1d28 <__ultoa_invert+0x9c>
    1cb0:	67 0f       	add	r22, r23
    1cb2:	78 1f       	adc	r23, r24
    1cb4:	89 1f       	adc	r24, r25
    1cb6:	9a 1f       	adc	r25, r26
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	8a 1f       	adc	r24, r26
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	6a 0f       	add	r22, r26
    1cc6:	71 1d       	adc	r23, r1
    1cc8:	81 1d       	adc	r24, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	20 d0       	rcall	.+64     	; 0x1d10 <__ultoa_invert+0x84>
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__ultoa_invert+0x48>
    1cd2:	68 94       	set
    1cd4:	3f 91       	pop	r19
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	26 9f       	mul	r18, r22
    1cda:	11 24       	eor	r1, r1
    1cdc:	30 19       	sub	r19, r0
    1cde:	30 5d       	subi	r19, 0xD0	; 208
    1ce0:	31 93       	st	Z+, r19
    1ce2:	de f6       	brtc	.-74     	; 0x1c9a <__ultoa_invert+0xe>
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	08 95       	ret
    1ce8:	46 2f       	mov	r20, r22
    1cea:	47 70       	andi	r20, 0x07	; 7
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	41 93       	st	Z+, r20
    1cf0:	b3 e0       	ldi	r27, 0x03	; 3
    1cf2:	0f d0       	rcall	.+30     	; 0x1d12 <__ultoa_invert+0x86>
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x5c>
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <__ultoa_invert+0x58>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	4f 70       	andi	r20, 0x0F	; 15
    1cfc:	40 5d       	subi	r20, 0xD0	; 208
    1cfe:	4a 33       	cpi	r20, 0x3A	; 58
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__ultoa_invert+0x7c>
    1d02:	49 5d       	subi	r20, 0xD9	; 217
    1d04:	31 fd       	sbrc	r19, 1
    1d06:	40 52       	subi	r20, 0x20	; 32
    1d08:	41 93       	st	Z+, r20
    1d0a:	02 d0       	rcall	.+4      	; 0x1d10 <__ultoa_invert+0x84>
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__ultoa_invert+0x6c>
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <__ultoa_invert+0x58>
    1d10:	b4 e0       	ldi	r27, 0x04	; 4
    1d12:	a6 95       	lsr	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0x86>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 05       	cpc	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	08 95       	ret
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	0a 2e       	mov	r0, r26
    1d2e:	06 94       	lsr	r0
    1d30:	57 95       	ror	r21
    1d32:	47 95       	ror	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__ultoa_invert+0xa2>
    1d3c:	62 0f       	add	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	a0 1d       	adc	r26, r0
    1d46:	08 95       	ret

00001d48 <_exit>:
    1d48:	f8 94       	cli

00001d4a <__stop_program>:
    1d4a:	ff cf       	rjmp	.-2      	; 0x1d4a <__stop_program>
